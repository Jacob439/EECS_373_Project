
LoRa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008188  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008348  08008348  00018348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008390  08008390  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008390  08008390  00018390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008398  08008398  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008398  08008398  00018398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800839c  0800839c  0001839c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080083a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  2000000c  080083ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  080083ac  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000139ba  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002670  00000000  00000000  00033a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  000360b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe2  00000000  00000000  00037520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bd65  00000000  00000000  00038502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015da9  00000000  00000000  00064267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00116971  00000000  00000000  0007a010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057e0  00000000  00000000  00190984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00196164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008330 	.word	0x08008330

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08008330 	.word	0x08008330

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b970 	b.w	80004f8 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	460b      	mov	r3, r1
 8000506:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 800050c:	78fb      	ldrb	r3, [r7, #3]
 800050e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000512:	b2db      	uxtb	r3, r3
 8000514:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6858      	ldr	r0, [r3, #4]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	8adb      	ldrh	r3, [r3, #22]
 800051e:	2200      	movs	r2, #0
 8000520:	4619      	mov	r1, r3
 8000522:	f003 f875 	bl	8003610 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6818      	ldr	r0, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	1cf9      	adds	r1, r7, #3
 8000530:	2201      	movs	r2, #1
 8000532:	f006 f99e 	bl	8006872 <HAL_SPI_Transmit>
 8000536:	4603      	mov	r3, r0
 8000538:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	f107 010f 	add.w	r1, r7, #15
 8000546:	2201      	movs	r2, #1
 8000548:	f006 fb08 	bl	8006b5c <HAL_SPI_Receive>
 800054c:	4603      	mov	r3, r0
 800054e:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	6858      	ldr	r0, [r3, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	8adb      	ldrh	r3, [r3, #22]
 8000558:	2201      	movs	r2, #1
 800055a:	4619      	mov	r1, r3
 800055c:	f003 f858 	bl	8003610 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000560:	7bfb      	ldrb	r3, [r7, #15]
}
 8000562:	4618      	mov	r0, r3
 8000564:	3718      	adds	r7, #24
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b084      	sub	sp, #16
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	460b      	mov	r3, r1
 8000574:	70fb      	strb	r3, [r7, #3]
 8000576:	4613      	mov	r3, r2
 8000578:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800057a:	78fb      	ldrb	r3, [r7, #3]
 800057c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000580:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000582:	78bb      	ldrb	r3, [r7, #2]
 8000584:	021b      	lsls	r3, r3, #8
 8000586:	b21a      	sxth	r2, r3
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	b21b      	sxth	r3, r3
 800058c:	4313      	orrs	r3, r2
 800058e:	b21b      	sxth	r3, r3
 8000590:	b29b      	uxth	r3, r3
 8000592:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6858      	ldr	r0, [r3, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	8adb      	ldrh	r3, [r3, #22]
 800059c:	2200      	movs	r2, #0
 800059e:	4619      	mov	r1, r3
 80005a0:	f003 f836 	bl	8003610 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	6818      	ldr	r0, [r3, #0]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	f107 010a 	add.w	r1, r7, #10
 80005b0:	2202      	movs	r2, #2
 80005b2:	f006 f95e 	bl	8006872 <HAL_SPI_Transmit>
 80005b6:	4603      	mov	r3, r0
 80005b8:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6858      	ldr	r0, [r3, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	8adb      	ldrh	r3, [r3, #22]
 80005c2:	2201      	movs	r2, #1
 80005c4:	4619      	mov	r1, r3
 80005c6:	f003 f823 	bl	8003610 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	460b      	mov	r3, r1
 80005dc:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	461a      	mov	r2, r3
 80005e8:	2101      	movs	r1, #1
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f7ff ffbd 	bl	800056a <write_register>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	2b2c      	cmp	r3, #44	; 0x2c
 8000608:	d801      	bhi.n	800060e <set_OCP+0x16>
    imax = 45;
 800060a:	232d      	movs	r3, #45	; 0x2d
 800060c:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 800060e:	78fb      	ldrb	r3, [r7, #3]
 8000610:	2bf0      	cmp	r3, #240	; 0xf0
 8000612:	d901      	bls.n	8000618 <set_OCP+0x20>
    imax = 240;
 8000614:	23f0      	movs	r3, #240	; 0xf0
 8000616:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8000618:	78fb      	ldrb	r3, [r7, #3]
 800061a:	2b81      	cmp	r3, #129	; 0x81
 800061c:	d809      	bhi.n	8000632 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	3b2d      	subs	r3, #45	; 0x2d
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <set_OCP+0x68>)
 8000624:	fb82 1203 	smull	r1, r2, r2, r3
 8000628:	1052      	asrs	r2, r2, #1
 800062a:	17db      	asrs	r3, r3, #31
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e008      	b.n	8000644 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8000632:	78fb      	ldrb	r3, [r7, #3]
 8000634:	331e      	adds	r3, #30
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <set_OCP+0x68>)
 8000638:	fb82 1203 	smull	r1, r2, r2, r3
 800063c:	1092      	asrs	r2, r2, #2
 800063e:	17db      	asrs	r3, r3, #31
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	f043 0320 	orr.w	r3, r3, #32
 800064a:	b2db      	uxtb	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	210b      	movs	r1, #11
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ff8a 	bl	800056a <write_register>
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	66666667 	.word	0x66666667

08000664 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8000664:	b5b0      	push	{r4, r5, r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 800066c:	211d      	movs	r1, #29
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f7ff ff44 	bl	80004fc <read_register>
 8000674:	4603      	mov	r3, r0
 8000676:	091b      	lsrs	r3, r3, #4
 8000678:	b2db      	uxtb	r3, r3
 800067a:	b2db      	uxtb	r3, r3
 800067c:	2200      	movs	r2, #0
 800067e:	461c      	mov	r4, r3
 8000680:	4615      	mov	r5, r2
 8000682:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8000686:	211e      	movs	r1, #30
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff ff37 	bl	80004fc <read_register>
 800068e:	4603      	mov	r3, r0
 8000690:	091b      	lsrs	r3, r3, #4
 8000692:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8000694:	2304      	movs	r3, #4
 8000696:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	2b0a      	cmp	r3, #10
 800069c:	d908      	bls.n	80006b0 <set_low_data_rate_optimization+0x4c>
 800069e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80006a2:	1fd1      	subs	r1, r2, #7
 80006a4:	430b      	orrs	r3, r1
 80006a6:	d103      	bne.n	80006b0 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 80006a8:	7ffb      	ldrb	r3, [r7, #31]
 80006aa:	f043 0308 	orr.w	r3, r3, #8
 80006ae:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 80006b0:	7ffb      	ldrb	r3, [r7, #31]
 80006b2:	461a      	mov	r2, r3
 80006b4:	2126      	movs	r1, #38	; 0x26
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ff57 	bl	800056a <write_register>
}
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bdb0      	pop	{r4, r5, r7, pc}

080006c4 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 80006cc:	2100      	movs	r1, #0
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff ff7f 	bl	80005d2 <set_mode>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 80006e4:	2101      	movs	r1, #1
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ff73 	bl	80005d2 <set_mode>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80006fc:	211d      	movs	r1, #29
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f7ff fefc 	bl	80004fc <read_register>
 8000704:	4603      	mov	r3, r0
 8000706:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	f023 0301 	bic.w	r3, r3, #1
 800070e:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	461a      	mov	r2, r3
 8000714:	211d      	movs	r1, #29
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f7ff ff27 	bl	800056a <write_register>
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	691b      	ldr	r3, [r3, #16]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d10e      	bne.n	8000756 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	2b0f      	cmp	r3, #15
 800073c:	d901      	bls.n	8000742 <lora_set_tx_power+0x1e>
      level = 15;
 800073e:	230f      	movs	r3, #15
 8000740:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8000742:	78fb      	ldrb	r3, [r7, #3]
 8000744:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000748:	b2db      	uxtb	r3, r3
 800074a:	461a      	mov	r2, r3
 800074c:	2109      	movs	r1, #9
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff ff0b 	bl	800056a <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8000754:	e02e      	b.n	80007b4 <lora_set_tx_power+0x90>
    if (level > 20) {
 8000756:	78fb      	ldrb	r3, [r7, #3]
 8000758:	2b14      	cmp	r3, #20
 800075a:	d901      	bls.n	8000760 <lora_set_tx_power+0x3c>
      level = 20;
 800075c:	2314      	movs	r3, #20
 800075e:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d801      	bhi.n	800076a <lora_set_tx_power+0x46>
      level = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800076a:	78fb      	ldrb	r3, [r7, #3]
 800076c:	2b11      	cmp	r3, #17
 800076e:	d90c      	bls.n	800078a <lora_set_tx_power+0x66>
      level -= 3;
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	3b03      	subs	r3, #3
 8000774:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8000776:	2287      	movs	r2, #135	; 0x87
 8000778:	214d      	movs	r1, #77	; 0x4d
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff fef5 	bl	800056a <write_register>
      set_OCP(lora, 140);
 8000780:	218c      	movs	r1, #140	; 0x8c
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff ff38 	bl	80005f8 <set_OCP>
 8000788:	e008      	b.n	800079c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800078a:	2284      	movs	r2, #132	; 0x84
 800078c:	214d      	movs	r1, #77	; 0x4d
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff feeb 	bl	800056a <write_register>
      set_OCP(lora, 97);
 8000794:	2161      	movs	r1, #97	; 0x61
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ff2e 	bl	80005f8 <set_OCP>
    level -= 2;
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	3b02      	subs	r3, #2
 80007a0:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 80007a2:	78fb      	ldrb	r3, [r7, #3]
 80007a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	461a      	mov	r2, r3
 80007ac:	2109      	movs	r1, #9
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff fedb 	bl	800056a <write_register>
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 80007c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	f04f 0100 	mov.w	r1, #0
 80007d4:	04d9      	lsls	r1, r3, #19
 80007d6:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80007da:	04d0      	lsls	r0, r2, #19
 80007dc:	4a19      	ldr	r2, [pc, #100]	; (8000844 <lora_set_frequency+0x88>)
 80007de:	f04f 0300 	mov.w	r3, #0
 80007e2:	f7ff fd0d 	bl	8000200 <__aeabi_uldivmod>
 80007e6:	4602      	mov	r2, r0
 80007e8:	460b      	mov	r3, r1
 80007ea:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80007ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80007f2:	f04f 0200 	mov.w	r2, #0
 80007f6:	f04f 0300 	mov.w	r3, #0
 80007fa:	0c02      	lsrs	r2, r0, #16
 80007fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000800:	0c0b      	lsrs	r3, r1, #16
 8000802:	b2d3      	uxtb	r3, r2
 8000804:	461a      	mov	r2, r3
 8000806:	2106      	movs	r1, #6
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f7ff feae 	bl	800056a <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 800080e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000812:	f04f 0200 	mov.w	r2, #0
 8000816:	f04f 0300 	mov.w	r3, #0
 800081a:	0a02      	lsrs	r2, r0, #8
 800081c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000820:	0a0b      	lsrs	r3, r1, #8
 8000822:	b2d3      	uxtb	r3, r2
 8000824:	461a      	mov	r2, r3
 8000826:	2107      	movs	r1, #7
 8000828:	68f8      	ldr	r0, [r7, #12]
 800082a:	f7ff fe9e 	bl	800056a <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 800082e:	7c3b      	ldrb	r3, [r7, #16]
 8000830:	461a      	mov	r2, r3
 8000832:	2108      	movs	r1, #8
 8000834:	68f8      	ldr	r0, [r7, #12]
 8000836:	f7ff fe98 	bl	800056a <write_register>
}
 800083a:	bf00      	nop
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	01e84800 	.word	0x01e84800

08000848 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8000854:	78fb      	ldrb	r3, [r7, #3]
 8000856:	2b05      	cmp	r3, #5
 8000858:	d802      	bhi.n	8000860 <lora_set_spreading_factor+0x18>
    sf = 6;
 800085a:	2306      	movs	r3, #6
 800085c:	70fb      	strb	r3, [r7, #3]
 800085e:	e004      	b.n	800086a <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	2b0c      	cmp	r3, #12
 8000864:	d901      	bls.n	800086a <lora_set_spreading_factor+0x22>
    sf = 12;
 8000866:	230c      	movs	r3, #12
 8000868:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 800086a:	78fb      	ldrb	r3, [r7, #3]
 800086c:	2b06      	cmp	r3, #6
 800086e:	d10a      	bne.n	8000886 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8000870:	22c5      	movs	r2, #197	; 0xc5
 8000872:	2131      	movs	r1, #49	; 0x31
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff fe78 	bl	800056a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 800087a:	220c      	movs	r2, #12
 800087c:	2137      	movs	r1, #55	; 0x37
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff fe73 	bl	800056a <write_register>
 8000884:	e009      	b.n	800089a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8000886:	22c3      	movs	r2, #195	; 0xc3
 8000888:	2131      	movs	r1, #49	; 0x31
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff fe6d 	bl	800056a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000890:	220a      	movs	r2, #10
 8000892:	2137      	movs	r1, #55	; 0x37
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f7ff fe68 	bl	800056a <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800089a:	211e      	movs	r1, #30
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff fe2d 	bl	80004fc <read_register>
 80008a2:	4603      	mov	r3, r0
 80008a4:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 80008a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008aa:	f003 030f 	and.w	r3, r3, #15
 80008ae:	b25a      	sxtb	r2, r3
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	461a      	mov	r2, r3
 80008c0:	211e      	movs	r1, #30
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff fe51 	bl	800056a <write_register>

  set_low_data_rate_optimization(lora);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff fecb 	bl	8000664 <set_low_data_rate_optimization>
}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	460b      	mov	r3, r1
 80008e0:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 80008e2:	887b      	ldrh	r3, [r7, #2]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	461a      	mov	r2, r3
 80008ec:	2120      	movs	r1, #32
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff fe3b 	bl	800056a <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 80008f4:	887b      	ldrh	r3, [r7, #2]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	f003 030f 	and.w	r3, r3, #15
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	2121      	movs	r1, #33	; 0x21
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff fe31 	bl	800056a <write_register>
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8000918:	2142      	movs	r1, #66	; 0x42
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff fdee 	bl	80004fc <read_register>
 8000920:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b086      	sub	sp, #24
 800092e:	af00      	add	r7, sp, #0
 8000930:	60f8      	str	r0, [r7, #12]
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
 8000936:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	887a      	ldrh	r2, [r7, #2]
 8000948:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 800094a:	6a3a      	ldr	r2, [r7, #32]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2201      	movs	r2, #1
 8000954:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	2200      	movs	r2, #0
 800095a:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2200      	movs	r2, #0
 8000960:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000968:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 800096a:	68f8      	ldr	r0, [r7, #12]
 800096c:	f7ff ffd0 	bl	8000910 <lora_version>
 8000970:	4603      	mov	r3, r0
 8000972:	75fb      	strb	r3, [r7, #23]
//    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
//    return LORA_ERROR;
//  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f7ff fea5 	bl	80006c4 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f7ff fea2 	bl	80006c4 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000980:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f7ff ff19 	bl	80007bc <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 800098a:	2107      	movs	r1, #7
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f7ff ff5b 	bl	8000848 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000992:	210a      	movs	r1, #10
 8000994:	68f8      	ldr	r0, [r7, #12]
 8000996:	f7ff ff9e 	bl	80008d6 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 800099a:	68f8      	ldr	r0, [r7, #12]
 800099c:	f7ff feaa 	bl	80006f4 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 80009a0:	210c      	movs	r1, #12
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	f7ff fdaa 	bl	80004fc <read_register>
 80009a8:	4603      	mov	r3, r0
 80009aa:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 80009ac:	7dbb      	ldrb	r3, [r7, #22]
 80009ae:	f043 0303 	orr.w	r3, r3, #3
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	210c      	movs	r1, #12
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	f7ff fdd6 	bl	800056a <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 80009be:	2204      	movs	r2, #4
 80009c0:	2126      	movs	r1, #38	; 0x26
 80009c2:	68f8      	ldr	r0, [r7, #12]
 80009c4:	f7ff fdd1 	bl	800056a <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 80009c8:	2111      	movs	r1, #17
 80009ca:	68f8      	ldr	r0, [r7, #12]
 80009cc:	f7ff feaa 	bl	8000724 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f7ff fe83 	bl	80006dc <lora_mode_standby>

  return LORA_OK;
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e6:	f001 faaa 	bl	8001f3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ea:	f000 f831 	bl	8000a50 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009ee:	f000 f881 	bl	8000af4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f2:	f000 fd31 	bl	8001458 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009f6:	f000 f8af 	bl	8000b58 <MX_ADC1_Init>
  MX_COMP1_Init();
 80009fa:	f000 f911 	bl	8000c20 <MX_COMP1_Init>
  MX_COMP2_Init();
 80009fe:	f000 f93d 	bl	8000c7c <MX_COMP2_Init>
  MX_SAI1_Init();
 8000a02:	f000 f967 	bl	8000cd4 <MX_SAI1_Init>
  MX_SAI2_Init();
 8000a06:	f000 f9fd 	bl	8000e04 <MX_SAI2_Init>
  MX_TIM1_Init();
 8000a0a:	f000 faa1 	bl	8000f50 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a0e:	f000 fb6f 	bl	80010f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a12:	f000 fbd1 	bl	80011b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a16:	f000 fc35 	bl	8001284 <MX_TIM4_Init>
  MX_TIM15_Init();
 8000a1a:	f000 fc99 	bl	8001350 <MX_TIM15_Init>
  MX_SPI2_Init();
 8000a1e:	f000 fa59 	bl	8000ed4 <MX_SPI2_Init>
//  HAL_SPI_Transmit(&hspi2, 0x00, 0, HAL_MAX_DELAY);
//  HAL
  lora_sx1276 lora;

    // SX1276 compatible module connected to SPI1, NSS pin connected to GPIO with label LORA_NSS
    uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US);
 8000a22:	1d38      	adds	r0, r7, #4
 8000a24:	a308      	add	r3, pc, #32	; (adr r3, 8000a48 <main+0x68>)
 8000a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a2a:	e9cd 2300 	strd	r2, r3, [sp]
 8000a2e:	2301      	movs	r3, #1
 8000a30:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <main+0x60>)
 8000a32:	4904      	ldr	r1, [pc, #16]	; (8000a44 <main+0x64>)
 8000a34:	f7ff ff79 	bl	800092a <lora_init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	77fb      	strb	r3, [r7, #31]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <main+0x5c>
 8000a3e:	bf00      	nop
 8000a40:	48000c00 	.word	0x48000c00
 8000a44:	200002a4 	.word	0x200002a4
 8000a48:	3689cac0 	.word	0x3689cac0
 8000a4c:	00000000 	.word	0x00000000

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b096      	sub	sp, #88	; 0x58
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2244      	movs	r2, #68	; 0x44
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f007 fc3a 	bl	80082d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	463b      	mov	r3, r7
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a76:	f002 fe03 	bl	8003680 <HAL_PWREx_ControlVoltageScaling>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a80:	f000 fe42 	bl	8001708 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a84:	2310      	movs	r3, #16
 8000a86:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a90:	2360      	movs	r3, #96	; 0x60
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a94:	2302      	movs	r3, #2
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 fe97 	bl	80037e8 <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000ac0:	f000 fe22 	bl	8001708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ad8:	463b      	mov	r3, r7
 8000ada:	2101      	movs	r1, #1
 8000adc:	4618      	mov	r0, r3
 8000ade:	f003 fa9d 	bl	800401c <HAL_RCC_ClockConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ae8:	f000 fe0e 	bl	8001708 <Error_Handler>
  }
}
 8000aec:	bf00      	nop
 8000aee:	3758      	adds	r7, #88	; 0x58
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b0a6      	sub	sp, #152	; 0x98
 8000af8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2294      	movs	r2, #148	; 0x94
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f007 fbe9 	bl	80082d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8000b06:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8000b0a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b20:	2301      	movs	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000b24:	2318      	movs	r3, #24
 8000b26:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <PeriphCommonClock_Config+0x60>)
 8000b36:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 fd2c 	bl	8004598 <HAL_RCCEx_PeriphCLKConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000b46:	f000 fddf 	bl	8001708 <Error_Handler>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3798      	adds	r7, #152	; 0x98
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	01010000 	.word	0x01010000

08000b58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b6e:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <MX_ADC1_Init+0xbc>)
 8000b70:	4a29      	ldr	r2, [pc, #164]	; (8000c18 <MX_ADC1_Init+0xc0>)
 8000b72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b74:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <MX_ADC1_Init+0xbc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b7a:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <MX_ADC1_Init+0xbc>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <MX_ADC1_Init+0xbc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b86:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <MX_ADC1_Init+0xbc>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b8c:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <MX_ADC1_Init+0xbc>)
 8000b8e:	2204      	movs	r2, #4
 8000b90:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <MX_ADC1_Init+0xbc>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b98:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <MX_ADC1_Init+0xbc>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_ADC1_Init+0xbc>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_ADC1_Init+0xbc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bac:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <MX_ADC1_Init+0xbc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_ADC1_Init+0xbc>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <MX_ADC1_Init+0xbc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_ADC1_Init+0xbc>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_ADC1_Init+0xbc>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bce:	4811      	ldr	r0, [pc, #68]	; (8000c14 <MX_ADC1_Init+0xbc>)
 8000bd0:	f001 fbca 	bl	8002368 <HAL_ADC_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000bda:	f000 fd95 	bl	8001708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_ADC1_Init+0xc4>)
 8000be0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be2:	2306      	movs	r3, #6
 8000be4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bea:	237f      	movs	r3, #127	; 0x7f
 8000bec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf6:	463b      	mov	r3, r7
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <MX_ADC1_Init+0xbc>)
 8000bfc:	f001 fcfa 	bl	80025f4 <HAL_ADC_ConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c06:	f000 fd7f 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000028 	.word	0x20000028
 8000c18:	50040000 	.word	0x50040000
 8000c1c:	04300002 	.word	0x04300002

08000c20 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_COMP1_Init+0x50>)
 8000c26:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <MX_COMP1_Init+0x54>)
 8000c28:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_COMP1_Init+0x50>)
 8000c2c:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <MX_COMP1_Init+0x58>)
 8000c2e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_COMP1_Init+0x50>)
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_COMP1_Init+0x50>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_COMP1_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_COMP1_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_COMP1_Init+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_COMP1_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_COMP1_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_COMP1_Init+0x50>)
 8000c5c:	f002 f96e 	bl	8002f3c <HAL_COMP_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8000c66:	f000 fd4f 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000090 	.word	0x20000090
 8000c74:	40010200 	.word	0x40010200
 8000c78:	00800030 	.word	0x00800030

08000c7c <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <MX_COMP2_Init+0x50>)
 8000c82:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <MX_COMP2_Init+0x54>)
 8000c84:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_COMP2_Init+0x50>)
 8000c88:	2270      	movs	r2, #112	; 0x70
 8000c8a:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_COMP2_Init+0x50>)
 8000c8e:	2280      	movs	r2, #128	; 0x80
 8000c90:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_COMP2_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_COMP2_Init+0x50>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_COMP2_Init+0x50>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_COMP2_Init+0x50>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_COMP2_Init+0x50>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_COMP2_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_COMP2_Init+0x50>)
 8000cb8:	f002 f940 	bl	8002f3c <HAL_COMP_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8000cc2:	f000 fd21 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200000bc 	.word	0x200000bc
 8000cd0:	40010204 	.word	0x40010204

08000cd4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000cd8:	4b45      	ldr	r3, [pc, #276]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000cda:	4a46      	ldr	r2, [pc, #280]	; (8000df4 <MX_SAI1_Init+0x120>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000cde:	4b44      	ldr	r3, [pc, #272]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000ce4:	4b42      	ldr	r3, [pc, #264]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000cea:	4b41      	ldr	r3, [pc, #260]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000cec:	2240      	movs	r2, #64	; 0x40
 8000cee:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000cf0:	4b3f      	ldr	r3, [pc, #252]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000cf6:	4b3e      	ldr	r3, [pc, #248]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000cfc:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d02:	4b3b      	ldr	r3, [pc, #236]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d08:	4b39      	ldr	r3, [pc, #228]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000d0e:	4b38      	ldr	r3, [pc, #224]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d14:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d1a:	4b35      	ldr	r3, [pc, #212]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d1c:	4a36      	ldr	r2, [pc, #216]	; (8000df8 <MX_SAI1_Init+0x124>)
 8000d1e:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d20:	4b33      	ldr	r3, [pc, #204]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d26:	4b32      	ldr	r3, [pc, #200]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d2c:	4b30      	ldr	r3, [pc, #192]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d32:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000d38:	4b2d      	ldr	r3, [pc, #180]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8000d40:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000d46:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000d4e:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d50:	2208      	movs	r2, #8
 8000d52:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000d54:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d60:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d66:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000d6c:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000d78:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000d84:	481a      	ldr	r0, [pc, #104]	; (8000df0 <MX_SAI1_Init+0x11c>)
 8000d86:	f005 f985 	bl	8006094 <HAL_SAI_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8000d90:	f000 fcba 	bl	8001708 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <MX_SAI1_Init+0x128>)
 8000d96:	4a1a      	ldr	r2, [pc, #104]	; (8000e00 <MX_SAI1_Init+0x12c>)
 8000d98:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_SAI1_Init+0x128>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_SAI1_Init+0x128>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_SAI1_Init+0x128>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_SAI1_Init+0x128>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_SAI1_Init+0x128>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <MX_SAI1_Init+0x128>)
 8000dba:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <MX_SAI1_Init+0x124>)
 8000dbc:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_SAI1_Init+0x128>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <MX_SAI1_Init+0x128>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_SAI1_Init+0x128>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <MX_SAI1_Init+0x128>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4807      	ldr	r0, [pc, #28]	; (8000dfc <MX_SAI1_Init+0x128>)
 8000dde:	f005 f927 	bl	8006030 <HAL_SAI_InitProtocol>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8000de8:	f000 fc8e 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200000e8 	.word	0x200000e8
 8000df4:	40015424 	.word	0x40015424
 8000df8:	0002ee00 	.word	0x0002ee00
 8000dfc:	2000017c 	.word	0x2000017c
 8000e00:	40015404 	.word	0x40015404

08000e04 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000e08:	4b2f      	ldr	r3, [pc, #188]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e0a:	4a30      	ldr	r2, [pc, #192]	; (8000ecc <MX_SAI2_Init+0xc8>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e14:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000e1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e1c:	2240      	movs	r2, #64	; 0x40
 8000e1e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e20:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e26:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e2c:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e38:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000e3e:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e44:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e4c:	4a20      	ldr	r2, [pc, #128]	; (8000ed0 <MX_SAI2_Init+0xcc>)
 8000e4e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e50:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e80:	2208      	movs	r2, #8
 8000e82:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_SAI2_Init+0xc4>)
 8000eb6:	f005 f8ed 	bl	8006094 <HAL_SAI_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8000ec0:	f000 fc22 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000210 	.word	0x20000210
 8000ecc:	40015804 	.word	0x40015804
 8000ed0:	0002ee00 	.word	0x0002ee00

08000ed4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <MX_SPI2_Init+0x74>)
 8000eda:	4a1c      	ldr	r2, [pc, #112]	; (8000f4c <MX_SPI2_Init+0x78>)
 8000edc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_SPI2_Init+0x74>)
 8000ee0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ee4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <MX_SPI2_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <MX_SPI2_Init+0x74>)
 8000eee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ef2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <MX_SPI2_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <MX_SPI2_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_SPI2_Init+0x74>)
 8000f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f06:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_SPI2_Init+0x74>)
 8000f0a:	2208      	movs	r2, #8
 8000f0c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_SPI2_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_SPI2_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <MX_SPI2_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_SPI2_Init+0x74>)
 8000f22:	2207      	movs	r2, #7
 8000f24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <MX_SPI2_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_SPI2_Init+0x74>)
 8000f2e:	2208      	movs	r2, #8
 8000f30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_SPI2_Init+0x74>)
 8000f34:	f005 fbfa 	bl	800672c <HAL_SPI_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f3e:	f000 fbe3 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200002a4 	.word	0x200002a4
 8000f4c:	40003800 	.word	0x40003800

08000f50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b098      	sub	sp, #96	; 0x60
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000f62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]
 8000f7e:	615a      	str	r2, [r3, #20]
 8000f80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f82:	463b      	mov	r3, r7
 8000f84:	222c      	movs	r2, #44	; 0x2c
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f007 f9a5 	bl	80082d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f8e:	4b56      	ldr	r3, [pc, #344]	; (80010e8 <MX_TIM1_Init+0x198>)
 8000f90:	4a56      	ldr	r2, [pc, #344]	; (80010ec <MX_TIM1_Init+0x19c>)
 8000f92:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f94:	4b54      	ldr	r3, [pc, #336]	; (80010e8 <MX_TIM1_Init+0x198>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9a:	4b53      	ldr	r3, [pc, #332]	; (80010e8 <MX_TIM1_Init+0x198>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fa0:	4b51      	ldr	r3, [pc, #324]	; (80010e8 <MX_TIM1_Init+0x198>)
 8000fa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa8:	4b4f      	ldr	r3, [pc, #316]	; (80010e8 <MX_TIM1_Init+0x198>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fae:	4b4e      	ldr	r3, [pc, #312]	; (80010e8 <MX_TIM1_Init+0x198>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb4:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <MX_TIM1_Init+0x198>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fba:	484b      	ldr	r0, [pc, #300]	; (80010e8 <MX_TIM1_Init+0x198>)
 8000fbc:	f006 fae4 	bl	8007588 <HAL_TIM_PWM_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fc6:	f000 fb9f 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fd6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4842      	ldr	r0, [pc, #264]	; (80010e8 <MX_TIM1_Init+0x198>)
 8000fde:	f006 ffaf 	bl	8007f40 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000fe8:	f000 fb8e 	bl	8001708 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000fec:	2301      	movs	r3, #1
 8000fee:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000ff8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	2101      	movs	r1, #1
 8001000:	4839      	ldr	r0, [pc, #228]	; (80010e8 <MX_TIM1_Init+0x198>)
 8001002:	f007 f8a3 	bl	800814c <HAL_TIMEx_ConfigBreakInput>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800100c:	f000 fb7c 	bl	8001708 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001010:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001014:	461a      	mov	r2, r3
 8001016:	2102      	movs	r1, #2
 8001018:	4833      	ldr	r0, [pc, #204]	; (80010e8 <MX_TIM1_Init+0x198>)
 800101a:	f007 f897 	bl	800814c <HAL_TIMEx_ConfigBreakInput>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001024:	f000 fb70 	bl	8001708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001028:	2360      	movs	r3, #96	; 0x60
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001030:	2300      	movs	r3, #0
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001034:	2300      	movs	r3, #0
 8001036:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001044:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001048:	2200      	movs	r2, #0
 800104a:	4619      	mov	r1, r3
 800104c:	4826      	ldr	r0, [pc, #152]	; (80010e8 <MX_TIM1_Init+0x198>)
 800104e:	f006 faf3 	bl	8007638 <HAL_TIM_PWM_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001058:	f000 fb56 	bl	8001708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800105c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001060:	2204      	movs	r2, #4
 8001062:	4619      	mov	r1, r3
 8001064:	4820      	ldr	r0, [pc, #128]	; (80010e8 <MX_TIM1_Init+0x198>)
 8001066:	f006 fae7 	bl	8007638 <HAL_TIM_PWM_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8001070:	f000 fb4a 	bl	8001708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001078:	2208      	movs	r2, #8
 800107a:	4619      	mov	r1, r3
 800107c:	481a      	ldr	r0, [pc, #104]	; (80010e8 <MX_TIM1_Init+0x198>)
 800107e:	f006 fadb 	bl	8007638 <HAL_TIM_PWM_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001088:	f000 fb3e 	bl	8001708 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800108c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001090:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001096:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80010b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4807      	ldr	r0, [pc, #28]	; (80010e8 <MX_TIM1_Init+0x198>)
 80010ca:	f006 ffc1 	bl	8008050 <HAL_TIMEx_ConfigBreakDeadTime>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 80010d4:	f000 fb18 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <MX_TIM1_Init+0x198>)
 80010da:	f000 fd07 	bl	8001aec <HAL_TIM_MspPostInit>

}
 80010de:	bf00      	nop
 80010e0:	3760      	adds	r7, #96	; 0x60
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000308 	.word	0x20000308
 80010ec:	40012c00 	.word	0x40012c00

080010f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001102:	463b      	mov	r3, r7
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
 8001110:	615a      	str	r2, [r3, #20]
 8001112:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001114:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <MX_TIM2_Init+0xc4>)
 8001116:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <MX_TIM2_Init+0xc4>)
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001122:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <MX_TIM2_Init+0xc4>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001128:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <MX_TIM2_Init+0xc4>)
 800112a:	f04f 32ff 	mov.w	r2, #4294967295
 800112e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001130:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <MX_TIM2_Init+0xc4>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001136:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <MX_TIM2_Init+0xc4>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800113c:	481d      	ldr	r0, [pc, #116]	; (80011b4 <MX_TIM2_Init+0xc4>)
 800113e:	f006 fa23 	bl	8007588 <HAL_TIM_PWM_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001148:	f000 fade 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	4816      	ldr	r0, [pc, #88]	; (80011b4 <MX_TIM2_Init+0xc4>)
 800115c:	f006 fef0 	bl	8007f40 <HAL_TIMEx_MasterConfigSynchronization>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001166:	f000 facf 	bl	8001708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800116a:	2360      	movs	r3, #96	; 0x60
 800116c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	2200      	movs	r2, #0
 800117e:	4619      	mov	r1, r3
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <MX_TIM2_Init+0xc4>)
 8001182:	f006 fa59 	bl	8007638 <HAL_TIM_PWM_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800118c:	f000 fabc 	bl	8001708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	2208      	movs	r2, #8
 8001194:	4619      	mov	r1, r3
 8001196:	4807      	ldr	r0, [pc, #28]	; (80011b4 <MX_TIM2_Init+0xc4>)
 8001198:	f006 fa4e 	bl	8007638 <HAL_TIM_PWM_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80011a2:	f000 fab1 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011a6:	4803      	ldr	r0, [pc, #12]	; (80011b4 <MX_TIM2_Init+0xc4>)
 80011a8:	f000 fca0 	bl	8001aec <HAL_TIM_MspPostInit>

}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	; 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000354 	.word	0x20000354

080011b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ca:	463b      	mov	r3, r7
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <MX_TIM3_Init+0xc4>)
 80011de:	4a28      	ldr	r2, [pc, #160]	; (8001280 <MX_TIM3_Init+0xc8>)
 80011e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <MX_TIM3_Init+0xc4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e8:	4b24      	ldr	r3, [pc, #144]	; (800127c <MX_TIM3_Init+0xc4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011ee:	4b23      	ldr	r3, [pc, #140]	; (800127c <MX_TIM3_Init+0xc4>)
 80011f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <MX_TIM3_Init+0xc4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_TIM3_Init+0xc4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001202:	481e      	ldr	r0, [pc, #120]	; (800127c <MX_TIM3_Init+0xc4>)
 8001204:	f006 f9c0 	bl	8007588 <HAL_TIM_PWM_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800120e:	f000 fa7b 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	4816      	ldr	r0, [pc, #88]	; (800127c <MX_TIM3_Init+0xc4>)
 8001222:	f006 fe8d 	bl	8007f40 <HAL_TIMEx_MasterConfigSynchronization>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800122c:	f000 fa6c 	bl	8001708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001230:	2360      	movs	r3, #96	; 0x60
 8001232:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	2204      	movs	r2, #4
 8001244:	4619      	mov	r1, r3
 8001246:	480d      	ldr	r0, [pc, #52]	; (800127c <MX_TIM3_Init+0xc4>)
 8001248:	f006 f9f6 	bl	8007638 <HAL_TIM_PWM_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001252:	f000 fa59 	bl	8001708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001256:	463b      	mov	r3, r7
 8001258:	2208      	movs	r2, #8
 800125a:	4619      	mov	r1, r3
 800125c:	4807      	ldr	r0, [pc, #28]	; (800127c <MX_TIM3_Init+0xc4>)
 800125e:	f006 f9eb 	bl	8007638 <HAL_TIM_PWM_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001268:	f000 fa4e 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <MX_TIM3_Init+0xc4>)
 800126e:	f000 fc3d 	bl	8001aec <HAL_TIM_MspPostInit>

}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200003a0 	.word	0x200003a0
 8001280:	40000400 	.word	0x40000400

08001284 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001296:	463b      	mov	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]
 80012a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <MX_TIM4_Init+0xc4>)
 80012aa:	4a28      	ldr	r2, [pc, #160]	; (800134c <MX_TIM4_Init+0xc8>)
 80012ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <MX_TIM4_Init+0xc4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <MX_TIM4_Init+0xc4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <MX_TIM4_Init+0xc4>)
 80012bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <MX_TIM4_Init+0xc4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <MX_TIM4_Init+0xc4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012ce:	481e      	ldr	r0, [pc, #120]	; (8001348 <MX_TIM4_Init+0xc4>)
 80012d0:	f006 f95a 	bl	8007588 <HAL_TIM_PWM_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80012da:	f000 fa15 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	4816      	ldr	r0, [pc, #88]	; (8001348 <MX_TIM4_Init+0xc4>)
 80012ee:	f006 fe27 	bl	8007f40 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80012f8:	f000 fa06 	bl	8001708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fc:	2360      	movs	r3, #96	; 0x60
 80012fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800130c:	463b      	mov	r3, r7
 800130e:	2208      	movs	r2, #8
 8001310:	4619      	mov	r1, r3
 8001312:	480d      	ldr	r0, [pc, #52]	; (8001348 <MX_TIM4_Init+0xc4>)
 8001314:	f006 f990 	bl	8007638 <HAL_TIM_PWM_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800131e:	f000 f9f3 	bl	8001708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001322:	463b      	mov	r3, r7
 8001324:	220c      	movs	r2, #12
 8001326:	4619      	mov	r1, r3
 8001328:	4807      	ldr	r0, [pc, #28]	; (8001348 <MX_TIM4_Init+0xc4>)
 800132a:	f006 f985 	bl	8007638 <HAL_TIM_PWM_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001334:	f000 f9e8 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001338:	4803      	ldr	r0, [pc, #12]	; (8001348 <MX_TIM4_Init+0xc4>)
 800133a:	f000 fbd7 	bl	8001aec <HAL_TIM_MspPostInit>

}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200003ec 	.word	0x200003ec
 800134c:	40000800 	.word	0x40000800

08001350 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b096      	sub	sp, #88	; 0x58
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001356:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001362:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	615a      	str	r2, [r3, #20]
 8001374:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	222c      	movs	r2, #44	; 0x2c
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f006 ffab 	bl	80082d8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001382:	4b33      	ldr	r3, [pc, #204]	; (8001450 <MX_TIM15_Init+0x100>)
 8001384:	4a33      	ldr	r2, [pc, #204]	; (8001454 <MX_TIM15_Init+0x104>)
 8001386:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <MX_TIM15_Init+0x100>)
 800138a:	2200      	movs	r2, #0
 800138c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b30      	ldr	r3, [pc, #192]	; (8001450 <MX_TIM15_Init+0x100>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001394:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <MX_TIM15_Init+0x100>)
 8001396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800139a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139c:	4b2c      	ldr	r3, [pc, #176]	; (8001450 <MX_TIM15_Init+0x100>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80013a2:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <MX_TIM15_Init+0x100>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a8:	4b29      	ldr	r3, [pc, #164]	; (8001450 <MX_TIM15_Init+0x100>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80013ae:	4828      	ldr	r0, [pc, #160]	; (8001450 <MX_TIM15_Init+0x100>)
 80013b0:	f006 f8ea 	bl	8007588 <HAL_TIM_PWM_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80013ba:	f000 f9a5 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80013c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013ca:	4619      	mov	r1, r3
 80013cc:	4820      	ldr	r0, [pc, #128]	; (8001450 <MX_TIM15_Init+0x100>)
 80013ce:	f006 fdb7 	bl	8007f40 <HAL_TIMEx_MasterConfigSynchronization>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80013d8:	f000 f996 	bl	8001708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013dc:	2360      	movs	r3, #96	; 0x60
 80013de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e4:	2300      	movs	r3, #0
 80013e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013e8:	2300      	movs	r3, #0
 80013ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013fc:	2200      	movs	r2, #0
 80013fe:	4619      	mov	r1, r3
 8001400:	4813      	ldr	r0, [pc, #76]	; (8001450 <MX_TIM15_Init+0x100>)
 8001402:	f006 f919 	bl	8007638 <HAL_TIM_PWM_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800140c:	f000 f97c 	bl	8001708 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001428:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	4619      	mov	r1, r3
 8001432:	4807      	ldr	r0, [pc, #28]	; (8001450 <MX_TIM15_Init+0x100>)
 8001434:	f006 fe0c 	bl	8008050 <HAL_TIMEx_ConfigBreakDeadTime>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800143e:	f000 f963 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001442:	4803      	ldr	r0, [pc, #12]	; (8001450 <MX_TIM15_Init+0x100>)
 8001444:	f000 fb52 	bl	8001aec <HAL_TIM_MspPostInit>

}
 8001448:	bf00      	nop
 800144a:	3758      	adds	r7, #88	; 0x58
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000438 	.word	0x20000438
 8001454:	40014000 	.word	0x40014000

08001458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800146e:	4ba0      	ldr	r3, [pc, #640]	; (80016f0 <MX_GPIO_Init+0x298>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a9f      	ldr	r2, [pc, #636]	; (80016f0 <MX_GPIO_Init+0x298>)
 8001474:	f043 0310 	orr.w	r3, r3, #16
 8001478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147a:	4b9d      	ldr	r3, [pc, #628]	; (80016f0 <MX_GPIO_Init+0x298>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	623b      	str	r3, [r7, #32]
 8001484:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001486:	4b9a      	ldr	r3, [pc, #616]	; (80016f0 <MX_GPIO_Init+0x298>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	4a99      	ldr	r2, [pc, #612]	; (80016f0 <MX_GPIO_Init+0x298>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001492:	4b97      	ldr	r3, [pc, #604]	; (80016f0 <MX_GPIO_Init+0x298>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800149e:	4b94      	ldr	r3, [pc, #592]	; (80016f0 <MX_GPIO_Init+0x298>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	4a93      	ldr	r2, [pc, #588]	; (80016f0 <MX_GPIO_Init+0x298>)
 80014a4:	f043 0320 	orr.w	r3, r3, #32
 80014a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014aa:	4b91      	ldr	r3, [pc, #580]	; (80016f0 <MX_GPIO_Init+0x298>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	f003 0320 	and.w	r3, r3, #32
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b6:	4b8e      	ldr	r3, [pc, #568]	; (80016f0 <MX_GPIO_Init+0x298>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	4a8d      	ldr	r2, [pc, #564]	; (80016f0 <MX_GPIO_Init+0x298>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c2:	4b8b      	ldr	r3, [pc, #556]	; (80016f0 <MX_GPIO_Init+0x298>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b88      	ldr	r3, [pc, #544]	; (80016f0 <MX_GPIO_Init+0x298>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a87      	ldr	r2, [pc, #540]	; (80016f0 <MX_GPIO_Init+0x298>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b85      	ldr	r3, [pc, #532]	; (80016f0 <MX_GPIO_Init+0x298>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b82      	ldr	r3, [pc, #520]	; (80016f0 <MX_GPIO_Init+0x298>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4a81      	ldr	r2, [pc, #516]	; (80016f0 <MX_GPIO_Init+0x298>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4b7f      	ldr	r3, [pc, #508]	; (80016f0 <MX_GPIO_Init+0x298>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014fe:	4b7c      	ldr	r3, [pc, #496]	; (80016f0 <MX_GPIO_Init+0x298>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a7b      	ldr	r2, [pc, #492]	; (80016f0 <MX_GPIO_Init+0x298>)
 8001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b79      	ldr	r3, [pc, #484]	; (80016f0 <MX_GPIO_Init+0x298>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	4b76      	ldr	r3, [pc, #472]	; (80016f0 <MX_GPIO_Init+0x298>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a75      	ldr	r2, [pc, #468]	; (80016f0 <MX_GPIO_Init+0x298>)
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b73      	ldr	r3, [pc, #460]	; (80016f0 <MX_GPIO_Init+0x298>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800152e:	f002 f94b 	bl	80037c8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	2102      	movs	r1, #2
 8001536:	486f      	ldr	r0, [pc, #444]	; (80016f4 <MX_GPIO_Init+0x29c>)
 8001538:	f002 f86a 	bl	8003610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	2101      	movs	r1, #1
 8001540:	486d      	ldr	r0, [pc, #436]	; (80016f8 <MX_GPIO_Init+0x2a0>)
 8001542:	f002 f865 	bl	8003610 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001546:	2307      	movs	r3, #7
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800154a:	2312      	movs	r3, #18
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154e:	2301      	movs	r3, #1
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001552:	2303      	movs	r3, #3
 8001554:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001556:	2304      	movs	r3, #4
 8001558:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800155a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155e:	4619      	mov	r1, r3
 8001560:	4866      	ldr	r0, [pc, #408]	; (80016fc <MX_GPIO_Init+0x2a4>)
 8001562:	f001 fec3 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001566:	23f0      	movs	r3, #240	; 0xf0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001576:	2305      	movs	r3, #5
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001584:	f001 feb2 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001588:	2302      	movs	r3, #2
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158c:	2301      	movs	r3, #1
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159c:	4619      	mov	r1, r3
 800159e:	4855      	ldr	r0, [pc, #340]	; (80016f4 <MX_GPIO_Init+0x29c>)
 80015a0:	f001 fea4 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015b6:	2307      	movs	r3, #7
 80015b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	484d      	ldr	r0, [pc, #308]	; (80016f8 <MX_GPIO_Init+0x2a0>)
 80015c2:	f001 fe93 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80015c6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80015d8:	2308      	movs	r3, #8
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	4844      	ldr	r0, [pc, #272]	; (80016f4 <MX_GPIO_Init+0x29c>)
 80015e4:	f001 fe82 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80015e8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015fa:	230c      	movs	r3, #12
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001602:	4619      	mov	r1, r3
 8001604:	483e      	ldr	r0, [pc, #248]	; (8001700 <MX_GPIO_Init+0x2a8>)
 8001606:	f001 fe71 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800160a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800161c:	230a      	movs	r3, #10
 800161e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001624:	4619      	mov	r1, r3
 8001626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162a:	f001 fe5f 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800162e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001640:	4619      	mov	r1, r3
 8001642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001646:	f001 fe51 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800164a:	2301      	movs	r3, #1
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800165a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165e:	4619      	mov	r1, r3
 8001660:	4825      	ldr	r0, [pc, #148]	; (80016f8 <MX_GPIO_Init+0x2a0>)
 8001662:	f001 fe43 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001666:	2304      	movs	r3, #4
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001676:	230c      	movs	r3, #12
 8001678:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	4619      	mov	r1, r3
 8001680:	481d      	ldr	r0, [pc, #116]	; (80016f8 <MX_GPIO_Init+0x2a0>)
 8001682:	f001 fe33 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001686:	2360      	movs	r3, #96	; 0x60
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001696:	2307      	movs	r3, #7
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169e:	4619      	mov	r1, r3
 80016a0:	4815      	ldr	r0, [pc, #84]	; (80016f8 <MX_GPIO_Init+0x2a0>)
 80016a2:	f001 fe23 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80016a6:	2338      	movs	r3, #56	; 0x38
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016b6:	2306      	movs	r3, #6
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016be:	4619      	mov	r1, r3
 80016c0:	4810      	ldr	r0, [pc, #64]	; (8001704 <MX_GPIO_Init+0x2ac>)
 80016c2:	f001 fe13 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016cc:	2312      	movs	r3, #18
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016d8:	2304      	movs	r3, #4
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e0:	4619      	mov	r1, r3
 80016e2:	4808      	ldr	r0, [pc, #32]	; (8001704 <MX_GPIO_Init+0x2ac>)
 80016e4:	f001 fe02 	bl	80032ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016e8:	bf00      	nop
 80016ea:	3738      	adds	r7, #56	; 0x38
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	48001800 	.word	0x48001800
 80016f8:	48000c00 	.word	0x48000c00
 80016fc:	48001400 	.word	0x48001400
 8001700:	48000800 	.word	0x48000800
 8001704:	48000400 	.word	0x48000400

08001708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800170c:	b672      	cpsid	i
}
 800170e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001710:	e7fe      	b.n	8001710 <Error_Handler+0x8>
	...

08001714 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_MspInit+0x44>)
 800171c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171e:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <HAL_MspInit+0x44>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6613      	str	r3, [r2, #96]	; 0x60
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_MspInit+0x44>)
 8001728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_MspInit+0x44>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	4a08      	ldr	r2, [pc, #32]	; (8001758 <HAL_MspInit+0x44>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6593      	str	r3, [r2, #88]	; 0x58
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_MspInit+0x44>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000

0800175c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	; 0x30
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a2d      	ldr	r2, [pc, #180]	; (8001830 <HAL_ADC_MspInit+0xd4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d154      	bne.n	8001828 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800177e:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <HAL_ADC_MspInit+0xd8>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	4a2c      	ldr	r2, [pc, #176]	; (8001834 <HAL_ADC_MspInit+0xd8>)
 8001784:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178a:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <HAL_ADC_MspInit+0xd8>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001796:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_ADC_MspInit+0xd8>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	4a26      	ldr	r2, [pc, #152]	; (8001834 <HAL_ADC_MspInit+0xd8>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_ADC_MspInit+0xd8>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <HAL_ADC_MspInit+0xd8>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	4a20      	ldr	r2, [pc, #128]	; (8001834 <HAL_ADC_MspInit+0xd8>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <HAL_ADC_MspInit+0xd8>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_ADC_MspInit+0xd8>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	4a1a      	ldr	r2, [pc, #104]	; (8001834 <HAL_ADC_MspInit+0xd8>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_ADC_MspInit+0xd8>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017de:	233f      	movs	r3, #63	; 0x3f
 80017e0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017e2:	230b      	movs	r3, #11
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	4619      	mov	r1, r3
 80017f0:	4811      	ldr	r0, [pc, #68]	; (8001838 <HAL_ADC_MspInit+0xdc>)
 80017f2:	f001 fd7b 	bl	80032ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80017f6:	230a      	movs	r3, #10
 80017f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017fa:	230b      	movs	r3, #11
 80017fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 031c 	add.w	r3, r7, #28
 8001806:	4619      	mov	r1, r3
 8001808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180c:	f001 fd6e 	bl	80032ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001810:	2302      	movs	r3, #2
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001814:	230b      	movs	r3, #11
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	4619      	mov	r1, r3
 8001822:	4806      	ldr	r0, [pc, #24]	; (800183c <HAL_ADC_MspInit+0xe0>)
 8001824:	f001 fd62 	bl	80032ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001828:	bf00      	nop
 800182a:	3730      	adds	r7, #48	; 0x30
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	50040000 	.word	0x50040000
 8001834:	40021000 	.word	0x40021000
 8001838:	48000800 	.word	0x48000800
 800183c:	48000400 	.word	0x48000400

08001840 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a1e      	ldr	r2, [pc, #120]	; (80018d8 <HAL_COMP_MspInit+0x98>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d118      	bne.n	8001894 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <HAL_COMP_MspInit+0x9c>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <HAL_COMP_MspInit+0x9c>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_COMP_MspInit+0x9c>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800187a:	2304      	movs	r3, #4
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800187e:	2303      	movs	r3, #3
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4814      	ldr	r0, [pc, #80]	; (80018e0 <HAL_COMP_MspInit+0xa0>)
 800188e:	f001 fd2d 	bl	80032ec <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8001892:	e01c      	b.n	80018ce <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <HAL_COMP_MspInit+0xa4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d117      	bne.n	80018ce <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_COMP_MspInit+0x9c>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_COMP_MspInit+0x9c>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_COMP_MspInit+0x9c>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018b6:	23c0      	movs	r3, #192	; 0xc0
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ba:	2303      	movs	r3, #3
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <HAL_COMP_MspInit+0xa0>)
 80018ca:	f001 fd0f 	bl	80032ec <HAL_GPIO_Init>
}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	; 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40010200 	.word	0x40010200
 80018dc:	40021000 	.word	0x40021000
 80018e0:	48000400 	.word	0x48000400
 80018e4:	40010204 	.word	0x40010204

080018e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a17      	ldr	r2, [pc, #92]	; (8001964 <HAL_SPI_MspInit+0x7c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d127      	bne.n	800195a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <HAL_SPI_MspInit+0x80>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	4a16      	ldr	r2, [pc, #88]	; (8001968 <HAL_SPI_MspInit+0x80>)
 8001910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001914:	6593      	str	r3, [r2, #88]	; 0x58
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_SPI_MspInit+0x80>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_SPI_MspInit+0x80>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	4a10      	ldr	r2, [pc, #64]	; (8001968 <HAL_SPI_MspInit+0x80>)
 8001928:	f043 0308 	orr.w	r3, r3, #8
 800192c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_SPI_MspInit+0x80>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800193a:	231a      	movs	r3, #26
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800194a:	2305      	movs	r3, #5
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	; (800196c <HAL_SPI_MspInit+0x84>)
 8001956:	f001 fcc9 	bl	80032ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800195a:	bf00      	nop
 800195c:	3728      	adds	r7, #40	; 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40003800 	.word	0x40003800
 8001968:	40021000 	.word	0x40021000
 800196c:	48000c00 	.word	0x48000c00

08001970 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08e      	sub	sp, #56	; 0x38
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a51      	ldr	r2, [pc, #324]	; (8001ad4 <HAL_TIM_PWM_MspInit+0x164>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d139      	bne.n	8001a06 <HAL_TIM_PWM_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001992:	4b51      	ldr	r3, [pc, #324]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 8001994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001996:	4a50      	ldr	r2, [pc, #320]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 8001998:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800199c:	6613      	str	r3, [r2, #96]	; 0x60
 800199e:	4b4e      	ldr	r3, [pc, #312]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 80019a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019a6:	623b      	str	r3, [r7, #32]
 80019a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019aa:	4b4b      	ldr	r3, [pc, #300]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	4a4a      	ldr	r2, [pc, #296]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 80019b0:	f043 0310 	orr.w	r3, r3, #16
 80019b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b6:	4b48      	ldr	r3, [pc, #288]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	f003 0310 	and.w	r3, r3, #16
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019d2:	2301      	movs	r3, #1
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019da:	4619      	mov	r1, r3
 80019dc:	483f      	ldr	r0, [pc, #252]	; (8001adc <HAL_TIM_PWM_MspInit+0x16c>)
 80019de:	f001 fc85 	bl	80032ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019e2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80019f4:	2303      	movs	r3, #3
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fc:	4619      	mov	r1, r3
 80019fe:	4837      	ldr	r0, [pc, #220]	; (8001adc <HAL_TIM_PWM_MspInit+0x16c>)
 8001a00:	f001 fc74 	bl	80032ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001a04:	e062      	b.n	8001acc <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM2)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0e:	d10c      	bne.n	8001a2a <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a10:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	4a30      	ldr	r2, [pc, #192]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	69bb      	ldr	r3, [r7, #24]
}
 8001a28:	e050      	b.n	8001acc <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM3)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a2c      	ldr	r2, [pc, #176]	; (8001ae0 <HAL_TIM_PWM_MspInit+0x170>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d10c      	bne.n	8001a4e <HAL_TIM_PWM_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	4a27      	ldr	r2, [pc, #156]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a3a:	f043 0302 	orr.w	r3, r3, #2
 8001a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a40:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697b      	ldr	r3, [r7, #20]
}
 8001a4c:	e03e      	b.n	8001acc <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM4)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a24      	ldr	r2, [pc, #144]	; (8001ae4 <HAL_TIM_PWM_MspInit+0x174>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d128      	bne.n	8001aaa <HAL_TIM_PWM_MspInit+0x13a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a5e:	f043 0304 	orr.w	r3, r3, #4
 8001a62:	6593      	str	r3, [r2, #88]	; 0x58
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	4a18      	ldr	r2, [pc, #96]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a76:	f043 0310 	orr.w	r3, r3, #16
 8001a7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7c:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480e      	ldr	r0, [pc, #56]	; (8001adc <HAL_TIM_PWM_MspInit+0x16c>)
 8001aa4:	f001 fc22 	bl	80032ec <HAL_GPIO_Init>
}
 8001aa8:	e010      	b.n	8001acc <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM15)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x178>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d10b      	bne.n	8001acc <HAL_TIM_PWM_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 8001ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 8001aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abe:	6613      	str	r3, [r2, #96]	; 0x60
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x168>)
 8001ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
}
 8001acc:	bf00      	nop
 8001ace:	3738      	adds	r7, #56	; 0x38
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40012c00 	.word	0x40012c00
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	48001000 	.word	0x48001000
 8001ae0:	40000400 	.word	0x40000400
 8001ae4:	40000800 	.word	0x40000800
 8001ae8:	40014000 	.word	0x40014000

08001aec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08e      	sub	sp, #56	; 0x38
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a73      	ldr	r2, [pc, #460]	; (8001cd8 <HAL_TIM_MspPostInit+0x1ec>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d11d      	bne.n	8001b4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b0e:	4b73      	ldr	r3, [pc, #460]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	4a72      	ldr	r2, [pc, #456]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001b14:	f043 0310 	orr.w	r3, r3, #16
 8001b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1a:	4b70      	ldr	r3, [pc, #448]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	623b      	str	r3, [r7, #32]
 8001b24:	6a3b      	ldr	r3, [r7, #32]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b26:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b40:	4619      	mov	r1, r3
 8001b42:	4867      	ldr	r0, [pc, #412]	; (8001ce0 <HAL_TIM_MspPostInit+0x1f4>)
 8001b44:	f001 fbd2 	bl	80032ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001b48:	e0c2      	b.n	8001cd0 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b52:	d13a      	bne.n	8001bca <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b58:	4a60      	ldr	r2, [pc, #384]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b60:	4b5e      	ldr	r3, [pc, #376]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6c:	4b5b      	ldr	r3, [pc, #364]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b70:	4a5a      	ldr	r2, [pc, #360]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001b72:	f043 0302 	orr.w	r3, r3, #2
 8001b76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b78:	4b58      	ldr	r3, [pc, #352]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	61bb      	str	r3, [r7, #24]
 8001b82:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b84:	2301      	movs	r3, #1
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b94:	2301      	movs	r3, #1
 8001b96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba2:	f001 fba3 	bl	80032ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4848      	ldr	r0, [pc, #288]	; (8001ce4 <HAL_TIM_MspPostInit+0x1f8>)
 8001bc4:	f001 fb92 	bl	80032ec <HAL_GPIO_Init>
}
 8001bc8:	e082      	b.n	8001cd0 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a46      	ldr	r2, [pc, #280]	; (8001ce8 <HAL_TIM_MspPostInit+0x1fc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d138      	bne.n	8001c46 <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd4:	4b41      	ldr	r3, [pc, #260]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd8:	4a40      	ldr	r2, [pc, #256]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001bda:	f043 0302 	orr.w	r3, r3, #2
 8001bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be0:	4b3e      	ldr	r3, [pc, #248]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bec:	4b3b      	ldr	r3, [pc, #236]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf0:	4a3a      	ldr	r2, [pc, #232]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf8:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c04:	2301      	movs	r3, #1
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2300      	movs	r3, #0
 8001c12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c14:	2302      	movs	r3, #2
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4831      	ldr	r0, [pc, #196]	; (8001ce4 <HAL_TIM_MspPostInit+0x1f8>)
 8001c20:	f001 fb64 	bl	80032ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c34:	2302      	movs	r3, #2
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	482b      	ldr	r0, [pc, #172]	; (8001cec <HAL_TIM_MspPostInit+0x200>)
 8001c40:	f001 fb54 	bl	80032ec <HAL_GPIO_Init>
}
 8001c44:	e044      	b.n	8001cd0 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a29      	ldr	r2, [pc, #164]	; (8001cf0 <HAL_TIM_MspPostInit+0x204>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d11d      	bne.n	8001c8c <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c54:	4a21      	ldr	r2, [pc, #132]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001c56:	f043 0308 	orr.w	r3, r3, #8
 8001c5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c68:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c82:	4619      	mov	r1, r3
 8001c84:	481b      	ldr	r0, [pc, #108]	; (8001cf4 <HAL_TIM_MspPostInit+0x208>)
 8001c86:	f001 fb31 	bl	80032ec <HAL_GPIO_Init>
}
 8001c8a:	e021      	b.n	8001cd0 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a19      	ldr	r2, [pc, #100]	; (8001cf8 <HAL_TIM_MspPostInit+0x20c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d11c      	bne.n	8001cd0 <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	4a10      	ldr	r2, [pc, #64]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_TIM_MspPostInit+0x1f0>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001cae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001cc0:	230e      	movs	r3, #14
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <HAL_TIM_MspPostInit+0x1f8>)
 8001ccc:	f001 fb0e 	bl	80032ec <HAL_GPIO_Init>
}
 8001cd0:	bf00      	nop
 8001cd2:	3738      	adds	r7, #56	; 0x38
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40012c00 	.word	0x40012c00
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	48001000 	.word	0x48001000
 8001ce4:	48000400 	.word	0x48000400
 8001ce8:	40000400 	.word	0x40000400
 8001cec:	48000800 	.word	0x48000800
 8001cf0:	40000800 	.word	0x40000800
 8001cf4:	48000c00 	.word	0x48000c00
 8001cf8:	40014000 	.word	0x40014000

08001cfc <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a50      	ldr	r2, [pc, #320]	; (8001e4c <HAL_SAI_MspInit+0x150>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d124      	bne.n	8001d58 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001d0e:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <HAL_SAI_MspInit+0x154>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10b      	bne.n	8001d2e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001d16:	4b4f      	ldr	r3, [pc, #316]	; (8001e54 <HAL_SAI_MspInit+0x158>)
 8001d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1a:	4a4e      	ldr	r2, [pc, #312]	; (8001e54 <HAL_SAI_MspInit+0x158>)
 8001d1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d20:	6613      	str	r3, [r2, #96]	; 0x60
 8001d22:	4b4c      	ldr	r3, [pc, #304]	; (8001e54 <HAL_SAI_MspInit+0x158>)
 8001d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001d2e:	4b48      	ldr	r3, [pc, #288]	; (8001e50 <HAL_SAI_MspInit+0x154>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	3301      	adds	r3, #1
 8001d34:	4a46      	ldr	r2, [pc, #280]	; (8001e50 <HAL_SAI_MspInit+0x154>)
 8001d36:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001d38:	2374      	movs	r3, #116	; 0x74
 8001d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001d48:	230d      	movs	r3, #13
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4619      	mov	r1, r3
 8001d52:	4841      	ldr	r0, [pc, #260]	; (8001e58 <HAL_SAI_MspInit+0x15c>)
 8001d54:	f001 faca 	bl	80032ec <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a3f      	ldr	r2, [pc, #252]	; (8001e5c <HAL_SAI_MspInit+0x160>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d135      	bne.n	8001dce <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8001d62:	4b3b      	ldr	r3, [pc, #236]	; (8001e50 <HAL_SAI_MspInit+0x154>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10b      	bne.n	8001d82 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001d6a:	4b3a      	ldr	r3, [pc, #232]	; (8001e54 <HAL_SAI_MspInit+0x158>)
 8001d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6e:	4a39      	ldr	r2, [pc, #228]	; (8001e54 <HAL_SAI_MspInit+0x158>)
 8001d70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d74:	6613      	str	r3, [r2, #96]	; 0x60
 8001d76:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <HAL_SAI_MspInit+0x158>)
 8001d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001d82:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <HAL_SAI_MspInit+0x154>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	3301      	adds	r3, #1
 8001d88:	4a31      	ldr	r2, [pc, #196]	; (8001e50 <HAL_SAI_MspInit+0x154>)
 8001d8a:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001d9c:	230d      	movs	r3, #13
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4619      	mov	r1, r3
 8001da6:	482c      	ldr	r0, [pc, #176]	; (8001e58 <HAL_SAI_MspInit+0x15c>)
 8001da8:	f001 faa0 	bl	80032ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001dac:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001dbe:	230d      	movs	r3, #13
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4825      	ldr	r0, [pc, #148]	; (8001e60 <HAL_SAI_MspInit+0x164>)
 8001dca:	f001 fa8f 	bl	80032ec <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a24      	ldr	r2, [pc, #144]	; (8001e64 <HAL_SAI_MspInit+0x168>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d135      	bne.n	8001e44 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8001dd8:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <HAL_SAI_MspInit+0x16c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10b      	bne.n	8001df8 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001de0:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <HAL_SAI_MspInit+0x158>)
 8001de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de4:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <HAL_SAI_MspInit+0x158>)
 8001de6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dea:	6613      	str	r3, [r2, #96]	; 0x60
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_SAI_MspInit+0x158>)
 8001dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <HAL_SAI_MspInit+0x16c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	4a1a      	ldr	r2, [pc, #104]	; (8001e68 <HAL_SAI_MspInit+0x16c>)
 8001e00:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001e02:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001e14:	230d      	movs	r3, #13
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4813      	ldr	r0, [pc, #76]	; (8001e6c <HAL_SAI_MspInit+0x170>)
 8001e20:	f001 fa64 	bl	80032ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e24:	2340      	movs	r3, #64	; 0x40
 8001e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001e34:	230d      	movs	r3, #13
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480c      	ldr	r0, [pc, #48]	; (8001e70 <HAL_SAI_MspInit+0x174>)
 8001e40:	f001 fa54 	bl	80032ec <HAL_GPIO_Init>

    }
}
 8001e44:	bf00      	nop
 8001e46:	3728      	adds	r7, #40	; 0x28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40015404 	.word	0x40015404
 8001e50:	20000484 	.word	0x20000484
 8001e54:	40021000 	.word	0x40021000
 8001e58:	48001000 	.word	0x48001000
 8001e5c:	40015424 	.word	0x40015424
 8001e60:	48001400 	.word	0x48001400
 8001e64:	40015804 	.word	0x40015804
 8001e68:	20000488 	.word	0x20000488
 8001e6c:	48000400 	.word	0x48000400
 8001e70:	48000800 	.word	0x48000800

08001e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e78:	e7fe      	b.n	8001e78 <NMI_Handler+0x4>

08001e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <HardFault_Handler+0x4>

08001e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <MemManage_Handler+0x4>

08001e86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8a:	e7fe      	b.n	8001e8a <BusFault_Handler+0x4>

08001e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <UsageFault_Handler+0x4>

08001e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec0:	f000 f892 	bl	8001fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <SystemInit+0x20>)
 8001ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed2:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <SystemInit+0x20>)
 8001ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ef0:	f7ff ffea 	bl	8001ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ef6:	490d      	ldr	r1, [pc, #52]	; (8001f2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ef8:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <LoopForever+0xe>)
  movs r3, #0
 8001efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001efc:	e002      	b.n	8001f04 <LoopCopyDataInit>

08001efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f02:	3304      	adds	r3, #4

08001f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f08:	d3f9      	bcc.n	8001efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f0c:	4c0a      	ldr	r4, [pc, #40]	; (8001f38 <LoopForever+0x16>)
  movs r3, #0
 8001f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f10:	e001      	b.n	8001f16 <LoopFillZerobss>

08001f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f14:	3204      	adds	r2, #4

08001f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f18:	d3fb      	bcc.n	8001f12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f1a:	f006 f9e5 	bl	80082e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f1e:	f7fe fd5f 	bl	80009e0 <main>

08001f22 <LoopForever>:

LoopForever:
    b LoopForever
 8001f22:	e7fe      	b.n	8001f22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f24:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f30:	080083a0 	.word	0x080083a0
  ldr r2, =_sbss
 8001f34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f38:	20000490 	.word	0x20000490

08001f3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f3c:	e7fe      	b.n	8001f3c <ADC1_IRQHandler>

08001f3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f001 f99b 	bl	8003284 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f000 f80e 	bl	8001f70 <HAL_InitTick>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	71fb      	strb	r3, [r7, #7]
 8001f5e:	e001      	b.n	8001f64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f60:	f7ff fbd8 	bl	8001714 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f64:	79fb      	ldrb	r3, [r7, #7]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f7c:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <HAL_InitTick+0x6c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d023      	beq.n	8001fcc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f84:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_InitTick+0x70>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <HAL_InitTick+0x6c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f001 f999 	bl	80032d2 <HAL_SYSTICK_Config>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10f      	bne.n	8001fc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b0f      	cmp	r3, #15
 8001faa:	d809      	bhi.n	8001fc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fac:	2200      	movs	r2, #0
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f001 f971 	bl	800329a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fb8:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <HAL_InitTick+0x74>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e007      	b.n	8001fd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
 8001fc4:	e004      	b.n	8001fd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	e001      	b.n	8001fd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000008 	.word	0x20000008
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	20000004 	.word	0x20000004

08001fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_IncTick+0x20>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_IncTick+0x24>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4a04      	ldr	r2, [pc, #16]	; (800200c <HAL_IncTick+0x24>)
 8001ffa:	6013      	str	r3, [r2, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000008 	.word	0x20000008
 800200c:	2000048c 	.word	0x2000048c

08002010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return uwTick;
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <HAL_GetTick+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	2000048c 	.word	0x2000048c

08002028 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	609a      	str	r2, [r3, #8]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	609a      	str	r2, [r3, #8]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3360      	adds	r3, #96	; 0x60
 80020a2:	461a      	mov	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <LL_ADC_SetOffset+0x44>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	4313      	orrs	r3, r2
 80020c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020c8:	bf00      	nop
 80020ca:	371c      	adds	r7, #28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	03fff000 	.word	0x03fff000

080020d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3360      	adds	r3, #96	; 0x60
 80020e6:	461a      	mov	r2, r3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	3360      	adds	r3, #96	; 0x60
 8002114:	461a      	mov	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	431a      	orrs	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800212e:	bf00      	nop
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	615a      	str	r2, [r3, #20]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	3330      	adds	r3, #48	; 0x30
 8002170:	461a      	mov	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	4413      	add	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	211f      	movs	r1, #31
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	401a      	ands	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	0e9b      	lsrs	r3, r3, #26
 8002198:	f003 011f 	and.w	r1, r3, #31
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f003 031f 	and.w	r3, r3, #31
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	431a      	orrs	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021ac:	bf00      	nop
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3314      	adds	r3, #20
 80021c8:	461a      	mov	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	0e5b      	lsrs	r3, r3, #25
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	4413      	add	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	0d1b      	lsrs	r3, r3, #20
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	2107      	movs	r1, #7
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	401a      	ands	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	0d1b      	lsrs	r3, r3, #20
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	431a      	orrs	r2, r3
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002202:	bf00      	nop
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002228:	43db      	mvns	r3, r3
 800222a:	401a      	ands	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f003 0318 	and.w	r3, r3, #24
 8002232:	4908      	ldr	r1, [pc, #32]	; (8002254 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002234:	40d9      	lsrs	r1, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	400b      	ands	r3, r1
 800223a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223e:	431a      	orrs	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	0007ffff 	.word	0x0007ffff

08002258 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002268:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6093      	str	r3, [r2, #8]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800228c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002290:	d101      	bne.n	8002296 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022e0:	d101      	bne.n	80022e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <LL_ADC_IsEnabled+0x18>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <LL_ADC_IsEnabled+0x1a>
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b04      	cmp	r3, #4
 800232c:	d101      	bne.n	8002332 <LL_ADC_REG_IsConversionOngoing+0x18>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b08      	cmp	r3, #8
 8002352:	d101      	bne.n	8002358 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e129      	b.n	80025d6 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	2b00      	cmp	r3, #0
 800238e:	d109      	bne.n	80023a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff f9e3 	bl	800175c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff67 	bl	800227c <LL_ADC_IsDeepPowerDownEnabled>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d004      	beq.n	80023be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff4d 	bl	8002258 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ff82 	bl	80022cc <LL_ADC_IsInternalRegulatorEnabled>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d115      	bne.n	80023fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff ff66 	bl	80022a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023d8:	4b81      	ldr	r3, [pc, #516]	; (80025e0 <HAL_ADC_Init+0x278>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	099b      	lsrs	r3, r3, #6
 80023de:	4a81      	ldr	r2, [pc, #516]	; (80025e4 <HAL_ADC_Init+0x27c>)
 80023e0:	fba2 2303 	umull	r2, r3, r2, r3
 80023e4:	099b      	lsrs	r3, r3, #6
 80023e6:	3301      	adds	r3, #1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023ec:	e002      	b.n	80023f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f9      	bne.n	80023ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff ff64 	bl	80022cc <LL_ADC_IsInternalRegulatorEnabled>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10d      	bne.n	8002426 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	f043 0210 	orr.w	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241a:	f043 0201 	orr.w	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff ff75 	bl	800231a <LL_ADC_REG_IsConversionOngoing>
 8002430:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	f040 80c2 	bne.w	80025c4 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f040 80be 	bne.w	80025c4 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002450:	f043 0202 	orr.w	r2, r3, #2
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff49 	bl	80022f4 <LL_ADC_IsEnabled>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10b      	bne.n	8002480 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002468:	485f      	ldr	r0, [pc, #380]	; (80025e8 <HAL_ADC_Init+0x280>)
 800246a:	f7ff ff43 	bl	80022f4 <LL_ADC_IsEnabled>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d105      	bne.n	8002480 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4619      	mov	r1, r3
 800247a:	485c      	ldr	r0, [pc, #368]	; (80025ec <HAL_ADC_Init+0x284>)
 800247c:	f7ff fdd4 	bl	8002028 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	7e5b      	ldrb	r3, [r3, #25]
 8002484:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800248a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002490:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002496:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800249e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d106      	bne.n	80024bc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	3b01      	subs	r3, #1
 80024b4:	045b      	lsls	r3, r3, #17
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d009      	beq.n	80024d8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	4b44      	ldr	r3, [pc, #272]	; (80025f0 <HAL_ADC_Init+0x288>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	69b9      	ldr	r1, [r7, #24]
 80024e8:	430b      	orrs	r3, r1
 80024ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff25 	bl	8002340 <LL_ADC_INJ_IsConversionOngoing>
 80024f6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d140      	bne.n	8002580 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d13d      	bne.n	8002580 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7e1b      	ldrb	r3, [r3, #24]
 800250c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800250e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002516:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002526:	f023 0306 	bic.w	r3, r3, #6
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	69b9      	ldr	r1, [r7, #24]
 8002530:	430b      	orrs	r3, r1
 8002532:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800253a:	2b01      	cmp	r3, #1
 800253c:	d118      	bne.n	8002570 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002548:	f023 0304 	bic.w	r3, r3, #4
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002554:	4311      	orrs	r1, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800255a:	4311      	orrs	r1, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002560:	430a      	orrs	r2, r1
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0201 	orr.w	r2, r2, #1
 800256c:	611a      	str	r2, [r3, #16]
 800256e:	e007      	b.n	8002580 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0201 	bic.w	r2, r2, #1
 800257e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d10c      	bne.n	80025a2 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f023 010f 	bic.w	r1, r3, #15
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	1e5a      	subs	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	631a      	str	r2, [r3, #48]	; 0x30
 80025a0:	e007      	b.n	80025b2 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 020f 	bic.w	r2, r2, #15
 80025b0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	f023 0303 	bic.w	r3, r3, #3
 80025ba:	f043 0201 	orr.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	659a      	str	r2, [r3, #88]	; 0x58
 80025c2:	e007      	b.n	80025d4 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c8:	f043 0210 	orr.w	r2, r3, #16
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3720      	adds	r7, #32
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000000 	.word	0x20000000
 80025e4:	053e2d63 	.word	0x053e2d63
 80025e8:	50040000 	.word	0x50040000
 80025ec:	50040300 	.word	0x50040300
 80025f0:	fff0c007 	.word	0xfff0c007

080025f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b0b6      	sub	sp, #216	; 0xd8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002604:	2300      	movs	r3, #0
 8002606:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x22>
 8002612:	2302      	movs	r3, #2
 8002614:	e3d5      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x7ce>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fe79 	bl	800231a <LL_ADC_REG_IsConversionOngoing>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 83ba 	bne.w	8002da4 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b05      	cmp	r3, #5
 800263e:	d824      	bhi.n	800268a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	3b02      	subs	r3, #2
 8002646:	2b03      	cmp	r3, #3
 8002648:	d81b      	bhi.n	8002682 <HAL_ADC_ConfigChannel+0x8e>
 800264a:	a201      	add	r2, pc, #4	; (adr r2, 8002650 <HAL_ADC_ConfigChannel+0x5c>)
 800264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002650:	08002661 	.word	0x08002661
 8002654:	08002669 	.word	0x08002669
 8002658:	08002671 	.word	0x08002671
 800265c:	08002679 	.word	0x08002679
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002660:	230c      	movs	r3, #12
 8002662:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002666:	e010      	b.n	800268a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002668:	2312      	movs	r3, #18
 800266a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800266e:	e00c      	b.n	800268a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002670:	2318      	movs	r3, #24
 8002672:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002676:	e008      	b.n	800268a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800267c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002680:	e003      	b.n	800268a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002682:	2306      	movs	r3, #6
 8002684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002688:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002698:	f7ff fd62 	bl	8002160 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fe3a 	bl	800231a <LL_ADC_REG_IsConversionOngoing>
 80026a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fe46 	bl	8002340 <LL_ADC_INJ_IsConversionOngoing>
 80026b4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f040 81bf 	bne.w	8002a40 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f040 81ba 	bne.w	8002a40 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026d4:	d10f      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2200      	movs	r2, #0
 80026e0:	4619      	mov	r1, r3
 80026e2:	f7ff fd69 	bl	80021b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fd23 	bl	800213a <LL_ADC_SetSamplingTimeCommonConfig>
 80026f4:	e00e      	b.n	8002714 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	6819      	ldr	r1, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	461a      	mov	r2, r3
 8002704:	f7ff fd58 	bl	80021b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fd13 	bl	800213a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	08db      	lsrs	r3, r3, #3
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b04      	cmp	r3, #4
 8002734:	d00a      	beq.n	800274c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	6919      	ldr	r1, [r3, #16]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002746:	f7ff fca3 	bl	8002090 <LL_ADC_SetOffset>
 800274a:	e179      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2100      	movs	r1, #0
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fcc0 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 8002758:	4603      	mov	r3, r0
 800275a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10a      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x184>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fcb5 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 800276e:	4603      	mov	r3, r0
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	f003 021f 	and.w	r2, r3, #31
 8002776:	e01e      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x1c2>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fcaa 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 8002784:	4603      	mov	r3, r0
 8002786:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002796:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800279a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800279e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80027a6:	2320      	movs	r3, #32
 80027a8:	e004      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80027aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d105      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x1da>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	0e9b      	lsrs	r3, r3, #26
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	e018      	b.n	8002800 <HAL_ADC_ConfigChannel+0x20c>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80027e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80027ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80027f2:	2320      	movs	r3, #32
 80027f4:	e004      	b.n	8002800 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80027f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027fa:	fab3 f383 	clz	r3, r3
 80027fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002800:	429a      	cmp	r2, r3
 8002802:	d106      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2200      	movs	r2, #0
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fc79 	bl	8002104 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2101      	movs	r1, #1
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fc5d 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 800281e:	4603      	mov	r3, r0
 8002820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10a      	bne.n	800283e <HAL_ADC_ConfigChannel+0x24a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2101      	movs	r1, #1
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fc52 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 8002834:	4603      	mov	r3, r0
 8002836:	0e9b      	lsrs	r3, r3, #26
 8002838:	f003 021f 	and.w	r2, r3, #31
 800283c:	e01e      	b.n	800287c <HAL_ADC_ConfigChannel+0x288>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2101      	movs	r1, #1
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fc47 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 800284a:	4603      	mov	r3, r0
 800284c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800285c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002860:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002864:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800286c:	2320      	movs	r3, #32
 800286e:	e004      	b.n	800287a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002870:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002874:	fab3 f383 	clz	r3, r3
 8002878:	b2db      	uxtb	r3, r3
 800287a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002884:	2b00      	cmp	r3, #0
 8002886:	d105      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x2a0>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	0e9b      	lsrs	r3, r3, #26
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	e018      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x2d2>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80028a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80028b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80028b8:	2320      	movs	r3, #32
 80028ba:	e004      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80028bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028c0:	fab3 f383 	clz	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d106      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2200      	movs	r2, #0
 80028d0:	2101      	movs	r1, #1
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fc16 	bl	8002104 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2102      	movs	r1, #2
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fbfa 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10a      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x310>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2102      	movs	r1, #2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fbef 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 80028fa:	4603      	mov	r3, r0
 80028fc:	0e9b      	lsrs	r3, r3, #26
 80028fe:	f003 021f 	and.w	r2, r3, #31
 8002902:	e01e      	b.n	8002942 <HAL_ADC_ConfigChannel+0x34e>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2102      	movs	r1, #2
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fbe4 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 8002910:	4603      	mov	r3, r0
 8002912:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002922:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002926:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800292a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002932:	2320      	movs	r3, #32
 8002934:	e004      	b.n	8002940 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294a:	2b00      	cmp	r3, #0
 800294c:	d105      	bne.n	800295a <HAL_ADC_ConfigChannel+0x366>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	0e9b      	lsrs	r3, r3, #26
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	e014      	b.n	8002984 <HAL_ADC_ConfigChannel+0x390>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800296a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800296e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002976:	2320      	movs	r3, #32
 8002978:	e004      	b.n	8002984 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800297a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002984:	429a      	cmp	r2, r3
 8002986:	d106      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2200      	movs	r2, #0
 800298e:	2102      	movs	r1, #2
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fbb7 	bl	8002104 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2103      	movs	r1, #3
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fb9b 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10a      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x3ce>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2103      	movs	r1, #3
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fb90 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 80029b8:	4603      	mov	r3, r0
 80029ba:	0e9b      	lsrs	r3, r3, #26
 80029bc:	f003 021f 	and.w	r2, r3, #31
 80029c0:	e017      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x3fe>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2103      	movs	r1, #3
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fb85 	bl	80020d8 <LL_ADC_GetOffsetChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80029da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029dc:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80029de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80029e4:	2320      	movs	r3, #32
 80029e6:	e003      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80029e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d105      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x416>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	0e9b      	lsrs	r3, r3, #26
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	e011      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x43a>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002a18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a1a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002a1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002a22:	2320      	movs	r3, #32
 8002a24:	e003      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002a26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d106      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2200      	movs	r2, #0
 8002a38:	2103      	movs	r1, #3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fb62 	bl	8002104 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fc55 	bl	80022f4 <LL_ADC_IsEnabled>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f040 813f 	bne.w	8002cd0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	6819      	ldr	r1, [r3, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f7ff fbd6 	bl	8002210 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4a8e      	ldr	r2, [pc, #568]	; (8002ca4 <HAL_ADC_ConfigChannel+0x6b0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	f040 8130 	bne.w	8002cd0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10b      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x4a4>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0e9b      	lsrs	r3, r3, #26
 8002a86:	3301      	adds	r3, #1
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	2b09      	cmp	r3, #9
 8002a8e:	bf94      	ite	ls
 8002a90:	2301      	movls	r3, #1
 8002a92:	2300      	movhi	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	e019      	b.n	8002acc <HAL_ADC_ConfigChannel+0x4d8>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002ab0:	2320      	movs	r3, #32
 8002ab2:	e003      	b.n	8002abc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	2b09      	cmp	r3, #9
 8002ac4:	bf94      	ite	ls
 8002ac6:	2301      	movls	r3, #1
 8002ac8:	2300      	movhi	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d079      	beq.n	8002bc4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d107      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x4f8>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	0e9b      	lsrs	r3, r3, #26
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	069b      	lsls	r3, r3, #26
 8002ae6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aea:	e015      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x524>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af4:	fa93 f3a3 	rbit	r3, r3
 8002af8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002afc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002b04:	2320      	movs	r3, #32
 8002b06:	e003      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	069b      	lsls	r3, r3, #26
 8002b14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d109      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x544>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	2101      	movs	r1, #1
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	e017      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x574>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b48:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002b50:	2320      	movs	r3, #32
 8002b52:	e003      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	2101      	movs	r1, #1
 8002b64:	fa01 f303 	lsl.w	r3, r1, r3
 8002b68:	ea42 0103 	orr.w	r1, r2, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x59a>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f003 021f 	and.w	r2, r3, #31
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	051b      	lsls	r3, r3, #20
 8002b8c:	e018      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x5cc>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	e003      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f003 021f 	and.w	r2, r3, #31
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	e080      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x5ec>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	0e9b      	lsrs	r3, r3, #26
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	069b      	lsls	r3, r3, #26
 8002bda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bde:	e015      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x618>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002bf8:	2320      	movs	r3, #32
 8002bfa:	e003      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	3301      	adds	r3, #1
 8002c06:	069b      	lsls	r3, r3, #26
 8002c08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d109      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x638>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	0e9b      	lsrs	r3, r3, #26
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	2101      	movs	r1, #1
 8002c26:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2a:	e017      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x668>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa93 f3a3 	rbit	r3, r3
 8002c38:	61bb      	str	r3, [r7, #24]
  return result;
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002c44:	2320      	movs	r3, #32
 8002c46:	e003      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	3301      	adds	r3, #1
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	2101      	movs	r1, #1
 8002c58:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5c:	ea42 0103 	orr.w	r1, r2, r3
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10d      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x694>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0e9b      	lsrs	r3, r3, #26
 8002c72:	3301      	adds	r3, #1
 8002c74:	f003 021f 	and.w	r2, r3, #31
 8002c78:	4613      	mov	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3b1e      	subs	r3, #30
 8002c80:	051b      	lsls	r3, r3, #20
 8002c82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c86:	e01d      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x6d0>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	fa93 f3a3 	rbit	r3, r3
 8002c94:	60fb      	str	r3, [r7, #12]
  return result;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d103      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	e005      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x6bc>
 8002ca4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	f003 021f 	and.w	r2, r3, #31
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	3b1e      	subs	r3, #30
 8002cbe:	051b      	lsls	r3, r3, #20
 8002cc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cc4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f7ff fa74 	bl	80021b8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b3d      	ldr	r3, [pc, #244]	; (8002dcc <HAL_ADC_ConfigChannel+0x7d8>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d06c      	beq.n	8002db6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cdc:	483c      	ldr	r0, [pc, #240]	; (8002dd0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cde:	f7ff f9c9 	bl	8002074 <LL_ADC_GetCommonPathInternalCh>
 8002ce2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a3a      	ldr	r2, [pc, #232]	; (8002dd4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d127      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cf0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d121      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a35      	ldr	r2, [pc, #212]	; (8002dd8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d157      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d0e:	4619      	mov	r1, r3
 8002d10:	482f      	ldr	r0, [pc, #188]	; (8002dd0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d12:	f7ff f99c 	bl	800204e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d16:	4b31      	ldr	r3, [pc, #196]	; (8002ddc <HAL_ADC_ConfigChannel+0x7e8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	099b      	lsrs	r3, r3, #6
 8002d1c:	4a30      	ldr	r2, [pc, #192]	; (8002de0 <HAL_ADC_ConfigChannel+0x7ec>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d30:	e002      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f9      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d3e:	e03a      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a27      	ldr	r2, [pc, #156]	; (8002de4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d113      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10d      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1f      	ldr	r2, [pc, #124]	; (8002dd8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d12a      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4819      	ldr	r0, [pc, #100]	; (8002dd0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d6c:	f7ff f96f 	bl	800204e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d70:	e021      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d11c      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d116      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d111      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	480c      	ldr	r0, [pc, #48]	; (8002dd0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d9e:	f7ff f956 	bl	800204e <LL_ADC_SetCommonPathInternalCh>
 8002da2:	e008      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	f043 0220 	orr.w	r2, r3, #32
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002dbe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	37d8      	adds	r7, #216	; 0xd8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	80080000 	.word	0x80080000
 8002dd0:	50040300 	.word	0x50040300
 8002dd4:	c7520000 	.word	0xc7520000
 8002dd8:	50040000 	.word	0x50040000
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	053e2d63 	.word	0x053e2d63
 8002de4:	cb840000 	.word	0xcb840000
 8002de8:	80000001 	.word	0x80000001

08002dec <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <LL_EXTI_EnableIT_0_31+0x20>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4904      	ldr	r1, [pc, #16]	; (8002e0c <LL_EXTI_EnableIT_0_31+0x20>)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	600b      	str	r3, [r1, #0]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	40010400 	.word	0x40010400

08002e10 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <LL_EXTI_DisableIT_0_31+0x24>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	4904      	ldr	r1, [pc, #16]	; (8002e34 <LL_EXTI_DisableIT_0_31+0x24>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40010400 	.word	0x40010400

08002e38 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	4904      	ldr	r1, [pc, #16]	; (8002e58 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]

}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	40010400 	.word	0x40010400

08002e5c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	4904      	ldr	r1, [pc, #16]	; (8002e80 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40010400 	.word	0x40010400

08002e84 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	4904      	ldr	r1, [pc, #16]	; (8002ea4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]

}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40010400 	.word	0x40010400

08002ea8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	4904      	ldr	r1, [pc, #16]	; (8002ecc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]

}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40010400 	.word	0x40010400

08002ed0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	4904      	ldr	r1, [pc, #16]	; (8002ef0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60cb      	str	r3, [r1, #12]
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	40010400 	.word	0x40010400

08002ef4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	43db      	mvns	r3, r3
 8002f04:	4904      	ldr	r1, [pc, #16]	; (8002f18 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	60cb      	str	r3, [r1, #12]
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40010400 	.word	0x40010400

08002f1c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002f24:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6153      	str	r3, [r2, #20]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40010400 	.word	0x40010400

08002f3c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d102      	bne.n	8002f58 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	77fb      	strb	r3, [r7, #31]
 8002f56:	e0d1      	b.n	80030fc <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f66:	d102      	bne.n	8002f6e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	77fb      	strb	r3, [r7, #31]
 8002f6c:	e0c6      	b.n	80030fc <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d115      	bne.n	8002fa6 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f88:	4b5f      	ldr	r3, [pc, #380]	; (8003108 <HAL_COMP_Init+0x1cc>)
 8002f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8c:	4a5e      	ldr	r2, [pc, #376]	; (8003108 <HAL_COMP_Init+0x1cc>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6613      	str	r3, [r2, #96]	; 0x60
 8002f94:	4b5c      	ldr	r3, [pc, #368]	; (8003108 <HAL_COMP_Init+0x1cc>)
 8002f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7fe fc4d 	bl	8001840 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fb0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	4b4b      	ldr	r3, [pc, #300]	; (800310c <HAL_COMP_Init+0x1d0>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	6979      	ldr	r1, [r7, #20]
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff2:	d106      	bne.n	8003002 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8002ff4:	4b46      	ldr	r3, [pc, #280]	; (8003110 <HAL_COMP_Init+0x1d4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a45      	ldr	r2, [pc, #276]	; (8003110 <HAL_COMP_Init+0x1d4>)
 8002ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	e005      	b.n	800300e <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8003002:	4b43      	ldr	r3, [pc, #268]	; (8003110 <HAL_COMP_Init+0x1d4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a42      	ldr	r2, [pc, #264]	; (8003110 <HAL_COMP_Init+0x1d4>)
 8003008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800300c:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d016      	beq.n	800304a <HAL_COMP_Init+0x10e>
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d113      	bne.n	800304a <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003022:	4b3c      	ldr	r3, [pc, #240]	; (8003114 <HAL_COMP_Init+0x1d8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	099b      	lsrs	r3, r3, #6
 8003028:	4a3b      	ldr	r2, [pc, #236]	; (8003118 <HAL_COMP_Init+0x1dc>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	099b      	lsrs	r3, r3, #6
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800303c:	e002      	b.n	8003044 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	3b01      	subs	r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f9      	bne.n	800303e <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a33      	ldr	r2, [pc, #204]	; (800311c <HAL_COMP_Init+0x1e0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d102      	bne.n	800305a <HAL_COMP_Init+0x11e>
 8003054:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003058:	e001      	b.n	800305e <HAL_COMP_Init+0x122>
 800305a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800305e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d037      	beq.n	80030dc <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003078:	6938      	ldr	r0, [r7, #16]
 800307a:	f7ff ff03 	bl	8002e84 <LL_EXTI_EnableRisingTrig_0_31>
 800307e:	e002      	b.n	8003086 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003080:	6938      	ldr	r0, [r7, #16]
 8003082:	f7ff ff11 	bl	8002ea8 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003092:	6938      	ldr	r0, [r7, #16]
 8003094:	f7ff ff1c 	bl	8002ed0 <LL_EXTI_EnableFallingTrig_0_31>
 8003098:	e002      	b.n	80030a0 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800309a:	6938      	ldr	r0, [r7, #16]
 800309c:	f7ff ff2a 	bl	8002ef4 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80030a0:	6938      	ldr	r0, [r7, #16]
 80030a2:	f7ff ff3b 	bl	8002f1c <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80030b2:	6938      	ldr	r0, [r7, #16]
 80030b4:	f7ff fec0 	bl	8002e38 <LL_EXTI_EnableEvent_0_31>
 80030b8:	e002      	b.n	80030c0 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80030ba:	6938      	ldr	r0, [r7, #16]
 80030bc:	f7ff fece 	bl	8002e5c <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80030cc:	6938      	ldr	r0, [r7, #16]
 80030ce:	f7ff fe8d 	bl	8002dec <LL_EXTI_EnableIT_0_31>
 80030d2:	e009      	b.n	80030e8 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80030d4:	6938      	ldr	r0, [r7, #16]
 80030d6:	f7ff fe9b 	bl	8002e10 <LL_EXTI_DisableIT_0_31>
 80030da:	e005      	b.n	80030e8 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80030dc:	6938      	ldr	r0, [r7, #16]
 80030de:	f7ff febd 	bl	8002e5c <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80030e2:	6938      	ldr	r0, [r7, #16]
 80030e4:	f7ff fe94 	bl	8002e10 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d103      	bne.n	80030fc <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80030fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3720      	adds	r7, #32
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000
 800310c:	ff207d03 	.word	0xff207d03
 8003110:	40010204 	.word	0x40010204
 8003114:	20000000 	.word	0x20000000
 8003118:	053e2d63 	.word	0x053e2d63
 800311c:	40010200 	.word	0x40010200

08003120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <__NVIC_SetPriorityGrouping+0x44>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800313c:	4013      	ands	r3, r2
 800313e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800314c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003152:	4a04      	ldr	r2, [pc, #16]	; (8003164 <__NVIC_SetPriorityGrouping+0x44>)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	60d3      	str	r3, [r2, #12]
}
 8003158:	bf00      	nop
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800316c:	4b04      	ldr	r3, [pc, #16]	; (8003180 <__NVIC_GetPriorityGrouping+0x18>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	0a1b      	lsrs	r3, r3, #8
 8003172:	f003 0307 	and.w	r3, r3, #7
}
 8003176:	4618      	mov	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	6039      	str	r1, [r7, #0]
 800318e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003194:	2b00      	cmp	r3, #0
 8003196:	db0a      	blt.n	80031ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	b2da      	uxtb	r2, r3
 800319c:	490c      	ldr	r1, [pc, #48]	; (80031d0 <__NVIC_SetPriority+0x4c>)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	0112      	lsls	r2, r2, #4
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	440b      	add	r3, r1
 80031a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031ac:	e00a      	b.n	80031c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4908      	ldr	r1, [pc, #32]	; (80031d4 <__NVIC_SetPriority+0x50>)
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	3b04      	subs	r3, #4
 80031bc:	0112      	lsls	r2, r2, #4
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	440b      	add	r3, r1
 80031c2:	761a      	strb	r2, [r3, #24]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000e100 	.word	0xe000e100
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d8:	b480      	push	{r7}
 80031da:	b089      	sub	sp, #36	; 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f1c3 0307 	rsb	r3, r3, #7
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	bf28      	it	cs
 80031f6:	2304      	movcs	r3, #4
 80031f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3304      	adds	r3, #4
 80031fe:	2b06      	cmp	r3, #6
 8003200:	d902      	bls.n	8003208 <NVIC_EncodePriority+0x30>
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3b03      	subs	r3, #3
 8003206:	e000      	b.n	800320a <NVIC_EncodePriority+0x32>
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800320c:	f04f 32ff 	mov.w	r2, #4294967295
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43da      	mvns	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	401a      	ands	r2, r3
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003220:	f04f 31ff 	mov.w	r1, #4294967295
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	43d9      	mvns	r1, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	4313      	orrs	r3, r2
         );
}
 8003232:	4618      	mov	r0, r3
 8003234:	3724      	adds	r7, #36	; 0x24
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3b01      	subs	r3, #1
 800324c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003250:	d301      	bcc.n	8003256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003252:	2301      	movs	r3, #1
 8003254:	e00f      	b.n	8003276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003256:	4a0a      	ldr	r2, [pc, #40]	; (8003280 <SysTick_Config+0x40>)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800325e:	210f      	movs	r1, #15
 8003260:	f04f 30ff 	mov.w	r0, #4294967295
 8003264:	f7ff ff8e 	bl	8003184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <SysTick_Config+0x40>)
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800326e:	4b04      	ldr	r3, [pc, #16]	; (8003280 <SysTick_Config+0x40>)
 8003270:	2207      	movs	r2, #7
 8003272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	e000e010 	.word	0xe000e010

08003284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff ff47 	bl	8003120 <__NVIC_SetPriorityGrouping>
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b086      	sub	sp, #24
 800329e:	af00      	add	r7, sp, #0
 80032a0:	4603      	mov	r3, r0
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032ac:	f7ff ff5c 	bl	8003168 <__NVIC_GetPriorityGrouping>
 80032b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	6978      	ldr	r0, [r7, #20]
 80032b8:	f7ff ff8e 	bl	80031d8 <NVIC_EncodePriority>
 80032bc:	4602      	mov	r2, r0
 80032be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff5d 	bl	8003184 <__NVIC_SetPriority>
}
 80032ca:	bf00      	nop
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff ffb0 	bl	8003240 <SysTick_Config>
 80032e0:	4603      	mov	r3, r0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032fa:	e166      	b.n	80035ca <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	2101      	movs	r1, #1
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	fa01 f303 	lsl.w	r3, r1, r3
 8003308:	4013      	ands	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8158 	beq.w	80035c4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b01      	cmp	r3, #1
 800331e:	d005      	beq.n	800332c <HAL_GPIO_Init+0x40>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 0303 	and.w	r3, r3, #3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d130      	bne.n	800338e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	2203      	movs	r2, #3
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4013      	ands	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003362:	2201      	movs	r2, #1
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	091b      	lsrs	r3, r3, #4
 8003378:	f003 0201 	and.w	r2, r3, #1
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	2b03      	cmp	r3, #3
 8003398:	d017      	beq.n	80033ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	2203      	movs	r2, #3
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4013      	ands	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d123      	bne.n	800341e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	08da      	lsrs	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3208      	adds	r2, #8
 80033de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	220f      	movs	r2, #15
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4013      	ands	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	08da      	lsrs	r2, r3, #3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3208      	adds	r2, #8
 8003418:	6939      	ldr	r1, [r7, #16]
 800341a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	2203      	movs	r2, #3
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 0203 	and.w	r2, r3, #3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80b2 	beq.w	80035c4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003460:	4b61      	ldr	r3, [pc, #388]	; (80035e8 <HAL_GPIO_Init+0x2fc>)
 8003462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003464:	4a60      	ldr	r2, [pc, #384]	; (80035e8 <HAL_GPIO_Init+0x2fc>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6613      	str	r3, [r2, #96]	; 0x60
 800346c:	4b5e      	ldr	r3, [pc, #376]	; (80035e8 <HAL_GPIO_Init+0x2fc>)
 800346e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003478:	4a5c      	ldr	r2, [pc, #368]	; (80035ec <HAL_GPIO_Init+0x300>)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	089b      	lsrs	r3, r3, #2
 800347e:	3302      	adds	r3, #2
 8003480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003484:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	220f      	movs	r2, #15
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034a2:	d02b      	beq.n	80034fc <HAL_GPIO_Init+0x210>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a52      	ldr	r2, [pc, #328]	; (80035f0 <HAL_GPIO_Init+0x304>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d025      	beq.n	80034f8 <HAL_GPIO_Init+0x20c>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a51      	ldr	r2, [pc, #324]	; (80035f4 <HAL_GPIO_Init+0x308>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d01f      	beq.n	80034f4 <HAL_GPIO_Init+0x208>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a50      	ldr	r2, [pc, #320]	; (80035f8 <HAL_GPIO_Init+0x30c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d019      	beq.n	80034f0 <HAL_GPIO_Init+0x204>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a4f      	ldr	r2, [pc, #316]	; (80035fc <HAL_GPIO_Init+0x310>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d013      	beq.n	80034ec <HAL_GPIO_Init+0x200>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a4e      	ldr	r2, [pc, #312]	; (8003600 <HAL_GPIO_Init+0x314>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00d      	beq.n	80034e8 <HAL_GPIO_Init+0x1fc>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a4d      	ldr	r2, [pc, #308]	; (8003604 <HAL_GPIO_Init+0x318>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d007      	beq.n	80034e4 <HAL_GPIO_Init+0x1f8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a4c      	ldr	r2, [pc, #304]	; (8003608 <HAL_GPIO_Init+0x31c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d101      	bne.n	80034e0 <HAL_GPIO_Init+0x1f4>
 80034dc:	2307      	movs	r3, #7
 80034de:	e00e      	b.n	80034fe <HAL_GPIO_Init+0x212>
 80034e0:	2308      	movs	r3, #8
 80034e2:	e00c      	b.n	80034fe <HAL_GPIO_Init+0x212>
 80034e4:	2306      	movs	r3, #6
 80034e6:	e00a      	b.n	80034fe <HAL_GPIO_Init+0x212>
 80034e8:	2305      	movs	r3, #5
 80034ea:	e008      	b.n	80034fe <HAL_GPIO_Init+0x212>
 80034ec:	2304      	movs	r3, #4
 80034ee:	e006      	b.n	80034fe <HAL_GPIO_Init+0x212>
 80034f0:	2303      	movs	r3, #3
 80034f2:	e004      	b.n	80034fe <HAL_GPIO_Init+0x212>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e002      	b.n	80034fe <HAL_GPIO_Init+0x212>
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <HAL_GPIO_Init+0x212>
 80034fc:	2300      	movs	r3, #0
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	f002 0203 	and.w	r2, r2, #3
 8003504:	0092      	lsls	r2, r2, #2
 8003506:	4093      	lsls	r3, r2
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800350e:	4937      	ldr	r1, [pc, #220]	; (80035ec <HAL_GPIO_Init+0x300>)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	089b      	lsrs	r3, r3, #2
 8003514:	3302      	adds	r3, #2
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800351c:	4b3b      	ldr	r3, [pc, #236]	; (800360c <HAL_GPIO_Init+0x320>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	43db      	mvns	r3, r3
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4013      	ands	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003540:	4a32      	ldr	r2, [pc, #200]	; (800360c <HAL_GPIO_Init+0x320>)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003546:	4b31      	ldr	r3, [pc, #196]	; (800360c <HAL_GPIO_Init+0x320>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	43db      	mvns	r3, r3
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4013      	ands	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800356a:	4a28      	ldr	r2, [pc, #160]	; (800360c <HAL_GPIO_Init+0x320>)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003570:	4b26      	ldr	r3, [pc, #152]	; (800360c <HAL_GPIO_Init+0x320>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	43db      	mvns	r3, r3
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4013      	ands	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003594:	4a1d      	ldr	r2, [pc, #116]	; (800360c <HAL_GPIO_Init+0x320>)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800359a:	4b1c      	ldr	r3, [pc, #112]	; (800360c <HAL_GPIO_Init+0x320>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4013      	ands	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035be:	4a13      	ldr	r2, [pc, #76]	; (800360c <HAL_GPIO_Init+0x320>)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	3301      	adds	r3, #1
 80035c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	fa22 f303 	lsr.w	r3, r2, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f47f ae91 	bne.w	80032fc <HAL_GPIO_Init+0x10>
  }
}
 80035da:	bf00      	nop
 80035dc:	bf00      	nop
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40010000 	.word	0x40010000
 80035f0:	48000400 	.word	0x48000400
 80035f4:	48000800 	.word	0x48000800
 80035f8:	48000c00 	.word	0x48000c00
 80035fc:	48001000 	.word	0x48001000
 8003600:	48001400 	.word	0x48001400
 8003604:	48001800 	.word	0x48001800
 8003608:	48001c00 	.word	0x48001c00
 800360c:	40010400 	.word	0x40010400

08003610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	807b      	strh	r3, [r7, #2]
 800361c:	4613      	mov	r3, r2
 800361e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003620:	787b      	ldrb	r3, [r7, #1]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003626:	887a      	ldrh	r2, [r7, #2]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800362c:	e002      	b.n	8003634 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800362e:	887a      	ldrh	r2, [r7, #2]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003644:	4b0d      	ldr	r3, [pc, #52]	; (800367c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800364c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003650:	d102      	bne.n	8003658 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003656:	e00b      	b.n	8003670 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003658:	4b08      	ldr	r3, [pc, #32]	; (800367c <HAL_PWREx_GetVoltageRange+0x3c>)
 800365a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003666:	d102      	bne.n	800366e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800366c:	e000      	b.n	8003670 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800366e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40007000 	.word	0x40007000

08003680 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d141      	bne.n	8003712 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800368e:	4b4b      	ldr	r3, [pc, #300]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369a:	d131      	bne.n	8003700 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800369c:	4b47      	ldr	r3, [pc, #284]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a2:	4a46      	ldr	r2, [pc, #280]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036ac:	4b43      	ldr	r3, [pc, #268]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036b4:	4a41      	ldr	r2, [pc, #260]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80036bc:	4b40      	ldr	r3, [pc, #256]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2232      	movs	r2, #50	; 0x32
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	4a3f      	ldr	r2, [pc, #252]	; (80037c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	0c9b      	lsrs	r3, r3, #18
 80036ce:	3301      	adds	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036d2:	e002      	b.n	80036da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036da:	4b38      	ldr	r3, [pc, #224]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e6:	d102      	bne.n	80036ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f2      	bne.n	80036d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036ee:	4b33      	ldr	r3, [pc, #204]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fa:	d158      	bne.n	80037ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e057      	b.n	80037b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003700:	4b2e      	ldr	r3, [pc, #184]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003706:	4a2d      	ldr	r2, [pc, #180]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800370c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003710:	e04d      	b.n	80037ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003718:	d141      	bne.n	800379e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800371a:	4b28      	ldr	r3, [pc, #160]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003726:	d131      	bne.n	800378c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003728:	4b24      	ldr	r3, [pc, #144]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800372e:	4a23      	ldr	r2, [pc, #140]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003734:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003738:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003740:	4a1e      	ldr	r2, [pc, #120]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003746:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003748:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2232      	movs	r2, #50	; 0x32
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	4a1c      	ldr	r2, [pc, #112]	; (80037c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003754:	fba2 2303 	umull	r2, r3, r2, r3
 8003758:	0c9b      	lsrs	r3, r3, #18
 800375a:	3301      	adds	r3, #1
 800375c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800375e:	e002      	b.n	8003766 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	3b01      	subs	r3, #1
 8003764:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003772:	d102      	bne.n	800377a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f2      	bne.n	8003760 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003786:	d112      	bne.n	80037ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e011      	b.n	80037b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003792:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003798:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800379c:	e007      	b.n	80037ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800379e:	4b07      	ldr	r3, [pc, #28]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037a6:	4a05      	ldr	r2, [pc, #20]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	40007000 	.word	0x40007000
 80037c0:	20000000 	.word	0x20000000
 80037c4:	431bde83 	.word	0x431bde83

080037c8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80037d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037d6:	6053      	str	r3, [r2, #4]
}
 80037d8:	bf00      	nop
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40007000 	.word	0x40007000

080037e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f000 bc08 	b.w	800400c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037fc:	4b96      	ldr	r3, [pc, #600]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 030c 	and.w	r3, r3, #12
 8003804:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003806:	4b94      	ldr	r3, [pc, #592]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80e4 	beq.w	80039e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <HAL_RCC_OscConfig+0x4c>
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b0c      	cmp	r3, #12
 8003828:	f040 808b 	bne.w	8003942 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2b01      	cmp	r3, #1
 8003830:	f040 8087 	bne.w	8003942 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003834:	4b88      	ldr	r3, [pc, #544]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_OscConfig+0x64>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e3df      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1a      	ldr	r2, [r3, #32]
 8003850:	4b81      	ldr	r3, [pc, #516]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d004      	beq.n	8003866 <HAL_RCC_OscConfig+0x7e>
 800385c:	4b7e      	ldr	r3, [pc, #504]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003864:	e005      	b.n	8003872 <HAL_RCC_OscConfig+0x8a>
 8003866:	4b7c      	ldr	r3, [pc, #496]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386c:	091b      	lsrs	r3, r3, #4
 800386e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003872:	4293      	cmp	r3, r2
 8003874:	d223      	bcs.n	80038be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fdcc 	bl	8004418 <RCC_SetFlashLatencyFromMSIRange>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e3c0      	b.n	800400c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800388a:	4b73      	ldr	r3, [pc, #460]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a72      	ldr	r2, [pc, #456]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003890:	f043 0308 	orr.w	r3, r3, #8
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b70      	ldr	r3, [pc, #448]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	496d      	ldr	r1, [pc, #436]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038a8:	4b6b      	ldr	r3, [pc, #428]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	4968      	ldr	r1, [pc, #416]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
 80038bc:	e025      	b.n	800390a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038be:	4b66      	ldr	r3, [pc, #408]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a65      	ldr	r2, [pc, #404]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 80038c4:	f043 0308 	orr.w	r3, r3, #8
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b63      	ldr	r3, [pc, #396]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	4960      	ldr	r1, [pc, #384]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038dc:	4b5e      	ldr	r3, [pc, #376]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	495b      	ldr	r1, [pc, #364]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fd8c 	bl	8004418 <RCC_SetFlashLatencyFromMSIRange>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e380      	b.n	800400c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800390a:	f000 fcc1 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 800390e:	4602      	mov	r2, r0
 8003910:	4b51      	ldr	r3, [pc, #324]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	4950      	ldr	r1, [pc, #320]	; (8003a5c <HAL_RCC_OscConfig+0x274>)
 800391c:	5ccb      	ldrb	r3, [r1, r3]
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	fa22 f303 	lsr.w	r3, r2, r3
 8003926:	4a4e      	ldr	r2, [pc, #312]	; (8003a60 <HAL_RCC_OscConfig+0x278>)
 8003928:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800392a:	4b4e      	ldr	r3, [pc, #312]	; (8003a64 <HAL_RCC_OscConfig+0x27c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe fb1e 	bl	8001f70 <HAL_InitTick>
 8003934:	4603      	mov	r3, r0
 8003936:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d052      	beq.n	80039e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	e364      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d032      	beq.n	80039b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800394a:	4b43      	ldr	r3, [pc, #268]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a42      	ldr	r2, [pc, #264]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003956:	f7fe fb5b 	bl	8002010 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800395e:	f7fe fb57 	bl	8002010 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e34d      	b.n	800400c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003970:	4b39      	ldr	r3, [pc, #228]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800397c:	4b36      	ldr	r3, [pc, #216]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a35      	ldr	r2, [pc, #212]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003982:	f043 0308 	orr.w	r3, r3, #8
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	4b33      	ldr	r3, [pc, #204]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4930      	ldr	r1, [pc, #192]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800399a:	4b2f      	ldr	r3, [pc, #188]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	492b      	ldr	r1, [pc, #172]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
 80039ae:	e01a      	b.n	80039e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039b0:	4b29      	ldr	r3, [pc, #164]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a28      	ldr	r2, [pc, #160]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 80039b6:	f023 0301 	bic.w	r3, r3, #1
 80039ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039bc:	f7fe fb28 	bl	8002010 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039c4:	f7fe fb24 	bl	8002010 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e31a      	b.n	800400c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039d6:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x1dc>
 80039e2:	e000      	b.n	80039e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d073      	beq.n	8003ada <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_OscConfig+0x21c>
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b0c      	cmp	r3, #12
 80039fc:	d10e      	bne.n	8003a1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d10b      	bne.n	8003a1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a04:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d063      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x2f0>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d15f      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e2f7      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a24:	d106      	bne.n	8003a34 <HAL_RCC_OscConfig+0x24c>
 8003a26:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a0b      	ldr	r2, [pc, #44]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e025      	b.n	8003a80 <HAL_RCC_OscConfig+0x298>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a3c:	d114      	bne.n	8003a68 <HAL_RCC_OscConfig+0x280>
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a05      	ldr	r2, [pc, #20]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a02      	ldr	r2, [pc, #8]	; (8003a58 <HAL_RCC_OscConfig+0x270>)
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e013      	b.n	8003a80 <HAL_RCC_OscConfig+0x298>
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	08008348 	.word	0x08008348
 8003a60:	20000000 	.word	0x20000000
 8003a64:	20000004 	.word	0x20000004
 8003a68:	4ba0      	ldr	r3, [pc, #640]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a9f      	ldr	r2, [pc, #636]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	4b9d      	ldr	r3, [pc, #628]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a9c      	ldr	r2, [pc, #624]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d013      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7fe fac2 	bl	8002010 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a90:	f7fe fabe 	bl	8002010 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b64      	cmp	r3, #100	; 0x64
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e2b4      	b.n	800400c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aa2:	4b92      	ldr	r3, [pc, #584]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0x2a8>
 8003aae:	e014      	b.n	8003ada <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fe faae 	bl	8002010 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab8:	f7fe faaa 	bl	8002010 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	; 0x64
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e2a0      	b.n	800400c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aca:	4b88      	ldr	r3, [pc, #544]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x2d0>
 8003ad6:	e000      	b.n	8003ada <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d060      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_OscConfig+0x310>
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b0c      	cmp	r3, #12
 8003af0:	d119      	bne.n	8003b26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d116      	bne.n	8003b26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af8:	4b7c      	ldr	r3, [pc, #496]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_OscConfig+0x328>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e27d      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b10:	4b76      	ldr	r3, [pc, #472]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	061b      	lsls	r3, r3, #24
 8003b1e:	4973      	ldr	r1, [pc, #460]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b24:	e040      	b.n	8003ba8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d023      	beq.n	8003b76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b2e:	4b6f      	ldr	r3, [pc, #444]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a6e      	ldr	r2, [pc, #440]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3a:	f7fe fa69 	bl	8002010 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b42:	f7fe fa65 	bl	8002010 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e25b      	b.n	800400c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b54:	4b65      	ldr	r3, [pc, #404]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f0      	beq.n	8003b42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b60:	4b62      	ldr	r3, [pc, #392]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	061b      	lsls	r3, r3, #24
 8003b6e:	495f      	ldr	r1, [pc, #380]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]
 8003b74:	e018      	b.n	8003ba8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b76:	4b5d      	ldr	r3, [pc, #372]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a5c      	ldr	r2, [pc, #368]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fe fa45 	bl	8002010 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b8a:	f7fe fa41 	bl	8002010 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e237      	b.n	800400c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b9c:	4b53      	ldr	r3, [pc, #332]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f0      	bne.n	8003b8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d03c      	beq.n	8003c2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01c      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bbc:	4b4b      	ldr	r3, [pc, #300]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc2:	4a4a      	ldr	r2, [pc, #296]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bcc:	f7fe fa20 	bl	8002010 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd4:	f7fe fa1c 	bl	8002010 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e212      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003be6:	4b41      	ldr	r3, [pc, #260]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ef      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x3ec>
 8003bf4:	e01b      	b.n	8003c2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf6:	4b3d      	ldr	r3, [pc, #244]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bfc:	4a3b      	ldr	r2, [pc, #236]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c06:	f7fe fa03 	bl	8002010 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0e:	f7fe f9ff 	bl	8002010 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e1f5      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c20:	4b32      	ldr	r3, [pc, #200]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1ef      	bne.n	8003c0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 80a6 	beq.w	8003d88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c40:	4b2a      	ldr	r3, [pc, #168]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10d      	bne.n	8003c68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4c:	4b27      	ldr	r3, [pc, #156]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c50:	4a26      	ldr	r2, [pc, #152]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c56:	6593      	str	r3, [r2, #88]	; 0x58
 8003c58:	4b24      	ldr	r3, [pc, #144]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c64:	2301      	movs	r3, #1
 8003c66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c68:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <HAL_RCC_OscConfig+0x508>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d118      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c74:	4b1e      	ldr	r3, [pc, #120]	; (8003cf0 <HAL_RCC_OscConfig+0x508>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a1d      	ldr	r2, [pc, #116]	; (8003cf0 <HAL_RCC_OscConfig+0x508>)
 8003c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c80:	f7fe f9c6 	bl	8002010 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c88:	f7fe f9c2 	bl	8002010 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e1b8      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c9a:	4b15      	ldr	r3, [pc, #84]	; (8003cf0 <HAL_RCC_OscConfig+0x508>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d108      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x4d8>
 8003cae:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb4:	4a0d      	ldr	r2, [pc, #52]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cbe:	e029      	b.n	8003d14 <HAL_RCC_OscConfig+0x52c>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b05      	cmp	r3, #5
 8003cc6:	d115      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x50c>
 8003cc8:	4b08      	ldr	r3, [pc, #32]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cce:	4a07      	ldr	r2, [pc, #28]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003cd0:	f043 0304 	orr.w	r3, r3, #4
 8003cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cd8:	4b04      	ldr	r3, [pc, #16]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cde:	4a03      	ldr	r2, [pc, #12]	; (8003cec <HAL_RCC_OscConfig+0x504>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ce8:	e014      	b.n	8003d14 <HAL_RCC_OscConfig+0x52c>
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40007000 	.word	0x40007000
 8003cf4:	4b9d      	ldr	r3, [pc, #628]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	4a9c      	ldr	r2, [pc, #624]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
 8003d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d04:	4b99      	ldr	r3, [pc, #612]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	4a98      	ldr	r2, [pc, #608]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003d0c:	f023 0304 	bic.w	r3, r3, #4
 8003d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d016      	beq.n	8003d4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1c:	f7fe f978 	bl	8002010 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d22:	e00a      	b.n	8003d3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d24:	f7fe f974 	bl	8002010 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e168      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d3a:	4b8c      	ldr	r3, [pc, #560]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0ed      	beq.n	8003d24 <HAL_RCC_OscConfig+0x53c>
 8003d48:	e015      	b.n	8003d76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4a:	f7fe f961 	bl	8002010 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d50:	e00a      	b.n	8003d68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f7fe f95d 	bl	8002010 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e151      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d68:	4b80      	ldr	r3, [pc, #512]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1ed      	bne.n	8003d52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d76:	7ffb      	ldrb	r3, [r7, #31]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7c:	4b7b      	ldr	r3, [pc, #492]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d80:	4a7a      	ldr	r2, [pc, #488]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d03c      	beq.n	8003e0e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01c      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d9c:	4b73      	ldr	r3, [pc, #460]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003da2:	4a72      	ldr	r2, [pc, #456]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dac:	f7fe f930 	bl	8002010 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003db4:	f7fe f92c 	bl	8002010 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e122      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dc6:	4b69      	ldr	r3, [pc, #420]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ef      	beq.n	8003db4 <HAL_RCC_OscConfig+0x5cc>
 8003dd4:	e01b      	b.n	8003e0e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dd6:	4b65      	ldr	r3, [pc, #404]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ddc:	4a63      	ldr	r2, [pc, #396]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de6:	f7fe f913 	bl	8002010 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dee:	f7fe f90f 	bl	8002010 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e105      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e00:	4b5a      	ldr	r3, [pc, #360]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1ef      	bne.n	8003dee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 80f9 	beq.w	800400a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	f040 80cf 	bne.w	8003fc0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e22:	4b52      	ldr	r3, [pc, #328]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f003 0203 	and.w	r2, r3, #3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d12c      	bne.n	8003e90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	3b01      	subs	r3, #1
 8003e42:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d123      	bne.n	8003e90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e52:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d11b      	bne.n	8003e90 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d113      	bne.n	8003e90 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	3b01      	subs	r3, #1
 8003e76:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d109      	bne.n	8003e90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	085b      	lsrs	r3, r3, #1
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d071      	beq.n	8003f74 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b0c      	cmp	r3, #12
 8003e94:	d068      	beq.n	8003f68 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e96:	4b35      	ldr	r3, [pc, #212]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d105      	bne.n	8003eae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ea2:	4b32      	ldr	r3, [pc, #200]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e0ac      	b.n	800400c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003eb2:	4b2e      	ldr	r3, [pc, #184]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a2d      	ldr	r2, [pc, #180]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003eb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ebc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ebe:	f7fe f8a7 	bl	8002010 <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec6:	f7fe f8a3 	bl	8002010 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e099      	b.n	800400c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed8:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f0      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ee4:	4b21      	ldr	r3, [pc, #132]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	4b21      	ldr	r3, [pc, #132]	; (8003f70 <HAL_RCC_OscConfig+0x788>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ef4:	3a01      	subs	r2, #1
 8003ef6:	0112      	lsls	r2, r2, #4
 8003ef8:	4311      	orrs	r1, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003efe:	0212      	lsls	r2, r2, #8
 8003f00:	4311      	orrs	r1, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f06:	0852      	lsrs	r2, r2, #1
 8003f08:	3a01      	subs	r2, #1
 8003f0a:	0552      	lsls	r2, r2, #21
 8003f0c:	4311      	orrs	r1, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f12:	0852      	lsrs	r2, r2, #1
 8003f14:	3a01      	subs	r2, #1
 8003f16:	0652      	lsls	r2, r2, #25
 8003f18:	4311      	orrs	r1, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f1e:	06d2      	lsls	r2, r2, #27
 8003f20:	430a      	orrs	r2, r1
 8003f22:	4912      	ldr	r1, [pc, #72]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f28:	4b10      	ldr	r3, [pc, #64]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a0f      	ldr	r2, [pc, #60]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f34:	4b0d      	ldr	r3, [pc, #52]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a0c      	ldr	r2, [pc, #48]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f40:	f7fe f866 	bl	8002010 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f48:	f7fe f862 	bl	8002010 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e058      	b.n	800400c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f5a:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <HAL_RCC_OscConfig+0x784>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f66:	e050      	b.n	800400a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e04f      	b.n	800400c <HAL_RCC_OscConfig+0x824>
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f74:	4b27      	ldr	r3, [pc, #156]	; (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d144      	bne.n	800400a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f80:	4b24      	ldr	r3, [pc, #144]	; (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a23      	ldr	r2, [pc, #140]	; (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f8c:	4b21      	ldr	r3, [pc, #132]	; (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4a20      	ldr	r2, [pc, #128]	; (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f98:	f7fe f83a 	bl	8002010 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fe f836 	bl	8002010 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e02c      	b.n	800400c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb2:	4b18      	ldr	r3, [pc, #96]	; (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x7b8>
 8003fbe:	e024      	b.n	800400a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b0c      	cmp	r3, #12
 8003fc4:	d01f      	beq.n	8004006 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc6:	4b13      	ldr	r3, [pc, #76]	; (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a12      	ldr	r2, [pc, #72]	; (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003fcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd2:	f7fe f81d 	bl	8002010 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fda:	f7fe f819 	bl	8002010 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e00f      	b.n	800400c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fec:	4b09      	ldr	r3, [pc, #36]	; (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f0      	bne.n	8003fda <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	4905      	ldr	r1, [pc, #20]	; (8004014 <HAL_RCC_OscConfig+0x82c>)
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_RCC_OscConfig+0x830>)
 8004000:	4013      	ands	r3, r2
 8004002:	60cb      	str	r3, [r1, #12]
 8004004:	e001      	b.n	800400a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3720      	adds	r7, #32
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40021000 	.word	0x40021000
 8004018:	feeefffc 	.word	0xfeeefffc

0800401c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e11d      	b.n	8004270 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004034:	4b90      	ldr	r3, [pc, #576]	; (8004278 <HAL_RCC_ClockConfig+0x25c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d910      	bls.n	8004064 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004042:	4b8d      	ldr	r3, [pc, #564]	; (8004278 <HAL_RCC_ClockConfig+0x25c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 020f 	bic.w	r2, r3, #15
 800404a:	498b      	ldr	r1, [pc, #556]	; (8004278 <HAL_RCC_ClockConfig+0x25c>)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	4313      	orrs	r3, r2
 8004050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b89      	ldr	r3, [pc, #548]	; (8004278 <HAL_RCC_ClockConfig+0x25c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e105      	b.n	8004270 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d010      	beq.n	8004092 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	4b81      	ldr	r3, [pc, #516]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800407c:	429a      	cmp	r2, r3
 800407e:	d908      	bls.n	8004092 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004080:	4b7e      	ldr	r3, [pc, #504]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	497b      	ldr	r1, [pc, #492]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 800408e:	4313      	orrs	r3, r2
 8004090:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d079      	beq.n	8004192 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d11e      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a6:	4b75      	ldr	r3, [pc, #468]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e0dc      	b.n	8004270 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80040b6:	f000 fa09 	bl	80044cc <RCC_GetSysClockFreqFromPLLSource>
 80040ba:	4603      	mov	r3, r0
 80040bc:	4a70      	ldr	r2, [pc, #448]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d946      	bls.n	8004150 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80040c2:	4b6e      	ldr	r3, [pc, #440]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d140      	bne.n	8004150 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040ce:	4b6b      	ldr	r3, [pc, #428]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040d6:	4a69      	ldr	r2, [pc, #420]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 80040d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80040de:	2380      	movs	r3, #128	; 0x80
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	e035      	b.n	8004150 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d107      	bne.n	80040fc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ec:	4b63      	ldr	r3, [pc, #396]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d115      	bne.n	8004124 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0b9      	b.n	8004270 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d107      	bne.n	8004114 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004104:	4b5d      	ldr	r3, [pc, #372]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d109      	bne.n	8004124 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0ad      	b.n	8004270 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004114:	4b59      	ldr	r3, [pc, #356]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0a5      	b.n	8004270 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004124:	f000 f8b4 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8004128:	4603      	mov	r3, r0
 800412a:	4a55      	ldr	r2, [pc, #340]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d90f      	bls.n	8004150 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004130:	4b52      	ldr	r3, [pc, #328]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d109      	bne.n	8004150 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800413c:	4b4f      	ldr	r3, [pc, #316]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004144:	4a4d      	ldr	r2, [pc, #308]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 8004146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800414a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800414c:	2380      	movs	r3, #128	; 0x80
 800414e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004150:	4b4a      	ldr	r3, [pc, #296]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f023 0203 	bic.w	r2, r3, #3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	4947      	ldr	r1, [pc, #284]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004162:	f7fd ff55 	bl	8002010 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004168:	e00a      	b.n	8004180 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416a:	f7fd ff51 	bl	8002010 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f241 3288 	movw	r2, #5000	; 0x1388
 8004178:	4293      	cmp	r3, r2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e077      	b.n	8004270 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004180:	4b3e      	ldr	r3, [pc, #248]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 020c 	and.w	r2, r3, #12
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	429a      	cmp	r2, r3
 8004190:	d1eb      	bne.n	800416a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b80      	cmp	r3, #128	; 0x80
 8004196:	d105      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004198:	4b38      	ldr	r3, [pc, #224]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4a37      	ldr	r2, [pc, #220]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 800419e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041a2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d010      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	4b31      	ldr	r3, [pc, #196]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041bc:	429a      	cmp	r2, r3
 80041be:	d208      	bcs.n	80041d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c0:	4b2e      	ldr	r3, [pc, #184]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	492b      	ldr	r1, [pc, #172]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041d2:	4b29      	ldr	r3, [pc, #164]	; (8004278 <HAL_RCC_ClockConfig+0x25c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d210      	bcs.n	8004202 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e0:	4b25      	ldr	r3, [pc, #148]	; (8004278 <HAL_RCC_ClockConfig+0x25c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f023 020f 	bic.w	r2, r3, #15
 80041e8:	4923      	ldr	r1, [pc, #140]	; (8004278 <HAL_RCC_ClockConfig+0x25c>)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f0:	4b21      	ldr	r3, [pc, #132]	; (8004278 <HAL_RCC_ClockConfig+0x25c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d001      	beq.n	8004202 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e036      	b.n	8004270 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800420e:	4b1b      	ldr	r3, [pc, #108]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	4918      	ldr	r1, [pc, #96]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 800421c:	4313      	orrs	r3, r2
 800421e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d009      	beq.n	8004240 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800422c:	4b13      	ldr	r3, [pc, #76]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4910      	ldr	r1, [pc, #64]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 800423c:	4313      	orrs	r3, r2
 800423e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004240:	f000 f826 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8004244:	4602      	mov	r2, r0
 8004246:	4b0d      	ldr	r3, [pc, #52]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	091b      	lsrs	r3, r3, #4
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	490c      	ldr	r1, [pc, #48]	; (8004284 <HAL_RCC_ClockConfig+0x268>)
 8004252:	5ccb      	ldrb	r3, [r1, r3]
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	fa22 f303 	lsr.w	r3, r2, r3
 800425c:	4a0a      	ldr	r2, [pc, #40]	; (8004288 <HAL_RCC_ClockConfig+0x26c>)
 800425e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004260:	4b0a      	ldr	r3, [pc, #40]	; (800428c <HAL_RCC_ClockConfig+0x270>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f7fd fe83 	bl	8001f70 <HAL_InitTick>
 800426a:	4603      	mov	r3, r0
 800426c:	73fb      	strb	r3, [r7, #15]

  return status;
 800426e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40022000 	.word	0x40022000
 800427c:	40021000 	.word	0x40021000
 8004280:	04c4b400 	.word	0x04c4b400
 8004284:	08008348 	.word	0x08008348
 8004288:	20000000 	.word	0x20000000
 800428c:	20000004 	.word	0x20000004

08004290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004290:	b480      	push	{r7}
 8004292:	b089      	sub	sp, #36	; 0x24
 8004294:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	2300      	movs	r3, #0
 800429c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800429e:	4b3e      	ldr	r3, [pc, #248]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042a8:	4b3b      	ldr	r3, [pc, #236]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x34>
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b0c      	cmp	r3, #12
 80042bc:	d121      	bne.n	8004302 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d11e      	bne.n	8004302 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042c4:	4b34      	ldr	r3, [pc, #208]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d107      	bne.n	80042e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042d0:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d6:	0a1b      	lsrs	r3, r3, #8
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	e005      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042e0:	4b2d      	ldr	r3, [pc, #180]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042ec:	4a2b      	ldr	r2, [pc, #172]	; (800439c <HAL_RCC_GetSysClockFreq+0x10c>)
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10d      	bne.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004300:	e00a      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b04      	cmp	r3, #4
 8004306:	d102      	bne.n	800430e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004308:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	e004      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b08      	cmp	r3, #8
 8004312:	d101      	bne.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004314:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004316:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b0c      	cmp	r3, #12
 800431c:	d134      	bne.n	8004388 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800431e:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d003      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0xa6>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b03      	cmp	r3, #3
 8004332:	d003      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0xac>
 8004334:	e005      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004336:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004338:	617b      	str	r3, [r7, #20]
      break;
 800433a:	e005      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800433c:	4b19      	ldr	r3, [pc, #100]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800433e:	617b      	str	r3, [r7, #20]
      break;
 8004340:	e002      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	617b      	str	r3, [r7, #20]
      break;
 8004346:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004348:	4b13      	ldr	r3, [pc, #76]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	3301      	adds	r3, #1
 8004354:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	fb03 f202 	mul.w	r2, r3, r2
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	fbb2 f3f3 	udiv	r3, r2, r3
 800436c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800436e:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	0e5b      	lsrs	r3, r3, #25
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	3301      	adds	r3, #1
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004388:	69bb      	ldr	r3, [r7, #24]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3724      	adds	r7, #36	; 0x24
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000
 800439c:	08008360 	.word	0x08008360
 80043a0:	00f42400 	.word	0x00f42400
 80043a4:	007a1200 	.word	0x007a1200

080043a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043ac:	4b03      	ldr	r3, [pc, #12]	; (80043bc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ae:	681b      	ldr	r3, [r3, #0]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	20000000 	.word	0x20000000

080043c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043c4:	f7ff fff0 	bl	80043a8 <HAL_RCC_GetHCLKFreq>
 80043c8:	4602      	mov	r2, r0
 80043ca:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	0a1b      	lsrs	r3, r3, #8
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	4904      	ldr	r1, [pc, #16]	; (80043e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043d6:	5ccb      	ldrb	r3, [r1, r3]
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40021000 	.word	0x40021000
 80043e8:	08008358 	.word	0x08008358

080043ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043f0:	f7ff ffda 	bl	80043a8 <HAL_RCC_GetHCLKFreq>
 80043f4:	4602      	mov	r2, r0
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	0adb      	lsrs	r3, r3, #11
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	4904      	ldr	r1, [pc, #16]	; (8004414 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004402:	5ccb      	ldrb	r3, [r1, r3]
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800440c:	4618      	mov	r0, r3
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40021000 	.word	0x40021000
 8004414:	08008358 	.word	0x08008358

08004418 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004420:	2300      	movs	r3, #0
 8004422:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004424:	4b27      	ldr	r3, [pc, #156]	; (80044c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004430:	f7ff f906 	bl	8003640 <HAL_PWREx_GetVoltageRange>
 8004434:	6178      	str	r0, [r7, #20]
 8004436:	e014      	b.n	8004462 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004438:	4b22      	ldr	r3, [pc, #136]	; (80044c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	4a21      	ldr	r2, [pc, #132]	; (80044c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004442:	6593      	str	r3, [r2, #88]	; 0x58
 8004444:	4b1f      	ldr	r3, [pc, #124]	; (80044c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004450:	f7ff f8f6 	bl	8003640 <HAL_PWREx_GetVoltageRange>
 8004454:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004456:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445a:	4a1a      	ldr	r2, [pc, #104]	; (80044c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800445c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004460:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004468:	d10b      	bne.n	8004482 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b80      	cmp	r3, #128	; 0x80
 800446e:	d913      	bls.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2ba0      	cmp	r3, #160	; 0xa0
 8004474:	d902      	bls.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004476:	2302      	movs	r3, #2
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	e00d      	b.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800447c:	2301      	movs	r3, #1
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	e00a      	b.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b7f      	cmp	r3, #127	; 0x7f
 8004486:	d902      	bls.n	800448e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004488:	2302      	movs	r3, #2
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	e004      	b.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b70      	cmp	r3, #112	; 0x70
 8004492:	d101      	bne.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004494:	2301      	movs	r3, #1
 8004496:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f023 020f 	bic.w	r2, r3, #15
 80044a0:	4909      	ldr	r1, [pc, #36]	; (80044c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044a8:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d001      	beq.n	80044ba <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40022000 	.word	0x40022000

080044cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044d2:	4b2d      	ldr	r3, [pc, #180]	; (8004588 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d00b      	beq.n	80044fa <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d825      	bhi.n	8004534 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d008      	beq.n	8004500 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d11f      	bne.n	8004534 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80044f4:	4b25      	ldr	r3, [pc, #148]	; (800458c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044f6:	613b      	str	r3, [r7, #16]
    break;
 80044f8:	e01f      	b.n	800453a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80044fa:	4b25      	ldr	r3, [pc, #148]	; (8004590 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80044fc:	613b      	str	r3, [r7, #16]
    break;
 80044fe:	e01c      	b.n	800453a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004500:	4b21      	ldr	r3, [pc, #132]	; (8004588 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b00      	cmp	r3, #0
 800450a:	d107      	bne.n	800451c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800450c:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800450e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	f003 030f 	and.w	r3, r3, #15
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	e005      	b.n	8004528 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800451c:	4b1a      	ldr	r3, [pc, #104]	; (8004588 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004528:	4a1a      	ldr	r2, [pc, #104]	; (8004594 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004530:	613b      	str	r3, [r7, #16]
    break;
 8004532:	e002      	b.n	800453a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	613b      	str	r3, [r7, #16]
    break;
 8004538:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800453a:	4b13      	ldr	r3, [pc, #76]	; (8004588 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	091b      	lsrs	r3, r3, #4
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	3301      	adds	r3, #1
 8004546:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004548:	4b0f      	ldr	r3, [pc, #60]	; (8004588 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	0a1b      	lsrs	r3, r3, #8
 800454e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	fb03 f202 	mul.w	r2, r3, r2
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	0e5b      	lsrs	r3, r3, #25
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	3301      	adds	r3, #1
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	fbb2 f3f3 	udiv	r3, r2, r3
 8004578:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800457a:	683b      	ldr	r3, [r7, #0]
}
 800457c:	4618      	mov	r0, r3
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	40021000 	.word	0x40021000
 800458c:	00f42400 	.word	0x00f42400
 8004590:	007a1200 	.word	0x007a1200
 8004594:	08008360 	.word	0x08008360

08004598 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045a0:	2300      	movs	r3, #0
 80045a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045a4:	2300      	movs	r3, #0
 80045a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d040      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b8:	2b80      	cmp	r3, #128	; 0x80
 80045ba:	d02a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045bc:	2b80      	cmp	r3, #128	; 0x80
 80045be:	d825      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045c0:	2b60      	cmp	r3, #96	; 0x60
 80045c2:	d026      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045c4:	2b60      	cmp	r3, #96	; 0x60
 80045c6:	d821      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d006      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x42>
 80045cc:	2b40      	cmp	r3, #64	; 0x40
 80045ce:	d81d      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d010      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x62>
 80045d8:	e018      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045da:	4b89      	ldr	r3, [pc, #548]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	4a88      	ldr	r2, [pc, #544]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045e6:	e015      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f001 fa24 	bl	8005a3c <RCCEx_PLLSAI1_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045f8:	e00c      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3320      	adds	r3, #32
 80045fe:	2100      	movs	r1, #0
 8004600:	4618      	mov	r0, r3
 8004602:	f001 fb0f 	bl	8005c24 <RCCEx_PLLSAI2_Config>
 8004606:	4603      	mov	r3, r0
 8004608:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800460a:	e003      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	74fb      	strb	r3, [r7, #19]
      break;
 8004610:	e000      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004614:	7cfb      	ldrb	r3, [r7, #19]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10b      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800461a:	4b79      	ldr	r3, [pc, #484]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800461c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004620:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004628:	4975      	ldr	r1, [pc, #468]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004630:	e001      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004632:	7cfb      	ldrb	r3, [r7, #19]
 8004634:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d047      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464a:	d030      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x116>
 800464c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004650:	d82a      	bhi.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004656:	d02a      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800465c:	d824      	bhi.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800465e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004662:	d008      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004668:	d81e      	bhi.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800466e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004672:	d010      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004674:	e018      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004676:	4b62      	ldr	r3, [pc, #392]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	4a61      	ldr	r2, [pc, #388]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800467c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004680:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004682:	e015      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3304      	adds	r3, #4
 8004688:	2100      	movs	r1, #0
 800468a:	4618      	mov	r0, r3
 800468c:	f001 f9d6 	bl	8005a3c <RCCEx_PLLSAI1_Config>
 8004690:	4603      	mov	r3, r0
 8004692:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004694:	e00c      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3320      	adds	r3, #32
 800469a:	2100      	movs	r1, #0
 800469c:	4618      	mov	r0, r3
 800469e:	f001 fac1 	bl	8005c24 <RCCEx_PLLSAI2_Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046a6:	e003      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	74fb      	strb	r3, [r7, #19]
      break;
 80046ac:	e000      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80046ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b0:	7cfb      	ldrb	r3, [r7, #19]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10b      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046b6:	4b52      	ldr	r3, [pc, #328]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	494e      	ldr	r1, [pc, #312]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80046cc:	e001      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ce:	7cfb      	ldrb	r3, [r7, #19]
 80046d0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 809f 	beq.w	800481e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046e0:	2300      	movs	r3, #0
 80046e2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046e4:	4b46      	ldr	r3, [pc, #280]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e000      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80046f4:	2300      	movs	r3, #0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00d      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046fa:	4b41      	ldr	r3, [pc, #260]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fe:	4a40      	ldr	r2, [pc, #256]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004704:	6593      	str	r3, [r2, #88]	; 0x58
 8004706:	4b3e      	ldr	r3, [pc, #248]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004712:	2301      	movs	r3, #1
 8004714:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004716:	4b3b      	ldr	r3, [pc, #236]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a3a      	ldr	r2, [pc, #232]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800471c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004720:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004722:	f7fd fc75 	bl	8002010 <HAL_GetTick>
 8004726:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004728:	e009      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472a:	f7fd fc71 	bl	8002010 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d902      	bls.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	74fb      	strb	r3, [r7, #19]
        break;
 800473c:	e005      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800473e:	4b31      	ldr	r3, [pc, #196]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0ef      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800474a:	7cfb      	ldrb	r3, [r7, #19]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d15b      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004750:	4b2b      	ldr	r3, [pc, #172]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d01f      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	429a      	cmp	r2, r3
 800476c:	d019      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800476e:	4b24      	ldr	r3, [pc, #144]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004778:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800477a:	4b21      	ldr	r3, [pc, #132]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004780:	4a1f      	ldr	r2, [pc, #124]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800478a:	4b1d      	ldr	r3, [pc, #116]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004790:	4a1b      	ldr	r2, [pc, #108]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800479a:	4a19      	ldr	r2, [pc, #100]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d016      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fd fc30 	bl	8002010 <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047b2:	e00b      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b4:	f7fd fc2c 	bl	8002010 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d902      	bls.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	74fb      	strb	r3, [r7, #19]
            break;
 80047ca:	e006      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047cc:	4b0c      	ldr	r3, [pc, #48]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0ec      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80047da:	7cfb      	ldrb	r3, [r7, #19]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10c      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047e0:	4b07      	ldr	r3, [pc, #28]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f0:	4903      	ldr	r1, [pc, #12]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047f8:	e008      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047fa:	7cfb      	ldrb	r3, [r7, #19]
 80047fc:	74bb      	strb	r3, [r7, #18]
 80047fe:	e005      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004800:	40021000 	.word	0x40021000
 8004804:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004808:	7cfb      	ldrb	r3, [r7, #19]
 800480a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800480c:	7c7b      	ldrb	r3, [r7, #17]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d105      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004812:	4ba0      	ldr	r3, [pc, #640]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004816:	4a9f      	ldr	r2, [pc, #636]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800481c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800482a:	4b9a      	ldr	r3, [pc, #616]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004830:	f023 0203 	bic.w	r2, r3, #3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004838:	4996      	ldr	r1, [pc, #600]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800484c:	4b91      	ldr	r3, [pc, #580]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004852:	f023 020c 	bic.w	r2, r3, #12
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	498e      	ldr	r1, [pc, #568]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800486e:	4b89      	ldr	r3, [pc, #548]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004874:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487c:	4985      	ldr	r1, [pc, #532]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004890:	4b80      	ldr	r3, [pc, #512]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004896:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489e:	497d      	ldr	r1, [pc, #500]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048b2:	4b78      	ldr	r3, [pc, #480]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c0:	4974      	ldr	r1, [pc, #464]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0320 	and.w	r3, r3, #32
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048d4:	4b6f      	ldr	r3, [pc, #444]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e2:	496c      	ldr	r1, [pc, #432]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048f6:	4b67      	ldr	r3, [pc, #412]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004904:	4963      	ldr	r1, [pc, #396]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004918:	4b5e      	ldr	r3, [pc, #376]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004926:	495b      	ldr	r1, [pc, #364]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800493a:	4b56      	ldr	r3, [pc, #344]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004940:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004948:	4952      	ldr	r1, [pc, #328]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800495c:	4b4d      	ldr	r3, [pc, #308]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004962:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496a:	494a      	ldr	r1, [pc, #296]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800497e:	4b45      	ldr	r3, [pc, #276]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004984:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498c:	4941      	ldr	r1, [pc, #260]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049a0:	4b3c      	ldr	r3, [pc, #240]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049a6:	f023 0203 	bic.w	r2, r3, #3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ae:	4939      	ldr	r1, [pc, #228]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d028      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049c2:	4b34      	ldr	r3, [pc, #208]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d0:	4930      	ldr	r1, [pc, #192]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049e0:	d106      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049e2:	4b2c      	ldr	r3, [pc, #176]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	4a2b      	ldr	r2, [pc, #172]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ec:	60d3      	str	r3, [r2, #12]
 80049ee:	e011      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049f8:	d10c      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3304      	adds	r3, #4
 80049fe:	2101      	movs	r1, #1
 8004a00:	4618      	mov	r0, r3
 8004a02:	f001 f81b 	bl	8005a3c <RCCEx_PLLSAI1_Config>
 8004a06:	4603      	mov	r3, r0
 8004a08:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a0a:	7cfb      	ldrb	r3, [r7, #19]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004a10:	7cfb      	ldrb	r3, [r7, #19]
 8004a12:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d04d      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a28:	d108      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004a2a:	4b1a      	ldr	r3, [pc, #104]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a30:	4a18      	ldr	r2, [pc, #96]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a36:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004a3a:	e012      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004a3c:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a42:	4a14      	ldr	r2, [pc, #80]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a48:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004a4c:	4b11      	ldr	r3, [pc, #68]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a5a:	490e      	ldr	r1, [pc, #56]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a6a:	d106      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a6c:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4a08      	ldr	r2, [pc, #32]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a76:	60d3      	str	r3, [r2, #12]
 8004a78:	e020      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a82:	d109      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a84:	4b03      	ldr	r3, [pc, #12]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4a02      	ldr	r2, [pc, #8]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8e:	60d3      	str	r3, [r2, #12]
 8004a90:	e014      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004a92:	bf00      	nop
 8004a94:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 ffc7 	bl	8005a3c <RCCEx_PLLSAI1_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ab2:	7cfb      	ldrb	r3, [r7, #19]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004ab8:	7cfb      	ldrb	r3, [r7, #19]
 8004aba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d028      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ac8:	4b4a      	ldr	r3, [pc, #296]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ace:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ad6:	4947      	ldr	r1, [pc, #284]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ae6:	d106      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae8:	4b42      	ldr	r3, [pc, #264]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4a41      	ldr	r2, [pc, #260]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004af2:	60d3      	str	r3, [r2, #12]
 8004af4:	e011      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004afa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004afe:	d10c      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	2101      	movs	r1, #1
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 ff98 	bl	8005a3c <RCCEx_PLLSAI1_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b10:	7cfb      	ldrb	r3, [r7, #19]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004b16:	7cfb      	ldrb	r3, [r7, #19]
 8004b18:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d01e      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b26:	4b33      	ldr	r3, [pc, #204]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b36:	492f      	ldr	r1, [pc, #188]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b48:	d10c      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	2102      	movs	r1, #2
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 ff73 	bl	8005a3c <RCCEx_PLLSAI1_Config>
 8004b56:	4603      	mov	r3, r0
 8004b58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b5a:	7cfb      	ldrb	r3, [r7, #19]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004b60:	7cfb      	ldrb	r3, [r7, #19]
 8004b62:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00b      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b70:	4b20      	ldr	r3, [pc, #128]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b76:	f023 0204 	bic.w	r2, r3, #4
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b80:	491c      	ldr	r1, [pc, #112]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00b      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b94:	4b17      	ldr	r3, [pc, #92]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b9a:	f023 0218 	bic.w	r2, r3, #24
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba4:	4913      	ldr	r1, [pc, #76]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d017      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004bb8:	4b0e      	ldr	r3, [pc, #56]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bc8:	490a      	ldr	r1, [pc, #40]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bda:	d105      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4a04      	ldr	r2, [pc, #16]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004be8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40021000 	.word	0x40021000

08004bf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c0a:	d13e      	bne.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004c0c:	4bb6      	ldr	r3, [pc, #728]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c16:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c1e:	d028      	beq.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c26:	f200 86f4 	bhi.w	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c30:	d005      	beq.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c38:	d00e      	beq.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004c3a:	f000 beea 	b.w	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c3e:	4baa      	ldr	r3, [pc, #680]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	f040 86e4 	bne.w	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8004c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c52:	61fb      	str	r3, [r7, #28]
      break;
 8004c54:	f000 bedf 	b.w	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004c58:	4ba3      	ldr	r3, [pc, #652]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	f040 86d9 	bne.w	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8004c68:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004c6c:	61fb      	str	r3, [r7, #28]
      break;
 8004c6e:	f000 bed4 	b.w	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c72:	4b9d      	ldr	r3, [pc, #628]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c7e:	f040 86ce 	bne.w	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8004c82:	4b9a      	ldr	r3, [pc, #616]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004c84:	61fb      	str	r3, [r7, #28]
      break;
 8004c86:	f000 beca 	b.w	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c8a:	4b97      	ldr	r3, [pc, #604]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d036      	beq.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d840      	bhi.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d003      	beq.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d020      	beq.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004cac:	e039      	b.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004cae:	4b8e      	ldr	r3, [pc, #568]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d116      	bne.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004cba:	4b8b      	ldr	r3, [pc, #556]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004cc6:	4b88      	ldr	r3, [pc, #544]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	091b      	lsrs	r3, r3, #4
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	e005      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004cd2:	4b85      	ldr	r3, [pc, #532]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cd8:	0a1b      	lsrs	r3, r3, #8
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	4a84      	ldr	r2, [pc, #528]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004ce6:	e01f      	b.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61bb      	str	r3, [r7, #24]
      break;
 8004cec:	e01c      	b.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cee:	4b7e      	ldr	r3, [pc, #504]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cfa:	d102      	bne.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004cfc:	4b7d      	ldr	r3, [pc, #500]	; (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004cfe:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004d00:	e012      	b.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61bb      	str	r3, [r7, #24]
      break;
 8004d06:	e00f      	b.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d08:	4b77      	ldr	r3, [pc, #476]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d14:	d102      	bne.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004d16:	4b78      	ldr	r3, [pc, #480]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004d18:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004d1a:	e005      	b.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61bb      	str	r3, [r7, #24]
      break;
 8004d20:	e002      	b.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
      break;
 8004d26:	bf00      	nop
    }

    switch(PeriphClk)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d2e:	f000 8606 	beq.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d38:	f200 8673 	bhi.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d42:	f000 8469 	beq.w	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d4c:	f200 8669 	bhi.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d56:	f000 8531 	beq.w	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d60:	f200 865f 	bhi.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d6a:	f000 8187 	beq.w	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d74:	f200 8655 	bhi.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d7e:	f000 80cd 	beq.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d88:	f200 864b 	bhi.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d92:	f000 8430 	beq.w	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9c:	f200 8641 	bhi.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004da6:	f000 83e4 	beq.w	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004db0:	f200 8637 	bhi.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dba:	f000 80af 	beq.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc4:	f200 862d 	bhi.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dce:	f000 809d 	beq.w	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd8:	f200 8623 	bhi.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de2:	f000 808b 	beq.w	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dec:	f200 8619 	bhi.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df6:	f000 8554 	beq.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e00:	f200 860f 	bhi.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e0a:	f000 8500 	beq.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e14:	f200 8605 	bhi.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e1e:	f000 84a1 	beq.w	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e28:	f200 85fb 	bhi.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b80      	cmp	r3, #128	; 0x80
 8004e30:	f000 846c 	beq.w	800570c <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b80      	cmp	r3, #128	; 0x80
 8004e38:	f200 85f3 	bhi.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b20      	cmp	r3, #32
 8004e40:	d84c      	bhi.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 85ec 	beq.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	2b1f      	cmp	r3, #31
 8004e50:	f200 85e7 	bhi.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e54:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5a:	bf00      	nop
 8004e5c:	08005271 	.word	0x08005271
 8004e60:	080052df 	.word	0x080052df
 8004e64:	08005a23 	.word	0x08005a23
 8004e68:	08005373 	.word	0x08005373
 8004e6c:	08005a23 	.word	0x08005a23
 8004e70:	08005a23 	.word	0x08005a23
 8004e74:	08005a23 	.word	0x08005a23
 8004e78:	080053eb 	.word	0x080053eb
 8004e7c:	08005a23 	.word	0x08005a23
 8004e80:	08005a23 	.word	0x08005a23
 8004e84:	08005a23 	.word	0x08005a23
 8004e88:	08005a23 	.word	0x08005a23
 8004e8c:	08005a23 	.word	0x08005a23
 8004e90:	08005a23 	.word	0x08005a23
 8004e94:	08005a23 	.word	0x08005a23
 8004e98:	0800546f 	.word	0x0800546f
 8004e9c:	08005a23 	.word	0x08005a23
 8004ea0:	08005a23 	.word	0x08005a23
 8004ea4:	08005a23 	.word	0x08005a23
 8004ea8:	08005a23 	.word	0x08005a23
 8004eac:	08005a23 	.word	0x08005a23
 8004eb0:	08005a23 	.word	0x08005a23
 8004eb4:	08005a23 	.word	0x08005a23
 8004eb8:	08005a23 	.word	0x08005a23
 8004ebc:	08005a23 	.word	0x08005a23
 8004ec0:	08005a23 	.word	0x08005a23
 8004ec4:	08005a23 	.word	0x08005a23
 8004ec8:	08005a23 	.word	0x08005a23
 8004ecc:	08005a23 	.word	0x08005a23
 8004ed0:	08005a23 	.word	0x08005a23
 8004ed4:	08005a23 	.word	0x08005a23
 8004ed8:	080054f1 	.word	0x080054f1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b40      	cmp	r3, #64	; 0x40
 8004ee0:	f000 83e8 	beq.w	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004ee4:	f000 bd9d 	b.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	0003d090 	.word	0x0003d090
 8004ef0:	08008360 	.word	0x08008360
 8004ef4:	00f42400 	.word	0x00f42400
 8004ef8:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004efc:	69b9      	ldr	r1, [r7, #24]
 8004efe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004f02:	f000 ff83 	bl	8005e0c <RCCEx_GetSAIxPeriphCLKFreq>
 8004f06:	61f8      	str	r0, [r7, #28]
      break;
 8004f08:	f000 bd8e 	b.w	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004f0c:	69b9      	ldr	r1, [r7, #24]
 8004f0e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004f12:	f000 ff7b 	bl	8005e0c <RCCEx_GetSAIxPeriphCLKFreq>
 8004f16:	61f8      	str	r0, [r7, #28]
      break;
 8004f18:	f000 bd86 	b.w	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004f1c:	4b9a      	ldr	r3, [pc, #616]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004f2e:	d015      	beq.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004f36:	f200 8092 	bhi.w	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f40:	d029      	beq.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f48:	f200 8089 	bhi.w	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d07b      	beq.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f58:	d04a      	beq.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8004f5a:	e080      	b.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004f5c:	4b8a      	ldr	r3, [pc, #552]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d17d      	bne.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004f68:	4b87      	ldr	r3, [pc, #540]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8004f74:	4b84      	ldr	r3, [pc, #528]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	091b      	lsrs	r3, r3, #4
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	e005      	b.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8004f80:	4b81      	ldr	r3, [pc, #516]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f86:	0a1b      	lsrs	r3, r3, #8
 8004f88:	f003 030f 	and.w	r3, r3, #15
 8004f8c:	4a7f      	ldr	r2, [pc, #508]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f92:	61fb      	str	r3, [r7, #28]
          break;
 8004f94:	e066      	b.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004f96:	4b7c      	ldr	r3, [pc, #496]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fa2:	d162      	bne.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004fa4:	4b78      	ldr	r3, [pc, #480]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fb0:	d15b      	bne.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004fb2:	4b75      	ldr	r3, [pc, #468]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	0a1b      	lsrs	r3, r3, #8
 8004fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fbc:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	fb03 f202 	mul.w	r2, r3, r2
 8004fc6:	4b70      	ldr	r3, [pc, #448]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	091b      	lsrs	r3, r3, #4
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004fd8:	4b6b      	ldr	r3, [pc, #428]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	0d5b      	lsrs	r3, r3, #21
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fec:	61fb      	str	r3, [r7, #28]
          break;
 8004fee:	e03c      	b.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004ff0:	4b65      	ldr	r3, [pc, #404]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ffc:	d138      	bne.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004ffe:	4b62      	ldr	r3, [pc, #392]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800500a:	d131      	bne.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800500c:	4b5e      	ldr	r3, [pc, #376]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	0a1b      	lsrs	r3, r3, #8
 8005012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005016:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	fb03 f202 	mul.w	r2, r3, r2
 8005020:	4b59      	ldr	r3, [pc, #356]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	091b      	lsrs	r3, r3, #4
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	3301      	adds	r3, #1
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005032:	4b55      	ldr	r3, [pc, #340]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	0d5b      	lsrs	r3, r3, #21
 8005038:	f003 0303 	and.w	r3, r3, #3
 800503c:	3301      	adds	r3, #1
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	fbb2 f3f3 	udiv	r3, r2, r3
 8005046:	61fb      	str	r3, [r7, #28]
          break;
 8005048:	e012      	b.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800504a:	4b4f      	ldr	r3, [pc, #316]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800504c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b02      	cmp	r3, #2
 8005056:	d10e      	bne.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8005058:	4b4d      	ldr	r3, [pc, #308]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800505a:	61fb      	str	r3, [r7, #28]
          break;
 800505c:	e00b      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800505e:	bf00      	nop
 8005060:	f000 bce2 	b.w	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005064:	bf00      	nop
 8005066:	f000 bcdf 	b.w	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800506a:	bf00      	nop
 800506c:	f000 bcdc 	b.w	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005070:	bf00      	nop
 8005072:	f000 bcd9 	b.w	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005076:	bf00      	nop
        break;
 8005078:	f000 bcd6 	b.w	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800507c:	4b42      	ldr	r3, [pc, #264]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800507e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005086:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800508a:	d13d      	bne.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800508c:	4b3e      	ldr	r3, [pc, #248]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005094:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005098:	f040 84c5 	bne.w	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800509c:	4b3a      	ldr	r3, [pc, #232]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a8:	f040 84bd 	bne.w	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80050ac:	4b36      	ldr	r3, [pc, #216]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	0a1b      	lsrs	r3, r3, #8
 80050b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050b6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	fb03 f202 	mul.w	r2, r3, r2
 80050c0:	4b31      	ldr	r3, [pc, #196]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	3301      	adds	r3, #1
 80050cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d0:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80050d2:	4b2d      	ldr	r3, [pc, #180]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	0edb      	lsrs	r3, r3, #27
 80050d8:	f003 031f 	and.w	r3, r3, #31
 80050dc:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10a      	bne.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80050e4:	4b28      	ldr	r3, [pc, #160]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 80050f0:	2311      	movs	r3, #17
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	e001      	b.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 80050f6:	2307      	movs	r3, #7
 80050f8:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005102:	61fb      	str	r3, [r7, #28]
      break;
 8005104:	f000 bc8f 	b.w	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005108:	4b1f      	ldr	r3, [pc, #124]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800511a:	d016      	beq.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005122:	f200 809b 	bhi.w	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800512c:	d032      	beq.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005134:	f200 8092 	bhi.w	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 8084 	beq.w	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005146:	d052      	beq.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8005148:	e088      	b.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800514a:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b02      	cmp	r3, #2
 8005154:	f040 8084 	bne.w	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b00      	cmp	r3, #0
 8005162:	d005      	beq.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005164:	4b08      	ldr	r3, [pc, #32]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	e005      	b.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8005170:	4b05      	ldr	r3, [pc, #20]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005176:	0a1b      	lsrs	r3, r3, #8
 8005178:	f003 030f 	and.w	r3, r3, #15
 800517c:	4a03      	ldr	r2, [pc, #12]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800517e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005182:	61fb      	str	r3, [r7, #28]
          break;
 8005184:	e06c      	b.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8005186:	bf00      	nop
 8005188:	40021000 	.word	0x40021000
 800518c:	08008360 	.word	0x08008360
 8005190:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005194:	4ba5      	ldr	r3, [pc, #660]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051a0:	d160      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80051a2:	4ba2      	ldr	r3, [pc, #648]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ae:	d159      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80051b0:	4b9e      	ldr	r3, [pc, #632]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	0a1b      	lsrs	r3, r3, #8
 80051b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ba:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	fb03 f202 	mul.w	r2, r3, r2
 80051c4:	4b99      	ldr	r3, [pc, #612]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	091b      	lsrs	r3, r3, #4
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	3301      	adds	r3, #1
 80051d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80051d6:	4b95      	ldr	r3, [pc, #596]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	0d5b      	lsrs	r3, r3, #21
 80051dc:	f003 0303 	and.w	r3, r3, #3
 80051e0:	3301      	adds	r3, #1
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ea:	61fb      	str	r3, [r7, #28]
          break;
 80051ec:	e03a      	b.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80051ee:	4b8f      	ldr	r3, [pc, #572]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051fa:	d135      	bne.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80051fc:	4b8b      	ldr	r3, [pc, #556]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005208:	d12e      	bne.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800520a:	4b88      	ldr	r3, [pc, #544]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	0a1b      	lsrs	r3, r3, #8
 8005210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005214:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	fb03 f202 	mul.w	r2, r3, r2
 800521e:	4b83      	ldr	r3, [pc, #524]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	091b      	lsrs	r3, r3, #4
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	3301      	adds	r3, #1
 800522a:	fbb2 f3f3 	udiv	r3, r2, r3
 800522e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005230:	4b7e      	ldr	r3, [pc, #504]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	0d5b      	lsrs	r3, r3, #21
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	3301      	adds	r3, #1
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	61fb      	str	r3, [r7, #28]
          break;
 8005246:	e00f      	b.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005248:	4b78      	ldr	r3, [pc, #480]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800524a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b02      	cmp	r3, #2
 8005254:	d10a      	bne.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8005256:	4b76      	ldr	r3, [pc, #472]	; (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005258:	61fb      	str	r3, [r7, #28]
          break;
 800525a:	e007      	b.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800525c:	bf00      	nop
 800525e:	e3e2      	b.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005260:	bf00      	nop
 8005262:	e3e0      	b.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005264:	bf00      	nop
 8005266:	e3de      	b.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005268:	bf00      	nop
 800526a:	e3dc      	b.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800526c:	bf00      	nop
      break;
 800526e:	e3da      	b.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005270:	4b6e      	ldr	r3, [pc, #440]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b03      	cmp	r3, #3
 8005280:	d827      	bhi.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005282:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8005284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005288:	08005299 	.word	0x08005299
 800528c:	080052a1 	.word	0x080052a1
 8005290:	080052a9 	.word	0x080052a9
 8005294:	080052bd 	.word	0x080052bd
          frequency = HAL_RCC_GetPCLK2Freq();
 8005298:	f7ff f8a8 	bl	80043ec <HAL_RCC_GetPCLK2Freq>
 800529c:	61f8      	str	r0, [r7, #28]
          break;
 800529e:	e01d      	b.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80052a0:	f7fe fff6 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 80052a4:	61f8      	str	r0, [r7, #28]
          break;
 80052a6:	e019      	b.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052a8:	4b60      	ldr	r3, [pc, #384]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b4:	d10f      	bne.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 80052b6:	4b5f      	ldr	r3, [pc, #380]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80052b8:	61fb      	str	r3, [r7, #28]
          break;
 80052ba:	e00c      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80052bc:	4b5b      	ldr	r3, [pc, #364]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d107      	bne.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 80052ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ce:	61fb      	str	r3, [r7, #28]
          break;
 80052d0:	e003      	b.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80052d2:	bf00      	nop
 80052d4:	e3a8      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80052d6:	bf00      	nop
 80052d8:	e3a6      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80052da:	bf00      	nop
        break;
 80052dc:	e3a4      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80052de:	4b53      	ldr	r3, [pc, #332]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e4:	f003 030c 	and.w	r3, r3, #12
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b0c      	cmp	r3, #12
 80052ee:	d83a      	bhi.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80052f0:	a201      	add	r2, pc, #4	; (adr r2, 80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 80052f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f6:	bf00      	nop
 80052f8:	0800532d 	.word	0x0800532d
 80052fc:	08005367 	.word	0x08005367
 8005300:	08005367 	.word	0x08005367
 8005304:	08005367 	.word	0x08005367
 8005308:	08005335 	.word	0x08005335
 800530c:	08005367 	.word	0x08005367
 8005310:	08005367 	.word	0x08005367
 8005314:	08005367 	.word	0x08005367
 8005318:	0800533d 	.word	0x0800533d
 800531c:	08005367 	.word	0x08005367
 8005320:	08005367 	.word	0x08005367
 8005324:	08005367 	.word	0x08005367
 8005328:	08005351 	.word	0x08005351
          frequency = HAL_RCC_GetPCLK1Freq();
 800532c:	f7ff f848 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 8005330:	61f8      	str	r0, [r7, #28]
          break;
 8005332:	e01d      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8005334:	f7fe ffac 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8005338:	61f8      	str	r0, [r7, #28]
          break;
 800533a:	e019      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800533c:	4b3b      	ldr	r3, [pc, #236]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005348:	d10f      	bne.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800534a:	4b3a      	ldr	r3, [pc, #232]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800534c:	61fb      	str	r3, [r7, #28]
          break;
 800534e:	e00c      	b.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005350:	4b36      	ldr	r3, [pc, #216]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b02      	cmp	r3, #2
 800535c:	d107      	bne.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800535e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005362:	61fb      	str	r3, [r7, #28]
          break;
 8005364:	e003      	b.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8005366:	bf00      	nop
 8005368:	e35e      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800536a:	bf00      	nop
 800536c:	e35c      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800536e:	bf00      	nop
        break;
 8005370:	e35a      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005372:	4b2e      	ldr	r3, [pc, #184]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005378:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b30      	cmp	r3, #48	; 0x30
 8005382:	d021      	beq.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b30      	cmp	r3, #48	; 0x30
 8005388:	d829      	bhi.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2b20      	cmp	r3, #32
 800538e:	d011      	beq.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b20      	cmp	r3, #32
 8005394:	d823      	bhi.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b10      	cmp	r3, #16
 80053a0:	d004      	beq.n	80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 80053a2:	e01c      	b.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80053a4:	f7ff f80c 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 80053a8:	61f8      	str	r0, [r7, #28]
          break;
 80053aa:	e01d      	b.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80053ac:	f7fe ff70 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 80053b0:	61f8      	str	r0, [r7, #28]
          break;
 80053b2:	e019      	b.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053b4:	4b1d      	ldr	r3, [pc, #116]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c0:	d10f      	bne.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 80053c2:	4b1c      	ldr	r3, [pc, #112]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80053c4:	61fb      	str	r3, [r7, #28]
          break;
 80053c6:	e00c      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80053c8:	4b18      	ldr	r3, [pc, #96]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d107      	bne.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 80053d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053da:	61fb      	str	r3, [r7, #28]
          break;
 80053dc:	e003      	b.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80053de:	bf00      	nop
 80053e0:	e322      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80053e2:	bf00      	nop
 80053e4:	e320      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80053e6:	bf00      	nop
        break;
 80053e8:	e31e      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80053ea:	4b10      	ldr	r3, [pc, #64]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80053ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2bc0      	cmp	r3, #192	; 0xc0
 80053fa:	d027      	beq.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2bc0      	cmp	r3, #192	; 0xc0
 8005400:	d82f      	bhi.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b80      	cmp	r3, #128	; 0x80
 8005406:	d017      	beq.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b80      	cmp	r3, #128	; 0x80
 800540c:	d829      	bhi.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b40      	cmp	r3, #64	; 0x40
 8005418:	d004      	beq.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800541a:	e022      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800541c:	f7fe ffd0 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 8005420:	61f8      	str	r0, [r7, #28]
          break;
 8005422:	e023      	b.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8005424:	f7fe ff34 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8005428:	61f8      	str	r0, [r7, #28]
          break;
 800542a:	e01f      	b.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800542c:	40021000 	.word	0x40021000
 8005430:	02dc6c00 	.word	0x02dc6c00
 8005434:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005438:	4b9b      	ldr	r3, [pc, #620]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005444:	d10f      	bne.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8005446:	4b99      	ldr	r3, [pc, #612]	; (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005448:	61fb      	str	r3, [r7, #28]
          break;
 800544a:	e00c      	b.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800544c:	4b96      	ldr	r3, [pc, #600]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b02      	cmp	r3, #2
 8005458:	d107      	bne.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800545a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800545e:	61fb      	str	r3, [r7, #28]
          break;
 8005460:	e003      	b.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8005462:	bf00      	nop
 8005464:	e2e0      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005466:	bf00      	nop
 8005468:	e2de      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800546a:	bf00      	nop
        break;
 800546c:	e2dc      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800546e:	4b8e      	ldr	r3, [pc, #568]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005480:	d025      	beq.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005488:	d82c      	bhi.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005490:	d013      	beq.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005498:	d824      	bhi.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d004      	beq.n	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a6:	d004      	beq.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 80054a8:	e01c      	b.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80054aa:	f7fe ff89 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 80054ae:	61f8      	str	r0, [r7, #28]
          break;
 80054b0:	e01d      	b.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80054b2:	f7fe feed 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 80054b6:	61f8      	str	r0, [r7, #28]
          break;
 80054b8:	e019      	b.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054ba:	4b7b      	ldr	r3, [pc, #492]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c6:	d10f      	bne.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 80054c8:	4b78      	ldr	r3, [pc, #480]	; (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80054ca:	61fb      	str	r3, [r7, #28]
          break;
 80054cc:	e00c      	b.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80054ce:	4b76      	ldr	r3, [pc, #472]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80054d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d107      	bne.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 80054dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e0:	61fb      	str	r3, [r7, #28]
          break;
 80054e2:	e003      	b.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 80054e4:	bf00      	nop
 80054e6:	e29f      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054e8:	bf00      	nop
 80054ea:	e29d      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054ec:	bf00      	nop
        break;
 80054ee:	e29b      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80054f0:	4b6d      	ldr	r3, [pc, #436]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005502:	d025      	beq.n	8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800550a:	d82c      	bhi.n	8005566 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005512:	d013      	beq.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800551a:	d824      	bhi.n	8005566 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d004      	beq.n	800552c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005528:	d004      	beq.n	8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800552a:	e01c      	b.n	8005566 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800552c:	f7fe ff48 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 8005530:	61f8      	str	r0, [r7, #28]
          break;
 8005532:	e01d      	b.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8005534:	f7fe feac 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8005538:	61f8      	str	r0, [r7, #28]
          break;
 800553a:	e019      	b.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800553c:	4b5a      	ldr	r3, [pc, #360]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005548:	d10f      	bne.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800554a:	4b58      	ldr	r3, [pc, #352]	; (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800554c:	61fb      	str	r3, [r7, #28]
          break;
 800554e:	e00c      	b.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005550:	4b55      	ldr	r3, [pc, #340]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b02      	cmp	r3, #2
 800555c:	d107      	bne.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800555e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005562:	61fb      	str	r3, [r7, #28]
          break;
 8005564:	e003      	b.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8005566:	bf00      	nop
 8005568:	e25e      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800556a:	bf00      	nop
 800556c:	e25c      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800556e:	bf00      	nop
        break;
 8005570:	e25a      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005572:	4b4d      	ldr	r3, [pc, #308]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005578:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005584:	d007      	beq.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800558c:	d12f      	bne.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800558e:	f7fe fe7f 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8005592:	61f8      	str	r0, [r7, #28]
          break;
 8005594:	e02e      	b.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005596:	4b44      	ldr	r3, [pc, #272]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800559e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055a2:	d126      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80055a4:	4b40      	ldr	r3, [pc, #256]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d020      	beq.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80055b0:	4b3d      	ldr	r3, [pc, #244]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	0a1b      	lsrs	r3, r3, #8
 80055b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ba:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	fb03 f202 	mul.w	r2, r3, r2
 80055c4:	4b38      	ldr	r3, [pc, #224]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	091b      	lsrs	r3, r3, #4
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	3301      	adds	r3, #1
 80055d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80055d6:	4b34      	ldr	r3, [pc, #208]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	0e5b      	lsrs	r3, r3, #25
 80055dc:	f003 0303 	and.w	r3, r3, #3
 80055e0:	3301      	adds	r3, #1
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ea:	61fb      	str	r3, [r7, #28]
          break;
 80055ec:	e001      	b.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 80055ee:	bf00      	nop
 80055f0:	e21a      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80055f2:	bf00      	nop
        break;
 80055f4:	e218      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80055f6:	4b2c      	ldr	r3, [pc, #176]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80055f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d103      	bne.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005608:	f7fe fef0 	bl	80043ec <HAL_RCC_GetPCLK2Freq>
 800560c:	61f8      	str	r0, [r7, #28]
        break;
 800560e:	e20b      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8005610:	f7fe fe3e 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8005614:	61f8      	str	r0, [r7, #28]
        break;
 8005616:	e207      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005618:	4b23      	ldr	r3, [pc, #140]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800561a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800561e:	f003 0318 	and.w	r3, r3, #24
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b10      	cmp	r3, #16
 8005628:	d010      	beq.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b10      	cmp	r3, #16
 800562e:	d834      	bhi.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b08      	cmp	r3, #8
 800563a:	d024      	beq.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800563c:	e02d      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800563e:	69b9      	ldr	r1, [r7, #24]
 8005640:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005644:	f000 fbe2 	bl	8005e0c <RCCEx_GetSAIxPeriphCLKFreq>
 8005648:	61f8      	str	r0, [r7, #28]
          break;
 800564a:	e02b      	b.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800564c:	4b16      	ldr	r3, [pc, #88]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b02      	cmp	r3, #2
 8005656:	d122      	bne.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005658:	4b13      	ldr	r3, [pc, #76]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0308 	and.w	r3, r3, #8
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005664:	4b10      	ldr	r3, [pc, #64]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	091b      	lsrs	r3, r3, #4
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	e005      	b.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8005670:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005676:	0a1b      	lsrs	r3, r3, #8
 8005678:	f003 030f 	and.w	r3, r3, #15
 800567c:	4a0c      	ldr	r2, [pc, #48]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800567e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005682:	61fb      	str	r3, [r7, #28]
          break;
 8005684:	e00b      	b.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005686:	4b08      	ldr	r3, [pc, #32]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800568e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005692:	d106      	bne.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8005694:	4b05      	ldr	r3, [pc, #20]	; (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005696:	61fb      	str	r3, [r7, #28]
          break;
 8005698:	e003      	b.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800569a:	bf00      	nop
 800569c:	e1c4      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800569e:	bf00      	nop
 80056a0:	e1c2      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80056a2:	bf00      	nop
        break;
 80056a4:	e1c0      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80056a6:	bf00      	nop
 80056a8:	40021000 	.word	0x40021000
 80056ac:	00f42400 	.word	0x00f42400
 80056b0:	08008360 	.word	0x08008360
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80056b4:	4b96      	ldr	r3, [pc, #600]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c6:	d013      	beq.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ce:	d819      	bhi.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d004      	beq.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056dc:	d004      	beq.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 80056de:	e011      	b.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80056e0:	f7fe fe6e 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 80056e4:	61f8      	str	r0, [r7, #28]
          break;
 80056e6:	e010      	b.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 80056e8:	f7fe fdd2 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 80056ec:	61f8      	str	r0, [r7, #28]
          break;
 80056ee:	e00c      	b.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056f0:	4b87      	ldr	r3, [pc, #540]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056fc:	d104      	bne.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 80056fe:	4b85      	ldr	r3, [pc, #532]	; (8005914 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005700:	61fb      	str	r3, [r7, #28]
          break;
 8005702:	e001      	b.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8005704:	bf00      	nop
 8005706:	e18f      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005708:	bf00      	nop
        break;
 800570a:	e18d      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800570c:	4b80      	ldr	r3, [pc, #512]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800570e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005712:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800571e:	d013      	beq.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005726:	d819      	bhi.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d004      	beq.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005734:	d004      	beq.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8005736:	e011      	b.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005738:	f7fe fe42 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 800573c:	61f8      	str	r0, [r7, #28]
          break;
 800573e:	e010      	b.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005740:	f7fe fda6 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8005744:	61f8      	str	r0, [r7, #28]
          break;
 8005746:	e00c      	b.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005748:	4b71      	ldr	r3, [pc, #452]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005754:	d104      	bne.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8005756:	4b6f      	ldr	r3, [pc, #444]	; (8005914 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005758:	61fb      	str	r3, [r7, #28]
          break;
 800575a:	e001      	b.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800575c:	bf00      	nop
 800575e:	e163      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005760:	bf00      	nop
        break;
 8005762:	e161      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005764:	4b6a      	ldr	r3, [pc, #424]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005776:	d013      	beq.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800577e:	d819      	bhi.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d004      	beq.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578c:	d004      	beq.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800578e:	e011      	b.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005790:	f7fe fe16 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 8005794:	61f8      	str	r0, [r7, #28]
          break;
 8005796:	e010      	b.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005798:	f7fe fd7a 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 800579c:	61f8      	str	r0, [r7, #28]
          break;
 800579e:	e00c      	b.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057a0:	4b5b      	ldr	r3, [pc, #364]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ac:	d104      	bne.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 80057ae:	4b59      	ldr	r3, [pc, #356]	; (8005914 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80057b0:	61fb      	str	r3, [r7, #28]
          break;
 80057b2:	e001      	b.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 80057b4:	bf00      	nop
 80057b6:	e137      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80057b8:	bf00      	nop
        break;
 80057ba:	e135      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80057bc:	4b54      	ldr	r3, [pc, #336]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80057be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d011      	beq.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d818      	bhi.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d004      	beq.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 80057e0:	e011      	b.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80057e2:	f7fe fded 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 80057e6:	61f8      	str	r0, [r7, #28]
          break;
 80057e8:	e010      	b.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 80057ea:	f7fe fd51 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 80057ee:	61f8      	str	r0, [r7, #28]
          break;
 80057f0:	e00c      	b.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057f2:	4b47      	ldr	r3, [pc, #284]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057fe:	d104      	bne.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8005800:	4b44      	ldr	r3, [pc, #272]	; (8005914 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005802:	61fb      	str	r3, [r7, #28]
          break;
 8005804:	e001      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8005806:	bf00      	nop
 8005808:	e10e      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800580a:	bf00      	nop
        break;
 800580c:	e10c      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800580e:	4b40      	ldr	r3, [pc, #256]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005814:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005820:	d02c      	beq.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005828:	d833      	bhi.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005830:	d01a      	beq.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005838:	d82b      	bhi.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d004      	beq.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005846:	d004      	beq.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8005848:	e023      	b.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800584a:	f7fe fdb9 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 800584e:	61f8      	str	r0, [r7, #28]
          break;
 8005850:	e026      	b.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005852:	4b2f      	ldr	r3, [pc, #188]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b02      	cmp	r3, #2
 800585e:	d11a      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8005860:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005864:	61fb      	str	r3, [r7, #28]
          break;
 8005866:	e016      	b.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005868:	4b29      	ldr	r3, [pc, #164]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005874:	d111      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8005876:	4b27      	ldr	r3, [pc, #156]	; (8005914 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005878:	61fb      	str	r3, [r7, #28]
          break;
 800587a:	e00e      	b.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800587c:	4b24      	ldr	r3, [pc, #144]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b02      	cmp	r3, #2
 8005888:	d109      	bne.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800588a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800588e:	61fb      	str	r3, [r7, #28]
          break;
 8005890:	e005      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8005892:	bf00      	nop
 8005894:	e0c8      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005896:	bf00      	nop
 8005898:	e0c6      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800589a:	bf00      	nop
 800589c:	e0c4      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800589e:	bf00      	nop
        break;
 80058a0:	e0c2      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80058a2:	4b1b      	ldr	r3, [pc, #108]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80058a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058b4:	d030      	beq.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058bc:	d837      	bhi.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058c4:	d01a      	beq.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058cc:	d82f      	bhi.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d004      	beq.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058da:	d004      	beq.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 80058dc:	e027      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058de:	f7fe fd6f 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 80058e2:	61f8      	str	r0, [r7, #28]
          break;
 80058e4:	e02a      	b.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80058e6:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80058e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d11e      	bne.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 80058f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80058f8:	61fb      	str	r3, [r7, #28]
          break;
 80058fa:	e01a      	b.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058fc:	4b04      	ldr	r3, [pc, #16]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005908:	d115      	bne.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800590a:	4b02      	ldr	r3, [pc, #8]	; (8005914 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800590c:	61fb      	str	r3, [r7, #28]
          break;
 800590e:	e012      	b.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005910:	40021000 	.word	0x40021000
 8005914:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005918:	4b46      	ldr	r3, [pc, #280]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b02      	cmp	r3, #2
 8005924:	d109      	bne.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8005926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800592a:	61fb      	str	r3, [r7, #28]
          break;
 800592c:	e005      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800592e:	bf00      	nop
 8005930:	e07a      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005932:	bf00      	nop
 8005934:	e078      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005936:	bf00      	nop
 8005938:	e076      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800593a:	bf00      	nop
        break;
 800593c:	e074      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800593e:	4b3d      	ldr	r3, [pc, #244]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005940:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005944:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005950:	d02c      	beq.n	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005958:	d855      	bhi.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d004      	beq.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005966:	d004      	beq.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8005968:	e04d      	b.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800596a:	f7fe fc91 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 800596e:	61f8      	str	r0, [r7, #28]
          break;
 8005970:	e04e      	b.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005972:	4b30      	ldr	r3, [pc, #192]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b02      	cmp	r3, #2
 800597c:	d145      	bne.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800597e:	4b2d      	ldr	r3, [pc, #180]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b00      	cmp	r3, #0
 8005988:	d005      	beq.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800598a:	4b2a      	ldr	r3, [pc, #168]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	091b      	lsrs	r3, r3, #4
 8005990:	f003 030f 	and.w	r3, r3, #15
 8005994:	e005      	b.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8005996:	4b27      	ldr	r3, [pc, #156]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800599c:	0a1b      	lsrs	r3, r3, #8
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	4a25      	ldr	r2, [pc, #148]	; (8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80059a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a8:	61fb      	str	r3, [r7, #28]
          break;
 80059aa:	e02e      	b.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80059ac:	4b21      	ldr	r3, [pc, #132]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059b8:	d129      	bne.n	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80059ba:	4b1e      	ldr	r3, [pc, #120]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059c6:	d122      	bne.n	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80059c8:	4b1a      	ldr	r3, [pc, #104]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	0a1b      	lsrs	r3, r3, #8
 80059ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059d2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	fb03 f202 	mul.w	r2, r3, r2
 80059dc:	4b15      	ldr	r3, [pc, #84]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	091b      	lsrs	r3, r3, #4
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	3301      	adds	r3, #1
 80059e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ec:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80059ee:	4b11      	ldr	r3, [pc, #68]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	0d5b      	lsrs	r3, r3, #21
 80059f4:	f003 0303 	and.w	r3, r3, #3
 80059f8:	3301      	adds	r3, #1
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a02:	61fb      	str	r3, [r7, #28]
          break;
 8005a04:	e003      	b.n	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8005a06:	bf00      	nop
 8005a08:	e00e      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a0a:	bf00      	nop
 8005a0c:	e00c      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a0e:	bf00      	nop
        break;
 8005a10:	e00a      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005a12:	bf00      	nop
 8005a14:	e008      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005a16:	bf00      	nop
 8005a18:	e006      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005a1a:	bf00      	nop
 8005a1c:	e004      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005a1e:	bf00      	nop
 8005a20:	e002      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005a22:	bf00      	nop
 8005a24:	e000      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005a26:	bf00      	nop
    }
  }

  return(frequency);
 8005a28:	69fb      	ldr	r3, [r7, #28]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3720      	adds	r7, #32
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	40021000 	.word	0x40021000
 8005a38:	08008360 	.word	0x08008360

08005a3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a4a:	4b72      	ldr	r3, [pc, #456]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00e      	beq.n	8005a74 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a56:	4b6f      	ldr	r3, [pc, #444]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f003 0203 	and.w	r2, r3, #3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d103      	bne.n	8005a6e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
       ||
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d142      	bne.n	8005af4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	73fb      	strb	r3, [r7, #15]
 8005a72:	e03f      	b.n	8005af4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	d018      	beq.n	8005aae <RCCEx_PLLSAI1_Config+0x72>
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d825      	bhi.n	8005acc <RCCEx_PLLSAI1_Config+0x90>
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d002      	beq.n	8005a8a <RCCEx_PLLSAI1_Config+0x4e>
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d009      	beq.n	8005a9c <RCCEx_PLLSAI1_Config+0x60>
 8005a88:	e020      	b.n	8005acc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a8a:	4b62      	ldr	r3, [pc, #392]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d11d      	bne.n	8005ad2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a9a:	e01a      	b.n	8005ad2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a9c:	4b5d      	ldr	r3, [pc, #372]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d116      	bne.n	8005ad6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aac:	e013      	b.n	8005ad6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005aae:	4b59      	ldr	r3, [pc, #356]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10f      	bne.n	8005ada <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005aba:	4b56      	ldr	r3, [pc, #344]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005aca:	e006      	b.n	8005ada <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad0:	e004      	b.n	8005adc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005ad2:	bf00      	nop
 8005ad4:	e002      	b.n	8005adc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005ad6:	bf00      	nop
 8005ad8:	e000      	b.n	8005adc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005ada:	bf00      	nop
    }

    if(status == HAL_OK)
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d108      	bne.n	8005af4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005ae2:	4b4c      	ldr	r3, [pc, #304]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f023 0203 	bic.w	r2, r3, #3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4949      	ldr	r1, [pc, #292]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f040 8086 	bne.w	8005c08 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005afc:	4b45      	ldr	r3, [pc, #276]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a44      	ldr	r2, [pc, #272]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b08:	f7fc fa82 	bl	8002010 <HAL_GetTick>
 8005b0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b0e:	e009      	b.n	8005b24 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b10:	f7fc fa7e 	bl	8002010 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d902      	bls.n	8005b24 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	73fb      	strb	r3, [r7, #15]
        break;
 8005b22:	e005      	b.n	8005b30 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b24:	4b3b      	ldr	r3, [pc, #236]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1ef      	bne.n	8005b10 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d168      	bne.n	8005c08 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d113      	bne.n	8005b64 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b3c:	4b35      	ldr	r3, [pc, #212]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	4b35      	ldr	r3, [pc, #212]	; (8005c18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b42:	4013      	ands	r3, r2
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6892      	ldr	r2, [r2, #8]
 8005b48:	0211      	lsls	r1, r2, #8
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	68d2      	ldr	r2, [r2, #12]
 8005b4e:	06d2      	lsls	r2, r2, #27
 8005b50:	4311      	orrs	r1, r2
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6852      	ldr	r2, [r2, #4]
 8005b56:	3a01      	subs	r2, #1
 8005b58:	0112      	lsls	r2, r2, #4
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	492d      	ldr	r1, [pc, #180]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	610b      	str	r3, [r1, #16]
 8005b62:	e02d      	b.n	8005bc0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d115      	bne.n	8005b96 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b6a:	4b2a      	ldr	r3, [pc, #168]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b6c:	691a      	ldr	r2, [r3, #16]
 8005b6e:	4b2b      	ldr	r3, [pc, #172]	; (8005c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6892      	ldr	r2, [r2, #8]
 8005b76:	0211      	lsls	r1, r2, #8
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6912      	ldr	r2, [r2, #16]
 8005b7c:	0852      	lsrs	r2, r2, #1
 8005b7e:	3a01      	subs	r2, #1
 8005b80:	0552      	lsls	r2, r2, #21
 8005b82:	4311      	orrs	r1, r2
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6852      	ldr	r2, [r2, #4]
 8005b88:	3a01      	subs	r2, #1
 8005b8a:	0112      	lsls	r2, r2, #4
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	4921      	ldr	r1, [pc, #132]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	610b      	str	r3, [r1, #16]
 8005b94:	e014      	b.n	8005bc0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b96:	4b1f      	ldr	r3, [pc, #124]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b98:	691a      	ldr	r2, [r3, #16]
 8005b9a:	4b21      	ldr	r3, [pc, #132]	; (8005c20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6892      	ldr	r2, [r2, #8]
 8005ba2:	0211      	lsls	r1, r2, #8
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6952      	ldr	r2, [r2, #20]
 8005ba8:	0852      	lsrs	r2, r2, #1
 8005baa:	3a01      	subs	r2, #1
 8005bac:	0652      	lsls	r2, r2, #25
 8005bae:	4311      	orrs	r1, r2
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6852      	ldr	r2, [r2, #4]
 8005bb4:	3a01      	subs	r2, #1
 8005bb6:	0112      	lsls	r2, r2, #4
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	4916      	ldr	r1, [pc, #88]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005bc0:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a13      	ldr	r2, [pc, #76]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bcc:	f7fc fa20 	bl	8002010 <HAL_GetTick>
 8005bd0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bd2:	e009      	b.n	8005be8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bd4:	f7fc fa1c 	bl	8002010 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d902      	bls.n	8005be8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	73fb      	strb	r3, [r7, #15]
          break;
 8005be6:	e005      	b.n	8005bf4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005be8:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0ef      	beq.n	8005bd4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d106      	bne.n	8005c08 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005bfa:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bfc:	691a      	ldr	r2, [r3, #16]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	4904      	ldr	r1, [pc, #16]	; (8005c14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	40021000 	.word	0x40021000
 8005c18:	07ff800f 	.word	0x07ff800f
 8005c1c:	ff9f800f 	.word	0xff9f800f
 8005c20:	f9ff800f 	.word	0xf9ff800f

08005c24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c32:	4b72      	ldr	r3, [pc, #456]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00e      	beq.n	8005c5c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c3e:	4b6f      	ldr	r3, [pc, #444]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f003 0203 	and.w	r2, r3, #3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d103      	bne.n	8005c56 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
       ||
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d142      	bne.n	8005cdc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	73fb      	strb	r3, [r7, #15]
 8005c5a:	e03f      	b.n	8005cdc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d018      	beq.n	8005c96 <RCCEx_PLLSAI2_Config+0x72>
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d825      	bhi.n	8005cb4 <RCCEx_PLLSAI2_Config+0x90>
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d002      	beq.n	8005c72 <RCCEx_PLLSAI2_Config+0x4e>
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d009      	beq.n	8005c84 <RCCEx_PLLSAI2_Config+0x60>
 8005c70:	e020      	b.n	8005cb4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c72:	4b62      	ldr	r3, [pc, #392]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d11d      	bne.n	8005cba <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c82:	e01a      	b.n	8005cba <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c84:	4b5d      	ldr	r3, [pc, #372]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d116      	bne.n	8005cbe <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c94:	e013      	b.n	8005cbe <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c96:	4b59      	ldr	r3, [pc, #356]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10f      	bne.n	8005cc2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ca2:	4b56      	ldr	r3, [pc, #344]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d109      	bne.n	8005cc2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cb2:	e006      	b.n	8005cc2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb8:	e004      	b.n	8005cc4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005cba:	bf00      	nop
 8005cbc:	e002      	b.n	8005cc4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005cbe:	bf00      	nop
 8005cc0:	e000      	b.n	8005cc4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005cc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d108      	bne.n	8005cdc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005cca:	4b4c      	ldr	r3, [pc, #304]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f023 0203 	bic.w	r2, r3, #3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4949      	ldr	r1, [pc, #292]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f040 8086 	bne.w	8005df0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ce4:	4b45      	ldr	r3, [pc, #276]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a44      	ldr	r2, [pc, #272]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf0:	f7fc f98e 	bl	8002010 <HAL_GetTick>
 8005cf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cf6:	e009      	b.n	8005d0c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cf8:	f7fc f98a 	bl	8002010 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d902      	bls.n	8005d0c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	73fb      	strb	r3, [r7, #15]
        break;
 8005d0a:	e005      	b.n	8005d18 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d0c:	4b3b      	ldr	r3, [pc, #236]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1ef      	bne.n	8005cf8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d168      	bne.n	8005df0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d113      	bne.n	8005d4c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d24:	4b35      	ldr	r3, [pc, #212]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d26:	695a      	ldr	r2, [r3, #20]
 8005d28:	4b35      	ldr	r3, [pc, #212]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6892      	ldr	r2, [r2, #8]
 8005d30:	0211      	lsls	r1, r2, #8
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	68d2      	ldr	r2, [r2, #12]
 8005d36:	06d2      	lsls	r2, r2, #27
 8005d38:	4311      	orrs	r1, r2
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6852      	ldr	r2, [r2, #4]
 8005d3e:	3a01      	subs	r2, #1
 8005d40:	0112      	lsls	r2, r2, #4
 8005d42:	430a      	orrs	r2, r1
 8005d44:	492d      	ldr	r1, [pc, #180]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	614b      	str	r3, [r1, #20]
 8005d4a:	e02d      	b.n	8005da8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d115      	bne.n	8005d7e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d52:	4b2a      	ldr	r3, [pc, #168]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	4b2b      	ldr	r3, [pc, #172]	; (8005e04 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6892      	ldr	r2, [r2, #8]
 8005d5e:	0211      	lsls	r1, r2, #8
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6912      	ldr	r2, [r2, #16]
 8005d64:	0852      	lsrs	r2, r2, #1
 8005d66:	3a01      	subs	r2, #1
 8005d68:	0552      	lsls	r2, r2, #21
 8005d6a:	4311      	orrs	r1, r2
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6852      	ldr	r2, [r2, #4]
 8005d70:	3a01      	subs	r2, #1
 8005d72:	0112      	lsls	r2, r2, #4
 8005d74:	430a      	orrs	r2, r1
 8005d76:	4921      	ldr	r1, [pc, #132]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	614b      	str	r3, [r1, #20]
 8005d7c:	e014      	b.n	8005da8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d7e:	4b1f      	ldr	r3, [pc, #124]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d80:	695a      	ldr	r2, [r3, #20]
 8005d82:	4b21      	ldr	r3, [pc, #132]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6892      	ldr	r2, [r2, #8]
 8005d8a:	0211      	lsls	r1, r2, #8
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6952      	ldr	r2, [r2, #20]
 8005d90:	0852      	lsrs	r2, r2, #1
 8005d92:	3a01      	subs	r2, #1
 8005d94:	0652      	lsls	r2, r2, #25
 8005d96:	4311      	orrs	r1, r2
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6852      	ldr	r2, [r2, #4]
 8005d9c:	3a01      	subs	r2, #1
 8005d9e:	0112      	lsls	r2, r2, #4
 8005da0:	430a      	orrs	r2, r1
 8005da2:	4916      	ldr	r1, [pc, #88]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005da8:	4b14      	ldr	r3, [pc, #80]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a13      	ldr	r2, [pc, #76]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db4:	f7fc f92c 	bl	8002010 <HAL_GetTick>
 8005db8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dba:	e009      	b.n	8005dd0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005dbc:	f7fc f928 	bl	8002010 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d902      	bls.n	8005dd0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	73fb      	strb	r3, [r7, #15]
          break;
 8005dce:	e005      	b.n	8005ddc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dd0:	4b0a      	ldr	r3, [pc, #40]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0ef      	beq.n	8005dbc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005de2:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005de4:	695a      	ldr	r2, [r3, #20]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	4904      	ldr	r1, [pc, #16]	; (8005dfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	40021000 	.word	0x40021000
 8005e00:	07ff800f 	.word	0x07ff800f
 8005e04:	ff9f800f 	.word	0xff9f800f
 8005e08:	f9ff800f 	.word	0xf9ff800f

08005e0c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b089      	sub	sp, #36	; 0x24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e28:	d10b      	bne.n	8005e42 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005e2a:	4b7e      	ldr	r3, [pc, #504]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e30:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005e34:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b60      	cmp	r3, #96	; 0x60
 8005e3a:	d112      	bne.n	8005e62 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005e3c:	4b7a      	ldr	r3, [pc, #488]	; (8006028 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005e3e:	61fb      	str	r3, [r7, #28]
 8005e40:	e00f      	b.n	8005e62 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e48:	d10b      	bne.n	8005e62 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005e4a:	4b76      	ldr	r3, [pc, #472]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e54:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e5c:	d101      	bne.n	8005e62 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005e5e:	4b72      	ldr	r3, [pc, #456]	; (8006028 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005e60:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f040 80d6 	bne.w	8006016 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	2b40      	cmp	r3, #64	; 0x40
 8005e72:	d003      	beq.n	8005e7c <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e7a:	d13b      	bne.n	8005ef4 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005e7c:	4b69      	ldr	r3, [pc, #420]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e88:	f040 80c4 	bne.w	8006014 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8005e8c:	4b65      	ldr	r3, [pc, #404]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 80bd 	beq.w	8006014 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e9a:	4b62      	ldr	r3, [pc, #392]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	091b      	lsrs	r3, r3, #4
 8005ea0:	f003 030f 	and.w	r3, r3, #15
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eac:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005eae:	4b5d      	ldr	r3, [pc, #372]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005eba:	4b5a      	ldr	r3, [pc, #360]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	0edb      	lsrs	r3, r3, #27
 8005ec0:	f003 031f 	and.w	r3, r3, #31
 8005ec4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005ecc:	4b55      	ldr	r3, [pc, #340]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8005ed8:	2311      	movs	r3, #17
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	e001      	b.n	8005ee2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8005ede:	2307      	movs	r3, #7
 8005ee0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	fb03 f202 	mul.w	r2, r3, r2
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef0:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005ef2:	e08f      	b.n	8006014 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d13a      	bne.n	8005f70 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005efa:	4b4a      	ldr	r3, [pc, #296]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f06:	f040 8086 	bne.w	8006016 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005f0a:	4b46      	ldr	r3, [pc, #280]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d07f      	beq.n	8006016 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005f16:	4b43      	ldr	r3, [pc, #268]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	091b      	lsrs	r3, r3, #4
 8005f1c:	f003 030f 	and.w	r3, r3, #15
 8005f20:	3301      	adds	r3, #1
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f28:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005f2a:	4b3e      	ldr	r3, [pc, #248]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	0a1b      	lsrs	r3, r3, #8
 8005f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f34:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8005f36:	4b3b      	ldr	r3, [pc, #236]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	0edb      	lsrs	r3, r3, #27
 8005f3c:	f003 031f 	and.w	r3, r3, #31
 8005f40:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10a      	bne.n	8005f5e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005f48:	4b36      	ldr	r3, [pc, #216]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8005f54:	2311      	movs	r3, #17
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	e001      	b.n	8005f5e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8005f5a:	2307      	movs	r3, #7
 8005f5c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	fb03 f202 	mul.w	r2, r3, r2
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6c:	61fb      	str	r3, [r7, #28]
 8005f6e:	e052      	b.n	8006016 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	2b80      	cmp	r3, #128	; 0x80
 8005f74:	d003      	beq.n	8005f7e <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f7c:	d109      	bne.n	8005f92 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f7e:	4b29      	ldr	r3, [pc, #164]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f8a:	d144      	bne.n	8006016 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8005f8c:	4b27      	ldr	r3, [pc, #156]	; (800602c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8005f8e:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f90:	e041      	b.n	8006016 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	d003      	beq.n	8005fa0 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f9e:	d13a      	bne.n	8006016 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005fa0:	4b20      	ldr	r3, [pc, #128]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fac:	d133      	bne.n	8006016 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005fae:	4b1d      	ldr	r3, [pc, #116]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d02d      	beq.n	8006016 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8005fba:	4b1a      	ldr	r3, [pc, #104]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	091b      	lsrs	r3, r3, #4
 8005fc0:	f003 030f 	and.w	r3, r3, #15
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fcc:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005fce:	4b15      	ldr	r3, [pc, #84]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	0a1b      	lsrs	r3, r3, #8
 8005fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fd8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8005fda:	4b12      	ldr	r3, [pc, #72]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	0edb      	lsrs	r3, r3, #27
 8005fe0:	f003 031f 	and.w	r3, r3, #31
 8005fe4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10a      	bne.n	8006002 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005fec:	4b0d      	ldr	r3, [pc, #52]	; (8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8005ff8:	2311      	movs	r3, #17
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	e001      	b.n	8006002 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8005ffe:	2307      	movs	r3, #7
 8006000:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	fb03 f202 	mul.w	r2, r3, r2
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006010:	61fb      	str	r3, [r7, #28]
 8006012:	e000      	b.n	8006016 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006014:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006016:	69fb      	ldr	r3, [r7, #28]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3724      	adds	r7, #36	; 0x24
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	40021000 	.word	0x40021000
 8006028:	001fff68 	.word	0x001fff68
 800602c:	00f42400 	.word	0x00f42400

08006030 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b02      	cmp	r3, #2
 8006042:	d904      	bls.n	800604e <HAL_SAI_InitProtocol+0x1e>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	3b03      	subs	r3, #3
 8006048:	2b01      	cmp	r3, #1
 800604a:	d812      	bhi.n	8006072 <HAL_SAI_InitProtocol+0x42>
 800604c:	e008      	b.n	8006060 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	68b9      	ldr	r1, [r7, #8]
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 f9fb 	bl	8006450 <SAI_InitI2S>
 800605a:	4603      	mov	r3, r0
 800605c:	75fb      	strb	r3, [r7, #23]
      break;
 800605e:	e00b      	b.n	8006078 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 faa4 	bl	80065b4 <SAI_InitPCM>
 800606c:	4603      	mov	r3, r0
 800606e:	75fb      	strb	r3, [r7, #23]
      break;
 8006070:	e002      	b.n	8006078 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	75fb      	strb	r3, [r7, #23]
      break;
 8006076:	bf00      	nop
  }

  if (status == HAL_OK)
 8006078:	7dfb      	ldrb	r3, [r7, #23]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d104      	bne.n	8006088 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 f808 	bl	8006094 <HAL_SAI_Init>
 8006084:	4603      	mov	r3, r0
 8006086:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006088:	7dfb      	ldrb	r3, [r7, #23]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3718      	adds	r7, #24
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08a      	sub	sp, #40	; 0x28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e1c7      	b.n	8006436 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d10e      	bne.n	80060ce <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a81      	ldr	r2, [pc, #516]	; (80062bc <HAL_SAI_Init+0x228>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d107      	bne.n	80060ca <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d103      	bne.n	80060ca <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e1b3      	b.n	8006436 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fb fe0a 	bl	8001cfc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fae5 	bl	80066b8 <SAI_Disable>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e19e      	b.n	8006436 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	2b02      	cmp	r3, #2
 8006106:	d00c      	beq.n	8006122 <HAL_SAI_Init+0x8e>
 8006108:	2b02      	cmp	r3, #2
 800610a:	d80d      	bhi.n	8006128 <HAL_SAI_Init+0x94>
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <HAL_SAI_Init+0x82>
 8006110:	2b01      	cmp	r3, #1
 8006112:	d003      	beq.n	800611c <HAL_SAI_Init+0x88>
 8006114:	e008      	b.n	8006128 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800611a:	e008      	b.n	800612e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800611c:	2310      	movs	r3, #16
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006120:	e005      	b.n	800612e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006122:	2320      	movs	r3, #32
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006126:	e002      	b.n	800612e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006128:	2300      	movs	r3, #0
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800612c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	2b03      	cmp	r3, #3
 8006134:	d81d      	bhi.n	8006172 <HAL_SAI_Init+0xde>
 8006136:	a201      	add	r2, pc, #4	; (adr r2, 800613c <HAL_SAI_Init+0xa8>)
 8006138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613c:	0800614d 	.word	0x0800614d
 8006140:	08006153 	.word	0x08006153
 8006144:	0800615b 	.word	0x0800615b
 8006148:	08006163 	.word	0x08006163
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800614c:	2300      	movs	r3, #0
 800614e:	61fb      	str	r3, [r7, #28]
      break;
 8006150:	e012      	b.n	8006178 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006156:	61fb      	str	r3, [r7, #28]
      break;
 8006158:	e00e      	b.n	8006178 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800615a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800615e:	61fb      	str	r3, [r7, #28]
      break;
 8006160:	e00a      	b.n	8006178 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006162:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006166:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	f043 0301 	orr.w	r3, r3, #1
 800616e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006170:	e002      	b.n	8006178 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	61fb      	str	r3, [r7, #28]
      break;
 8006176:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a4f      	ldr	r2, [pc, #316]	; (80062bc <HAL_SAI_Init+0x228>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_SAI_Init+0xf8>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a4e      	ldr	r2, [pc, #312]	; (80062c0 <HAL_SAI_Init+0x22c>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d103      	bne.n	8006194 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800618c:	4a4d      	ldr	r2, [pc, #308]	; (80062c4 <HAL_SAI_Init+0x230>)
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	e002      	b.n	800619a <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006194:	4a4c      	ldr	r2, [pc, #304]	; (80062c8 <HAL_SAI_Init+0x234>)
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d073      	beq.n	800628a <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a45      	ldr	r2, [pc, #276]	; (80062bc <HAL_SAI_Init+0x228>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d004      	beq.n	80061b6 <HAL_SAI_Init+0x122>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a43      	ldr	r2, [pc, #268]	; (80062c0 <HAL_SAI_Init+0x22c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d105      	bne.n	80061c2 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80061b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80061ba:	f7fe fd1d 	bl	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq>
 80061be:	61b8      	str	r0, [r7, #24]
 80061c0:	e004      	b.n	80061cc <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80061c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80061c6:	f7fe fd17 	bl	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq>
 80061ca:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061d4:	d120      	bne.n	8006218 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d102      	bne.n	80061e4 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80061de:	2340      	movs	r3, #64	; 0x40
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	e00a      	b.n	80061fa <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	d103      	bne.n	80061f4 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80061ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061f0:	613b      	str	r3, [r7, #16]
 80061f2:	e002      	b.n	80061fa <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f8:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	4619      	mov	r1, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	fb02 f303 	mul.w	r3, r2, r3
 8006210:	fbb1 f3f3 	udiv	r3, r1, r3
 8006214:	617b      	str	r3, [r7, #20]
 8006216:	e017      	b.n	8006248 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006220:	d101      	bne.n	8006226 <HAL_SAI_Init+0x192>
 8006222:	2302      	movs	r3, #2
 8006224:	e000      	b.n	8006228 <HAL_SAI_Init+0x194>
 8006226:	2301      	movs	r3, #1
 8006228:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	4613      	mov	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	4619      	mov	r1, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	fb02 f303 	mul.w	r3, r2, r3
 8006240:	021b      	lsls	r3, r3, #8
 8006242:	fbb1 f3f3 	udiv	r3, r1, r3
 8006246:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	4a20      	ldr	r2, [pc, #128]	; (80062cc <HAL_SAI_Init+0x238>)
 800624c:	fba2 2303 	umull	r2, r3, r2, r3
 8006250:	08da      	lsrs	r2, r3, #3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006256:	6979      	ldr	r1, [r7, #20]
 8006258:	4b1c      	ldr	r3, [pc, #112]	; (80062cc <HAL_SAI_Init+0x238>)
 800625a:	fba3 2301 	umull	r2, r3, r3, r1
 800625e:	08da      	lsrs	r2, r3, #3
 8006260:	4613      	mov	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	1aca      	subs	r2, r1, r3
 800626a:	2a08      	cmp	r2, #8
 800626c:	d904      	bls.n	8006278 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	2b04      	cmp	r3, #4
 800627e:	d104      	bne.n	800628a <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	085a      	lsrs	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_SAI_Init+0x206>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d109      	bne.n	80062ae <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d101      	bne.n	80062a6 <HAL_SAI_Init+0x212>
 80062a2:	2300      	movs	r3, #0
 80062a4:	e001      	b.n	80062aa <HAL_SAI_Init+0x216>
 80062a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062aa:	623b      	str	r3, [r7, #32]
 80062ac:	e012      	b.n	80062d4 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d10c      	bne.n	80062d0 <HAL_SAI_Init+0x23c>
 80062b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062ba:	e00a      	b.n	80062d2 <HAL_SAI_Init+0x23e>
 80062bc:	40015404 	.word	0x40015404
 80062c0:	40015424 	.word	0x40015424
 80062c4:	40015400 	.word	0x40015400
 80062c8:	40015800 	.word	0x40015800
 80062cc:	cccccccd 	.word	0xcccccccd
 80062d0:	2300      	movs	r3, #0
 80062d2:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6819      	ldr	r1, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	4b58      	ldr	r3, [pc, #352]	; (8006440 <HAL_SAI_Init+0x3ac>)
 80062e0:	400b      	ands	r3, r1
 80062e2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6819      	ldr	r1, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80062f8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062fe:	431a      	orrs	r2, r3
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800630c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006318:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	051b      	lsls	r3, r3, #20
 8006320:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006326:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6812      	ldr	r2, [r2, #0]
 800633a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800633e:	f023 030f 	bic.w	r3, r3, #15
 8006342:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6859      	ldr	r1, [r3, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699a      	ldr	r2, [r3, #24]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006358:	431a      	orrs	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6899      	ldr	r1, [r3, #8]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	4b35      	ldr	r3, [pc, #212]	; (8006444 <HAL_SAI_Init+0x3b0>)
 800636e:	400b      	ands	r3, r1
 8006370:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6899      	ldr	r1, [r3, #8]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006382:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8006388:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 800638e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006394:	3b01      	subs	r3, #1
 8006396:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006398:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68d9      	ldr	r1, [r3, #12]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	f24f 0320 	movw	r3, #61472	; 0xf020
 80063b0:	400b      	ands	r3, r1
 80063b2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68d9      	ldr	r1, [r3, #12]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063c2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80063ca:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d0:	3b01      	subs	r3, #1
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a19      	ldr	r2, [pc, #100]	; (8006448 <HAL_SAI_Init+0x3b4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d119      	bne.n	800641c <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80063e8:	4b18      	ldr	r3, [pc, #96]	; (800644c <HAL_SAI_Init+0x3b8>)
 80063ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ec:	4a17      	ldr	r2, [pc, #92]	; (800644c <HAL_SAI_Init+0x3b8>)
 80063ee:	f023 0301 	bic.w	r3, r3, #1
 80063f2:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d10e      	bne.n	800641c <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	3b01      	subs	r3, #1
 8006408:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800640a:	4910      	ldr	r1, [pc, #64]	; (800644c <HAL_SAI_Init+0x3b8>)
 800640c:	4313      	orrs	r3, r2
 800640e:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006410:	4b0e      	ldr	r3, [pc, #56]	; (800644c <HAL_SAI_Init+0x3b8>)
 8006412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006414:	4a0d      	ldr	r2, [pc, #52]	; (800644c <HAL_SAI_Init+0x3b8>)
 8006416:	f043 0301 	orr.w	r3, r3, #1
 800641a:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3728      	adds	r7, #40	; 0x28
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	f805c010 	.word	0xf805c010
 8006444:	fff88000 	.word	0xfff88000
 8006448:	40015404 	.word	0x40015404
 800644c:	40015400 	.word	0x40015400

08006450 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <SAI_InitI2S+0x2e>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2b02      	cmp	r3, #2
 800647c:	d103      	bne.n	8006486 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	64da      	str	r2, [r3, #76]	; 0x4c
 8006484:	e002      	b.n	800648c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2201      	movs	r2, #1
 800648a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006492:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800649a:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e077      	b.n	80065a6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d107      	bne.n	80064cc <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80064c8:	661a      	str	r2, [r3, #96]	; 0x60
 80064ca:	e006      	b.n	80064da <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80064d2:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d84f      	bhi.n	8006580 <SAI_InitI2S+0x130>
 80064e0:	a201      	add	r2, pc, #4	; (adr r2, 80064e8 <SAI_InitI2S+0x98>)
 80064e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e6:	bf00      	nop
 80064e8:	080064f9 	.word	0x080064f9
 80064ec:	0800651b 	.word	0x0800651b
 80064f0:	0800653d 	.word	0x0800653d
 80064f4:	0800655f 	.word	0x0800655f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2280      	movs	r2, #128	; 0x80
 80064fc:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	085b      	lsrs	r3, r3, #1
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	085b      	lsrs	r3, r3, #1
 800650c:	011a      	lsls	r2, r3, #4
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2240      	movs	r2, #64	; 0x40
 8006516:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006518:	e035      	b.n	8006586 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2280      	movs	r2, #128	; 0x80
 800651e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	085b      	lsrs	r3, r3, #1
 8006524:	019a      	lsls	r2, r3, #6
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	085b      	lsrs	r3, r3, #1
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2280      	movs	r2, #128	; 0x80
 8006538:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800653a:	e024      	b.n	8006586 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	22c0      	movs	r2, #192	; 0xc0
 8006540:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	085b      	lsrs	r3, r3, #1
 8006546:	019a      	lsls	r2, r3, #6
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	085b      	lsrs	r3, r3, #1
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2280      	movs	r2, #128	; 0x80
 800655a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800655c:	e013      	b.n	8006586 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	22e0      	movs	r2, #224	; 0xe0
 8006562:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	085b      	lsrs	r3, r3, #1
 8006568:	019a      	lsls	r2, r3, #6
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	085b      	lsrs	r3, r3, #1
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2280      	movs	r2, #128	; 0x80
 800657c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800657e:	e002      	b.n	8006586 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	75fb      	strb	r3, [r7, #23]
      break;
 8006584:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b02      	cmp	r3, #2
 800658a:	d10b      	bne.n	80065a4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d102      	bne.n	8006598 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2210      	movs	r2, #16
 8006596:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b02      	cmp	r3, #2
 800659c:	d102      	bne.n	80065a4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2208      	movs	r2, #8
 80065a2:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 80065a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop

080065b4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <SAI_InitPCM+0x2e>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d103      	bne.n	80065ea <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2201      	movs	r2, #1
 80065e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80065e8:	e002      	b.n	80065f0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80065fc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006604:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006618:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b04      	cmp	r3, #4
 800661e:	d103      	bne.n	8006628 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2201      	movs	r2, #1
 8006624:	655a      	str	r2, [r3, #84]	; 0x54
 8006626:	e002      	b.n	800662e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	220d      	movs	r2, #13
 800662c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b03      	cmp	r3, #3
 8006632:	d837      	bhi.n	80066a4 <SAI_InitPCM+0xf0>
 8006634:	a201      	add	r2, pc, #4	; (adr r2, 800663c <SAI_InitPCM+0x88>)
 8006636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663a:	bf00      	nop
 800663c:	0800664d 	.word	0x0800664d
 8006640:	08006663 	.word	0x08006663
 8006644:	08006679 	.word	0x08006679
 8006648:	0800668f 	.word	0x0800668f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2280      	movs	r2, #128	; 0x80
 8006650:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	011a      	lsls	r2, r3, #4
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2240      	movs	r2, #64	; 0x40
 800665e:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006660:	e023      	b.n	80066aa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2280      	movs	r2, #128	; 0x80
 8006666:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2280      	movs	r2, #128	; 0x80
 8006674:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006676:	e018      	b.n	80066aa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	22c0      	movs	r2, #192	; 0xc0
 800667c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2280      	movs	r2, #128	; 0x80
 800668a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800668c:	e00d      	b.n	80066aa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	22e0      	movs	r2, #224	; 0xe0
 8006692:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2280      	movs	r2, #128	; 0x80
 80066a0:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80066a2:	e002      	b.n	80066aa <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	75fb      	strb	r3, [r7, #23]
      break;
 80066a8:	bf00      	nop
  }

  return status;
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	371c      	adds	r7, #28
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80066c0:	4b18      	ldr	r3, [pc, #96]	; (8006724 <SAI_Disable+0x6c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a18      	ldr	r2, [pc, #96]	; (8006728 <SAI_Disable+0x70>)
 80066c6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ca:	0b1b      	lsrs	r3, r3, #12
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80066e2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10a      	bne.n	8006700 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	72fb      	strb	r3, [r7, #11]
      break;
 80066fe:	e009      	b.n	8006714 <SAI_Disable+0x5c>
    }
    count--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3b01      	subs	r3, #1
 8006704:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e7      	bne.n	80066e4 <SAI_Disable+0x2c>

  return status;
 8006714:	7afb      	ldrb	r3, [r7, #11]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20000000 	.word	0x20000000
 8006728:	95cbec1b 	.word	0x95cbec1b

0800672c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e095      	b.n	800686a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	2b00      	cmp	r3, #0
 8006744:	d108      	bne.n	8006758 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800674e:	d009      	beq.n	8006764 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	61da      	str	r2, [r3, #28]
 8006756:	e005      	b.n	8006764 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d106      	bne.n	8006784 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7fb f8b2 	bl	80018e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800679a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067a4:	d902      	bls.n	80067ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	e002      	b.n	80067b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80067ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80067ba:	d007      	beq.n	80067cc <HAL_SPI_Init+0xa0>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067c4:	d002      	beq.n	80067cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80067dc:	431a      	orrs	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	431a      	orrs	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067fa:	431a      	orrs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680e:	ea42 0103 	orr.w	r1, r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006816:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	0c1b      	lsrs	r3, r3, #16
 8006828:	f003 0204 	and.w	r2, r3, #4
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	f003 0310 	and.w	r3, r3, #16
 8006834:	431a      	orrs	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800683a:	f003 0308 	and.w	r3, r3, #8
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006848:	ea42 0103 	orr.w	r1, r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b088      	sub	sp, #32
 8006876:	af00      	add	r7, sp, #0
 8006878:	60f8      	str	r0, [r7, #12]
 800687a:	60b9      	str	r1, [r7, #8]
 800687c:	603b      	str	r3, [r7, #0]
 800687e:	4613      	mov	r3, r2
 8006880:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_SPI_Transmit+0x22>
 8006890:	2302      	movs	r3, #2
 8006892:	e15f      	b.n	8006b54 <HAL_SPI_Transmit+0x2e2>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800689c:	f7fb fbb8 	bl	8002010 <HAL_GetTick>
 80068a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80068a2:	88fb      	ldrh	r3, [r7, #6]
 80068a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d002      	beq.n	80068b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80068b2:	2302      	movs	r3, #2
 80068b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068b6:	e148      	b.n	8006b4a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <HAL_SPI_Transmit+0x52>
 80068be:	88fb      	ldrh	r3, [r7, #6]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d102      	bne.n	80068ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068c8:	e13f      	b.n	8006b4a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2203      	movs	r2, #3
 80068ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	88fa      	ldrh	r2, [r7, #6]
 80068e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	88fa      	ldrh	r2, [r7, #6]
 80068e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006914:	d10f      	bne.n	8006936 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006924:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006934:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006940:	2b40      	cmp	r3, #64	; 0x40
 8006942:	d007      	beq.n	8006954 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006952:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800695c:	d94f      	bls.n	80069fe <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d002      	beq.n	800696c <HAL_SPI_Transmit+0xfa>
 8006966:	8afb      	ldrh	r3, [r7, #22]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d142      	bne.n	80069f2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006970:	881a      	ldrh	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	1c9a      	adds	r2, r3, #2
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006986:	b29b      	uxth	r3, r3
 8006988:	3b01      	subs	r3, #1
 800698a:	b29a      	uxth	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006990:	e02f      	b.n	80069f2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b02      	cmp	r3, #2
 800699e:	d112      	bne.n	80069c6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	881a      	ldrh	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b0:	1c9a      	adds	r2, r3, #2
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	3b01      	subs	r3, #1
 80069be:	b29a      	uxth	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069c4:	e015      	b.n	80069f2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069c6:	f7fb fb23 	bl	8002010 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d803      	bhi.n	80069de <HAL_SPI_Transmit+0x16c>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069dc:	d102      	bne.n	80069e4 <HAL_SPI_Transmit+0x172>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d106      	bne.n	80069f2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80069f0:	e0ab      	b.n	8006b4a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1ca      	bne.n	8006992 <HAL_SPI_Transmit+0x120>
 80069fc:	e080      	b.n	8006b00 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <HAL_SPI_Transmit+0x19a>
 8006a06:	8afb      	ldrh	r3, [r7, #22]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d174      	bne.n	8006af6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d912      	bls.n	8006a3c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1a:	881a      	ldrh	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a26:	1c9a      	adds	r2, r3, #2
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	3b02      	subs	r3, #2
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a3a:	e05c      	b.n	8006af6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	330c      	adds	r3, #12
 8006a46:	7812      	ldrb	r2, [r2, #0]
 8006a48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006a62:	e048      	b.n	8006af6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d12b      	bne.n	8006aca <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d912      	bls.n	8006aa2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a80:	881a      	ldrh	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8c:	1c9a      	adds	r2, r3, #2
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	3b02      	subs	r3, #2
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006aa0:	e029      	b.n	8006af6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	330c      	adds	r3, #12
 8006aac:	7812      	ldrb	r2, [r2, #0]
 8006aae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ac8:	e015      	b.n	8006af6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aca:	f7fb faa1 	bl	8002010 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d803      	bhi.n	8006ae2 <HAL_SPI_Transmit+0x270>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae0:	d102      	bne.n	8006ae8 <HAL_SPI_Transmit+0x276>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d106      	bne.n	8006af6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006af4:	e029      	b.n	8006b4a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1b1      	bne.n	8006a64 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 fcf9 	bl	80074fc <SPI_EndRxTxTransaction>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2220      	movs	r2, #32
 8006b14:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10a      	bne.n	8006b34 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b1e:	2300      	movs	r3, #0
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	613b      	str	r3, [r7, #16]
 8006b32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	77fb      	strb	r3, [r7, #31]
 8006b40:	e003      	b.n	8006b4a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b52:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3720      	adds	r7, #32
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b088      	sub	sp, #32
 8006b60:	af02      	add	r7, sp, #8
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	603b      	str	r3, [r7, #0]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d002      	beq.n	8006b82 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b80:	e11a      	b.n	8006db8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b8a:	d112      	bne.n	8006bb2 <HAL_SPI_Receive+0x56>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10e      	bne.n	8006bb2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2204      	movs	r2, #4
 8006b98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006b9c:	88fa      	ldrh	r2, [r7, #6]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 f90e 	bl	8006dca <HAL_SPI_TransmitReceive>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	e107      	b.n	8006dc2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d101      	bne.n	8006bc0 <HAL_SPI_Receive+0x64>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e100      	b.n	8006dc2 <HAL_SPI_Receive+0x266>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bc8:	f7fb fa22 	bl	8002010 <HAL_GetTick>
 8006bcc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <HAL_SPI_Receive+0x7e>
 8006bd4:	88fb      	ldrh	r3, [r7, #6]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d102      	bne.n	8006be0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006bde:	e0eb      	b.n	8006db8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2204      	movs	r2, #4
 8006be4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	88fa      	ldrh	r2, [r7, #6]
 8006bf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	88fa      	ldrh	r2, [r7, #6]
 8006c00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c2a:	d908      	bls.n	8006c3e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c3a:	605a      	str	r2, [r3, #4]
 8006c3c:	e007      	b.n	8006c4e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c4c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c56:	d10f      	bne.n	8006c78 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c76:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c82:	2b40      	cmp	r3, #64	; 0x40
 8006c84:	d007      	beq.n	8006c96 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c94:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c9e:	d86f      	bhi.n	8006d80 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006ca0:	e034      	b.n	8006d0c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d117      	bne.n	8006ce0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f103 020c 	add.w	r2, r3, #12
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	7812      	ldrb	r2, [r2, #0]
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006cde:	e015      	b.n	8006d0c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ce0:	f7fb f996 	bl	8002010 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d803      	bhi.n	8006cf8 <HAL_SPI_Receive+0x19c>
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf6:	d102      	bne.n	8006cfe <HAL_SPI_Receive+0x1a2>
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d106      	bne.n	8006d0c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006d0a:	e055      	b.n	8006db8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1c4      	bne.n	8006ca2 <HAL_SPI_Receive+0x146>
 8006d18:	e038      	b.n	8006d8c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d115      	bne.n	8006d54 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	b292      	uxth	r2, r2
 8006d34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	1c9a      	adds	r2, r3, #2
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006d52:	e015      	b.n	8006d80 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d54:	f7fb f95c 	bl	8002010 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d803      	bhi.n	8006d6c <HAL_SPI_Receive+0x210>
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6a:	d102      	bne.n	8006d72 <HAL_SPI_Receive+0x216>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006d7e:	e01b      	b.n	8006db8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1c6      	bne.n	8006d1a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 fb5b 	bl	800744c <SPI_EndRxTransaction>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	75fb      	strb	r3, [r7, #23]
 8006dae:	e003      	b.n	8006db8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b08a      	sub	sp, #40	; 0x28
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	607a      	str	r2, [r7, #4]
 8006dd6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d101      	bne.n	8006df0 <HAL_SPI_TransmitReceive+0x26>
 8006dec:	2302      	movs	r3, #2
 8006dee:	e20a      	b.n	8007206 <HAL_SPI_TransmitReceive+0x43c>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006df8:	f7fb f90a 	bl	8002010 <HAL_GetTick>
 8006dfc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e04:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006e0c:	887b      	ldrh	r3, [r7, #2]
 8006e0e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006e10:	887b      	ldrh	r3, [r7, #2]
 8006e12:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e14:	7efb      	ldrb	r3, [r7, #27]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d00e      	beq.n	8006e38 <HAL_SPI_TransmitReceive+0x6e>
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e20:	d106      	bne.n	8006e30 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d102      	bne.n	8006e30 <HAL_SPI_TransmitReceive+0x66>
 8006e2a:	7efb      	ldrb	r3, [r7, #27]
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	d003      	beq.n	8006e38 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006e30:	2302      	movs	r3, #2
 8006e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006e36:	e1e0      	b.n	80071fa <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d005      	beq.n	8006e4a <HAL_SPI_TransmitReceive+0x80>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <HAL_SPI_TransmitReceive+0x80>
 8006e44:	887b      	ldrh	r3, [r7, #2]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d103      	bne.n	8006e52 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006e50:	e1d3      	b.n	80071fa <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	d003      	beq.n	8006e66 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2205      	movs	r2, #5
 8006e62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	887a      	ldrh	r2, [r7, #2]
 8006e76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	887a      	ldrh	r2, [r7, #2]
 8006e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	887a      	ldrh	r2, [r7, #2]
 8006e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	887a      	ldrh	r2, [r7, #2]
 8006e92:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ea8:	d802      	bhi.n	8006eb0 <HAL_SPI_TransmitReceive+0xe6>
 8006eaa:	8a3b      	ldrh	r3, [r7, #16]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d908      	bls.n	8006ec2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ebe:	605a      	str	r2, [r3, #4]
 8006ec0:	e007      	b.n	8006ed2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ed0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006edc:	2b40      	cmp	r3, #64	; 0x40
 8006ede:	d007      	beq.n	8006ef0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ef8:	f240 8081 	bls.w	8006ffe <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <HAL_SPI_TransmitReceive+0x140>
 8006f04:	8a7b      	ldrh	r3, [r7, #18]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d16d      	bne.n	8006fe6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0e:	881a      	ldrh	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	1c9a      	adds	r2, r3, #2
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f2e:	e05a      	b.n	8006fe6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d11b      	bne.n	8006f76 <HAL_SPI_TransmitReceive+0x1ac>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d016      	beq.n	8006f76 <HAL_SPI_TransmitReceive+0x1ac>
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d113      	bne.n	8006f76 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f52:	881a      	ldrh	r2, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5e:	1c9a      	adds	r2, r3, #2
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d11c      	bne.n	8006fbe <HAL_SPI_TransmitReceive+0x1f4>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d016      	beq.n	8006fbe <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9a:	b292      	uxth	r2, r2
 8006f9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	1c9a      	adds	r2, r3, #2
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fbe:	f7fb f827 	bl	8002010 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d80b      	bhi.n	8006fe6 <HAL_SPI_TransmitReceive+0x21c>
 8006fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd4:	d007      	beq.n	8006fe6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006fe4:	e109      	b.n	80071fa <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d19f      	bne.n	8006f30 <HAL_SPI_TransmitReceive+0x166>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d199      	bne.n	8006f30 <HAL_SPI_TransmitReceive+0x166>
 8006ffc:	e0e3      	b.n	80071c6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <HAL_SPI_TransmitReceive+0x244>
 8007006:	8a7b      	ldrh	r3, [r7, #18]
 8007008:	2b01      	cmp	r3, #1
 800700a:	f040 80cf 	bne.w	80071ac <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007012:	b29b      	uxth	r3, r3
 8007014:	2b01      	cmp	r3, #1
 8007016:	d912      	bls.n	800703e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	881a      	ldrh	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007028:	1c9a      	adds	r2, r3, #2
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007032:	b29b      	uxth	r3, r3
 8007034:	3b02      	subs	r3, #2
 8007036:	b29a      	uxth	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800703c:	e0b6      	b.n	80071ac <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	330c      	adds	r3, #12
 8007048:	7812      	ldrb	r2, [r2, #0]
 800704a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800705a:	b29b      	uxth	r3, r3
 800705c:	3b01      	subs	r3, #1
 800705e:	b29a      	uxth	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007064:	e0a2      	b.n	80071ac <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b02      	cmp	r3, #2
 8007072:	d134      	bne.n	80070de <HAL_SPI_TransmitReceive+0x314>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007078:	b29b      	uxth	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d02f      	beq.n	80070de <HAL_SPI_TransmitReceive+0x314>
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	2b01      	cmp	r3, #1
 8007082:	d12c      	bne.n	80070de <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007088:	b29b      	uxth	r3, r3
 800708a:	2b01      	cmp	r3, #1
 800708c:	d912      	bls.n	80070b4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007092:	881a      	ldrh	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709e:	1c9a      	adds	r2, r3, #2
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	3b02      	subs	r3, #2
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070b2:	e012      	b.n	80070da <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	330c      	adds	r3, #12
 80070be:	7812      	ldrb	r2, [r2, #0]
 80070c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3b01      	subs	r3, #1
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d148      	bne.n	800717e <HAL_SPI_TransmitReceive+0x3b4>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d042      	beq.n	800717e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070fe:	b29b      	uxth	r3, r3
 8007100:	2b01      	cmp	r3, #1
 8007102:	d923      	bls.n	800714c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	b292      	uxth	r2, r2
 8007110:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	1c9a      	adds	r2, r3, #2
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007122:	b29b      	uxth	r3, r3
 8007124:	3b02      	subs	r3, #2
 8007126:	b29a      	uxth	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007134:	b29b      	uxth	r3, r3
 8007136:	2b01      	cmp	r3, #1
 8007138:	d81f      	bhi.n	800717a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007148:	605a      	str	r2, [r3, #4]
 800714a:	e016      	b.n	800717a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f103 020c 	add.w	r2, r3, #12
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007158:	7812      	ldrb	r2, [r2, #0]
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800716e:	b29b      	uxth	r3, r3
 8007170:	3b01      	subs	r3, #1
 8007172:	b29a      	uxth	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800717a:	2301      	movs	r3, #1
 800717c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800717e:	f7fa ff47 	bl	8002010 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800718a:	429a      	cmp	r2, r3
 800718c:	d803      	bhi.n	8007196 <HAL_SPI_TransmitReceive+0x3cc>
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007194:	d102      	bne.n	800719c <HAL_SPI_TransmitReceive+0x3d2>
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	2b00      	cmp	r3, #0
 800719a:	d107      	bne.n	80071ac <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80071aa:	e026      	b.n	80071fa <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f47f af57 	bne.w	8007066 <HAL_SPI_TransmitReceive+0x29c>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071be:	b29b      	uxth	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f47f af50 	bne.w	8007066 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071c6:	69fa      	ldr	r2, [r7, #28]
 80071c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 f996 	bl	80074fc <SPI_EndRxTxTransaction>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2220      	movs	r2, #32
 80071e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d003      	beq.n	80071f2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071f0:	e003      	b.n	80071fa <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007202:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007206:	4618      	mov	r0, r3
 8007208:	3728      	adds	r7, #40	; 0x28
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b088      	sub	sp, #32
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	603b      	str	r3, [r7, #0]
 800721c:	4613      	mov	r3, r2
 800721e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007220:	f7fa fef6 	bl	8002010 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007228:	1a9b      	subs	r3, r3, r2
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	4413      	add	r3, r2
 800722e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007230:	f7fa feee 	bl	8002010 <HAL_GetTick>
 8007234:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007236:	4b39      	ldr	r3, [pc, #228]	; (800731c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	015b      	lsls	r3, r3, #5
 800723c:	0d1b      	lsrs	r3, r3, #20
 800723e:	69fa      	ldr	r2, [r7, #28]
 8007240:	fb02 f303 	mul.w	r3, r2, r3
 8007244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007246:	e054      	b.n	80072f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724e:	d050      	beq.n	80072f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007250:	f7fa fede 	bl	8002010 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	69fa      	ldr	r2, [r7, #28]
 800725c:	429a      	cmp	r2, r3
 800725e:	d902      	bls.n	8007266 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d13d      	bne.n	80072e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007274:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800727e:	d111      	bne.n	80072a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007288:	d004      	beq.n	8007294 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007292:	d107      	bne.n	80072a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ac:	d10f      	bne.n	80072ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e017      	b.n	8007312 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689a      	ldr	r2, [r3, #8]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4013      	ands	r3, r2
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	429a      	cmp	r2, r3
 8007300:	bf0c      	ite	eq
 8007302:	2301      	moveq	r3, #1
 8007304:	2300      	movne	r3, #0
 8007306:	b2db      	uxtb	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	429a      	cmp	r2, r3
 800730e:	d19b      	bne.n	8007248 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3720      	adds	r7, #32
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	20000000 	.word	0x20000000

08007320 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08a      	sub	sp, #40	; 0x28
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007332:	f7fa fe6d 	bl	8002010 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733a:	1a9b      	subs	r3, r3, r2
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	4413      	add	r3, r2
 8007340:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007342:	f7fa fe65 	bl	8002010 <HAL_GetTick>
 8007346:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	330c      	adds	r3, #12
 800734e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007350:	4b3d      	ldr	r3, [pc, #244]	; (8007448 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	4613      	mov	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4413      	add	r3, r2
 800735a:	00da      	lsls	r2, r3, #3
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	0d1b      	lsrs	r3, r3, #20
 8007360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007362:	fb02 f303 	mul.w	r3, r2, r3
 8007366:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007368:	e060      	b.n	800742c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007370:	d107      	bne.n	8007382 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007380:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007388:	d050      	beq.n	800742c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800738a:	f7fa fe41 	bl	8002010 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007396:	429a      	cmp	r2, r3
 8007398:	d902      	bls.n	80073a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	2b00      	cmp	r3, #0
 800739e:	d13d      	bne.n	800741c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073b8:	d111      	bne.n	80073de <SPI_WaitFifoStateUntilTimeout+0xbe>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073c2:	d004      	beq.n	80073ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073cc:	d107      	bne.n	80073de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073e6:	d10f      	bne.n	8007408 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007406:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e010      	b.n	800743e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	3b01      	subs	r3, #1
 800742a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689a      	ldr	r2, [r3, #8]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	4013      	ands	r3, r2
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	429a      	cmp	r2, r3
 800743a:	d196      	bne.n	800736a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3728      	adds	r7, #40	; 0x28
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20000000 	.word	0x20000000

0800744c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af02      	add	r7, sp, #8
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007460:	d111      	bne.n	8007486 <SPI_EndRxTransaction+0x3a>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800746a:	d004      	beq.n	8007476 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007474:	d107      	bne.n	8007486 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007484:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2200      	movs	r2, #0
 800748e:	2180      	movs	r1, #128	; 0x80
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f7ff febd 	bl	8007210 <SPI_WaitFlagStateUntilTimeout>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d007      	beq.n	80074ac <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074a0:	f043 0220 	orr.w	r2, r3, #32
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e023      	b.n	80074f4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074b4:	d11d      	bne.n	80074f2 <SPI_EndRxTransaction+0xa6>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074be:	d004      	beq.n	80074ca <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c8:	d113      	bne.n	80074f2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f7ff ff22 	bl	8007320 <SPI_WaitFifoStateUntilTimeout>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d007      	beq.n	80074f2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074e6:	f043 0220 	orr.w	r2, r3, #32
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e000      	b.n	80074f4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af02      	add	r7, sp, #8
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2200      	movs	r2, #0
 8007510:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f7ff ff03 	bl	8007320 <SPI_WaitFifoStateUntilTimeout>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d007      	beq.n	8007530 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007524:	f043 0220 	orr.w	r2, r3, #32
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e027      	b.n	8007580 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2200      	movs	r2, #0
 8007538:	2180      	movs	r1, #128	; 0x80
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f7ff fe68 	bl	8007210 <SPI_WaitFlagStateUntilTimeout>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d007      	beq.n	8007556 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800754a:	f043 0220 	orr.w	r2, r3, #32
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e014      	b.n	8007580 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	2200      	movs	r2, #0
 800755e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f7ff fedc 	bl	8007320 <SPI_WaitFifoStateUntilTimeout>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d007      	beq.n	800757e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007572:	f043 0220 	orr.w	r2, r3, #32
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e000      	b.n	8007580 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e049      	b.n	800762e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d106      	bne.n	80075b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7fa f9de 	bl	8001970 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4619      	mov	r1, r3
 80075c6:	4610      	mov	r0, r2
 80075c8:	f000 f94a 	bl	8007860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800764e:	2b01      	cmp	r3, #1
 8007650:	d101      	bne.n	8007656 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007652:	2302      	movs	r3, #2
 8007654:	e0ff      	b.n	8007856 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b14      	cmp	r3, #20
 8007662:	f200 80f0 	bhi.w	8007846 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007666:	a201      	add	r2, pc, #4	; (adr r2, 800766c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766c:	080076c1 	.word	0x080076c1
 8007670:	08007847 	.word	0x08007847
 8007674:	08007847 	.word	0x08007847
 8007678:	08007847 	.word	0x08007847
 800767c:	08007701 	.word	0x08007701
 8007680:	08007847 	.word	0x08007847
 8007684:	08007847 	.word	0x08007847
 8007688:	08007847 	.word	0x08007847
 800768c:	08007743 	.word	0x08007743
 8007690:	08007847 	.word	0x08007847
 8007694:	08007847 	.word	0x08007847
 8007698:	08007847 	.word	0x08007847
 800769c:	08007783 	.word	0x08007783
 80076a0:	08007847 	.word	0x08007847
 80076a4:	08007847 	.word	0x08007847
 80076a8:	08007847 	.word	0x08007847
 80076ac:	080077c5 	.word	0x080077c5
 80076b0:	08007847 	.word	0x08007847
 80076b4:	08007847 	.word	0x08007847
 80076b8:	08007847 	.word	0x08007847
 80076bc:	08007805 	.word	0x08007805
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68b9      	ldr	r1, [r7, #8]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 f964 	bl	8007994 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	699a      	ldr	r2, [r3, #24]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 0208 	orr.w	r2, r2, #8
 80076da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	699a      	ldr	r2, [r3, #24]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0204 	bic.w	r2, r2, #4
 80076ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6999      	ldr	r1, [r3, #24]
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	691a      	ldr	r2, [r3, #16]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	619a      	str	r2, [r3, #24]
      break;
 80076fe:	e0a5      	b.n	800784c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68b9      	ldr	r1, [r7, #8]
 8007706:	4618      	mov	r0, r3
 8007708:	f000 f9d4 	bl	8007ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699a      	ldr	r2, [r3, #24]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800771a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	699a      	ldr	r2, [r3, #24]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800772a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6999      	ldr	r1, [r3, #24]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	021a      	lsls	r2, r3, #8
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	619a      	str	r2, [r3, #24]
      break;
 8007740:	e084      	b.n	800784c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68b9      	ldr	r1, [r7, #8]
 8007748:	4618      	mov	r0, r3
 800774a:	f000 fa3d 	bl	8007bc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	69da      	ldr	r2, [r3, #28]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f042 0208 	orr.w	r2, r2, #8
 800775c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	69da      	ldr	r2, [r3, #28]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0204 	bic.w	r2, r2, #4
 800776c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	69d9      	ldr	r1, [r3, #28]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	691a      	ldr	r2, [r3, #16]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	61da      	str	r2, [r3, #28]
      break;
 8007780:	e064      	b.n	800784c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68b9      	ldr	r1, [r7, #8]
 8007788:	4618      	mov	r0, r3
 800778a:	f000 faa5 	bl	8007cd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	69da      	ldr	r2, [r3, #28]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800779c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69da      	ldr	r2, [r3, #28]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69d9      	ldr	r1, [r3, #28]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	021a      	lsls	r2, r3, #8
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	61da      	str	r2, [r3, #28]
      break;
 80077c2:	e043      	b.n	800784c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68b9      	ldr	r1, [r7, #8]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 faee 	bl	8007dac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0208 	orr.w	r2, r2, #8
 80077de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 0204 	bic.w	r2, r2, #4
 80077ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	691a      	ldr	r2, [r3, #16]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007802:	e023      	b.n	800784c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68b9      	ldr	r1, [r7, #8]
 800780a:	4618      	mov	r0, r3
 800780c:	f000 fb32 	bl	8007e74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800781e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800782e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	021a      	lsls	r2, r3, #8
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007844:	e002      	b.n	800784c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	75fb      	strb	r3, [r7, #23]
      break;
 800784a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007854:	7dfb      	ldrb	r3, [r7, #23]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3718      	adds	r7, #24
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop

08007860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a40      	ldr	r2, [pc, #256]	; (8007974 <TIM_Base_SetConfig+0x114>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d013      	beq.n	80078a0 <TIM_Base_SetConfig+0x40>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800787e:	d00f      	beq.n	80078a0 <TIM_Base_SetConfig+0x40>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a3d      	ldr	r2, [pc, #244]	; (8007978 <TIM_Base_SetConfig+0x118>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d00b      	beq.n	80078a0 <TIM_Base_SetConfig+0x40>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a3c      	ldr	r2, [pc, #240]	; (800797c <TIM_Base_SetConfig+0x11c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d007      	beq.n	80078a0 <TIM_Base_SetConfig+0x40>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a3b      	ldr	r2, [pc, #236]	; (8007980 <TIM_Base_SetConfig+0x120>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d003      	beq.n	80078a0 <TIM_Base_SetConfig+0x40>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a3a      	ldr	r2, [pc, #232]	; (8007984 <TIM_Base_SetConfig+0x124>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d108      	bne.n	80078b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a2f      	ldr	r2, [pc, #188]	; (8007974 <TIM_Base_SetConfig+0x114>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d01f      	beq.n	80078fa <TIM_Base_SetConfig+0x9a>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c0:	d01b      	beq.n	80078fa <TIM_Base_SetConfig+0x9a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a2c      	ldr	r2, [pc, #176]	; (8007978 <TIM_Base_SetConfig+0x118>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d017      	beq.n	80078fa <TIM_Base_SetConfig+0x9a>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a2b      	ldr	r2, [pc, #172]	; (800797c <TIM_Base_SetConfig+0x11c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d013      	beq.n	80078fa <TIM_Base_SetConfig+0x9a>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a2a      	ldr	r2, [pc, #168]	; (8007980 <TIM_Base_SetConfig+0x120>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d00f      	beq.n	80078fa <TIM_Base_SetConfig+0x9a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a29      	ldr	r2, [pc, #164]	; (8007984 <TIM_Base_SetConfig+0x124>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00b      	beq.n	80078fa <TIM_Base_SetConfig+0x9a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a28      	ldr	r2, [pc, #160]	; (8007988 <TIM_Base_SetConfig+0x128>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d007      	beq.n	80078fa <TIM_Base_SetConfig+0x9a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a27      	ldr	r2, [pc, #156]	; (800798c <TIM_Base_SetConfig+0x12c>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d003      	beq.n	80078fa <TIM_Base_SetConfig+0x9a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a26      	ldr	r2, [pc, #152]	; (8007990 <TIM_Base_SetConfig+0x130>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d108      	bne.n	800790c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	4313      	orrs	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a10      	ldr	r2, [pc, #64]	; (8007974 <TIM_Base_SetConfig+0x114>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d00f      	beq.n	8007958 <TIM_Base_SetConfig+0xf8>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a12      	ldr	r2, [pc, #72]	; (8007984 <TIM_Base_SetConfig+0x124>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d00b      	beq.n	8007958 <TIM_Base_SetConfig+0xf8>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a11      	ldr	r2, [pc, #68]	; (8007988 <TIM_Base_SetConfig+0x128>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d007      	beq.n	8007958 <TIM_Base_SetConfig+0xf8>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a10      	ldr	r2, [pc, #64]	; (800798c <TIM_Base_SetConfig+0x12c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d003      	beq.n	8007958 <TIM_Base_SetConfig+0xf8>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a0f      	ldr	r2, [pc, #60]	; (8007990 <TIM_Base_SetConfig+0x130>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d103      	bne.n	8007960 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	691a      	ldr	r2, [r3, #16]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	615a      	str	r2, [r3, #20]
}
 8007966:	bf00      	nop
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	40012c00 	.word	0x40012c00
 8007978:	40000400 	.word	0x40000400
 800797c:	40000800 	.word	0x40000800
 8007980:	40000c00 	.word	0x40000c00
 8007984:	40013400 	.word	0x40013400
 8007988:	40014000 	.word	0x40014000
 800798c:	40014400 	.word	0x40014400
 8007990:	40014800 	.word	0x40014800

08007994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a1b      	ldr	r3, [r3, #32]
 80079a8:	f023 0201 	bic.w	r2, r3, #1
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f023 0303 	bic.w	r3, r3, #3
 80079ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f023 0302 	bic.w	r3, r3, #2
 80079e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a2c      	ldr	r2, [pc, #176]	; (8007aa0 <TIM_OC1_SetConfig+0x10c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d00f      	beq.n	8007a14 <TIM_OC1_SetConfig+0x80>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a2b      	ldr	r2, [pc, #172]	; (8007aa4 <TIM_OC1_SetConfig+0x110>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d00b      	beq.n	8007a14 <TIM_OC1_SetConfig+0x80>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a2a      	ldr	r2, [pc, #168]	; (8007aa8 <TIM_OC1_SetConfig+0x114>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d007      	beq.n	8007a14 <TIM_OC1_SetConfig+0x80>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a29      	ldr	r2, [pc, #164]	; (8007aac <TIM_OC1_SetConfig+0x118>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d003      	beq.n	8007a14 <TIM_OC1_SetConfig+0x80>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a28      	ldr	r2, [pc, #160]	; (8007ab0 <TIM_OC1_SetConfig+0x11c>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d10c      	bne.n	8007a2e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f023 0308 	bic.w	r3, r3, #8
 8007a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f023 0304 	bic.w	r3, r3, #4
 8007a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a1b      	ldr	r2, [pc, #108]	; (8007aa0 <TIM_OC1_SetConfig+0x10c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00f      	beq.n	8007a56 <TIM_OC1_SetConfig+0xc2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a1a      	ldr	r2, [pc, #104]	; (8007aa4 <TIM_OC1_SetConfig+0x110>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d00b      	beq.n	8007a56 <TIM_OC1_SetConfig+0xc2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a19      	ldr	r2, [pc, #100]	; (8007aa8 <TIM_OC1_SetConfig+0x114>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d007      	beq.n	8007a56 <TIM_OC1_SetConfig+0xc2>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a18      	ldr	r2, [pc, #96]	; (8007aac <TIM_OC1_SetConfig+0x118>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d003      	beq.n	8007a56 <TIM_OC1_SetConfig+0xc2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a17      	ldr	r2, [pc, #92]	; (8007ab0 <TIM_OC1_SetConfig+0x11c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d111      	bne.n	8007a7a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	621a      	str	r2, [r3, #32]
}
 8007a94:	bf00      	nop
 8007a96:	371c      	adds	r7, #28
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	40012c00 	.word	0x40012c00
 8007aa4:	40013400 	.word	0x40013400
 8007aa8:	40014000 	.word	0x40014000
 8007aac:	40014400 	.word	0x40014400
 8007ab0:	40014800 	.word	0x40014800

08007ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	f023 0210 	bic.w	r2, r3, #16
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	021b      	lsls	r3, r3, #8
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f023 0320 	bic.w	r3, r3, #32
 8007b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a28      	ldr	r2, [pc, #160]	; (8007bb4 <TIM_OC2_SetConfig+0x100>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d003      	beq.n	8007b20 <TIM_OC2_SetConfig+0x6c>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a27      	ldr	r2, [pc, #156]	; (8007bb8 <TIM_OC2_SetConfig+0x104>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d10d      	bne.n	8007b3c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	011b      	lsls	r3, r3, #4
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a1d      	ldr	r2, [pc, #116]	; (8007bb4 <TIM_OC2_SetConfig+0x100>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d00f      	beq.n	8007b64 <TIM_OC2_SetConfig+0xb0>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a1c      	ldr	r2, [pc, #112]	; (8007bb8 <TIM_OC2_SetConfig+0x104>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d00b      	beq.n	8007b64 <TIM_OC2_SetConfig+0xb0>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a1b      	ldr	r2, [pc, #108]	; (8007bbc <TIM_OC2_SetConfig+0x108>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d007      	beq.n	8007b64 <TIM_OC2_SetConfig+0xb0>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a1a      	ldr	r2, [pc, #104]	; (8007bc0 <TIM_OC2_SetConfig+0x10c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d003      	beq.n	8007b64 <TIM_OC2_SetConfig+0xb0>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a19      	ldr	r2, [pc, #100]	; (8007bc4 <TIM_OC2_SetConfig+0x110>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d113      	bne.n	8007b8c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	621a      	str	r2, [r3, #32]
}
 8007ba6:	bf00      	nop
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	40012c00 	.word	0x40012c00
 8007bb8:	40013400 	.word	0x40013400
 8007bbc:	40014000 	.word	0x40014000
 8007bc0:	40014400 	.word	0x40014400
 8007bc4:	40014800 	.word	0x40014800

08007bc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f023 0303 	bic.w	r3, r3, #3
 8007c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a27      	ldr	r2, [pc, #156]	; (8007cc4 <TIM_OC3_SetConfig+0xfc>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d003      	beq.n	8007c32 <TIM_OC3_SetConfig+0x6a>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a26      	ldr	r2, [pc, #152]	; (8007cc8 <TIM_OC3_SetConfig+0x100>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d10d      	bne.n	8007c4e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	021b      	lsls	r3, r3, #8
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a1c      	ldr	r2, [pc, #112]	; (8007cc4 <TIM_OC3_SetConfig+0xfc>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d00f      	beq.n	8007c76 <TIM_OC3_SetConfig+0xae>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a1b      	ldr	r2, [pc, #108]	; (8007cc8 <TIM_OC3_SetConfig+0x100>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d00b      	beq.n	8007c76 <TIM_OC3_SetConfig+0xae>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a1a      	ldr	r2, [pc, #104]	; (8007ccc <TIM_OC3_SetConfig+0x104>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d007      	beq.n	8007c76 <TIM_OC3_SetConfig+0xae>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a19      	ldr	r2, [pc, #100]	; (8007cd0 <TIM_OC3_SetConfig+0x108>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d003      	beq.n	8007c76 <TIM_OC3_SetConfig+0xae>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a18      	ldr	r2, [pc, #96]	; (8007cd4 <TIM_OC3_SetConfig+0x10c>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d113      	bne.n	8007c9e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	621a      	str	r2, [r3, #32]
}
 8007cb8:	bf00      	nop
 8007cba:	371c      	adds	r7, #28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	40012c00 	.word	0x40012c00
 8007cc8:	40013400 	.word	0x40013400
 8007ccc:	40014000 	.word	0x40014000
 8007cd0:	40014400 	.word	0x40014400
 8007cd4:	40014800 	.word	0x40014800

08007cd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	031b      	lsls	r3, r3, #12
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a18      	ldr	r2, [pc, #96]	; (8007d98 <TIM_OC4_SetConfig+0xc0>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d00f      	beq.n	8007d5c <TIM_OC4_SetConfig+0x84>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a17      	ldr	r2, [pc, #92]	; (8007d9c <TIM_OC4_SetConfig+0xc4>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d00b      	beq.n	8007d5c <TIM_OC4_SetConfig+0x84>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a16      	ldr	r2, [pc, #88]	; (8007da0 <TIM_OC4_SetConfig+0xc8>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d007      	beq.n	8007d5c <TIM_OC4_SetConfig+0x84>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a15      	ldr	r2, [pc, #84]	; (8007da4 <TIM_OC4_SetConfig+0xcc>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d003      	beq.n	8007d5c <TIM_OC4_SetConfig+0x84>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a14      	ldr	r2, [pc, #80]	; (8007da8 <TIM_OC4_SetConfig+0xd0>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d109      	bne.n	8007d70 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	019b      	lsls	r3, r3, #6
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	621a      	str	r2, [r3, #32]
}
 8007d8a:	bf00      	nop
 8007d8c:	371c      	adds	r7, #28
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	40012c00 	.word	0x40012c00
 8007d9c:	40013400 	.word	0x40013400
 8007da0:	40014000 	.word	0x40014000
 8007da4:	40014400 	.word	0x40014400
 8007da8:	40014800 	.word	0x40014800

08007dac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007df0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	041b      	lsls	r3, r3, #16
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a17      	ldr	r2, [pc, #92]	; (8007e60 <TIM_OC5_SetConfig+0xb4>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d00f      	beq.n	8007e26 <TIM_OC5_SetConfig+0x7a>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a16      	ldr	r2, [pc, #88]	; (8007e64 <TIM_OC5_SetConfig+0xb8>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d00b      	beq.n	8007e26 <TIM_OC5_SetConfig+0x7a>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a15      	ldr	r2, [pc, #84]	; (8007e68 <TIM_OC5_SetConfig+0xbc>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d007      	beq.n	8007e26 <TIM_OC5_SetConfig+0x7a>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a14      	ldr	r2, [pc, #80]	; (8007e6c <TIM_OC5_SetConfig+0xc0>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d003      	beq.n	8007e26 <TIM_OC5_SetConfig+0x7a>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a13      	ldr	r2, [pc, #76]	; (8007e70 <TIM_OC5_SetConfig+0xc4>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d109      	bne.n	8007e3a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	021b      	lsls	r3, r3, #8
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	621a      	str	r2, [r3, #32]
}
 8007e54:	bf00      	nop
 8007e56:	371c      	adds	r7, #28
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	40012c00 	.word	0x40012c00
 8007e64:	40013400 	.word	0x40013400
 8007e68:	40014000 	.word	0x40014000
 8007e6c:	40014400 	.word	0x40014400
 8007e70:	40014800 	.word	0x40014800

08007e74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
 8007e88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	021b      	lsls	r3, r3, #8
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	051b      	lsls	r3, r3, #20
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a18      	ldr	r2, [pc, #96]	; (8007f2c <TIM_OC6_SetConfig+0xb8>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d00f      	beq.n	8007ef0 <TIM_OC6_SetConfig+0x7c>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a17      	ldr	r2, [pc, #92]	; (8007f30 <TIM_OC6_SetConfig+0xbc>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d00b      	beq.n	8007ef0 <TIM_OC6_SetConfig+0x7c>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a16      	ldr	r2, [pc, #88]	; (8007f34 <TIM_OC6_SetConfig+0xc0>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d007      	beq.n	8007ef0 <TIM_OC6_SetConfig+0x7c>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a15      	ldr	r2, [pc, #84]	; (8007f38 <TIM_OC6_SetConfig+0xc4>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d003      	beq.n	8007ef0 <TIM_OC6_SetConfig+0x7c>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a14      	ldr	r2, [pc, #80]	; (8007f3c <TIM_OC6_SetConfig+0xc8>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d109      	bne.n	8007f04 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	029b      	lsls	r3, r3, #10
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	621a      	str	r2, [r3, #32]
}
 8007f1e:	bf00      	nop
 8007f20:	371c      	adds	r7, #28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	40012c00 	.word	0x40012c00
 8007f30:	40013400 	.word	0x40013400
 8007f34:	40014000 	.word	0x40014000
 8007f38:	40014400 	.word	0x40014400
 8007f3c:	40014800 	.word	0x40014800

08007f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d101      	bne.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f54:	2302      	movs	r3, #2
 8007f56:	e068      	b.n	800802a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a2e      	ldr	r2, [pc, #184]	; (8008038 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d004      	beq.n	8007f8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a2d      	ldr	r2, [pc, #180]	; (800803c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d108      	bne.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a1e      	ldr	r2, [pc, #120]	; (8008038 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d01d      	beq.n	8007ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fca:	d018      	beq.n	8007ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a1b      	ldr	r2, [pc, #108]	; (8008040 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d013      	beq.n	8007ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a1a      	ldr	r2, [pc, #104]	; (8008044 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d00e      	beq.n	8007ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a18      	ldr	r2, [pc, #96]	; (8008048 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d009      	beq.n	8007ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a13      	ldr	r2, [pc, #76]	; (800803c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d004      	beq.n	8007ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a14      	ldr	r2, [pc, #80]	; (800804c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d10c      	bne.n	8008018 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	4313      	orrs	r3, r2
 800800e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	40012c00 	.word	0x40012c00
 800803c:	40013400 	.word	0x40013400
 8008040:	40000400 	.word	0x40000400
 8008044:	40000800 	.word	0x40000800
 8008048:	40000c00 	.word	0x40000c00
 800804c:	40014000 	.word	0x40014000

08008050 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800805a:	2300      	movs	r3, #0
 800805c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008064:	2b01      	cmp	r3, #1
 8008066:	d101      	bne.n	800806c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008068:	2302      	movs	r3, #2
 800806a:	e065      	b.n	8008138 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	4313      	orrs	r3, r2
 8008080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	4313      	orrs	r3, r2
 800808e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d2:	4313      	orrs	r3, r2
 80080d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	041b      	lsls	r3, r3, #16
 80080e2:	4313      	orrs	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a16      	ldr	r2, [pc, #88]	; (8008144 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d004      	beq.n	80080fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a14      	ldr	r2, [pc, #80]	; (8008148 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d115      	bne.n	8008126 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	051b      	lsls	r3, r3, #20
 8008106:	4313      	orrs	r3, r2
 8008108:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	69db      	ldr	r3, [r3, #28]
 8008114:	4313      	orrs	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	4313      	orrs	r3, r2
 8008124:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	40012c00 	.word	0x40012c00
 8008148:	40013400 	.word	0x40013400

0800814c <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800814c:	b480      	push	{r7}
 800814e:	b08b      	sub	sp, #44	; 0x2c
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008164:	2b01      	cmp	r3, #1
 8008166:	d101      	bne.n	800816c <HAL_TIMEx_ConfigBreakInput+0x20>
 8008168:	2302      	movs	r3, #2
 800816a:	e0af      	b.n	80082cc <HAL_TIMEx_ConfigBreakInput+0x180>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	3b01      	subs	r3, #1
 800817a:	2b07      	cmp	r3, #7
 800817c:	d83a      	bhi.n	80081f4 <HAL_TIMEx_ConfigBreakInput+0xa8>
 800817e:	a201      	add	r2, pc, #4	; (adr r2, 8008184 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8008180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008184:	080081a5 	.word	0x080081a5
 8008188:	080081b9 	.word	0x080081b9
 800818c:	080081f5 	.word	0x080081f5
 8008190:	080081cd 	.word	0x080081cd
 8008194:	080081f5 	.word	0x080081f5
 8008198:	080081f5 	.word	0x080081f5
 800819c:	080081f5 	.word	0x080081f5
 80081a0:	080081e1 	.word	0x080081e1
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 80081a4:	2301      	movs	r3, #1
 80081a6:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 80081a8:	2300      	movs	r3, #0
 80081aa:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 80081ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081b0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 80081b2:	2309      	movs	r3, #9
 80081b4:	613b      	str	r3, [r7, #16]
      break;
 80081b6:	e026      	b.n	8008206 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 80081b8:	2302      	movs	r3, #2
 80081ba:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 80081bc:	2301      	movs	r3, #1
 80081be:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 80081c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081c4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 80081c6:	230a      	movs	r3, #10
 80081c8:	613b      	str	r3, [r7, #16]
      break;
 80081ca:	e01c      	b.n	8008206 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 80081cc:	2304      	movs	r3, #4
 80081ce:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 80081d0:	2302      	movs	r3, #2
 80081d2:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 80081d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081d8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 80081da:	230b      	movs	r3, #11
 80081dc:	613b      	str	r3, [r7, #16]
      break;
 80081de:	e012      	b.n	8008206 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 80081e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081e4:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 80081e6:	2308      	movs	r3, #8
 80081e8:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 80081ea:	2300      	movs	r3, #0
 80081ec:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	613b      	str	r3, [r7, #16]
      break;
 80081f2:	e008      	b.n	8008206 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	613b      	str	r3, [r7, #16]
      break;
 8008204:	bf00      	nop
    }
  }

  switch (BreakInput)
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d003      	beq.n	8008214 <HAL_TIMEx_ConfigBreakInput+0xc8>
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2b02      	cmp	r3, #2
 8008210:	d029      	beq.n	8008266 <HAL_TIMEx_ConfigBreakInput+0x11a>
 8008212:	e051      	b.n	80082b8 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800821a:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	43db      	mvns	r3, r3
 8008220:	6a3a      	ldr	r2, [r7, #32]
 8008222:	4013      	ands	r3, r2
 8008224:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	409a      	lsls	r2, r3
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	4013      	ands	r3, r2
 8008232:	6a3a      	ldr	r2, [r7, #32]
 8008234:	4313      	orrs	r3, r2
 8008236:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b08      	cmp	r3, #8
 800823e:	d00d      	beq.n	800825c <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	43db      	mvns	r3, r3
 8008244:	6a3a      	ldr	r2, [r7, #32]
 8008246:	4013      	ands	r3, r2
 8008248:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	689a      	ldr	r2, [r3, #8]
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	409a      	lsls	r2, r3
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	4013      	ands	r3, r2
 8008256:	6a3a      	ldr	r2, [r7, #32]
 8008258:	4313      	orrs	r3, r2
 800825a:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6a3a      	ldr	r2, [r7, #32]
 8008262:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8008264:	e02c      	b.n	80082c0 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800826c:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	43db      	mvns	r3, r3
 8008272:	6a3a      	ldr	r2, [r7, #32]
 8008274:	4013      	ands	r3, r2
 8008276:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	409a      	lsls	r2, r3
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	4013      	ands	r3, r2
 8008284:	6a3a      	ldr	r2, [r7, #32]
 8008286:	4313      	orrs	r3, r2
 8008288:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b08      	cmp	r3, #8
 8008290:	d00d      	beq.n	80082ae <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	43db      	mvns	r3, r3
 8008296:	6a3a      	ldr	r2, [r7, #32]
 8008298:	4013      	ands	r3, r2
 800829a:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	689a      	ldr	r2, [r3, #8]
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	409a      	lsls	r2, r3
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	4013      	ands	r3, r2
 80082a8:	6a3a      	ldr	r2, [r7, #32]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6a3a      	ldr	r2, [r7, #32]
 80082b4:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80082b6:	e003      	b.n	80082c0 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80082be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	372c      	adds	r7, #44	; 0x2c
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <memset>:
 80082d8:	4402      	add	r2, r0
 80082da:	4603      	mov	r3, r0
 80082dc:	4293      	cmp	r3, r2
 80082de:	d100      	bne.n	80082e2 <memset+0xa>
 80082e0:	4770      	bx	lr
 80082e2:	f803 1b01 	strb.w	r1, [r3], #1
 80082e6:	e7f9      	b.n	80082dc <memset+0x4>

080082e8 <__libc_init_array>:
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	4d0d      	ldr	r5, [pc, #52]	; (8008320 <__libc_init_array+0x38>)
 80082ec:	4c0d      	ldr	r4, [pc, #52]	; (8008324 <__libc_init_array+0x3c>)
 80082ee:	1b64      	subs	r4, r4, r5
 80082f0:	10a4      	asrs	r4, r4, #2
 80082f2:	2600      	movs	r6, #0
 80082f4:	42a6      	cmp	r6, r4
 80082f6:	d109      	bne.n	800830c <__libc_init_array+0x24>
 80082f8:	4d0b      	ldr	r5, [pc, #44]	; (8008328 <__libc_init_array+0x40>)
 80082fa:	4c0c      	ldr	r4, [pc, #48]	; (800832c <__libc_init_array+0x44>)
 80082fc:	f000 f818 	bl	8008330 <_init>
 8008300:	1b64      	subs	r4, r4, r5
 8008302:	10a4      	asrs	r4, r4, #2
 8008304:	2600      	movs	r6, #0
 8008306:	42a6      	cmp	r6, r4
 8008308:	d105      	bne.n	8008316 <__libc_init_array+0x2e>
 800830a:	bd70      	pop	{r4, r5, r6, pc}
 800830c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008310:	4798      	blx	r3
 8008312:	3601      	adds	r6, #1
 8008314:	e7ee      	b.n	80082f4 <__libc_init_array+0xc>
 8008316:	f855 3b04 	ldr.w	r3, [r5], #4
 800831a:	4798      	blx	r3
 800831c:	3601      	adds	r6, #1
 800831e:	e7f2      	b.n	8008306 <__libc_init_array+0x1e>
 8008320:	08008398 	.word	0x08008398
 8008324:	08008398 	.word	0x08008398
 8008328:	08008398 	.word	0x08008398
 800832c:	0800839c 	.word	0x0800839c

08008330 <_init>:
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	bf00      	nop
 8008334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008336:	bc08      	pop	{r3}
 8008338:	469e      	mov	lr, r3
 800833a:	4770      	bx	lr

0800833c <_fini>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	bf00      	nop
 8008340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008342:	bc08      	pop	{r3}
 8008344:	469e      	mov	lr, r3
 8008346:	4770      	bx	lr

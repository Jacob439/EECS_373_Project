
LoRa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d34  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008ef4  08008ef4  00018ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f3c  08008f3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008f3c  08008f3c  00018f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f44  08008f44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f44  08008f44  00018f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f48  08008f48  00018f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  2000000c  08008f58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08008f58  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001427e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002852  00000000  00000000  000342fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  00036b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001054  00000000  00000000  00038050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bf8f  00000000  00000000  000390a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d25  00000000  00000000  00065033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00116bf6  00000000  00000000  0007bd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a2c  00000000  00000000  00192950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0019837c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008edc 	.word	0x08008edc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08008edc 	.word	0x08008edc

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b970 	b.w	80004f8 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	460b      	mov	r3, r1
 8000506:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 800050c:	78fb      	ldrb	r3, [r7, #3]
 800050e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000512:	b2db      	uxtb	r3, r3
 8000514:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6858      	ldr	r0, [r3, #4]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	8adb      	ldrh	r3, [r3, #22]
 800051e:	2200      	movs	r2, #0
 8000520:	4619      	mov	r1, r3
 8000522:	f003 fa9d 	bl	8003a60 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6818      	ldr	r0, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	1cf9      	adds	r1, r7, #3
 8000530:	2201      	movs	r2, #1
 8000532:	f006 fbc6 	bl	8006cc2 <HAL_SPI_Transmit>
 8000536:	4603      	mov	r3, r0
 8000538:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	f107 010f 	add.w	r1, r7, #15
 8000546:	2201      	movs	r2, #1
 8000548:	f006 fd30 	bl	8006fac <HAL_SPI_Receive>
 800054c:	4603      	mov	r3, r0
 800054e:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	6858      	ldr	r0, [r3, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	8adb      	ldrh	r3, [r3, #22]
 8000558:	2201      	movs	r2, #1
 800055a:	4619      	mov	r1, r3
 800055c:	f003 fa80 	bl	8003a60 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000560:	7bfb      	ldrb	r3, [r7, #15]
}
 8000562:	4618      	mov	r0, r3
 8000564:	3718      	adds	r7, #24
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b084      	sub	sp, #16
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	460b      	mov	r3, r1
 8000574:	70fb      	strb	r3, [r7, #3]
 8000576:	4613      	mov	r3, r2
 8000578:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800057a:	78fb      	ldrb	r3, [r7, #3]
 800057c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000580:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000582:	78bb      	ldrb	r3, [r7, #2]
 8000584:	021b      	lsls	r3, r3, #8
 8000586:	b21a      	sxth	r2, r3
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	b21b      	sxth	r3, r3
 800058c:	4313      	orrs	r3, r2
 800058e:	b21b      	sxth	r3, r3
 8000590:	b29b      	uxth	r3, r3
 8000592:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6858      	ldr	r0, [r3, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	8adb      	ldrh	r3, [r3, #22]
 800059c:	2200      	movs	r2, #0
 800059e:	4619      	mov	r1, r3
 80005a0:	f003 fa5e 	bl	8003a60 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	6818      	ldr	r0, [r3, #0]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	f107 010a 	add.w	r1, r7, #10
 80005b0:	2202      	movs	r2, #2
 80005b2:	f006 fb86 	bl	8006cc2 <HAL_SPI_Transmit>
 80005b6:	4603      	mov	r3, r0
 80005b8:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6858      	ldr	r0, [r3, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	8adb      	ldrh	r3, [r3, #22]
 80005c2:	2201      	movs	r2, #1
 80005c4:	4619      	mov	r1, r3
 80005c6:	f003 fa4b 	bl	8003a60 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <read_fifo>:
  }
}

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b088      	sub	sp, #32
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	60f8      	str	r0, [r7, #12]
 80005da:	60b9      	str	r1, [r7, #8]
 80005dc:	4611      	mov	r1, r2
 80005de:	461a      	mov	r2, r3
 80005e0:	460b      	mov	r3, r1
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	4613      	mov	r3, r2
 80005e6:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO;
 80005e8:	2300      	movs	r3, #0
 80005ea:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	6858      	ldr	r0, [r3, #4]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	8adb      	ldrh	r3, [r3, #22]
 80005f4:	2200      	movs	r2, #0
 80005f6:	4619      	mov	r1, r3
 80005f8:	f003 fa32 	bl	8003a60 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	6818      	ldr	r0, [r3, #0]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	f107 0117 	add.w	r1, r7, #23
 8000608:	2201      	movs	r2, #1
 800060a:	f006 fb5a 	bl	8006cc2 <HAL_SPI_Transmit>
 800060e:	4603      	mov	r3, r0
 8000610:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 8000612:	79bb      	ldrb	r3, [r7, #6]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d10a      	bne.n	800062e <read_fifo+0x5c>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	79fa      	ldrb	r2, [r7, #7]
 800061e:	b292      	uxth	r2, r2
 8000620:	68b9      	ldr	r1, [r7, #8]
 8000622:	4618      	mov	r0, r3
 8000624:	f007 f81c 	bl	8007660 <HAL_SPI_Receive_DMA>
 8000628:	4603      	mov	r3, r0
 800062a:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 800062c:	e012      	b.n	8000654 <read_fifo+0x82>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	6818      	ldr	r0, [r3, #0]
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	b29a      	uxth	r2, r3
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	68b9      	ldr	r1, [r7, #8]
 800063c:	f006 fcb6 	bl	8006fac <HAL_SPI_Receive>
 8000640:	4603      	mov	r3, r0
 8000642:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	6858      	ldr	r0, [r3, #4]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	8adb      	ldrh	r3, [r3, #22]
 800064c:	2201      	movs	r2, #1
 800064e:	4619      	mov	r1, r3
 8000650:	f003 fa06 	bl	8003a60 <HAL_GPIO_WritePin>
}
 8000654:	bf00      	nop
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8000668:	78fb      	ldrb	r3, [r7, #3]
 800066a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800066e:	b2db      	uxtb	r3, r3
 8000670:	461a      	mov	r2, r3
 8000672:	2101      	movs	r1, #1
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff ff78 	bl	800056a <write_register>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	2b2c      	cmp	r3, #44	; 0x2c
 8000694:	d801      	bhi.n	800069a <set_OCP+0x16>
    imax = 45;
 8000696:	232d      	movs	r3, #45	; 0x2d
 8000698:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 800069a:	78fb      	ldrb	r3, [r7, #3]
 800069c:	2bf0      	cmp	r3, #240	; 0xf0
 800069e:	d901      	bls.n	80006a4 <set_OCP+0x20>
    imax = 240;
 80006a0:	23f0      	movs	r3, #240	; 0xf0
 80006a2:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b81      	cmp	r3, #129	; 0x81
 80006a8:	d809      	bhi.n	80006be <set_OCP+0x3a>
    value = (imax - 45) / 5;
 80006aa:	78fb      	ldrb	r3, [r7, #3]
 80006ac:	3b2d      	subs	r3, #45	; 0x2d
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <set_OCP+0x68>)
 80006b0:	fb82 1203 	smull	r1, r2, r2, r3
 80006b4:	1052      	asrs	r2, r2, #1
 80006b6:	17db      	asrs	r3, r3, #31
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	73fb      	strb	r3, [r7, #15]
 80006bc:	e008      	b.n	80006d0 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 80006be:	78fb      	ldrb	r3, [r7, #3]
 80006c0:	331e      	adds	r3, #30
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <set_OCP+0x68>)
 80006c4:	fb82 1203 	smull	r1, r2, r2, r3
 80006c8:	1092      	asrs	r2, r2, #2
 80006ca:	17db      	asrs	r3, r3, #31
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	f043 0320 	orr.w	r3, r3, #32
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	461a      	mov	r2, r3
 80006da:	210b      	movs	r1, #11
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f7ff ff44 	bl	800056a <write_register>
}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	66666667 	.word	0x66666667

080006f0 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 80006f0:	b5b0      	push	{r4, r5, r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 80006f8:	211d      	movs	r1, #29
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff fefe 	bl	80004fc <read_register>
 8000700:	4603      	mov	r3, r0
 8000702:	091b      	lsrs	r3, r3, #4
 8000704:	b2db      	uxtb	r3, r3
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2200      	movs	r2, #0
 800070a:	461c      	mov	r4, r3
 800070c:	4615      	mov	r5, r2
 800070e:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8000712:	211e      	movs	r1, #30
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff fef1 	bl	80004fc <read_register>
 800071a:	4603      	mov	r3, r0
 800071c:	091b      	lsrs	r3, r3, #4
 800071e:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8000720:	2304      	movs	r3, #4
 8000722:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	2b0a      	cmp	r3, #10
 8000728:	d908      	bls.n	800073c <set_low_data_rate_optimization+0x4c>
 800072a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800072e:	1fd1      	subs	r1, r2, #7
 8000730:	430b      	orrs	r3, r1
 8000732:	d103      	bne.n	800073c <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8000734:	7ffb      	ldrb	r3, [r7, #31]
 8000736:	f043 0308 	orr.w	r3, r3, #8
 800073a:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 800073c:	7ffb      	ldrb	r3, [r7, #31]
 800073e:	461a      	mov	r2, r3
 8000740:	2126      	movs	r1, #38	; 0x26
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff ff11 	bl	800056a <write_register>
}
 8000748:	bf00      	nop
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bdb0      	pop	{r4, r5, r7, pc}

08000750 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8000758:	2100      	movs	r1, #0
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff ff7e 	bl	800065c <set_mode>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <lora_mode_receive_continuous>:

void lora_mode_receive_continuous(lora_sx1276 *lora)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	7d5b      	ldrb	r3, [r3, #21]
 8000774:	461a      	mov	r2, r3
 8000776:	210f      	movs	r1, #15
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff fef6 	bl	800056a <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 800077e:	22f0      	movs	r2, #240	; 0xf0
 8000780:	2112      	movs	r1, #18
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff fef1 	bl	800056a <write_register>

  set_mode(lora, OPMODE_RX_CONTINUOUS);
 8000788:	2105      	movs	r1, #5
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff ff66 	bl	800065c <set_mode>
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 80007a0:	2101      	movs	r1, #1
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff ff5a 	bl	800065c <set_mode>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80007b8:	211d      	movs	r1, #29
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff fe9e 	bl	80004fc <read_register>
 80007c0:	4603      	mov	r3, r0
 80007c2:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	f023 0301 	bic.w	r3, r3, #1
 80007ca:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	461a      	mov	r2, r3
 80007d0:	211d      	movs	r1, #29
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff fec9 	bl	800056a <write_register>
}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	691b      	ldr	r3, [r3, #16]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d10e      	bne.n	8000812 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	2b0f      	cmp	r3, #15
 80007f8:	d901      	bls.n	80007fe <lora_set_tx_power+0x1e>
      level = 15;
 80007fa:	230f      	movs	r3, #15
 80007fc:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80007fe:	78fb      	ldrb	r3, [r7, #3]
 8000800:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000804:	b2db      	uxtb	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	2109      	movs	r1, #9
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff fead 	bl	800056a <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8000810:	e02e      	b.n	8000870 <lora_set_tx_power+0x90>
    if (level > 20) {
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	2b14      	cmp	r3, #20
 8000816:	d901      	bls.n	800081c <lora_set_tx_power+0x3c>
      level = 20;
 8000818:	2314      	movs	r3, #20
 800081a:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d801      	bhi.n	8000826 <lora_set_tx_power+0x46>
      level = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8000826:	78fb      	ldrb	r3, [r7, #3]
 8000828:	2b11      	cmp	r3, #17
 800082a:	d90c      	bls.n	8000846 <lora_set_tx_power+0x66>
      level -= 3;
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	3b03      	subs	r3, #3
 8000830:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8000832:	2287      	movs	r2, #135	; 0x87
 8000834:	214d      	movs	r1, #77	; 0x4d
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff fe97 	bl	800056a <write_register>
      set_OCP(lora, 140);
 800083c:	218c      	movs	r1, #140	; 0x8c
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ff20 	bl	8000684 <set_OCP>
 8000844:	e008      	b.n	8000858 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8000846:	2284      	movs	r2, #132	; 0x84
 8000848:	214d      	movs	r1, #77	; 0x4d
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff fe8d 	bl	800056a <write_register>
      set_OCP(lora, 97);
 8000850:	2161      	movs	r1, #97	; 0x61
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ff16 	bl	8000684 <set_OCP>
    level -= 2;
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	3b02      	subs	r3, #2
 800085c:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 800085e:	78fb      	ldrb	r3, [r7, #3]
 8000860:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000864:	b2db      	uxtb	r3, r3
 8000866:	461a      	mov	r2, r3
 8000868:	2109      	movs	r1, #9
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff fe7d 	bl	800056a <write_register>
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8000884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000888:	f04f 0000 	mov.w	r0, #0
 800088c:	f04f 0100 	mov.w	r1, #0
 8000890:	04d9      	lsls	r1, r3, #19
 8000892:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000896:	04d0      	lsls	r0, r2, #19
 8000898:	4a19      	ldr	r2, [pc, #100]	; (8000900 <lora_set_frequency+0x88>)
 800089a:	f04f 0300 	mov.w	r3, #0
 800089e:	f7ff fcaf 	bl	8000200 <__aeabi_uldivmod>
 80008a2:	4602      	mov	r2, r0
 80008a4:	460b      	mov	r3, r1
 80008a6:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80008aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80008ae:	f04f 0200 	mov.w	r2, #0
 80008b2:	f04f 0300 	mov.w	r3, #0
 80008b6:	0c02      	lsrs	r2, r0, #16
 80008b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008bc:	0c0b      	lsrs	r3, r1, #16
 80008be:	b2d3      	uxtb	r3, r2
 80008c0:	461a      	mov	r2, r3
 80008c2:	2106      	movs	r1, #6
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f7ff fe50 	bl	800056a <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80008ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80008ce:	f04f 0200 	mov.w	r2, #0
 80008d2:	f04f 0300 	mov.w	r3, #0
 80008d6:	0a02      	lsrs	r2, r0, #8
 80008d8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80008dc:	0a0b      	lsrs	r3, r1, #8
 80008de:	b2d3      	uxtb	r3, r2
 80008e0:	461a      	mov	r2, r3
 80008e2:	2107      	movs	r1, #7
 80008e4:	68f8      	ldr	r0, [r7, #12]
 80008e6:	f7ff fe40 	bl	800056a <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80008ea:	7c3b      	ldrb	r3, [r7, #16]
 80008ec:	461a      	mov	r2, r3
 80008ee:	2108      	movs	r1, #8
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f7ff fe3a 	bl	800056a <write_register>
}
 80008f6:	bf00      	nop
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	01e84800 	.word	0x01e84800

08000904 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	2b05      	cmp	r3, #5
 8000914:	d802      	bhi.n	800091c <lora_set_spreading_factor+0x18>
    sf = 6;
 8000916:	2306      	movs	r3, #6
 8000918:	70fb      	strb	r3, [r7, #3]
 800091a:	e004      	b.n	8000926 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	2b0c      	cmp	r3, #12
 8000920:	d901      	bls.n	8000926 <lora_set_spreading_factor+0x22>
    sf = 12;
 8000922:	230c      	movs	r3, #12
 8000924:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8000926:	78fb      	ldrb	r3, [r7, #3]
 8000928:	2b06      	cmp	r3, #6
 800092a:	d10a      	bne.n	8000942 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 800092c:	22c5      	movs	r2, #197	; 0xc5
 800092e:	2131      	movs	r1, #49	; 0x31
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fe1a 	bl	800056a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8000936:	220c      	movs	r2, #12
 8000938:	2137      	movs	r1, #55	; 0x37
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff fe15 	bl	800056a <write_register>
 8000940:	e009      	b.n	8000956 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8000942:	22c3      	movs	r2, #195	; 0xc3
 8000944:	2131      	movs	r1, #49	; 0x31
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff fe0f 	bl	800056a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 800094c:	220a      	movs	r2, #10
 800094e:	2137      	movs	r1, #55	; 0x37
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff fe0a 	bl	800056a <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8000956:	211e      	movs	r1, #30
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fdcf 	bl	80004fc <read_register>
 800095e:	4603      	mov	r3, r0
 8000960:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8000962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	b25a      	sxtb	r2, r3
 800096c:	78fb      	ldrb	r3, [r7, #3]
 800096e:	011b      	lsls	r3, r3, #4
 8000970:	b25b      	sxtb	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b25b      	sxtb	r3, r3
 8000976:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	461a      	mov	r2, r3
 800097c:	211e      	movs	r1, #30
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff fdf3 	bl	800056a <write_register>

  set_low_data_rate_optimization(lora);
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff feb3 	bl	80006f0 <set_low_data_rate_optimization>
}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	460b      	mov	r3, r1
 800099c:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 800099e:	887b      	ldrh	r3, [r7, #2]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	2120      	movs	r1, #32
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff fddd 	bl	800056a <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 80009b0:	887b      	ldrh	r3, [r7, #2]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	f003 030f 	and.w	r3, r3, #15
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	461a      	mov	r2, r3
 80009bc:	2121      	movs	r1, #33	; 0x21
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff fdd3 	bl	800056a <write_register>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 80009d4:	2142      	movs	r1, #66	; 0x42
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff fd90 	bl	80004fc <read_register>
 80009dc:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b084      	sub	sp, #16
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 80009ee:	2112      	movs	r1, #18
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff fd83 	bl	80004fc <read_register>
 80009f6:	4603      	mov	r3, r0
 80009f8:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a00:	b2db      	uxtb	r3, r3
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <lora_pending_packet_length>:

uint8_t lora_pending_packet_length(lora_sx1276 *lora)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b084      	sub	sp, #16
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
  uint8_t len;

  // Query for current header mode - implicit / explicit
  uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 8000a12:	211d      	movs	r1, #29
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff fd71 	bl	80004fc <read_register>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	73bb      	strb	r3, [r7, #14]
  if (implicit) {
 8000a22:	7bbb      	ldrb	r3, [r7, #14]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d006      	beq.n	8000a36 <lora_pending_packet_length+0x2c>
    len = read_register(lora, REG_PAYLOAD_LENGTH);
 8000a28:	2122      	movs	r1, #34	; 0x22
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff fd66 	bl	80004fc <read_register>
 8000a30:	4603      	mov	r3, r0
 8000a32:	73fb      	strb	r3, [r7, #15]
 8000a34:	e005      	b.n	8000a42 <lora_pending_packet_length+0x38>
  } else {
    len = read_register(lora, REG_RX_NB_BYTES);
 8000a36:	2113      	movs	r1, #19
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff fd5f 	bl	80004fc <read_register>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	73fb      	strb	r3, [r7, #15]
  }

  return len;
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <lora_receive_packet_base>:


static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 8000a5c:	2306      	movs	r3, #6
 8000a5e:	75fb      	strb	r3, [r7, #23]
  uint8_t len = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	75bb      	strb	r3, [r7, #22]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 8000a64:	2112      	movs	r1, #18
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f7ff fd48 	bl	80004fc <read_register>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	757b      	strb	r3, [r7, #21]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8000a70:	22f0      	movs	r2, #240	; 0xf0
 8000a72:	2112      	movs	r1, #18
 8000a74:	68f8      	ldr	r0, [r7, #12]
 8000a76:	f7ff fd78 	bl	800056a <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 8000a7a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	da02      	bge.n	8000a88 <lora_receive_packet_base+0x3c>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 8000a82:	2302      	movs	r3, #2
 8000a84:	75fb      	strb	r3, [r7, #23]
    goto done;
 8000a86:	e030      	b.n	8000aea <lora_receive_packet_base+0x9e>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 8000a88:	7d7b      	ldrb	r3, [r7, #21]
 8000a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d02a      	beq.n	8000ae8 <lora_receive_packet_base+0x9c>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 8000a92:	7d7b      	ldrb	r3, [r7, #21]
 8000a94:	f003 0310 	and.w	r3, r3, #16
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <lora_receive_packet_base+0x56>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	75fb      	strb	r3, [r7, #23]
      goto done;
 8000aa0:	e023      	b.n	8000aea <lora_receive_packet_base+0x9e>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 8000aa2:	7d7b      	ldrb	r3, [r7, #21]
 8000aa4:	f003 0320 	and.w	r3, r3, #32
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d002      	beq.n	8000ab2 <lora_receive_packet_base+0x66>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	75fb      	strb	r3, [r7, #23]
      goto done;
 8000ab0:	e01b      	b.n	8000aea <lora_receive_packet_base+0x9e>
    }
    // Query for current header mode - implicit / explicit
    len = lora_pending_packet_length(lora);
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f7ff ffa9 	bl	8000a0a <lora_pending_packet_length>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	75bb      	strb	r3, [r7, #22]
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 8000abc:	2110      	movs	r1, #16
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff fd1c 	bl	80004fc <read_register>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	753b      	strb	r3, [r7, #20]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 8000ac8:	7d3b      	ldrb	r3, [r7, #20]
 8000aca:	461a      	mov	r2, r3
 8000acc:	210d      	movs	r1, #13
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f7ff fd4b 	bl	800056a <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 8000ad4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ad8:	7dba      	ldrb	r2, [r7, #22]
 8000ada:	68b9      	ldr	r1, [r7, #8]
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f7ff fd78 	bl	80005d2 <read_fifo>
    res = LORA_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	75fb      	strb	r3, [r7, #23]
 8000ae6:	e000      	b.n	8000aea <lora_receive_packet_base+0x9e>
  }

done:
 8000ae8:	bf00      	nop
  if (error) {
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <lora_receive_packet_base+0xaa>
    *error = res;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	7dfa      	ldrb	r2, [r7, #23]
 8000af4:	701a      	strb	r2, [r3, #0]
  }

  return len;
 8000af6:	7dbb      	ldrb	r3, [r7, #22]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	71fb      	strb	r3, [r7, #7]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 8000b10:	79fa      	ldrb	r2, [r7, #7]
 8000b12:	2302      	movs	r3, #2
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff ff96 	bl	8000a4c <lora_receive_packet_base>
 8000b20:	4603      	mov	r3, r0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	60f8      	str	r0, [r7, #12]
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	4613      	mov	r3, r2
 8000b38:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 8000b3e:	e00b      	b.n	8000b58 <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 8000b40:	68f8      	ldr	r0, [r7, #12]
 8000b42:	f7ff ff50 	bl	80009e6 <lora_is_packet_available>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d10a      	bne.n	8000b62 <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f001 fbb7 	bl	80022c0 <HAL_Delay>
    elapsed++;
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3301      	adds	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d3ef      	bcc.n	8000b40 <lora_receive_packet_blocking+0x16>
 8000b60:	e000      	b.n	8000b64 <lora_receive_packet_blocking+0x3a>
      break;
 8000b62:	bf00      	nop
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 8000b64:	79fa      	ldrb	r2, [r7, #7]
 8000b66:	6a3b      	ldr	r3, [r7, #32]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	68f8      	ldr	r0, [r7, #12]
 8000b6c:	f7ff ffc8 	bl	8000b00 <lora_receive_packet>
 8000b70:	4603      	mov	r3, r0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	60f8      	str	r0, [r7, #12]
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	887a      	ldrh	r2, [r7, #2]
 8000b98:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8000b9a:	6a3a      	ldr	r2, [r7, #32]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bb8:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f7ff ff06 	bl	80009cc <lora_version>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8000bc4:	7dfb      	ldrb	r3, [r7, #23]
 8000bc6:	2b12      	cmp	r3, #18
 8000bc8:	d001      	beq.n	8000bce <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	e031      	b.n	8000c32 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f7ff fdbe 	bl	8000750 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f7ff fdbb 	bl	8000750 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000bda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	f7ff fe4a 	bl	8000878 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000be4:	2107      	movs	r1, #7
 8000be6:	68f8      	ldr	r0, [r7, #12]
 8000be8:	f7ff fe8c 	bl	8000904 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000bec:	210a      	movs	r1, #10
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f7ff fecf 	bl	8000992 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f7ff fddb 	bl	80007b0 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000bfa:	210c      	movs	r1, #12
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f7ff fc7d 	bl	80004fc <read_register>
 8000c02:	4603      	mov	r3, r0
 8000c04:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000c06:	7dbb      	ldrb	r3, [r7, #22]
 8000c08:	f043 0303 	orr.w	r3, r3, #3
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	210c      	movs	r1, #12
 8000c12:	68f8      	ldr	r0, [r7, #12]
 8000c14:	f7ff fca9 	bl	800056a <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000c18:	2204      	movs	r2, #4
 8000c1a:	2126      	movs	r1, #38	; 0x26
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	f7ff fca4 	bl	800056a <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000c22:	2111      	movs	r1, #17
 8000c24:	68f8      	ldr	r0, [r7, #12]
 8000c26:	f7ff fddb 	bl	80007e0 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f7ff fdb4 	bl	8000798 <lora_mode_standby>

  return LORA_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	0000      	movs	r0, r0
 8000c3c:	0000      	movs	r0, r0
	...

08000c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b092      	sub	sp, #72	; 0x48
 8000c44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c46:	f001 fac6 	bl	80021d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4a:	f000 f84d 	bl	8000ce8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c4e:	f000 f89d 	bl	8000d8c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c52:	f000 fd4d 	bl	80016f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c56:	f000 f8cb 	bl	8000df0 <MX_ADC1_Init>
  MX_COMP1_Init();
 8000c5a:	f000 f92d 	bl	8000eb8 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000c5e:	f000 f959 	bl	8000f14 <MX_COMP2_Init>
  MX_SAI1_Init();
 8000c62:	f000 f983 	bl	8000f6c <MX_SAI1_Init>
  MX_SAI2_Init();
 8000c66:	f000 fa19 	bl	800109c <MX_SAI2_Init>
  MX_TIM1_Init();
 8000c6a:	f000 fabd 	bl	80011e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c6e:	f000 fb8b 	bl	8001388 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c72:	f000 fbed 	bl	8001450 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c76:	f000 fc51 	bl	800151c <MX_TIM4_Init>
  MX_TIM15_Init();
 8000c7a:	f000 fcb5 	bl	80015e8 <MX_TIM15_Init>
  MX_SPI2_Init();
 8000c7e:	f000 fa75 	bl	800116c <MX_SPI2_Init>
//  HAL_SPI_Transmit(&hspi2, 0x00, 0, HAL_MAX_DELAY);
//  HAL
  lora_sx1276 lora;

    // SX1276 compatible module connected to SPI1, NSS pin connected to GPIO with label LORA_NSS
    uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 8000c82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000c86:	a316      	add	r3, pc, #88	; (adr r3, 8000ce0 <main+0xa0>)
 8000c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8c:	e9cd 2300 	strd	r2, r3, [sp]
 8000c90:	2301      	movs	r3, #1
 8000c92:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <main+0x98>)
 8000c94:	4911      	ldr	r1, [pc, #68]	; (8000cdc <main+0x9c>)
 8000c96:	f7ff ff70 	bl	8000b7a <lora_init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t buffer[32];
	  lora_mode_receive_continuous(&lora);
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fd5f 	bl	8000768 <lora_mode_receive_continuous>
	  uint8_t res;
	  uint8_t len = lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 10000, &res);
 8000caa:	4639      	mov	r1, r7
 8000cac:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000cb0:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	f242 7310 	movw	r3, #10000	; 0x2710
 8000cba:	2220      	movs	r2, #32
 8000cbc:	f7ff ff35 	bl	8000b2a <lora_receive_packet_blocking>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	  if (res != LORA_OK) {
		  // Receive failed
	  }
	  buffer[len] = 0; // null terminate string to print it
 8000cc6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000cca:	3340      	adds	r3, #64	; 0x40
 8000ccc:	443b      	add	r3, r7
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f803 2c40 	strb.w	r2, [r3, #-64]
  {
 8000cd4:	e7e4      	b.n	8000ca0 <main+0x60>
 8000cd6:	bf00      	nop
 8000cd8:	48000c00 	.word	0x48000c00
 8000cdc:	200002a4 	.word	0x200002a4
 8000ce0:	36e55840 	.word	0x36e55840
 8000ce4:	00000000 	.word	0x00000000

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b096      	sub	sp, #88	; 0x58
 8000cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	2244      	movs	r2, #68	; 0x44
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f008 f8c4 	bl	8008e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d0a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d0e:	f002 fedf 	bl	8003ad0 <HAL_PWREx_ControlVoltageScaling>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d18:	f000 fe42 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d1c:	2310      	movs	r3, #16
 8000d1e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d20:	2301      	movs	r3, #1
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d28:	2360      	movs	r3, #96	; 0x60
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d30:	2301      	movs	r3, #1
 8000d32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000d38:	2310      	movs	r3, #16
 8000d3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d40:	2302      	movs	r3, #2
 8000d42:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d44:	2302      	movs	r3, #2
 8000d46:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 ff73 	bl	8003c38 <HAL_RCC_OscConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000d58:	f000 fe22 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d60:	2303      	movs	r3, #3
 8000d62:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d70:	463b      	mov	r3, r7
 8000d72:	2101      	movs	r1, #1
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 fb79 	bl	800446c <HAL_RCC_ClockConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d80:	f000 fe0e 	bl	80019a0 <Error_Handler>
  }
}
 8000d84:	bf00      	nop
 8000d86:	3758      	adds	r7, #88	; 0x58
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b0a6      	sub	sp, #152	; 0x98
 8000d90:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2294      	movs	r2, #148	; 0x94
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f008 f873 	bl	8008e84 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8000d9e:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8000da2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000dac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000db4:	2301      	movs	r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000dbc:	2318      	movs	r3, #24
 8000dbe:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <PeriphCommonClock_Config+0x60>)
 8000dce:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 fe08 	bl	80049e8 <HAL_RCCEx_PeriphCLKConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000dde:	f000 fddf 	bl	80019a0 <Error_Handler>
  }
}
 8000de2:	bf00      	nop
 8000de4:	3798      	adds	r7, #152	; 0x98
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	01010000 	.word	0x01010000

08000df0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000df6:	463b      	mov	r3, r7
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e06:	4b29      	ldr	r3, [pc, #164]	; (8000eac <MX_ADC1_Init+0xbc>)
 8000e08:	4a29      	ldr	r2, [pc, #164]	; (8000eb0 <MX_ADC1_Init+0xc0>)
 8000e0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e0c:	4b27      	ldr	r3, [pc, #156]	; (8000eac <MX_ADC1_Init+0xbc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e12:	4b26      	ldr	r3, [pc, #152]	; (8000eac <MX_ADC1_Init+0xbc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e18:	4b24      	ldr	r3, [pc, #144]	; (8000eac <MX_ADC1_Init+0xbc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <MX_ADC1_Init+0xbc>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e24:	4b21      	ldr	r3, [pc, #132]	; (8000eac <MX_ADC1_Init+0xbc>)
 8000e26:	2204      	movs	r2, #4
 8000e28:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <MX_ADC1_Init+0xbc>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e30:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <MX_ADC1_Init+0xbc>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e36:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <MX_ADC1_Init+0xbc>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <MX_ADC1_Init+0xbc>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <MX_ADC1_Init+0xbc>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <MX_ADC1_Init+0xbc>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <MX_ADC1_Init+0xbc>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_ADC1_Init+0xbc>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <MX_ADC1_Init+0xbc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e66:	4811      	ldr	r0, [pc, #68]	; (8000eac <MX_ADC1_Init+0xbc>)
 8000e68:	f001 fbee 	bl	8002648 <HAL_ADC_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000e72:	f000 fd95 	bl	80019a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_ADC1_Init+0xc4>)
 8000e78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e82:	237f      	movs	r3, #127	; 0x7f
 8000e84:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e86:	2304      	movs	r3, #4
 8000e88:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4619      	mov	r1, r3
 8000e92:	4806      	ldr	r0, [pc, #24]	; (8000eac <MX_ADC1_Init+0xbc>)
 8000e94:	f001 fd1e 	bl	80028d4 <HAL_ADC_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e9e:	f000 fd7f 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000028 	.word	0x20000028
 8000eb0:	50040000 	.word	0x50040000
 8000eb4:	04300002 	.word	0x04300002

08000eb8 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_COMP1_Init+0x50>)
 8000ebe:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <MX_COMP1_Init+0x54>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <MX_COMP1_Init+0x50>)
 8000ec4:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <MX_COMP1_Init+0x58>)
 8000ec6:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_COMP1_Init+0x50>)
 8000eca:	2280      	movs	r2, #128	; 0x80
 8000ecc:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <MX_COMP1_Init+0x50>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_COMP1_Init+0x50>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <MX_COMP1_Init+0x50>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <MX_COMP1_Init+0x50>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <MX_COMP1_Init+0x50>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_COMP1_Init+0x50>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <MX_COMP1_Init+0x50>)
 8000ef4:	f002 f992 	bl	800321c <HAL_COMP_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8000efe:	f000 fd4f 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000090 	.word	0x20000090
 8000f0c:	40010200 	.word	0x40010200
 8000f10:	00800030 	.word	0x00800030

08000f14 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_COMP2_Init+0x50>)
 8000f1a:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <MX_COMP2_Init+0x54>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_COMP2_Init+0x50>)
 8000f20:	2270      	movs	r2, #112	; 0x70
 8000f22:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_COMP2_Init+0x50>)
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_COMP2_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_COMP2_Init+0x50>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_COMP2_Init+0x50>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_COMP2_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_COMP2_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_COMP2_Init+0x50>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_COMP2_Init+0x50>)
 8000f50:	f002 f964 	bl	800321c <HAL_COMP_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8000f5a:	f000 fd21 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200000bc 	.word	0x200000bc
 8000f68:	40010204 	.word	0x40010204

08000f6c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000f70:	4b45      	ldr	r3, [pc, #276]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000f72:	4a46      	ldr	r2, [pc, #280]	; (800108c <MX_SAI1_Init+0x120>)
 8000f74:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f76:	4b44      	ldr	r3, [pc, #272]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f7c:	4b42      	ldr	r3, [pc, #264]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000f82:	4b41      	ldr	r3, [pc, #260]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000f84:	2240      	movs	r2, #64	; 0x40
 8000f86:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f88:	4b3f      	ldr	r3, [pc, #252]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f8e:	4b3e      	ldr	r3, [pc, #248]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f94:	4b3c      	ldr	r3, [pc, #240]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f9a:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000fa0:	4b39      	ldr	r3, [pc, #228]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000fa6:	4b38      	ldr	r3, [pc, #224]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000fac:	4b36      	ldr	r3, [pc, #216]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000fb2:	4b35      	ldr	r3, [pc, #212]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000fb4:	4a36      	ldr	r2, [pc, #216]	; (8001090 <MX_SAI1_Init+0x124>)
 8000fb6:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000fb8:	4b33      	ldr	r3, [pc, #204]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000fbe:	4b32      	ldr	r3, [pc, #200]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000fc4:	4b30      	ldr	r3, [pc, #192]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000fca:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000fde:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000fe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000fe6:	4b28      	ldr	r3, [pc, #160]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000fe8:	2208      	movs	r2, #8
 8000fea:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000fec:	4b26      	ldr	r3, [pc, #152]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <MX_SAI1_Init+0x11c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <MX_SAI1_Init+0x11c>)
 8001000:	2200      	movs	r2, #0
 8001002:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <MX_SAI1_Init+0x11c>)
 8001006:	2200      	movs	r2, #0
 8001008:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800100a:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <MX_SAI1_Init+0x11c>)
 800100c:	2200      	movs	r2, #0
 800100e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001010:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <MX_SAI1_Init+0x11c>)
 8001012:	2201      	movs	r2, #1
 8001014:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001016:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <MX_SAI1_Init+0x11c>)
 8001018:	2200      	movs	r2, #0
 800101a:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800101c:	481a      	ldr	r0, [pc, #104]	; (8001088 <MX_SAI1_Init+0x11c>)
 800101e:	f005 fa61 	bl	80064e4 <HAL_SAI_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8001028:	f000 fcba 	bl	80019a0 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_SAI1_Init+0x128>)
 800102e:	4a1a      	ldr	r2, [pc, #104]	; (8001098 <MX_SAI1_Init+0x12c>)
 8001030:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_SAI1_Init+0x128>)
 8001034:	2200      	movs	r2, #0
 8001036:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_SAI1_Init+0x128>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_SAI1_Init+0x128>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <MX_SAI1_Init+0x128>)
 8001046:	2200      	movs	r2, #0
 8001048:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_SAI1_Init+0x128>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_SAI1_Init+0x128>)
 8001052:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <MX_SAI1_Init+0x124>)
 8001054:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_SAI1_Init+0x128>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <MX_SAI1_Init+0x128>)
 800105e:	2200      	movs	r2, #0
 8001060:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_SAI1_Init+0x128>)
 8001064:	2200      	movs	r2, #0
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <MX_SAI1_Init+0x128>)
 800106a:	2200      	movs	r2, #0
 800106c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800106e:	2302      	movs	r3, #2
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	4807      	ldr	r0, [pc, #28]	; (8001094 <MX_SAI1_Init+0x128>)
 8001076:	f005 fa03 	bl	8006480 <HAL_SAI_InitProtocol>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8001080:	f000 fc8e 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200000e8 	.word	0x200000e8
 800108c:	40015424 	.word	0x40015424
 8001090:	0002ee00 	.word	0x0002ee00
 8001094:	2000017c 	.word	0x2000017c
 8001098:	40015404 	.word	0x40015404

0800109c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80010a0:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <MX_SAI2_Init+0xc4>)
 80010a2:	4a30      	ldr	r2, [pc, #192]	; (8001164 <MX_SAI2_Init+0xc8>)
 80010a4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80010a6:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <MX_SAI2_Init+0xc4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80010ac:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <MX_SAI2_Init+0xc4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80010b2:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <MX_SAI2_Init+0xc4>)
 80010b4:	2240      	movs	r2, #64	; 0x40
 80010b6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80010b8:	4b29      	ldr	r3, [pc, #164]	; (8001160 <MX_SAI2_Init+0xc4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80010be:	4b28      	ldr	r3, [pc, #160]	; (8001160 <MX_SAI2_Init+0xc4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80010c4:	4b26      	ldr	r3, [pc, #152]	; (8001160 <MX_SAI2_Init+0xc4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <MX_SAI2_Init+0xc4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010d0:	4b23      	ldr	r3, [pc, #140]	; (8001160 <MX_SAI2_Init+0xc4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80010d6:	4b22      	ldr	r3, [pc, #136]	; (8001160 <MX_SAI2_Init+0xc4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010dc:	4b20      	ldr	r3, [pc, #128]	; (8001160 <MX_SAI2_Init+0xc4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <MX_SAI2_Init+0xc4>)
 80010e4:	4a20      	ldr	r2, [pc, #128]	; (8001168 <MX_SAI2_Init+0xcc>)
 80010e6:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_SAI2_Init+0xc4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010ee:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <MX_SAI2_Init+0xc4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_SAI2_Init+0xc4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MX_SAI2_Init+0xc4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_SAI2_Init+0xc4>)
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <MX_SAI2_Init+0xc4>)
 800110a:	2200      	movs	r2, #0
 800110c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_SAI2_Init+0xc4>)
 8001110:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001114:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_SAI2_Init+0xc4>)
 8001118:	2208      	movs	r2, #8
 800111a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <MX_SAI2_Init+0xc4>)
 800111e:	2201      	movs	r2, #1
 8001120:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_SAI2_Init+0xc4>)
 8001124:	2200      	movs	r2, #0
 8001126:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <MX_SAI2_Init+0xc4>)
 800112a:	2200      	movs	r2, #0
 800112c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_SAI2_Init+0xc4>)
 8001130:	2200      	movs	r2, #0
 8001132:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <MX_SAI2_Init+0xc4>)
 8001136:	2200      	movs	r2, #0
 8001138:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_SAI2_Init+0xc4>)
 800113c:	2200      	movs	r2, #0
 800113e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <MX_SAI2_Init+0xc4>)
 8001142:	2201      	movs	r2, #1
 8001144:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_SAI2_Init+0xc4>)
 8001148:	2200      	movs	r2, #0
 800114a:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_SAI2_Init+0xc4>)
 800114e:	f005 f9c9 	bl	80064e4 <HAL_SAI_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8001158:	f000 fc22 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000210 	.word	0x20000210
 8001164:	40015804 	.word	0x40015804
 8001168:	0002ee00 	.word	0x0002ee00

0800116c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <MX_SPI2_Init+0x74>)
 8001172:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <MX_SPI2_Init+0x78>)
 8001174:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_SPI2_Init+0x74>)
 8001178:	f44f 7282 	mov.w	r2, #260	; 0x104
 800117c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_SPI2_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_SPI2_Init+0x74>)
 8001186:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800118a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_SPI2_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <MX_SPI2_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_SPI2_Init+0x74>)
 800119a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_SPI2_Init+0x74>)
 80011a2:	2218      	movs	r2, #24
 80011a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_SPI2_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_SPI2_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_SPI2_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_SPI2_Init+0x74>)
 80011ba:	2207      	movs	r2, #7
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_SPI2_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_SPI2_Init+0x74>)
 80011c6:	2208      	movs	r2, #8
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_SPI2_Init+0x74>)
 80011cc:	f005 fcd6 	bl	8006b7c <HAL_SPI_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80011d6:	f000 fbe3 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200002a4 	.word	0x200002a4
 80011e4:	40003800 	.word	0x40003800

080011e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b098      	sub	sp, #96	; 0x60
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80011fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001206:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
 8001216:	615a      	str	r2, [r3, #20]
 8001218:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800121a:	463b      	mov	r3, r7
 800121c:	222c      	movs	r2, #44	; 0x2c
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f007 fe2f 	bl	8008e84 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001226:	4b56      	ldr	r3, [pc, #344]	; (8001380 <MX_TIM1_Init+0x198>)
 8001228:	4a56      	ldr	r2, [pc, #344]	; (8001384 <MX_TIM1_Init+0x19c>)
 800122a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800122c:	4b54      	ldr	r3, [pc, #336]	; (8001380 <MX_TIM1_Init+0x198>)
 800122e:	2200      	movs	r2, #0
 8001230:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001232:	4b53      	ldr	r3, [pc, #332]	; (8001380 <MX_TIM1_Init+0x198>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001238:	4b51      	ldr	r3, [pc, #324]	; (8001380 <MX_TIM1_Init+0x198>)
 800123a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800123e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001240:	4b4f      	ldr	r3, [pc, #316]	; (8001380 <MX_TIM1_Init+0x198>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001246:	4b4e      	ldr	r3, [pc, #312]	; (8001380 <MX_TIM1_Init+0x198>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124c:	4b4c      	ldr	r3, [pc, #304]	; (8001380 <MX_TIM1_Init+0x198>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001252:	484b      	ldr	r0, [pc, #300]	; (8001380 <MX_TIM1_Init+0x198>)
 8001254:	f006 ff6e 	bl	8008134 <HAL_TIM_PWM_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800125e:	f000 fb9f 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001266:	2300      	movs	r3, #0
 8001268:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800126e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001272:	4619      	mov	r1, r3
 8001274:	4842      	ldr	r0, [pc, #264]	; (8001380 <MX_TIM1_Init+0x198>)
 8001276:	f007 fc39 	bl	8008aec <HAL_TIMEx_MasterConfigSynchronization>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001280:	f000 fb8e 	bl	80019a0 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001284:	2301      	movs	r3, #1
 8001286:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001288:	2301      	movs	r3, #1
 800128a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800128c:	2300      	movs	r3, #0
 800128e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001290:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001294:	461a      	mov	r2, r3
 8001296:	2101      	movs	r1, #1
 8001298:	4839      	ldr	r0, [pc, #228]	; (8001380 <MX_TIM1_Init+0x198>)
 800129a:	f007 fd2d 	bl	8008cf8 <HAL_TIMEx_ConfigBreakInput>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80012a4:	f000 fb7c 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80012a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012ac:	461a      	mov	r2, r3
 80012ae:	2102      	movs	r1, #2
 80012b0:	4833      	ldr	r0, [pc, #204]	; (8001380 <MX_TIM1_Init+0x198>)
 80012b2:	f007 fd21 	bl	8008cf8 <HAL_TIMEx_ConfigBreakInput>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80012bc:	f000 fb70 	bl	80019a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c0:	2360      	movs	r3, #96	; 0x60
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c8:	2300      	movs	r3, #0
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e0:	2200      	movs	r2, #0
 80012e2:	4619      	mov	r1, r3
 80012e4:	4826      	ldr	r0, [pc, #152]	; (8001380 <MX_TIM1_Init+0x198>)
 80012e6:	f006 ff7d 	bl	80081e4 <HAL_TIM_PWM_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80012f0:	f000 fb56 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f8:	2204      	movs	r2, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4820      	ldr	r0, [pc, #128]	; (8001380 <MX_TIM1_Init+0x198>)
 80012fe:	f006 ff71 	bl	80081e4 <HAL_TIM_PWM_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8001308:	f000 fb4a 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800130c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001310:	2208      	movs	r2, #8
 8001312:	4619      	mov	r1, r3
 8001314:	481a      	ldr	r0, [pc, #104]	; (8001380 <MX_TIM1_Init+0x198>)
 8001316:	f006 ff65 	bl	80081e4 <HAL_TIM_PWM_ConfigChannel>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001320:	f000 fb3e 	bl	80019a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001324:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001328:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800132a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800132e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800133e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001342:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800134c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800134e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001352:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800135c:	463b      	mov	r3, r7
 800135e:	4619      	mov	r1, r3
 8001360:	4807      	ldr	r0, [pc, #28]	; (8001380 <MX_TIM1_Init+0x198>)
 8001362:	f007 fc4b 	bl	8008bfc <HAL_TIMEx_ConfigBreakDeadTime>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 800136c:	f000 fb18 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <MX_TIM1_Init+0x198>)
 8001372:	f000 fd07 	bl	8001d84 <HAL_TIM_MspPostInit>

}
 8001376:	bf00      	nop
 8001378:	3760      	adds	r7, #96	; 0x60
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000308 	.word	0x20000308
 8001384:	40012c00 	.word	0x40012c00

08001388 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800139a:	463b      	mov	r3, r7
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
 80013a8:	615a      	str	r2, [r3, #20]
 80013aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <MX_TIM2_Init+0xc4>)
 80013ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013b4:	4b25      	ldr	r3, [pc, #148]	; (800144c <MX_TIM2_Init+0xc4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b24      	ldr	r3, [pc, #144]	; (800144c <MX_TIM2_Init+0xc4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <MX_TIM2_Init+0xc4>)
 80013c2:	f04f 32ff 	mov.w	r2, #4294967295
 80013c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c8:	4b20      	ldr	r3, [pc, #128]	; (800144c <MX_TIM2_Init+0xc4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <MX_TIM2_Init+0xc4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013d4:	481d      	ldr	r0, [pc, #116]	; (800144c <MX_TIM2_Init+0xc4>)
 80013d6:	f006 fead 	bl	8008134 <HAL_TIM_PWM_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80013e0:	f000 fade 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	4816      	ldr	r0, [pc, #88]	; (800144c <MX_TIM2_Init+0xc4>)
 80013f4:	f007 fb7a 	bl	8008aec <HAL_TIMEx_MasterConfigSynchronization>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80013fe:	f000 facf 	bl	80019a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001402:	2360      	movs	r3, #96	; 0x60
 8001404:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	480c      	ldr	r0, [pc, #48]	; (800144c <MX_TIM2_Init+0xc4>)
 800141a:	f006 fee3 	bl	80081e4 <HAL_TIM_PWM_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001424:	f000 fabc 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	2208      	movs	r2, #8
 800142c:	4619      	mov	r1, r3
 800142e:	4807      	ldr	r0, [pc, #28]	; (800144c <MX_TIM2_Init+0xc4>)
 8001430:	f006 fed8 	bl	80081e4 <HAL_TIM_PWM_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800143a:	f000 fab1 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800143e:	4803      	ldr	r0, [pc, #12]	; (800144c <MX_TIM2_Init+0xc4>)
 8001440:	f000 fca0 	bl	8001d84 <HAL_TIM_MspPostInit>

}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	; 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000354 	.word	0x20000354

08001450 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001462:	463b      	mov	r3, r7
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	615a      	str	r2, [r3, #20]
 8001472:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001474:	4b27      	ldr	r3, [pc, #156]	; (8001514 <MX_TIM3_Init+0xc4>)
 8001476:	4a28      	ldr	r2, [pc, #160]	; (8001518 <MX_TIM3_Init+0xc8>)
 8001478:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800147a:	4b26      	ldr	r3, [pc, #152]	; (8001514 <MX_TIM3_Init+0xc4>)
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001480:	4b24      	ldr	r3, [pc, #144]	; (8001514 <MX_TIM3_Init+0xc4>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <MX_TIM3_Init+0xc4>)
 8001488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800148c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148e:	4b21      	ldr	r3, [pc, #132]	; (8001514 <MX_TIM3_Init+0xc4>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <MX_TIM3_Init+0xc4>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800149a:	481e      	ldr	r0, [pc, #120]	; (8001514 <MX_TIM3_Init+0xc4>)
 800149c:	f006 fe4a 	bl	8008134 <HAL_TIM_PWM_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80014a6:	f000 fa7b 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	4619      	mov	r1, r3
 80014b8:	4816      	ldr	r0, [pc, #88]	; (8001514 <MX_TIM3_Init+0xc4>)
 80014ba:	f007 fb17 	bl	8008aec <HAL_TIMEx_MasterConfigSynchronization>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80014c4:	f000 fa6c 	bl	80019a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c8:	2360      	movs	r3, #96	; 0x60
 80014ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014d8:	463b      	mov	r3, r7
 80014da:	2204      	movs	r2, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	480d      	ldr	r0, [pc, #52]	; (8001514 <MX_TIM3_Init+0xc4>)
 80014e0:	f006 fe80 	bl	80081e4 <HAL_TIM_PWM_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80014ea:	f000 fa59 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ee:	463b      	mov	r3, r7
 80014f0:	2208      	movs	r2, #8
 80014f2:	4619      	mov	r1, r3
 80014f4:	4807      	ldr	r0, [pc, #28]	; (8001514 <MX_TIM3_Init+0xc4>)
 80014f6:	f006 fe75 	bl	80081e4 <HAL_TIM_PWM_ConfigChannel>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001500:	f000 fa4e 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <MX_TIM3_Init+0xc4>)
 8001506:	f000 fc3d 	bl	8001d84 <HAL_TIM_MspPostInit>

}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	; 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200003a0 	.word	0x200003a0
 8001518:	40000400 	.word	0x40000400

0800151c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152e:	463b      	mov	r3, r7
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
 800153c:	615a      	str	r2, [r3, #20]
 800153e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001540:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <MX_TIM4_Init+0xc4>)
 8001542:	4a28      	ldr	r2, [pc, #160]	; (80015e4 <MX_TIM4_Init+0xc8>)
 8001544:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <MX_TIM4_Init+0xc4>)
 8001548:	2200      	movs	r2, #0
 800154a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <MX_TIM4_Init+0xc4>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <MX_TIM4_Init+0xc4>)
 8001554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001558:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <MX_TIM4_Init+0xc4>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <MX_TIM4_Init+0xc4>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001566:	481e      	ldr	r0, [pc, #120]	; (80015e0 <MX_TIM4_Init+0xc4>)
 8001568:	f006 fde4 	bl	8008134 <HAL_TIM_PWM_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001572:	f000 fa15 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	4816      	ldr	r0, [pc, #88]	; (80015e0 <MX_TIM4_Init+0xc4>)
 8001586:	f007 fab1 	bl	8008aec <HAL_TIMEx_MasterConfigSynchronization>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001590:	f000 fa06 	bl	80019a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001594:	2360      	movs	r3, #96	; 0x60
 8001596:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015a4:	463b      	mov	r3, r7
 80015a6:	2208      	movs	r2, #8
 80015a8:	4619      	mov	r1, r3
 80015aa:	480d      	ldr	r0, [pc, #52]	; (80015e0 <MX_TIM4_Init+0xc4>)
 80015ac:	f006 fe1a 	bl	80081e4 <HAL_TIM_PWM_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80015b6:	f000 f9f3 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015ba:	463b      	mov	r3, r7
 80015bc:	220c      	movs	r2, #12
 80015be:	4619      	mov	r1, r3
 80015c0:	4807      	ldr	r0, [pc, #28]	; (80015e0 <MX_TIM4_Init+0xc4>)
 80015c2:	f006 fe0f 	bl	80081e4 <HAL_TIM_PWM_ConfigChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80015cc:	f000 f9e8 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015d0:	4803      	ldr	r0, [pc, #12]	; (80015e0 <MX_TIM4_Init+0xc4>)
 80015d2:	f000 fbd7 	bl	8001d84 <HAL_TIM_MspPostInit>

}
 80015d6:	bf00      	nop
 80015d8:	3728      	adds	r7, #40	; 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200003ec 	.word	0x200003ec
 80015e4:	40000800 	.word	0x40000800

080015e8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b096      	sub	sp, #88	; 0x58
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	615a      	str	r2, [r3, #20]
 800160c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	222c      	movs	r2, #44	; 0x2c
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f007 fc35 	bl	8008e84 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800161a:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <MX_TIM15_Init+0x100>)
 800161c:	4a33      	ldr	r2, [pc, #204]	; (80016ec <MX_TIM15_Init+0x104>)
 800161e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001620:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <MX_TIM15_Init+0x100>)
 8001622:	2200      	movs	r2, #0
 8001624:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <MX_TIM15_Init+0x100>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800162c:	4b2e      	ldr	r3, [pc, #184]	; (80016e8 <MX_TIM15_Init+0x100>)
 800162e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001632:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <MX_TIM15_Init+0x100>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800163a:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <MX_TIM15_Init+0x100>)
 800163c:	2200      	movs	r2, #0
 800163e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001640:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <MX_TIM15_Init+0x100>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001646:	4828      	ldr	r0, [pc, #160]	; (80016e8 <MX_TIM15_Init+0x100>)
 8001648:	f006 fd74 	bl	8008134 <HAL_TIM_PWM_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001652:	f000 f9a5 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800165e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001662:	4619      	mov	r1, r3
 8001664:	4820      	ldr	r0, [pc, #128]	; (80016e8 <MX_TIM15_Init+0x100>)
 8001666:	f007 fa41 	bl	8008aec <HAL_TIMEx_MasterConfigSynchronization>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001670:	f000 f996 	bl	80019a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001674:	2360      	movs	r3, #96	; 0x60
 8001676:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167c:	2300      	movs	r3, #0
 800167e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001680:	2300      	movs	r3, #0
 8001682:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001690:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001694:	2200      	movs	r2, #0
 8001696:	4619      	mov	r1, r3
 8001698:	4813      	ldr	r0, [pc, #76]	; (80016e8 <MX_TIM15_Init+0x100>)
 800169a:	f006 fda3 	bl	80081e4 <HAL_TIM_PWM_ConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80016a4:	f000 f97c 	bl	80019a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4807      	ldr	r0, [pc, #28]	; (80016e8 <MX_TIM15_Init+0x100>)
 80016cc:	f007 fa96 	bl	8008bfc <HAL_TIMEx_ConfigBreakDeadTime>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 80016d6:	f000 f963 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80016da:	4803      	ldr	r0, [pc, #12]	; (80016e8 <MX_TIM15_Init+0x100>)
 80016dc:	f000 fb52 	bl	8001d84 <HAL_TIM_MspPostInit>

}
 80016e0:	bf00      	nop
 80016e2:	3758      	adds	r7, #88	; 0x58
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000438 	.word	0x20000438
 80016ec:	40014000 	.word	0x40014000

080016f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08e      	sub	sp, #56	; 0x38
 80016f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001706:	4ba0      	ldr	r3, [pc, #640]	; (8001988 <MX_GPIO_Init+0x298>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a9f      	ldr	r2, [pc, #636]	; (8001988 <MX_GPIO_Init+0x298>)
 800170c:	f043 0310 	orr.w	r3, r3, #16
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b9d      	ldr	r3, [pc, #628]	; (8001988 <MX_GPIO_Init+0x298>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	623b      	str	r3, [r7, #32]
 800171c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	4b9a      	ldr	r3, [pc, #616]	; (8001988 <MX_GPIO_Init+0x298>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	4a99      	ldr	r2, [pc, #612]	; (8001988 <MX_GPIO_Init+0x298>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172a:	4b97      	ldr	r3, [pc, #604]	; (8001988 <MX_GPIO_Init+0x298>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001736:	4b94      	ldr	r3, [pc, #592]	; (8001988 <MX_GPIO_Init+0x298>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	4a93      	ldr	r2, [pc, #588]	; (8001988 <MX_GPIO_Init+0x298>)
 800173c:	f043 0320 	orr.w	r3, r3, #32
 8001740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001742:	4b91      	ldr	r3, [pc, #580]	; (8001988 <MX_GPIO_Init+0x298>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174e:	4b8e      	ldr	r3, [pc, #568]	; (8001988 <MX_GPIO_Init+0x298>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	4a8d      	ldr	r2, [pc, #564]	; (8001988 <MX_GPIO_Init+0x298>)
 8001754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175a:	4b8b      	ldr	r3, [pc, #556]	; (8001988 <MX_GPIO_Init+0x298>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	4b88      	ldr	r3, [pc, #544]	; (8001988 <MX_GPIO_Init+0x298>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	4a87      	ldr	r2, [pc, #540]	; (8001988 <MX_GPIO_Init+0x298>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001772:	4b85      	ldr	r3, [pc, #532]	; (8001988 <MX_GPIO_Init+0x298>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	4b82      	ldr	r3, [pc, #520]	; (8001988 <MX_GPIO_Init+0x298>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	4a81      	ldr	r2, [pc, #516]	; (8001988 <MX_GPIO_Init+0x298>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178a:	4b7f      	ldr	r3, [pc, #508]	; (8001988 <MX_GPIO_Init+0x298>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001796:	4b7c      	ldr	r3, [pc, #496]	; (8001988 <MX_GPIO_Init+0x298>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	4a7b      	ldr	r2, [pc, #492]	; (8001988 <MX_GPIO_Init+0x298>)
 800179c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a2:	4b79      	ldr	r3, [pc, #484]	; (8001988 <MX_GPIO_Init+0x298>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ae:	4b76      	ldr	r3, [pc, #472]	; (8001988 <MX_GPIO_Init+0x298>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	4a75      	ldr	r2, [pc, #468]	; (8001988 <MX_GPIO_Init+0x298>)
 80017b4:	f043 0308 	orr.w	r3, r3, #8
 80017b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ba:	4b73      	ldr	r3, [pc, #460]	; (8001988 <MX_GPIO_Init+0x298>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80017c6:	f002 fa27 	bl	8003c18 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2102      	movs	r1, #2
 80017ce:	486f      	ldr	r0, [pc, #444]	; (800198c <MX_GPIO_Init+0x29c>)
 80017d0:	f002 f946 	bl	8003a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2101      	movs	r1, #1
 80017d8:	486d      	ldr	r0, [pc, #436]	; (8001990 <MX_GPIO_Init+0x2a0>)
 80017da:	f002 f941 	bl	8003a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80017de:	2307      	movs	r3, #7
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017e2:	2312      	movs	r3, #18
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e6:	2301      	movs	r3, #1
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017ee:	2304      	movs	r3, #4
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f6:	4619      	mov	r1, r3
 80017f8:	4866      	ldr	r0, [pc, #408]	; (8001994 <MX_GPIO_Init+0x2a4>)
 80017fa:	f001 ff9f 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017fe:	23f0      	movs	r3, #240	; 0xf0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800180e:	2305      	movs	r3, #5
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001816:	4619      	mov	r1, r3
 8001818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181c:	f001 ff8e 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001820:	2302      	movs	r3, #2
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001834:	4619      	mov	r1, r3
 8001836:	4855      	ldr	r0, [pc, #340]	; (800198c <MX_GPIO_Init+0x29c>)
 8001838:	f001 ff80 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800183c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184a:	2303      	movs	r3, #3
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800184e:	2307      	movs	r3, #7
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	4619      	mov	r1, r3
 8001858:	484d      	ldr	r0, [pc, #308]	; (8001990 <MX_GPIO_Init+0x2a0>)
 800185a:	f001 ff6f 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800185e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001870:	2308      	movs	r3, #8
 8001872:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001878:	4619      	mov	r1, r3
 800187a:	4844      	ldr	r0, [pc, #272]	; (800198c <MX_GPIO_Init+0x29c>)
 800187c:	f001 ff5e 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001880:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001892:	230c      	movs	r3, #12
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189a:	4619      	mov	r1, r3
 800189c:	483e      	ldr	r0, [pc, #248]	; (8001998 <MX_GPIO_Init+0x2a8>)
 800189e:	f001 ff4d 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80018a2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018b4:	230a      	movs	r3, #10
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018bc:	4619      	mov	r1, r3
 80018be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c2:	f001 ff3b 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d8:	4619      	mov	r1, r3
 80018da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018de:	f001 ff2d 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018e2:	2301      	movs	r3, #1
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f6:	4619      	mov	r1, r3
 80018f8:	4825      	ldr	r0, [pc, #148]	; (8001990 <MX_GPIO_Init+0x2a0>)
 80018fa:	f001 ff1f 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018fe:	2304      	movs	r3, #4
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800190e:	230c      	movs	r3, #12
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001916:	4619      	mov	r1, r3
 8001918:	481d      	ldr	r0, [pc, #116]	; (8001990 <MX_GPIO_Init+0x2a0>)
 800191a:	f001 ff0f 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800191e:	2360      	movs	r3, #96	; 0x60
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800192e:	2307      	movs	r3, #7
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001936:	4619      	mov	r1, r3
 8001938:	4815      	ldr	r0, [pc, #84]	; (8001990 <MX_GPIO_Init+0x2a0>)
 800193a:	f001 feff 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800193e:	2338      	movs	r3, #56	; 0x38
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800194e:	2306      	movs	r3, #6
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001956:	4619      	mov	r1, r3
 8001958:	4810      	ldr	r0, [pc, #64]	; (800199c <MX_GPIO_Init+0x2ac>)
 800195a:	f001 feef 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800195e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001964:	2312      	movs	r3, #18
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001968:	2301      	movs	r3, #1
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001970:	2304      	movs	r3, #4
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001978:	4619      	mov	r1, r3
 800197a:	4808      	ldr	r0, [pc, #32]	; (800199c <MX_GPIO_Init+0x2ac>)
 800197c:	f001 fede 	bl	800373c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001980:	bf00      	nop
 8001982:	3738      	adds	r7, #56	; 0x38
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40021000 	.word	0x40021000
 800198c:	48001800 	.word	0x48001800
 8001990:	48000c00 	.word	0x48000c00
 8001994:	48001400 	.word	0x48001400
 8001998:	48000800 	.word	0x48000800
 800199c:	48000400 	.word	0x48000400

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>
	...

080019ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <HAL_MspInit+0x44>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b6:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <HAL_MspInit+0x44>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6613      	str	r3, [r2, #96]	; 0x60
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <HAL_MspInit+0x44>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_MspInit+0x44>)
 80019cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_MspInit+0x44>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	6593      	str	r3, [r2, #88]	; 0x58
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_MspInit+0x44>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000

080019f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08c      	sub	sp, #48	; 0x30
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a2d      	ldr	r2, [pc, #180]	; (8001ac8 <HAL_ADC_MspInit+0xd4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d154      	bne.n	8001ac0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a16:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <HAL_ADC_MspInit+0xd8>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	4a2c      	ldr	r2, [pc, #176]	; (8001acc <HAL_ADC_MspInit+0xd8>)
 8001a1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a22:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <HAL_ADC_MspInit+0xd8>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2e:	4b27      	ldr	r3, [pc, #156]	; (8001acc <HAL_ADC_MspInit+0xd8>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	4a26      	ldr	r2, [pc, #152]	; (8001acc <HAL_ADC_MspInit+0xd8>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_ADC_MspInit+0xd8>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_ADC_MspInit+0xd8>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	4a20      	ldr	r2, [pc, #128]	; (8001acc <HAL_ADC_MspInit+0xd8>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a52:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <HAL_ADC_MspInit+0xd8>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_ADC_MspInit+0xd8>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	4a1a      	ldr	r2, [pc, #104]	; (8001acc <HAL_ADC_MspInit+0xd8>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <HAL_ADC_MspInit+0xd8>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a76:	233f      	movs	r3, #63	; 0x3f
 8001a78:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a7a:	230b      	movs	r3, #11
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a82:	f107 031c 	add.w	r3, r7, #28
 8001a86:	4619      	mov	r1, r3
 8001a88:	4811      	ldr	r0, [pc, #68]	; (8001ad0 <HAL_ADC_MspInit+0xdc>)
 8001a8a:	f001 fe57 	bl	800373c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001a8e:	230a      	movs	r3, #10
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a92:	230b      	movs	r3, #11
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa4:	f001 fe4a 	bl	800373c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001aac:	230b      	movs	r3, #11
 8001aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab4:	f107 031c 	add.w	r3, r7, #28
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <HAL_ADC_MspInit+0xe0>)
 8001abc:	f001 fe3e 	bl	800373c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ac0:	bf00      	nop
 8001ac2:	3730      	adds	r7, #48	; 0x30
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	50040000 	.word	0x50040000
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	48000800 	.word	0x48000800
 8001ad4:	48000400 	.word	0x48000400

08001ad8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1e      	ldr	r2, [pc, #120]	; (8001b70 <HAL_COMP_MspInit+0x98>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d118      	bne.n	8001b2c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afa:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <HAL_COMP_MspInit+0x9c>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	4a1d      	ldr	r2, [pc, #116]	; (8001b74 <HAL_COMP_MspInit+0x9c>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b06:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <HAL_COMP_MspInit+0x9c>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b12:	2304      	movs	r3, #4
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b16:	2303      	movs	r3, #3
 8001b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4814      	ldr	r0, [pc, #80]	; (8001b78 <HAL_COMP_MspInit+0xa0>)
 8001b26:	f001 fe09 	bl	800373c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8001b2a:	e01c      	b.n	8001b66 <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <HAL_COMP_MspInit+0xa4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d117      	bne.n	8001b66 <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <HAL_COMP_MspInit+0x9c>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <HAL_COMP_MspInit+0x9c>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <HAL_COMP_MspInit+0x9c>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b4e:	23c0      	movs	r3, #192	; 0xc0
 8001b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b52:	2303      	movs	r3, #3
 8001b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	; (8001b78 <HAL_COMP_MspInit+0xa0>)
 8001b62:	f001 fdeb 	bl	800373c <HAL_GPIO_Init>
}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	; 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40010200 	.word	0x40010200
 8001b74:	40021000 	.word	0x40021000
 8001b78:	48000400 	.word	0x48000400
 8001b7c:	40010204 	.word	0x40010204

08001b80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <HAL_SPI_MspInit+0x7c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d127      	bne.n	8001bf2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ba2:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <HAL_SPI_MspInit+0x80>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	4a16      	ldr	r2, [pc, #88]	; (8001c00 <HAL_SPI_MspInit+0x80>)
 8001ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bac:	6593      	str	r3, [r2, #88]	; 0x58
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <HAL_SPI_MspInit+0x80>)
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_SPI_MspInit+0x80>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbe:	4a10      	ldr	r2, [pc, #64]	; (8001c00 <HAL_SPI_MspInit+0x80>)
 8001bc0:	f043 0308 	orr.w	r3, r3, #8
 8001bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_SPI_MspInit+0x80>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8001bd2:	231a      	movs	r3, #26
 8001bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001be2:	2305      	movs	r3, #5
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	4805      	ldr	r0, [pc, #20]	; (8001c04 <HAL_SPI_MspInit+0x84>)
 8001bee:	f001 fda5 	bl	800373c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001bf2:	bf00      	nop
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40003800 	.word	0x40003800
 8001c00:	40021000 	.word	0x40021000
 8001c04:	48000c00 	.word	0x48000c00

08001c08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08e      	sub	sp, #56	; 0x38
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a51      	ldr	r2, [pc, #324]	; (8001d6c <HAL_TIM_PWM_MspInit+0x164>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d139      	bne.n	8001c9e <HAL_TIM_PWM_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c2a:	4b51      	ldr	r3, [pc, #324]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2e:	4a50      	ldr	r2, [pc, #320]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001c30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c34:	6613      	str	r3, [r2, #96]	; 0x60
 8001c36:	4b4e      	ldr	r3, [pc, #312]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c3e:	623b      	str	r3, [r7, #32]
 8001c40:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c42:	4b4b      	ldr	r3, [pc, #300]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	4a4a      	ldr	r2, [pc, #296]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001c48:	f043 0310 	orr.w	r3, r3, #16
 8001c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4e:	4b48      	ldr	r3, [pc, #288]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c72:	4619      	mov	r1, r3
 8001c74:	483f      	ldr	r0, [pc, #252]	; (8001d74 <HAL_TIM_PWM_MspInit+0x16c>)
 8001c76:	f001 fd61 	bl	800373c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c7a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c94:	4619      	mov	r1, r3
 8001c96:	4837      	ldr	r0, [pc, #220]	; (8001d74 <HAL_TIM_PWM_MspInit+0x16c>)
 8001c98:	f001 fd50 	bl	800373c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001c9c:	e062      	b.n	8001d64 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM2)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca6:	d10c      	bne.n	8001cc2 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ca8:	4b31      	ldr	r3, [pc, #196]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	4a30      	ldr	r2, [pc, #192]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb4:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
}
 8001cc0:	e050      	b.n	8001d64 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM3)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a2c      	ldr	r2, [pc, #176]	; (8001d78 <HAL_TIM_PWM_MspInit+0x170>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d10c      	bne.n	8001ce6 <HAL_TIM_PWM_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ccc:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd0:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001cd2:	f043 0302 	orr.w	r3, r3, #2
 8001cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd8:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	697b      	ldr	r3, [r7, #20]
}
 8001ce4:	e03e      	b.n	8001d64 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM4)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a24      	ldr	r2, [pc, #144]	; (8001d7c <HAL_TIM_PWM_MspInit+0x174>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d128      	bne.n	8001d42 <HAL_TIM_PWM_MspInit+0x13a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cf0:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	4a1e      	ldr	r2, [pc, #120]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001cf6:	f043 0304 	orr.w	r3, r3, #4
 8001cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8001cfc:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0c:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001d0e:	f043 0310 	orr.w	r3, r3, #16
 8001d12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d14:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d20:	2301      	movs	r3, #1
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d30:	2302      	movs	r3, #2
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	480e      	ldr	r0, [pc, #56]	; (8001d74 <HAL_TIM_PWM_MspInit+0x16c>)
 8001d3c:	f001 fcfe 	bl	800373c <HAL_GPIO_Init>
}
 8001d40:	e010      	b.n	8001d64 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM15)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <HAL_TIM_PWM_MspInit+0x178>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d10b      	bne.n	8001d64 <HAL_TIM_PWM_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d50:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d56:	6613      	str	r3, [r2, #96]	; 0x60
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_TIM_PWM_MspInit+0x168>)
 8001d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
}
 8001d64:	bf00      	nop
 8001d66:	3738      	adds	r7, #56	; 0x38
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40012c00 	.word	0x40012c00
 8001d70:	40021000 	.word	0x40021000
 8001d74:	48001000 	.word	0x48001000
 8001d78:	40000400 	.word	0x40000400
 8001d7c:	40000800 	.word	0x40000800
 8001d80:	40014000 	.word	0x40014000

08001d84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08e      	sub	sp, #56	; 0x38
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a73      	ldr	r2, [pc, #460]	; (8001f70 <HAL_TIM_MspPostInit+0x1ec>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d11d      	bne.n	8001de2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001da6:	4b73      	ldr	r3, [pc, #460]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	4a72      	ldr	r2, [pc, #456]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001dac:	f043 0310 	orr.w	r3, r3, #16
 8001db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db2:	4b70      	ldr	r3, [pc, #448]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	623b      	str	r3, [r7, #32]
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001dbe:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4867      	ldr	r0, [pc, #412]	; (8001f78 <HAL_TIM_MspPostInit+0x1f4>)
 8001ddc:	f001 fcae 	bl	800373c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001de0:	e0c2      	b.n	8001f68 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dea:	d13a      	bne.n	8001e62 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dec:	4b61      	ldr	r3, [pc, #388]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	4a60      	ldr	r2, [pc, #384]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df8:	4b5e      	ldr	r3, [pc, #376]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e04:	4b5b      	ldr	r3, [pc, #364]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e08:	4a5a      	ldr	r2, [pc, #360]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001e0a:	f043 0302 	orr.w	r3, r3, #2
 8001e0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e10:	4b58      	ldr	r3, [pc, #352]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e34:	4619      	mov	r1, r3
 8001e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3a:	f001 fc7f 	bl	800373c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e50:	2301      	movs	r3, #1
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4848      	ldr	r0, [pc, #288]	; (8001f7c <HAL_TIM_MspPostInit+0x1f8>)
 8001e5c:	f001 fc6e 	bl	800373c <HAL_GPIO_Init>
}
 8001e60:	e082      	b.n	8001f68 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a46      	ldr	r2, [pc, #280]	; (8001f80 <HAL_TIM_MspPostInit+0x1fc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d138      	bne.n	8001ede <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6c:	4b41      	ldr	r3, [pc, #260]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e70:	4a40      	ldr	r2, [pc, #256]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001e72:	f043 0302 	orr.w	r3, r3, #2
 8001e76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e78:	4b3e      	ldr	r3, [pc, #248]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e84:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e88:	4a3a      	ldr	r2, [pc, #232]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e90:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eac:	2302      	movs	r3, #2
 8001eae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4831      	ldr	r0, [pc, #196]	; (8001f7c <HAL_TIM_MspPostInit+0x1f8>)
 8001eb8:	f001 fc40 	bl	800373c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	482b      	ldr	r0, [pc, #172]	; (8001f84 <HAL_TIM_MspPostInit+0x200>)
 8001ed8:	f001 fc30 	bl	800373c <HAL_GPIO_Init>
}
 8001edc:	e044      	b.n	8001f68 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a29      	ldr	r2, [pc, #164]	; (8001f88 <HAL_TIM_MspPostInit+0x204>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d11d      	bne.n	8001f24 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ee8:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eec:	4a21      	ldr	r2, [pc, #132]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001eee:	f043 0308 	orr.w	r3, r3, #8
 8001ef2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001f00:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f12:	2302      	movs	r3, #2
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	481b      	ldr	r0, [pc, #108]	; (8001f8c <HAL_TIM_MspPostInit+0x208>)
 8001f1e:	f001 fc0d 	bl	800373c <HAL_GPIO_Init>
}
 8001f22:	e021      	b.n	8001f68 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a19      	ldr	r2, [pc, #100]	; (8001f90 <HAL_TIM_MspPostInit+0x20c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d11c      	bne.n	8001f68 <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <HAL_TIM_MspPostInit+0x1f0>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f54:	2300      	movs	r3, #0
 8001f56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001f58:	230e      	movs	r3, #14
 8001f5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f60:	4619      	mov	r1, r3
 8001f62:	4806      	ldr	r0, [pc, #24]	; (8001f7c <HAL_TIM_MspPostInit+0x1f8>)
 8001f64:	f001 fbea 	bl	800373c <HAL_GPIO_Init>
}
 8001f68:	bf00      	nop
 8001f6a:	3738      	adds	r7, #56	; 0x38
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40012c00 	.word	0x40012c00
 8001f74:	40021000 	.word	0x40021000
 8001f78:	48001000 	.word	0x48001000
 8001f7c:	48000400 	.word	0x48000400
 8001f80:	40000400 	.word	0x40000400
 8001f84:	48000800 	.word	0x48000800
 8001f88:	40000800 	.word	0x40000800
 8001f8c:	48000c00 	.word	0x48000c00
 8001f90:	40014000 	.word	0x40014000

08001f94 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	; 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a50      	ldr	r2, [pc, #320]	; (80020e4 <HAL_SAI_MspInit+0x150>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d124      	bne.n	8001ff0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001fa6:	4b50      	ldr	r3, [pc, #320]	; (80020e8 <HAL_SAI_MspInit+0x154>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10b      	bne.n	8001fc6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001fae:	4b4f      	ldr	r3, [pc, #316]	; (80020ec <HAL_SAI_MspInit+0x158>)
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb2:	4a4e      	ldr	r2, [pc, #312]	; (80020ec <HAL_SAI_MspInit+0x158>)
 8001fb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fb8:	6613      	str	r3, [r2, #96]	; 0x60
 8001fba:	4b4c      	ldr	r3, [pc, #304]	; (80020ec <HAL_SAI_MspInit+0x158>)
 8001fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001fc6:	4b48      	ldr	r3, [pc, #288]	; (80020e8 <HAL_SAI_MspInit+0x154>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	4a46      	ldr	r2, [pc, #280]	; (80020e8 <HAL_SAI_MspInit+0x154>)
 8001fce:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001fd0:	2374      	movs	r3, #116	; 0x74
 8001fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001fe0:	230d      	movs	r3, #13
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4841      	ldr	r0, [pc, #260]	; (80020f0 <HAL_SAI_MspInit+0x15c>)
 8001fec:	f001 fba6 	bl	800373c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a3f      	ldr	r2, [pc, #252]	; (80020f4 <HAL_SAI_MspInit+0x160>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d135      	bne.n	8002066 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <HAL_SAI_MspInit+0x154>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10b      	bne.n	800201a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002002:	4b3a      	ldr	r3, [pc, #232]	; (80020ec <HAL_SAI_MspInit+0x158>)
 8002004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002006:	4a39      	ldr	r2, [pc, #228]	; (80020ec <HAL_SAI_MspInit+0x158>)
 8002008:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800200c:	6613      	str	r3, [r2, #96]	; 0x60
 800200e:	4b37      	ldr	r3, [pc, #220]	; (80020ec <HAL_SAI_MspInit+0x158>)
 8002010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800201a:	4b33      	ldr	r3, [pc, #204]	; (80020e8 <HAL_SAI_MspInit+0x154>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3301      	adds	r3, #1
 8002020:	4a31      	ldr	r2, [pc, #196]	; (80020e8 <HAL_SAI_MspInit+0x154>)
 8002022:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002024:	2308      	movs	r3, #8
 8002026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002034:	230d      	movs	r3, #13
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	4619      	mov	r1, r3
 800203e:	482c      	ldr	r0, [pc, #176]	; (80020f0 <HAL_SAI_MspInit+0x15c>)
 8002040:	f001 fb7c 	bl	800373c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002044:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002056:	230d      	movs	r3, #13
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	4825      	ldr	r0, [pc, #148]	; (80020f8 <HAL_SAI_MspInit+0x164>)
 8002062:	f001 fb6b 	bl	800373c <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a24      	ldr	r2, [pc, #144]	; (80020fc <HAL_SAI_MspInit+0x168>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d135      	bne.n	80020dc <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002070:	4b23      	ldr	r3, [pc, #140]	; (8002100 <HAL_SAI_MspInit+0x16c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10b      	bne.n	8002090 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002078:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_SAI_MspInit+0x158>)
 800207a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207c:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <HAL_SAI_MspInit+0x158>)
 800207e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002082:	6613      	str	r3, [r2, #96]	; 0x60
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_SAI_MspInit+0x158>)
 8002086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8002090:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_SAI_MspInit+0x16c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	4a1a      	ldr	r2, [pc, #104]	; (8002100 <HAL_SAI_MspInit+0x16c>)
 8002098:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800209a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800209e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80020ac:	230d      	movs	r3, #13
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4619      	mov	r1, r3
 80020b6:	4813      	ldr	r0, [pc, #76]	; (8002104 <HAL_SAI_MspInit+0x170>)
 80020b8:	f001 fb40 	bl	800373c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020bc:	2340      	movs	r3, #64	; 0x40
 80020be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2300      	movs	r3, #0
 80020ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80020cc:	230d      	movs	r3, #13
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	4619      	mov	r1, r3
 80020d6:	480c      	ldr	r0, [pc, #48]	; (8002108 <HAL_SAI_MspInit+0x174>)
 80020d8:	f001 fb30 	bl	800373c <HAL_GPIO_Init>

    }
}
 80020dc:	bf00      	nop
 80020de:	3728      	adds	r7, #40	; 0x28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40015404 	.word	0x40015404
 80020e8:	20000484 	.word	0x20000484
 80020ec:	40021000 	.word	0x40021000
 80020f0:	48001000 	.word	0x48001000
 80020f4:	40015424 	.word	0x40015424
 80020f8:	48001400 	.word	0x48001400
 80020fc:	40015804 	.word	0x40015804
 8002100:	20000488 	.word	0x20000488
 8002104:	48000400 	.word	0x48000400
 8002108:	48000800 	.word	0x48000800

0800210c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002110:	e7fe      	b.n	8002110 <NMI_Handler+0x4>

08002112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <HardFault_Handler+0x4>

08002118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <MemManage_Handler+0x4>

0800211e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002122:	e7fe      	b.n	8002122 <BusFault_Handler+0x4>

08002124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <UsageFault_Handler+0x4>

0800212a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002158:	f000 f892 	bl	8002280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}

08002160 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <SystemInit+0x20>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <SystemInit+0x20>)
 800216c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002188:	f7ff ffea 	bl	8002160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800218c:	480c      	ldr	r0, [pc, #48]	; (80021c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800218e:	490d      	ldr	r1, [pc, #52]	; (80021c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002190:	4a0d      	ldr	r2, [pc, #52]	; (80021c8 <LoopForever+0xe>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002194:	e002      	b.n	800219c <LoopCopyDataInit>

08002196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219a:	3304      	adds	r3, #4

0800219c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800219c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a0:	d3f9      	bcc.n	8002196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a2:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80021a4:	4c0a      	ldr	r4, [pc, #40]	; (80021d0 <LoopForever+0x16>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a8:	e001      	b.n	80021ae <LoopFillZerobss>

080021aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ac:	3204      	adds	r2, #4

080021ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b0:	d3fb      	bcc.n	80021aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021b2:	f006 fe6f 	bl	8008e94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021b6:	f7fe fd43 	bl	8000c40 <main>

080021ba <LoopForever>:

LoopForever:
    b LoopForever
 80021ba:	e7fe      	b.n	80021ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021bc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80021c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80021c8:	08008f4c 	.word	0x08008f4c
  ldr r2, =_sbss
 80021cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80021d0:	20000490 	.word	0x20000490

080021d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021d4:	e7fe      	b.n	80021d4 <ADC1_IRQHandler>

080021d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e0:	2003      	movs	r0, #3
 80021e2:	f001 f9bf 	bl	8003564 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021e6:	2000      	movs	r0, #0
 80021e8:	f000 f80e 	bl	8002208 <HAL_InitTick>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	71fb      	strb	r3, [r7, #7]
 80021f6:	e001      	b.n	80021fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021f8:	f7ff fbd8 	bl	80019ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021fc:	79fb      	ldrb	r3, [r7, #7]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002214:	4b17      	ldr	r3, [pc, #92]	; (8002274 <HAL_InitTick+0x6c>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d023      	beq.n	8002264 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <HAL_InitTick+0x70>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <HAL_InitTick+0x6c>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800222a:	fbb3 f3f1 	udiv	r3, r3, r1
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	4618      	mov	r0, r3
 8002234:	f001 f9bd 	bl	80035b2 <HAL_SYSTICK_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10f      	bne.n	800225e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b0f      	cmp	r3, #15
 8002242:	d809      	bhi.n	8002258 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002244:	2200      	movs	r2, #0
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	f04f 30ff 	mov.w	r0, #4294967295
 800224c:	f001 f995 	bl	800357a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002250:	4a0a      	ldr	r2, [pc, #40]	; (800227c <HAL_InitTick+0x74>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e007      	b.n	8002268 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
 800225c:	e004      	b.n	8002268 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	e001      	b.n	8002268 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002268:	7bfb      	ldrb	r3, [r7, #15]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000008 	.word	0x20000008
 8002278:	20000000 	.word	0x20000000
 800227c:	20000004 	.word	0x20000004

08002280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_IncTick+0x20>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_IncTick+0x24>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4413      	add	r3, r2
 8002290:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <HAL_IncTick+0x24>)
 8002292:	6013      	str	r3, [r2, #0]
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000008 	.word	0x20000008
 80022a4:	2000048c 	.word	0x2000048c

080022a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return uwTick;
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <HAL_GetTick+0x14>)
 80022ae:	681b      	ldr	r3, [r3, #0]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	2000048c 	.word	0x2000048c

080022c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c8:	f7ff ffee 	bl	80022a8 <HAL_GetTick>
 80022cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d8:	d005      	beq.n	80022e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_Delay+0x44>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4413      	add	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022e6:	bf00      	nop
 80022e8:	f7ff ffde 	bl	80022a8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d8f7      	bhi.n	80022e8 <HAL_Delay+0x28>
  {
  }
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000008 	.word	0x20000008

08002308 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	609a      	str	r2, [r3, #8]
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	609a      	str	r2, [r3, #8]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3360      	adds	r3, #96	; 0x60
 8002382:	461a      	mov	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <LL_ADC_SetOffset+0x44>)
 8002392:	4013      	ands	r3, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	4313      	orrs	r3, r2
 80023a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80023a8:	bf00      	nop
 80023aa:	371c      	adds	r7, #28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	03fff000 	.word	0x03fff000

080023b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3360      	adds	r3, #96	; 0x60
 80023c6:	461a      	mov	r2, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	3360      	adds	r3, #96	; 0x60
 80023f4:	461a      	mov	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	431a      	orrs	r2, r3
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800240e:	bf00      	nop
 8002410:	371c      	adds	r7, #28
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	615a      	str	r2, [r3, #20]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3330      	adds	r3, #48	; 0x30
 8002450:	461a      	mov	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	f003 030c 	and.w	r3, r3, #12
 800245c:	4413      	add	r3, r2
 800245e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	211f      	movs	r1, #31
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	401a      	ands	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	0e9b      	lsrs	r3, r3, #26
 8002478:	f003 011f 	and.w	r1, r3, #31
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	431a      	orrs	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800248c:	bf00      	nop
 800248e:	371c      	adds	r7, #28
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3314      	adds	r3, #20
 80024a8:	461a      	mov	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	0e5b      	lsrs	r3, r3, #25
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	4413      	add	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	0d1b      	lsrs	r3, r3, #20
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	2107      	movs	r1, #7
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	401a      	ands	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	0d1b      	lsrs	r3, r3, #20
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	431a      	orrs	r2, r3
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024e2:	bf00      	nop
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002508:	43db      	mvns	r3, r3
 800250a:	401a      	ands	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f003 0318 	and.w	r3, r3, #24
 8002512:	4908      	ldr	r1, [pc, #32]	; (8002534 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002514:	40d9      	lsrs	r1, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	400b      	ands	r3, r1
 800251a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251e:	431a      	orrs	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	0007ffff 	.word	0x0007ffff

08002538 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002548:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6093      	str	r3, [r2, #8]
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800256c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002570:	d101      	bne.n	8002576 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002594:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002598:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025c0:	d101      	bne.n	80025c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <LL_ADC_IsEnabled+0x18>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <LL_ADC_IsEnabled+0x1a>
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b04      	cmp	r3, #4
 800260c:	d101      	bne.n	8002612 <LL_ADC_REG_IsConversionOngoing+0x18>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b08      	cmp	r3, #8
 8002632:	d101      	bne.n	8002638 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e129      	b.n	80028b6 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	2b00      	cmp	r3, #0
 800266e:	d109      	bne.n	8002684 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff f9bf 	bl	80019f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff67 	bl	800255c <LL_ADC_IsDeepPowerDownEnabled>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d004      	beq.n	800269e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff4d 	bl	8002538 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff ff82 	bl	80025ac <LL_ADC_IsInternalRegulatorEnabled>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d115      	bne.n	80026da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff ff66 	bl	8002584 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026b8:	4b81      	ldr	r3, [pc, #516]	; (80028c0 <HAL_ADC_Init+0x278>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	099b      	lsrs	r3, r3, #6
 80026be:	4a81      	ldr	r2, [pc, #516]	; (80028c4 <HAL_ADC_Init+0x27c>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	3301      	adds	r3, #1
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026cc:	e002      	b.n	80026d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f9      	bne.n	80026ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ff64 	bl	80025ac <LL_ADC_IsInternalRegulatorEnabled>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10d      	bne.n	8002706 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	f043 0210 	orr.w	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ff75 	bl	80025fa <LL_ADC_REG_IsConversionOngoing>
 8002710:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b00      	cmp	r3, #0
 800271c:	f040 80c2 	bne.w	80028a4 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 80be 	bne.w	80028a4 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002730:	f043 0202 	orr.w	r2, r3, #2
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff49 	bl	80025d4 <LL_ADC_IsEnabled>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10b      	bne.n	8002760 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002748:	485f      	ldr	r0, [pc, #380]	; (80028c8 <HAL_ADC_Init+0x280>)
 800274a:	f7ff ff43 	bl	80025d4 <LL_ADC_IsEnabled>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d105      	bne.n	8002760 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4619      	mov	r1, r3
 800275a:	485c      	ldr	r0, [pc, #368]	; (80028cc <HAL_ADC_Init+0x284>)
 800275c:	f7ff fdd4 	bl	8002308 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	7e5b      	ldrb	r3, [r3, #25]
 8002764:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800276a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002770:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002776:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800277e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d106      	bne.n	800279c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	3b01      	subs	r3, #1
 8002794:	045b      	lsls	r3, r3, #17
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d009      	beq.n	80027b8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	4b44      	ldr	r3, [pc, #272]	; (80028d0 <HAL_ADC_Init+0x288>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	69b9      	ldr	r1, [r7, #24]
 80027c8:	430b      	orrs	r3, r1
 80027ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff25 	bl	8002620 <LL_ADC_INJ_IsConversionOngoing>
 80027d6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d140      	bne.n	8002860 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d13d      	bne.n	8002860 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	7e1b      	ldrb	r3, [r3, #24]
 80027ec:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027ee:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027f6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002806:	f023 0306 	bic.w	r3, r3, #6
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	69b9      	ldr	r1, [r7, #24]
 8002810:	430b      	orrs	r3, r1
 8002812:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800281a:	2b01      	cmp	r3, #1
 800281c:	d118      	bne.n	8002850 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002828:	f023 0304 	bic.w	r3, r3, #4
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002834:	4311      	orrs	r1, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800283a:	4311      	orrs	r1, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002840:	430a      	orrs	r2, r1
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 0201 	orr.w	r2, r2, #1
 800284c:	611a      	str	r2, [r3, #16]
 800284e:	e007      	b.n	8002860 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d10c      	bne.n	8002882 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f023 010f 	bic.w	r1, r3, #15
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	1e5a      	subs	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
 8002880:	e007      	b.n	8002892 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 020f 	bic.w	r2, r2, #15
 8002890:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	f043 0201 	orr.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	659a      	str	r2, [r3, #88]	; 0x58
 80028a2:	e007      	b.n	80028b4 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	f043 0210 	orr.w	r2, r3, #16
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3720      	adds	r7, #32
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000000 	.word	0x20000000
 80028c4:	053e2d63 	.word	0x053e2d63
 80028c8:	50040000 	.word	0x50040000
 80028cc:	50040300 	.word	0x50040300
 80028d0:	fff0c007 	.word	0xfff0c007

080028d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b0b6      	sub	sp, #216	; 0xd8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x22>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e3d5      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x7ce>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fe79 	bl	80025fa <LL_ADC_REG_IsConversionOngoing>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	f040 83ba 	bne.w	8003084 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b05      	cmp	r3, #5
 800291e:	d824      	bhi.n	800296a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	3b02      	subs	r3, #2
 8002926:	2b03      	cmp	r3, #3
 8002928:	d81b      	bhi.n	8002962 <HAL_ADC_ConfigChannel+0x8e>
 800292a:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <HAL_ADC_ConfigChannel+0x5c>)
 800292c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002930:	08002941 	.word	0x08002941
 8002934:	08002949 	.word	0x08002949
 8002938:	08002951 	.word	0x08002951
 800293c:	08002959 	.word	0x08002959
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002940:	230c      	movs	r3, #12
 8002942:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002946:	e010      	b.n	800296a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002948:	2312      	movs	r3, #18
 800294a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800294e:	e00c      	b.n	800296a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002950:	2318      	movs	r3, #24
 8002952:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002956:	e008      	b.n	800296a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800295c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002960:	e003      	b.n	800296a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002962:	2306      	movs	r3, #6
 8002964:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002968:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002978:	f7ff fd62 	bl	8002440 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fe3a 	bl	80025fa <LL_ADC_REG_IsConversionOngoing>
 8002986:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fe46 	bl	8002620 <LL_ADC_INJ_IsConversionOngoing>
 8002994:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002998:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800299c:	2b00      	cmp	r3, #0
 800299e:	f040 81bf 	bne.w	8002d20 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 81ba 	bne.w	8002d20 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029b4:	d10f      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2200      	movs	r2, #0
 80029c0:	4619      	mov	r1, r3
 80029c2:	f7ff fd69 	bl	8002498 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fd23 	bl	800241a <LL_ADC_SetSamplingTimeCommonConfig>
 80029d4:	e00e      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6819      	ldr	r1, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f7ff fd58 	bl	8002498 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2100      	movs	r1, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fd13 	bl	800241a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	08db      	lsrs	r3, r3, #3
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d00a      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6919      	ldr	r1, [r3, #16]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a26:	f7ff fca3 	bl	8002370 <LL_ADC_SetOffset>
 8002a2a:	e179      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2100      	movs	r1, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fcc0 	bl	80023b8 <LL_ADC_GetOffsetChannel>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10a      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x184>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2100      	movs	r1, #0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fcb5 	bl	80023b8 <LL_ADC_GetOffsetChannel>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	0e9b      	lsrs	r3, r3, #26
 8002a52:	f003 021f 	and.w	r2, r3, #31
 8002a56:	e01e      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x1c2>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fcaa 	bl	80023b8 <LL_ADC_GetOffsetChannel>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002a86:	2320      	movs	r3, #32
 8002a88:	e004      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002a8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d105      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x1da>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	0e9b      	lsrs	r3, r3, #26
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	e018      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x20c>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002ac2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ac6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002aca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	e004      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002ad6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d106      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fc79 	bl	80023e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2101      	movs	r1, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fc5d 	bl	80023b8 <LL_ADC_GetOffsetChannel>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x24a>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fc52 	bl	80023b8 <LL_ADC_GetOffsetChannel>
 8002b14:	4603      	mov	r3, r0
 8002b16:	0e9b      	lsrs	r3, r3, #26
 8002b18:	f003 021f 	and.w	r2, r3, #31
 8002b1c:	e01e      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x288>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2101      	movs	r1, #1
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fc47 	bl	80023b8 <LL_ADC_GetOffsetChannel>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002b44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	e004      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002b50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b54:	fab3 f383 	clz	r3, r3
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d105      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x2a0>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0e9b      	lsrs	r3, r3, #26
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	e018      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x2d2>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002b88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002b90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002b98:	2320      	movs	r3, #32
 8002b9a:	e004      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ba0:	fab3 f383 	clz	r3, r3
 8002ba4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d106      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff fc16 	bl	80023e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fbfa 	bl	80023b8 <LL_ADC_GetOffsetChannel>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10a      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x310>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2102      	movs	r1, #2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fbef 	bl	80023b8 <LL_ADC_GetOffsetChannel>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	f003 021f 	and.w	r2, r3, #31
 8002be2:	e01e      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x34e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2102      	movs	r1, #2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fbe4 	bl	80023b8 <LL_ADC_GetOffsetChannel>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002c02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002c12:	2320      	movs	r3, #32
 8002c14:	e004      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d105      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x366>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	0e9b      	lsrs	r3, r3, #26
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	e014      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x390>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002c4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002c56:	2320      	movs	r3, #32
 8002c58:	e004      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002c5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d106      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2102      	movs	r1, #2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fbb7 	bl	80023e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2103      	movs	r1, #3
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fb9b 	bl	80023b8 <LL_ADC_GetOffsetChannel>
 8002c82:	4603      	mov	r3, r0
 8002c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x3ce>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2103      	movs	r1, #3
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fb90 	bl	80023b8 <LL_ADC_GetOffsetChannel>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	0e9b      	lsrs	r3, r3, #26
 8002c9c:	f003 021f 	and.w	r2, r3, #31
 8002ca0:	e017      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x3fe>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2103      	movs	r1, #3
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fb85 	bl	80023b8 <LL_ADC_GetOffsetChannel>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cbc:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002cc4:	2320      	movs	r3, #32
 8002cc6:	e003      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002cc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d105      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x416>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	0e9b      	lsrs	r3, r3, #26
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	e011      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x43a>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002cf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cfa:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002cfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002d02:	2320      	movs	r3, #32
 8002d04:	e003      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002d06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d106      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2200      	movs	r2, #0
 8002d18:	2103      	movs	r1, #3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fb62 	bl	80023e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fc55 	bl	80025d4 <LL_ADC_IsEnabled>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f040 813f 	bne.w	8002fb0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6819      	ldr	r1, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f7ff fbd6 	bl	80024f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4a8e      	ldr	r2, [pc, #568]	; (8002f84 <HAL_ADC_ConfigChannel+0x6b0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	f040 8130 	bne.w	8002fb0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x4a4>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0e9b      	lsrs	r3, r3, #26
 8002d66:	3301      	adds	r3, #1
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	2b09      	cmp	r3, #9
 8002d6e:	bf94      	ite	ls
 8002d70:	2301      	movls	r3, #1
 8002d72:	2300      	movhi	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	e019      	b.n	8002dac <HAL_ADC_ConfigChannel+0x4d8>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d88:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002d90:	2320      	movs	r3, #32
 8002d92:	e003      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	2b09      	cmp	r3, #9
 8002da4:	bf94      	ite	ls
 8002da6:	2301      	movls	r3, #1
 8002da8:	2300      	movhi	r3, #0
 8002daa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d079      	beq.n	8002ea4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d107      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x4f8>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	0e9b      	lsrs	r3, r3, #26
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	069b      	lsls	r3, r3, #26
 8002dc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dca:	e015      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x524>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd4:	fa93 f3a3 	rbit	r3, r3
 8002dd8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ddc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002de4:	2320      	movs	r3, #32
 8002de6:	e003      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	3301      	adds	r3, #1
 8002df2:	069b      	lsls	r3, r3, #26
 8002df4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d109      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x544>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	0e9b      	lsrs	r3, r3, #26
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2101      	movs	r1, #1
 8002e12:	fa01 f303 	lsl.w	r3, r1, r3
 8002e16:	e017      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x574>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e28:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002e30:	2320      	movs	r3, #32
 8002e32:	e003      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f003 031f 	and.w	r3, r3, #31
 8002e42:	2101      	movs	r1, #1
 8002e44:	fa01 f303 	lsl.w	r3, r1, r3
 8002e48:	ea42 0103 	orr.w	r1, r2, r3
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10a      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x59a>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0e9b      	lsrs	r3, r3, #26
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f003 021f 	and.w	r2, r3, #31
 8002e64:	4613      	mov	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4413      	add	r3, r2
 8002e6a:	051b      	lsls	r3, r3, #20
 8002e6c:	e018      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x5cc>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002e86:	2320      	movs	r3, #32
 8002e88:	e003      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	fab3 f383 	clz	r3, r3
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	3301      	adds	r3, #1
 8002e94:	f003 021f 	and.w	r2, r3, #31
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	e080      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d107      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x5ec>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	0e9b      	lsrs	r3, r3, #26
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	069b      	lsls	r3, r3, #26
 8002eba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ebe:	e015      	b.n	8002eec <HAL_ADC_ConfigChannel+0x618>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002ed8:	2320      	movs	r3, #32
 8002eda:	e003      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	069b      	lsls	r3, r3, #26
 8002ee8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d109      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x638>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	0e9b      	lsrs	r3, r3, #26
 8002efe:	3301      	adds	r3, #1
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	2101      	movs	r1, #1
 8002f06:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0a:	e017      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x668>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	61bb      	str	r3, [r7, #24]
  return result;
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002f24:	2320      	movs	r3, #32
 8002f26:	e003      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	3301      	adds	r3, #1
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	2101      	movs	r1, #1
 8002f38:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3c:	ea42 0103 	orr.w	r1, r2, r3
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10d      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x694>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	0e9b      	lsrs	r3, r3, #26
 8002f52:	3301      	adds	r3, #1
 8002f54:	f003 021f 	and.w	r2, r3, #31
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3b1e      	subs	r3, #30
 8002f60:	051b      	lsls	r3, r3, #20
 8002f62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f66:	e01d      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x6d0>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	fa93 f3a3 	rbit	r3, r3
 8002f74:	60fb      	str	r3, [r7, #12]
  return result;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d103      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002f80:	2320      	movs	r3, #32
 8002f82:	e005      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x6bc>
 8002f84:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	3301      	adds	r3, #1
 8002f92:	f003 021f 	and.w	r2, r3, #31
 8002f96:	4613      	mov	r3, r2
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3b1e      	subs	r3, #30
 8002f9e:	051b      	lsls	r3, r3, #20
 8002fa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fa4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002faa:	4619      	mov	r1, r3
 8002fac:	f7ff fa74 	bl	8002498 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4b3d      	ldr	r3, [pc, #244]	; (80030ac <HAL_ADC_ConfigChannel+0x7d8>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d06c      	beq.n	8003096 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fbc:	483c      	ldr	r0, [pc, #240]	; (80030b0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002fbe:	f7ff f9c9 	bl	8002354 <LL_ADC_GetCommonPathInternalCh>
 8002fc2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a3a      	ldr	r2, [pc, #232]	; (80030b4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d127      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d121      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a35      	ldr	r2, [pc, #212]	; (80030b8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d157      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fe6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fee:	4619      	mov	r1, r3
 8002ff0:	482f      	ldr	r0, [pc, #188]	; (80030b0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ff2:	f7ff f99c 	bl	800232e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ff6:	4b31      	ldr	r3, [pc, #196]	; (80030bc <HAL_ADC_ConfigChannel+0x7e8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	099b      	lsrs	r3, r3, #6
 8002ffc:	4a30      	ldr	r2, [pc, #192]	; (80030c0 <HAL_ADC_ConfigChannel+0x7ec>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	099b      	lsrs	r3, r3, #6
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	4613      	mov	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003010:	e002      	b.n	8003018 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	3b01      	subs	r3, #1
 8003016:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f9      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800301e:	e03a      	b.n	8003096 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a27      	ldr	r2, [pc, #156]	; (80030c4 <HAL_ADC_ConfigChannel+0x7f0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d113      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800302a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800302e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10d      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1f      	ldr	r2, [pc, #124]	; (80030b8 <HAL_ADC_ConfigChannel+0x7e4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d12a      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003040:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003044:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003048:	4619      	mov	r1, r3
 800304a:	4819      	ldr	r0, [pc, #100]	; (80030b0 <HAL_ADC_ConfigChannel+0x7dc>)
 800304c:	f7ff f96f 	bl	800232e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003050:	e021      	b.n	8003096 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <HAL_ADC_ConfigChannel+0x7f4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d11c      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800305c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d116      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a12      	ldr	r2, [pc, #72]	; (80030b8 <HAL_ADC_ConfigChannel+0x7e4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d111      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003072:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003076:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800307a:	4619      	mov	r1, r3
 800307c:	480c      	ldr	r0, [pc, #48]	; (80030b0 <HAL_ADC_ConfigChannel+0x7dc>)
 800307e:	f7ff f956 	bl	800232e <LL_ADC_SetCommonPathInternalCh>
 8003082:	e008      	b.n	8003096 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800309e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	37d8      	adds	r7, #216	; 0xd8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	80080000 	.word	0x80080000
 80030b0:	50040300 	.word	0x50040300
 80030b4:	c7520000 	.word	0xc7520000
 80030b8:	50040000 	.word	0x50040000
 80030bc:	20000000 	.word	0x20000000
 80030c0:	053e2d63 	.word	0x053e2d63
 80030c4:	cb840000 	.word	0xcb840000
 80030c8:	80000001 	.word	0x80000001

080030cc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80030d4:	4b05      	ldr	r3, [pc, #20]	; (80030ec <LL_EXTI_EnableIT_0_31+0x20>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4904      	ldr	r1, [pc, #16]	; (80030ec <LL_EXTI_EnableIT_0_31+0x20>)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	40010400 	.word	0x40010400

080030f0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <LL_EXTI_DisableIT_0_31+0x24>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	43db      	mvns	r3, r3
 8003100:	4904      	ldr	r1, [pc, #16]	; (8003114 <LL_EXTI_DisableIT_0_31+0x24>)
 8003102:	4013      	ands	r3, r2
 8003104:	600b      	str	r3, [r1, #0]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40010400 	.word	0x40010400

08003118 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	4904      	ldr	r1, [pc, #16]	; (8003138 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]

}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40010400 	.word	0x40010400

0800313c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003144:	4b06      	ldr	r3, [pc, #24]	; (8003160 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	43db      	mvns	r3, r3
 800314c:	4904      	ldr	r1, [pc, #16]	; (8003160 <LL_EXTI_DisableEvent_0_31+0x24>)
 800314e:	4013      	ands	r3, r2
 8003150:	604b      	str	r3, [r1, #4]
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40010400 	.word	0x40010400

08003164 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	4904      	ldr	r1, [pc, #16]	; (8003184 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4313      	orrs	r3, r2
 8003176:	608b      	str	r3, [r1, #8]

}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	40010400 	.word	0x40010400

08003188 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	43db      	mvns	r3, r3
 8003198:	4904      	ldr	r1, [pc, #16]	; (80031ac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800319a:	4013      	ands	r3, r2
 800319c:	608b      	str	r3, [r1, #8]

}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40010400 	.word	0x40010400

080031b0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	4904      	ldr	r1, [pc, #16]	; (80031d0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60cb      	str	r3, [r1, #12]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	40010400 	.word	0x40010400

080031d4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	4904      	ldr	r1, [pc, #16]	; (80031f8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	60cb      	str	r3, [r1, #12]
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40010400 	.word	0x40010400

080031fc <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003204:	4a04      	ldr	r2, [pc, #16]	; (8003218 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6153      	str	r3, [r2, #20]
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40010400 	.word	0x40010400

0800321c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d102      	bne.n	8003238 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e0d1      	b.n	80033dc <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003246:	d102      	bne.n	800324e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	77fb      	strb	r3, [r7, #31]
 800324c:	e0c6      	b.n	80033dc <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d115      	bne.n	8003286 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003268:	4b5f      	ldr	r3, [pc, #380]	; (80033e8 <HAL_COMP_Init+0x1cc>)
 800326a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326c:	4a5e      	ldr	r2, [pc, #376]	; (80033e8 <HAL_COMP_Init+0x1cc>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6613      	str	r3, [r2, #96]	; 0x60
 8003274:	4b5c      	ldr	r3, [pc, #368]	; (80033e8 <HAL_COMP_Init+0x1cc>)
 8003276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fe fc29 	bl	8001ad8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003290:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4b4b      	ldr	r3, [pc, #300]	; (80033ec <HAL_COMP_Init+0x1d0>)
 80032be:	4013      	ands	r3, r2
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	6979      	ldr	r1, [r7, #20]
 80032c6:	430b      	orrs	r3, r1
 80032c8:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d2:	d106      	bne.n	80032e2 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80032d4:	4b46      	ldr	r3, [pc, #280]	; (80033f0 <HAL_COMP_Init+0x1d4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a45      	ldr	r2, [pc, #276]	; (80033f0 <HAL_COMP_Init+0x1d4>)
 80032da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	e005      	b.n	80032ee <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80032e2:	4b43      	ldr	r3, [pc, #268]	; (80033f0 <HAL_COMP_Init+0x1d4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a42      	ldr	r2, [pc, #264]	; (80033f0 <HAL_COMP_Init+0x1d4>)
 80032e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032ec:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d016      	beq.n	800332a <HAL_COMP_Init+0x10e>
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d113      	bne.n	800332a <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003302:	4b3c      	ldr	r3, [pc, #240]	; (80033f4 <HAL_COMP_Init+0x1d8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	099b      	lsrs	r3, r3, #6
 8003308:	4a3b      	ldr	r2, [pc, #236]	; (80033f8 <HAL_COMP_Init+0x1dc>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	099b      	lsrs	r3, r3, #6
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800331c:	e002      	b.n	8003324 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	3b01      	subs	r3, #1
 8003322:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f9      	bne.n	800331e <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a33      	ldr	r2, [pc, #204]	; (80033fc <HAL_COMP_Init+0x1e0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d102      	bne.n	800333a <HAL_COMP_Init+0x11e>
 8003334:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003338:	e001      	b.n	800333e <HAL_COMP_Init+0x122>
 800333a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800333e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d037      	beq.n	80033bc <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003358:	6938      	ldr	r0, [r7, #16]
 800335a:	f7ff ff03 	bl	8003164 <LL_EXTI_EnableRisingTrig_0_31>
 800335e:	e002      	b.n	8003366 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003360:	6938      	ldr	r0, [r7, #16]
 8003362:	f7ff ff11 	bl	8003188 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003372:	6938      	ldr	r0, [r7, #16]
 8003374:	f7ff ff1c 	bl	80031b0 <LL_EXTI_EnableFallingTrig_0_31>
 8003378:	e002      	b.n	8003380 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800337a:	6938      	ldr	r0, [r7, #16]
 800337c:	f7ff ff2a 	bl	80031d4 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8003380:	6938      	ldr	r0, [r7, #16]
 8003382:	f7ff ff3b 	bl	80031fc <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8003392:	6938      	ldr	r0, [r7, #16]
 8003394:	f7ff fec0 	bl	8003118 <LL_EXTI_EnableEvent_0_31>
 8003398:	e002      	b.n	80033a0 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800339a:	6938      	ldr	r0, [r7, #16]
 800339c:	f7ff fece 	bl	800313c <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80033ac:	6938      	ldr	r0, [r7, #16]
 80033ae:	f7ff fe8d 	bl	80030cc <LL_EXTI_EnableIT_0_31>
 80033b2:	e009      	b.n	80033c8 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80033b4:	6938      	ldr	r0, [r7, #16]
 80033b6:	f7ff fe9b 	bl	80030f0 <LL_EXTI_DisableIT_0_31>
 80033ba:	e005      	b.n	80033c8 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80033bc:	6938      	ldr	r0, [r7, #16]
 80033be:	f7ff febd 	bl	800313c <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80033c2:	6938      	ldr	r0, [r7, #16]
 80033c4:	f7ff fe94 	bl	80030f0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d103      	bne.n	80033dc <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80033dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3720      	adds	r7, #32
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000
 80033ec:	ff207d03 	.word	0xff207d03
 80033f0:	40010204 	.word	0x40010204
 80033f4:	20000000 	.word	0x20000000
 80033f8:	053e2d63 	.word	0x053e2d63
 80033fc:	40010200 	.word	0x40010200

08003400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003410:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <__NVIC_SetPriorityGrouping+0x44>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800341c:	4013      	ands	r3, r2
 800341e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800342c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003432:	4a04      	ldr	r2, [pc, #16]	; (8003444 <__NVIC_SetPriorityGrouping+0x44>)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	60d3      	str	r3, [r2, #12]
}
 8003438:	bf00      	nop
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800344c:	4b04      	ldr	r3, [pc, #16]	; (8003460 <__NVIC_GetPriorityGrouping+0x18>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	0a1b      	lsrs	r3, r3, #8
 8003452:	f003 0307 	and.w	r3, r3, #7
}
 8003456:	4618      	mov	r0, r3
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	6039      	str	r1, [r7, #0]
 800346e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003474:	2b00      	cmp	r3, #0
 8003476:	db0a      	blt.n	800348e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	490c      	ldr	r1, [pc, #48]	; (80034b0 <__NVIC_SetPriority+0x4c>)
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	0112      	lsls	r2, r2, #4
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	440b      	add	r3, r1
 8003488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800348c:	e00a      	b.n	80034a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4908      	ldr	r1, [pc, #32]	; (80034b4 <__NVIC_SetPriority+0x50>)
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	3b04      	subs	r3, #4
 800349c:	0112      	lsls	r2, r2, #4
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	440b      	add	r3, r1
 80034a2:	761a      	strb	r2, [r3, #24]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000e100 	.word	0xe000e100
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b089      	sub	sp, #36	; 0x24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f1c3 0307 	rsb	r3, r3, #7
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	bf28      	it	cs
 80034d6:	2304      	movcs	r3, #4
 80034d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3304      	adds	r3, #4
 80034de:	2b06      	cmp	r3, #6
 80034e0:	d902      	bls.n	80034e8 <NVIC_EncodePriority+0x30>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3b03      	subs	r3, #3
 80034e6:	e000      	b.n	80034ea <NVIC_EncodePriority+0x32>
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43da      	mvns	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	401a      	ands	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003500:	f04f 31ff 	mov.w	r1, #4294967295
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	43d9      	mvns	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003510:	4313      	orrs	r3, r2
         );
}
 8003512:	4618      	mov	r0, r3
 8003514:	3724      	adds	r7, #36	; 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
	...

08003520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3b01      	subs	r3, #1
 800352c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003530:	d301      	bcc.n	8003536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003532:	2301      	movs	r3, #1
 8003534:	e00f      	b.n	8003556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003536:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <SysTick_Config+0x40>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3b01      	subs	r3, #1
 800353c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800353e:	210f      	movs	r1, #15
 8003540:	f04f 30ff 	mov.w	r0, #4294967295
 8003544:	f7ff ff8e 	bl	8003464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <SysTick_Config+0x40>)
 800354a:	2200      	movs	r2, #0
 800354c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800354e:	4b04      	ldr	r3, [pc, #16]	; (8003560 <SysTick_Config+0x40>)
 8003550:	2207      	movs	r2, #7
 8003552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	e000e010 	.word	0xe000e010

08003564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff ff47 	bl	8003400 <__NVIC_SetPriorityGrouping>
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b086      	sub	sp, #24
 800357e:	af00      	add	r7, sp, #0
 8003580:	4603      	mov	r3, r0
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
 8003586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800358c:	f7ff ff5c 	bl	8003448 <__NVIC_GetPriorityGrouping>
 8003590:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	6978      	ldr	r0, [r7, #20]
 8003598:	f7ff ff8e 	bl	80034b8 <NVIC_EncodePriority>
 800359c:	4602      	mov	r2, r0
 800359e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff5d 	bl	8003464 <__NVIC_SetPriority>
}
 80035aa:	bf00      	nop
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff ffb0 	bl	8003520 <SysTick_Config>
 80035c0:	4603      	mov	r3, r0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b086      	sub	sp, #24
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_DMA_Start_IT+0x20>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e066      	b.n	80036b8 <HAL_DMA_Start_IT+0xee>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d155      	bne.n	80036aa <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2202      	movs	r2, #2
 8003602:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68b9      	ldr	r1, [r7, #8]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f84c 	bl	80036c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 020e 	orr.w	r2, r2, #14
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	e00f      	b.n	8003662 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0204 	bic.w	r2, r2, #4
 8003650:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 020a 	orr.w	r2, r2, #10
 8003660:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d007      	beq.n	8003680 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800367e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003684:	2b00      	cmp	r3, #0
 8003686:	d007      	beq.n	8003698 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003692:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003696:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	e005      	b.n	80036b6 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80036b2:	2302      	movs	r3, #2
 80036b4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036d6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d004      	beq.n	80036ea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036e8:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	f003 021c 	and.w	r2, r3, #28
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2101      	movs	r1, #1
 80036f8:	fa01 f202 	lsl.w	r2, r1, r2
 80036fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b10      	cmp	r3, #16
 800370c:	d108      	bne.n	8003720 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800371e:	e007      	b.n	8003730 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	60da      	str	r2, [r3, #12]
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800374a:	e166      	b.n	8003a1a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	2101      	movs	r1, #1
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	4013      	ands	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 8158 	beq.w	8003a14 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b01      	cmp	r3, #1
 800376e:	d005      	beq.n	800377c <HAL_GPIO_Init+0x40>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d130      	bne.n	80037de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	2203      	movs	r2, #3
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037b2:	2201      	movs	r2, #1
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4013      	ands	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	f003 0201 	and.w	r2, r3, #1
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d017      	beq.n	800381a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	2203      	movs	r2, #3
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d123      	bne.n	800386e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	08da      	lsrs	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3208      	adds	r2, #8
 800382e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003832:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	220f      	movs	r2, #15
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4013      	ands	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	08da      	lsrs	r2, r3, #3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3208      	adds	r2, #8
 8003868:	6939      	ldr	r1, [r7, #16]
 800386a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	2203      	movs	r2, #3
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0203 	and.w	r2, r3, #3
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80b2 	beq.w	8003a14 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b0:	4b61      	ldr	r3, [pc, #388]	; (8003a38 <HAL_GPIO_Init+0x2fc>)
 80038b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b4:	4a60      	ldr	r2, [pc, #384]	; (8003a38 <HAL_GPIO_Init+0x2fc>)
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	6613      	str	r3, [r2, #96]	; 0x60
 80038bc:	4b5e      	ldr	r3, [pc, #376]	; (8003a38 <HAL_GPIO_Init+0x2fc>)
 80038be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038c8:	4a5c      	ldr	r2, [pc, #368]	; (8003a3c <HAL_GPIO_Init+0x300>)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	089b      	lsrs	r3, r3, #2
 80038ce:	3302      	adds	r3, #2
 80038d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	220f      	movs	r2, #15
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4013      	ands	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038f2:	d02b      	beq.n	800394c <HAL_GPIO_Init+0x210>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a52      	ldr	r2, [pc, #328]	; (8003a40 <HAL_GPIO_Init+0x304>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d025      	beq.n	8003948 <HAL_GPIO_Init+0x20c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a51      	ldr	r2, [pc, #324]	; (8003a44 <HAL_GPIO_Init+0x308>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d01f      	beq.n	8003944 <HAL_GPIO_Init+0x208>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a50      	ldr	r2, [pc, #320]	; (8003a48 <HAL_GPIO_Init+0x30c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d019      	beq.n	8003940 <HAL_GPIO_Init+0x204>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a4f      	ldr	r2, [pc, #316]	; (8003a4c <HAL_GPIO_Init+0x310>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d013      	beq.n	800393c <HAL_GPIO_Init+0x200>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a4e      	ldr	r2, [pc, #312]	; (8003a50 <HAL_GPIO_Init+0x314>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00d      	beq.n	8003938 <HAL_GPIO_Init+0x1fc>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a4d      	ldr	r2, [pc, #308]	; (8003a54 <HAL_GPIO_Init+0x318>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d007      	beq.n	8003934 <HAL_GPIO_Init+0x1f8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a4c      	ldr	r2, [pc, #304]	; (8003a58 <HAL_GPIO_Init+0x31c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <HAL_GPIO_Init+0x1f4>
 800392c:	2307      	movs	r3, #7
 800392e:	e00e      	b.n	800394e <HAL_GPIO_Init+0x212>
 8003930:	2308      	movs	r3, #8
 8003932:	e00c      	b.n	800394e <HAL_GPIO_Init+0x212>
 8003934:	2306      	movs	r3, #6
 8003936:	e00a      	b.n	800394e <HAL_GPIO_Init+0x212>
 8003938:	2305      	movs	r3, #5
 800393a:	e008      	b.n	800394e <HAL_GPIO_Init+0x212>
 800393c:	2304      	movs	r3, #4
 800393e:	e006      	b.n	800394e <HAL_GPIO_Init+0x212>
 8003940:	2303      	movs	r3, #3
 8003942:	e004      	b.n	800394e <HAL_GPIO_Init+0x212>
 8003944:	2302      	movs	r3, #2
 8003946:	e002      	b.n	800394e <HAL_GPIO_Init+0x212>
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <HAL_GPIO_Init+0x212>
 800394c:	2300      	movs	r3, #0
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	f002 0203 	and.w	r2, r2, #3
 8003954:	0092      	lsls	r2, r2, #2
 8003956:	4093      	lsls	r3, r2
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800395e:	4937      	ldr	r1, [pc, #220]	; (8003a3c <HAL_GPIO_Init+0x300>)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	089b      	lsrs	r3, r3, #2
 8003964:	3302      	adds	r3, #2
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800396c:	4b3b      	ldr	r3, [pc, #236]	; (8003a5c <HAL_GPIO_Init+0x320>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	43db      	mvns	r3, r3
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4013      	ands	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003990:	4a32      	ldr	r2, [pc, #200]	; (8003a5c <HAL_GPIO_Init+0x320>)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003996:	4b31      	ldr	r3, [pc, #196]	; (8003a5c <HAL_GPIO_Init+0x320>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	43db      	mvns	r3, r3
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039ba:	4a28      	ldr	r2, [pc, #160]	; (8003a5c <HAL_GPIO_Init+0x320>)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039c0:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <HAL_GPIO_Init+0x320>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	43db      	mvns	r3, r3
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4013      	ands	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039e4:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <HAL_GPIO_Init+0x320>)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039ea:	4b1c      	ldr	r3, [pc, #112]	; (8003a5c <HAL_GPIO_Init+0x320>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	43db      	mvns	r3, r3
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4013      	ands	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a0e:	4a13      	ldr	r2, [pc, #76]	; (8003a5c <HAL_GPIO_Init+0x320>)
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	3301      	adds	r3, #1
 8003a18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f47f ae91 	bne.w	800374c <HAL_GPIO_Init+0x10>
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	bf00      	nop
 8003a2e:	371c      	adds	r7, #28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	40010000 	.word	0x40010000
 8003a40:	48000400 	.word	0x48000400
 8003a44:	48000800 	.word	0x48000800
 8003a48:	48000c00 	.word	0x48000c00
 8003a4c:	48001000 	.word	0x48001000
 8003a50:	48001400 	.word	0x48001400
 8003a54:	48001800 	.word	0x48001800
 8003a58:	48001c00 	.word	0x48001c00
 8003a5c:	40010400 	.word	0x40010400

08003a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	807b      	strh	r3, [r7, #2]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a70:	787b      	ldrb	r3, [r7, #1]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a76:	887a      	ldrh	r2, [r7, #2]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a7c:	e002      	b.n	8003a84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a7e:	887a      	ldrh	r2, [r7, #2]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a94:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa0:	d102      	bne.n	8003aa8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aa6:	e00b      	b.n	8003ac0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003aa8:	4b08      	ldr	r3, [pc, #32]	; (8003acc <HAL_PWREx_GetVoltageRange+0x3c>)
 8003aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab6:	d102      	bne.n	8003abe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003abc:	e000      	b.n	8003ac0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003abe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40007000 	.word	0x40007000

08003ad0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d141      	bne.n	8003b62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ade:	4b4b      	ldr	r3, [pc, #300]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aea:	d131      	bne.n	8003b50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003aec:	4b47      	ldr	r3, [pc, #284]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003af2:	4a46      	ldr	r2, [pc, #280]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003af8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003afc:	4b43      	ldr	r3, [pc, #268]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b04:	4a41      	ldr	r2, [pc, #260]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b0c:	4b40      	ldr	r3, [pc, #256]	; (8003c10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2232      	movs	r2, #50	; 0x32
 8003b12:	fb02 f303 	mul.w	r3, r2, r3
 8003b16:	4a3f      	ldr	r2, [pc, #252]	; (8003c14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b18:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1c:	0c9b      	lsrs	r3, r3, #18
 8003b1e:	3301      	adds	r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b22:	e002      	b.n	8003b2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b2a:	4b38      	ldr	r3, [pc, #224]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b36:	d102      	bne.n	8003b3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f2      	bne.n	8003b24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b3e:	4b33      	ldr	r3, [pc, #204]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4a:	d158      	bne.n	8003bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e057      	b.n	8003c00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b50:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b56:	4a2d      	ldr	r2, [pc, #180]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b60:	e04d      	b.n	8003bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b68:	d141      	bne.n	8003bee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b6a:	4b28      	ldr	r3, [pc, #160]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b76:	d131      	bne.n	8003bdc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b78:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b7e:	4a23      	ldr	r2, [pc, #140]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b88:	4b20      	ldr	r3, [pc, #128]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b90:	4a1e      	ldr	r2, [pc, #120]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b98:	4b1d      	ldr	r3, [pc, #116]	; (8003c10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2232      	movs	r2, #50	; 0x32
 8003b9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ba2:	4a1c      	ldr	r2, [pc, #112]	; (8003c14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	0c9b      	lsrs	r3, r3, #18
 8003baa:	3301      	adds	r3, #1
 8003bac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bae:	e002      	b.n	8003bb6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bb6:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc2:	d102      	bne.n	8003bca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f2      	bne.n	8003bb0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd6:	d112      	bne.n	8003bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e011      	b.n	8003c00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003be2:	4a0a      	ldr	r2, [pc, #40]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003bec:	e007      	b.n	8003bfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bee:	4b07      	ldr	r3, [pc, #28]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bf6:	4a05      	ldr	r2, [pc, #20]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bfc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	40007000 	.word	0x40007000
 8003c10:	20000000 	.word	0x20000000
 8003c14:	431bde83 	.word	0x431bde83

08003c18 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	4a04      	ldr	r2, [pc, #16]	; (8003c34 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c26:	6053      	str	r3, [r2, #4]
}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40007000 	.word	0x40007000

08003c38 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d102      	bne.n	8003c4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	f000 bc08 	b.w	800445c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c4c:	4b96      	ldr	r3, [pc, #600]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 030c 	and.w	r3, r3, #12
 8003c54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c56:	4b94      	ldr	r3, [pc, #592]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 80e4 	beq.w	8003e36 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d007      	beq.n	8003c84 <HAL_RCC_OscConfig+0x4c>
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2b0c      	cmp	r3, #12
 8003c78:	f040 808b 	bne.w	8003d92 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	f040 8087 	bne.w	8003d92 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c84:	4b88      	ldr	r3, [pc, #544]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCC_OscConfig+0x64>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e3df      	b.n	800445c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1a      	ldr	r2, [r3, #32]
 8003ca0:	4b81      	ldr	r3, [pc, #516]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d004      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x7e>
 8003cac:	4b7e      	ldr	r3, [pc, #504]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cb4:	e005      	b.n	8003cc2 <HAL_RCC_OscConfig+0x8a>
 8003cb6:	4b7c      	ldr	r3, [pc, #496]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d223      	bcs.n	8003d0e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fdcc 	bl	8004868 <RCC_SetFlashLatencyFromMSIRange>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e3c0      	b.n	800445c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cda:	4b73      	ldr	r3, [pc, #460]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a72      	ldr	r2, [pc, #456]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003ce0:	f043 0308 	orr.w	r3, r3, #8
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	4b70      	ldr	r3, [pc, #448]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	496d      	ldr	r1, [pc, #436]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cf8:	4b6b      	ldr	r3, [pc, #428]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	021b      	lsls	r3, r3, #8
 8003d06:	4968      	ldr	r1, [pc, #416]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	604b      	str	r3, [r1, #4]
 8003d0c:	e025      	b.n	8003d5a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d0e:	4b66      	ldr	r3, [pc, #408]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a65      	ldr	r2, [pc, #404]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d14:	f043 0308 	orr.w	r3, r3, #8
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	4b63      	ldr	r3, [pc, #396]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	4960      	ldr	r1, [pc, #384]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d2c:	4b5e      	ldr	r3, [pc, #376]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	495b      	ldr	r1, [pc, #364]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fd8c 	bl	8004868 <RCC_SetFlashLatencyFromMSIRange>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e380      	b.n	800445c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d5a:	f000 fcc1 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	4b51      	ldr	r3, [pc, #324]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	4950      	ldr	r1, [pc, #320]	; (8003eac <HAL_RCC_OscConfig+0x274>)
 8003d6c:	5ccb      	ldrb	r3, [r1, r3]
 8003d6e:	f003 031f 	and.w	r3, r3, #31
 8003d72:	fa22 f303 	lsr.w	r3, r2, r3
 8003d76:	4a4e      	ldr	r2, [pc, #312]	; (8003eb0 <HAL_RCC_OscConfig+0x278>)
 8003d78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d7a:	4b4e      	ldr	r3, [pc, #312]	; (8003eb4 <HAL_RCC_OscConfig+0x27c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe fa42 	bl	8002208 <HAL_InitTick>
 8003d84:	4603      	mov	r3, r0
 8003d86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d052      	beq.n	8003e34 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	e364      	b.n	800445c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d032      	beq.n	8003e00 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d9a:	4b43      	ldr	r3, [pc, #268]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a42      	ldr	r2, [pc, #264]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003da6:	f7fe fa7f 	bl	80022a8 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dae:	f7fe fa7b 	bl	80022a8 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e34d      	b.n	800445c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dc0:	4b39      	ldr	r3, [pc, #228]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dcc:	4b36      	ldr	r3, [pc, #216]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a35      	ldr	r2, [pc, #212]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003dd2:	f043 0308 	orr.w	r3, r3, #8
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	4b33      	ldr	r3, [pc, #204]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	4930      	ldr	r1, [pc, #192]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dea:	4b2f      	ldr	r3, [pc, #188]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	492b      	ldr	r1, [pc, #172]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	604b      	str	r3, [r1, #4]
 8003dfe:	e01a      	b.n	8003e36 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e00:	4b29      	ldr	r3, [pc, #164]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a28      	ldr	r2, [pc, #160]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e06:	f023 0301 	bic.w	r3, r3, #1
 8003e0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fa4c 	bl	80022a8 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e14:	f7fe fa48 	bl	80022a8 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e31a      	b.n	800445c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x1dc>
 8003e32:	e000      	b.n	8003e36 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d073      	beq.n	8003f2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_OscConfig+0x21c>
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2b0c      	cmp	r3, #12
 8003e4c:	d10e      	bne.n	8003e6c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d10b      	bne.n	8003e6c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e54:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d063      	beq.n	8003f28 <HAL_RCC_OscConfig+0x2f0>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d15f      	bne.n	8003f28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e2f7      	b.n	800445c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e74:	d106      	bne.n	8003e84 <HAL_RCC_OscConfig+0x24c>
 8003e76:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a0b      	ldr	r2, [pc, #44]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	e025      	b.n	8003ed0 <HAL_RCC_OscConfig+0x298>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e8c:	d114      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x280>
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a05      	ldr	r2, [pc, #20]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	4b03      	ldr	r3, [pc, #12]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a02      	ldr	r2, [pc, #8]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	e013      	b.n	8003ed0 <HAL_RCC_OscConfig+0x298>
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	08008ef4 	.word	0x08008ef4
 8003eb0:	20000000 	.word	0x20000000
 8003eb4:	20000004 	.word	0x20000004
 8003eb8:	4ba0      	ldr	r3, [pc, #640]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a9f      	ldr	r2, [pc, #636]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec2:	6013      	str	r3, [r2, #0]
 8003ec4:	4b9d      	ldr	r3, [pc, #628]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a9c      	ldr	r2, [pc, #624]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d013      	beq.n	8003f00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fe f9e6 	bl	80022a8 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee0:	f7fe f9e2 	bl	80022a8 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	; 0x64
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e2b4      	b.n	800445c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ef2:	4b92      	ldr	r3, [pc, #584]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x2a8>
 8003efe:	e014      	b.n	8003f2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fe f9d2 	bl	80022a8 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f08:	f7fe f9ce 	bl	80022a8 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b64      	cmp	r3, #100	; 0x64
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e2a0      	b.n	800445c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f1a:	4b88      	ldr	r3, [pc, #544]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x2d0>
 8003f26:	e000      	b.n	8003f2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d060      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d005      	beq.n	8003f48 <HAL_RCC_OscConfig+0x310>
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b0c      	cmp	r3, #12
 8003f40:	d119      	bne.n	8003f76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d116      	bne.n	8003f76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f48:	4b7c      	ldr	r3, [pc, #496]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_RCC_OscConfig+0x328>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e27d      	b.n	800445c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f60:	4b76      	ldr	r3, [pc, #472]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	061b      	lsls	r3, r3, #24
 8003f6e:	4973      	ldr	r1, [pc, #460]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f74:	e040      	b.n	8003ff8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d023      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f7e:	4b6f      	ldr	r3, [pc, #444]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a6e      	ldr	r2, [pc, #440]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8a:	f7fe f98d 	bl	80022a8 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f92:	f7fe f989 	bl	80022a8 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e25b      	b.n	800445c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fa4:	4b65      	ldr	r3, [pc, #404]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb0:	4b62      	ldr	r3, [pc, #392]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	495f      	ldr	r1, [pc, #380]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	604b      	str	r3, [r1, #4]
 8003fc4:	e018      	b.n	8003ff8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fc6:	4b5d      	ldr	r3, [pc, #372]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a5c      	ldr	r2, [pc, #368]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd2:	f7fe f969 	bl	80022a8 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fda:	f7fe f965 	bl	80022a8 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e237      	b.n	800445c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fec:	4b53      	ldr	r3, [pc, #332]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f0      	bne.n	8003fda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d03c      	beq.n	800407e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01c      	beq.n	8004046 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800400c:	4b4b      	ldr	r3, [pc, #300]	; (800413c <HAL_RCC_OscConfig+0x504>)
 800400e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004012:	4a4a      	ldr	r2, [pc, #296]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401c:	f7fe f944 	bl	80022a8 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004024:	f7fe f940 	bl	80022a8 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e212      	b.n	800445c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004036:	4b41      	ldr	r3, [pc, #260]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8004038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0ef      	beq.n	8004024 <HAL_RCC_OscConfig+0x3ec>
 8004044:	e01b      	b.n	800407e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004046:	4b3d      	ldr	r3, [pc, #244]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8004048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800404c:	4a3b      	ldr	r2, [pc, #236]	; (800413c <HAL_RCC_OscConfig+0x504>)
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004056:	f7fe f927 	bl	80022a8 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800405e:	f7fe f923 	bl	80022a8 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e1f5      	b.n	800445c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004070:	4b32      	ldr	r3, [pc, #200]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8004072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1ef      	bne.n	800405e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 80a6 	beq.w	80041d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800408c:	2300      	movs	r3, #0
 800408e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004090:	4b2a      	ldr	r3, [pc, #168]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8004092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10d      	bne.n	80040b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800409c:	4b27      	ldr	r3, [pc, #156]	; (800413c <HAL_RCC_OscConfig+0x504>)
 800409e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a0:	4a26      	ldr	r2, [pc, #152]	; (800413c <HAL_RCC_OscConfig+0x504>)
 80040a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a6:	6593      	str	r3, [r2, #88]	; 0x58
 80040a8:	4b24      	ldr	r3, [pc, #144]	; (800413c <HAL_RCC_OscConfig+0x504>)
 80040aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040b4:	2301      	movs	r3, #1
 80040b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040b8:	4b21      	ldr	r3, [pc, #132]	; (8004140 <HAL_RCC_OscConfig+0x508>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d118      	bne.n	80040f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040c4:	4b1e      	ldr	r3, [pc, #120]	; (8004140 <HAL_RCC_OscConfig+0x508>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <HAL_RCC_OscConfig+0x508>)
 80040ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040d0:	f7fe f8ea 	bl	80022a8 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d8:	f7fe f8e6 	bl	80022a8 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e1b8      	b.n	800445c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ea:	4b15      	ldr	r3, [pc, #84]	; (8004140 <HAL_RCC_OscConfig+0x508>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d108      	bne.n	8004110 <HAL_RCC_OscConfig+0x4d8>
 80040fe:	4b0f      	ldr	r3, [pc, #60]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004104:	4a0d      	ldr	r2, [pc, #52]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800410e:	e029      	b.n	8004164 <HAL_RCC_OscConfig+0x52c>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b05      	cmp	r3, #5
 8004116:	d115      	bne.n	8004144 <HAL_RCC_OscConfig+0x50c>
 8004118:	4b08      	ldr	r3, [pc, #32]	; (800413c <HAL_RCC_OscConfig+0x504>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411e:	4a07      	ldr	r2, [pc, #28]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8004120:	f043 0304 	orr.w	r3, r3, #4
 8004124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004128:	4b04      	ldr	r3, [pc, #16]	; (800413c <HAL_RCC_OscConfig+0x504>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	4a03      	ldr	r2, [pc, #12]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004138:	e014      	b.n	8004164 <HAL_RCC_OscConfig+0x52c>
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
 8004140:	40007000 	.word	0x40007000
 8004144:	4b9d      	ldr	r3, [pc, #628]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414a:	4a9c      	ldr	r2, [pc, #624]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 800414c:	f023 0301 	bic.w	r3, r3, #1
 8004150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004154:	4b99      	ldr	r3, [pc, #612]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415a:	4a98      	ldr	r2, [pc, #608]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 800415c:	f023 0304 	bic.w	r3, r3, #4
 8004160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d016      	beq.n	800419a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416c:	f7fe f89c 	bl	80022a8 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004172:	e00a      	b.n	800418a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004174:	f7fe f898 	bl	80022a8 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004182:	4293      	cmp	r3, r2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e168      	b.n	800445c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800418a:	4b8c      	ldr	r3, [pc, #560]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 800418c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0ed      	beq.n	8004174 <HAL_RCC_OscConfig+0x53c>
 8004198:	e015      	b.n	80041c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419a:	f7fe f885 	bl	80022a8 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041a0:	e00a      	b.n	80041b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a2:	f7fe f881 	bl	80022a8 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e151      	b.n	800445c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041b8:	4b80      	ldr	r3, [pc, #512]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1ed      	bne.n	80041a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041c6:	7ffb      	ldrb	r3, [r7, #31]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d105      	bne.n	80041d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041cc:	4b7b      	ldr	r3, [pc, #492]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 80041ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d0:	4a7a      	ldr	r2, [pc, #488]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 80041d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d03c      	beq.n	800425e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01c      	beq.n	8004226 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041ec:	4b73      	ldr	r3, [pc, #460]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 80041ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041f2:	4a72      	ldr	r2, [pc, #456]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7fe f854 	bl	80022a8 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004204:	f7fe f850 	bl	80022a8 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e122      	b.n	800445c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004216:	4b69      	ldr	r3, [pc, #420]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 8004218:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0ef      	beq.n	8004204 <HAL_RCC_OscConfig+0x5cc>
 8004224:	e01b      	b.n	800425e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004226:	4b65      	ldr	r3, [pc, #404]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 8004228:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800422c:	4a63      	ldr	r2, [pc, #396]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 800422e:	f023 0301 	bic.w	r3, r3, #1
 8004232:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004236:	f7fe f837 	bl	80022a8 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800423e:	f7fe f833 	bl	80022a8 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e105      	b.n	800445c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004250:	4b5a      	ldr	r3, [pc, #360]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 8004252:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1ef      	bne.n	800423e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 80f9 	beq.w	800445a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	2b02      	cmp	r3, #2
 800426e:	f040 80cf 	bne.w	8004410 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004272:	4b52      	ldr	r3, [pc, #328]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f003 0203 	and.w	r2, r3, #3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004282:	429a      	cmp	r2, r3
 8004284:	d12c      	bne.n	80042e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004290:	3b01      	subs	r3, #1
 8004292:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004294:	429a      	cmp	r2, r3
 8004296:	d123      	bne.n	80042e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d11b      	bne.n	80042e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d113      	bne.n	80042e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c2:	085b      	lsrs	r3, r3, #1
 80042c4:	3b01      	subs	r3, #1
 80042c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d109      	bne.n	80042e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	085b      	lsrs	r3, r3, #1
 80042d8:	3b01      	subs	r3, #1
 80042da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042dc:	429a      	cmp	r2, r3
 80042de:	d071      	beq.n	80043c4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	2b0c      	cmp	r3, #12
 80042e4:	d068      	beq.n	80043b8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042e6:	4b35      	ldr	r3, [pc, #212]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d105      	bne.n	80042fe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042f2:	4b32      	ldr	r3, [pc, #200]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e0ac      	b.n	800445c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004302:	4b2e      	ldr	r3, [pc, #184]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a2d      	ldr	r2, [pc, #180]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 8004308:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800430c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800430e:	f7fd ffcb 	bl	80022a8 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004316:	f7fd ffc7 	bl	80022a8 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e099      	b.n	800445c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004328:	4b24      	ldr	r3, [pc, #144]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f0      	bne.n	8004316 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004334:	4b21      	ldr	r3, [pc, #132]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	4b21      	ldr	r3, [pc, #132]	; (80043c0 <HAL_RCC_OscConfig+0x788>)
 800433a:	4013      	ands	r3, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004344:	3a01      	subs	r2, #1
 8004346:	0112      	lsls	r2, r2, #4
 8004348:	4311      	orrs	r1, r2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800434e:	0212      	lsls	r2, r2, #8
 8004350:	4311      	orrs	r1, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004356:	0852      	lsrs	r2, r2, #1
 8004358:	3a01      	subs	r2, #1
 800435a:	0552      	lsls	r2, r2, #21
 800435c:	4311      	orrs	r1, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004362:	0852      	lsrs	r2, r2, #1
 8004364:	3a01      	subs	r2, #1
 8004366:	0652      	lsls	r2, r2, #25
 8004368:	4311      	orrs	r1, r2
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800436e:	06d2      	lsls	r2, r2, #27
 8004370:	430a      	orrs	r2, r1
 8004372:	4912      	ldr	r1, [pc, #72]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 8004374:	4313      	orrs	r3, r2
 8004376:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004378:	4b10      	ldr	r3, [pc, #64]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a0f      	ldr	r2, [pc, #60]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 800437e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004382:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004384:	4b0d      	ldr	r3, [pc, #52]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4a0c      	ldr	r2, [pc, #48]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 800438a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800438e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004390:	f7fd ff8a 	bl	80022a8 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004398:	f7fd ff86 	bl	80022a8 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e058      	b.n	800445c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043aa:	4b04      	ldr	r3, [pc, #16]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043b6:	e050      	b.n	800445a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e04f      	b.n	800445c <HAL_RCC_OscConfig+0x824>
 80043bc:	40021000 	.word	0x40021000
 80043c0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c4:	4b27      	ldr	r3, [pc, #156]	; (8004464 <HAL_RCC_OscConfig+0x82c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d144      	bne.n	800445a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043d0:	4b24      	ldr	r3, [pc, #144]	; (8004464 <HAL_RCC_OscConfig+0x82c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a23      	ldr	r2, [pc, #140]	; (8004464 <HAL_RCC_OscConfig+0x82c>)
 80043d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043dc:	4b21      	ldr	r3, [pc, #132]	; (8004464 <HAL_RCC_OscConfig+0x82c>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	4a20      	ldr	r2, [pc, #128]	; (8004464 <HAL_RCC_OscConfig+0x82c>)
 80043e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043e8:	f7fd ff5e 	bl	80022a8 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f0:	f7fd ff5a 	bl	80022a8 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e02c      	b.n	800445c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004402:	4b18      	ldr	r3, [pc, #96]	; (8004464 <HAL_RCC_OscConfig+0x82c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0x7b8>
 800440e:	e024      	b.n	800445a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	2b0c      	cmp	r3, #12
 8004414:	d01f      	beq.n	8004456 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004416:	4b13      	ldr	r3, [pc, #76]	; (8004464 <HAL_RCC_OscConfig+0x82c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a12      	ldr	r2, [pc, #72]	; (8004464 <HAL_RCC_OscConfig+0x82c>)
 800441c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004422:	f7fd ff41 	bl	80022a8 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442a:	f7fd ff3d 	bl	80022a8 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e00f      	b.n	800445c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800443c:	4b09      	ldr	r3, [pc, #36]	; (8004464 <HAL_RCC_OscConfig+0x82c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f0      	bne.n	800442a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004448:	4b06      	ldr	r3, [pc, #24]	; (8004464 <HAL_RCC_OscConfig+0x82c>)
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	4905      	ldr	r1, [pc, #20]	; (8004464 <HAL_RCC_OscConfig+0x82c>)
 800444e:	4b06      	ldr	r3, [pc, #24]	; (8004468 <HAL_RCC_OscConfig+0x830>)
 8004450:	4013      	ands	r3, r2
 8004452:	60cb      	str	r3, [r1, #12]
 8004454:	e001      	b.n	800445a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3720      	adds	r7, #32
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40021000 	.word	0x40021000
 8004468:	feeefffc 	.word	0xfeeefffc

0800446c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e11d      	b.n	80046c0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004484:	4b90      	ldr	r3, [pc, #576]	; (80046c8 <HAL_RCC_ClockConfig+0x25c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d910      	bls.n	80044b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004492:	4b8d      	ldr	r3, [pc, #564]	; (80046c8 <HAL_RCC_ClockConfig+0x25c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 020f 	bic.w	r2, r3, #15
 800449a:	498b      	ldr	r1, [pc, #556]	; (80046c8 <HAL_RCC_ClockConfig+0x25c>)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a2:	4b89      	ldr	r3, [pc, #548]	; (80046c8 <HAL_RCC_ClockConfig+0x25c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e105      	b.n	80046c0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d010      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	4b81      	ldr	r3, [pc, #516]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d908      	bls.n	80044e2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d0:	4b7e      	ldr	r3, [pc, #504]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	497b      	ldr	r1, [pc, #492]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d079      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d11e      	bne.n	8004534 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f6:	4b75      	ldr	r3, [pc, #468]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e0dc      	b.n	80046c0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004506:	f000 fa09 	bl	800491c <RCC_GetSysClockFreqFromPLLSource>
 800450a:	4603      	mov	r3, r0
 800450c:	4a70      	ldr	r2, [pc, #448]	; (80046d0 <HAL_RCC_ClockConfig+0x264>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d946      	bls.n	80045a0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004512:	4b6e      	ldr	r3, [pc, #440]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d140      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800451e:	4b6b      	ldr	r3, [pc, #428]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004526:	4a69      	ldr	r2, [pc, #420]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 8004528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800452c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800452e:	2380      	movs	r3, #128	; 0x80
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e035      	b.n	80045a0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d107      	bne.n	800454c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800453c:	4b63      	ldr	r3, [pc, #396]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d115      	bne.n	8004574 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0b9      	b.n	80046c0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d107      	bne.n	8004564 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004554:	4b5d      	ldr	r3, [pc, #372]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d109      	bne.n	8004574 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0ad      	b.n	80046c0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004564:	4b59      	ldr	r3, [pc, #356]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0a5      	b.n	80046c0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004574:	f000 f8b4 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
 8004578:	4603      	mov	r3, r0
 800457a:	4a55      	ldr	r2, [pc, #340]	; (80046d0 <HAL_RCC_ClockConfig+0x264>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d90f      	bls.n	80045a0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004580:	4b52      	ldr	r3, [pc, #328]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d109      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800458c:	4b4f      	ldr	r3, [pc, #316]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004594:	4a4d      	ldr	r2, [pc, #308]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 8004596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800459c:	2380      	movs	r3, #128	; 0x80
 800459e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045a0:	4b4a      	ldr	r3, [pc, #296]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f023 0203 	bic.w	r2, r3, #3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	4947      	ldr	r1, [pc, #284]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b2:	f7fd fe79 	bl	80022a8 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b8:	e00a      	b.n	80045d0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ba:	f7fd fe75 	bl	80022a8 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e077      	b.n	80046c0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d0:	4b3e      	ldr	r3, [pc, #248]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 020c 	and.w	r2, r3, #12
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	429a      	cmp	r2, r3
 80045e0:	d1eb      	bne.n	80045ba <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b80      	cmp	r3, #128	; 0x80
 80045e6:	d105      	bne.n	80045f4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045e8:	4b38      	ldr	r3, [pc, #224]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4a37      	ldr	r2, [pc, #220]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 80045ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045f2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d010      	beq.n	8004622 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	4b31      	ldr	r3, [pc, #196]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800460c:	429a      	cmp	r2, r3
 800460e:	d208      	bcs.n	8004622 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004610:	4b2e      	ldr	r3, [pc, #184]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	492b      	ldr	r1, [pc, #172]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 800461e:	4313      	orrs	r3, r2
 8004620:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004622:	4b29      	ldr	r3, [pc, #164]	; (80046c8 <HAL_RCC_ClockConfig+0x25c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d210      	bcs.n	8004652 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004630:	4b25      	ldr	r3, [pc, #148]	; (80046c8 <HAL_RCC_ClockConfig+0x25c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f023 020f 	bic.w	r2, r3, #15
 8004638:	4923      	ldr	r1, [pc, #140]	; (80046c8 <HAL_RCC_ClockConfig+0x25c>)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	4313      	orrs	r3, r2
 800463e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004640:	4b21      	ldr	r3, [pc, #132]	; (80046c8 <HAL_RCC_ClockConfig+0x25c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 030f 	and.w	r3, r3, #15
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d001      	beq.n	8004652 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e036      	b.n	80046c0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800465e:	4b1b      	ldr	r3, [pc, #108]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	4918      	ldr	r1, [pc, #96]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 800466c:	4313      	orrs	r3, r2
 800466e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b00      	cmp	r3, #0
 800467a:	d009      	beq.n	8004690 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800467c:	4b13      	ldr	r3, [pc, #76]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4910      	ldr	r1, [pc, #64]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 800468c:	4313      	orrs	r3, r2
 800468e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004690:	f000 f826 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
 8004694:	4602      	mov	r2, r0
 8004696:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <HAL_RCC_ClockConfig+0x260>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	091b      	lsrs	r3, r3, #4
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	490c      	ldr	r1, [pc, #48]	; (80046d4 <HAL_RCC_ClockConfig+0x268>)
 80046a2:	5ccb      	ldrb	r3, [r1, r3]
 80046a4:	f003 031f 	and.w	r3, r3, #31
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ac:	4a0a      	ldr	r2, [pc, #40]	; (80046d8 <HAL_RCC_ClockConfig+0x26c>)
 80046ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046b0:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <HAL_RCC_ClockConfig+0x270>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fd fda7 	bl	8002208 <HAL_InitTick>
 80046ba:	4603      	mov	r3, r0
 80046bc:	73fb      	strb	r3, [r7, #15]

  return status;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40022000 	.word	0x40022000
 80046cc:	40021000 	.word	0x40021000
 80046d0:	04c4b400 	.word	0x04c4b400
 80046d4:	08008ef4 	.word	0x08008ef4
 80046d8:	20000000 	.word	0x20000000
 80046dc:	20000004 	.word	0x20000004

080046e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b089      	sub	sp, #36	; 0x24
 80046e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	2300      	movs	r3, #0
 80046ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ee:	4b3e      	ldr	r3, [pc, #248]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 030c 	and.w	r3, r3, #12
 80046f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046f8:	4b3b      	ldr	r3, [pc, #236]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f003 0303 	and.w	r3, r3, #3
 8004700:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_RCC_GetSysClockFreq+0x34>
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	2b0c      	cmp	r3, #12
 800470c:	d121      	bne.n	8004752 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d11e      	bne.n	8004752 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004714:	4b34      	ldr	r3, [pc, #208]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d107      	bne.n	8004730 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004720:	4b31      	ldr	r3, [pc, #196]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004726:	0a1b      	lsrs	r3, r3, #8
 8004728:	f003 030f 	and.w	r3, r3, #15
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	e005      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004730:	4b2d      	ldr	r3, [pc, #180]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	091b      	lsrs	r3, r3, #4
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800473c:	4a2b      	ldr	r2, [pc, #172]	; (80047ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004744:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10d      	bne.n	8004768 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004750:	e00a      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	2b04      	cmp	r3, #4
 8004756:	d102      	bne.n	800475e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004758:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800475a:	61bb      	str	r3, [r7, #24]
 800475c:	e004      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d101      	bne.n	8004768 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004764:	4b23      	ldr	r3, [pc, #140]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004766:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	2b0c      	cmp	r3, #12
 800476c:	d134      	bne.n	80047d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800476e:	4b1e      	ldr	r3, [pc, #120]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d003      	beq.n	8004786 <HAL_RCC_GetSysClockFreq+0xa6>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b03      	cmp	r3, #3
 8004782:	d003      	beq.n	800478c <HAL_RCC_GetSysClockFreq+0xac>
 8004784:	e005      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004786:	4b1a      	ldr	r3, [pc, #104]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004788:	617b      	str	r3, [r7, #20]
      break;
 800478a:	e005      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800478c:	4b19      	ldr	r3, [pc, #100]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800478e:	617b      	str	r3, [r7, #20]
      break;
 8004790:	e002      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	617b      	str	r3, [r7, #20]
      break;
 8004796:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004798:	4b13      	ldr	r3, [pc, #76]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	3301      	adds	r3, #1
 80047a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047a6:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	fb03 f202 	mul.w	r2, r3, r2
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047be:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	0e5b      	lsrs	r3, r3, #25
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	3301      	adds	r3, #1
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047d8:	69bb      	ldr	r3, [r7, #24]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3724      	adds	r7, #36	; 0x24
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40021000 	.word	0x40021000
 80047ec:	08008f0c 	.word	0x08008f0c
 80047f0:	00f42400 	.word	0x00f42400
 80047f4:	007a1200 	.word	0x007a1200

080047f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047fc:	4b03      	ldr	r3, [pc, #12]	; (800480c <HAL_RCC_GetHCLKFreq+0x14>)
 80047fe:	681b      	ldr	r3, [r3, #0]
}
 8004800:	4618      	mov	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	20000000 	.word	0x20000000

08004810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004814:	f7ff fff0 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 8004818:	4602      	mov	r2, r0
 800481a:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_RCC_GetPCLK1Freq+0x24>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	0a1b      	lsrs	r3, r3, #8
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	4904      	ldr	r1, [pc, #16]	; (8004838 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004826:	5ccb      	ldrb	r3, [r1, r3]
 8004828:	f003 031f 	and.w	r3, r3, #31
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40021000 	.word	0x40021000
 8004838:	08008f04 	.word	0x08008f04

0800483c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004840:	f7ff ffda 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 8004844:	4602      	mov	r2, r0
 8004846:	4b06      	ldr	r3, [pc, #24]	; (8004860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	0adb      	lsrs	r3, r3, #11
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	4904      	ldr	r1, [pc, #16]	; (8004864 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004852:	5ccb      	ldrb	r3, [r1, r3]
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40021000 	.word	0x40021000
 8004864:	08008f04 	.word	0x08008f04

08004868 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004870:	2300      	movs	r3, #0
 8004872:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004874:	4b27      	ldr	r3, [pc, #156]	; (8004914 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004880:	f7ff f906 	bl	8003a90 <HAL_PWREx_GetVoltageRange>
 8004884:	6178      	str	r0, [r7, #20]
 8004886:	e014      	b.n	80048b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004888:	4b22      	ldr	r3, [pc, #136]	; (8004914 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800488a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488c:	4a21      	ldr	r2, [pc, #132]	; (8004914 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800488e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004892:	6593      	str	r3, [r2, #88]	; 0x58
 8004894:	4b1f      	ldr	r3, [pc, #124]	; (8004914 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048a0:	f7ff f8f6 	bl	8003a90 <HAL_PWREx_GetVoltageRange>
 80048a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048a6:	4b1b      	ldr	r3, [pc, #108]	; (8004914 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048aa:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048b8:	d10b      	bne.n	80048d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b80      	cmp	r3, #128	; 0x80
 80048be:	d913      	bls.n	80048e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2ba0      	cmp	r3, #160	; 0xa0
 80048c4:	d902      	bls.n	80048cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048c6:	2302      	movs	r3, #2
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	e00d      	b.n	80048e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048cc:	2301      	movs	r3, #1
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	e00a      	b.n	80048e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b7f      	cmp	r3, #127	; 0x7f
 80048d6:	d902      	bls.n	80048de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80048d8:	2302      	movs	r3, #2
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	e004      	b.n	80048e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b70      	cmp	r3, #112	; 0x70
 80048e2:	d101      	bne.n	80048e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048e4:	2301      	movs	r3, #1
 80048e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048e8:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f023 020f 	bic.w	r2, r3, #15
 80048f0:	4909      	ldr	r1, [pc, #36]	; (8004918 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048f8:	4b07      	ldr	r3, [pc, #28]	; (8004918 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	429a      	cmp	r2, r3
 8004904:	d001      	beq.n	800490a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40021000 	.word	0x40021000
 8004918:	40022000 	.word	0x40022000

0800491c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004922:	4b2d      	ldr	r3, [pc, #180]	; (80049d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b03      	cmp	r3, #3
 8004930:	d00b      	beq.n	800494a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b03      	cmp	r3, #3
 8004936:	d825      	bhi.n	8004984 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d008      	beq.n	8004950 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b02      	cmp	r3, #2
 8004942:	d11f      	bne.n	8004984 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004944:	4b25      	ldr	r3, [pc, #148]	; (80049dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004946:	613b      	str	r3, [r7, #16]
    break;
 8004948:	e01f      	b.n	800498a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800494a:	4b25      	ldr	r3, [pc, #148]	; (80049e0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800494c:	613b      	str	r3, [r7, #16]
    break;
 800494e:	e01c      	b.n	800498a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004950:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d107      	bne.n	800496c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800495c:	4b1e      	ldr	r3, [pc, #120]	; (80049d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800495e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004962:	0a1b      	lsrs	r3, r3, #8
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	e005      	b.n	8004978 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800496c:	4b1a      	ldr	r3, [pc, #104]	; (80049d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	091b      	lsrs	r3, r3, #4
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004978:	4a1a      	ldr	r2, [pc, #104]	; (80049e4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004980:	613b      	str	r3, [r7, #16]
    break;
 8004982:	e002      	b.n	800498a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004984:	2300      	movs	r3, #0
 8004986:	613b      	str	r3, [r7, #16]
    break;
 8004988:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800498a:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	3301      	adds	r3, #1
 8004996:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004998:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	fb03 f202 	mul.w	r2, r3, r2
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ae:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	0e5b      	lsrs	r3, r3, #25
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	3301      	adds	r3, #1
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80049ca:	683b      	ldr	r3, [r7, #0]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	40021000 	.word	0x40021000
 80049dc:	00f42400 	.word	0x00f42400
 80049e0:	007a1200 	.word	0x007a1200
 80049e4:	08008f0c 	.word	0x08008f0c

080049e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049f0:	2300      	movs	r3, #0
 80049f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049f4:	2300      	movs	r3, #0
 80049f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d040      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a08:	2b80      	cmp	r3, #128	; 0x80
 8004a0a:	d02a      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a0c:	2b80      	cmp	r3, #128	; 0x80
 8004a0e:	d825      	bhi.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a10:	2b60      	cmp	r3, #96	; 0x60
 8004a12:	d026      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a14:	2b60      	cmp	r3, #96	; 0x60
 8004a16:	d821      	bhi.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a18:	2b40      	cmp	r3, #64	; 0x40
 8004a1a:	d006      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d81d      	bhi.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d009      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004a24:	2b20      	cmp	r3, #32
 8004a26:	d010      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004a28:	e018      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a2a:	4b89      	ldr	r3, [pc, #548]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	4a88      	ldr	r2, [pc, #544]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a34:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a36:	e015      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f001 fa24 	bl	8005e8c <RCCEx_PLLSAI1_Config>
 8004a44:	4603      	mov	r3, r0
 8004a46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a48:	e00c      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3320      	adds	r3, #32
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f001 fb0f 	bl	8006074 <RCCEx_PLLSAI2_Config>
 8004a56:	4603      	mov	r3, r0
 8004a58:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a5a:	e003      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	74fb      	strb	r3, [r7, #19]
      break;
 8004a60:	e000      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004a62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a64:	7cfb      	ldrb	r3, [r7, #19]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10b      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a6a:	4b79      	ldr	r3, [pc, #484]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a70:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a78:	4975      	ldr	r1, [pc, #468]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004a80:	e001      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a82:	7cfb      	ldrb	r3, [r7, #19]
 8004a84:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d047      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a9a:	d030      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa0:	d82a      	bhi.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004aa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aa6:	d02a      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004aa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aac:	d824      	bhi.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab2:	d008      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab8:	d81e      	bhi.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac2:	d010      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ac4:	e018      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ac6:	4b62      	ldr	r3, [pc, #392]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	4a61      	ldr	r2, [pc, #388]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ad2:	e015      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	2100      	movs	r1, #0
 8004ada:	4618      	mov	r0, r3
 8004adc:	f001 f9d6 	bl	8005e8c <RCCEx_PLLSAI1_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ae4:	e00c      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3320      	adds	r3, #32
 8004aea:	2100      	movs	r1, #0
 8004aec:	4618      	mov	r0, r3
 8004aee:	f001 fac1 	bl	8006074 <RCCEx_PLLSAI2_Config>
 8004af2:	4603      	mov	r3, r0
 8004af4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004af6:	e003      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	74fb      	strb	r3, [r7, #19]
      break;
 8004afc:	e000      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b00:	7cfb      	ldrb	r3, [r7, #19]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10b      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b06:	4b52      	ldr	r3, [pc, #328]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b14:	494e      	ldr	r1, [pc, #312]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004b1c:	e001      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1e:	7cfb      	ldrb	r3, [r7, #19]
 8004b20:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 809f 	beq.w	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b30:	2300      	movs	r3, #0
 8004b32:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b34:	4b46      	ldr	r3, [pc, #280]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004b40:	2301      	movs	r3, #1
 8004b42:	e000      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004b44:	2300      	movs	r3, #0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00d      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4a:	4b41      	ldr	r3, [pc, #260]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4e:	4a40      	ldr	r2, [pc, #256]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b54:	6593      	str	r3, [r2, #88]	; 0x58
 8004b56:	4b3e      	ldr	r3, [pc, #248]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5e:	60bb      	str	r3, [r7, #8]
 8004b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b62:	2301      	movs	r3, #1
 8004b64:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b66:	4b3b      	ldr	r3, [pc, #236]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a3a      	ldr	r2, [pc, #232]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b72:	f7fd fb99 	bl	80022a8 <HAL_GetTick>
 8004b76:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b78:	e009      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7a:	f7fd fb95 	bl	80022a8 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d902      	bls.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	74fb      	strb	r3, [r7, #19]
        break;
 8004b8c:	e005      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b8e:	4b31      	ldr	r3, [pc, #196]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0ef      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004b9a:	7cfb      	ldrb	r3, [r7, #19]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d15b      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ba0:	4b2b      	ldr	r3, [pc, #172]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004baa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01f      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d019      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bbe:	4b24      	ldr	r3, [pc, #144]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bca:	4b21      	ldr	r3, [pc, #132]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd0:	4a1f      	ldr	r2, [pc, #124]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bda:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be0:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bea:	4a19      	ldr	r2, [pc, #100]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d016      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fd fb54 	bl	80022a8 <HAL_GetTick>
 8004c00:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c02:	e00b      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c04:	f7fd fb50 	bl	80022a8 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d902      	bls.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	74fb      	strb	r3, [r7, #19]
            break;
 8004c1a:	e006      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0ec      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004c2a:	7cfb      	ldrb	r3, [r7, #19]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10c      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c30:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c40:	4903      	ldr	r1, [pc, #12]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c48:	e008      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c4a:	7cfb      	ldrb	r3, [r7, #19]
 8004c4c:	74bb      	strb	r3, [r7, #18]
 8004c4e:	e005      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004c50:	40021000 	.word	0x40021000
 8004c54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c58:	7cfb      	ldrb	r3, [r7, #19]
 8004c5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c5c:	7c7b      	ldrb	r3, [r7, #17]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d105      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c62:	4ba0      	ldr	r3, [pc, #640]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c66:	4a9f      	ldr	r2, [pc, #636]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c7a:	4b9a      	ldr	r3, [pc, #616]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c80:	f023 0203 	bic.w	r2, r3, #3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c88:	4996      	ldr	r1, [pc, #600]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c9c:	4b91      	ldr	r3, [pc, #580]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f023 020c 	bic.w	r2, r3, #12
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	498e      	ldr	r1, [pc, #568]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cbe:	4b89      	ldr	r3, [pc, #548]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ccc:	4985      	ldr	r1, [pc, #532]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ce0:	4b80      	ldr	r3, [pc, #512]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cee:	497d      	ldr	r1, [pc, #500]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0310 	and.w	r3, r3, #16
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d02:	4b78      	ldr	r3, [pc, #480]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d10:	4974      	ldr	r1, [pc, #464]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d24:	4b6f      	ldr	r3, [pc, #444]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d32:	496c      	ldr	r1, [pc, #432]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d46:	4b67      	ldr	r3, [pc, #412]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d54:	4963      	ldr	r1, [pc, #396]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d68:	4b5e      	ldr	r3, [pc, #376]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d76:	495b      	ldr	r1, [pc, #364]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d8a:	4b56      	ldr	r3, [pc, #344]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d98:	4952      	ldr	r1, [pc, #328]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dac:	4b4d      	ldr	r3, [pc, #308]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dba:	494a      	ldr	r1, [pc, #296]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dce:	4b45      	ldr	r3, [pc, #276]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ddc:	4941      	ldr	r1, [pc, #260]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004df0:	4b3c      	ldr	r3, [pc, #240]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004df6:	f023 0203 	bic.w	r2, r3, #3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfe:	4939      	ldr	r1, [pc, #228]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d028      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e12:	4b34      	ldr	r3, [pc, #208]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e20:	4930      	ldr	r1, [pc, #192]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e30:	d106      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e32:	4b2c      	ldr	r3, [pc, #176]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	4a2b      	ldr	r2, [pc, #172]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e3c:	60d3      	str	r3, [r2, #12]
 8004e3e:	e011      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e48:	d10c      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4618      	mov	r0, r3
 8004e52:	f001 f81b 	bl	8005e8c <RCCEx_PLLSAI1_Config>
 8004e56:	4603      	mov	r3, r0
 8004e58:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e5a:	7cfb      	ldrb	r3, [r7, #19]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004e60:	7cfb      	ldrb	r3, [r7, #19]
 8004e62:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d04d      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e78:	d108      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004e7a:	4b1a      	ldr	r3, [pc, #104]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e80:	4a18      	ldr	r2, [pc, #96]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e86:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e8a:	e012      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e8c:	4b15      	ldr	r3, [pc, #84]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e92:	4a14      	ldr	r2, [pc, #80]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e98:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e9c:	4b11      	ldr	r3, [pc, #68]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eaa:	490e      	ldr	r1, [pc, #56]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eba:	d106      	bne.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ebc:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec6:	60d3      	str	r3, [r2, #12]
 8004ec8:	e020      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ed2:	d109      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ed4:	4b03      	ldr	r3, [pc, #12]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4a02      	ldr	r2, [pc, #8]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ede:	60d3      	str	r3, [r2, #12]
 8004ee0:	e014      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004ee2:	bf00      	nop
 8004ee4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ef0:	d10c      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 ffc7 	bl	8005e8c <RCCEx_PLLSAI1_Config>
 8004efe:	4603      	mov	r3, r0
 8004f00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f02:	7cfb      	ldrb	r3, [r7, #19]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004f08:	7cfb      	ldrb	r3, [r7, #19]
 8004f0a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d028      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f18:	4b4a      	ldr	r3, [pc, #296]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f26:	4947      	ldr	r1, [pc, #284]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f36:	d106      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f38:	4b42      	ldr	r3, [pc, #264]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4a41      	ldr	r2, [pc, #260]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f42:	60d3      	str	r3, [r2, #12]
 8004f44:	e011      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f4e:	d10c      	bne.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3304      	adds	r3, #4
 8004f54:	2101      	movs	r1, #1
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 ff98 	bl	8005e8c <RCCEx_PLLSAI1_Config>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f60:	7cfb      	ldrb	r3, [r7, #19]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004f66:	7cfb      	ldrb	r3, [r7, #19]
 8004f68:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d01e      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f76:	4b33      	ldr	r3, [pc, #204]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f86:	492f      	ldr	r1, [pc, #188]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	2102      	movs	r1, #2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 ff73 	bl	8005e8c <RCCEx_PLLSAI1_Config>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004faa:	7cfb      	ldrb	r3, [r7, #19]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004fb0:	7cfb      	ldrb	r3, [r7, #19]
 8004fb2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00b      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fc0:	4b20      	ldr	r3, [pc, #128]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fc6:	f023 0204 	bic.w	r2, r3, #4
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd0:	491c      	ldr	r1, [pc, #112]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00b      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004fe4:	4b17      	ldr	r3, [pc, #92]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fea:	f023 0218 	bic.w	r2, r3, #24
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff4:	4913      	ldr	r1, [pc, #76]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d017      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005008:	4b0e      	ldr	r3, [pc, #56]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800500a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800500e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005018:	490a      	ldr	r1, [pc, #40]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005026:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800502a:	d105      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800502c:	4b05      	ldr	r3, [pc, #20]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	4a04      	ldr	r2, [pc, #16]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005036:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005038:	7cbb      	ldrb	r3, [r7, #18]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40021000 	.word	0x40021000

08005048 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800505a:	d13e      	bne.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800505c:	4bb6      	ldr	r3, [pc, #728]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005066:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800506e:	d028      	beq.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005076:	f200 86f4 	bhi.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005080:	d005      	beq.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005088:	d00e      	beq.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800508a:	f000 beea 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800508e:	4baa      	ldr	r3, [pc, #680]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b02      	cmp	r3, #2
 800509a:	f040 86e4 	bne.w	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800509e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050a2:	61fb      	str	r3, [r7, #28]
      break;
 80050a4:	f000 bedf 	b.w	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80050a8:	4ba3      	ldr	r3, [pc, #652]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	f040 86d9 	bne.w	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80050b8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80050bc:	61fb      	str	r3, [r7, #28]
      break;
 80050be:	f000 bed4 	b.w	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80050c2:	4b9d      	ldr	r3, [pc, #628]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050ce:	f040 86ce 	bne.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 80050d2:	4b9a      	ldr	r3, [pc, #616]	; (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80050d4:	61fb      	str	r3, [r7, #28]
      break;
 80050d6:	f000 beca 	b.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050da:	4b97      	ldr	r3, [pc, #604]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d036      	beq.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d840      	bhi.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d003      	beq.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d020      	beq.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80050fc:	e039      	b.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80050fe:	4b8e      	ldr	r3, [pc, #568]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b02      	cmp	r3, #2
 8005108:	d116      	bne.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800510a:	4b8b      	ldr	r3, [pc, #556]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005116:	4b88      	ldr	r3, [pc, #544]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	091b      	lsrs	r3, r3, #4
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	e005      	b.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005122:	4b85      	ldr	r3, [pc, #532]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005128:	0a1b      	lsrs	r3, r3, #8
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	4a84      	ldr	r2, [pc, #528]	; (8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005134:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005136:	e01f      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	61bb      	str	r3, [r7, #24]
      break;
 800513c:	e01c      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800513e:	4b7e      	ldr	r3, [pc, #504]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514a:	d102      	bne.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800514c:	4b7d      	ldr	r3, [pc, #500]	; (8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800514e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005150:	e012      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	61bb      	str	r3, [r7, #24]
      break;
 8005156:	e00f      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005158:	4b77      	ldr	r3, [pc, #476]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005160:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005164:	d102      	bne.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005166:	4b78      	ldr	r3, [pc, #480]	; (8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005168:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800516a:	e005      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	61bb      	str	r3, [r7, #24]
      break;
 8005170:	e002      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	61bb      	str	r3, [r7, #24]
      break;
 8005176:	bf00      	nop
    }

    switch(PeriphClk)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800517e:	f000 8606 	beq.w	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005188:	f200 8673 	bhi.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005192:	f000 8469 	beq.w	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800519c:	f200 8669 	bhi.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051a6:	f000 8531 	beq.w	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051b0:	f200 865f 	bhi.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051ba:	f000 8187 	beq.w	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051c4:	f200 8655 	bhi.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051ce:	f000 80cd 	beq.w	800536c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051d8:	f200 864b 	bhi.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e2:	f000 8430 	beq.w	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ec:	f200 8641 	bhi.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051f6:	f000 83e4 	beq.w	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005200:	f200 8637 	bhi.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800520a:	f000 80af 	beq.w	800536c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005214:	f200 862d 	bhi.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800521e:	f000 809d 	beq.w	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005228:	f200 8623 	bhi.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005232:	f000 808b 	beq.w	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800523c:	f200 8619 	bhi.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005246:	f000 8554 	beq.w	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005250:	f200 860f 	bhi.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800525a:	f000 8500 	beq.w	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005264:	f200 8605 	bhi.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800526e:	f000 84a1 	beq.w	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005278:	f200 85fb 	bhi.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b80      	cmp	r3, #128	; 0x80
 8005280:	f000 846c 	beq.w	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b80      	cmp	r3, #128	; 0x80
 8005288:	f200 85f3 	bhi.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b20      	cmp	r3, #32
 8005290:	d84c      	bhi.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 85ec 	beq.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3b01      	subs	r3, #1
 800529e:	2b1f      	cmp	r3, #31
 80052a0:	f200 85e7 	bhi.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80052a4:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080056c1 	.word	0x080056c1
 80052b0:	0800572f 	.word	0x0800572f
 80052b4:	08005e73 	.word	0x08005e73
 80052b8:	080057c3 	.word	0x080057c3
 80052bc:	08005e73 	.word	0x08005e73
 80052c0:	08005e73 	.word	0x08005e73
 80052c4:	08005e73 	.word	0x08005e73
 80052c8:	0800583b 	.word	0x0800583b
 80052cc:	08005e73 	.word	0x08005e73
 80052d0:	08005e73 	.word	0x08005e73
 80052d4:	08005e73 	.word	0x08005e73
 80052d8:	08005e73 	.word	0x08005e73
 80052dc:	08005e73 	.word	0x08005e73
 80052e0:	08005e73 	.word	0x08005e73
 80052e4:	08005e73 	.word	0x08005e73
 80052e8:	080058bf 	.word	0x080058bf
 80052ec:	08005e73 	.word	0x08005e73
 80052f0:	08005e73 	.word	0x08005e73
 80052f4:	08005e73 	.word	0x08005e73
 80052f8:	08005e73 	.word	0x08005e73
 80052fc:	08005e73 	.word	0x08005e73
 8005300:	08005e73 	.word	0x08005e73
 8005304:	08005e73 	.word	0x08005e73
 8005308:	08005e73 	.word	0x08005e73
 800530c:	08005e73 	.word	0x08005e73
 8005310:	08005e73 	.word	0x08005e73
 8005314:	08005e73 	.word	0x08005e73
 8005318:	08005e73 	.word	0x08005e73
 800531c:	08005e73 	.word	0x08005e73
 8005320:	08005e73 	.word	0x08005e73
 8005324:	08005e73 	.word	0x08005e73
 8005328:	08005941 	.word	0x08005941
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b40      	cmp	r3, #64	; 0x40
 8005330:	f000 83e8 	beq.w	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005334:	f000 bd9d 	b.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005338:	40021000 	.word	0x40021000
 800533c:	0003d090 	.word	0x0003d090
 8005340:	08008f0c 	.word	0x08008f0c
 8005344:	00f42400 	.word	0x00f42400
 8005348:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800534c:	69b9      	ldr	r1, [r7, #24]
 800534e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005352:	f000 ff83 	bl	800625c <RCCEx_GetSAIxPeriphCLKFreq>
 8005356:	61f8      	str	r0, [r7, #28]
      break;
 8005358:	f000 bd8e 	b.w	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800535c:	69b9      	ldr	r1, [r7, #24]
 800535e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005362:	f000 ff7b 	bl	800625c <RCCEx_GetSAIxPeriphCLKFreq>
 8005366:	61f8      	str	r0, [r7, #28]
      break;
 8005368:	f000 bd86 	b.w	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800536c:	4b9a      	ldr	r3, [pc, #616]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005372:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800537e:	d015      	beq.n	80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005386:	f200 8092 	bhi.w	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005390:	d029      	beq.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005398:	f200 8089 	bhi.w	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d07b      	beq.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053a8:	d04a      	beq.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 80053aa:	e080      	b.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80053ac:	4b8a      	ldr	r3, [pc, #552]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d17d      	bne.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80053b8:	4b87      	ldr	r3, [pc, #540]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80053c4:	4b84      	ldr	r3, [pc, #528]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	e005      	b.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80053d0:	4b81      	ldr	r3, [pc, #516]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053d6:	0a1b      	lsrs	r3, r3, #8
 80053d8:	f003 030f 	and.w	r3, r3, #15
 80053dc:	4a7f      	ldr	r2, [pc, #508]	; (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80053de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053e2:	61fb      	str	r3, [r7, #28]
          break;
 80053e4:	e066      	b.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80053e6:	4b7c      	ldr	r3, [pc, #496]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053f2:	d162      	bne.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80053f4:	4b78      	ldr	r3, [pc, #480]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005400:	d15b      	bne.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005402:	4b75      	ldr	r3, [pc, #468]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	0a1b      	lsrs	r3, r3, #8
 8005408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800540c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	fb03 f202 	mul.w	r2, r3, r2
 8005416:	4b70      	ldr	r3, [pc, #448]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	091b      	lsrs	r3, r3, #4
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	3301      	adds	r3, #1
 8005422:	fbb2 f3f3 	udiv	r3, r2, r3
 8005426:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005428:	4b6b      	ldr	r3, [pc, #428]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	0d5b      	lsrs	r3, r3, #21
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	3301      	adds	r3, #1
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	fbb2 f3f3 	udiv	r3, r2, r3
 800543c:	61fb      	str	r3, [r7, #28]
          break;
 800543e:	e03c      	b.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005440:	4b65      	ldr	r3, [pc, #404]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005448:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800544c:	d138      	bne.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800544e:	4b62      	ldr	r3, [pc, #392]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800545a:	d131      	bne.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800545c:	4b5e      	ldr	r3, [pc, #376]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	0a1b      	lsrs	r3, r3, #8
 8005462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005466:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	fb03 f202 	mul.w	r2, r3, r2
 8005470:	4b59      	ldr	r3, [pc, #356]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	091b      	lsrs	r3, r3, #4
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	3301      	adds	r3, #1
 800547c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005480:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005482:	4b55      	ldr	r3, [pc, #340]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	0d5b      	lsrs	r3, r3, #21
 8005488:	f003 0303 	and.w	r3, r3, #3
 800548c:	3301      	adds	r3, #1
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	fbb2 f3f3 	udiv	r3, r2, r3
 8005496:	61fb      	str	r3, [r7, #28]
          break;
 8005498:	e012      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800549a:	4b4f      	ldr	r3, [pc, #316]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800549c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d10e      	bne.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 80054a8:	4b4d      	ldr	r3, [pc, #308]	; (80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80054aa:	61fb      	str	r3, [r7, #28]
          break;
 80054ac:	e00b      	b.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80054ae:	bf00      	nop
 80054b0:	f000 bce2 	b.w	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054b4:	bf00      	nop
 80054b6:	f000 bcdf 	b.w	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054ba:	bf00      	nop
 80054bc:	f000 bcdc 	b.w	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054c0:	bf00      	nop
 80054c2:	f000 bcd9 	b.w	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054c6:	bf00      	nop
        break;
 80054c8:	f000 bcd6 	b.w	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80054cc:	4b42      	ldr	r3, [pc, #264]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054da:	d13d      	bne.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80054dc:	4b3e      	ldr	r3, [pc, #248]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054e8:	f040 84c5 	bne.w	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80054ec:	4b3a      	ldr	r3, [pc, #232]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f8:	f040 84bd 	bne.w	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80054fc:	4b36      	ldr	r3, [pc, #216]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	0a1b      	lsrs	r3, r3, #8
 8005502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005506:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	fb03 f202 	mul.w	r2, r3, r2
 8005510:	4b31      	ldr	r3, [pc, #196]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	091b      	lsrs	r3, r3, #4
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	3301      	adds	r3, #1
 800551c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005520:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005522:	4b2d      	ldr	r3, [pc, #180]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	0edb      	lsrs	r3, r3, #27
 8005528:	f003 031f 	and.w	r3, r3, #31
 800552c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005534:	4b28      	ldr	r3, [pc, #160]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8005540:	2311      	movs	r3, #17
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	e001      	b.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8005546:	2307      	movs	r3, #7
 8005548:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005552:	61fb      	str	r3, [r7, #28]
      break;
 8005554:	f000 bc8f 	b.w	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005558:	4b1f      	ldr	r3, [pc, #124]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800555a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800556a:	d016      	beq.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005572:	f200 809b 	bhi.w	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800557c:	d032      	beq.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005584:	f200 8092 	bhi.w	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 8084 	beq.w	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005596:	d052      	beq.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8005598:	e088      	b.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800559a:	4b0f      	ldr	r3, [pc, #60]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	f040 8084 	bne.w	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80055a8:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80055b4:	4b08      	ldr	r3, [pc, #32]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	091b      	lsrs	r3, r3, #4
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	e005      	b.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 80055c0:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80055c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055c6:	0a1b      	lsrs	r3, r3, #8
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	4a03      	ldr	r2, [pc, #12]	; (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80055ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d2:	61fb      	str	r3, [r7, #28]
          break;
 80055d4:	e06c      	b.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80055d6:	bf00      	nop
 80055d8:	40021000 	.word	0x40021000
 80055dc:	08008f0c 	.word	0x08008f0c
 80055e0:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80055e4:	4ba5      	ldr	r3, [pc, #660]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055f0:	d160      	bne.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80055f2:	4ba2      	ldr	r3, [pc, #648]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055fe:	d159      	bne.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005600:	4b9e      	ldr	r3, [pc, #632]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	0a1b      	lsrs	r3, r3, #8
 8005606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800560a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	fb03 f202 	mul.w	r2, r3, r2
 8005614:	4b99      	ldr	r3, [pc, #612]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	091b      	lsrs	r3, r3, #4
 800561a:	f003 030f 	and.w	r3, r3, #15
 800561e:	3301      	adds	r3, #1
 8005620:	fbb2 f3f3 	udiv	r3, r2, r3
 8005624:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005626:	4b95      	ldr	r3, [pc, #596]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	0d5b      	lsrs	r3, r3, #21
 800562c:	f003 0303 	and.w	r3, r3, #3
 8005630:	3301      	adds	r3, #1
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	fbb2 f3f3 	udiv	r3, r2, r3
 800563a:	61fb      	str	r3, [r7, #28]
          break;
 800563c:	e03a      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800563e:	4b8f      	ldr	r3, [pc, #572]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005646:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800564a:	d135      	bne.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800564c:	4b8b      	ldr	r3, [pc, #556]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005658:	d12e      	bne.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800565a:	4b88      	ldr	r3, [pc, #544]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	0a1b      	lsrs	r3, r3, #8
 8005660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005664:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	fb03 f202 	mul.w	r2, r3, r2
 800566e:	4b83      	ldr	r3, [pc, #524]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	091b      	lsrs	r3, r3, #4
 8005674:	f003 030f 	and.w	r3, r3, #15
 8005678:	3301      	adds	r3, #1
 800567a:	fbb2 f3f3 	udiv	r3, r2, r3
 800567e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005680:	4b7e      	ldr	r3, [pc, #504]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	0d5b      	lsrs	r3, r3, #21
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	3301      	adds	r3, #1
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	fbb2 f3f3 	udiv	r3, r2, r3
 8005694:	61fb      	str	r3, [r7, #28]
          break;
 8005696:	e00f      	b.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005698:	4b78      	ldr	r3, [pc, #480]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800569a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d10a      	bne.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 80056a6:	4b76      	ldr	r3, [pc, #472]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80056a8:	61fb      	str	r3, [r7, #28]
          break;
 80056aa:	e007      	b.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 80056ac:	bf00      	nop
 80056ae:	e3e2      	b.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80056b0:	bf00      	nop
 80056b2:	e3e0      	b.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80056b4:	bf00      	nop
 80056b6:	e3de      	b.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80056b8:	bf00      	nop
 80056ba:	e3dc      	b.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80056bc:	bf00      	nop
      break;
 80056be:	e3da      	b.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80056c0:	4b6e      	ldr	r3, [pc, #440]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80056c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d827      	bhi.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80056d2:	a201      	add	r2, pc, #4	; (adr r2, 80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 80056d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d8:	080056e9 	.word	0x080056e9
 80056dc:	080056f1 	.word	0x080056f1
 80056e0:	080056f9 	.word	0x080056f9
 80056e4:	0800570d 	.word	0x0800570d
          frequency = HAL_RCC_GetPCLK2Freq();
 80056e8:	f7ff f8a8 	bl	800483c <HAL_RCC_GetPCLK2Freq>
 80056ec:	61f8      	str	r0, [r7, #28]
          break;
 80056ee:	e01d      	b.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80056f0:	f7fe fff6 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
 80056f4:	61f8      	str	r0, [r7, #28]
          break;
 80056f6:	e019      	b.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056f8:	4b60      	ldr	r3, [pc, #384]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005704:	d10f      	bne.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8005706:	4b5f      	ldr	r3, [pc, #380]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005708:	61fb      	str	r3, [r7, #28]
          break;
 800570a:	e00c      	b.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800570c:	4b5b      	ldr	r3, [pc, #364]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800570e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b02      	cmp	r3, #2
 8005718:	d107      	bne.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800571a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800571e:	61fb      	str	r3, [r7, #28]
          break;
 8005720:	e003      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8005722:	bf00      	nop
 8005724:	e3a8      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005726:	bf00      	nop
 8005728:	e3a6      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800572a:	bf00      	nop
        break;
 800572c:	e3a4      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800572e:	4b53      	ldr	r3, [pc, #332]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005734:	f003 030c 	and.w	r3, r3, #12
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b0c      	cmp	r3, #12
 800573e:	d83a      	bhi.n	80057b6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005740:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	0800577d 	.word	0x0800577d
 800574c:	080057b7 	.word	0x080057b7
 8005750:	080057b7 	.word	0x080057b7
 8005754:	080057b7 	.word	0x080057b7
 8005758:	08005785 	.word	0x08005785
 800575c:	080057b7 	.word	0x080057b7
 8005760:	080057b7 	.word	0x080057b7
 8005764:	080057b7 	.word	0x080057b7
 8005768:	0800578d 	.word	0x0800578d
 800576c:	080057b7 	.word	0x080057b7
 8005770:	080057b7 	.word	0x080057b7
 8005774:	080057b7 	.word	0x080057b7
 8005778:	080057a1 	.word	0x080057a1
          frequency = HAL_RCC_GetPCLK1Freq();
 800577c:	f7ff f848 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8005780:	61f8      	str	r0, [r7, #28]
          break;
 8005782:	e01d      	b.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8005784:	f7fe ffac 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
 8005788:	61f8      	str	r0, [r7, #28]
          break;
 800578a:	e019      	b.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800578c:	4b3b      	ldr	r3, [pc, #236]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005798:	d10f      	bne.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800579a:	4b3a      	ldr	r3, [pc, #232]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800579c:	61fb      	str	r3, [r7, #28]
          break;
 800579e:	e00c      	b.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057a0:	4b36      	ldr	r3, [pc, #216]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d107      	bne.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 80057ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057b2:	61fb      	str	r3, [r7, #28]
          break;
 80057b4:	e003      	b.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 80057b6:	bf00      	nop
 80057b8:	e35e      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80057ba:	bf00      	nop
 80057bc:	e35c      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80057be:	bf00      	nop
        break;
 80057c0:	e35a      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80057c2:	4b2e      	ldr	r3, [pc, #184]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80057c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b30      	cmp	r3, #48	; 0x30
 80057d2:	d021      	beq.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b30      	cmp	r3, #48	; 0x30
 80057d8:	d829      	bhi.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d011      	beq.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d823      	bhi.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b10      	cmp	r3, #16
 80057f0:	d004      	beq.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 80057f2:	e01c      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80057f4:	f7ff f80c 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 80057f8:	61f8      	str	r0, [r7, #28]
          break;
 80057fa:	e01d      	b.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80057fc:	f7fe ff70 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
 8005800:	61f8      	str	r0, [r7, #28]
          break;
 8005802:	e019      	b.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005804:	4b1d      	ldr	r3, [pc, #116]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005810:	d10f      	bne.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8005812:	4b1c      	ldr	r3, [pc, #112]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005814:	61fb      	str	r3, [r7, #28]
          break;
 8005816:	e00c      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005818:	4b18      	ldr	r3, [pc, #96]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800581a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b02      	cmp	r3, #2
 8005824:	d107      	bne.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8005826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800582a:	61fb      	str	r3, [r7, #28]
          break;
 800582c:	e003      	b.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800582e:	bf00      	nop
 8005830:	e322      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005832:	bf00      	nop
 8005834:	e320      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005836:	bf00      	nop
        break;
 8005838:	e31e      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800583a:	4b10      	ldr	r3, [pc, #64]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800583c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005840:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2bc0      	cmp	r3, #192	; 0xc0
 800584a:	d027      	beq.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2bc0      	cmp	r3, #192	; 0xc0
 8005850:	d82f      	bhi.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b80      	cmp	r3, #128	; 0x80
 8005856:	d017      	beq.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b80      	cmp	r3, #128	; 0x80
 800585c:	d829      	bhi.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b40      	cmp	r3, #64	; 0x40
 8005868:	d004      	beq.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800586a:	e022      	b.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800586c:	f7fe ffd0 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8005870:	61f8      	str	r0, [r7, #28]
          break;
 8005872:	e023      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8005874:	f7fe ff34 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
 8005878:	61f8      	str	r0, [r7, #28]
          break;
 800587a:	e01f      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800587c:	40021000 	.word	0x40021000
 8005880:	02dc6c00 	.word	0x02dc6c00
 8005884:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005888:	4b9b      	ldr	r3, [pc, #620]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005894:	d10f      	bne.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8005896:	4b99      	ldr	r3, [pc, #612]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005898:	61fb      	str	r3, [r7, #28]
          break;
 800589a:	e00c      	b.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800589c:	4b96      	ldr	r3, [pc, #600]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800589e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d107      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 80058aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ae:	61fb      	str	r3, [r7, #28]
          break;
 80058b0:	e003      	b.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 80058b2:	bf00      	nop
 80058b4:	e2e0      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80058b6:	bf00      	nop
 80058b8:	e2de      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80058ba:	bf00      	nop
        break;
 80058bc:	e2dc      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80058be:	4b8e      	ldr	r3, [pc, #568]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80058c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058d0:	d025      	beq.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058d8:	d82c      	bhi.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058e0:	d013      	beq.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058e8:	d824      	bhi.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d004      	beq.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f6:	d004      	beq.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 80058f8:	e01c      	b.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058fa:	f7fe ff89 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 80058fe:	61f8      	str	r0, [r7, #28]
          break;
 8005900:	e01d      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005902:	f7fe feed 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
 8005906:	61f8      	str	r0, [r7, #28]
          break;
 8005908:	e019      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800590a:	4b7b      	ldr	r3, [pc, #492]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005916:	d10f      	bne.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8005918:	4b78      	ldr	r3, [pc, #480]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800591a:	61fb      	str	r3, [r7, #28]
          break;
 800591c:	e00c      	b.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800591e:	4b76      	ldr	r3, [pc, #472]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b02      	cmp	r3, #2
 800592a:	d107      	bne.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 800592c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005930:	61fb      	str	r3, [r7, #28]
          break;
 8005932:	e003      	b.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8005934:	bf00      	nop
 8005936:	e29f      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005938:	bf00      	nop
 800593a:	e29d      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800593c:	bf00      	nop
        break;
 800593e:	e29b      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005940:	4b6d      	ldr	r3, [pc, #436]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005946:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005952:	d025      	beq.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800595a:	d82c      	bhi.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005962:	d013      	beq.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800596a:	d824      	bhi.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d004      	beq.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005978:	d004      	beq.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800597a:	e01c      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800597c:	f7fe ff48 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8005980:	61f8      	str	r0, [r7, #28]
          break;
 8005982:	e01d      	b.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8005984:	f7fe feac 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
 8005988:	61f8      	str	r0, [r7, #28]
          break;
 800598a:	e019      	b.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800598c:	4b5a      	ldr	r3, [pc, #360]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005998:	d10f      	bne.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800599a:	4b58      	ldr	r3, [pc, #352]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800599c:	61fb      	str	r3, [r7, #28]
          break;
 800599e:	e00c      	b.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80059a0:	4b55      	ldr	r3, [pc, #340]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80059a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d107      	bne.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 80059ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059b2:	61fb      	str	r3, [r7, #28]
          break;
 80059b4:	e003      	b.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 80059b6:	bf00      	nop
 80059b8:	e25e      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80059ba:	bf00      	nop
 80059bc:	e25c      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80059be:	bf00      	nop
        break;
 80059c0:	e25a      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80059c2:	4b4d      	ldr	r3, [pc, #308]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80059c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059d4:	d007      	beq.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059dc:	d12f      	bne.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80059de:	f7fe fe7f 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
 80059e2:	61f8      	str	r0, [r7, #28]
          break;
 80059e4:	e02e      	b.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80059e6:	4b44      	ldr	r3, [pc, #272]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059f2:	d126      	bne.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80059f4:	4b40      	ldr	r3, [pc, #256]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d020      	beq.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005a00:	4b3d      	ldr	r3, [pc, #244]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	0a1b      	lsrs	r3, r3, #8
 8005a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a0a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	fb03 f202 	mul.w	r2, r3, r2
 8005a14:	4b38      	ldr	r3, [pc, #224]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	091b      	lsrs	r3, r3, #4
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	3301      	adds	r3, #1
 8005a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a24:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005a26:	4b34      	ldr	r3, [pc, #208]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	0e5b      	lsrs	r3, r3, #25
 8005a2c:	f003 0303 	and.w	r3, r3, #3
 8005a30:	3301      	adds	r3, #1
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3a:	61fb      	str	r3, [r7, #28]
          break;
 8005a3c:	e001      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8005a3e:	bf00      	nop
 8005a40:	e21a      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a42:	bf00      	nop
        break;
 8005a44:	e218      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005a46:	4b2c      	ldr	r3, [pc, #176]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d103      	bne.n	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005a58:	f7fe fef0 	bl	800483c <HAL_RCC_GetPCLK2Freq>
 8005a5c:	61f8      	str	r0, [r7, #28]
        break;
 8005a5e:	e20b      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a60:	f7fe fe3e 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
 8005a64:	61f8      	str	r0, [r7, #28]
        break;
 8005a66:	e207      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005a68:	4b23      	ldr	r3, [pc, #140]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a6e:	f003 0318 	and.w	r3, r3, #24
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b10      	cmp	r3, #16
 8005a78:	d010      	beq.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b10      	cmp	r3, #16
 8005a7e:	d834      	bhi.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d024      	beq.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8005a8c:	e02d      	b.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005a8e:	69b9      	ldr	r1, [r7, #24]
 8005a90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005a94:	f000 fbe2 	bl	800625c <RCCEx_GetSAIxPeriphCLKFreq>
 8005a98:	61f8      	str	r0, [r7, #28]
          break;
 8005a9a:	e02b      	b.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005a9c:	4b16      	ldr	r3, [pc, #88]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d122      	bne.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005aa8:	4b13      	ldr	r3, [pc, #76]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005ab4:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	091b      	lsrs	r3, r3, #4
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	e005      	b.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8005ac0:	4b0d      	ldr	r3, [pc, #52]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ac6:	0a1b      	lsrs	r3, r3, #8
 8005ac8:	f003 030f 	and.w	r3, r3, #15
 8005acc:	4a0c      	ldr	r2, [pc, #48]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ad2:	61fb      	str	r3, [r7, #28]
          break;
 8005ad4:	e00b      	b.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ad6:	4b08      	ldr	r3, [pc, #32]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae2:	d106      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005ae6:	61fb      	str	r3, [r7, #28]
          break;
 8005ae8:	e003      	b.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8005aea:	bf00      	nop
 8005aec:	e1c4      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005aee:	bf00      	nop
 8005af0:	e1c2      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005af2:	bf00      	nop
        break;
 8005af4:	e1c0      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8005af6:	bf00      	nop
 8005af8:	40021000 	.word	0x40021000
 8005afc:	00f42400 	.word	0x00f42400
 8005b00:	08008f0c 	.word	0x08008f0c
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005b04:	4b96      	ldr	r3, [pc, #600]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b16:	d013      	beq.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b1e:	d819      	bhi.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d004      	beq.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2c:	d004      	beq.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8005b2e:	e011      	b.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b30:	f7fe fe6e 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8005b34:	61f8      	str	r0, [r7, #28]
          break;
 8005b36:	e010      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b38:	f7fe fdd2 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
 8005b3c:	61f8      	str	r0, [r7, #28]
          break;
 8005b3e:	e00c      	b.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b40:	4b87      	ldr	r3, [pc, #540]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b4c:	d104      	bne.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8005b4e:	4b85      	ldr	r3, [pc, #532]	; (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005b50:	61fb      	str	r3, [r7, #28]
          break;
 8005b52:	e001      	b.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8005b54:	bf00      	nop
 8005b56:	e18f      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005b58:	bf00      	nop
        break;
 8005b5a:	e18d      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005b5c:	4b80      	ldr	r3, [pc, #512]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b6e:	d013      	beq.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b76:	d819      	bhi.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d004      	beq.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b84:	d004      	beq.n	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8005b86:	e011      	b.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b88:	f7fe fe42 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8005b8c:	61f8      	str	r0, [r7, #28]
          break;
 8005b8e:	e010      	b.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b90:	f7fe fda6 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
 8005b94:	61f8      	str	r0, [r7, #28]
          break;
 8005b96:	e00c      	b.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b98:	4b71      	ldr	r3, [pc, #452]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba4:	d104      	bne.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8005ba6:	4b6f      	ldr	r3, [pc, #444]	; (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005ba8:	61fb      	str	r3, [r7, #28]
          break;
 8005baa:	e001      	b.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8005bac:	bf00      	nop
 8005bae:	e163      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005bb0:	bf00      	nop
        break;
 8005bb2:	e161      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005bb4:	4b6a      	ldr	r3, [pc, #424]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bc6:	d013      	beq.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bce:	d819      	bhi.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d004      	beq.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bdc:	d004      	beq.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8005bde:	e011      	b.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005be0:	f7fe fe16 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8005be4:	61f8      	str	r0, [r7, #28]
          break;
 8005be6:	e010      	b.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005be8:	f7fe fd7a 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
 8005bec:	61f8      	str	r0, [r7, #28]
          break;
 8005bee:	e00c      	b.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bf0:	4b5b      	ldr	r3, [pc, #364]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bfc:	d104      	bne.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8005bfe:	4b59      	ldr	r3, [pc, #356]	; (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005c00:	61fb      	str	r3, [r7, #28]
          break;
 8005c02:	e001      	b.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8005c04:	bf00      	nop
 8005c06:	e137      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c08:	bf00      	nop
        break;
 8005c0a:	e135      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005c0c:	4b54      	ldr	r3, [pc, #336]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d011      	beq.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d818      	bhi.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d004      	beq.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8005c30:	e011      	b.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c32:	f7fe fded 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8005c36:	61f8      	str	r0, [r7, #28]
          break;
 8005c38:	e010      	b.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c3a:	f7fe fd51 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
 8005c3e:	61f8      	str	r0, [r7, #28]
          break;
 8005c40:	e00c      	b.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c42:	4b47      	ldr	r3, [pc, #284]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c4e:	d104      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8005c50:	4b44      	ldr	r3, [pc, #272]	; (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005c52:	61fb      	str	r3, [r7, #28]
          break;
 8005c54:	e001      	b.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8005c56:	bf00      	nop
 8005c58:	e10e      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c5a:	bf00      	nop
        break;
 8005c5c:	e10c      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005c5e:	4b40      	ldr	r3, [pc, #256]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c64:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c70:	d02c      	beq.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c78:	d833      	bhi.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c80:	d01a      	beq.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c88:	d82b      	bhi.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d004      	beq.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c96:	d004      	beq.n	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8005c98:	e023      	b.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c9a:	f7fe fdb9 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8005c9e:	61f8      	str	r0, [r7, #28]
          break;
 8005ca0:	e026      	b.n	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005ca2:	4b2f      	ldr	r3, [pc, #188]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d11a      	bne.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8005cb0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005cb4:	61fb      	str	r3, [r7, #28]
          break;
 8005cb6:	e016      	b.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cb8:	4b29      	ldr	r3, [pc, #164]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc4:	d111      	bne.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8005cc6:	4b27      	ldr	r3, [pc, #156]	; (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005cc8:	61fb      	str	r3, [r7, #28]
          break;
 8005cca:	e00e      	b.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ccc:	4b24      	ldr	r3, [pc, #144]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d109      	bne.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8005cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cde:	61fb      	str	r3, [r7, #28]
          break;
 8005ce0:	e005      	b.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8005ce2:	bf00      	nop
 8005ce4:	e0c8      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ce6:	bf00      	nop
 8005ce8:	e0c6      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005cea:	bf00      	nop
 8005cec:	e0c4      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005cee:	bf00      	nop
        break;
 8005cf0:	e0c2      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005cf2:	4b1b      	ldr	r3, [pc, #108]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d04:	d030      	beq.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d0c:	d837      	bhi.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d14:	d01a      	beq.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d1c:	d82f      	bhi.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d004      	beq.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d2a:	d004      	beq.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8005d2c:	e027      	b.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d2e:	f7fe fd6f 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8005d32:	61f8      	str	r0, [r7, #28]
          break;
 8005d34:	e02a      	b.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005d36:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d11e      	bne.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8005d44:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005d48:	61fb      	str	r3, [r7, #28]
          break;
 8005d4a:	e01a      	b.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d4c:	4b04      	ldr	r3, [pc, #16]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d58:	d115      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8005d5a:	4b02      	ldr	r3, [pc, #8]	; (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005d5c:	61fb      	str	r3, [r7, #28]
          break;
 8005d5e:	e012      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005d60:	40021000 	.word	0x40021000
 8005d64:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d68:	4b46      	ldr	r3, [pc, #280]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d109      	bne.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8005d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d7a:	61fb      	str	r3, [r7, #28]
          break;
 8005d7c:	e005      	b.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8005d7e:	bf00      	nop
 8005d80:	e07a      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d82:	bf00      	nop
 8005d84:	e078      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d86:	bf00      	nop
 8005d88:	e076      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d8a:	bf00      	nop
        break;
 8005d8c:	e074      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005d8e:	4b3d      	ldr	r3, [pc, #244]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005d90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d94:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005da0:	d02c      	beq.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005da8:	d855      	bhi.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d004      	beq.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005db6:	d004      	beq.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8005db8:	e04d      	b.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005dba:	f7fe fc91 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
 8005dbe:	61f8      	str	r0, [r7, #28]
          break;
 8005dc0:	e04e      	b.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005dc2:	4b30      	ldr	r3, [pc, #192]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d145      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005dce:	4b2d      	ldr	r3, [pc, #180]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d005      	beq.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8005dda:	4b2a      	ldr	r3, [pc, #168]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	091b      	lsrs	r3, r3, #4
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	e005      	b.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8005de6:	4b27      	ldr	r3, [pc, #156]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dec:	0a1b      	lsrs	r3, r3, #8
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	4a25      	ldr	r2, [pc, #148]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8005df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df8:	61fb      	str	r3, [r7, #28]
          break;
 8005dfa:	e02e      	b.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005dfc:	4b21      	ldr	r3, [pc, #132]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e08:	d129      	bne.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005e0a:	4b1e      	ldr	r3, [pc, #120]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e16:	d122      	bne.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005e18:	4b1a      	ldr	r3, [pc, #104]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	0a1b      	lsrs	r3, r3, #8
 8005e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e22:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	fb03 f202 	mul.w	r2, r3, r2
 8005e2c:	4b15      	ldr	r3, [pc, #84]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	091b      	lsrs	r3, r3, #4
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	3301      	adds	r3, #1
 8005e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e3c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005e3e:	4b11      	ldr	r3, [pc, #68]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	0d5b      	lsrs	r3, r3, #21
 8005e44:	f003 0303 	and.w	r3, r3, #3
 8005e48:	3301      	adds	r3, #1
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e52:	61fb      	str	r3, [r7, #28]
          break;
 8005e54:	e003      	b.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8005e56:	bf00      	nop
 8005e58:	e00e      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e5a:	bf00      	nop
 8005e5c:	e00c      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e5e:	bf00      	nop
        break;
 8005e60:	e00a      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005e62:	bf00      	nop
 8005e64:	e008      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005e66:	bf00      	nop
 8005e68:	e006      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005e6a:	bf00      	nop
 8005e6c:	e004      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005e6e:	bf00      	nop
 8005e70:	e002      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005e72:	bf00      	nop
 8005e74:	e000      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005e76:	bf00      	nop
    }
  }

  return(frequency);
 8005e78:	69fb      	ldr	r3, [r7, #28]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3720      	adds	r7, #32
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40021000 	.word	0x40021000
 8005e88:	08008f0c 	.word	0x08008f0c

08005e8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e9a:	4b72      	ldr	r3, [pc, #456]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00e      	beq.n	8005ec4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ea6:	4b6f      	ldr	r3, [pc, #444]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f003 0203 	and.w	r2, r3, #3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d103      	bne.n	8005ebe <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
       ||
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d142      	bne.n	8005f44 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	73fb      	strb	r3, [r7, #15]
 8005ec2:	e03f      	b.n	8005f44 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d018      	beq.n	8005efe <RCCEx_PLLSAI1_Config+0x72>
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d825      	bhi.n	8005f1c <RCCEx_PLLSAI1_Config+0x90>
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d002      	beq.n	8005eda <RCCEx_PLLSAI1_Config+0x4e>
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d009      	beq.n	8005eec <RCCEx_PLLSAI1_Config+0x60>
 8005ed8:	e020      	b.n	8005f1c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005eda:	4b62      	ldr	r3, [pc, #392]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d11d      	bne.n	8005f22 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eea:	e01a      	b.n	8005f22 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005eec:	4b5d      	ldr	r3, [pc, #372]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d116      	bne.n	8005f26 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005efc:	e013      	b.n	8005f26 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005efe:	4b59      	ldr	r3, [pc, #356]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10f      	bne.n	8005f2a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f0a:	4b56      	ldr	r3, [pc, #344]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d109      	bne.n	8005f2a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f1a:	e006      	b.n	8005f2a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f20:	e004      	b.n	8005f2c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f22:	bf00      	nop
 8005f24:	e002      	b.n	8005f2c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f26:	bf00      	nop
 8005f28:	e000      	b.n	8005f2c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d108      	bne.n	8005f44 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005f32:	4b4c      	ldr	r3, [pc, #304]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f023 0203 	bic.w	r2, r3, #3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4949      	ldr	r1, [pc, #292]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f040 8086 	bne.w	8006058 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f4c:	4b45      	ldr	r3, [pc, #276]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a44      	ldr	r2, [pc, #272]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f58:	f7fc f9a6 	bl	80022a8 <HAL_GetTick>
 8005f5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f5e:	e009      	b.n	8005f74 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f60:	f7fc f9a2 	bl	80022a8 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d902      	bls.n	8005f74 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	73fb      	strb	r3, [r7, #15]
        break;
 8005f72:	e005      	b.n	8005f80 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f74:	4b3b      	ldr	r3, [pc, #236]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1ef      	bne.n	8005f60 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d168      	bne.n	8006058 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d113      	bne.n	8005fb4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f8c:	4b35      	ldr	r3, [pc, #212]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f8e:	691a      	ldr	r2, [r3, #16]
 8005f90:	4b35      	ldr	r3, [pc, #212]	; (8006068 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f92:	4013      	ands	r3, r2
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6892      	ldr	r2, [r2, #8]
 8005f98:	0211      	lsls	r1, r2, #8
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	68d2      	ldr	r2, [r2, #12]
 8005f9e:	06d2      	lsls	r2, r2, #27
 8005fa0:	4311      	orrs	r1, r2
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6852      	ldr	r2, [r2, #4]
 8005fa6:	3a01      	subs	r2, #1
 8005fa8:	0112      	lsls	r2, r2, #4
 8005faa:	430a      	orrs	r2, r1
 8005fac:	492d      	ldr	r1, [pc, #180]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	610b      	str	r3, [r1, #16]
 8005fb2:	e02d      	b.n	8006010 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d115      	bne.n	8005fe6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fba:	4b2a      	ldr	r3, [pc, #168]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	4b2b      	ldr	r3, [pc, #172]	; (800606c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6892      	ldr	r2, [r2, #8]
 8005fc6:	0211      	lsls	r1, r2, #8
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6912      	ldr	r2, [r2, #16]
 8005fcc:	0852      	lsrs	r2, r2, #1
 8005fce:	3a01      	subs	r2, #1
 8005fd0:	0552      	lsls	r2, r2, #21
 8005fd2:	4311      	orrs	r1, r2
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6852      	ldr	r2, [r2, #4]
 8005fd8:	3a01      	subs	r2, #1
 8005fda:	0112      	lsls	r2, r2, #4
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	4921      	ldr	r1, [pc, #132]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	610b      	str	r3, [r1, #16]
 8005fe4:	e014      	b.n	8006010 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fe6:	4b1f      	ldr	r3, [pc, #124]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fe8:	691a      	ldr	r2, [r3, #16]
 8005fea:	4b21      	ldr	r3, [pc, #132]	; (8006070 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fec:	4013      	ands	r3, r2
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	6892      	ldr	r2, [r2, #8]
 8005ff2:	0211      	lsls	r1, r2, #8
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6952      	ldr	r2, [r2, #20]
 8005ff8:	0852      	lsrs	r2, r2, #1
 8005ffa:	3a01      	subs	r2, #1
 8005ffc:	0652      	lsls	r2, r2, #25
 8005ffe:	4311      	orrs	r1, r2
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6852      	ldr	r2, [r2, #4]
 8006004:	3a01      	subs	r2, #1
 8006006:	0112      	lsls	r2, r2, #4
 8006008:	430a      	orrs	r2, r1
 800600a:	4916      	ldr	r1, [pc, #88]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 800600c:	4313      	orrs	r3, r2
 800600e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006010:	4b14      	ldr	r3, [pc, #80]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a13      	ldr	r2, [pc, #76]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006016:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800601a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800601c:	f7fc f944 	bl	80022a8 <HAL_GetTick>
 8006020:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006022:	e009      	b.n	8006038 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006024:	f7fc f940 	bl	80022a8 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d902      	bls.n	8006038 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	73fb      	strb	r3, [r7, #15]
          break;
 8006036:	e005      	b.n	8006044 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006038:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0ef      	beq.n	8006024 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800604a:	4b06      	ldr	r3, [pc, #24]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 800604c:	691a      	ldr	r2, [r3, #16]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	4904      	ldr	r1, [pc, #16]	; (8006064 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006054:	4313      	orrs	r3, r2
 8006056:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006058:	7bfb      	ldrb	r3, [r7, #15]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	40021000 	.word	0x40021000
 8006068:	07ff800f 	.word	0x07ff800f
 800606c:	ff9f800f 	.word	0xff9f800f
 8006070:	f9ff800f 	.word	0xf9ff800f

08006074 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006082:	4b72      	ldr	r3, [pc, #456]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00e      	beq.n	80060ac <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800608e:	4b6f      	ldr	r3, [pc, #444]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f003 0203 	and.w	r2, r3, #3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	429a      	cmp	r2, r3
 800609c:	d103      	bne.n	80060a6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
       ||
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d142      	bne.n	800612c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	73fb      	strb	r3, [r7, #15]
 80060aa:	e03f      	b.n	800612c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d018      	beq.n	80060e6 <RCCEx_PLLSAI2_Config+0x72>
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d825      	bhi.n	8006104 <RCCEx_PLLSAI2_Config+0x90>
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d002      	beq.n	80060c2 <RCCEx_PLLSAI2_Config+0x4e>
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d009      	beq.n	80060d4 <RCCEx_PLLSAI2_Config+0x60>
 80060c0:	e020      	b.n	8006104 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060c2:	4b62      	ldr	r3, [pc, #392]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d11d      	bne.n	800610a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060d2:	e01a      	b.n	800610a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060d4:	4b5d      	ldr	r3, [pc, #372]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d116      	bne.n	800610e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060e4:	e013      	b.n	800610e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060e6:	4b59      	ldr	r3, [pc, #356]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10f      	bne.n	8006112 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060f2:	4b56      	ldr	r3, [pc, #344]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d109      	bne.n	8006112 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006102:	e006      	b.n	8006112 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	73fb      	strb	r3, [r7, #15]
      break;
 8006108:	e004      	b.n	8006114 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800610a:	bf00      	nop
 800610c:	e002      	b.n	8006114 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800610e:	bf00      	nop
 8006110:	e000      	b.n	8006114 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006112:	bf00      	nop
    }

    if(status == HAL_OK)
 8006114:	7bfb      	ldrb	r3, [r7, #15]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d108      	bne.n	800612c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800611a:	4b4c      	ldr	r3, [pc, #304]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f023 0203 	bic.w	r2, r3, #3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4949      	ldr	r1, [pc, #292]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006128:	4313      	orrs	r3, r2
 800612a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800612c:	7bfb      	ldrb	r3, [r7, #15]
 800612e:	2b00      	cmp	r3, #0
 8006130:	f040 8086 	bne.w	8006240 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006134:	4b45      	ldr	r3, [pc, #276]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a44      	ldr	r2, [pc, #272]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 800613a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800613e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006140:	f7fc f8b2 	bl	80022a8 <HAL_GetTick>
 8006144:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006146:	e009      	b.n	800615c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006148:	f7fc f8ae 	bl	80022a8 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d902      	bls.n	800615c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	73fb      	strb	r3, [r7, #15]
        break;
 800615a:	e005      	b.n	8006168 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800615c:	4b3b      	ldr	r3, [pc, #236]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1ef      	bne.n	8006148 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d168      	bne.n	8006240 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d113      	bne.n	800619c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006174:	4b35      	ldr	r3, [pc, #212]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006176:	695a      	ldr	r2, [r3, #20]
 8006178:	4b35      	ldr	r3, [pc, #212]	; (8006250 <RCCEx_PLLSAI2_Config+0x1dc>)
 800617a:	4013      	ands	r3, r2
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6892      	ldr	r2, [r2, #8]
 8006180:	0211      	lsls	r1, r2, #8
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	68d2      	ldr	r2, [r2, #12]
 8006186:	06d2      	lsls	r2, r2, #27
 8006188:	4311      	orrs	r1, r2
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6852      	ldr	r2, [r2, #4]
 800618e:	3a01      	subs	r2, #1
 8006190:	0112      	lsls	r2, r2, #4
 8006192:	430a      	orrs	r2, r1
 8006194:	492d      	ldr	r1, [pc, #180]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006196:	4313      	orrs	r3, r2
 8006198:	614b      	str	r3, [r1, #20]
 800619a:	e02d      	b.n	80061f8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d115      	bne.n	80061ce <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80061a2:	4b2a      	ldr	r3, [pc, #168]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 80061a4:	695a      	ldr	r2, [r3, #20]
 80061a6:	4b2b      	ldr	r3, [pc, #172]	; (8006254 <RCCEx_PLLSAI2_Config+0x1e0>)
 80061a8:	4013      	ands	r3, r2
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6892      	ldr	r2, [r2, #8]
 80061ae:	0211      	lsls	r1, r2, #8
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6912      	ldr	r2, [r2, #16]
 80061b4:	0852      	lsrs	r2, r2, #1
 80061b6:	3a01      	subs	r2, #1
 80061b8:	0552      	lsls	r2, r2, #21
 80061ba:	4311      	orrs	r1, r2
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6852      	ldr	r2, [r2, #4]
 80061c0:	3a01      	subs	r2, #1
 80061c2:	0112      	lsls	r2, r2, #4
 80061c4:	430a      	orrs	r2, r1
 80061c6:	4921      	ldr	r1, [pc, #132]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	614b      	str	r3, [r1, #20]
 80061cc:	e014      	b.n	80061f8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80061ce:	4b1f      	ldr	r3, [pc, #124]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 80061d0:	695a      	ldr	r2, [r3, #20]
 80061d2:	4b21      	ldr	r3, [pc, #132]	; (8006258 <RCCEx_PLLSAI2_Config+0x1e4>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6892      	ldr	r2, [r2, #8]
 80061da:	0211      	lsls	r1, r2, #8
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6952      	ldr	r2, [r2, #20]
 80061e0:	0852      	lsrs	r2, r2, #1
 80061e2:	3a01      	subs	r2, #1
 80061e4:	0652      	lsls	r2, r2, #25
 80061e6:	4311      	orrs	r1, r2
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6852      	ldr	r2, [r2, #4]
 80061ec:	3a01      	subs	r2, #1
 80061ee:	0112      	lsls	r2, r2, #4
 80061f0:	430a      	orrs	r2, r1
 80061f2:	4916      	ldr	r1, [pc, #88]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80061f8:	4b14      	ldr	r3, [pc, #80]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a13      	ldr	r2, [pc, #76]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 80061fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006202:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006204:	f7fc f850 	bl	80022a8 <HAL_GetTick>
 8006208:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800620a:	e009      	b.n	8006220 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800620c:	f7fc f84c 	bl	80022a8 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d902      	bls.n	8006220 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	73fb      	strb	r3, [r7, #15]
          break;
 800621e:	e005      	b.n	800622c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006220:	4b0a      	ldr	r3, [pc, #40]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0ef      	beq.n	800620c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800622c:	7bfb      	ldrb	r3, [r7, #15]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d106      	bne.n	8006240 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006232:	4b06      	ldr	r3, [pc, #24]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006234:	695a      	ldr	r2, [r3, #20]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	4904      	ldr	r1, [pc, #16]	; (800624c <RCCEx_PLLSAI2_Config+0x1d8>)
 800623c:	4313      	orrs	r3, r2
 800623e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006240:	7bfb      	ldrb	r3, [r7, #15]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	40021000 	.word	0x40021000
 8006250:	07ff800f 	.word	0x07ff800f
 8006254:	ff9f800f 	.word	0xff9f800f
 8006258:	f9ff800f 	.word	0xf9ff800f

0800625c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800625c:	b480      	push	{r7}
 800625e:	b089      	sub	sp, #36	; 0x24
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006278:	d10b      	bne.n	8006292 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800627a:	4b7e      	ldr	r3, [pc, #504]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800627c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006280:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006284:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b60      	cmp	r3, #96	; 0x60
 800628a:	d112      	bne.n	80062b2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800628c:	4b7a      	ldr	r3, [pc, #488]	; (8006478 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800628e:	61fb      	str	r3, [r7, #28]
 8006290:	e00f      	b.n	80062b2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006298:	d10b      	bne.n	80062b2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800629a:	4b76      	ldr	r3, [pc, #472]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800629c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062a4:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ac:	d101      	bne.n	80062b2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80062ae:	4b72      	ldr	r3, [pc, #456]	; (8006478 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80062b0:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f040 80d6 	bne.w	8006466 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	2b40      	cmp	r3, #64	; 0x40
 80062c2:	d003      	beq.n	80062cc <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ca:	d13b      	bne.n	8006344 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80062cc:	4b69      	ldr	r3, [pc, #420]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062d8:	f040 80c4 	bne.w	8006464 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80062dc:	4b65      	ldr	r3, [pc, #404]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 80bd 	beq.w	8006464 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80062ea:	4b62      	ldr	r3, [pc, #392]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	091b      	lsrs	r3, r3, #4
 80062f0:	f003 030f 	and.w	r3, r3, #15
 80062f4:	3301      	adds	r3, #1
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fc:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80062fe:	4b5d      	ldr	r3, [pc, #372]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	0a1b      	lsrs	r3, r3, #8
 8006304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006308:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800630a:	4b5a      	ldr	r3, [pc, #360]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	0edb      	lsrs	r3, r3, #27
 8006310:	f003 031f 	and.w	r3, r3, #31
 8006314:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10a      	bne.n	8006332 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800631c:	4b55      	ldr	r3, [pc, #340]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006328:	2311      	movs	r3, #17
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	e001      	b.n	8006332 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800632e:	2307      	movs	r3, #7
 8006330:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	fb03 f202 	mul.w	r2, r3, r2
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006340:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006342:	e08f      	b.n	8006464 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d13a      	bne.n	80063c0 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800634a:	4b4a      	ldr	r3, [pc, #296]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006352:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006356:	f040 8086 	bne.w	8006466 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800635a:	4b46      	ldr	r3, [pc, #280]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d07f      	beq.n	8006466 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006366:	4b43      	ldr	r3, [pc, #268]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	091b      	lsrs	r3, r3, #4
 800636c:	f003 030f 	and.w	r3, r3, #15
 8006370:	3301      	adds	r3, #1
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	fbb2 f3f3 	udiv	r3, r2, r3
 8006378:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800637a:	4b3e      	ldr	r3, [pc, #248]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	0a1b      	lsrs	r3, r3, #8
 8006380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006384:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006386:	4b3b      	ldr	r3, [pc, #236]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	0edb      	lsrs	r3, r3, #27
 800638c:	f003 031f 	and.w	r3, r3, #31
 8006390:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10a      	bne.n	80063ae <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006398:	4b36      	ldr	r3, [pc, #216]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80063a4:	2311      	movs	r3, #17
 80063a6:	617b      	str	r3, [r7, #20]
 80063a8:	e001      	b.n	80063ae <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80063aa:	2307      	movs	r3, #7
 80063ac:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	fb03 f202 	mul.w	r2, r3, r2
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063bc:	61fb      	str	r3, [r7, #28]
 80063be:	e052      	b.n	8006466 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	2b80      	cmp	r3, #128	; 0x80
 80063c4:	d003      	beq.n	80063ce <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063cc:	d109      	bne.n	80063e2 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063ce:	4b29      	ldr	r3, [pc, #164]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063da:	d144      	bne.n	8006466 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80063dc:	4b27      	ldr	r3, [pc, #156]	; (800647c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80063de:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063e0:	e041      	b.n	8006466 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	2b20      	cmp	r3, #32
 80063e6:	d003      	beq.n	80063f0 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ee:	d13a      	bne.n	8006466 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80063f0:	4b20      	ldr	r3, [pc, #128]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063fc:	d133      	bne.n	8006466 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80063fe:	4b1d      	ldr	r3, [pc, #116]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d02d      	beq.n	8006466 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800640a:	4b1a      	ldr	r3, [pc, #104]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	091b      	lsrs	r3, r3, #4
 8006410:	f003 030f 	and.w	r3, r3, #15
 8006414:	3301      	adds	r3, #1
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	fbb2 f3f3 	udiv	r3, r2, r3
 800641c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800641e:	4b15      	ldr	r3, [pc, #84]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	0a1b      	lsrs	r3, r3, #8
 8006424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006428:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800642a:	4b12      	ldr	r3, [pc, #72]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	0edb      	lsrs	r3, r3, #27
 8006430:	f003 031f 	and.w	r3, r3, #31
 8006434:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800643c:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006448:	2311      	movs	r3, #17
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	e001      	b.n	8006452 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800644e:	2307      	movs	r3, #7
 8006450:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	fb03 f202 	mul.w	r2, r3, r2
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006460:	61fb      	str	r3, [r7, #28]
 8006462:	e000      	b.n	8006466 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006464:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006466:	69fb      	ldr	r3, [r7, #28]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3724      	adds	r7, #36	; 0x24
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	40021000 	.word	0x40021000
 8006478:	001fff68 	.word	0x001fff68
 800647c:	00f42400 	.word	0x00f42400

08006480 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b02      	cmp	r3, #2
 8006492:	d904      	bls.n	800649e <HAL_SAI_InitProtocol+0x1e>
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	3b03      	subs	r3, #3
 8006498:	2b01      	cmp	r3, #1
 800649a:	d812      	bhi.n	80064c2 <HAL_SAI_InitProtocol+0x42>
 800649c:	e008      	b.n	80064b0 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 f9fb 	bl	80068a0 <SAI_InitI2S>
 80064aa:	4603      	mov	r3, r0
 80064ac:	75fb      	strb	r3, [r7, #23]
      break;
 80064ae:	e00b      	b.n	80064c8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	68b9      	ldr	r1, [r7, #8]
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 faa4 	bl	8006a04 <SAI_InitPCM>
 80064bc:	4603      	mov	r3, r0
 80064be:	75fb      	strb	r3, [r7, #23]
      break;
 80064c0:	e002      	b.n	80064c8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	75fb      	strb	r3, [r7, #23]
      break;
 80064c6:	bf00      	nop
  }

  if (status == HAL_OK)
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d104      	bne.n	80064d8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f808 	bl	80064e4 <HAL_SAI_Init>
 80064d4:	4603      	mov	r3, r0
 80064d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80064d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08a      	sub	sp, #40	; 0x28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e1c7      	b.n	8006886 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d10e      	bne.n	800651e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a81      	ldr	r2, [pc, #516]	; (800670c <HAL_SAI_Init+0x228>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d107      	bne.n	800651a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800650e:	2b01      	cmp	r3, #1
 8006510:	d103      	bne.n	800651a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e1b3      	b.n	8006886 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7fb fd2e 	bl	8001f94 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fae5 	bl	8006b08 <SAI_Disable>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e19e      	b.n	8006886 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d00c      	beq.n	8006572 <HAL_SAI_Init+0x8e>
 8006558:	2b02      	cmp	r3, #2
 800655a:	d80d      	bhi.n	8006578 <HAL_SAI_Init+0x94>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <HAL_SAI_Init+0x82>
 8006560:	2b01      	cmp	r3, #1
 8006562:	d003      	beq.n	800656c <HAL_SAI_Init+0x88>
 8006564:	e008      	b.n	8006578 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800656a:	e008      	b.n	800657e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800656c:	2310      	movs	r3, #16
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006570:	e005      	b.n	800657e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006572:	2320      	movs	r3, #32
 8006574:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006576:	e002      	b.n	800657e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006578:	2300      	movs	r3, #0
 800657a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800657c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	2b03      	cmp	r3, #3
 8006584:	d81d      	bhi.n	80065c2 <HAL_SAI_Init+0xde>
 8006586:	a201      	add	r2, pc, #4	; (adr r2, 800658c <HAL_SAI_Init+0xa8>)
 8006588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658c:	0800659d 	.word	0x0800659d
 8006590:	080065a3 	.word	0x080065a3
 8006594:	080065ab 	.word	0x080065ab
 8006598:	080065b3 	.word	0x080065b3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	61fb      	str	r3, [r7, #28]
      break;
 80065a0:	e012      	b.n	80065c8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80065a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065a6:	61fb      	str	r3, [r7, #28]
      break;
 80065a8:	e00e      	b.n	80065c8 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80065aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065ae:	61fb      	str	r3, [r7, #28]
      break;
 80065b0:	e00a      	b.n	80065c8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80065b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065b6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	f043 0301 	orr.w	r3, r3, #1
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80065c0:	e002      	b.n	80065c8 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80065c2:	2300      	movs	r3, #0
 80065c4:	61fb      	str	r3, [r7, #28]
      break;
 80065c6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a4f      	ldr	r2, [pc, #316]	; (800670c <HAL_SAI_Init+0x228>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d004      	beq.n	80065dc <HAL_SAI_Init+0xf8>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a4e      	ldr	r2, [pc, #312]	; (8006710 <HAL_SAI_Init+0x22c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d103      	bne.n	80065e4 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 80065dc:	4a4d      	ldr	r2, [pc, #308]	; (8006714 <HAL_SAI_Init+0x230>)
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	6013      	str	r3, [r2, #0]
 80065e2:	e002      	b.n	80065ea <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80065e4:	4a4c      	ldr	r2, [pc, #304]	; (8006718 <HAL_SAI_Init+0x234>)
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d073      	beq.n	80066da <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a45      	ldr	r2, [pc, #276]	; (800670c <HAL_SAI_Init+0x228>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d004      	beq.n	8006606 <HAL_SAI_Init+0x122>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a43      	ldr	r2, [pc, #268]	; (8006710 <HAL_SAI_Init+0x22c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d105      	bne.n	8006612 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006606:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800660a:	f7fe fd1d 	bl	8005048 <HAL_RCCEx_GetPeriphCLKFreq>
 800660e:	61b8      	str	r0, [r7, #24]
 8006610:	e004      	b.n	800661c <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006612:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006616:	f7fe fd17 	bl	8005048 <HAL_RCCEx_GetPeriphCLKFreq>
 800661a:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006624:	d120      	bne.n	8006668 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	2b04      	cmp	r3, #4
 800662c:	d102      	bne.n	8006634 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800662e:	2340      	movs	r3, #64	; 0x40
 8006630:	613b      	str	r3, [r7, #16]
 8006632:	e00a      	b.n	800664a <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	2b08      	cmp	r3, #8
 800663a:	d103      	bne.n	8006644 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800663c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	e002      	b.n	800664a <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006648:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	4613      	mov	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	4619      	mov	r1, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	fb02 f303 	mul.w	r3, r2, r3
 8006660:	fbb1 f3f3 	udiv	r3, r1, r3
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	e017      	b.n	8006698 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006670:	d101      	bne.n	8006676 <HAL_SAI_Init+0x192>
 8006672:	2302      	movs	r3, #2
 8006674:	e000      	b.n	8006678 <HAL_SAI_Init+0x194>
 8006676:	2301      	movs	r3, #1
 8006678:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	4613      	mov	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	4619      	mov	r1, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	fb02 f303 	mul.w	r3, r2, r3
 8006690:	021b      	lsls	r3, r3, #8
 8006692:	fbb1 f3f3 	udiv	r3, r1, r3
 8006696:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	4a20      	ldr	r2, [pc, #128]	; (800671c <HAL_SAI_Init+0x238>)
 800669c:	fba2 2303 	umull	r2, r3, r2, r3
 80066a0:	08da      	lsrs	r2, r3, #3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80066a6:	6979      	ldr	r1, [r7, #20]
 80066a8:	4b1c      	ldr	r3, [pc, #112]	; (800671c <HAL_SAI_Init+0x238>)
 80066aa:	fba3 2301 	umull	r2, r3, r3, r1
 80066ae:	08da      	lsrs	r2, r3, #3
 80066b0:	4613      	mov	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	1aca      	subs	r2, r1, r3
 80066ba:	2a08      	cmp	r2, #8
 80066bc:	d904      	bls.n	80066c8 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d104      	bne.n	80066da <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	085a      	lsrs	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <HAL_SAI_Init+0x206>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d109      	bne.n	80066fe <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_SAI_Init+0x212>
 80066f2:	2300      	movs	r3, #0
 80066f4:	e001      	b.n	80066fa <HAL_SAI_Init+0x216>
 80066f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066fa:	623b      	str	r3, [r7, #32]
 80066fc:	e012      	b.n	8006724 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006702:	2b01      	cmp	r3, #1
 8006704:	d10c      	bne.n	8006720 <HAL_SAI_Init+0x23c>
 8006706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800670a:	e00a      	b.n	8006722 <HAL_SAI_Init+0x23e>
 800670c:	40015404 	.word	0x40015404
 8006710:	40015424 	.word	0x40015424
 8006714:	40015400 	.word	0x40015400
 8006718:	40015800 	.word	0x40015800
 800671c:	cccccccd 	.word	0xcccccccd
 8006720:	2300      	movs	r3, #0
 8006722:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6819      	ldr	r1, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	4b58      	ldr	r3, [pc, #352]	; (8006890 <HAL_SAI_Init+0x3ac>)
 8006730:	400b      	ands	r3, r1
 8006732:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6819      	ldr	r1, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006748:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800674e:	431a      	orrs	r2, r3
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800675c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006768:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	051b      	lsls	r3, r3, #20
 8006770:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006776:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	6812      	ldr	r2, [r2, #0]
 800678a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800678e:	f023 030f 	bic.w	r3, r3, #15
 8006792:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6859      	ldr	r1, [r3, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6899      	ldr	r1, [r3, #8]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	4b35      	ldr	r3, [pc, #212]	; (8006894 <HAL_SAI_Init+0x3b0>)
 80067be:	400b      	ands	r3, r1
 80067c0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6899      	ldr	r1, [r3, #8]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067cc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80067d2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 80067d8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 80067de:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e4:	3b01      	subs	r3, #1
 80067e6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80067e8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68d9      	ldr	r1, [r3, #12]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006800:	400b      	ands	r3, r1
 8006802:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68d9      	ldr	r1, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006812:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006818:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800681a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006820:	3b01      	subs	r3, #1
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a19      	ldr	r2, [pc, #100]	; (8006898 <HAL_SAI_Init+0x3b4>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d119      	bne.n	800686c <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006838:	4b18      	ldr	r3, [pc, #96]	; (800689c <HAL_SAI_Init+0x3b8>)
 800683a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683c:	4a17      	ldr	r2, [pc, #92]	; (800689c <HAL_SAI_Init+0x3b8>)
 800683e:	f023 0301 	bic.w	r3, r3, #1
 8006842:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800684a:	2b01      	cmp	r3, #1
 800684c:	d10e      	bne.n	800686c <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	3b01      	subs	r3, #1
 8006858:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800685a:	4910      	ldr	r1, [pc, #64]	; (800689c <HAL_SAI_Init+0x3b8>)
 800685c:	4313      	orrs	r3, r2
 800685e:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006860:	4b0e      	ldr	r3, [pc, #56]	; (800689c <HAL_SAI_Init+0x3b8>)
 8006862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006864:	4a0d      	ldr	r2, [pc, #52]	; (800689c <HAL_SAI_Init+0x3b8>)
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3728      	adds	r7, #40	; 0x28
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	f805c010 	.word	0xf805c010
 8006894:	fff88000 	.word	0xfff88000
 8006898:	40015404 	.word	0x40015404
 800689c:	40015400 	.word	0x40015400

080068a0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <SAI_InitI2S+0x2e>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d103      	bne.n	80068d6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80068d4:	e002      	b.n	80068dc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2201      	movs	r2, #1
 80068da:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80068e2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068ea:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e077      	b.n	80069f6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d107      	bne.n	800691c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006918:	661a      	str	r2, [r3, #96]	; 0x60
 800691a:	e006      	b.n	800692a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006922:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b03      	cmp	r3, #3
 800692e:	d84f      	bhi.n	80069d0 <SAI_InitI2S+0x130>
 8006930:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <SAI_InitI2S+0x98>)
 8006932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006936:	bf00      	nop
 8006938:	08006949 	.word	0x08006949
 800693c:	0800696b 	.word	0x0800696b
 8006940:	0800698d 	.word	0x0800698d
 8006944:	080069af 	.word	0x080069af
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2280      	movs	r2, #128	; 0x80
 800694c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	085b      	lsrs	r3, r3, #1
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	085b      	lsrs	r3, r3, #1
 800695c:	011a      	lsls	r2, r3, #4
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2240      	movs	r2, #64	; 0x40
 8006966:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006968:	e035      	b.n	80069d6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2280      	movs	r2, #128	; 0x80
 800696e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	085b      	lsrs	r3, r3, #1
 8006974:	019a      	lsls	r2, r3, #6
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	085b      	lsrs	r3, r3, #1
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2280      	movs	r2, #128	; 0x80
 8006988:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800698a:	e024      	b.n	80069d6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	22c0      	movs	r2, #192	; 0xc0
 8006990:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	085b      	lsrs	r3, r3, #1
 8006996:	019a      	lsls	r2, r3, #6
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	085b      	lsrs	r3, r3, #1
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2280      	movs	r2, #128	; 0x80
 80069aa:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80069ac:	e013      	b.n	80069d6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	22e0      	movs	r2, #224	; 0xe0
 80069b2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	085b      	lsrs	r3, r3, #1
 80069b8:	019a      	lsls	r2, r3, #6
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	085b      	lsrs	r3, r3, #1
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2280      	movs	r2, #128	; 0x80
 80069cc:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80069ce:	e002      	b.n	80069d6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	75fb      	strb	r3, [r7, #23]
      break;
 80069d4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d10b      	bne.n	80069f4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d102      	bne.n	80069e8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2210      	movs	r2, #16
 80069e6:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d102      	bne.n	80069f4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2208      	movs	r2, #8
 80069f2:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop

08006a04 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <SAI_InitPCM+0x2e>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d103      	bne.n	8006a3a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2201      	movs	r2, #1
 8006a36:	64da      	str	r2, [r3, #76]	; 0x4c
 8006a38:	e002      	b.n	8006a40 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a4c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006a54:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a68:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	d103      	bne.n	8006a78 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2201      	movs	r2, #1
 8006a74:	655a      	str	r2, [r3, #84]	; 0x54
 8006a76:	e002      	b.n	8006a7e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	220d      	movs	r2, #13
 8006a7c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d837      	bhi.n	8006af4 <SAI_InitPCM+0xf0>
 8006a84:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <SAI_InitPCM+0x88>)
 8006a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8a:	bf00      	nop
 8006a8c:	08006a9d 	.word	0x08006a9d
 8006a90:	08006ab3 	.word	0x08006ab3
 8006a94:	08006ac9 	.word	0x08006ac9
 8006a98:	08006adf 	.word	0x08006adf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2280      	movs	r2, #128	; 0x80
 8006aa0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	011a      	lsls	r2, r3, #4
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2240      	movs	r2, #64	; 0x40
 8006aae:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006ab0:	e023      	b.n	8006afa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2280      	movs	r2, #128	; 0x80
 8006ab6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2280      	movs	r2, #128	; 0x80
 8006ac4:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006ac6:	e018      	b.n	8006afa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	22c0      	movs	r2, #192	; 0xc0
 8006acc:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2280      	movs	r2, #128	; 0x80
 8006ada:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006adc:	e00d      	b.n	8006afa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	22e0      	movs	r2, #224	; 0xe0
 8006ae2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2280      	movs	r2, #128	; 0x80
 8006af0:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006af2:	e002      	b.n	8006afa <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	75fb      	strb	r3, [r7, #23]
      break;
 8006af8:	bf00      	nop
  }

  return status;
 8006afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	371c      	adds	r7, #28
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006b10:	4b18      	ldr	r3, [pc, #96]	; (8006b74 <SAI_Disable+0x6c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a18      	ldr	r2, [pc, #96]	; (8006b78 <SAI_Disable+0x70>)
 8006b16:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1a:	0b1b      	lsrs	r3, r3, #12
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b32:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10a      	bne.n	8006b50 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	72fb      	strb	r3, [r7, #11]
      break;
 8006b4e:	e009      	b.n	8006b64 <SAI_Disable+0x5c>
    }
    count--;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e7      	bne.n	8006b34 <SAI_Disable+0x2c>

  return status;
 8006b64:	7afb      	ldrb	r3, [r7, #11]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	20000000 	.word	0x20000000
 8006b78:	95cbec1b 	.word	0x95cbec1b

08006b7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e095      	b.n	8006cba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d108      	bne.n	8006ba8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b9e:	d009      	beq.n	8006bb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	61da      	str	r2, [r3, #28]
 8006ba6:	e005      	b.n	8006bb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d106      	bne.n	8006bd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7fa ffd6 	bl	8001b80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bf4:	d902      	bls.n	8006bfc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60fb      	str	r3, [r7, #12]
 8006bfa:	e002      	b.n	8006c02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006c0a:	d007      	beq.n	8006c1c <HAL_SPI_Init+0xa0>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c14:	d002      	beq.n	8006c1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	431a      	orrs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	431a      	orrs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c54:	431a      	orrs	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5e:	ea42 0103 	orr.w	r1, r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c66:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	0c1b      	lsrs	r3, r3, #16
 8006c78:	f003 0204 	and.w	r2, r3, #4
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	f003 0310 	and.w	r3, r3, #16
 8006c84:	431a      	orrs	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006c98:	ea42 0103 	orr.w	r1, r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b088      	sub	sp, #32
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	60b9      	str	r1, [r7, #8]
 8006ccc:	603b      	str	r3, [r7, #0]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d101      	bne.n	8006ce4 <HAL_SPI_Transmit+0x22>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e15f      	b.n	8006fa4 <HAL_SPI_Transmit+0x2e2>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cec:	f7fb fadc 	bl	80022a8 <HAL_GetTick>
 8006cf0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cf2:	88fb      	ldrh	r3, [r7, #6]
 8006cf4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d002      	beq.n	8006d08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d02:	2302      	movs	r3, #2
 8006d04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d06:	e148      	b.n	8006f9a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d002      	beq.n	8006d14 <HAL_SPI_Transmit+0x52>
 8006d0e:	88fb      	ldrh	r3, [r7, #6]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d102      	bne.n	8006d1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d18:	e13f      	b.n	8006f9a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2203      	movs	r2, #3
 8006d1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	88fa      	ldrh	r2, [r7, #6]
 8006d32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	88fa      	ldrh	r2, [r7, #6]
 8006d38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d64:	d10f      	bne.n	8006d86 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d90:	2b40      	cmp	r3, #64	; 0x40
 8006d92:	d007      	beq.n	8006da4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006da2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006dac:	d94f      	bls.n	8006e4e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <HAL_SPI_Transmit+0xfa>
 8006db6:	8afb      	ldrh	r3, [r7, #22]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d142      	bne.n	8006e42 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	881a      	ldrh	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dcc:	1c9a      	adds	r2, r3, #2
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006de0:	e02f      	b.n	8006e42 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d112      	bne.n	8006e16 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df4:	881a      	ldrh	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e00:	1c9a      	adds	r2, r3, #2
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e14:	e015      	b.n	8006e42 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e16:	f7fb fa47 	bl	80022a8 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d803      	bhi.n	8006e2e <HAL_SPI_Transmit+0x16c>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2c:	d102      	bne.n	8006e34 <HAL_SPI_Transmit+0x172>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d106      	bne.n	8006e42 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006e40:	e0ab      	b.n	8006f9a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1ca      	bne.n	8006de2 <HAL_SPI_Transmit+0x120>
 8006e4c:	e080      	b.n	8006f50 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d002      	beq.n	8006e5c <HAL_SPI_Transmit+0x19a>
 8006e56:	8afb      	ldrh	r3, [r7, #22]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d174      	bne.n	8006f46 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d912      	bls.n	8006e8c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6a:	881a      	ldrh	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e76:	1c9a      	adds	r2, r3, #2
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	3b02      	subs	r3, #2
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e8a:	e05c      	b.n	8006f46 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	330c      	adds	r3, #12
 8006e96:	7812      	ldrb	r2, [r2, #0]
 8006e98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006eb2:	e048      	b.n	8006f46 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d12b      	bne.n	8006f1a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d912      	bls.n	8006ef2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed0:	881a      	ldrh	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006edc:	1c9a      	adds	r2, r3, #2
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	3b02      	subs	r3, #2
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ef0:	e029      	b.n	8006f46 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	330c      	adds	r3, #12
 8006efc:	7812      	ldrb	r2, [r2, #0]
 8006efe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	3b01      	subs	r3, #1
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f18:	e015      	b.n	8006f46 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f1a:	f7fb f9c5 	bl	80022a8 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d803      	bhi.n	8006f32 <HAL_SPI_Transmit+0x270>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f30:	d102      	bne.n	8006f38 <HAL_SPI_Transmit+0x276>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d106      	bne.n	8006f46 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006f44:	e029      	b.n	8006f9a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1b1      	bne.n	8006eb4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f001 f8a7 	bl	80080a8 <SPI_EndRxTxTransaction>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2220      	movs	r2, #32
 8006f64:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10a      	bne.n	8006f84 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f6e:	2300      	movs	r3, #0
 8006f70:	613b      	str	r3, [r7, #16]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	613b      	str	r3, [r7, #16]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	613b      	str	r3, [r7, #16]
 8006f82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	77fb      	strb	r3, [r7, #31]
 8006f90:	e003      	b.n	8006f9a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006fa2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3720      	adds	r7, #32
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	603b      	str	r3, [r7, #0]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d002      	beq.n	8006fd2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fd0:	e11a      	b.n	8007208 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fda:	d112      	bne.n	8007002 <HAL_SPI_Receive+0x56>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10e      	bne.n	8007002 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2204      	movs	r2, #4
 8006fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006fec:	88fa      	ldrh	r2, [r7, #6]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	68b9      	ldr	r1, [r7, #8]
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 f90e 	bl	800721a <HAL_SPI_TransmitReceive>
 8006ffe:	4603      	mov	r3, r0
 8007000:	e107      	b.n	8007212 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007008:	2b01      	cmp	r3, #1
 800700a:	d101      	bne.n	8007010 <HAL_SPI_Receive+0x64>
 800700c:	2302      	movs	r3, #2
 800700e:	e100      	b.n	8007212 <HAL_SPI_Receive+0x266>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007018:	f7fb f946 	bl	80022a8 <HAL_GetTick>
 800701c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <HAL_SPI_Receive+0x7e>
 8007024:	88fb      	ldrh	r3, [r7, #6]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d102      	bne.n	8007030 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800702e:	e0eb      	b.n	8007208 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2204      	movs	r2, #4
 8007034:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	88fa      	ldrh	r2, [r7, #6]
 8007048:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	88fa      	ldrh	r2, [r7, #6]
 8007050:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800707a:	d908      	bls.n	800708e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800708a:	605a      	str	r2, [r3, #4]
 800708c:	e007      	b.n	800709e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800709c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070a6:	d10f      	bne.n	80070c8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070c6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d2:	2b40      	cmp	r3, #64	; 0x40
 80070d4:	d007      	beq.n	80070e6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070e4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070ee:	d86f      	bhi.n	80071d0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80070f0:	e034      	b.n	800715c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f003 0301 	and.w	r3, r3, #1
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d117      	bne.n	8007130 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f103 020c 	add.w	r2, r3, #12
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710c:	7812      	ldrb	r2, [r2, #0]
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007122:	b29b      	uxth	r3, r3
 8007124:	3b01      	subs	r3, #1
 8007126:	b29a      	uxth	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800712e:	e015      	b.n	800715c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007130:	f7fb f8ba 	bl	80022a8 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	429a      	cmp	r2, r3
 800713e:	d803      	bhi.n	8007148 <HAL_SPI_Receive+0x19c>
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007146:	d102      	bne.n	800714e <HAL_SPI_Receive+0x1a2>
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800715a:	e055      	b.n	8007208 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007162:	b29b      	uxth	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1c4      	bne.n	80070f2 <HAL_SPI_Receive+0x146>
 8007168:	e038      	b.n	80071dc <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b01      	cmp	r3, #1
 8007176:	d115      	bne.n	80071a4 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	b292      	uxth	r2, r2
 8007184:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	1c9a      	adds	r2, r3, #2
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007196:	b29b      	uxth	r3, r3
 8007198:	3b01      	subs	r3, #1
 800719a:	b29a      	uxth	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80071a2:	e015      	b.n	80071d0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071a4:	f7fb f880 	bl	80022a8 <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d803      	bhi.n	80071bc <HAL_SPI_Receive+0x210>
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ba:	d102      	bne.n	80071c2 <HAL_SPI_Receive+0x216>
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d106      	bne.n	80071d0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80071ce:	e01b      	b.n	8007208 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1c6      	bne.n	800716a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 ff09 	bl	8007ff8 <SPI_EndRxTransaction>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2220      	movs	r2, #32
 80071f0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d002      	beq.n	8007200 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	75fb      	strb	r3, [r7, #23]
 80071fe:	e003      	b.n	8007208 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007210:	7dfb      	ldrb	r3, [r7, #23]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b08a      	sub	sp, #40	; 0x28
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	607a      	str	r2, [r7, #4]
 8007226:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007228:	2301      	movs	r3, #1
 800722a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_SPI_TransmitReceive+0x26>
 800723c:	2302      	movs	r3, #2
 800723e:	e20a      	b.n	8007656 <HAL_SPI_TransmitReceive+0x43c>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007248:	f7fb f82e 	bl	80022a8 <HAL_GetTick>
 800724c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007254:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800725c:	887b      	ldrh	r3, [r7, #2]
 800725e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007260:	887b      	ldrh	r3, [r7, #2]
 8007262:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007264:	7efb      	ldrb	r3, [r7, #27]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d00e      	beq.n	8007288 <HAL_SPI_TransmitReceive+0x6e>
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007270:	d106      	bne.n	8007280 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d102      	bne.n	8007280 <HAL_SPI_TransmitReceive+0x66>
 800727a:	7efb      	ldrb	r3, [r7, #27]
 800727c:	2b04      	cmp	r3, #4
 800727e:	d003      	beq.n	8007288 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007280:	2302      	movs	r3, #2
 8007282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007286:	e1e0      	b.n	800764a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d005      	beq.n	800729a <HAL_SPI_TransmitReceive+0x80>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <HAL_SPI_TransmitReceive+0x80>
 8007294:	887b      	ldrh	r3, [r7, #2]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d103      	bne.n	80072a2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80072a0:	e1d3      	b.n	800764a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b04      	cmp	r3, #4
 80072ac:	d003      	beq.n	80072b6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2205      	movs	r2, #5
 80072b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	887a      	ldrh	r2, [r7, #2]
 80072c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	887a      	ldrh	r2, [r7, #2]
 80072ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	887a      	ldrh	r2, [r7, #2]
 80072dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	887a      	ldrh	r2, [r7, #2]
 80072e2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072f8:	d802      	bhi.n	8007300 <HAL_SPI_TransmitReceive+0xe6>
 80072fa:	8a3b      	ldrh	r3, [r7, #16]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d908      	bls.n	8007312 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800730e:	605a      	str	r2, [r3, #4]
 8007310:	e007      	b.n	8007322 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007320:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732c:	2b40      	cmp	r3, #64	; 0x40
 800732e:	d007      	beq.n	8007340 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800733e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007348:	f240 8081 	bls.w	800744e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <HAL_SPI_TransmitReceive+0x140>
 8007354:	8a7b      	ldrh	r3, [r7, #18]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d16d      	bne.n	8007436 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	881a      	ldrh	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736a:	1c9a      	adds	r2, r3, #2
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007374:	b29b      	uxth	r3, r3
 8007376:	3b01      	subs	r3, #1
 8007378:	b29a      	uxth	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800737e:	e05a      	b.n	8007436 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b02      	cmp	r3, #2
 800738c:	d11b      	bne.n	80073c6 <HAL_SPI_TransmitReceive+0x1ac>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007392:	b29b      	uxth	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	d016      	beq.n	80073c6 <HAL_SPI_TransmitReceive+0x1ac>
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	2b01      	cmp	r3, #1
 800739c:	d113      	bne.n	80073c6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a2:	881a      	ldrh	r2, [r3, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ae:	1c9a      	adds	r2, r3, #2
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	3b01      	subs	r3, #1
 80073bc:	b29a      	uxth	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d11c      	bne.n	800740e <HAL_SPI_TransmitReceive+0x1f4>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073da:	b29b      	uxth	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d016      	beq.n	800740e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ea:	b292      	uxth	r2, r2
 80073ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	1c9a      	adds	r2, r3, #2
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073fe:	b29b      	uxth	r3, r3
 8007400:	3b01      	subs	r3, #1
 8007402:	b29a      	uxth	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800740a:	2301      	movs	r3, #1
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800740e:	f7fa ff4b 	bl	80022a8 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800741a:	429a      	cmp	r2, r3
 800741c:	d80b      	bhi.n	8007436 <HAL_SPI_TransmitReceive+0x21c>
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007424:	d007      	beq.n	8007436 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007434:	e109      	b.n	800764a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800743a:	b29b      	uxth	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d19f      	bne.n	8007380 <HAL_SPI_TransmitReceive+0x166>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007446:	b29b      	uxth	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	d199      	bne.n	8007380 <HAL_SPI_TransmitReceive+0x166>
 800744c:	e0e3      	b.n	8007616 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <HAL_SPI_TransmitReceive+0x244>
 8007456:	8a7b      	ldrh	r3, [r7, #18]
 8007458:	2b01      	cmp	r3, #1
 800745a:	f040 80cf 	bne.w	80075fc <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007462:	b29b      	uxth	r3, r3
 8007464:	2b01      	cmp	r3, #1
 8007466:	d912      	bls.n	800748e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746c:	881a      	ldrh	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007478:	1c9a      	adds	r2, r3, #2
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b02      	subs	r3, #2
 8007486:	b29a      	uxth	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800748c:	e0b6      	b.n	80075fc <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	330c      	adds	r3, #12
 8007498:	7812      	ldrb	r2, [r2, #0]
 800749a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	3b01      	subs	r3, #1
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074b4:	e0a2      	b.n	80075fc <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d134      	bne.n	800752e <HAL_SPI_TransmitReceive+0x314>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d02f      	beq.n	800752e <HAL_SPI_TransmitReceive+0x314>
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d12c      	bne.n	800752e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074d8:	b29b      	uxth	r3, r3
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d912      	bls.n	8007504 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e2:	881a      	ldrh	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	1c9a      	adds	r2, r3, #2
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3b02      	subs	r3, #2
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007502:	e012      	b.n	800752a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	330c      	adds	r3, #12
 800750e:	7812      	ldrb	r2, [r2, #0]
 8007510:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007520:	b29b      	uxth	r3, r3
 8007522:	3b01      	subs	r3, #1
 8007524:	b29a      	uxth	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b01      	cmp	r3, #1
 800753a:	d148      	bne.n	80075ce <HAL_SPI_TransmitReceive+0x3b4>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007542:	b29b      	uxth	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d042      	beq.n	80075ce <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800754e:	b29b      	uxth	r3, r3
 8007550:	2b01      	cmp	r3, #1
 8007552:	d923      	bls.n	800759c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	b292      	uxth	r2, r2
 8007560:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	1c9a      	adds	r2, r3, #2
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007572:	b29b      	uxth	r3, r3
 8007574:	3b02      	subs	r3, #2
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007584:	b29b      	uxth	r3, r3
 8007586:	2b01      	cmp	r3, #1
 8007588:	d81f      	bhi.n	80075ca <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007598:	605a      	str	r2, [r3, #4]
 800759a:	e016      	b.n	80075ca <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f103 020c 	add.w	r2, r3, #12
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a8:	7812      	ldrb	r2, [r2, #0]
 80075aa:	b2d2      	uxtb	r2, r2
 80075ac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075be:	b29b      	uxth	r3, r3
 80075c0:	3b01      	subs	r3, #1
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075ca:	2301      	movs	r3, #1
 80075cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075ce:	f7fa fe6b 	bl	80022a8 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075da:	429a      	cmp	r2, r3
 80075dc:	d803      	bhi.n	80075e6 <HAL_SPI_TransmitReceive+0x3cc>
 80075de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e4:	d102      	bne.n	80075ec <HAL_SPI_TransmitReceive+0x3d2>
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d107      	bne.n	80075fc <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80075fa:	e026      	b.n	800764a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007600:	b29b      	uxth	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	f47f af57 	bne.w	80074b6 <HAL_SPI_TransmitReceive+0x29c>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800760e:	b29b      	uxth	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	f47f af50 	bne.w	80074b6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007616:	69fa      	ldr	r2, [r7, #28]
 8007618:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 fd44 	bl	80080a8 <SPI_EndRxTxTransaction>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2220      	movs	r2, #32
 8007630:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007640:	e003      	b.n	800764a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007652:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007656:	4618      	mov	r0, r3
 8007658:	3728      	adds	r7, #40	; 0x28
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
	...

08007660 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	4613      	mov	r3, r2
 800766c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b01      	cmp	r3, #1
 800767c:	d002      	beq.n	8007684 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800767e:	2302      	movs	r3, #2
 8007680:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007682:	e0fe      	b.n	8007882 <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d110      	bne.n	80076ae <HAL_SPI_Receive_DMA+0x4e>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007694:	d10b      	bne.n	80076ae <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2204      	movs	r2, #4
 800769a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800769e:	88fb      	ldrh	r3, [r7, #6]
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	68b9      	ldr	r1, [r7, #8]
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f000 f8fb 	bl	80078a0 <HAL_SPI_TransmitReceive_DMA>
 80076aa:	4603      	mov	r3, r0
 80076ac:	e0ee      	b.n	800788c <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d101      	bne.n	80076bc <HAL_SPI_Receive_DMA+0x5c>
 80076b8:	2302      	movs	r3, #2
 80076ba:	e0e7      	b.n	800788c <HAL_SPI_Receive_DMA+0x22c>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <HAL_SPI_Receive_DMA+0x70>
 80076ca:	88fb      	ldrh	r3, [r7, #6]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d102      	bne.n	80076d6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076d4:	e0d5      	b.n	8007882 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2204      	movs	r2, #4
 80076da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	88fa      	ldrh	r2, [r7, #6]
 80076ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	88fa      	ldrh	r2, [r7, #6]
 80076f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800771a:	d10f      	bne.n	800773c <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800772a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800773a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800774a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007754:	d908      	bls.n	8007768 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007764:	605a      	str	r2, [r3, #4]
 8007766:	e042      	b.n	80077ee <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007776:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007782:	d134      	bne.n	80077ee <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007792:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800779a:	b29b      	uxth	r3, r3
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d111      	bne.n	80077c8 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077b2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	085b      	lsrs	r3, r3, #1
 80077be:	b29a      	uxth	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80077c6:	e012      	b.n	80077ee <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077d6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077de:	b29b      	uxth	r3, r3
 80077e0:	085b      	lsrs	r3, r3, #1
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	3301      	adds	r3, #1
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f2:	4a28      	ldr	r2, [pc, #160]	; (8007894 <HAL_SPI_Receive_DMA+0x234>)
 80077f4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fa:	4a27      	ldr	r2, [pc, #156]	; (8007898 <HAL_SPI_Receive_DMA+0x238>)
 80077fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007802:	4a26      	ldr	r2, [pc, #152]	; (800789c <HAL_SPI_Receive_DMA+0x23c>)
 8007804:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800780a:	2200      	movs	r2, #0
 800780c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	330c      	adds	r3, #12
 8007818:	4619      	mov	r1, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007826:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007828:	f7fb fecf 	bl	80035ca <HAL_DMA_Start_IT>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d008      	beq.n	8007844 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007836:	f043 0210 	orr.w	r2, r3, #16
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007842:	e01e      	b.n	8007882 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784e:	2b40      	cmp	r3, #64	; 0x40
 8007850:	d007      	beq.n	8007862 <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007860:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f042 0220 	orr.w	r2, r2, #32
 8007870:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f042 0201 	orr.w	r2, r2, #1
 8007880:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800788a:	7dfb      	ldrb	r3, [r7, #23]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	08007d45 	.word	0x08007d45
 8007898:	08007c0d 	.word	0x08007c0d
 800789c:	08007d7d 	.word	0x08007d7d

080078a0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
 80078ac:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d101      	bne.n	80078c0 <HAL_SPI_TransmitReceive_DMA+0x20>
 80078bc:	2302      	movs	r3, #2
 80078be:	e164      	b.n	8007b8a <HAL_SPI_TransmitReceive_DMA+0x2ea>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80078ce:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80078d6:	7dbb      	ldrb	r3, [r7, #22]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d00d      	beq.n	80078f8 <HAL_SPI_TransmitReceive_DMA+0x58>
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078e2:	d106      	bne.n	80078f2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <HAL_SPI_TransmitReceive_DMA+0x52>
 80078ec:	7dbb      	ldrb	r3, [r7, #22]
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d002      	beq.n	80078f8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80078f2:	2302      	movs	r3, #2
 80078f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80078f6:	e143      	b.n	8007b80 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <HAL_SPI_TransmitReceive_DMA+0x6a>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007904:	887b      	ldrh	r3, [r7, #2]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d102      	bne.n	8007910 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800790e:	e137      	b.n	8007b80 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b04      	cmp	r3, #4
 800791a:	d003      	beq.n	8007924 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2205      	movs	r2, #5
 8007920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	887a      	ldrh	r2, [r7, #2]
 8007934:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	887a      	ldrh	r2, [r7, #2]
 800793a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	887a      	ldrh	r2, [r7, #2]
 8007946:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	887a      	ldrh	r2, [r7, #2]
 800794e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800796c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007976:	d908      	bls.n	800798a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007986:	605a      	str	r2, [r3, #4]
 8007988:	e06f      	b.n	8007a6a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007998:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079a4:	d126      	bne.n	80079f4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10f      	bne.n	80079d2 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80079c0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	085b      	lsrs	r3, r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079d0:	e010      	b.n	80079f4 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079e0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	085b      	lsrs	r3, r3, #1
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	3301      	adds	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079fe:	d134      	bne.n	8007a6a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a0e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d111      	bne.n	8007a44 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a2e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	085b      	lsrs	r3, r3, #1
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007a42:	e012      	b.n	8007a6a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a52:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	085b      	lsrs	r3, r3, #1
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	3301      	adds	r3, #1
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d108      	bne.n	8007a88 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a7a:	4a46      	ldr	r2, [pc, #280]	; (8007b94 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 8007a7c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a82:	4a45      	ldr	r2, [pc, #276]	; (8007b98 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8007a84:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a86:	e007      	b.n	8007a98 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a8c:	4a43      	ldr	r2, [pc, #268]	; (8007b9c <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8007a8e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a94:	4a42      	ldr	r2, [pc, #264]	; (8007ba0 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8007a96:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a9c:	4a41      	ldr	r2, [pc, #260]	; (8007ba4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8007a9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	330c      	adds	r3, #12
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ac0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007ac2:	f7fb fd82 	bl	80035ca <HAL_DMA_Start_IT>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d008      	beq.n	8007ade <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ad0:	f043 0210 	orr.w	r2, r3, #16
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007adc:	e050      	b.n	8007b80 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f042 0201 	orr.w	r2, r2, #1
 8007aec:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af2:	2200      	movs	r2, #0
 8007af4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007afa:	2200      	movs	r2, #0
 8007afc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b02:	2200      	movs	r2, #0
 8007b04:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b16:	4619      	mov	r1, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	330c      	adds	r3, #12
 8007b1e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b24:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007b26:	f7fb fd50 	bl	80035ca <HAL_DMA_Start_IT>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d008      	beq.n	8007b42 <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b34:	f043 0210 	orr.w	r2, r3, #16
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007b40:	e01e      	b.n	8007b80 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b4c:	2b40      	cmp	r3, #64	; 0x40
 8007b4e:	d007      	beq.n	8007b60 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b5e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f042 0220 	orr.w	r2, r2, #32
 8007b6e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0202 	orr.w	r2, r2, #2
 8007b7e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	08007d45 	.word	0x08007d45
 8007b98:	08007c0d 	.word	0x08007c0d
 8007b9c:	08007d61 	.word	0x08007d61
 8007ba0:	08007cb5 	.word	0x08007cb5
 8007ba4:	08007d7d 	.word	0x08007d7d

08007ba8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c18:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c1a:	f7fa fb45 	bl	80022a8 <HAL_GetTick>
 8007c1e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0320 	and.w	r3, r3, #32
 8007c2a:	2b20      	cmp	r3, #32
 8007c2c:	d03c      	beq.n	8007ca8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 0220 	bic.w	r2, r2, #32
 8007c3c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10d      	bne.n	8007c62 <SPI_DMAReceiveCplt+0x56>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c4e:	d108      	bne.n	8007c62 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f022 0203 	bic.w	r2, r2, #3
 8007c5e:	605a      	str	r2, [r3, #4]
 8007c60:	e007      	b.n	8007c72 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f022 0201 	bic.w	r2, r2, #1
 8007c70:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	2164      	movs	r1, #100	; 0x64
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f000 f9be 	bl	8007ff8 <SPI_EndRxTransaction>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2220      	movs	r2, #32
 8007c86:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f7ff ffa9 	bl	8007bf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007ca6:	e002      	b.n	8007cae <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f7ff ff7d 	bl	8007ba8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cc2:	f7fa faf1 	bl	80022a8 <HAL_GetTick>
 8007cc6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	2b20      	cmp	r3, #32
 8007cd4:	d030      	beq.n	8007d38 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f022 0220 	bic.w	r2, r2, #32
 8007ce4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	2164      	movs	r1, #100	; 0x64
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 f9dc 	bl	80080a8 <SPI_EndRxTxTransaction>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d005      	beq.n	8007d02 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cfa:	f043 0220 	orr.w	r2, r3, #32
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 0203 	bic.w	r2, r2, #3
 8007d10:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f7ff ff61 	bl	8007bf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007d36:	e002      	b.n	8007d3e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f7ff ff3f 	bl	8007bbc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f7ff ff3c 	bl	8007bd0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d58:	bf00      	nop
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f7ff ff38 	bl	8007be4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d74:	bf00      	nop
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d88:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f022 0203 	bic.w	r2, r2, #3
 8007d98:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d9e:	f043 0210 	orr.w	r2, r3, #16
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f7ff ff22 	bl	8007bf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007db4:	bf00      	nop
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b088      	sub	sp, #32
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	603b      	str	r3, [r7, #0]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007dcc:	f7fa fa6c 	bl	80022a8 <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd4:	1a9b      	subs	r3, r3, r2
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	4413      	add	r3, r2
 8007dda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ddc:	f7fa fa64 	bl	80022a8 <HAL_GetTick>
 8007de0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007de2:	4b39      	ldr	r3, [pc, #228]	; (8007ec8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	015b      	lsls	r3, r3, #5
 8007de8:	0d1b      	lsrs	r3, r3, #20
 8007dea:	69fa      	ldr	r2, [r7, #28]
 8007dec:	fb02 f303 	mul.w	r3, r2, r3
 8007df0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007df2:	e054      	b.n	8007e9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfa:	d050      	beq.n	8007e9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007dfc:	f7fa fa54 	bl	80022a8 <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	69fa      	ldr	r2, [r7, #28]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d902      	bls.n	8007e12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d13d      	bne.n	8007e8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e2a:	d111      	bne.n	8007e50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e34:	d004      	beq.n	8007e40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e3e:	d107      	bne.n	8007e50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e58:	d10f      	bne.n	8007e7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e017      	b.n	8007ebe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689a      	ldr	r2, [r3, #8]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	bf0c      	ite	eq
 8007eae:	2301      	moveq	r3, #1
 8007eb0:	2300      	movne	r3, #0
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d19b      	bne.n	8007df4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3720      	adds	r7, #32
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20000000 	.word	0x20000000

08007ecc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b08a      	sub	sp, #40	; 0x28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007ede:	f7fa f9e3 	bl	80022a8 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee6:	1a9b      	subs	r3, r3, r2
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	4413      	add	r3, r2
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007eee:	f7fa f9db 	bl	80022a8 <HAL_GetTick>
 8007ef2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	330c      	adds	r3, #12
 8007efa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007efc:	4b3d      	ldr	r3, [pc, #244]	; (8007ff4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	4613      	mov	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	00da      	lsls	r2, r3, #3
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	0d1b      	lsrs	r3, r3, #20
 8007f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f0e:	fb02 f303 	mul.w	r3, r2, r3
 8007f12:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007f14:	e060      	b.n	8007fd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007f1c:	d107      	bne.n	8007f2e <SPI_WaitFifoStateUntilTimeout+0x62>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d104      	bne.n	8007f2e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f34:	d050      	beq.n	8007fd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f36:	f7fa f9b7 	bl	80022a8 <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	6a3b      	ldr	r3, [r7, #32]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d902      	bls.n	8007f4c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d13d      	bne.n	8007fc8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f64:	d111      	bne.n	8007f8a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f6e:	d004      	beq.n	8007f7a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f78:	d107      	bne.n	8007f8a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f92:	d10f      	bne.n	8007fb4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e010      	b.n	8007fea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689a      	ldr	r2, [r3, #8]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d196      	bne.n	8007f16 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3728      	adds	r7, #40	; 0x28
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20000000 	.word	0x20000000

08007ff8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af02      	add	r7, sp, #8
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800800c:	d111      	bne.n	8008032 <SPI_EndRxTransaction+0x3a>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008016:	d004      	beq.n	8008022 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008020:	d107      	bne.n	8008032 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008030:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2200      	movs	r2, #0
 800803a:	2180      	movs	r1, #128	; 0x80
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7ff febd 	bl	8007dbc <SPI_WaitFlagStateUntilTimeout>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d007      	beq.n	8008058 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800804c:	f043 0220 	orr.w	r2, r3, #32
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008054:	2303      	movs	r3, #3
 8008056:	e023      	b.n	80080a0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008060:	d11d      	bne.n	800809e <SPI_EndRxTransaction+0xa6>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800806a:	d004      	beq.n	8008076 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008074:	d113      	bne.n	800809e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2200      	movs	r2, #0
 800807e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f7ff ff22 	bl	8007ecc <SPI_WaitFifoStateUntilTimeout>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d007      	beq.n	800809e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008092:	f043 0220 	orr.w	r2, r3, #32
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e000      	b.n	80080a0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af02      	add	r7, sp, #8
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f7ff ff03 	bl	8007ecc <SPI_WaitFifoStateUntilTimeout>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d007      	beq.n	80080dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080d0:	f043 0220 	orr.w	r2, r3, #32
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e027      	b.n	800812c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2200      	movs	r2, #0
 80080e4:	2180      	movs	r1, #128	; 0x80
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f7ff fe68 	bl	8007dbc <SPI_WaitFlagStateUntilTimeout>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d007      	beq.n	8008102 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080f6:	f043 0220 	orr.w	r2, r3, #32
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e014      	b.n	800812c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	2200      	movs	r2, #0
 800810a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f7ff fedc 	bl	8007ecc <SPI_WaitFifoStateUntilTimeout>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d007      	beq.n	800812a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800811e:	f043 0220 	orr.w	r2, r3, #32
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e000      	b.n	800812c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e049      	b.n	80081da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d106      	bne.n	8008160 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7f9 fd54 	bl	8001c08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2202      	movs	r2, #2
 8008164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3304      	adds	r3, #4
 8008170:	4619      	mov	r1, r3
 8008172:	4610      	mov	r0, r2
 8008174:	f000 f94a 	bl	800840c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081f0:	2300      	movs	r3, #0
 80081f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d101      	bne.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80081fe:	2302      	movs	r3, #2
 8008200:	e0ff      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b14      	cmp	r3, #20
 800820e:	f200 80f0 	bhi.w	80083f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008212:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008218:	0800826d 	.word	0x0800826d
 800821c:	080083f3 	.word	0x080083f3
 8008220:	080083f3 	.word	0x080083f3
 8008224:	080083f3 	.word	0x080083f3
 8008228:	080082ad 	.word	0x080082ad
 800822c:	080083f3 	.word	0x080083f3
 8008230:	080083f3 	.word	0x080083f3
 8008234:	080083f3 	.word	0x080083f3
 8008238:	080082ef 	.word	0x080082ef
 800823c:	080083f3 	.word	0x080083f3
 8008240:	080083f3 	.word	0x080083f3
 8008244:	080083f3 	.word	0x080083f3
 8008248:	0800832f 	.word	0x0800832f
 800824c:	080083f3 	.word	0x080083f3
 8008250:	080083f3 	.word	0x080083f3
 8008254:	080083f3 	.word	0x080083f3
 8008258:	08008371 	.word	0x08008371
 800825c:	080083f3 	.word	0x080083f3
 8008260:	080083f3 	.word	0x080083f3
 8008264:	080083f3 	.word	0x080083f3
 8008268:	080083b1 	.word	0x080083b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68b9      	ldr	r1, [r7, #8]
 8008272:	4618      	mov	r0, r3
 8008274:	f000 f964 	bl	8008540 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	699a      	ldr	r2, [r3, #24]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 0208 	orr.w	r2, r2, #8
 8008286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	699a      	ldr	r2, [r3, #24]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 0204 	bic.w	r2, r2, #4
 8008296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	6999      	ldr	r1, [r3, #24]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	691a      	ldr	r2, [r3, #16]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	619a      	str	r2, [r3, #24]
      break;
 80082aa:	e0a5      	b.n	80083f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68b9      	ldr	r1, [r7, #8]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 f9d4 	bl	8008660 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	699a      	ldr	r2, [r3, #24]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	699a      	ldr	r2, [r3, #24]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6999      	ldr	r1, [r3, #24]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	021a      	lsls	r2, r3, #8
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	430a      	orrs	r2, r1
 80082ea:	619a      	str	r2, [r3, #24]
      break;
 80082ec:	e084      	b.n	80083f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68b9      	ldr	r1, [r7, #8]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 fa3d 	bl	8008774 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	69da      	ldr	r2, [r3, #28]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f042 0208 	orr.w	r2, r2, #8
 8008308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	69da      	ldr	r2, [r3, #28]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f022 0204 	bic.w	r2, r2, #4
 8008318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	69d9      	ldr	r1, [r3, #28]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	691a      	ldr	r2, [r3, #16]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	430a      	orrs	r2, r1
 800832a:	61da      	str	r2, [r3, #28]
      break;
 800832c:	e064      	b.n	80083f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68b9      	ldr	r1, [r7, #8]
 8008334:	4618      	mov	r0, r3
 8008336:	f000 faa5 	bl	8008884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	69da      	ldr	r2, [r3, #28]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	69da      	ldr	r2, [r3, #28]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69d9      	ldr	r1, [r3, #28]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	021a      	lsls	r2, r3, #8
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	61da      	str	r2, [r3, #28]
      break;
 800836e:	e043      	b.n	80083f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68b9      	ldr	r1, [r7, #8]
 8008376:	4618      	mov	r0, r3
 8008378:	f000 faee 	bl	8008958 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0208 	orr.w	r2, r2, #8
 800838a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0204 	bic.w	r2, r2, #4
 800839a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	691a      	ldr	r2, [r3, #16]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083ae:	e023      	b.n	80083f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68b9      	ldr	r1, [r7, #8]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 fb32 	bl	8008a20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	021a      	lsls	r2, r3, #8
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083f0:	e002      	b.n	80083f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	75fb      	strb	r3, [r7, #23]
      break;
 80083f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008400:	7dfb      	ldrb	r3, [r7, #23]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3718      	adds	r7, #24
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop

0800840c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a40      	ldr	r2, [pc, #256]	; (8008520 <TIM_Base_SetConfig+0x114>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d013      	beq.n	800844c <TIM_Base_SetConfig+0x40>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800842a:	d00f      	beq.n	800844c <TIM_Base_SetConfig+0x40>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a3d      	ldr	r2, [pc, #244]	; (8008524 <TIM_Base_SetConfig+0x118>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d00b      	beq.n	800844c <TIM_Base_SetConfig+0x40>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a3c      	ldr	r2, [pc, #240]	; (8008528 <TIM_Base_SetConfig+0x11c>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d007      	beq.n	800844c <TIM_Base_SetConfig+0x40>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a3b      	ldr	r2, [pc, #236]	; (800852c <TIM_Base_SetConfig+0x120>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d003      	beq.n	800844c <TIM_Base_SetConfig+0x40>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a3a      	ldr	r2, [pc, #232]	; (8008530 <TIM_Base_SetConfig+0x124>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d108      	bne.n	800845e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	4313      	orrs	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a2f      	ldr	r2, [pc, #188]	; (8008520 <TIM_Base_SetConfig+0x114>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d01f      	beq.n	80084a6 <TIM_Base_SetConfig+0x9a>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800846c:	d01b      	beq.n	80084a6 <TIM_Base_SetConfig+0x9a>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a2c      	ldr	r2, [pc, #176]	; (8008524 <TIM_Base_SetConfig+0x118>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d017      	beq.n	80084a6 <TIM_Base_SetConfig+0x9a>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a2b      	ldr	r2, [pc, #172]	; (8008528 <TIM_Base_SetConfig+0x11c>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d013      	beq.n	80084a6 <TIM_Base_SetConfig+0x9a>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a2a      	ldr	r2, [pc, #168]	; (800852c <TIM_Base_SetConfig+0x120>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d00f      	beq.n	80084a6 <TIM_Base_SetConfig+0x9a>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a29      	ldr	r2, [pc, #164]	; (8008530 <TIM_Base_SetConfig+0x124>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d00b      	beq.n	80084a6 <TIM_Base_SetConfig+0x9a>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a28      	ldr	r2, [pc, #160]	; (8008534 <TIM_Base_SetConfig+0x128>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d007      	beq.n	80084a6 <TIM_Base_SetConfig+0x9a>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a27      	ldr	r2, [pc, #156]	; (8008538 <TIM_Base_SetConfig+0x12c>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d003      	beq.n	80084a6 <TIM_Base_SetConfig+0x9a>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a26      	ldr	r2, [pc, #152]	; (800853c <TIM_Base_SetConfig+0x130>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d108      	bne.n	80084b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	689a      	ldr	r2, [r3, #8]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a10      	ldr	r2, [pc, #64]	; (8008520 <TIM_Base_SetConfig+0x114>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d00f      	beq.n	8008504 <TIM_Base_SetConfig+0xf8>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a12      	ldr	r2, [pc, #72]	; (8008530 <TIM_Base_SetConfig+0x124>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d00b      	beq.n	8008504 <TIM_Base_SetConfig+0xf8>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a11      	ldr	r2, [pc, #68]	; (8008534 <TIM_Base_SetConfig+0x128>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d007      	beq.n	8008504 <TIM_Base_SetConfig+0xf8>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a10      	ldr	r2, [pc, #64]	; (8008538 <TIM_Base_SetConfig+0x12c>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d003      	beq.n	8008504 <TIM_Base_SetConfig+0xf8>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a0f      	ldr	r2, [pc, #60]	; (800853c <TIM_Base_SetConfig+0x130>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d103      	bne.n	800850c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	691a      	ldr	r2, [r3, #16]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	615a      	str	r2, [r3, #20]
}
 8008512:	bf00      	nop
 8008514:	3714      	adds	r7, #20
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	40012c00 	.word	0x40012c00
 8008524:	40000400 	.word	0x40000400
 8008528:	40000800 	.word	0x40000800
 800852c:	40000c00 	.word	0x40000c00
 8008530:	40013400 	.word	0x40013400
 8008534:	40014000 	.word	0x40014000
 8008538:	40014400 	.word	0x40014400
 800853c:	40014800 	.word	0x40014800

08008540 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	f023 0201 	bic.w	r2, r3, #1
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800856e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f023 0303 	bic.w	r3, r3, #3
 800857a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	4313      	orrs	r3, r2
 8008584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f023 0302 	bic.w	r3, r3, #2
 800858c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	4313      	orrs	r3, r2
 8008596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a2c      	ldr	r2, [pc, #176]	; (800864c <TIM_OC1_SetConfig+0x10c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d00f      	beq.n	80085c0 <TIM_OC1_SetConfig+0x80>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a2b      	ldr	r2, [pc, #172]	; (8008650 <TIM_OC1_SetConfig+0x110>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d00b      	beq.n	80085c0 <TIM_OC1_SetConfig+0x80>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a2a      	ldr	r2, [pc, #168]	; (8008654 <TIM_OC1_SetConfig+0x114>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d007      	beq.n	80085c0 <TIM_OC1_SetConfig+0x80>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a29      	ldr	r2, [pc, #164]	; (8008658 <TIM_OC1_SetConfig+0x118>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d003      	beq.n	80085c0 <TIM_OC1_SetConfig+0x80>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a28      	ldr	r2, [pc, #160]	; (800865c <TIM_OC1_SetConfig+0x11c>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d10c      	bne.n	80085da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f023 0308 	bic.w	r3, r3, #8
 80085c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	f023 0304 	bic.w	r3, r3, #4
 80085d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a1b      	ldr	r2, [pc, #108]	; (800864c <TIM_OC1_SetConfig+0x10c>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d00f      	beq.n	8008602 <TIM_OC1_SetConfig+0xc2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a1a      	ldr	r2, [pc, #104]	; (8008650 <TIM_OC1_SetConfig+0x110>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d00b      	beq.n	8008602 <TIM_OC1_SetConfig+0xc2>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a19      	ldr	r2, [pc, #100]	; (8008654 <TIM_OC1_SetConfig+0x114>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d007      	beq.n	8008602 <TIM_OC1_SetConfig+0xc2>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a18      	ldr	r2, [pc, #96]	; (8008658 <TIM_OC1_SetConfig+0x118>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d003      	beq.n	8008602 <TIM_OC1_SetConfig+0xc2>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a17      	ldr	r2, [pc, #92]	; (800865c <TIM_OC1_SetConfig+0x11c>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d111      	bne.n	8008626 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	693a      	ldr	r2, [r7, #16]
 8008618:	4313      	orrs	r3, r2
 800861a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	4313      	orrs	r3, r2
 8008624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	697a      	ldr	r2, [r7, #20]
 800863e:	621a      	str	r2, [r3, #32]
}
 8008640:	bf00      	nop
 8008642:	371c      	adds	r7, #28
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	40012c00 	.word	0x40012c00
 8008650:	40013400 	.word	0x40013400
 8008654:	40014000 	.word	0x40014000
 8008658:	40014400 	.word	0x40014400
 800865c:	40014800 	.word	0x40014800

08008660 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008660:	b480      	push	{r7}
 8008662:	b087      	sub	sp, #28
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a1b      	ldr	r3, [r3, #32]
 8008674:	f023 0210 	bic.w	r2, r3, #16
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800868e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800869a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	021b      	lsls	r3, r3, #8
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	f023 0320 	bic.w	r3, r3, #32
 80086ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	011b      	lsls	r3, r3, #4
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a28      	ldr	r2, [pc, #160]	; (8008760 <TIM_OC2_SetConfig+0x100>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d003      	beq.n	80086cc <TIM_OC2_SetConfig+0x6c>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a27      	ldr	r2, [pc, #156]	; (8008764 <TIM_OC2_SetConfig+0x104>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d10d      	bne.n	80086e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	4313      	orrs	r3, r2
 80086de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a1d      	ldr	r2, [pc, #116]	; (8008760 <TIM_OC2_SetConfig+0x100>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00f      	beq.n	8008710 <TIM_OC2_SetConfig+0xb0>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a1c      	ldr	r2, [pc, #112]	; (8008764 <TIM_OC2_SetConfig+0x104>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d00b      	beq.n	8008710 <TIM_OC2_SetConfig+0xb0>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a1b      	ldr	r2, [pc, #108]	; (8008768 <TIM_OC2_SetConfig+0x108>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d007      	beq.n	8008710 <TIM_OC2_SetConfig+0xb0>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a1a      	ldr	r2, [pc, #104]	; (800876c <TIM_OC2_SetConfig+0x10c>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d003      	beq.n	8008710 <TIM_OC2_SetConfig+0xb0>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a19      	ldr	r2, [pc, #100]	; (8008770 <TIM_OC2_SetConfig+0x110>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d113      	bne.n	8008738 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008716:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800871e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	4313      	orrs	r3, r2
 800872a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	4313      	orrs	r3, r2
 8008736:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	685a      	ldr	r2, [r3, #4]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	621a      	str	r2, [r3, #32]
}
 8008752:	bf00      	nop
 8008754:	371c      	adds	r7, #28
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	40012c00 	.word	0x40012c00
 8008764:	40013400 	.word	0x40013400
 8008768:	40014000 	.word	0x40014000
 800876c:	40014400 	.word	0x40014400
 8008770:	40014800 	.word	0x40014800

08008774 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008774:	b480      	push	{r7}
 8008776:	b087      	sub	sp, #28
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a1b      	ldr	r3, [r3, #32]
 8008782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a1b      	ldr	r3, [r3, #32]
 8008788:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	69db      	ldr	r3, [r3, #28]
 800879a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 0303 	bic.w	r3, r3, #3
 80087ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	021b      	lsls	r3, r3, #8
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a27      	ldr	r2, [pc, #156]	; (8008870 <TIM_OC3_SetConfig+0xfc>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d003      	beq.n	80087de <TIM_OC3_SetConfig+0x6a>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a26      	ldr	r2, [pc, #152]	; (8008874 <TIM_OC3_SetConfig+0x100>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d10d      	bne.n	80087fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	021b      	lsls	r3, r3, #8
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a1c      	ldr	r2, [pc, #112]	; (8008870 <TIM_OC3_SetConfig+0xfc>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d00f      	beq.n	8008822 <TIM_OC3_SetConfig+0xae>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a1b      	ldr	r2, [pc, #108]	; (8008874 <TIM_OC3_SetConfig+0x100>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d00b      	beq.n	8008822 <TIM_OC3_SetConfig+0xae>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a1a      	ldr	r2, [pc, #104]	; (8008878 <TIM_OC3_SetConfig+0x104>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d007      	beq.n	8008822 <TIM_OC3_SetConfig+0xae>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a19      	ldr	r2, [pc, #100]	; (800887c <TIM_OC3_SetConfig+0x108>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d003      	beq.n	8008822 <TIM_OC3_SetConfig+0xae>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a18      	ldr	r2, [pc, #96]	; (8008880 <TIM_OC3_SetConfig+0x10c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d113      	bne.n	800884a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	011b      	lsls	r3, r3, #4
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	4313      	orrs	r3, r2
 800883c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	011b      	lsls	r3, r3, #4
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	4313      	orrs	r3, r2
 8008848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	685a      	ldr	r2, [r3, #4]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	697a      	ldr	r2, [r7, #20]
 8008862:	621a      	str	r2, [r3, #32]
}
 8008864:	bf00      	nop
 8008866:	371c      	adds	r7, #28
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	40012c00 	.word	0x40012c00
 8008874:	40013400 	.word	0x40013400
 8008878:	40014000 	.word	0x40014000
 800887c:	40014400 	.word	0x40014400
 8008880:	40014800 	.word	0x40014800

08008884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008884:	b480      	push	{r7}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	021b      	lsls	r3, r3, #8
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	031b      	lsls	r3, r3, #12
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	4313      	orrs	r3, r2
 80088de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a18      	ldr	r2, [pc, #96]	; (8008944 <TIM_OC4_SetConfig+0xc0>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d00f      	beq.n	8008908 <TIM_OC4_SetConfig+0x84>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a17      	ldr	r2, [pc, #92]	; (8008948 <TIM_OC4_SetConfig+0xc4>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d00b      	beq.n	8008908 <TIM_OC4_SetConfig+0x84>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a16      	ldr	r2, [pc, #88]	; (800894c <TIM_OC4_SetConfig+0xc8>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d007      	beq.n	8008908 <TIM_OC4_SetConfig+0x84>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a15      	ldr	r2, [pc, #84]	; (8008950 <TIM_OC4_SetConfig+0xcc>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d003      	beq.n	8008908 <TIM_OC4_SetConfig+0x84>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a14      	ldr	r2, [pc, #80]	; (8008954 <TIM_OC4_SetConfig+0xd0>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d109      	bne.n	800891c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800890e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	695b      	ldr	r3, [r3, #20]
 8008914:	019b      	lsls	r3, r3, #6
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	4313      	orrs	r3, r2
 800891a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	621a      	str	r2, [r3, #32]
}
 8008936:	bf00      	nop
 8008938:	371c      	adds	r7, #28
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	40012c00 	.word	0x40012c00
 8008948:	40013400 	.word	0x40013400
 800894c:	40014000 	.word	0x40014000
 8008950:	40014400 	.word	0x40014400
 8008954:	40014800 	.word	0x40014800

08008958 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008958:	b480      	push	{r7}
 800895a:	b087      	sub	sp, #28
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a1b      	ldr	r3, [r3, #32]
 800896c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800897e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800898a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	4313      	orrs	r3, r2
 8008994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800899c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	041b      	lsls	r3, r3, #16
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a17      	ldr	r2, [pc, #92]	; (8008a0c <TIM_OC5_SetConfig+0xb4>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d00f      	beq.n	80089d2 <TIM_OC5_SetConfig+0x7a>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a16      	ldr	r2, [pc, #88]	; (8008a10 <TIM_OC5_SetConfig+0xb8>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d00b      	beq.n	80089d2 <TIM_OC5_SetConfig+0x7a>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a15      	ldr	r2, [pc, #84]	; (8008a14 <TIM_OC5_SetConfig+0xbc>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d007      	beq.n	80089d2 <TIM_OC5_SetConfig+0x7a>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a14      	ldr	r2, [pc, #80]	; (8008a18 <TIM_OC5_SetConfig+0xc0>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d003      	beq.n	80089d2 <TIM_OC5_SetConfig+0x7a>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a13      	ldr	r2, [pc, #76]	; (8008a1c <TIM_OC5_SetConfig+0xc4>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d109      	bne.n	80089e6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	021b      	lsls	r3, r3, #8
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	685a      	ldr	r2, [r3, #4]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	621a      	str	r2, [r3, #32]
}
 8008a00:	bf00      	nop
 8008a02:	371c      	adds	r7, #28
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr
 8008a0c:	40012c00 	.word	0x40012c00
 8008a10:	40013400 	.word	0x40013400
 8008a14:	40014000 	.word	0x40014000
 8008a18:	40014400 	.word	0x40014400
 8008a1c:	40014800 	.word	0x40014800

08008a20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a1b      	ldr	r3, [r3, #32]
 8008a34:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	021b      	lsls	r3, r3, #8
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	051b      	lsls	r3, r3, #20
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a18      	ldr	r2, [pc, #96]	; (8008ad8 <TIM_OC6_SetConfig+0xb8>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d00f      	beq.n	8008a9c <TIM_OC6_SetConfig+0x7c>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a17      	ldr	r2, [pc, #92]	; (8008adc <TIM_OC6_SetConfig+0xbc>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d00b      	beq.n	8008a9c <TIM_OC6_SetConfig+0x7c>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a16      	ldr	r2, [pc, #88]	; (8008ae0 <TIM_OC6_SetConfig+0xc0>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d007      	beq.n	8008a9c <TIM_OC6_SetConfig+0x7c>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a15      	ldr	r2, [pc, #84]	; (8008ae4 <TIM_OC6_SetConfig+0xc4>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d003      	beq.n	8008a9c <TIM_OC6_SetConfig+0x7c>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a14      	ldr	r2, [pc, #80]	; (8008ae8 <TIM_OC6_SetConfig+0xc8>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d109      	bne.n	8008ab0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	029b      	lsls	r3, r3, #10
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	621a      	str	r2, [r3, #32]
}
 8008aca:	bf00      	nop
 8008acc:	371c      	adds	r7, #28
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	40012c00 	.word	0x40012c00
 8008adc:	40013400 	.word	0x40013400
 8008ae0:	40014000 	.word	0x40014000
 8008ae4:	40014400 	.word	0x40014400
 8008ae8:	40014800 	.word	0x40014800

08008aec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d101      	bne.n	8008b04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b00:	2302      	movs	r3, #2
 8008b02:	e068      	b.n	8008bd6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a2e      	ldr	r2, [pc, #184]	; (8008be4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d004      	beq.n	8008b38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a2d      	ldr	r2, [pc, #180]	; (8008be8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d108      	bne.n	8008b4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a1e      	ldr	r2, [pc, #120]	; (8008be4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d01d      	beq.n	8008baa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b76:	d018      	beq.n	8008baa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a1b      	ldr	r2, [pc, #108]	; (8008bec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d013      	beq.n	8008baa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a1a      	ldr	r2, [pc, #104]	; (8008bf0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d00e      	beq.n	8008baa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a18      	ldr	r2, [pc, #96]	; (8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d009      	beq.n	8008baa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a13      	ldr	r2, [pc, #76]	; (8008be8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d004      	beq.n	8008baa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a14      	ldr	r2, [pc, #80]	; (8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d10c      	bne.n	8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	40012c00 	.word	0x40012c00
 8008be8:	40013400 	.word	0x40013400
 8008bec:	40000400 	.word	0x40000400
 8008bf0:	40000800 	.word	0x40000800
 8008bf4:	40000c00 	.word	0x40000c00
 8008bf8:	40014000 	.word	0x40014000

08008bfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d101      	bne.n	8008c18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c14:	2302      	movs	r3, #2
 8008c16:	e065      	b.n	8008ce4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	041b      	lsls	r3, r3, #16
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a16      	ldr	r2, [pc, #88]	; (8008cf0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d004      	beq.n	8008ca6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a14      	ldr	r2, [pc, #80]	; (8008cf4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d115      	bne.n	8008cd2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb0:	051b      	lsls	r3, r3, #20
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	69db      	ldr	r3, [r3, #28]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	6a1b      	ldr	r3, [r3, #32]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	40012c00 	.word	0x40012c00
 8008cf4:	40013400 	.word	0x40013400

08008cf8 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b08b      	sub	sp, #44	; 0x2c
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d101      	bne.n	8008d18 <HAL_TIMEx_ConfigBreakInput+0x20>
 8008d14:	2302      	movs	r3, #2
 8008d16:	e0af      	b.n	8008e78 <HAL_TIMEx_ConfigBreakInput+0x180>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3b01      	subs	r3, #1
 8008d26:	2b07      	cmp	r3, #7
 8008d28:	d83a      	bhi.n	8008da0 <HAL_TIMEx_ConfigBreakInput+0xa8>
 8008d2a:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d51 	.word	0x08008d51
 8008d34:	08008d65 	.word	0x08008d65
 8008d38:	08008da1 	.word	0x08008da1
 8008d3c:	08008d79 	.word	0x08008d79
 8008d40:	08008da1 	.word	0x08008da1
 8008d44:	08008da1 	.word	0x08008da1
 8008d48:	08008da1 	.word	0x08008da1
 8008d4c:	08008d8d 	.word	0x08008d8d
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 8008d50:	2301      	movs	r3, #1
 8008d52:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 8008d54:	2300      	movs	r3, #0
 8008d56:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 8008d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d5c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 8008d5e:	2309      	movs	r3, #9
 8008d60:	613b      	str	r3, [r7, #16]
      break;
 8008d62:	e026      	b.n	8008db2 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 8008d64:	2302      	movs	r3, #2
 8008d66:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 8008d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d70:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 8008d72:	230a      	movs	r3, #10
 8008d74:	613b      	str	r3, [r7, #16]
      break;
 8008d76:	e01c      	b.n	8008db2 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 8008d78:	2304      	movs	r3, #4
 8008d7a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 8008d80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d84:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 8008d86:	230b      	movs	r3, #11
 8008d88:	613b      	str	r3, [r7, #16]
      break;
 8008d8a:	e012      	b.n	8008db2 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 8008d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d90:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 8008d92:	2308      	movs	r3, #8
 8008d94:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	613b      	str	r3, [r7, #16]
      break;
 8008d9e:	e008      	b.n	8008db2 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 8008da0:	2300      	movs	r3, #0
 8008da2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 8008da4:	2300      	movs	r3, #0
 8008da6:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	613b      	str	r3, [r7, #16]
      break;
 8008db0:	bf00      	nop
    }
  }

  switch (BreakInput)
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d003      	beq.n	8008dc0 <HAL_TIMEx_ConfigBreakInput+0xc8>
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d029      	beq.n	8008e12 <HAL_TIMEx_ConfigBreakInput+0x11a>
 8008dbe:	e051      	b.n	8008e64 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dc6:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	43db      	mvns	r3, r3
 8008dcc:	6a3a      	ldr	r2, [r7, #32]
 8008dce:	4013      	ands	r3, r2
 8008dd0:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	685a      	ldr	r2, [r3, #4]
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	409a      	lsls	r2, r3
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	4013      	ands	r3, r2
 8008dde:	6a3a      	ldr	r2, [r7, #32]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d00d      	beq.n	8008e08 <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	43db      	mvns	r3, r3
 8008df0:	6a3a      	ldr	r2, [r7, #32]
 8008df2:	4013      	ands	r3, r2
 8008df4:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	689a      	ldr	r2, [r3, #8]
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	409a      	lsls	r2, r3
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	4013      	ands	r3, r2
 8008e02:	6a3a      	ldr	r2, [r7, #32]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6a3a      	ldr	r2, [r7, #32]
 8008e0e:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8008e10:	e02c      	b.n	8008e6c <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e18:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	43db      	mvns	r3, r3
 8008e1e:	6a3a      	ldr	r2, [r7, #32]
 8008e20:	4013      	ands	r3, r2
 8008e22:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685a      	ldr	r2, [r3, #4]
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	409a      	lsls	r2, r3
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	4013      	ands	r3, r2
 8008e30:	6a3a      	ldr	r2, [r7, #32]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2b08      	cmp	r3, #8
 8008e3c:	d00d      	beq.n	8008e5a <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	43db      	mvns	r3, r3
 8008e42:	6a3a      	ldr	r2, [r7, #32]
 8008e44:	4013      	ands	r3, r2
 8008e46:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	689a      	ldr	r2, [r3, #8]
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	409a      	lsls	r2, r3
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	4013      	ands	r3, r2
 8008e54:	6a3a      	ldr	r2, [r7, #32]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6a3a      	ldr	r2, [r7, #32]
 8008e60:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8008e62:	e003      	b.n	8008e6c <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008e6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	372c      	adds	r7, #44	; 0x2c
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <memset>:
 8008e84:	4402      	add	r2, r0
 8008e86:	4603      	mov	r3, r0
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d100      	bne.n	8008e8e <memset+0xa>
 8008e8c:	4770      	bx	lr
 8008e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e92:	e7f9      	b.n	8008e88 <memset+0x4>

08008e94 <__libc_init_array>:
 8008e94:	b570      	push	{r4, r5, r6, lr}
 8008e96:	4d0d      	ldr	r5, [pc, #52]	; (8008ecc <__libc_init_array+0x38>)
 8008e98:	4c0d      	ldr	r4, [pc, #52]	; (8008ed0 <__libc_init_array+0x3c>)
 8008e9a:	1b64      	subs	r4, r4, r5
 8008e9c:	10a4      	asrs	r4, r4, #2
 8008e9e:	2600      	movs	r6, #0
 8008ea0:	42a6      	cmp	r6, r4
 8008ea2:	d109      	bne.n	8008eb8 <__libc_init_array+0x24>
 8008ea4:	4d0b      	ldr	r5, [pc, #44]	; (8008ed4 <__libc_init_array+0x40>)
 8008ea6:	4c0c      	ldr	r4, [pc, #48]	; (8008ed8 <__libc_init_array+0x44>)
 8008ea8:	f000 f818 	bl	8008edc <_init>
 8008eac:	1b64      	subs	r4, r4, r5
 8008eae:	10a4      	asrs	r4, r4, #2
 8008eb0:	2600      	movs	r6, #0
 8008eb2:	42a6      	cmp	r6, r4
 8008eb4:	d105      	bne.n	8008ec2 <__libc_init_array+0x2e>
 8008eb6:	bd70      	pop	{r4, r5, r6, pc}
 8008eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ebc:	4798      	blx	r3
 8008ebe:	3601      	adds	r6, #1
 8008ec0:	e7ee      	b.n	8008ea0 <__libc_init_array+0xc>
 8008ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ec6:	4798      	blx	r3
 8008ec8:	3601      	adds	r6, #1
 8008eca:	e7f2      	b.n	8008eb2 <__libc_init_array+0x1e>
 8008ecc:	08008f44 	.word	0x08008f44
 8008ed0:	08008f44 	.word	0x08008f44
 8008ed4:	08008f44 	.word	0x08008f44
 8008ed8:	08008f48 	.word	0x08008f48

08008edc <_init>:
 8008edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ede:	bf00      	nop
 8008ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee2:	bc08      	pop	{r3}
 8008ee4:	469e      	mov	lr, r3
 8008ee6:	4770      	bx	lr

08008ee8 <_fini>:
 8008ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eea:	bf00      	nop
 8008eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eee:	bc08      	pop	{r3}
 8008ef0:	469e      	mov	lr, r3
 8008ef2:	4770      	bx	lr

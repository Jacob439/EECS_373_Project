
LoRa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d30  080001c0  080001c0  000011c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008ef0  08008ef0  00009ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f38  08008f38  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000008  08008f38  08008f38  00009f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f40  08008f40  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f40  08008f40  00009f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f44  08008f44  00009f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008f48  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  2000000c  08008f54  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08008f54  0000a490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001428b  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002864  00000000  00000000  0001e2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  00020b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001054  00000000  00000000  00022030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bfb0  00000000  00000000  00023084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e13  00000000  00000000  0004f034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116c75  00000000  00000000  00065e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017cabc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a2c  00000000  00000000  0017cb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0018252c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008ed8 	.word	0x08008ed8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08008ed8 	.word	0x08008ed8

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96a 	b.w	80004ec <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	460c      	mov	r4, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14e      	bne.n	80002da <__udivmoddi4+0xaa>
 800023c:	4694      	mov	ip, r2
 800023e:	458c      	cmp	ip, r1
 8000240:	4686      	mov	lr, r0
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	d962      	bls.n	800030e <__udivmoddi4+0xde>
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0320 	rsb	r3, r2, #32
 800024e:	4091      	lsls	r1, r2
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	fa0c fc02 	lsl.w	ip, ip, r2
 8000258:	4319      	orrs	r1, r3
 800025a:	fa00 fe02 	lsl.w	lr, r0, r2
 800025e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000262:	fa1f f68c 	uxth.w	r6, ip
 8000266:	fbb1 f4f7 	udiv	r4, r1, r7
 800026a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026e:	fb07 1114 	mls	r1, r7, r4, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb04 f106 	mul.w	r1, r4, r6
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f104 30ff 	add.w	r0, r4, #4294967295
 8000286:	f080 8112 	bcs.w	80004ae <__udivmoddi4+0x27e>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 810f 	bls.w	80004ae <__udivmoddi4+0x27e>
 8000290:	3c02      	subs	r4, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a59      	subs	r1, r3, r1
 8000296:	fa1f f38e 	uxth.w	r3, lr
 800029a:	fbb1 f0f7 	udiv	r0, r1, r7
 800029e:	fb07 1110 	mls	r1, r7, r0, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb00 f606 	mul.w	r6, r0, r6
 80002aa:	429e      	cmp	r6, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x94>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b6:	f080 80fc 	bcs.w	80004b2 <__udivmoddi4+0x282>
 80002ba:	429e      	cmp	r6, r3
 80002bc:	f240 80f9 	bls.w	80004b2 <__udivmoddi4+0x282>
 80002c0:	4463      	add	r3, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	1b9b      	subs	r3, r3, r6
 80002c6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa6>
 80002ce:	40d3      	lsrs	r3, r2
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xba>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb4>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa6>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x150>
 80002f2:	42a3      	cmp	r3, r4
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xcc>
 80002f6:	4290      	cmp	r0, r2
 80002f8:	f0c0 80f0 	bcc.w	80004dc <__udivmoddi4+0x2ac>
 80002fc:	1a86      	subs	r6, r0, r2
 80002fe:	eb64 0303 	sbc.w	r3, r4, r3
 8000302:	2001      	movs	r0, #1
 8000304:	2d00      	cmp	r5, #0
 8000306:	d0e6      	beq.n	80002d6 <__udivmoddi4+0xa6>
 8000308:	e9c5 6300 	strd	r6, r3, [r5]
 800030c:	e7e3      	b.n	80002d6 <__udivmoddi4+0xa6>
 800030e:	2a00      	cmp	r2, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x204>
 8000314:	eba1 040c 	sub.w	r4, r1, ip
 8000318:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800031c:	fa1f f78c 	uxth.w	r7, ip
 8000320:	2101      	movs	r1, #1
 8000322:	fbb4 f6f8 	udiv	r6, r4, r8
 8000326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032a:	fb08 4416 	mls	r4, r8, r6, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb07 f006 	mul.w	r0, r7, r6
 8000336:	4298      	cmp	r0, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x11c>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x11a>
 8000344:	4298      	cmp	r0, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 800034a:	4626      	mov	r6, r4
 800034c:	1a1c      	subs	r4, r3, r0
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb4 f0f8 	udiv	r0, r4, r8
 8000356:	fb08 4410 	mls	r4, r8, r0, r4
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	fb00 f707 	mul.w	r7, r0, r7
 8000362:	429f      	cmp	r7, r3
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x148>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 34ff 	add.w	r4, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x146>
 8000370:	429f      	cmp	r7, r3
 8000372:	f200 80b0 	bhi.w	80004d6 <__udivmoddi4+0x2a6>
 8000376:	4620      	mov	r0, r4
 8000378:	1bdb      	subs	r3, r3, r7
 800037a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x9c>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000390:	fa04 f301 	lsl.w	r3, r4, r1
 8000394:	ea43 030c 	orr.w	r3, r3, ip
 8000398:	40f4      	lsrs	r4, r6
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	0c38      	lsrs	r0, r7, #16
 80003a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a4:	fbb4 fef0 	udiv	lr, r4, r0
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	fb00 441e 	mls	r4, r0, lr, r4
 80003b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b4:	fb0e f90c 	mul.w	r9, lr, ip
 80003b8:	45a1      	cmp	r9, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d90a      	bls.n	80003d6 <__udivmoddi4+0x1a6>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c6:	f080 8084 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80003ca:	45a1      	cmp	r9, r4
 80003cc:	f240 8081 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80003d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	eba4 0409 	sub.w	r4, r4, r9
 80003da:	fa1f f983 	uxth.w	r9, r3
 80003de:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e2:	fb00 4413 	mls	r4, r0, r3, r4
 80003e6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1d2>
 80003f2:	193c      	adds	r4, r7, r4
 80003f4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f8:	d267      	bcs.n	80004ca <__udivmoddi4+0x29a>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d965      	bls.n	80004ca <__udivmoddi4+0x29a>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000406:	fba0 9302 	umull	r9, r3, r0, r2
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	429c      	cmp	r4, r3
 8000410:	46ce      	mov	lr, r9
 8000412:	469c      	mov	ip, r3
 8000414:	d351      	bcc.n	80004ba <__udivmoddi4+0x28a>
 8000416:	d04e      	beq.n	80004b6 <__udivmoddi4+0x286>
 8000418:	b155      	cbz	r5, 8000430 <__udivmoddi4+0x200>
 800041a:	ebb8 030e 	subs.w	r3, r8, lr
 800041e:	eb64 040c 	sbc.w	r4, r4, ip
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	40cb      	lsrs	r3, r1
 8000428:	431e      	orrs	r6, r3
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c5 6400 	strd	r6, r4, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e750      	b.n	80002d6 <__udivmoddi4+0xa6>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f103 	lsr.w	r1, r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa24 f303 	lsr.w	r3, r4, r3
 8000444:	4094      	lsls	r4, r2
 8000446:	430c      	orrs	r4, r1
 8000448:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800044c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000450:	fa1f f78c 	uxth.w	r7, ip
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3110 	mls	r1, r8, r0, r3
 800045c:	0c23      	lsrs	r3, r4, #16
 800045e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000462:	fb00 f107 	mul.w	r1, r0, r7
 8000466:	4299      	cmp	r1, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x24c>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000472:	d22c      	bcs.n	80004ce <__udivmoddi4+0x29e>
 8000474:	4299      	cmp	r1, r3
 8000476:	d92a      	bls.n	80004ce <__udivmoddi4+0x29e>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb3 f1f8 	udiv	r1, r3, r8
 8000484:	fb08 3311 	mls	r3, r8, r1, r3
 8000488:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800048c:	fb01 f307 	mul.w	r3, r1, r7
 8000490:	42a3      	cmp	r3, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x276>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f101 36ff 	add.w	r6, r1, #4294967295
 800049c:	d213      	bcs.n	80004c6 <__udivmoddi4+0x296>
 800049e:	42a3      	cmp	r3, r4
 80004a0:	d911      	bls.n	80004c6 <__udivmoddi4+0x296>
 80004a2:	3902      	subs	r1, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	1ae4      	subs	r4, r4, r3
 80004a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ac:	e739      	b.n	8000322 <__udivmoddi4+0xf2>
 80004ae:	4604      	mov	r4, r0
 80004b0:	e6f0      	b.n	8000294 <__udivmoddi4+0x64>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e706      	b.n	80002c4 <__udivmoddi4+0x94>
 80004b6:	45c8      	cmp	r8, r9
 80004b8:	d2ae      	bcs.n	8000418 <__udivmoddi4+0x1e8>
 80004ba:	ebb9 0e02 	subs.w	lr, r9, r2
 80004be:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c2:	3801      	subs	r0, #1
 80004c4:	e7a8      	b.n	8000418 <__udivmoddi4+0x1e8>
 80004c6:	4631      	mov	r1, r6
 80004c8:	e7ed      	b.n	80004a6 <__udivmoddi4+0x276>
 80004ca:	4603      	mov	r3, r0
 80004cc:	e799      	b.n	8000402 <__udivmoddi4+0x1d2>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e7d4      	b.n	800047c <__udivmoddi4+0x24c>
 80004d2:	46d6      	mov	lr, sl
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1a6>
 80004d6:	4463      	add	r3, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e74d      	b.n	8000378 <__udivmoddi4+0x148>
 80004dc:	4606      	mov	r6, r0
 80004de:	4623      	mov	r3, r4
 80004e0:	4608      	mov	r0, r1
 80004e2:	e70f      	b.n	8000304 <__udivmoddi4+0xd4>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	e730      	b.n	800034c <__udivmoddi4+0x11c>
 80004ea:	bf00      	nop

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	460b      	mov	r3, r1
 80004fa:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8000500:	78fb      	ldrb	r3, [r7, #3]
 8000502:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000506:	b2db      	uxtb	r3, r3
 8000508:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6858      	ldr	r0, [r3, #4]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	8adb      	ldrh	r3, [r3, #22]
 8000512:	2200      	movs	r2, #0
 8000514:	4619      	mov	r1, r3
 8000516:	f003 faa1 	bl	8003a5c <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6818      	ldr	r0, [r3, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	1cf9      	adds	r1, r7, #3
 8000524:	2201      	movs	r2, #1
 8000526:	f006 fbca 	bl	8006cbe <HAL_SPI_Transmit>
 800052a:	4603      	mov	r3, r0
 800052c:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6818      	ldr	r0, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	f107 010f 	add.w	r1, r7, #15
 800053a:	2201      	movs	r2, #1
 800053c:	f006 fd34 	bl	8006fa8 <HAL_SPI_Receive>
 8000540:	4603      	mov	r3, r0
 8000542:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6858      	ldr	r0, [r3, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	8adb      	ldrh	r3, [r3, #22]
 800054c:	2201      	movs	r2, #1
 800054e:	4619      	mov	r1, r3
 8000550:	f003 fa84 	bl	8003a5c <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000554:	7bfb      	ldrb	r3, [r7, #15]
}
 8000556:	4618      	mov	r0, r3
 8000558:	3718      	adds	r7, #24
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b084      	sub	sp, #16
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	460b      	mov	r3, r1
 8000568:	70fb      	strb	r3, [r7, #3]
 800056a:	4613      	mov	r3, r2
 800056c:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800056e:	78fb      	ldrb	r3, [r7, #3]
 8000570:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000574:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000576:	78bb      	ldrb	r3, [r7, #2]
 8000578:	021b      	lsls	r3, r3, #8
 800057a:	b21a      	sxth	r2, r3
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	b21b      	sxth	r3, r3
 8000580:	4313      	orrs	r3, r2
 8000582:	b21b      	sxth	r3, r3
 8000584:	b29b      	uxth	r3, r3
 8000586:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6858      	ldr	r0, [r3, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	8adb      	ldrh	r3, [r3, #22]
 8000590:	2200      	movs	r2, #0
 8000592:	4619      	mov	r1, r3
 8000594:	f003 fa62 	bl	8003a5c <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6818      	ldr	r0, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	f107 010a 	add.w	r1, r7, #10
 80005a4:	2202      	movs	r2, #2
 80005a6:	f006 fb8a 	bl	8006cbe <HAL_SPI_Transmit>
 80005aa:	4603      	mov	r3, r0
 80005ac:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6858      	ldr	r0, [r3, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	8adb      	ldrh	r3, [r3, #22]
 80005b6:	2201      	movs	r2, #1
 80005b8:	4619      	mov	r1, r3
 80005ba:	f003 fa4f 	bl	8003a5c <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <read_fifo>:
  }
}

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b088      	sub	sp, #32
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	60f8      	str	r0, [r7, #12]
 80005ce:	60b9      	str	r1, [r7, #8]
 80005d0:	4611      	mov	r1, r2
 80005d2:	461a      	mov	r2, r3
 80005d4:	460b      	mov	r3, r1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	4613      	mov	r3, r2
 80005da:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO;
 80005dc:	2300      	movs	r3, #0
 80005de:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	6858      	ldr	r0, [r3, #4]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	8adb      	ldrh	r3, [r3, #22]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	f003 fa36 	bl	8003a5c <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	6818      	ldr	r0, [r3, #0]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f107 0117 	add.w	r1, r7, #23
 80005fc:	2201      	movs	r2, #1
 80005fe:	f006 fb5e 	bl	8006cbe <HAL_SPI_Transmit>
 8000602:	4603      	mov	r3, r0
 8000604:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d10a      	bne.n	8000622 <read_fifo+0x5c>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	79fa      	ldrb	r2, [r7, #7]
 8000612:	b292      	uxth	r2, r2
 8000614:	68b9      	ldr	r1, [r7, #8]
 8000616:	4618      	mov	r0, r3
 8000618:	f007 f820 	bl	800765c <HAL_SPI_Receive_DMA>
 800061c:	4603      	mov	r3, r0
 800061e:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 8000620:	e012      	b.n	8000648 <read_fifo+0x82>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	6818      	ldr	r0, [r3, #0]
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	b29a      	uxth	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	68b9      	ldr	r1, [r7, #8]
 8000630:	f006 fcba 	bl	8006fa8 <HAL_SPI_Receive>
 8000634:	4603      	mov	r3, r0
 8000636:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	6858      	ldr	r0, [r3, #4]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	8adb      	ldrh	r3, [r3, #22]
 8000640:	2201      	movs	r2, #1
 8000642:	4619      	mov	r1, r3
 8000644:	f003 fa0a 	bl	8003a5c <HAL_GPIO_WritePin>
}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	460b      	mov	r3, r1
 800065a:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000662:	b2db      	uxtb	r3, r3
 8000664:	461a      	mov	r2, r3
 8000666:	2101      	movs	r1, #1
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff ff78 	bl	800055e <write_register>
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	2b2c      	cmp	r3, #44	@ 0x2c
 8000688:	d801      	bhi.n	800068e <set_OCP+0x16>
    imax = 45;
 800068a:	232d      	movs	r3, #45	@ 0x2d
 800068c:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 800068e:	78fb      	ldrb	r3, [r7, #3]
 8000690:	2bf0      	cmp	r3, #240	@ 0xf0
 8000692:	d901      	bls.n	8000698 <set_OCP+0x20>
    imax = 240;
 8000694:	23f0      	movs	r3, #240	@ 0xf0
 8000696:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8000698:	78fb      	ldrb	r3, [r7, #3]
 800069a:	2b81      	cmp	r3, #129	@ 0x81
 800069c:	d809      	bhi.n	80006b2 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 800069e:	78fb      	ldrb	r3, [r7, #3]
 80006a0:	3b2d      	subs	r3, #45	@ 0x2d
 80006a2:	4a0f      	ldr	r2, [pc, #60]	@ (80006e0 <set_OCP+0x68>)
 80006a4:	fb82 1203 	smull	r1, r2, r2, r3
 80006a8:	1052      	asrs	r2, r2, #1
 80006aa:	17db      	asrs	r3, r3, #31
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	73fb      	strb	r3, [r7, #15]
 80006b0:	e008      	b.n	80006c4 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 80006b2:	78fb      	ldrb	r3, [r7, #3]
 80006b4:	331e      	adds	r3, #30
 80006b6:	4a0a      	ldr	r2, [pc, #40]	@ (80006e0 <set_OCP+0x68>)
 80006b8:	fb82 1203 	smull	r1, r2, r2, r3
 80006bc:	1092      	asrs	r2, r2, #2
 80006be:	17db      	asrs	r3, r3, #31
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	f043 0320 	orr.w	r3, r3, #32
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	461a      	mov	r2, r3
 80006ce:	210b      	movs	r1, #11
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff ff44 	bl	800055e <write_register>
}
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	66666667 	.word	0x66666667

080006e4 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 80006e4:	b5b0      	push	{r4, r5, r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 80006ec:	211d      	movs	r1, #29
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f7ff fefe 	bl	80004f0 <read_register>
 80006f4:	4603      	mov	r3, r0
 80006f6:	091b      	lsrs	r3, r3, #4
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2200      	movs	r2, #0
 80006fe:	461c      	mov	r4, r3
 8000700:	4615      	mov	r5, r2
 8000702:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8000706:	211e      	movs	r1, #30
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff fef1 	bl	80004f0 <read_register>
 800070e:	4603      	mov	r3, r0
 8000710:	091b      	lsrs	r3, r3, #4
 8000712:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8000714:	2304      	movs	r3, #4
 8000716:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	2b0a      	cmp	r3, #10
 800071c:	d908      	bls.n	8000730 <set_low_data_rate_optimization+0x4c>
 800071e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000722:	1fd1      	subs	r1, r2, #7
 8000724:	430b      	orrs	r3, r1
 8000726:	d103      	bne.n	8000730 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8000728:	7ffb      	ldrb	r3, [r7, #31]
 800072a:	f043 0308 	orr.w	r3, r3, #8
 800072e:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8000730:	7ffb      	ldrb	r3, [r7, #31]
 8000732:	461a      	mov	r2, r3
 8000734:	2126      	movs	r1, #38	@ 0x26
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff ff11 	bl	800055e <write_register>
}
 800073c:	bf00      	nop
 800073e:	3720      	adds	r7, #32
 8000740:	46bd      	mov	sp, r7
 8000742:	bdb0      	pop	{r4, r5, r7, pc}

08000744 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 800074c:	2100      	movs	r1, #0
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff ff7e 	bl	8000650 <set_mode>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <lora_mode_receive_continuous>:

void lora_mode_receive_continuous(lora_sx1276 *lora)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	7d5b      	ldrb	r3, [r3, #21]
 8000768:	461a      	mov	r2, r3
 800076a:	210f      	movs	r1, #15
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff fef6 	bl	800055e <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8000772:	22f0      	movs	r2, #240	@ 0xf0
 8000774:	2112      	movs	r1, #18
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff fef1 	bl	800055e <write_register>

  set_mode(lora, OPMODE_RX_CONTINUOUS);
 800077c:	2105      	movs	r1, #5
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff ff66 	bl	8000650 <set_mode>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8000794:	2101      	movs	r1, #1
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ff5a 	bl	8000650 <set_mode>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80007ac:	211d      	movs	r1, #29
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff fe9e 	bl	80004f0 <read_register>
 80007b4:	4603      	mov	r3, r0
 80007b6:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	f023 0301 	bic.w	r3, r3, #1
 80007be:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	461a      	mov	r2, r3
 80007c4:	211d      	movs	r1, #29
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff fec9 	bl	800055e <write_register>
}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	691b      	ldr	r3, [r3, #16]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d10e      	bne.n	8000806 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2b0f      	cmp	r3, #15
 80007ec:	d901      	bls.n	80007f2 <lora_set_tx_power+0x1e>
      level = 15;
 80007ee:	230f      	movs	r3, #15
 80007f0:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80007f2:	78fb      	ldrb	r3, [r7, #3]
 80007f4:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	2109      	movs	r1, #9
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff fead 	bl	800055e <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8000804:	e02e      	b.n	8000864 <lora_set_tx_power+0x90>
    if (level > 20) {
 8000806:	78fb      	ldrb	r3, [r7, #3]
 8000808:	2b14      	cmp	r3, #20
 800080a:	d901      	bls.n	8000810 <lora_set_tx_power+0x3c>
      level = 20;
 800080c:	2314      	movs	r3, #20
 800080e:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d801      	bhi.n	800081a <lora_set_tx_power+0x46>
      level = 2;
 8000816:	2302      	movs	r3, #2
 8000818:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	2b11      	cmp	r3, #17
 800081e:	d90c      	bls.n	800083a <lora_set_tx_power+0x66>
      level -= 3;
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	3b03      	subs	r3, #3
 8000824:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8000826:	2287      	movs	r2, #135	@ 0x87
 8000828:	214d      	movs	r1, #77	@ 0x4d
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff fe97 	bl	800055e <write_register>
      set_OCP(lora, 140);
 8000830:	218c      	movs	r1, #140	@ 0x8c
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ff20 	bl	8000678 <set_OCP>
 8000838:	e008      	b.n	800084c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800083a:	2284      	movs	r2, #132	@ 0x84
 800083c:	214d      	movs	r1, #77	@ 0x4d
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff fe8d 	bl	800055e <write_register>
      set_OCP(lora, 97);
 8000844:	2161      	movs	r1, #97	@ 0x61
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff ff16 	bl	8000678 <set_OCP>
    level -= 2;
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	3b02      	subs	r3, #2
 8000850:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8000852:	78fb      	ldrb	r3, [r7, #3]
 8000854:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000858:	b2db      	uxtb	r3, r3
 800085a:	461a      	mov	r2, r3
 800085c:	2109      	movs	r1, #9
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff fe7d 	bl	800055e <write_register>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8000878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	f04f 0100 	mov.w	r1, #0
 8000884:	04d9      	lsls	r1, r3, #19
 8000886:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800088a:	04d0      	lsls	r0, r2, #19
 800088c:	4a19      	ldr	r2, [pc, #100]	@ (80008f4 <lora_set_frequency+0x88>)
 800088e:	f04f 0300 	mov.w	r3, #0
 8000892:	f7ff fcb5 	bl	8000200 <__aeabi_uldivmod>
 8000896:	4602      	mov	r2, r0
 8000898:	460b      	mov	r3, r1
 800089a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 800089e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80008a2:	f04f 0200 	mov.w	r2, #0
 80008a6:	f04f 0300 	mov.w	r3, #0
 80008aa:	0c02      	lsrs	r2, r0, #16
 80008ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008b0:	0c0b      	lsrs	r3, r1, #16
 80008b2:	b2d3      	uxtb	r3, r2
 80008b4:	461a      	mov	r2, r3
 80008b6:	2106      	movs	r1, #6
 80008b8:	68f8      	ldr	r0, [r7, #12]
 80008ba:	f7ff fe50 	bl	800055e <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80008be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80008c2:	f04f 0200 	mov.w	r2, #0
 80008c6:	f04f 0300 	mov.w	r3, #0
 80008ca:	0a02      	lsrs	r2, r0, #8
 80008cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80008d0:	0a0b      	lsrs	r3, r1, #8
 80008d2:	b2d3      	uxtb	r3, r2
 80008d4:	461a      	mov	r2, r3
 80008d6:	2107      	movs	r1, #7
 80008d8:	68f8      	ldr	r0, [r7, #12]
 80008da:	f7ff fe40 	bl	800055e <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80008de:	7c3b      	ldrb	r3, [r7, #16]
 80008e0:	461a      	mov	r2, r3
 80008e2:	2108      	movs	r1, #8
 80008e4:	68f8      	ldr	r0, [r7, #12]
 80008e6:	f7ff fe3a 	bl	800055e <write_register>
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	01e84800 	.word	0x01e84800

080008f8 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	2b05      	cmp	r3, #5
 8000908:	d802      	bhi.n	8000910 <lora_set_spreading_factor+0x18>
    sf = 6;
 800090a:	2306      	movs	r3, #6
 800090c:	70fb      	strb	r3, [r7, #3]
 800090e:	e004      	b.n	800091a <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	2b0c      	cmp	r3, #12
 8000914:	d901      	bls.n	800091a <lora_set_spreading_factor+0x22>
    sf = 12;
 8000916:	230c      	movs	r3, #12
 8000918:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 800091a:	78fb      	ldrb	r3, [r7, #3]
 800091c:	2b06      	cmp	r3, #6
 800091e:	d10a      	bne.n	8000936 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8000920:	22c5      	movs	r2, #197	@ 0xc5
 8000922:	2131      	movs	r1, #49	@ 0x31
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff fe1a 	bl	800055e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 800092a:	220c      	movs	r2, #12
 800092c:	2137      	movs	r1, #55	@ 0x37
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff fe15 	bl	800055e <write_register>
 8000934:	e009      	b.n	800094a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8000936:	22c3      	movs	r2, #195	@ 0xc3
 8000938:	2131      	movs	r1, #49	@ 0x31
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff fe0f 	bl	800055e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000940:	220a      	movs	r2, #10
 8000942:	2137      	movs	r1, #55	@ 0x37
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff fe0a 	bl	800055e <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800094a:	211e      	movs	r1, #30
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff fdcf 	bl	80004f0 <read_register>
 8000952:	4603      	mov	r3, r0
 8000954:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8000956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	b25a      	sxtb	r2, r3
 8000960:	78fb      	ldrb	r3, [r7, #3]
 8000962:	011b      	lsls	r3, r3, #4
 8000964:	b25b      	sxtb	r3, r3
 8000966:	4313      	orrs	r3, r2
 8000968:	b25b      	sxtb	r3, r3
 800096a:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	461a      	mov	r2, r3
 8000970:	211e      	movs	r1, #30
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff fdf3 	bl	800055e <write_register>

  set_low_data_rate_optimization(lora);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff feb3 	bl	80006e4 <set_low_data_rate_optimization>
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	460b      	mov	r3, r1
 8000990:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8000992:	887b      	ldrh	r3, [r7, #2]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	b29b      	uxth	r3, r3
 8000998:	b2db      	uxtb	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	2120      	movs	r1, #32
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff fddd 	bl	800055e <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 80009a4:	887b      	ldrh	r3, [r7, #2]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	f003 030f 	and.w	r3, r3, #15
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	461a      	mov	r2, r3
 80009b0:	2121      	movs	r1, #33	@ 0x21
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff fdd3 	bl	800055e <write_register>
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 80009c8:	2142      	movs	r1, #66	@ 0x42
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff fd90 	bl	80004f0 <read_register>
 80009d0:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b084      	sub	sp, #16
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 80009e2:	2112      	movs	r1, #18
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff fd83 	bl	80004f0 <read_register>
 80009ea:	4603      	mov	r3, r0
 80009ec:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80009f4:	b2db      	uxtb	r3, r3
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <lora_pending_packet_length>:

uint8_t lora_pending_packet_length(lora_sx1276 *lora)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b084      	sub	sp, #16
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
  uint8_t len;

  // Query for current header mode - implicit / explicit
  uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 8000a06:	211d      	movs	r1, #29
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff fd71 	bl	80004f0 <read_register>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	73bb      	strb	r3, [r7, #14]
  if (implicit) {
 8000a16:	7bbb      	ldrb	r3, [r7, #14]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d006      	beq.n	8000a2a <lora_pending_packet_length+0x2c>
    len = read_register(lora, REG_PAYLOAD_LENGTH);
 8000a1c:	2122      	movs	r1, #34	@ 0x22
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fd66 	bl	80004f0 <read_register>
 8000a24:	4603      	mov	r3, r0
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e005      	b.n	8000a36 <lora_pending_packet_length+0x38>
  } else {
    len = read_register(lora, REG_RX_NB_BYTES);
 8000a2a:	2113      	movs	r1, #19
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff fd5f 	bl	80004f0 <read_register>
 8000a32:	4603      	mov	r3, r0
 8000a34:	73fb      	strb	r3, [r7, #15]
  }

  return len;
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <lora_receive_packet_base>:


static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 8000a50:	2306      	movs	r3, #6
 8000a52:	75fb      	strb	r3, [r7, #23]
  uint8_t len = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	75bb      	strb	r3, [r7, #22]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 8000a58:	2112      	movs	r1, #18
 8000a5a:	68f8      	ldr	r0, [r7, #12]
 8000a5c:	f7ff fd48 	bl	80004f0 <read_register>
 8000a60:	4603      	mov	r3, r0
 8000a62:	757b      	strb	r3, [r7, #21]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8000a64:	22f0      	movs	r2, #240	@ 0xf0
 8000a66:	2112      	movs	r1, #18
 8000a68:	68f8      	ldr	r0, [r7, #12]
 8000a6a:	f7ff fd78 	bl	800055e <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 8000a6e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	da02      	bge.n	8000a7c <lora_receive_packet_base+0x3c>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 8000a76:	2302      	movs	r3, #2
 8000a78:	75fb      	strb	r3, [r7, #23]
    goto done;
 8000a7a:	e030      	b.n	8000ade <lora_receive_packet_base+0x9e>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 8000a7c:	7d7b      	ldrb	r3, [r7, #21]
 8000a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d02a      	beq.n	8000adc <lora_receive_packet_base+0x9c>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 8000a86:	7d7b      	ldrb	r3, [r7, #21]
 8000a88:	f003 0310 	and.w	r3, r3, #16
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <lora_receive_packet_base+0x56>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 8000a90:	2303      	movs	r3, #3
 8000a92:	75fb      	strb	r3, [r7, #23]
      goto done;
 8000a94:	e023      	b.n	8000ade <lora_receive_packet_base+0x9e>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 8000a96:	7d7b      	ldrb	r3, [r7, #21]
 8000a98:	f003 0320 	and.w	r3, r3, #32
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d002      	beq.n	8000aa6 <lora_receive_packet_base+0x66>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	75fb      	strb	r3, [r7, #23]
      goto done;
 8000aa4:	e01b      	b.n	8000ade <lora_receive_packet_base+0x9e>
    }
    // Query for current header mode - implicit / explicit
    len = lora_pending_packet_length(lora);
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f7ff ffa9 	bl	80009fe <lora_pending_packet_length>
 8000aac:	4603      	mov	r3, r0
 8000aae:	75bb      	strb	r3, [r7, #22]
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f7ff fd1c 	bl	80004f0 <read_register>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	753b      	strb	r3, [r7, #20]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 8000abc:	7d3b      	ldrb	r3, [r7, #20]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	210d      	movs	r1, #13
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f7ff fd4b 	bl	800055e <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 8000ac8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000acc:	7dba      	ldrb	r2, [r7, #22]
 8000ace:	68b9      	ldr	r1, [r7, #8]
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f7ff fd78 	bl	80005c6 <read_fifo>
    res = LORA_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	75fb      	strb	r3, [r7, #23]
 8000ada:	e000      	b.n	8000ade <lora_receive_packet_base+0x9e>
  }

done:
 8000adc:	bf00      	nop
  if (error) {
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <lora_receive_packet_base+0xaa>
    *error = res;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	7dfa      	ldrb	r2, [r7, #23]
 8000ae8:	701a      	strb	r2, [r3, #0]
  }

  return len;
 8000aea:	7dbb      	ldrb	r3, [r7, #22]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	4613      	mov	r3, r2
 8000b02:	71fb      	strb	r3, [r7, #7]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 8000b04:	79fa      	ldrb	r2, [r7, #7]
 8000b06:	2302      	movs	r3, #2
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	68b9      	ldr	r1, [r7, #8]
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f7ff ff96 	bl	8000a40 <lora_receive_packet_base>
 8000b14:	4603      	mov	r3, r0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b086      	sub	sp, #24
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 8000b32:	e00b      	b.n	8000b4c <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f7ff ff50 	bl	80009da <lora_is_packet_available>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d10a      	bne.n	8000b56 <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 8000b40:	2001      	movs	r0, #1
 8000b42:	f001 fbbb 	bl	80022bc <HAL_Delay>
    elapsed++;
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d3ef      	bcc.n	8000b34 <lora_receive_packet_blocking+0x16>
 8000b54:	e000      	b.n	8000b58 <lora_receive_packet_blocking+0x3a>
      break;
 8000b56:	bf00      	nop
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 8000b58:	79fa      	ldrb	r2, [r7, #7]
 8000b5a:	6a3b      	ldr	r3, [r7, #32]
 8000b5c:	68b9      	ldr	r1, [r7, #8]
 8000b5e:	68f8      	ldr	r0, [r7, #12]
 8000b60:	f7ff ffc8 	bl	8000af4 <lora_receive_packet>
 8000b64:	4603      	mov	r3, r0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	887a      	ldrh	r2, [r7, #2]
 8000b8c:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8000b8e:	6a3a      	ldr	r2, [r7, #32]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2201      	movs	r2, #1
 8000b98:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bac:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f7ff ff06 	bl	80009c0 <lora_version>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8000bb8:	7dfb      	ldrb	r3, [r7, #23]
 8000bba:	2b12      	cmp	r3, #18
 8000bbc:	d001      	beq.n	8000bc2 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	e031      	b.n	8000c26 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000bc2:	68f8      	ldr	r0, [r7, #12]
 8000bc4:	f7ff fdbe 	bl	8000744 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f7ff fdbb 	bl	8000744 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000bce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000bd2:	68f8      	ldr	r0, [r7, #12]
 8000bd4:	f7ff fe4a 	bl	800086c <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000bd8:	2107      	movs	r1, #7
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f7ff fe8c 	bl	80008f8 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000be0:	210a      	movs	r1, #10
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f7ff fecf 	bl	8000986 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f7ff fddb 	bl	80007a4 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000bee:	210c      	movs	r1, #12
 8000bf0:	68f8      	ldr	r0, [r7, #12]
 8000bf2:	f7ff fc7d 	bl	80004f0 <read_register>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000bfa:	7dbb      	ldrb	r3, [r7, #22]
 8000bfc:	f043 0303 	orr.w	r3, r3, #3
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	461a      	mov	r2, r3
 8000c04:	210c      	movs	r1, #12
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	f7ff fca9 	bl	800055e <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	2126      	movs	r1, #38	@ 0x26
 8000c10:	68f8      	ldr	r0, [r7, #12]
 8000c12:	f7ff fca4 	bl	800055e <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000c16:	2111      	movs	r1, #17
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff fddb 	bl	80007d4 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f7ff fdb4 	bl	800078c <lora_mode_standby>

  return LORA_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b092      	sub	sp, #72	@ 0x48
 8000c34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c36:	f001 facc 	bl	80021d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3a:	f000 f84d 	bl	8000cd8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c3e:	f000 f89d 	bl	8000d7c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c42:	f000 fd4d 	bl	80016e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c46:	f000 f8cb 	bl	8000de0 <MX_ADC1_Init>
  MX_COMP1_Init();
 8000c4a:	f000 f92d 	bl	8000ea8 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000c4e:	f000 f959 	bl	8000f04 <MX_COMP2_Init>
  MX_SAI1_Init();
 8000c52:	f000 f983 	bl	8000f5c <MX_SAI1_Init>
  MX_SAI2_Init();
 8000c56:	f000 fa19 	bl	800108c <MX_SAI2_Init>
  MX_TIM1_Init();
 8000c5a:	f000 fabd 	bl	80011d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c5e:	f000 fb8b 	bl	8001378 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c62:	f000 fbed 	bl	8001440 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c66:	f000 fc51 	bl	800150c <MX_TIM4_Init>
  MX_TIM15_Init();
 8000c6a:	f000 fcb5 	bl	80015d8 <MX_TIM15_Init>
  MX_SPI2_Init();
 8000c6e:	f000 fa75 	bl	800115c <MX_SPI2_Init>
//  HAL_SPI_Transmit(&hspi2, 0x00, 0, HAL_MAX_DELAY);
//  HAL
  lora_sx1276 lora;

    // SX1276 compatible module connected to SPI1, NSS pin connected to GPIO with label LORA_NSS
    uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 8000c72:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000c76:	a316      	add	r3, pc, #88	@ (adr r3, 8000cd0 <main+0xa0>)
 8000c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7c:	e9cd 2300 	strd	r2, r3, [sp]
 8000c80:	2301      	movs	r3, #1
 8000c82:	4a11      	ldr	r2, [pc, #68]	@ (8000cc8 <main+0x98>)
 8000c84:	4911      	ldr	r1, [pc, #68]	@ (8000ccc <main+0x9c>)
 8000c86:	f7ff ff72 	bl	8000b6e <lora_init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  while (1)
  {
    /* USER CODE END WHILE */
	  	    uint8_t buffer[32];
	  	    // Put LoRa modem into continuous receive mode
	  	    lora_mode_receive_continuous(&lora);
 8000c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fd61 	bl	800075c <lora_mode_receive_continuous>
	  	    // Wait for packet up to 10sec
	  	    uint8_t res;
	  	    uint8_t len = lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 10000, &res);
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000ca0:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000caa:	2220      	movs	r2, #32
 8000cac:	f7ff ff37 	bl	8000b1e <lora_receive_packet_blocking>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	  	    if (res != LORA_OK) {
	  	      // Receive failed
	  	    }
	  	    buffer[len] = 0;  // null terminate string to print it
 8000cb6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000cba:	3340      	adds	r3, #64	@ 0x40
 8000cbc:	443b      	add	r3, r7
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f803 2c40 	strb.w	r2, [r3, #-64]
  {
 8000cc4:	e7e4      	b.n	8000c90 <main+0x60>
 8000cc6:	bf00      	nop
 8000cc8:	48000c00 	.word	0x48000c00
 8000ccc:	200002a4 	.word	0x200002a4
 8000cd0:	36e55840 	.word	0x36e55840
 8000cd4:	00000000 	.word	0x00000000

08000cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b096      	sub	sp, #88	@ 0x58
 8000cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	2244      	movs	r2, #68	@ 0x44
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f008 f8ca 	bl	8008e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cec:	463b      	mov	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cfa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cfe:	f002 fee5 	bl	8003acc <HAL_PWREx_ControlVoltageScaling>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d08:	f000 fe42 	bl	8001990 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d0c:	2310      	movs	r3, #16
 8000d0e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d10:	2301      	movs	r3, #1
 8000d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d18:	2360      	movs	r3, #96	@ 0x60
 8000d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d20:	2301      	movs	r3, #1
 8000d22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d30:	2302      	movs	r3, #2
 8000d32:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f002 ff79 	bl	8003c34 <HAL_RCC_OscConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000d48:	f000 fe22 	bl	8001990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d50:	2303      	movs	r3, #3
 8000d52:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d60:	463b      	mov	r3, r7
 8000d62:	2101      	movs	r1, #1
 8000d64:	4618      	mov	r0, r3
 8000d66:	f003 fb7f 	bl	8004468 <HAL_RCC_ClockConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d70:	f000 fe0e 	bl	8001990 <Error_Handler>
  }
}
 8000d74:	bf00      	nop
 8000d76:	3758      	adds	r7, #88	@ 0x58
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0a6      	sub	sp, #152	@ 0x98
 8000d80:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2294      	movs	r2, #148	@ 0x94
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f008 f879 	bl	8008e80 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8000d8e:	f44f 43b0 	mov.w	r3, #22528	@ 0x5800
 8000d92:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	673b      	str	r3, [r7, #112]	@ 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	677b      	str	r3, [r7, #116]	@ 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d9c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000da0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000da4:	2301      	movs	r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000dac:	2318      	movs	r3, #24
 8000dae:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <PeriphCommonClock_Config+0x60>)
 8000dbe:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f003 fe0e 	bl	80049e4 <HAL_RCCEx_PeriphCLKConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000dce:	f000 fddf 	bl	8001990 <Error_Handler>
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3798      	adds	r7, #152	@ 0x98
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	01010000 	.word	0x01010000

08000de0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000de6:	463b      	mov	r3, r7
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
 8000df4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000df6:	4b29      	ldr	r3, [pc, #164]	@ (8000e9c <MX_ADC1_Init+0xbc>)
 8000df8:	4a29      	ldr	r2, [pc, #164]	@ (8000ea0 <MX_ADC1_Init+0xc0>)
 8000dfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dfc:	4b27      	ldr	r3, [pc, #156]	@ (8000e9c <MX_ADC1_Init+0xbc>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e02:	4b26      	ldr	r3, [pc, #152]	@ (8000e9c <MX_ADC1_Init+0xbc>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e08:	4b24      	ldr	r3, [pc, #144]	@ (8000e9c <MX_ADC1_Init+0xbc>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e0e:	4b23      	ldr	r3, [pc, #140]	@ (8000e9c <MX_ADC1_Init+0xbc>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e14:	4b21      	ldr	r3, [pc, #132]	@ (8000e9c <MX_ADC1_Init+0xbc>)
 8000e16:	2204      	movs	r2, #4
 8000e18:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e1a:	4b20      	ldr	r3, [pc, #128]	@ (8000e9c <MX_ADC1_Init+0xbc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e20:	4b1e      	ldr	r3, [pc, #120]	@ (8000e9c <MX_ADC1_Init+0xbc>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e26:	4b1d      	ldr	r3, [pc, #116]	@ (8000e9c <MX_ADC1_Init+0xbc>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e9c <MX_ADC1_Init+0xbc>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e34:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <MX_ADC1_Init+0xbc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <MX_ADC1_Init+0xbc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e40:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <MX_ADC1_Init+0xbc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e48:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <MX_ADC1_Init+0xbc>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <MX_ADC1_Init+0xbc>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e56:	4811      	ldr	r0, [pc, #68]	@ (8000e9c <MX_ADC1_Init+0xbc>)
 8000e58:	f001 fbf4 	bl	8002644 <HAL_ADC_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000e62:	f000 fd95 	bl	8001990 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <MX_ADC1_Init+0xc4>)
 8000e68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e6a:	2306      	movs	r3, #6
 8000e6c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e72:	237f      	movs	r3, #127	@ 0x7f
 8000e74:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e76:	2304      	movs	r3, #4
 8000e78:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7e:	463b      	mov	r3, r7
 8000e80:	4619      	mov	r1, r3
 8000e82:	4806      	ldr	r0, [pc, #24]	@ (8000e9c <MX_ADC1_Init+0xbc>)
 8000e84:	f001 fd24 	bl	80028d0 <HAL_ADC_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e8e:	f000 fd7f 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000028 	.word	0x20000028
 8000ea0:	50040000 	.word	0x50040000
 8000ea4:	04300002 	.word	0x04300002

08000ea8 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <MX_COMP1_Init+0x50>)
 8000eae:	4a13      	ldr	r2, [pc, #76]	@ (8000efc <MX_COMP1_Init+0x54>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_COMP1_Init+0x50>)
 8000eb4:	4a12      	ldr	r2, [pc, #72]	@ (8000f00 <MX_COMP1_Init+0x58>)
 8000eb6:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <MX_COMP1_Init+0x50>)
 8000eba:	2280      	movs	r2, #128	@ 0x80
 8000ebc:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <MX_COMP1_Init+0x50>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <MX_COMP1_Init+0x50>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <MX_COMP1_Init+0x50>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <MX_COMP1_Init+0x50>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <MX_COMP1_Init+0x50>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <MX_COMP1_Init+0x50>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_COMP1_Init+0x50>)
 8000ee4:	f002 f998 	bl	8003218 <HAL_COMP_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8000eee:	f000 fd4f 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000090 	.word	0x20000090
 8000efc:	40010200 	.word	0x40010200
 8000f00:	00800030 	.word	0x00800030

08000f04 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000f08:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <MX_COMP2_Init+0x50>)
 8000f0a:	4a13      	ldr	r2, [pc, #76]	@ (8000f58 <MX_COMP2_Init+0x54>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <MX_COMP2_Init+0x50>)
 8000f10:	2270      	movs	r2, #112	@ 0x70
 8000f12:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <MX_COMP2_Init+0x50>)
 8000f16:	2280      	movs	r2, #128	@ 0x80
 8000f18:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <MX_COMP2_Init+0x50>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <MX_COMP2_Init+0x50>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <MX_COMP2_Init+0x50>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <MX_COMP2_Init+0x50>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <MX_COMP2_Init+0x50>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <MX_COMP2_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <MX_COMP2_Init+0x50>)
 8000f40:	f002 f96a 	bl	8003218 <HAL_COMP_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8000f4a:	f000 fd21 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200000bc 	.word	0x200000bc
 8000f58:	40010204 	.word	0x40010204

08000f5c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000f60:	4b45      	ldr	r3, [pc, #276]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000f62:	4a46      	ldr	r2, [pc, #280]	@ (800107c <MX_SAI1_Init+0x120>)
 8000f64:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f66:	4b44      	ldr	r3, [pc, #272]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f6c:	4b42      	ldr	r3, [pc, #264]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000f72:	4b41      	ldr	r3, [pc, #260]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000f74:	2240      	movs	r2, #64	@ 0x40
 8000f76:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f78:	4b3f      	ldr	r3, [pc, #252]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f84:	4b3c      	ldr	r3, [pc, #240]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f90:	4b39      	ldr	r3, [pc, #228]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000f96:	4b38      	ldr	r3, [pc, #224]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f9c:	4b36      	ldr	r3, [pc, #216]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000fa2:	4b35      	ldr	r3, [pc, #212]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000fa4:	4a36      	ldr	r2, [pc, #216]	@ (8001080 <MX_SAI1_Init+0x124>)
 8000fa6:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000fa8:	4b33      	ldr	r3, [pc, #204]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000fae:	4b32      	ldr	r3, [pc, #200]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000fb4:	4b30      	ldr	r3, [pc, #192]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000fba:	4b2f      	ldr	r3, [pc, #188]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000fce:	4b2a      	ldr	r3, [pc, #168]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000fd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fd4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000fd6:	4b28      	ldr	r3, [pc, #160]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000fd8:	2208      	movs	r2, #8
 8000fda:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000fdc:	4b26      	ldr	r3, [pc, #152]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000fe2:	4b25      	ldr	r3, [pc, #148]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000fe8:	4b23      	ldr	r3, [pc, #140]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000fee:	4b22      	ldr	r3, [pc, #136]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000ff4:	4b20      	ldr	r3, [pc, #128]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001000:	4b1d      	ldr	r3, [pc, #116]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8001002:	2201      	movs	r2, #1
 8001004:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001006:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <MX_SAI1_Init+0x11c>)
 8001008:	2200      	movs	r2, #0
 800100a:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800100c:	481a      	ldr	r0, [pc, #104]	@ (8001078 <MX_SAI1_Init+0x11c>)
 800100e:	f005 fa67 	bl	80064e0 <HAL_SAI_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8001018:	f000 fcba 	bl	8001990 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 800101c:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <MX_SAI1_Init+0x128>)
 800101e:	4a1a      	ldr	r2, [pc, #104]	@ (8001088 <MX_SAI1_Init+0x12c>)
 8001020:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001022:	4b18      	ldr	r3, [pc, #96]	@ (8001084 <MX_SAI1_Init+0x128>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001028:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <MX_SAI1_Init+0x128>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <MX_SAI1_Init+0x128>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001034:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <MX_SAI1_Init+0x128>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800103a:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <MX_SAI1_Init+0x128>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001040:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <MX_SAI1_Init+0x128>)
 8001042:	4a0f      	ldr	r2, [pc, #60]	@ (8001080 <MX_SAI1_Init+0x124>)
 8001044:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001046:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <MX_SAI1_Init+0x128>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800104c:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <MX_SAI1_Init+0x128>)
 800104e:	2200      	movs	r2, #0
 8001050:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001052:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <MX_SAI1_Init+0x128>)
 8001054:	2200      	movs	r2, #0
 8001056:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001058:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <MX_SAI1_Init+0x128>)
 800105a:	2200      	movs	r2, #0
 800105c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800105e:	2302      	movs	r3, #2
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	4807      	ldr	r0, [pc, #28]	@ (8001084 <MX_SAI1_Init+0x128>)
 8001066:	f005 fa09 	bl	800647c <HAL_SAI_InitProtocol>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8001070:	f000 fc8e 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200000e8 	.word	0x200000e8
 800107c:	40015424 	.word	0x40015424
 8001080:	0002ee00 	.word	0x0002ee00
 8001084:	2000017c 	.word	0x2000017c
 8001088:	40015404 	.word	0x40015404

0800108c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001090:	4b2f      	ldr	r3, [pc, #188]	@ (8001150 <MX_SAI2_Init+0xc4>)
 8001092:	4a30      	ldr	r2, [pc, #192]	@ (8001154 <MX_SAI2_Init+0xc8>)
 8001094:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001096:	4b2e      	ldr	r3, [pc, #184]	@ (8001150 <MX_SAI2_Init+0xc4>)
 8001098:	2200      	movs	r2, #0
 800109a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800109c:	4b2c      	ldr	r3, [pc, #176]	@ (8001150 <MX_SAI2_Init+0xc4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80010a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001150 <MX_SAI2_Init+0xc4>)
 80010a4:	2240      	movs	r2, #64	@ 0x40
 80010a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80010a8:	4b29      	ldr	r3, [pc, #164]	@ (8001150 <MX_SAI2_Init+0xc4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80010ae:	4b28      	ldr	r3, [pc, #160]	@ (8001150 <MX_SAI2_Init+0xc4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80010b4:	4b26      	ldr	r3, [pc, #152]	@ (8001150 <MX_SAI2_Init+0xc4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010ba:	4b25      	ldr	r3, [pc, #148]	@ (8001150 <MX_SAI2_Init+0xc4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010c0:	4b23      	ldr	r3, [pc, #140]	@ (8001150 <MX_SAI2_Init+0xc4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80010c6:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <MX_SAI2_Init+0xc4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010cc:	4b20      	ldr	r3, [pc, #128]	@ (8001150 <MX_SAI2_Init+0xc4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80010d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <MX_SAI2_Init+0xc4>)
 80010d4:	4a20      	ldr	r2, [pc, #128]	@ (8001158 <MX_SAI2_Init+0xcc>)
 80010d6:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <MX_SAI2_Init+0xc4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010de:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <MX_SAI2_Init+0xc4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <MX_SAI2_Init+0xc4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80010ea:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <MX_SAI2_Init+0xc4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80010f0:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <MX_SAI2_Init+0xc4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 80010f8:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <MX_SAI2_Init+0xc4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80010fe:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <MX_SAI2_Init+0xc4>)
 8001100:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001104:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001106:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <MX_SAI2_Init+0xc4>)
 8001108:	2208      	movs	r2, #8
 800110a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800110c:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <MX_SAI2_Init+0xc4>)
 800110e:	2201      	movs	r2, #1
 8001110:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001112:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <MX_SAI2_Init+0xc4>)
 8001114:	2200      	movs	r2, #0
 8001116:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001118:	4b0d      	ldr	r3, [pc, #52]	@ (8001150 <MX_SAI2_Init+0xc4>)
 800111a:	2200      	movs	r2, #0
 800111c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800111e:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <MX_SAI2_Init+0xc4>)
 8001120:	2200      	movs	r2, #0
 8001122:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001124:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <MX_SAI2_Init+0xc4>)
 8001126:	2200      	movs	r2, #0
 8001128:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800112a:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <MX_SAI2_Init+0xc4>)
 800112c:	2200      	movs	r2, #0
 800112e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001130:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <MX_SAI2_Init+0xc4>)
 8001132:	2201      	movs	r2, #1
 8001134:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <MX_SAI2_Init+0xc4>)
 8001138:	2200      	movs	r2, #0
 800113a:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800113c:	4804      	ldr	r0, [pc, #16]	@ (8001150 <MX_SAI2_Init+0xc4>)
 800113e:	f005 f9cf 	bl	80064e0 <HAL_SAI_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8001148:	f000 fc22 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000210 	.word	0x20000210
 8001154:	40015804 	.word	0x40015804
 8001158:	0002ee00 	.word	0x0002ee00

0800115c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001160:	4b1b      	ldr	r3, [pc, #108]	@ (80011d0 <MX_SPI2_Init+0x74>)
 8001162:	4a1c      	ldr	r2, [pc, #112]	@ (80011d4 <MX_SPI2_Init+0x78>)
 8001164:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001166:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <MX_SPI2_Init+0x74>)
 8001168:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800116c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800116e:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <MX_SPI2_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001174:	4b16      	ldr	r3, [pc, #88]	@ (80011d0 <MX_SPI2_Init+0x74>)
 8001176:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800117a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800117c:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <MX_SPI2_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001182:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <MX_SPI2_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <MX_SPI2_Init+0x74>)
 800118a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800118e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001190:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <MX_SPI2_Init+0x74>)
 8001192:	2218      	movs	r2, #24
 8001194:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <MX_SPI2_Init+0x74>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <MX_SPI2_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <MX_SPI2_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011a8:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <MX_SPI2_Init+0x74>)
 80011aa:	2207      	movs	r2, #7
 80011ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <MX_SPI2_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <MX_SPI2_Init+0x74>)
 80011b6:	2208      	movs	r2, #8
 80011b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <MX_SPI2_Init+0x74>)
 80011bc:	f005 fcdc 	bl	8006b78 <HAL_SPI_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80011c6:	f000 fbe3 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200002a4 	.word	0x200002a4
 80011d4:	40003800 	.word	0x40003800

080011d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b098      	sub	sp, #96	@ 0x60
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80011ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
 8001206:	615a      	str	r2, [r3, #20]
 8001208:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800120a:	463b      	mov	r3, r7
 800120c:	222c      	movs	r2, #44	@ 0x2c
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f007 fe35 	bl	8008e80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001216:	4b56      	ldr	r3, [pc, #344]	@ (8001370 <MX_TIM1_Init+0x198>)
 8001218:	4a56      	ldr	r2, [pc, #344]	@ (8001374 <MX_TIM1_Init+0x19c>)
 800121a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800121c:	4b54      	ldr	r3, [pc, #336]	@ (8001370 <MX_TIM1_Init+0x198>)
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b53      	ldr	r3, [pc, #332]	@ (8001370 <MX_TIM1_Init+0x198>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001228:	4b51      	ldr	r3, [pc, #324]	@ (8001370 <MX_TIM1_Init+0x198>)
 800122a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800122e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001230:	4b4f      	ldr	r3, [pc, #316]	@ (8001370 <MX_TIM1_Init+0x198>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001236:	4b4e      	ldr	r3, [pc, #312]	@ (8001370 <MX_TIM1_Init+0x198>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123c:	4b4c      	ldr	r3, [pc, #304]	@ (8001370 <MX_TIM1_Init+0x198>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001242:	484b      	ldr	r0, [pc, #300]	@ (8001370 <MX_TIM1_Init+0x198>)
 8001244:	f006 ff74 	bl	8008130 <HAL_TIM_PWM_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800124e:	f000 fb9f 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800125e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001262:	4619      	mov	r1, r3
 8001264:	4842      	ldr	r0, [pc, #264]	@ (8001370 <MX_TIM1_Init+0x198>)
 8001266:	f007 fc3f 	bl	8008ae8 <HAL_TIMEx_MasterConfigSynchronization>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001270:	f000 fb8e 	bl	8001990 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001274:	2301      	movs	r3, #1
 8001276:	64bb      	str	r3, [r7, #72]	@ 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001278:	2301      	movs	r3, #1
 800127a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800127c:	2300      	movs	r3, #0
 800127e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001280:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001284:	461a      	mov	r2, r3
 8001286:	2101      	movs	r1, #1
 8001288:	4839      	ldr	r0, [pc, #228]	@ (8001370 <MX_TIM1_Init+0x198>)
 800128a:	f007 fd33 	bl	8008cf4 <HAL_TIMEx_ConfigBreakInput>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001294:	f000 fb7c 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001298:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800129c:	461a      	mov	r2, r3
 800129e:	2102      	movs	r1, #2
 80012a0:	4833      	ldr	r0, [pc, #204]	@ (8001370 <MX_TIM1_Init+0x198>)
 80012a2:	f007 fd27 	bl	8008cf4 <HAL_TIMEx_ConfigBreakInput>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80012ac:	f000 fb70 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b0:	2360      	movs	r3, #96	@ 0x60
 80012b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b8:	2300      	movs	r3, #0
 80012ba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012bc:	2300      	movs	r3, #0
 80012be:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012d0:	2200      	movs	r2, #0
 80012d2:	4619      	mov	r1, r3
 80012d4:	4826      	ldr	r0, [pc, #152]	@ (8001370 <MX_TIM1_Init+0x198>)
 80012d6:	f006 ff83 	bl	80081e0 <HAL_TIM_PWM_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80012e0:	f000 fb56 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012e8:	2204      	movs	r2, #4
 80012ea:	4619      	mov	r1, r3
 80012ec:	4820      	ldr	r0, [pc, #128]	@ (8001370 <MX_TIM1_Init+0x198>)
 80012ee:	f006 ff77 	bl	80081e0 <HAL_TIM_PWM_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80012f8:	f000 fb4a 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001300:	2208      	movs	r2, #8
 8001302:	4619      	mov	r1, r3
 8001304:	481a      	ldr	r0, [pc, #104]	@ (8001370 <MX_TIM1_Init+0x198>)
 8001306:	f006 ff6b 	bl	80081e0 <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001310:	f000 fb3e 	bl	8001990 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001314:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001318:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800131a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800131e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001328:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800132c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800132e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001332:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001338:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800133c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800133e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001342:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	4619      	mov	r1, r3
 8001350:	4807      	ldr	r0, [pc, #28]	@ (8001370 <MX_TIM1_Init+0x198>)
 8001352:	f007 fc51 	bl	8008bf8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 800135c:	f000 fb18 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001360:	4803      	ldr	r0, [pc, #12]	@ (8001370 <MX_TIM1_Init+0x198>)
 8001362:	f000 fd07 	bl	8001d74 <HAL_TIM_MspPostInit>

}
 8001366:	bf00      	nop
 8001368:	3760      	adds	r7, #96	@ 0x60
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000308 	.word	0x20000308
 8001374:	40012c00 	.word	0x40012c00

08001378 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	@ 0x28
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800139c:	4b27      	ldr	r3, [pc, #156]	@ (800143c <MX_TIM2_Init+0xc4>)
 800139e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013a4:	4b25      	ldr	r3, [pc, #148]	@ (800143c <MX_TIM2_Init+0xc4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013aa:	4b24      	ldr	r3, [pc, #144]	@ (800143c <MX_TIM2_Init+0xc4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013b0:	4b22      	ldr	r3, [pc, #136]	@ (800143c <MX_TIM2_Init+0xc4>)
 80013b2:	f04f 32ff 	mov.w	r2, #4294967295
 80013b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b8:	4b20      	ldr	r3, [pc, #128]	@ (800143c <MX_TIM2_Init+0xc4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <MX_TIM2_Init+0xc4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013c4:	481d      	ldr	r0, [pc, #116]	@ (800143c <MX_TIM2_Init+0xc4>)
 80013c6:	f006 feb3 	bl	8008130 <HAL_TIM_PWM_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80013d0:	f000 fade 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4619      	mov	r1, r3
 80013e2:	4816      	ldr	r0, [pc, #88]	@ (800143c <MX_TIM2_Init+0xc4>)
 80013e4:	f007 fb80 	bl	8008ae8 <HAL_TIMEx_MasterConfigSynchronization>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80013ee:	f000 facf 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f2:	2360      	movs	r3, #96	@ 0x60
 80013f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	4619      	mov	r1, r3
 8001408:	480c      	ldr	r0, [pc, #48]	@ (800143c <MX_TIM2_Init+0xc4>)
 800140a:	f006 fee9 	bl	80081e0 <HAL_TIM_PWM_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001414:	f000 fabc 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	2208      	movs	r2, #8
 800141c:	4619      	mov	r1, r3
 800141e:	4807      	ldr	r0, [pc, #28]	@ (800143c <MX_TIM2_Init+0xc4>)
 8001420:	f006 fede 	bl	80081e0 <HAL_TIM_PWM_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800142a:	f000 fab1 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800142e:	4803      	ldr	r0, [pc, #12]	@ (800143c <MX_TIM2_Init+0xc4>)
 8001430:	f000 fca0 	bl	8001d74 <HAL_TIM_MspPostInit>

}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	@ 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000354 	.word	0x20000354

08001440 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	@ 0x28
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	615a      	str	r2, [r3, #20]
 8001462:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001464:	4b27      	ldr	r3, [pc, #156]	@ (8001504 <MX_TIM3_Init+0xc4>)
 8001466:	4a28      	ldr	r2, [pc, #160]	@ (8001508 <MX_TIM3_Init+0xc8>)
 8001468:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800146a:	4b26      	ldr	r3, [pc, #152]	@ (8001504 <MX_TIM3_Init+0xc4>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b24      	ldr	r3, [pc, #144]	@ (8001504 <MX_TIM3_Init+0xc4>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001476:	4b23      	ldr	r3, [pc, #140]	@ (8001504 <MX_TIM3_Init+0xc4>)
 8001478:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800147c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b21      	ldr	r3, [pc, #132]	@ (8001504 <MX_TIM3_Init+0xc4>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <MX_TIM3_Init+0xc4>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800148a:	481e      	ldr	r0, [pc, #120]	@ (8001504 <MX_TIM3_Init+0xc4>)
 800148c:	f006 fe50 	bl	8008130 <HAL_TIM_PWM_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001496:	f000 fa7b 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	4816      	ldr	r0, [pc, #88]	@ (8001504 <MX_TIM3_Init+0xc4>)
 80014aa:	f007 fb1d 	bl	8008ae8 <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80014b4:	f000 fa6c 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b8:	2360      	movs	r3, #96	@ 0x60
 80014ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014c8:	463b      	mov	r3, r7
 80014ca:	2204      	movs	r2, #4
 80014cc:	4619      	mov	r1, r3
 80014ce:	480d      	ldr	r0, [pc, #52]	@ (8001504 <MX_TIM3_Init+0xc4>)
 80014d0:	f006 fe86 	bl	80081e0 <HAL_TIM_PWM_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80014da:	f000 fa59 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014de:	463b      	mov	r3, r7
 80014e0:	2208      	movs	r2, #8
 80014e2:	4619      	mov	r1, r3
 80014e4:	4807      	ldr	r0, [pc, #28]	@ (8001504 <MX_TIM3_Init+0xc4>)
 80014e6:	f006 fe7b 	bl	80081e0 <HAL_TIM_PWM_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80014f0:	f000 fa4e 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014f4:	4803      	ldr	r0, [pc, #12]	@ (8001504 <MX_TIM3_Init+0xc4>)
 80014f6:	f000 fc3d 	bl	8001d74 <HAL_TIM_MspPostInit>

}
 80014fa:	bf00      	nop
 80014fc:	3728      	adds	r7, #40	@ 0x28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200003a0 	.word	0x200003a0
 8001508:	40000400 	.word	0x40000400

0800150c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	@ 0x28
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151e:	463b      	mov	r3, r7
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
 800152c:	615a      	str	r2, [r3, #20]
 800152e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001530:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <MX_TIM4_Init+0xc4>)
 8001532:	4a28      	ldr	r2, [pc, #160]	@ (80015d4 <MX_TIM4_Init+0xc8>)
 8001534:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001536:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <MX_TIM4_Init+0xc4>)
 8001538:	2200      	movs	r2, #0
 800153a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153c:	4b24      	ldr	r3, [pc, #144]	@ (80015d0 <MX_TIM4_Init+0xc4>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001542:	4b23      	ldr	r3, [pc, #140]	@ (80015d0 <MX_TIM4_Init+0xc4>)
 8001544:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001548:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154a:	4b21      	ldr	r3, [pc, #132]	@ (80015d0 <MX_TIM4_Init+0xc4>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001550:	4b1f      	ldr	r3, [pc, #124]	@ (80015d0 <MX_TIM4_Init+0xc4>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001556:	481e      	ldr	r0, [pc, #120]	@ (80015d0 <MX_TIM4_Init+0xc4>)
 8001558:	f006 fdea 	bl	8008130 <HAL_TIM_PWM_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001562:	f000 fa15 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	4816      	ldr	r0, [pc, #88]	@ (80015d0 <MX_TIM4_Init+0xc4>)
 8001576:	f007 fab7 	bl	8008ae8 <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001580:	f000 fa06 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001584:	2360      	movs	r3, #96	@ 0x60
 8001586:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001594:	463b      	mov	r3, r7
 8001596:	2208      	movs	r2, #8
 8001598:	4619      	mov	r1, r3
 800159a:	480d      	ldr	r0, [pc, #52]	@ (80015d0 <MX_TIM4_Init+0xc4>)
 800159c:	f006 fe20 	bl	80081e0 <HAL_TIM_PWM_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80015a6:	f000 f9f3 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015aa:	463b      	mov	r3, r7
 80015ac:	220c      	movs	r2, #12
 80015ae:	4619      	mov	r1, r3
 80015b0:	4807      	ldr	r0, [pc, #28]	@ (80015d0 <MX_TIM4_Init+0xc4>)
 80015b2:	f006 fe15 	bl	80081e0 <HAL_TIM_PWM_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80015bc:	f000 f9e8 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015c0:	4803      	ldr	r0, [pc, #12]	@ (80015d0 <MX_TIM4_Init+0xc4>)
 80015c2:	f000 fbd7 	bl	8001d74 <HAL_TIM_MspPostInit>

}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	@ 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200003ec 	.word	0x200003ec
 80015d4:	40000800 	.word	0x40000800

080015d8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b096      	sub	sp, #88	@ 0x58
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015de:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	222c      	movs	r2, #44	@ 0x2c
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f007 fc3b 	bl	8008e80 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800160a:	4b33      	ldr	r3, [pc, #204]	@ (80016d8 <MX_TIM15_Init+0x100>)
 800160c:	4a33      	ldr	r2, [pc, #204]	@ (80016dc <MX_TIM15_Init+0x104>)
 800160e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001610:	4b31      	ldr	r3, [pc, #196]	@ (80016d8 <MX_TIM15_Init+0x100>)
 8001612:	2200      	movs	r2, #0
 8001614:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001616:	4b30      	ldr	r3, [pc, #192]	@ (80016d8 <MX_TIM15_Init+0x100>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800161c:	4b2e      	ldr	r3, [pc, #184]	@ (80016d8 <MX_TIM15_Init+0x100>)
 800161e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001622:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001624:	4b2c      	ldr	r3, [pc, #176]	@ (80016d8 <MX_TIM15_Init+0x100>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800162a:	4b2b      	ldr	r3, [pc, #172]	@ (80016d8 <MX_TIM15_Init+0x100>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001630:	4b29      	ldr	r3, [pc, #164]	@ (80016d8 <MX_TIM15_Init+0x100>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001636:	4828      	ldr	r0, [pc, #160]	@ (80016d8 <MX_TIM15_Init+0x100>)
 8001638:	f006 fd7a 	bl	8008130 <HAL_TIM_PWM_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001642:	f000 f9a5 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800164e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001652:	4619      	mov	r1, r3
 8001654:	4820      	ldr	r0, [pc, #128]	@ (80016d8 <MX_TIM15_Init+0x100>)
 8001656:	f007 fa47 	bl	8008ae8 <HAL_TIMEx_MasterConfigSynchronization>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001660:	f000 f996 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001664:	2360      	movs	r3, #96	@ 0x60
 8001666:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166c:	2300      	movs	r3, #0
 800166e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001670:	2300      	movs	r3, #0
 8001672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001680:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001684:	2200      	movs	r2, #0
 8001686:	4619      	mov	r1, r3
 8001688:	4813      	ldr	r0, [pc, #76]	@ (80016d8 <MX_TIM15_Init+0x100>)
 800168a:	f006 fda9 	bl	80081e0 <HAL_TIM_PWM_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001694:	f000 f97c 	bl	8001990 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	4619      	mov	r1, r3
 80016ba:	4807      	ldr	r0, [pc, #28]	@ (80016d8 <MX_TIM15_Init+0x100>)
 80016bc:	f007 fa9c 	bl	8008bf8 <HAL_TIMEx_ConfigBreakDeadTime>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 80016c6:	f000 f963 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80016ca:	4803      	ldr	r0, [pc, #12]	@ (80016d8 <MX_TIM15_Init+0x100>)
 80016cc:	f000 fb52 	bl	8001d74 <HAL_TIM_MspPostInit>

}
 80016d0:	bf00      	nop
 80016d2:	3758      	adds	r7, #88	@ 0x58
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000438 	.word	0x20000438
 80016dc:	40014000 	.word	0x40014000

080016e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08e      	sub	sp, #56	@ 0x38
 80016e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f6:	4ba0      	ldr	r3, [pc, #640]	@ (8001978 <MX_GPIO_Init+0x298>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fa:	4a9f      	ldr	r2, [pc, #636]	@ (8001978 <MX_GPIO_Init+0x298>)
 80016fc:	f043 0310 	orr.w	r3, r3, #16
 8001700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001702:	4b9d      	ldr	r3, [pc, #628]	@ (8001978 <MX_GPIO_Init+0x298>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	623b      	str	r3, [r7, #32]
 800170c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170e:	4b9a      	ldr	r3, [pc, #616]	@ (8001978 <MX_GPIO_Init+0x298>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	4a99      	ldr	r2, [pc, #612]	@ (8001978 <MX_GPIO_Init+0x298>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171a:	4b97      	ldr	r3, [pc, #604]	@ (8001978 <MX_GPIO_Init+0x298>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	61fb      	str	r3, [r7, #28]
 8001724:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001726:	4b94      	ldr	r3, [pc, #592]	@ (8001978 <MX_GPIO_Init+0x298>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	4a93      	ldr	r2, [pc, #588]	@ (8001978 <MX_GPIO_Init+0x298>)
 800172c:	f043 0320 	orr.w	r3, r3, #32
 8001730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001732:	4b91      	ldr	r3, [pc, #580]	@ (8001978 <MX_GPIO_Init+0x298>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	61bb      	str	r3, [r7, #24]
 800173c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173e:	4b8e      	ldr	r3, [pc, #568]	@ (8001978 <MX_GPIO_Init+0x298>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	4a8d      	ldr	r2, [pc, #564]	@ (8001978 <MX_GPIO_Init+0x298>)
 8001744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174a:	4b8b      	ldr	r3, [pc, #556]	@ (8001978 <MX_GPIO_Init+0x298>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	4b88      	ldr	r3, [pc, #544]	@ (8001978 <MX_GPIO_Init+0x298>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	4a87      	ldr	r2, [pc, #540]	@ (8001978 <MX_GPIO_Init+0x298>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001762:	4b85      	ldr	r3, [pc, #532]	@ (8001978 <MX_GPIO_Init+0x298>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	4b82      	ldr	r3, [pc, #520]	@ (8001978 <MX_GPIO_Init+0x298>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001772:	4a81      	ldr	r2, [pc, #516]	@ (8001978 <MX_GPIO_Init+0x298>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800177a:	4b7f      	ldr	r3, [pc, #508]	@ (8001978 <MX_GPIO_Init+0x298>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001786:	4b7c      	ldr	r3, [pc, #496]	@ (8001978 <MX_GPIO_Init+0x298>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178a:	4a7b      	ldr	r2, [pc, #492]	@ (8001978 <MX_GPIO_Init+0x298>)
 800178c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001792:	4b79      	ldr	r3, [pc, #484]	@ (8001978 <MX_GPIO_Init+0x298>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800179e:	4b76      	ldr	r3, [pc, #472]	@ (8001978 <MX_GPIO_Init+0x298>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a2:	4a75      	ldr	r2, [pc, #468]	@ (8001978 <MX_GPIO_Init+0x298>)
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017aa:	4b73      	ldr	r3, [pc, #460]	@ (8001978 <MX_GPIO_Init+0x298>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80017b6:	f002 fa2d 	bl	8003c14 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2102      	movs	r1, #2
 80017be:	486f      	ldr	r0, [pc, #444]	@ (800197c <MX_GPIO_Init+0x29c>)
 80017c0:	f002 f94c 	bl	8003a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2101      	movs	r1, #1
 80017c8:	486d      	ldr	r0, [pc, #436]	@ (8001980 <MX_GPIO_Init+0x2a0>)
 80017ca:	f002 f947 	bl	8003a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80017ce:	2307      	movs	r3, #7
 80017d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d2:	2312      	movs	r3, #18
 80017d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017da:	2303      	movs	r3, #3
 80017dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017de:	2304      	movs	r3, #4
 80017e0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e6:	4619      	mov	r1, r3
 80017e8:	4866      	ldr	r0, [pc, #408]	@ (8001984 <MX_GPIO_Init+0x2a4>)
 80017ea:	f001 ffa5 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017ee:	23f0      	movs	r3, #240	@ 0xf0
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017fe:	2305      	movs	r3, #5
 8001800:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001806:	4619      	mov	r1, r3
 8001808:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180c:	f001 ff94 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001810:	2302      	movs	r3, #2
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001814:	2301      	movs	r3, #1
 8001816:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001820:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001824:	4619      	mov	r1, r3
 8001826:	4855      	ldr	r0, [pc, #340]	@ (800197c <MX_GPIO_Init+0x29c>)
 8001828:	f001 ff86 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800182c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800183e:	2307      	movs	r3, #7
 8001840:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001842:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001846:	4619      	mov	r1, r3
 8001848:	484d      	ldr	r0, [pc, #308]	@ (8001980 <MX_GPIO_Init+0x2a0>)
 800184a:	f001 ff75 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800184e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001852:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001860:	2308      	movs	r3, #8
 8001862:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001868:	4619      	mov	r1, r3
 800186a:	4844      	ldr	r0, [pc, #272]	@ (800197c <MX_GPIO_Init+0x29c>)
 800186c:	f001 ff64 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001870:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001882:	230c      	movs	r3, #12
 8001884:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800188a:	4619      	mov	r1, r3
 800188c:	483e      	ldr	r0, [pc, #248]	@ (8001988 <MX_GPIO_Init+0x2a8>)
 800188e:	f001 ff53 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001892:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a0:	2303      	movs	r3, #3
 80018a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018a4:	230a      	movs	r3, #10
 80018a6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ac:	4619      	mov	r1, r3
 80018ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b2:	f001 ff41 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018bc:	2300      	movs	r3, #0
 80018be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c8:	4619      	mov	r1, r3
 80018ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ce:	f001 ff33 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018d2:	2301      	movs	r3, #1
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e6:	4619      	mov	r1, r3
 80018e8:	4825      	ldr	r0, [pc, #148]	@ (8001980 <MX_GPIO_Init+0x2a0>)
 80018ea:	f001 ff25 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018ee:	2304      	movs	r3, #4
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018fe:	230c      	movs	r3, #12
 8001900:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001906:	4619      	mov	r1, r3
 8001908:	481d      	ldr	r0, [pc, #116]	@ (8001980 <MX_GPIO_Init+0x2a0>)
 800190a:	f001 ff15 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800190e:	2360      	movs	r3, #96	@ 0x60
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191a:	2303      	movs	r3, #3
 800191c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800191e:	2307      	movs	r3, #7
 8001920:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001926:	4619      	mov	r1, r3
 8001928:	4815      	ldr	r0, [pc, #84]	@ (8001980 <MX_GPIO_Init+0x2a0>)
 800192a:	f001 ff05 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800192e:	2338      	movs	r3, #56	@ 0x38
 8001930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800193e:	2306      	movs	r3, #6
 8001940:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001946:	4619      	mov	r1, r3
 8001948:	4810      	ldr	r0, [pc, #64]	@ (800198c <MX_GPIO_Init+0x2ac>)
 800194a:	f001 fef5 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800194e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001954:	2312      	movs	r3, #18
 8001956:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001958:	2301      	movs	r3, #1
 800195a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001960:	2304      	movs	r3, #4
 8001962:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001964:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001968:	4619      	mov	r1, r3
 800196a:	4808      	ldr	r0, [pc, #32]	@ (800198c <MX_GPIO_Init+0x2ac>)
 800196c:	f001 fee4 	bl	8003738 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001970:	bf00      	nop
 8001972:	3738      	adds	r7, #56	@ 0x38
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40021000 	.word	0x40021000
 800197c:	48001800 	.word	0x48001800
 8001980:	48000c00 	.word	0x48000c00
 8001984:	48001400 	.word	0x48001400
 8001988:	48000800 	.word	0x48000800
 800198c:	48000400 	.word	0x48000400

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001994:	b672      	cpsid	i
}
 8001996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <Error_Handler+0x8>

0800199c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <HAL_MspInit+0x44>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019a6:	4a0e      	ldr	r2, [pc, #56]	@ (80019e0 <HAL_MspInit+0x44>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ae:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <HAL_MspInit+0x44>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <HAL_MspInit+0x44>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019be:	4a08      	ldr	r2, [pc, #32]	@ (80019e0 <HAL_MspInit+0x44>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019c6:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <HAL_MspInit+0x44>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000

080019e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	@ 0x30
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a2d      	ldr	r2, [pc, #180]	@ (8001ab8 <HAL_ADC_MspInit+0xd4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d154      	bne.n	8001ab0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a06:	4b2d      	ldr	r3, [pc, #180]	@ (8001abc <HAL_ADC_MspInit+0xd8>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0a:	4a2c      	ldr	r2, [pc, #176]	@ (8001abc <HAL_ADC_MspInit+0xd8>)
 8001a0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a12:	4b2a      	ldr	r3, [pc, #168]	@ (8001abc <HAL_ADC_MspInit+0xd8>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1e:	4b27      	ldr	r3, [pc, #156]	@ (8001abc <HAL_ADC_MspInit+0xd8>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a22:	4a26      	ldr	r2, [pc, #152]	@ (8001abc <HAL_ADC_MspInit+0xd8>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a2a:	4b24      	ldr	r3, [pc, #144]	@ (8001abc <HAL_ADC_MspInit+0xd8>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	4b21      	ldr	r3, [pc, #132]	@ (8001abc <HAL_ADC_MspInit+0xd8>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3a:	4a20      	ldr	r2, [pc, #128]	@ (8001abc <HAL_ADC_MspInit+0xd8>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a42:	4b1e      	ldr	r3, [pc, #120]	@ (8001abc <HAL_ADC_MspInit+0xd8>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <HAL_ADC_MspInit+0xd8>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a52:	4a1a      	ldr	r2, [pc, #104]	@ (8001abc <HAL_ADC_MspInit+0xd8>)
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a5a:	4b18      	ldr	r3, [pc, #96]	@ (8001abc <HAL_ADC_MspInit+0xd8>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a66:	233f      	movs	r3, #63	@ 0x3f
 8001a68:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a6a:	230b      	movs	r3, #11
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	4811      	ldr	r0, [pc, #68]	@ (8001ac0 <HAL_ADC_MspInit+0xdc>)
 8001a7a:	f001 fe5d 	bl	8003738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001a7e:	230a      	movs	r3, #10
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a82:	230b      	movs	r3, #11
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a94:	f001 fe50 	bl	8003738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a9c:	230b      	movs	r3, #11
 8001a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4806      	ldr	r0, [pc, #24]	@ (8001ac4 <HAL_ADC_MspInit+0xe0>)
 8001aac:	f001 fe44 	bl	8003738 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ab0:	bf00      	nop
 8001ab2:	3730      	adds	r7, #48	@ 0x30
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	50040000 	.word	0x50040000
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	48000800 	.word	0x48000800
 8001ac4:	48000400 	.word	0x48000400

08001ac8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	@ 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8001b60 <HAL_COMP_MspInit+0x98>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d118      	bne.n	8001b1c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <HAL_COMP_MspInit+0x9c>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	4a1d      	ldr	r2, [pc, #116]	@ (8001b64 <HAL_COMP_MspInit+0x9c>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <HAL_COMP_MspInit+0x9c>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b02:	2304      	movs	r3, #4
 8001b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b06:	2303      	movs	r3, #3
 8001b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4619      	mov	r1, r3
 8001b14:	4814      	ldr	r0, [pc, #80]	@ (8001b68 <HAL_COMP_MspInit+0xa0>)
 8001b16:	f001 fe0f 	bl	8003738 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8001b1a:	e01c      	b.n	8001b56 <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a12      	ldr	r2, [pc, #72]	@ (8001b6c <HAL_COMP_MspInit+0xa4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d117      	bne.n	8001b56 <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <HAL_COMP_MspInit+0x9c>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b64 <HAL_COMP_MspInit+0x9c>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b32:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <HAL_COMP_MspInit+0x9c>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b3e:	23c0      	movs	r3, #192	@ 0xc0
 8001b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b42:	2303      	movs	r3, #3
 8001b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4805      	ldr	r0, [pc, #20]	@ (8001b68 <HAL_COMP_MspInit+0xa0>)
 8001b52:	f001 fdf1 	bl	8003738 <HAL_GPIO_Init>
}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	@ 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40010200 	.word	0x40010200
 8001b64:	40021000 	.word	0x40021000
 8001b68:	48000400 	.word	0x48000400
 8001b6c:	40010204 	.word	0x40010204

08001b70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	@ 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a17      	ldr	r2, [pc, #92]	@ (8001bec <HAL_SPI_MspInit+0x7c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d127      	bne.n	8001be2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b92:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <HAL_SPI_MspInit+0x80>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b96:	4a16      	ldr	r2, [pc, #88]	@ (8001bf0 <HAL_SPI_MspInit+0x80>)
 8001b98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b9e:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <HAL_SPI_MspInit+0x80>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001baa:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <HAL_SPI_MspInit+0x80>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bae:	4a10      	ldr	r2, [pc, #64]	@ (8001bf0 <HAL_SPI_MspInit+0x80>)
 8001bb0:	f043 0308 	orr.w	r3, r3, #8
 8001bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <HAL_SPI_MspInit+0x80>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8001bc2:	231a      	movs	r3, #26
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bd2:	2305      	movs	r3, #5
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <HAL_SPI_MspInit+0x84>)
 8001bde:	f001 fdab 	bl	8003738 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001be2:	bf00      	nop
 8001be4:	3728      	adds	r7, #40	@ 0x28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40003800 	.word	0x40003800
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	48000c00 	.word	0x48000c00

08001bf8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08e      	sub	sp, #56	@ 0x38
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a51      	ldr	r2, [pc, #324]	@ (8001d5c <HAL_TIM_PWM_MspInit+0x164>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d139      	bne.n	8001c8e <HAL_TIM_PWM_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c1a:	4b51      	ldr	r3, [pc, #324]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c1e:	4a50      	ldr	r2, [pc, #320]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001c20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c24:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c26:	4b4e      	ldr	r3, [pc, #312]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c2e:	623b      	str	r3, [r7, #32]
 8001c30:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c32:	4b4b      	ldr	r3, [pc, #300]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c36:	4a4a      	ldr	r2, [pc, #296]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001c38:	f043 0310 	orr.w	r3, r3, #16
 8001c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c3e:	4b48      	ldr	r3, [pc, #288]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c4a:	2380      	movs	r3, #128	@ 0x80
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c62:	4619      	mov	r1, r3
 8001c64:	483f      	ldr	r0, [pc, #252]	@ (8001d64 <HAL_TIM_PWM_MspInit+0x16c>)
 8001c66:	f001 fd67 	bl	8003738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c6a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c84:	4619      	mov	r1, r3
 8001c86:	4837      	ldr	r0, [pc, #220]	@ (8001d64 <HAL_TIM_PWM_MspInit+0x16c>)
 8001c88:	f001 fd56 	bl	8003738 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001c8c:	e062      	b.n	8001d54 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM2)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c96:	d10c      	bne.n	8001cb2 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c98:	4b31      	ldr	r3, [pc, #196]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9c:	4a30      	ldr	r2, [pc, #192]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ca4:	4b2e      	ldr	r3, [pc, #184]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	69bb      	ldr	r3, [r7, #24]
}
 8001cb0:	e050      	b.n	8001d54 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM3)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8001d68 <HAL_TIM_PWM_MspInit+0x170>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d10c      	bne.n	8001cd6 <HAL_TIM_PWM_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cbc:	4b28      	ldr	r3, [pc, #160]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc0:	4a27      	ldr	r2, [pc, #156]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001cc2:	f043 0302 	orr.w	r3, r3, #2
 8001cc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cc8:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697b      	ldr	r3, [r7, #20]
}
 8001cd4:	e03e      	b.n	8001d54 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM4)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a24      	ldr	r2, [pc, #144]	@ (8001d6c <HAL_TIM_PWM_MspInit+0x174>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d128      	bne.n	8001d32 <HAL_TIM_PWM_MspInit+0x13a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cec:	4b1c      	ldr	r3, [pc, #112]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cf8:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfc:	4a18      	ldr	r2, [pc, #96]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001cfe:	f043 0310 	orr.w	r3, r3, #16
 8001d02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d04:	4b16      	ldr	r3, [pc, #88]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d10:	2301      	movs	r3, #1
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d20:	2302      	movs	r3, #2
 8001d22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480e      	ldr	r0, [pc, #56]	@ (8001d64 <HAL_TIM_PWM_MspInit+0x16c>)
 8001d2c:	f001 fd04 	bl	8003738 <HAL_GPIO_Init>
}
 8001d30:	e010      	b.n	8001d54 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM15)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a0e      	ldr	r2, [pc, #56]	@ (8001d70 <HAL_TIM_PWM_MspInit+0x178>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d10b      	bne.n	8001d54 <HAL_TIM_PWM_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001d3c:	4b08      	ldr	r3, [pc, #32]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d40:	4a07      	ldr	r2, [pc, #28]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001d42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d46:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <HAL_TIM_PWM_MspInit+0x168>)
 8001d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
}
 8001d54:	bf00      	nop
 8001d56:	3738      	adds	r7, #56	@ 0x38
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40012c00 	.word	0x40012c00
 8001d60:	40021000 	.word	0x40021000
 8001d64:	48001000 	.word	0x48001000
 8001d68:	40000400 	.word	0x40000400
 8001d6c:	40000800 	.word	0x40000800
 8001d70:	40014000 	.word	0x40014000

08001d74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08e      	sub	sp, #56	@ 0x38
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a73      	ldr	r2, [pc, #460]	@ (8001f60 <HAL_TIM_MspPostInit+0x1ec>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d11d      	bne.n	8001dd2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d96:	4b73      	ldr	r3, [pc, #460]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9a:	4a72      	ldr	r2, [pc, #456]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001d9c:	f043 0310 	orr.w	r3, r3, #16
 8001da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da2:	4b70      	ldr	r3, [pc, #448]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	623b      	str	r3, [r7, #32]
 8001dac:	6a3b      	ldr	r3, [r7, #32]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001dae:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4867      	ldr	r0, [pc, #412]	@ (8001f68 <HAL_TIM_MspPostInit+0x1f4>)
 8001dcc:	f001 fcb4 	bl	8003738 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001dd0:	e0c2      	b.n	8001f58 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dda:	d13a      	bne.n	8001e52 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	4b61      	ldr	r3, [pc, #388]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de0:	4a60      	ldr	r2, [pc, #384]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de8:	4b5e      	ldr	r3, [pc, #376]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df4:	4b5b      	ldr	r3, [pc, #364]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df8:	4a5a      	ldr	r2, [pc, #360]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001dfa:	f043 0302 	orr.w	r3, r3, #2
 8001dfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e00:	4b58      	ldr	r3, [pc, #352]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e24:	4619      	mov	r1, r3
 8001e26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e2a:	f001 fc85 	bl	8003738 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e40:	2301      	movs	r3, #1
 8001e42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4848      	ldr	r0, [pc, #288]	@ (8001f6c <HAL_TIM_MspPostInit+0x1f8>)
 8001e4c:	f001 fc74 	bl	8003738 <HAL_GPIO_Init>
}
 8001e50:	e082      	b.n	8001f58 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a46      	ldr	r2, [pc, #280]	@ (8001f70 <HAL_TIM_MspPostInit+0x1fc>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d138      	bne.n	8001ece <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5c:	4b41      	ldr	r3, [pc, #260]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e60:	4a40      	ldr	r2, [pc, #256]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001e62:	f043 0302 	orr.w	r3, r3, #2
 8001e66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e68:	4b3e      	ldr	r3, [pc, #248]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e74:	4b3b      	ldr	r3, [pc, #236]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e78:	4a3a      	ldr	r2, [pc, #232]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001e7a:	f043 0304 	orr.w	r3, r3, #4
 8001e7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e80:	4b38      	ldr	r3, [pc, #224]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4831      	ldr	r0, [pc, #196]	@ (8001f6c <HAL_TIM_MspPostInit+0x1f8>)
 8001ea8:	f001 fc46 	bl	8003738 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001eac:	2380      	movs	r3, #128	@ 0x80
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	482b      	ldr	r0, [pc, #172]	@ (8001f74 <HAL_TIM_MspPostInit+0x200>)
 8001ec8:	f001 fc36 	bl	8003738 <HAL_GPIO_Init>
}
 8001ecc:	e044      	b.n	8001f58 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a29      	ldr	r2, [pc, #164]	@ (8001f78 <HAL_TIM_MspPostInit+0x204>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d11d      	bne.n	8001f14 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed8:	4b22      	ldr	r3, [pc, #136]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001edc:	4a21      	ldr	r2, [pc, #132]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001ede:	f043 0308 	orr.w	r3, r3, #8
 8001ee2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001ef0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f02:	2302      	movs	r3, #2
 8001f04:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	481b      	ldr	r0, [pc, #108]	@ (8001f7c <HAL_TIM_MspPostInit+0x208>)
 8001f0e:	f001 fc13 	bl	8003738 <HAL_GPIO_Init>
}
 8001f12:	e021      	b.n	8001f58 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a19      	ldr	r2, [pc, #100]	@ (8001f80 <HAL_TIM_MspPostInit+0x20c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d11c      	bne.n	8001f58 <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1e:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f22:	4a10      	ldr	r2, [pc, #64]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <HAL_TIM_MspPostInit+0x1f0>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	2300      	movs	r3, #0
 8001f46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001f48:	230e      	movs	r3, #14
 8001f4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f50:	4619      	mov	r1, r3
 8001f52:	4806      	ldr	r0, [pc, #24]	@ (8001f6c <HAL_TIM_MspPostInit+0x1f8>)
 8001f54:	f001 fbf0 	bl	8003738 <HAL_GPIO_Init>
}
 8001f58:	bf00      	nop
 8001f5a:	3738      	adds	r7, #56	@ 0x38
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40012c00 	.word	0x40012c00
 8001f64:	40021000 	.word	0x40021000
 8001f68:	48001000 	.word	0x48001000
 8001f6c:	48000400 	.word	0x48000400
 8001f70:	40000400 	.word	0x40000400
 8001f74:	48000800 	.word	0x48000800
 8001f78:	40000800 	.word	0x40000800
 8001f7c:	48000c00 	.word	0x48000c00
 8001f80:	40014000 	.word	0x40014000

08001f84 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	@ 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a50      	ldr	r2, [pc, #320]	@ (80020d4 <HAL_SAI_MspInit+0x150>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d124      	bne.n	8001fe0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001f96:	4b50      	ldr	r3, [pc, #320]	@ (80020d8 <HAL_SAI_MspInit+0x154>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001f9e:	4b4f      	ldr	r3, [pc, #316]	@ (80020dc <HAL_SAI_MspInit+0x158>)
 8001fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa2:	4a4e      	ldr	r2, [pc, #312]	@ (80020dc <HAL_SAI_MspInit+0x158>)
 8001fa4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fa8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001faa:	4b4c      	ldr	r3, [pc, #304]	@ (80020dc <HAL_SAI_MspInit+0x158>)
 8001fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001fb6:	4b48      	ldr	r3, [pc, #288]	@ (80020d8 <HAL_SAI_MspInit+0x154>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	4a46      	ldr	r2, [pc, #280]	@ (80020d8 <HAL_SAI_MspInit+0x154>)
 8001fbe:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001fc0:	2374      	movs	r3, #116	@ 0x74
 8001fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001fd0:	230d      	movs	r3, #13
 8001fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4841      	ldr	r0, [pc, #260]	@ (80020e0 <HAL_SAI_MspInit+0x15c>)
 8001fdc:	f001 fbac 	bl	8003738 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a3f      	ldr	r2, [pc, #252]	@ (80020e4 <HAL_SAI_MspInit+0x160>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d135      	bne.n	8002056 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8001fea:	4b3b      	ldr	r3, [pc, #236]	@ (80020d8 <HAL_SAI_MspInit+0x154>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10b      	bne.n	800200a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001ff2:	4b3a      	ldr	r3, [pc, #232]	@ (80020dc <HAL_SAI_MspInit+0x158>)
 8001ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff6:	4a39      	ldr	r2, [pc, #228]	@ (80020dc <HAL_SAI_MspInit+0x158>)
 8001ff8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ffc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ffe:	4b37      	ldr	r3, [pc, #220]	@ (80020dc <HAL_SAI_MspInit+0x158>)
 8002000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002002:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800200a:	4b33      	ldr	r3, [pc, #204]	@ (80020d8 <HAL_SAI_MspInit+0x154>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3301      	adds	r3, #1
 8002010:	4a31      	ldr	r2, [pc, #196]	@ (80020d8 <HAL_SAI_MspInit+0x154>)
 8002012:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002014:	2308      	movs	r3, #8
 8002016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002020:	2300      	movs	r3, #0
 8002022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002024:	230d      	movs	r3, #13
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4619      	mov	r1, r3
 800202e:	482c      	ldr	r0, [pc, #176]	@ (80020e0 <HAL_SAI_MspInit+0x15c>)
 8002030:	f001 fb82 	bl	8003738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002034:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002046:	230d      	movs	r3, #13
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	4825      	ldr	r0, [pc, #148]	@ (80020e8 <HAL_SAI_MspInit+0x164>)
 8002052:	f001 fb71 	bl	8003738 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a24      	ldr	r2, [pc, #144]	@ (80020ec <HAL_SAI_MspInit+0x168>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d135      	bne.n	80020cc <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002060:	4b23      	ldr	r3, [pc, #140]	@ (80020f0 <HAL_SAI_MspInit+0x16c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10b      	bne.n	8002080 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002068:	4b1c      	ldr	r3, [pc, #112]	@ (80020dc <HAL_SAI_MspInit+0x158>)
 800206a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800206c:	4a1b      	ldr	r2, [pc, #108]	@ (80020dc <HAL_SAI_MspInit+0x158>)
 800206e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002072:	6613      	str	r3, [r2, #96]	@ 0x60
 8002074:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <HAL_SAI_MspInit+0x158>)
 8002076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002078:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8002080:	4b1b      	ldr	r3, [pc, #108]	@ (80020f0 <HAL_SAI_MspInit+0x16c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	3301      	adds	r3, #1
 8002086:	4a1a      	ldr	r2, [pc, #104]	@ (80020f0 <HAL_SAI_MspInit+0x16c>)
 8002088:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800208a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800208e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800209c:	230d      	movs	r3, #13
 800209e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4619      	mov	r1, r3
 80020a6:	4813      	ldr	r0, [pc, #76]	@ (80020f4 <HAL_SAI_MspInit+0x170>)
 80020a8:	f001 fb46 	bl	8003738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020ac:	2340      	movs	r3, #64	@ 0x40
 80020ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80020bc:	230d      	movs	r3, #13
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	480c      	ldr	r0, [pc, #48]	@ (80020f8 <HAL_SAI_MspInit+0x174>)
 80020c8:	f001 fb36 	bl	8003738 <HAL_GPIO_Init>

    }
}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	@ 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40015404 	.word	0x40015404
 80020d8:	20000484 	.word	0x20000484
 80020dc:	40021000 	.word	0x40021000
 80020e0:	48001000 	.word	0x48001000
 80020e4:	40015424 	.word	0x40015424
 80020e8:	48001400 	.word	0x48001400
 80020ec:	40015804 	.word	0x40015804
 80020f0:	20000488 	.word	0x20000488
 80020f4:	48000400 	.word	0x48000400
 80020f8:	48000800 	.word	0x48000800

080020fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <NMI_Handler+0x4>

08002104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <HardFault_Handler+0x4>

0800210c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <MemManage_Handler+0x4>

08002114 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <BusFault_Handler+0x4>

0800211c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <UsageFault_Handler+0x4>

08002124 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002152:	f000 f893 	bl	800227c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <SystemInit+0x20>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002166:	4a05      	ldr	r2, [pc, #20]	@ (800217c <SystemInit+0x20>)
 8002168:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800216c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002180:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002184:	f7ff ffea 	bl	800215c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002188:	480c      	ldr	r0, [pc, #48]	@ (80021bc <LoopForever+0x6>)
  ldr r1, =_edata
 800218a:	490d      	ldr	r1, [pc, #52]	@ (80021c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800218c:	4a0d      	ldr	r2, [pc, #52]	@ (80021c4 <LoopForever+0xe>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002190:	e002      	b.n	8002198 <LoopCopyDataInit>

08002192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002196:	3304      	adds	r3, #4

08002198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800219c:	d3f9      	bcc.n	8002192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219e:	4a0a      	ldr	r2, [pc, #40]	@ (80021c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021a0:	4c0a      	ldr	r4, [pc, #40]	@ (80021cc <LoopForever+0x16>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a4:	e001      	b.n	80021aa <LoopFillZerobss>

080021a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a8:	3204      	adds	r2, #4

080021aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ac:	d3fb      	bcc.n	80021a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ae:	f006 fe6f 	bl	8008e90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021b2:	f7fe fd3d 	bl	8000c30 <main>

080021b6 <LoopForever>:

LoopForever:
    b LoopForever
 80021b6:	e7fe      	b.n	80021b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021b8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80021bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80021c4:	08008f48 	.word	0x08008f48
  ldr r2, =_sbss
 80021c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80021cc:	20000490 	.word	0x20000490

080021d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021d0:	e7fe      	b.n	80021d0 <ADC1_IRQHandler>

080021d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021dc:	2003      	movs	r0, #3
 80021de:	f001 f9bf 	bl	8003560 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021e2:	2000      	movs	r0, #0
 80021e4:	f000 f80e 	bl	8002204 <HAL_InitTick>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	71fb      	strb	r3, [r7, #7]
 80021f2:	e001      	b.n	80021f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021f4:	f7ff fbd2 	bl	800199c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021f8:	79fb      	ldrb	r3, [r7, #7]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002210:	4b17      	ldr	r3, [pc, #92]	@ (8002270 <HAL_InitTick+0x6c>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d023      	beq.n	8002260 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002218:	4b16      	ldr	r3, [pc, #88]	@ (8002274 <HAL_InitTick+0x70>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b14      	ldr	r3, [pc, #80]	@ (8002270 <HAL_InitTick+0x6c>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4619      	mov	r1, r3
 8002222:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002226:	fbb3 f3f1 	udiv	r3, r3, r1
 800222a:	fbb2 f3f3 	udiv	r3, r2, r3
 800222e:	4618      	mov	r0, r3
 8002230:	f001 f9bd 	bl	80035ae <HAL_SYSTICK_Config>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10f      	bne.n	800225a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b0f      	cmp	r3, #15
 800223e:	d809      	bhi.n	8002254 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002240:	2200      	movs	r2, #0
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f001 f995 	bl	8003576 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800224c:	4a0a      	ldr	r2, [pc, #40]	@ (8002278 <HAL_InitTick+0x74>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e007      	b.n	8002264 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
 8002258:	e004      	b.n	8002264 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	e001      	b.n	8002264 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002264:	7bfb      	ldrb	r3, [r7, #15]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000008 	.word	0x20000008
 8002274:	20000000 	.word	0x20000000
 8002278:	20000004 	.word	0x20000004

0800227c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002280:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_IncTick+0x20>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <HAL_IncTick+0x24>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4413      	add	r3, r2
 800228c:	4a04      	ldr	r2, [pc, #16]	@ (80022a0 <HAL_IncTick+0x24>)
 800228e:	6013      	str	r3, [r2, #0]
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000008 	.word	0x20000008
 80022a0:	2000048c 	.word	0x2000048c

080022a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return uwTick;
 80022a8:	4b03      	ldr	r3, [pc, #12]	@ (80022b8 <HAL_GetTick+0x14>)
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	2000048c 	.word	0x2000048c

080022bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c4:	f7ff ffee 	bl	80022a4 <HAL_GetTick>
 80022c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d005      	beq.n	80022e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002300 <HAL_Delay+0x44>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022e2:	bf00      	nop
 80022e4:	f7ff ffde 	bl	80022a4 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d8f7      	bhi.n	80022e4 <HAL_Delay+0x28>
  {
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000008 	.word	0x20000008

08002304 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	609a      	str	r2, [r3, #8]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	609a      	str	r2, [r3, #8]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	3360      	adds	r3, #96	@ 0x60
 800237e:	461a      	mov	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b08      	ldr	r3, [pc, #32]	@ (80023b0 <LL_ADC_SetOffset+0x44>)
 800238e:	4013      	ands	r3, r2
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	4313      	orrs	r3, r2
 800239c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80023a4:	bf00      	nop
 80023a6:	371c      	adds	r7, #28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	03fff000 	.word	0x03fff000

080023b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3360      	adds	r3, #96	@ 0x60
 80023c2:	461a      	mov	r2, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	3360      	adds	r3, #96	@ 0x60
 80023f0:	461a      	mov	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	431a      	orrs	r2, r3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800240a:	bf00      	nop
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	615a      	str	r2, [r3, #20]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	3330      	adds	r3, #48	@ 0x30
 800244c:	461a      	mov	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	4413      	add	r3, r2
 800245a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 031f 	and.w	r3, r3, #31
 8002466:	211f      	movs	r1, #31
 8002468:	fa01 f303 	lsl.w	r3, r1, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	401a      	ands	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	0e9b      	lsrs	r3, r3, #26
 8002474:	f003 011f 	and.w	r1, r3, #31
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	431a      	orrs	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002488:	bf00      	nop
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	3314      	adds	r3, #20
 80024a4:	461a      	mov	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	0e5b      	lsrs	r3, r3, #25
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	4413      	add	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	0d1b      	lsrs	r3, r3, #20
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	2107      	movs	r1, #7
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	401a      	ands	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	0d1b      	lsrs	r3, r3, #20
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	431a      	orrs	r2, r3
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024de:	bf00      	nop
 80024e0:	371c      	adds	r7, #28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002504:	43db      	mvns	r3, r3
 8002506:	401a      	ands	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f003 0318 	and.w	r3, r3, #24
 800250e:	4908      	ldr	r1, [pc, #32]	@ (8002530 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002510:	40d9      	lsrs	r1, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	400b      	ands	r3, r1
 8002516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251a:	431a      	orrs	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	0007ffff 	.word	0x0007ffff

08002534 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002544:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6093      	str	r3, [r2, #8]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002568:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800256c:	d101      	bne.n	8002572 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002590:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002594:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025bc:	d101      	bne.n	80025c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <LL_ADC_IsEnabled+0x18>
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <LL_ADC_IsEnabled+0x1a>
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b04      	cmp	r3, #4
 8002608:	d101      	bne.n	800260e <LL_ADC_REG_IsConversionOngoing+0x18>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b08      	cmp	r3, #8
 800262e:	d101      	bne.n	8002634 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e129      	b.n	80028b2 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff f9b9 	bl	80019e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff67 	bl	8002558 <LL_ADC_IsDeepPowerDownEnabled>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff4d 	bl	8002534 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ff82 	bl	80025a8 <LL_ADC_IsInternalRegulatorEnabled>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d115      	bne.n	80026d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff66 	bl	8002580 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026b4:	4b81      	ldr	r3, [pc, #516]	@ (80028bc <HAL_ADC_Init+0x278>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	099b      	lsrs	r3, r3, #6
 80026ba:	4a81      	ldr	r2, [pc, #516]	@ (80028c0 <HAL_ADC_Init+0x27c>)
 80026bc:	fba2 2303 	umull	r2, r3, r2, r3
 80026c0:	099b      	lsrs	r3, r3, #6
 80026c2:	3301      	adds	r3, #1
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026c8:	e002      	b.n	80026d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f9      	bne.n	80026ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff ff64 	bl	80025a8 <LL_ADC_IsInternalRegulatorEnabled>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10d      	bne.n	8002702 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ea:	f043 0210 	orr.w	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f6:	f043 0201 	orr.w	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff ff75 	bl	80025f6 <LL_ADC_REG_IsConversionOngoing>
 800270c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b00      	cmp	r3, #0
 8002718:	f040 80c2 	bne.w	80028a0 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f040 80be 	bne.w	80028a0 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002728:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800272c:	f043 0202 	orr.w	r2, r3, #2
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff49 	bl	80025d0 <LL_ADC_IsEnabled>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10b      	bne.n	800275c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002744:	485f      	ldr	r0, [pc, #380]	@ (80028c4 <HAL_ADC_Init+0x280>)
 8002746:	f7ff ff43 	bl	80025d0 <LL_ADC_IsEnabled>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d105      	bne.n	800275c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4619      	mov	r1, r3
 8002756:	485c      	ldr	r0, [pc, #368]	@ (80028c8 <HAL_ADC_Init+0x284>)
 8002758:	f7ff fdd4 	bl	8002304 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7e5b      	ldrb	r3, [r3, #25]
 8002760:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002766:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800276c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002772:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800277a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d106      	bne.n	8002798 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278e:	3b01      	subs	r3, #1
 8002790:	045b      	lsls	r3, r3, #17
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279c:	2b00      	cmp	r3, #0
 800279e:	d009      	beq.n	80027b4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ac:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	4b44      	ldr	r3, [pc, #272]	@ (80028cc <HAL_ADC_Init+0x288>)
 80027bc:	4013      	ands	r3, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	69b9      	ldr	r1, [r7, #24]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff25 	bl	800261c <LL_ADC_INJ_IsConversionOngoing>
 80027d2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d140      	bne.n	800285c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d13d      	bne.n	800285c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	7e1b      	ldrb	r3, [r3, #24]
 80027e8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027ea:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027f2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002802:	f023 0306 	bic.w	r3, r3, #6
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	69b9      	ldr	r1, [r7, #24]
 800280c:	430b      	orrs	r3, r1
 800280e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002816:	2b01      	cmp	r3, #1
 8002818:	d118      	bne.n	800284c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002824:	f023 0304 	bic.w	r3, r3, #4
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002830:	4311      	orrs	r1, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002836:	4311      	orrs	r1, r2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800283c:	430a      	orrs	r2, r1
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0201 	orr.w	r2, r2, #1
 8002848:	611a      	str	r2, [r3, #16]
 800284a:	e007      	b.n	800285c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0201 	bic.w	r2, r2, #1
 800285a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d10c      	bne.n	800287e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	f023 010f 	bic.w	r1, r3, #15
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	1e5a      	subs	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	631a      	str	r2, [r3, #48]	@ 0x30
 800287c:	e007      	b.n	800288e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 020f 	bic.w	r2, r2, #15
 800288c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002892:	f023 0303 	bic.w	r3, r3, #3
 8002896:	f043 0201 	orr.w	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	659a      	str	r2, [r3, #88]	@ 0x58
 800289e:	e007      	b.n	80028b0 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a4:	f043 0210 	orr.w	r2, r3, #16
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000000 	.word	0x20000000
 80028c0:	053e2d63 	.word	0x053e2d63
 80028c4:	50040000 	.word	0x50040000
 80028c8:	50040300 	.word	0x50040300
 80028cc:	fff0c007 	.word	0xfff0c007

080028d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b0b6      	sub	sp, #216	@ 0xd8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x22>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e3d5      	b.n	800309e <HAL_ADC_ConfigChannel+0x7ce>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fe79 	bl	80025f6 <LL_ADC_REG_IsConversionOngoing>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 83ba 	bne.w	8003080 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b05      	cmp	r3, #5
 800291a:	d824      	bhi.n	8002966 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	3b02      	subs	r3, #2
 8002922:	2b03      	cmp	r3, #3
 8002924:	d81b      	bhi.n	800295e <HAL_ADC_ConfigChannel+0x8e>
 8002926:	a201      	add	r2, pc, #4	@ (adr r2, 800292c <HAL_ADC_ConfigChannel+0x5c>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	0800293d 	.word	0x0800293d
 8002930:	08002945 	.word	0x08002945
 8002934:	0800294d 	.word	0x0800294d
 8002938:	08002955 	.word	0x08002955
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800293c:	230c      	movs	r3, #12
 800293e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002942:	e010      	b.n	8002966 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002944:	2312      	movs	r3, #18
 8002946:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800294a:	e00c      	b.n	8002966 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800294c:	2318      	movs	r3, #24
 800294e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002952:	e008      	b.n	8002966 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002954:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002958:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800295c:	e003      	b.n	8002966 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800295e:	2306      	movs	r3, #6
 8002960:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002964:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002974:	f7ff fd62 	bl	800243c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fe3a 	bl	80025f6 <LL_ADC_REG_IsConversionOngoing>
 8002982:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fe46 	bl	800261c <LL_ADC_INJ_IsConversionOngoing>
 8002990:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002994:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002998:	2b00      	cmp	r3, #0
 800299a:	f040 81bf 	bne.w	8002d1c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800299e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 81ba 	bne.w	8002d1c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029b0:	d10f      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2200      	movs	r2, #0
 80029bc:	4619      	mov	r1, r3
 80029be:	f7ff fd69 	bl	8002494 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fd23 	bl	8002416 <LL_ADC_SetSamplingTimeCommonConfig>
 80029d0:	e00e      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6819      	ldr	r1, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	461a      	mov	r2, r3
 80029e0:	f7ff fd58 	bl	8002494 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fd13 	bl	8002416 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	08db      	lsrs	r3, r3, #3
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d00a      	beq.n	8002a28 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	6919      	ldr	r1, [r3, #16]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a22:	f7ff fca3 	bl	800236c <LL_ADC_SetOffset>
 8002a26:	e179      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fcc0 	bl	80023b4 <LL_ADC_GetOffsetChannel>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10a      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x184>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2100      	movs	r1, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fcb5 	bl	80023b4 <LL_ADC_GetOffsetChannel>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	0e9b      	lsrs	r3, r3, #26
 8002a4e:	f003 021f 	and.w	r2, r3, #31
 8002a52:	e01e      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x1c2>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2100      	movs	r1, #0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fcaa 	bl	80023b4 <LL_ADC_GetOffsetChannel>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a6a:	fa93 f3a3 	rbit	r3, r3
 8002a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002a82:	2320      	movs	r3, #32
 8002a84:	e004      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002a86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d105      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x1da>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	0e9b      	lsrs	r3, r3, #26
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	e018      	b.n	8002adc <HAL_ADC_ConfigChannel+0x20c>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002abe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002ac6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002ace:	2320      	movs	r3, #32
 8002ad0:	e004      	b.n	8002adc <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002ad2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ad6:	fab3 f383 	clz	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d106      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fc79 	bl	80023e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2101      	movs	r1, #1
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fc5d 	bl	80023b4 <LL_ADC_GetOffsetChannel>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10a      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x24a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2101      	movs	r1, #1
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fc52 	bl	80023b4 <LL_ADC_GetOffsetChannel>
 8002b10:	4603      	mov	r3, r0
 8002b12:	0e9b      	lsrs	r3, r3, #26
 8002b14:	f003 021f 	and.w	r2, r3, #31
 8002b18:	e01e      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x288>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2101      	movs	r1, #1
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fc47 	bl	80023b4 <LL_ADC_GetOffsetChannel>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002b40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002b48:	2320      	movs	r3, #32
 8002b4a:	e004      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002b4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b50:	fab3 f383 	clz	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x2a0>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	0e9b      	lsrs	r3, r3, #26
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	e018      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x2d2>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002b84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002b8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002b94:	2320      	movs	r3, #32
 8002b96:	e004      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002b98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b9c:	fab3 f383 	clz	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d106      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2200      	movs	r2, #0
 8002bac:	2101      	movs	r1, #1
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fc16 	bl	80023e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2102      	movs	r1, #2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fbfa 	bl	80023b4 <LL_ADC_GetOffsetChannel>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x310>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2102      	movs	r1, #2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fbef 	bl	80023b4 <LL_ADC_GetOffsetChannel>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	0e9b      	lsrs	r3, r3, #26
 8002bda:	f003 021f 	and.w	r2, r3, #31
 8002bde:	e01e      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x34e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2102      	movs	r1, #2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fbe4 	bl	80023b4 <LL_ADC_GetOffsetChannel>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002c0e:	2320      	movs	r3, #32
 8002c10:	e004      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d105      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x366>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	0e9b      	lsrs	r3, r3, #26
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	e014      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x390>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002c44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002c4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002c52:	2320      	movs	r3, #32
 8002c54:	e004      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002c56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d106      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fbb7 	bl	80023e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2103      	movs	r1, #3
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fb9b 	bl	80023b4 <LL_ADC_GetOffsetChannel>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10a      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x3ce>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2103      	movs	r1, #3
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fb90 	bl	80023b4 <LL_ADC_GetOffsetChannel>
 8002c94:	4603      	mov	r3, r0
 8002c96:	0e9b      	lsrs	r3, r3, #26
 8002c98:	f003 021f 	and.w	r2, r3, #31
 8002c9c:	e017      	b.n	8002cce <HAL_ADC_ConfigChannel+0x3fe>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2103      	movs	r1, #3
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fb85 	bl	80023b4 <LL_ADC_GetOffsetChannel>
 8002caa:	4603      	mov	r3, r0
 8002cac:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002cb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cb8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002cba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	e003      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002cc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d105      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x416>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	0e9b      	lsrs	r3, r3, #26
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	e011      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x43a>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002cf4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cf6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002cf8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002cfe:	2320      	movs	r3, #32
 8002d00:	e003      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002d02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d04:	fab3 f383 	clz	r3, r3
 8002d08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d106      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2200      	movs	r2, #0
 8002d14:	2103      	movs	r1, #3
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fb62 	bl	80023e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fc55 	bl	80025d0 <LL_ADC_IsEnabled>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f040 813f 	bne.w	8002fac <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6819      	ldr	r1, [r3, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f7ff fbd6 	bl	80024ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4a8e      	ldr	r2, [pc, #568]	@ (8002f80 <HAL_ADC_ConfigChannel+0x6b0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	f040 8130 	bne.w	8002fac <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10b      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x4a4>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	0e9b      	lsrs	r3, r3, #26
 8002d62:	3301      	adds	r3, #1
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	2b09      	cmp	r3, #9
 8002d6a:	bf94      	ite	ls
 8002d6c:	2301      	movls	r3, #1
 8002d6e:	2300      	movhi	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e019      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x4d8>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002d86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002d8c:	2320      	movs	r3, #32
 8002d8e:	e003      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002d90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	3301      	adds	r3, #1
 8002d9a:	f003 031f 	and.w	r3, r3, #31
 8002d9e:	2b09      	cmp	r3, #9
 8002da0:	bf94      	ite	ls
 8002da2:	2301      	movls	r3, #1
 8002da4:	2300      	movhi	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d079      	beq.n	8002ea0 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d107      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x4f8>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	0e9b      	lsrs	r3, r3, #26
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	069b      	lsls	r3, r3, #26
 8002dc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dc6:	e015      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x524>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dd0:	fa93 f3a3 	rbit	r3, r3
 8002dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dd8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002dda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002de0:	2320      	movs	r3, #32
 8002de2:	e003      	b.n	8002dec <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002de4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	3301      	adds	r3, #1
 8002dee:	069b      	lsls	r3, r3, #26
 8002df0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d109      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x544>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	0e9b      	lsrs	r3, r3, #26
 8002e06:	3301      	adds	r3, #1
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e12:	e017      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x574>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e24:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002e2c:	2320      	movs	r3, #32
 8002e2e:	e003      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	3301      	adds	r3, #1
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	2101      	movs	r1, #1
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	ea42 0103 	orr.w	r1, r2, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10a      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x59a>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	0e9b      	lsrs	r3, r3, #26
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f003 021f 	and.w	r2, r3, #31
 8002e60:	4613      	mov	r3, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4413      	add	r3, r2
 8002e66:	051b      	lsls	r3, r3, #20
 8002e68:	e018      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x5cc>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002e82:	2320      	movs	r3, #32
 8002e84:	e003      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e88:	fab3 f383 	clz	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f003 021f 	and.w	r2, r3, #31
 8002e94:	4613      	mov	r3, r2
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	4413      	add	r3, r2
 8002e9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	e080      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d107      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x5ec>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0e9b      	lsrs	r3, r3, #26
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	069b      	lsls	r3, r3, #26
 8002eb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002eba:	e015      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x618>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec4:	fa93 f3a3 	rbit	r3, r3
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002ed4:	2320      	movs	r3, #32
 8002ed6:	e003      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eda:	fab3 f383 	clz	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	069b      	lsls	r3, r3, #26
 8002ee4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d109      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x638>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0e9b      	lsrs	r3, r3, #26
 8002efa:	3301      	adds	r3, #1
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	2101      	movs	r1, #1
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	e017      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x668>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	61bb      	str	r3, [r7, #24]
  return result;
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002f20:	2320      	movs	r3, #32
 8002f22:	e003      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	2101      	movs	r1, #1
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	ea42 0103 	orr.w	r1, r2, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10d      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x694>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f003 021f 	and.w	r2, r3, #31
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	3b1e      	subs	r3, #30
 8002f5c:	051b      	lsls	r3, r3, #20
 8002f5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f62:	e01d      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x6d0>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	60fb      	str	r3, [r7, #12]
  return result;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d103      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	e005      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x6bc>
 8002f80:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f003 021f 	and.w	r2, r3, #31
 8002f92:	4613      	mov	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	3b1e      	subs	r3, #30
 8002f9a:	051b      	lsls	r3, r3, #20
 8002f9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fa0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	f7ff fa74 	bl	8002494 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4b3d      	ldr	r3, [pc, #244]	@ (80030a8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d06c      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fb8:	483c      	ldr	r0, [pc, #240]	@ (80030ac <HAL_ADC_ConfigChannel+0x7dc>)
 8002fba:	f7ff f9c9 	bl	8002350 <LL_ADC_GetCommonPathInternalCh>
 8002fbe:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a3a      	ldr	r2, [pc, #232]	@ (80030b0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d127      	bne.n	800301c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d121      	bne.n	800301c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a35      	ldr	r2, [pc, #212]	@ (80030b4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d157      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fe2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fe6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fea:	4619      	mov	r1, r3
 8002fec:	482f      	ldr	r0, [pc, #188]	@ (80030ac <HAL_ADC_ConfigChannel+0x7dc>)
 8002fee:	f7ff f99c 	bl	800232a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ff2:	4b31      	ldr	r3, [pc, #196]	@ (80030b8 <HAL_ADC_ConfigChannel+0x7e8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	099b      	lsrs	r3, r3, #6
 8002ff8:	4a30      	ldr	r2, [pc, #192]	@ (80030bc <HAL_ADC_ConfigChannel+0x7ec>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800300c:	e002      	b.n	8003014 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	3b01      	subs	r3, #1
 8003012:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f9      	bne.n	800300e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800301a:	e03a      	b.n	8003092 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a27      	ldr	r2, [pc, #156]	@ (80030c0 <HAL_ADC_ConfigChannel+0x7f0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d113      	bne.n	800304e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003026:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800302a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10d      	bne.n	800304e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a1f      	ldr	r2, [pc, #124]	@ (80030b4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d12a      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800303c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003040:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003044:	4619      	mov	r1, r3
 8003046:	4819      	ldr	r0, [pc, #100]	@ (80030ac <HAL_ADC_ConfigChannel+0x7dc>)
 8003048:	f7ff f96f 	bl	800232a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800304c:	e021      	b.n	8003092 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1c      	ldr	r2, [pc, #112]	@ (80030c4 <HAL_ADC_ConfigChannel+0x7f4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d11c      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003058:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800305c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d116      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a12      	ldr	r2, [pc, #72]	@ (80030b4 <HAL_ADC_ConfigChannel+0x7e4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d111      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800306e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003072:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003076:	4619      	mov	r1, r3
 8003078:	480c      	ldr	r0, [pc, #48]	@ (80030ac <HAL_ADC_ConfigChannel+0x7dc>)
 800307a:	f7ff f956 	bl	800232a <LL_ADC_SetCommonPathInternalCh>
 800307e:	e008      	b.n	8003092 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800309a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800309e:	4618      	mov	r0, r3
 80030a0:	37d8      	adds	r7, #216	@ 0xd8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	80080000 	.word	0x80080000
 80030ac:	50040300 	.word	0x50040300
 80030b0:	c7520000 	.word	0xc7520000
 80030b4:	50040000 	.word	0x50040000
 80030b8:	20000000 	.word	0x20000000
 80030bc:	053e2d63 	.word	0x053e2d63
 80030c0:	cb840000 	.word	0xcb840000
 80030c4:	80000001 	.word	0x80000001

080030c8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80030d0:	4b05      	ldr	r3, [pc, #20]	@ (80030e8 <LL_EXTI_EnableIT_0_31+0x20>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4904      	ldr	r1, [pc, #16]	@ (80030e8 <LL_EXTI_EnableIT_0_31+0x20>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40010400 	.word	0x40010400

080030ec <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80030f4:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <LL_EXTI_DisableIT_0_31+0x24>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	4904      	ldr	r1, [pc, #16]	@ (8003110 <LL_EXTI_DisableIT_0_31+0x24>)
 80030fe:	4013      	ands	r3, r2
 8003100:	600b      	str	r3, [r1, #0]
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40010400 	.word	0x40010400

08003114 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800311c:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <LL_EXTI_EnableEvent_0_31+0x20>)
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	4904      	ldr	r1, [pc, #16]	@ (8003134 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]

}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	40010400 	.word	0x40010400

08003138 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003140:	4b06      	ldr	r3, [pc, #24]	@ (800315c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	43db      	mvns	r3, r3
 8003148:	4904      	ldr	r1, [pc, #16]	@ (800315c <LL_EXTI_DisableEvent_0_31+0x24>)
 800314a:	4013      	ands	r3, r2
 800314c:	604b      	str	r3, [r1, #4]
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40010400 	.word	0x40010400

08003160 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003168:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	4904      	ldr	r1, [pc, #16]	@ (8003180 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]

}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	40010400 	.word	0x40010400

08003184 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800318c:	4b06      	ldr	r3, [pc, #24]	@ (80031a8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	43db      	mvns	r3, r3
 8003194:	4904      	ldr	r1, [pc, #16]	@ (80031a8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003196:	4013      	ands	r3, r2
 8003198:	608b      	str	r3, [r1, #8]

}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40010400 	.word	0x40010400

080031ac <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80031b4:	4b05      	ldr	r3, [pc, #20]	@ (80031cc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	4904      	ldr	r1, [pc, #16]	@ (80031cc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60cb      	str	r3, [r1, #12]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	40010400 	.word	0x40010400

080031d0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80031d8:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	43db      	mvns	r3, r3
 80031e0:	4904      	ldr	r1, [pc, #16]	@ (80031f4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	60cb      	str	r3, [r1, #12]
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40010400 	.word	0x40010400

080031f8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003200:	4a04      	ldr	r2, [pc, #16]	@ (8003214 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6153      	str	r3, [r2, #20]
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40010400 	.word	0x40010400

08003218 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d102      	bne.n	8003234 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	77fb      	strb	r3, [r7, #31]
 8003232:	e0d1      	b.n	80033d8 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800323e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003242:	d102      	bne.n	800324a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	77fb      	strb	r3, [r7, #31]
 8003248:	e0c6      	b.n	80033d8 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d115      	bne.n	8003282 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	629a      	str	r2, [r3, #40]	@ 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003264:	4b5f      	ldr	r3, [pc, #380]	@ (80033e4 <HAL_COMP_Init+0x1cc>)
 8003266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003268:	4a5e      	ldr	r2, [pc, #376]	@ (80033e4 <HAL_COMP_Init+0x1cc>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003270:	4b5c      	ldr	r3, [pc, #368]	@ (80033e4 <HAL_COMP_Init+0x1cc>)
 8003272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7fe fc23 	bl	8001ac8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800328c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b4b      	ldr	r3, [pc, #300]	@ (80033e8 <HAL_COMP_Init+0x1d0>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	6979      	ldr	r1, [r7, #20]
 80032c2:	430b      	orrs	r3, r1
 80032c4:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032ce:	d106      	bne.n	80032de <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80032d0:	4b46      	ldr	r3, [pc, #280]	@ (80033ec <HAL_COMP_Init+0x1d4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a45      	ldr	r2, [pc, #276]	@ (80033ec <HAL_COMP_Init+0x1d4>)
 80032d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	e005      	b.n	80032ea <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80032de:	4b43      	ldr	r3, [pc, #268]	@ (80033ec <HAL_COMP_Init+0x1d4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a42      	ldr	r2, [pc, #264]	@ (80033ec <HAL_COMP_Init+0x1d4>)
 80032e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032e8:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d016      	beq.n	8003326 <HAL_COMP_Init+0x10e>
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d113      	bne.n	8003326 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032fe:	4b3c      	ldr	r3, [pc, #240]	@ (80033f0 <HAL_COMP_Init+0x1d8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	099b      	lsrs	r3, r3, #6
 8003304:	4a3b      	ldr	r2, [pc, #236]	@ (80033f4 <HAL_COMP_Init+0x1dc>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	099b      	lsrs	r3, r3, #6
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003318:	e002      	b.n	8003320 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3b01      	subs	r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f9      	bne.n	800331a <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a33      	ldr	r2, [pc, #204]	@ (80033f8 <HAL_COMP_Init+0x1e0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d102      	bne.n	8003336 <HAL_COMP_Init+0x11e>
 8003330:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003334:	e001      	b.n	800333a <HAL_COMP_Init+0x122>
 8003336:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800333a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d037      	beq.n	80033b8 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003354:	6938      	ldr	r0, [r7, #16]
 8003356:	f7ff ff03 	bl	8003160 <LL_EXTI_EnableRisingTrig_0_31>
 800335a:	e002      	b.n	8003362 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800335c:	6938      	ldr	r0, [r7, #16]
 800335e:	f7ff ff11 	bl	8003184 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800336e:	6938      	ldr	r0, [r7, #16]
 8003370:	f7ff ff1c 	bl	80031ac <LL_EXTI_EnableFallingTrig_0_31>
 8003374:	e002      	b.n	800337c <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003376:	6938      	ldr	r0, [r7, #16]
 8003378:	f7ff ff2a 	bl	80031d0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 800337c:	6938      	ldr	r0, [r7, #16]
 800337e:	f7ff ff3b 	bl	80031f8 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800338e:	6938      	ldr	r0, [r7, #16]
 8003390:	f7ff fec0 	bl	8003114 <LL_EXTI_EnableEvent_0_31>
 8003394:	e002      	b.n	800339c <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003396:	6938      	ldr	r0, [r7, #16]
 8003398:	f7ff fece 	bl	8003138 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80033a8:	6938      	ldr	r0, [r7, #16]
 80033aa:	f7ff fe8d 	bl	80030c8 <LL_EXTI_EnableIT_0_31>
 80033ae:	e009      	b.n	80033c4 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80033b0:	6938      	ldr	r0, [r7, #16]
 80033b2:	f7ff fe9b 	bl	80030ec <LL_EXTI_DisableIT_0_31>
 80033b6:	e005      	b.n	80033c4 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80033b8:	6938      	ldr	r0, [r7, #16]
 80033ba:	f7ff febd 	bl	8003138 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80033be:	6938      	ldr	r0, [r7, #16]
 80033c0:	f7ff fe94 	bl	80030ec <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d103      	bne.n	80033d8 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 80033d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3720      	adds	r7, #32
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000
 80033e8:	ff207d03 	.word	0xff207d03
 80033ec:	40010204 	.word	0x40010204
 80033f0:	20000000 	.word	0x20000000
 80033f4:	053e2d63 	.word	0x053e2d63
 80033f8:	40010200 	.word	0x40010200

080033fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800340c:	4b0c      	ldr	r3, [pc, #48]	@ (8003440 <__NVIC_SetPriorityGrouping+0x44>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003418:	4013      	ands	r3, r2
 800341a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003424:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800342c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800342e:	4a04      	ldr	r2, [pc, #16]	@ (8003440 <__NVIC_SetPriorityGrouping+0x44>)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	60d3      	str	r3, [r2, #12]
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003448:	4b04      	ldr	r3, [pc, #16]	@ (800345c <__NVIC_GetPriorityGrouping+0x18>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	0a1b      	lsrs	r3, r3, #8
 800344e:	f003 0307 	and.w	r3, r3, #7
}
 8003452:	4618      	mov	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	6039      	str	r1, [r7, #0]
 800346a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	2b00      	cmp	r3, #0
 8003472:	db0a      	blt.n	800348a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	b2da      	uxtb	r2, r3
 8003478:	490c      	ldr	r1, [pc, #48]	@ (80034ac <__NVIC_SetPriority+0x4c>)
 800347a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347e:	0112      	lsls	r2, r2, #4
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	440b      	add	r3, r1
 8003484:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003488:	e00a      	b.n	80034a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4908      	ldr	r1, [pc, #32]	@ (80034b0 <__NVIC_SetPriority+0x50>)
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	3b04      	subs	r3, #4
 8003498:	0112      	lsls	r2, r2, #4
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	440b      	add	r3, r1
 800349e:	761a      	strb	r2, [r3, #24]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	e000e100 	.word	0xe000e100
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	@ 0x24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f1c3 0307 	rsb	r3, r3, #7
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	bf28      	it	cs
 80034d2:	2304      	movcs	r3, #4
 80034d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3304      	adds	r3, #4
 80034da:	2b06      	cmp	r3, #6
 80034dc:	d902      	bls.n	80034e4 <NVIC_EncodePriority+0x30>
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3b03      	subs	r3, #3
 80034e2:	e000      	b.n	80034e6 <NVIC_EncodePriority+0x32>
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43da      	mvns	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	401a      	ands	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	43d9      	mvns	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800350c:	4313      	orrs	r3, r2
         );
}
 800350e:	4618      	mov	r0, r3
 8003510:	3724      	adds	r7, #36	@ 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800352c:	d301      	bcc.n	8003532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800352e:	2301      	movs	r3, #1
 8003530:	e00f      	b.n	8003552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003532:	4a0a      	ldr	r2, [pc, #40]	@ (800355c <SysTick_Config+0x40>)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800353a:	210f      	movs	r1, #15
 800353c:	f04f 30ff 	mov.w	r0, #4294967295
 8003540:	f7ff ff8e 	bl	8003460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003544:	4b05      	ldr	r3, [pc, #20]	@ (800355c <SysTick_Config+0x40>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800354a:	4b04      	ldr	r3, [pc, #16]	@ (800355c <SysTick_Config+0x40>)
 800354c:	2207      	movs	r2, #7
 800354e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	e000e010 	.word	0xe000e010

08003560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff47 	bl	80033fc <__NVIC_SetPriorityGrouping>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b086      	sub	sp, #24
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003588:	f7ff ff5c 	bl	8003444 <__NVIC_GetPriorityGrouping>
 800358c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	6978      	ldr	r0, [r7, #20]
 8003594:	f7ff ff8e 	bl	80034b4 <NVIC_EncodePriority>
 8003598:	4602      	mov	r2, r0
 800359a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff5d 	bl	8003460 <__NVIC_SetPriority>
}
 80035a6:	bf00      	nop
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ffb0 	bl	800351c <SysTick_Config>
 80035bc:	4603      	mov	r3, r0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b086      	sub	sp, #24
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_DMA_Start_IT+0x20>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e066      	b.n	80036b4 <HAL_DMA_Start_IT+0xee>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d155      	bne.n	80036a6 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2202      	movs	r2, #2
 80035fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 f84c 	bl	80036bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 020e 	orr.w	r2, r2, #14
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	e00f      	b.n	800365e <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0204 	bic.w	r2, r2, #4
 800364c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 020a 	orr.w	r2, r2, #10
 800365c:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003676:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800367a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003680:	2b00      	cmp	r3, #0
 8003682:	d007      	beq.n	8003694 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003692:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e005      	b.n	80036b2 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
 80036b0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036d2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d004      	beq.n	80036e6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036e4:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ea:	f003 021c 	and.w	r2, r3, #28
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	2101      	movs	r1, #1
 80036f4:	fa01 f202 	lsl.w	r2, r1, r2
 80036f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b10      	cmp	r3, #16
 8003708:	d108      	bne.n	800371c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800371a:	e007      	b.n	800372c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	60da      	str	r2, [r3, #12]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003746:	e166      	b.n	8003a16 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	2101      	movs	r1, #1
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	fa01 f303 	lsl.w	r3, r1, r3
 8003754:	4013      	ands	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8158 	beq.w	8003a10 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	2b01      	cmp	r3, #1
 800376a:	d005      	beq.n	8003778 <HAL_GPIO_Init+0x40>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d130      	bne.n	80037da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	2203      	movs	r2, #3
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4013      	ands	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037ae:	2201      	movs	r2, #1
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43db      	mvns	r3, r3
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4013      	ands	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	f003 0201 	and.w	r2, r3, #1
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d017      	beq.n	8003816 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	2203      	movs	r2, #3
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43db      	mvns	r3, r3
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4013      	ands	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d123      	bne.n	800386a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	08da      	lsrs	r2, r3, #3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3208      	adds	r2, #8
 800382a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800382e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	220f      	movs	r2, #15
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4013      	ands	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	08da      	lsrs	r2, r3, #3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3208      	adds	r2, #8
 8003864:	6939      	ldr	r1, [r7, #16]
 8003866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	2203      	movs	r2, #3
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43db      	mvns	r3, r3
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4013      	ands	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f003 0203 	and.w	r2, r3, #3
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 80b2 	beq.w	8003a10 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ac:	4b61      	ldr	r3, [pc, #388]	@ (8003a34 <HAL_GPIO_Init+0x2fc>)
 80038ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b0:	4a60      	ldr	r2, [pc, #384]	@ (8003a34 <HAL_GPIO_Init+0x2fc>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80038b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a34 <HAL_GPIO_Init+0x2fc>)
 80038ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038c4:	4a5c      	ldr	r2, [pc, #368]	@ (8003a38 <HAL_GPIO_Init+0x300>)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	089b      	lsrs	r3, r3, #2
 80038ca:	3302      	adds	r3, #2
 80038cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	220f      	movs	r2, #15
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43db      	mvns	r3, r3
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4013      	ands	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80038ee:	d02b      	beq.n	8003948 <HAL_GPIO_Init+0x210>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a52      	ldr	r2, [pc, #328]	@ (8003a3c <HAL_GPIO_Init+0x304>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d025      	beq.n	8003944 <HAL_GPIO_Init+0x20c>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a51      	ldr	r2, [pc, #324]	@ (8003a40 <HAL_GPIO_Init+0x308>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d01f      	beq.n	8003940 <HAL_GPIO_Init+0x208>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a50      	ldr	r2, [pc, #320]	@ (8003a44 <HAL_GPIO_Init+0x30c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d019      	beq.n	800393c <HAL_GPIO_Init+0x204>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a4f      	ldr	r2, [pc, #316]	@ (8003a48 <HAL_GPIO_Init+0x310>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d013      	beq.n	8003938 <HAL_GPIO_Init+0x200>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a4e      	ldr	r2, [pc, #312]	@ (8003a4c <HAL_GPIO_Init+0x314>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00d      	beq.n	8003934 <HAL_GPIO_Init+0x1fc>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a4d      	ldr	r2, [pc, #308]	@ (8003a50 <HAL_GPIO_Init+0x318>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d007      	beq.n	8003930 <HAL_GPIO_Init+0x1f8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a4c      	ldr	r2, [pc, #304]	@ (8003a54 <HAL_GPIO_Init+0x31c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d101      	bne.n	800392c <HAL_GPIO_Init+0x1f4>
 8003928:	2307      	movs	r3, #7
 800392a:	e00e      	b.n	800394a <HAL_GPIO_Init+0x212>
 800392c:	2308      	movs	r3, #8
 800392e:	e00c      	b.n	800394a <HAL_GPIO_Init+0x212>
 8003930:	2306      	movs	r3, #6
 8003932:	e00a      	b.n	800394a <HAL_GPIO_Init+0x212>
 8003934:	2305      	movs	r3, #5
 8003936:	e008      	b.n	800394a <HAL_GPIO_Init+0x212>
 8003938:	2304      	movs	r3, #4
 800393a:	e006      	b.n	800394a <HAL_GPIO_Init+0x212>
 800393c:	2303      	movs	r3, #3
 800393e:	e004      	b.n	800394a <HAL_GPIO_Init+0x212>
 8003940:	2302      	movs	r3, #2
 8003942:	e002      	b.n	800394a <HAL_GPIO_Init+0x212>
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <HAL_GPIO_Init+0x212>
 8003948:	2300      	movs	r3, #0
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	f002 0203 	and.w	r2, r2, #3
 8003950:	0092      	lsls	r2, r2, #2
 8003952:	4093      	lsls	r3, r2
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800395a:	4937      	ldr	r1, [pc, #220]	@ (8003a38 <HAL_GPIO_Init+0x300>)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	089b      	lsrs	r3, r3, #2
 8003960:	3302      	adds	r3, #2
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003968:	4b3b      	ldr	r3, [pc, #236]	@ (8003a58 <HAL_GPIO_Init+0x320>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	43db      	mvns	r3, r3
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4013      	ands	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800398c:	4a32      	ldr	r2, [pc, #200]	@ (8003a58 <HAL_GPIO_Init+0x320>)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003992:	4b31      	ldr	r3, [pc, #196]	@ (8003a58 <HAL_GPIO_Init+0x320>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	43db      	mvns	r3, r3
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4013      	ands	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039b6:	4a28      	ldr	r2, [pc, #160]	@ (8003a58 <HAL_GPIO_Init+0x320>)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039bc:	4b26      	ldr	r3, [pc, #152]	@ (8003a58 <HAL_GPIO_Init+0x320>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4013      	ands	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a58 <HAL_GPIO_Init+0x320>)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a58 <HAL_GPIO_Init+0x320>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4013      	ands	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a0a:	4a13      	ldr	r2, [pc, #76]	@ (8003a58 <HAL_GPIO_Init+0x320>)
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	3301      	adds	r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f47f ae91 	bne.w	8003748 <HAL_GPIO_Init+0x10>
  }
}
 8003a26:	bf00      	nop
 8003a28:	bf00      	nop
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40010000 	.word	0x40010000
 8003a3c:	48000400 	.word	0x48000400
 8003a40:	48000800 	.word	0x48000800
 8003a44:	48000c00 	.word	0x48000c00
 8003a48:	48001000 	.word	0x48001000
 8003a4c:	48001400 	.word	0x48001400
 8003a50:	48001800 	.word	0x48001800
 8003a54:	48001c00 	.word	0x48001c00
 8003a58:	40010400 	.word	0x40010400

08003a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	807b      	strh	r3, [r7, #2]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a6c:	787b      	ldrb	r3, [r7, #1]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a72:	887a      	ldrh	r2, [r7, #2]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a78:	e002      	b.n	8003a80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a7a:	887a      	ldrh	r2, [r7, #2]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a90:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a9c:	d102      	bne.n	8003aa4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003a9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003aa2:	e00b      	b.n	8003abc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003aa4:	4b08      	ldr	r3, [pc, #32]	@ (8003ac8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ab2:	d102      	bne.n	8003aba <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003ab4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ab8:	e000      	b.n	8003abc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003aba:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40007000 	.word	0x40007000

08003acc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d141      	bne.n	8003b5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ada:	4b4b      	ldr	r3, [pc, #300]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ae6:	d131      	bne.n	8003b4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ae8:	4b47      	ldr	r3, [pc, #284]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aee:	4a46      	ldr	r2, [pc, #280]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003af4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003af8:	4b43      	ldr	r3, [pc, #268]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b00:	4a41      	ldr	r2, [pc, #260]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b08:	4b40      	ldr	r3, [pc, #256]	@ (8003c0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2232      	movs	r2, #50	@ 0x32
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	4a3f      	ldr	r2, [pc, #252]	@ (8003c10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	0c9b      	lsrs	r3, r3, #18
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b1e:	e002      	b.n	8003b26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b26:	4b38      	ldr	r3, [pc, #224]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b32:	d102      	bne.n	8003b3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f2      	bne.n	8003b20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b3a:	4b33      	ldr	r3, [pc, #204]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b46:	d158      	bne.n	8003bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e057      	b.n	8003bfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b52:	4a2d      	ldr	r2, [pc, #180]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b5c:	e04d      	b.n	8003bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b64:	d141      	bne.n	8003bea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b66:	4b28      	ldr	r3, [pc, #160]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b72:	d131      	bne.n	8003bd8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b74:	4b24      	ldr	r3, [pc, #144]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b7a:	4a23      	ldr	r2, [pc, #140]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b84:	4b20      	ldr	r3, [pc, #128]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b94:	4b1d      	ldr	r3, [pc, #116]	@ (8003c0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2232      	movs	r2, #50	@ 0x32
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003c10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	0c9b      	lsrs	r3, r3, #18
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003baa:	e002      	b.n	8003bb2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bb2:	4b15      	ldr	r3, [pc, #84]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bbe:	d102      	bne.n	8003bc6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f2      	bne.n	8003bac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bc6:	4b10      	ldr	r3, [pc, #64]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd2:	d112      	bne.n	8003bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e011      	b.n	8003bfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bde:	4a0a      	ldr	r2, [pc, #40]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003be4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003be8:	e007      	b.n	8003bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bea:	4b07      	ldr	r3, [pc, #28]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bf2:	4a05      	ldr	r2, [pc, #20]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bf8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	40007000 	.word	0x40007000
 8003c0c:	20000000 	.word	0x20000000
 8003c10:	431bde83 	.word	0x431bde83

08003c14 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003c18:	4b05      	ldr	r3, [pc, #20]	@ (8003c30 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4a04      	ldr	r2, [pc, #16]	@ (8003c30 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003c1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c22:	6053      	str	r3, [r2, #4]
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40007000 	.word	0x40007000

08003c34 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d102      	bne.n	8003c48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	f000 bc08 	b.w	8004458 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c48:	4b96      	ldr	r3, [pc, #600]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c52:	4b94      	ldr	r3, [pc, #592]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80e4 	beq.w	8003e32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <HAL_RCC_OscConfig+0x4c>
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	2b0c      	cmp	r3, #12
 8003c74:	f040 808b 	bne.w	8003d8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	f040 8087 	bne.w	8003d8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c80:	4b88      	ldr	r3, [pc, #544]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_RCC_OscConfig+0x64>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e3df      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1a      	ldr	r2, [r3, #32]
 8003c9c:	4b81      	ldr	r3, [pc, #516]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d004      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x7e>
 8003ca8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cb0:	e005      	b.n	8003cbe <HAL_RCC_OscConfig+0x8a>
 8003cb2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d223      	bcs.n	8003d0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fdcc 	bl	8004864 <RCC_SetFlashLatencyFromMSIRange>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e3c0      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cd6:	4b73      	ldr	r3, [pc, #460]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a72      	ldr	r2, [pc, #456]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003cdc:	f043 0308 	orr.w	r3, r3, #8
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	4b70      	ldr	r3, [pc, #448]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	496d      	ldr	r1, [pc, #436]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cf4:	4b6b      	ldr	r3, [pc, #428]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	4968      	ldr	r1, [pc, #416]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]
 8003d08:	e025      	b.n	8003d56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d0a:	4b66      	ldr	r3, [pc, #408]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a65      	ldr	r2, [pc, #404]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003d10:	f043 0308 	orr.w	r3, r3, #8
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	4b63      	ldr	r3, [pc, #396]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	4960      	ldr	r1, [pc, #384]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d28:	4b5e      	ldr	r3, [pc, #376]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	021b      	lsls	r3, r3, #8
 8003d36:	495b      	ldr	r1, [pc, #364]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fd8c 	bl	8004864 <RCC_SetFlashLatencyFromMSIRange>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e380      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d56:	f000 fcc1 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	4b51      	ldr	r3, [pc, #324]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	4950      	ldr	r1, [pc, #320]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003d68:	5ccb      	ldrb	r3, [r1, r3]
 8003d6a:	f003 031f 	and.w	r3, r3, #31
 8003d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d72:	4a4e      	ldr	r2, [pc, #312]	@ (8003eac <HAL_RCC_OscConfig+0x278>)
 8003d74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d76:	4b4e      	ldr	r3, [pc, #312]	@ (8003eb0 <HAL_RCC_OscConfig+0x27c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe fa42 	bl	8002204 <HAL_InitTick>
 8003d80:	4603      	mov	r3, r0
 8003d82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d052      	beq.n	8003e30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	e364      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d032      	beq.n	8003dfc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d96:	4b43      	ldr	r3, [pc, #268]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a42      	ldr	r2, [pc, #264]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003da2:	f7fe fa7f 	bl	80022a4 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003daa:	f7fe fa7b 	bl	80022a4 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e34d      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dbc:	4b39      	ldr	r3, [pc, #228]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dc8:	4b36      	ldr	r3, [pc, #216]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a35      	ldr	r2, [pc, #212]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003dce:	f043 0308 	orr.w	r3, r3, #8
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	4b33      	ldr	r3, [pc, #204]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	4930      	ldr	r1, [pc, #192]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003de6:	4b2f      	ldr	r3, [pc, #188]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	492b      	ldr	r1, [pc, #172]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]
 8003dfa:	e01a      	b.n	8003e32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dfc:	4b29      	ldr	r3, [pc, #164]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a28      	ldr	r2, [pc, #160]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003e02:	f023 0301 	bic.w	r3, r3, #1
 8003e06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e08:	f7fe fa4c 	bl	80022a4 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e10:	f7fe fa48 	bl	80022a4 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e31a      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e22:	4b20      	ldr	r3, [pc, #128]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x1dc>
 8003e2e:	e000      	b.n	8003e32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d073      	beq.n	8003f26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_OscConfig+0x21c>
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2b0c      	cmp	r3, #12
 8003e48:	d10e      	bne.n	8003e68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d10b      	bne.n	8003e68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e50:	4b14      	ldr	r3, [pc, #80]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d063      	beq.n	8003f24 <HAL_RCC_OscConfig+0x2f0>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d15f      	bne.n	8003f24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e2f7      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e70:	d106      	bne.n	8003e80 <HAL_RCC_OscConfig+0x24c>
 8003e72:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a0b      	ldr	r2, [pc, #44]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	e025      	b.n	8003ecc <HAL_RCC_OscConfig+0x298>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e88:	d114      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x280>
 8003e8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a05      	ldr	r2, [pc, #20]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	4b03      	ldr	r3, [pc, #12]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a02      	ldr	r2, [pc, #8]	@ (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e013      	b.n	8003ecc <HAL_RCC_OscConfig+0x298>
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	08008ef0 	.word	0x08008ef0
 8003eac:	20000000 	.word	0x20000000
 8003eb0:	20000004 	.word	0x20000004
 8003eb4:	4ba0      	ldr	r3, [pc, #640]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a9f      	ldr	r2, [pc, #636]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8003eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	4b9d      	ldr	r3, [pc, #628]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a9c      	ldr	r2, [pc, #624]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8003ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d013      	beq.n	8003efc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fe f9e6 	bl	80022a4 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003edc:	f7fe f9e2 	bl	80022a4 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	@ 0x64
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e2b4      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eee:	4b92      	ldr	r3, [pc, #584]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x2a8>
 8003efa:	e014      	b.n	8003f26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fe f9d2 	bl	80022a4 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f04:	f7fe f9ce 	bl	80022a4 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	@ 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e2a0      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f16:	4b88      	ldr	r3, [pc, #544]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x2d0>
 8003f22:	e000      	b.n	8003f26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d060      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d005      	beq.n	8003f44 <HAL_RCC_OscConfig+0x310>
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b0c      	cmp	r3, #12
 8003f3c:	d119      	bne.n	8003f72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d116      	bne.n	8003f72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f44:	4b7c      	ldr	r3, [pc, #496]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <HAL_RCC_OscConfig+0x328>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e27d      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5c:	4b76      	ldr	r3, [pc, #472]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	061b      	lsls	r3, r3, #24
 8003f6a:	4973      	ldr	r1, [pc, #460]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f70:	e040      	b.n	8003ff4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d023      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f7a:	4b6f      	ldr	r3, [pc, #444]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a6e      	ldr	r2, [pc, #440]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8003f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f86:	f7fe f98d 	bl	80022a4 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f8e:	f7fe f989 	bl	80022a4 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e25b      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fa0:	4b65      	ldr	r3, [pc, #404]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0f0      	beq.n	8003f8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fac:	4b62      	ldr	r3, [pc, #392]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	061b      	lsls	r3, r3, #24
 8003fba:	495f      	ldr	r1, [pc, #380]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	604b      	str	r3, [r1, #4]
 8003fc0:	e018      	b.n	8003ff4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fc2:	4b5d      	ldr	r3, [pc, #372]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a5c      	ldr	r2, [pc, #368]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8003fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fce:	f7fe f969 	bl	80022a4 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd6:	f7fe f965 	bl	80022a4 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e237      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fe8:	4b53      	ldr	r3, [pc, #332]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1f0      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d03c      	beq.n	800407a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01c      	beq.n	8004042 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004008:	4b4b      	ldr	r3, [pc, #300]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 800400a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800400e:	4a4a      	ldr	r2, [pc, #296]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004018:	f7fe f944 	bl	80022a4 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004020:	f7fe f940 	bl	80022a4 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e212      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004032:	4b41      	ldr	r3, [pc, #260]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8004034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0ef      	beq.n	8004020 <HAL_RCC_OscConfig+0x3ec>
 8004040:	e01b      	b.n	800407a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004042:	4b3d      	ldr	r3, [pc, #244]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8004044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004048:	4a3b      	ldr	r2, [pc, #236]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004052:	f7fe f927 	bl	80022a4 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800405a:	f7fe f923 	bl	80022a4 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e1f5      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800406c:	4b32      	ldr	r3, [pc, #200]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 800406e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1ef      	bne.n	800405a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 80a6 	beq.w	80041d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004088:	2300      	movs	r3, #0
 800408a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800408c:	4b2a      	ldr	r3, [pc, #168]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 800408e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10d      	bne.n	80040b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004098:	4b27      	ldr	r3, [pc, #156]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 800409a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409c:	4a26      	ldr	r2, [pc, #152]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 800409e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80040a4:	4b24      	ldr	r3, [pc, #144]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 80040a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040b0:	2301      	movs	r3, #1
 80040b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040b4:	4b21      	ldr	r3, [pc, #132]	@ (800413c <HAL_RCC_OscConfig+0x508>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d118      	bne.n	80040f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040c0:	4b1e      	ldr	r3, [pc, #120]	@ (800413c <HAL_RCC_OscConfig+0x508>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1d      	ldr	r2, [pc, #116]	@ (800413c <HAL_RCC_OscConfig+0x508>)
 80040c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040cc:	f7fe f8ea 	bl	80022a4 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d4:	f7fe f8e6 	bl	80022a4 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e1b8      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040e6:	4b15      	ldr	r3, [pc, #84]	@ (800413c <HAL_RCC_OscConfig+0x508>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d108      	bne.n	800410c <HAL_RCC_OscConfig+0x4d8>
 80040fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004100:	4a0d      	ldr	r2, [pc, #52]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800410a:	e029      	b.n	8004160 <HAL_RCC_OscConfig+0x52c>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b05      	cmp	r3, #5
 8004112:	d115      	bne.n	8004140 <HAL_RCC_OscConfig+0x50c>
 8004114:	4b08      	ldr	r3, [pc, #32]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411a:	4a07      	ldr	r2, [pc, #28]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 800411c:	f043 0304 	orr.w	r3, r3, #4
 8004120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004124:	4b04      	ldr	r3, [pc, #16]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 8004126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800412a:	4a03      	ldr	r2, [pc, #12]	@ (8004138 <HAL_RCC_OscConfig+0x504>)
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004134:	e014      	b.n	8004160 <HAL_RCC_OscConfig+0x52c>
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000
 800413c:	40007000 	.word	0x40007000
 8004140:	4b9d      	ldr	r3, [pc, #628]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 8004142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004146:	4a9c      	ldr	r2, [pc, #624]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 8004148:	f023 0301 	bic.w	r3, r3, #1
 800414c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004150:	4b99      	ldr	r3, [pc, #612]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 8004152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004156:	4a98      	ldr	r2, [pc, #608]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 8004158:	f023 0304 	bic.w	r3, r3, #4
 800415c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d016      	beq.n	8004196 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004168:	f7fe f89c 	bl	80022a4 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800416e:	e00a      	b.n	8004186 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004170:	f7fe f898 	bl	80022a4 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800417e:	4293      	cmp	r3, r2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e168      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004186:	4b8c      	ldr	r3, [pc, #560]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0ed      	beq.n	8004170 <HAL_RCC_OscConfig+0x53c>
 8004194:	e015      	b.n	80041c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004196:	f7fe f885 	bl	80022a4 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800419c:	e00a      	b.n	80041b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419e:	f7fe f881 	bl	80022a4 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e151      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041b4:	4b80      	ldr	r3, [pc, #512]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 80041b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1ed      	bne.n	800419e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041c2:	7ffb      	ldrb	r3, [r7, #31]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d105      	bne.n	80041d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c8:	4b7b      	ldr	r3, [pc, #492]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041cc:	4a7a      	ldr	r2, [pc, #488]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 80041ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d03c      	beq.n	800425a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01c      	beq.n	8004222 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041e8:	4b73      	ldr	r3, [pc, #460]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 80041ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041ee:	4a72      	ldr	r2, [pc, #456]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f8:	f7fe f854 	bl	80022a4 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004200:	f7fe f850 	bl	80022a4 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e122      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004212:	4b69      	ldr	r3, [pc, #420]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 8004214:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0ef      	beq.n	8004200 <HAL_RCC_OscConfig+0x5cc>
 8004220:	e01b      	b.n	800425a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004222:	4b65      	ldr	r3, [pc, #404]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 8004224:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004228:	4a63      	ldr	r2, [pc, #396]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 800422a:	f023 0301 	bic.w	r3, r3, #1
 800422e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004232:	f7fe f837 	bl	80022a4 <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800423a:	f7fe f833 	bl	80022a4 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e105      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800424c:	4b5a      	ldr	r3, [pc, #360]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 800424e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1ef      	bne.n	800423a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 80f9 	beq.w	8004456 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004268:	2b02      	cmp	r3, #2
 800426a:	f040 80cf 	bne.w	800440c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800426e:	4b52      	ldr	r3, [pc, #328]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f003 0203 	and.w	r2, r3, #3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427e:	429a      	cmp	r2, r3
 8004280:	d12c      	bne.n	80042dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428c:	3b01      	subs	r3, #1
 800428e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d123      	bne.n	80042dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800429e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d11b      	bne.n	80042dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d113      	bne.n	80042dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	3b01      	subs	r3, #1
 80042c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d109      	bne.n	80042dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d2:	085b      	lsrs	r3, r3, #1
 80042d4:	3b01      	subs	r3, #1
 80042d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042d8:	429a      	cmp	r2, r3
 80042da:	d071      	beq.n	80043c0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	2b0c      	cmp	r3, #12
 80042e0:	d068      	beq.n	80043b4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042e2:	4b35      	ldr	r3, [pc, #212]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d105      	bne.n	80042fa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042ee:	4b32      	ldr	r3, [pc, #200]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e0ac      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042fe:	4b2e      	ldr	r3, [pc, #184]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a2d      	ldr	r2, [pc, #180]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 8004304:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004308:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800430a:	f7fd ffcb 	bl	80022a4 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004312:	f7fd ffc7 	bl	80022a4 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e099      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004324:	4b24      	ldr	r3, [pc, #144]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f0      	bne.n	8004312 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004330:	4b21      	ldr	r3, [pc, #132]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	4b21      	ldr	r3, [pc, #132]	@ (80043bc <HAL_RCC_OscConfig+0x788>)
 8004336:	4013      	ands	r3, r2
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004340:	3a01      	subs	r2, #1
 8004342:	0112      	lsls	r2, r2, #4
 8004344:	4311      	orrs	r1, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800434a:	0212      	lsls	r2, r2, #8
 800434c:	4311      	orrs	r1, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004352:	0852      	lsrs	r2, r2, #1
 8004354:	3a01      	subs	r2, #1
 8004356:	0552      	lsls	r2, r2, #21
 8004358:	4311      	orrs	r1, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800435e:	0852      	lsrs	r2, r2, #1
 8004360:	3a01      	subs	r2, #1
 8004362:	0652      	lsls	r2, r2, #25
 8004364:	4311      	orrs	r1, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800436a:	06d2      	lsls	r2, r2, #27
 800436c:	430a      	orrs	r2, r1
 800436e:	4912      	ldr	r1, [pc, #72]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 8004370:	4313      	orrs	r3, r2
 8004372:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004374:	4b10      	ldr	r3, [pc, #64]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a0f      	ldr	r2, [pc, #60]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 800437a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800437e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004380:	4b0d      	ldr	r3, [pc, #52]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4a0c      	ldr	r2, [pc, #48]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 8004386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800438a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800438c:	f7fd ff8a 	bl	80022a4 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004394:	f7fd ff86 	bl	80022a4 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e058      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a6:	4b04      	ldr	r3, [pc, #16]	@ (80043b8 <HAL_RCC_OscConfig+0x784>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0f0      	beq.n	8004394 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043b2:	e050      	b.n	8004456 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e04f      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
 80043b8:	40021000 	.word	0x40021000
 80043bc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c0:	4b27      	ldr	r3, [pc, #156]	@ (8004460 <HAL_RCC_OscConfig+0x82c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d144      	bne.n	8004456 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043cc:	4b24      	ldr	r3, [pc, #144]	@ (8004460 <HAL_RCC_OscConfig+0x82c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a23      	ldr	r2, [pc, #140]	@ (8004460 <HAL_RCC_OscConfig+0x82c>)
 80043d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043d8:	4b21      	ldr	r3, [pc, #132]	@ (8004460 <HAL_RCC_OscConfig+0x82c>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	4a20      	ldr	r2, [pc, #128]	@ (8004460 <HAL_RCC_OscConfig+0x82c>)
 80043de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043e4:	f7fd ff5e 	bl	80022a4 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ec:	f7fd ff5a 	bl	80022a4 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e02c      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043fe:	4b18      	ldr	r3, [pc, #96]	@ (8004460 <HAL_RCC_OscConfig+0x82c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x7b8>
 800440a:	e024      	b.n	8004456 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b0c      	cmp	r3, #12
 8004410:	d01f      	beq.n	8004452 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004412:	4b13      	ldr	r3, [pc, #76]	@ (8004460 <HAL_RCC_OscConfig+0x82c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a12      	ldr	r2, [pc, #72]	@ (8004460 <HAL_RCC_OscConfig+0x82c>)
 8004418:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800441c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441e:	f7fd ff41 	bl	80022a4 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004426:	f7fd ff3d 	bl	80022a4 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e00f      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004438:	4b09      	ldr	r3, [pc, #36]	@ (8004460 <HAL_RCC_OscConfig+0x82c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f0      	bne.n	8004426 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004444:	4b06      	ldr	r3, [pc, #24]	@ (8004460 <HAL_RCC_OscConfig+0x82c>)
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	4905      	ldr	r1, [pc, #20]	@ (8004460 <HAL_RCC_OscConfig+0x82c>)
 800444a:	4b06      	ldr	r3, [pc, #24]	@ (8004464 <HAL_RCC_OscConfig+0x830>)
 800444c:	4013      	ands	r3, r2
 800444e:	60cb      	str	r3, [r1, #12]
 8004450:	e001      	b.n	8004456 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e000      	b.n	8004458 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3720      	adds	r7, #32
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40021000 	.word	0x40021000
 8004464:	feeefffc 	.word	0xfeeefffc

08004468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e11d      	b.n	80046bc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004480:	4b90      	ldr	r3, [pc, #576]	@ (80046c4 <HAL_RCC_ClockConfig+0x25c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 030f 	and.w	r3, r3, #15
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d910      	bls.n	80044b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448e:	4b8d      	ldr	r3, [pc, #564]	@ (80046c4 <HAL_RCC_ClockConfig+0x25c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f023 020f 	bic.w	r2, r3, #15
 8004496:	498b      	ldr	r1, [pc, #556]	@ (80046c4 <HAL_RCC_ClockConfig+0x25c>)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	4313      	orrs	r3, r2
 800449c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800449e:	4b89      	ldr	r3, [pc, #548]	@ (80046c4 <HAL_RCC_ClockConfig+0x25c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d001      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e105      	b.n	80046bc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d010      	beq.n	80044de <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	4b81      	ldr	r3, [pc, #516]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d908      	bls.n	80044de <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044cc:	4b7e      	ldr	r3, [pc, #504]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	497b      	ldr	r1, [pc, #492]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d079      	beq.n	80045de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d11e      	bne.n	8004530 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f2:	4b75      	ldr	r3, [pc, #468]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e0dc      	b.n	80046bc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004502:	f000 fa09 	bl	8004918 <RCC_GetSysClockFreqFromPLLSource>
 8004506:	4603      	mov	r3, r0
 8004508:	4a70      	ldr	r2, [pc, #448]	@ (80046cc <HAL_RCC_ClockConfig+0x264>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d946      	bls.n	800459c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800450e:	4b6e      	ldr	r3, [pc, #440]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d140      	bne.n	800459c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800451a:	4b6b      	ldr	r3, [pc, #428]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004522:	4a69      	ldr	r2, [pc, #420]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 8004524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004528:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800452a:	2380      	movs	r3, #128	@ 0x80
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	e035      	b.n	800459c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b02      	cmp	r3, #2
 8004536:	d107      	bne.n	8004548 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004538:	4b63      	ldr	r3, [pc, #396]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d115      	bne.n	8004570 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e0b9      	b.n	80046bc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d107      	bne.n	8004560 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004550:	4b5d      	ldr	r3, [pc, #372]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d109      	bne.n	8004570 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0ad      	b.n	80046bc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004560:	4b59      	ldr	r3, [pc, #356]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0a5      	b.n	80046bc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004570:	f000 f8b4 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 8004574:	4603      	mov	r3, r0
 8004576:	4a55      	ldr	r2, [pc, #340]	@ (80046cc <HAL_RCC_ClockConfig+0x264>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d90f      	bls.n	800459c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800457c:	4b52      	ldr	r3, [pc, #328]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d109      	bne.n	800459c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004588:	4b4f      	ldr	r3, [pc, #316]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004590:	4a4d      	ldr	r2, [pc, #308]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 8004592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004596:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004598:	2380      	movs	r3, #128	@ 0x80
 800459a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800459c:	4b4a      	ldr	r3, [pc, #296]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f023 0203 	bic.w	r2, r3, #3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	4947      	ldr	r1, [pc, #284]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ae:	f7fd fe79 	bl	80022a4 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b4:	e00a      	b.n	80045cc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b6:	f7fd fe75 	bl	80022a4 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e077      	b.n	80046bc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045cc:	4b3e      	ldr	r3, [pc, #248]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 020c 	and.w	r2, r3, #12
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	429a      	cmp	r2, r3
 80045dc:	d1eb      	bne.n	80045b6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b80      	cmp	r3, #128	@ 0x80
 80045e2:	d105      	bne.n	80045f0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045e4:	4b38      	ldr	r3, [pc, #224]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	4a37      	ldr	r2, [pc, #220]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 80045ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045ee:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d010      	beq.n	800461e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	4b31      	ldr	r3, [pc, #196]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004608:	429a      	cmp	r2, r3
 800460a:	d208      	bcs.n	800461e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800460c:	4b2e      	ldr	r3, [pc, #184]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	492b      	ldr	r1, [pc, #172]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 800461a:	4313      	orrs	r3, r2
 800461c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800461e:	4b29      	ldr	r3, [pc, #164]	@ (80046c4 <HAL_RCC_ClockConfig+0x25c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d210      	bcs.n	800464e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462c:	4b25      	ldr	r3, [pc, #148]	@ (80046c4 <HAL_RCC_ClockConfig+0x25c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f023 020f 	bic.w	r2, r3, #15
 8004634:	4923      	ldr	r1, [pc, #140]	@ (80046c4 <HAL_RCC_ClockConfig+0x25c>)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	4313      	orrs	r3, r2
 800463a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800463c:	4b21      	ldr	r3, [pc, #132]	@ (80046c4 <HAL_RCC_ClockConfig+0x25c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d001      	beq.n	800464e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e036      	b.n	80046bc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	d008      	beq.n	800466c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800465a:	4b1b      	ldr	r3, [pc, #108]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	4918      	ldr	r1, [pc, #96]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 8004668:	4313      	orrs	r3, r2
 800466a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b00      	cmp	r3, #0
 8004676:	d009      	beq.n	800468c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004678:	4b13      	ldr	r3, [pc, #76]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	4910      	ldr	r1, [pc, #64]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 8004688:	4313      	orrs	r3, r2
 800468a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800468c:	f000 f826 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 8004690:	4602      	mov	r2, r0
 8004692:	4b0d      	ldr	r3, [pc, #52]	@ (80046c8 <HAL_RCC_ClockConfig+0x260>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	091b      	lsrs	r3, r3, #4
 8004698:	f003 030f 	and.w	r3, r3, #15
 800469c:	490c      	ldr	r1, [pc, #48]	@ (80046d0 <HAL_RCC_ClockConfig+0x268>)
 800469e:	5ccb      	ldrb	r3, [r1, r3]
 80046a0:	f003 031f 	and.w	r3, r3, #31
 80046a4:	fa22 f303 	lsr.w	r3, r2, r3
 80046a8:	4a0a      	ldr	r2, [pc, #40]	@ (80046d4 <HAL_RCC_ClockConfig+0x26c>)
 80046aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046ac:	4b0a      	ldr	r3, [pc, #40]	@ (80046d8 <HAL_RCC_ClockConfig+0x270>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fd fda7 	bl	8002204 <HAL_InitTick>
 80046b6:	4603      	mov	r3, r0
 80046b8:	73fb      	strb	r3, [r7, #15]

  return status;
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40022000 	.word	0x40022000
 80046c8:	40021000 	.word	0x40021000
 80046cc:	04c4b400 	.word	0x04c4b400
 80046d0:	08008ef0 	.word	0x08008ef0
 80046d4:	20000000 	.word	0x20000000
 80046d8:	20000004 	.word	0x20000004

080046dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	b089      	sub	sp, #36	@ 0x24
 80046e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61fb      	str	r3, [r7, #28]
 80046e6:	2300      	movs	r3, #0
 80046e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ea:	4b3e      	ldr	r3, [pc, #248]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046f4:	4b3b      	ldr	r3, [pc, #236]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_RCC_GetSysClockFreq+0x34>
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	2b0c      	cmp	r3, #12
 8004708:	d121      	bne.n	800474e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d11e      	bne.n	800474e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004710:	4b34      	ldr	r3, [pc, #208]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d107      	bne.n	800472c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800471c:	4b31      	ldr	r3, [pc, #196]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800471e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004722:	0a1b      	lsrs	r3, r3, #8
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	61fb      	str	r3, [r7, #28]
 800472a:	e005      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800472c:	4b2d      	ldr	r3, [pc, #180]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	091b      	lsrs	r3, r3, #4
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004738:	4a2b      	ldr	r2, [pc, #172]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004740:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10d      	bne.n	8004764 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800474c:	e00a      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d102      	bne.n	800475a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004754:	4b25      	ldr	r3, [pc, #148]	@ (80047ec <HAL_RCC_GetSysClockFreq+0x110>)
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	e004      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2b08      	cmp	r3, #8
 800475e:	d101      	bne.n	8004764 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004760:	4b23      	ldr	r3, [pc, #140]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004762:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	2b0c      	cmp	r3, #12
 8004768:	d134      	bne.n	80047d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800476a:	4b1e      	ldr	r3, [pc, #120]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d003      	beq.n	8004782 <HAL_RCC_GetSysClockFreq+0xa6>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b03      	cmp	r3, #3
 800477e:	d003      	beq.n	8004788 <HAL_RCC_GetSysClockFreq+0xac>
 8004780:	e005      	b.n	800478e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004782:	4b1a      	ldr	r3, [pc, #104]	@ (80047ec <HAL_RCC_GetSysClockFreq+0x110>)
 8004784:	617b      	str	r3, [r7, #20]
      break;
 8004786:	e005      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004788:	4b19      	ldr	r3, [pc, #100]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800478a:	617b      	str	r3, [r7, #20]
      break;
 800478c:	e002      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	617b      	str	r3, [r7, #20]
      break;
 8004792:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004794:	4b13      	ldr	r3, [pc, #76]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	3301      	adds	r3, #1
 80047a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047a2:	4b10      	ldr	r3, [pc, #64]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	0a1b      	lsrs	r3, r3, #8
 80047a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	fb03 f202 	mul.w	r2, r3, r2
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047ba:	4b0a      	ldr	r3, [pc, #40]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	0e5b      	lsrs	r3, r3, #25
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	3301      	adds	r3, #1
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047d4:	69bb      	ldr	r3, [r7, #24]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3724      	adds	r7, #36	@ 0x24
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000
 80047e8:	08008f08 	.word	0x08008f08
 80047ec:	00f42400 	.word	0x00f42400
 80047f0:	007a1200 	.word	0x007a1200

080047f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047f8:	4b03      	ldr	r3, [pc, #12]	@ (8004808 <HAL_RCC_GetHCLKFreq+0x14>)
 80047fa:	681b      	ldr	r3, [r3, #0]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20000000 	.word	0x20000000

0800480c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004810:	f7ff fff0 	bl	80047f4 <HAL_RCC_GetHCLKFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	4b06      	ldr	r3, [pc, #24]	@ (8004830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	0a1b      	lsrs	r3, r3, #8
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	4904      	ldr	r1, [pc, #16]	@ (8004834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800482c:	4618      	mov	r0, r3
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40021000 	.word	0x40021000
 8004834:	08008f00 	.word	0x08008f00

08004838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800483c:	f7ff ffda 	bl	80047f4 <HAL_RCC_GetHCLKFreq>
 8004840:	4602      	mov	r2, r0
 8004842:	4b06      	ldr	r3, [pc, #24]	@ (800485c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	0adb      	lsrs	r3, r3, #11
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	4904      	ldr	r1, [pc, #16]	@ (8004860 <HAL_RCC_GetPCLK2Freq+0x28>)
 800484e:	5ccb      	ldrb	r3, [r1, r3]
 8004850:	f003 031f 	and.w	r3, r3, #31
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004858:	4618      	mov	r0, r3
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40021000 	.word	0x40021000
 8004860:	08008f00 	.word	0x08008f00

08004864 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800486c:	2300      	movs	r3, #0
 800486e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004870:	4b27      	ldr	r3, [pc, #156]	@ (8004910 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800487c:	f7ff f906 	bl	8003a8c <HAL_PWREx_GetVoltageRange>
 8004880:	6178      	str	r0, [r7, #20]
 8004882:	e014      	b.n	80048ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004884:	4b22      	ldr	r3, [pc, #136]	@ (8004910 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004888:	4a21      	ldr	r2, [pc, #132]	@ (8004910 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800488a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800488e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004890:	4b1f      	ldr	r3, [pc, #124]	@ (8004910 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800489c:	f7ff f8f6 	bl	8003a8c <HAL_PWREx_GetVoltageRange>
 80048a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004910 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004910 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b4:	d10b      	bne.n	80048ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b80      	cmp	r3, #128	@ 0x80
 80048ba:	d913      	bls.n	80048e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2ba0      	cmp	r3, #160	@ 0xa0
 80048c0:	d902      	bls.n	80048c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048c2:	2302      	movs	r3, #2
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	e00d      	b.n	80048e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048c8:	2301      	movs	r3, #1
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	e00a      	b.n	80048e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80048d2:	d902      	bls.n	80048da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80048d4:	2302      	movs	r3, #2
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	e004      	b.n	80048e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b70      	cmp	r3, #112	@ 0x70
 80048de:	d101      	bne.n	80048e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048e0:	2301      	movs	r3, #1
 80048e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f023 020f 	bic.w	r2, r3, #15
 80048ec:	4909      	ldr	r1, [pc, #36]	@ (8004914 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048f4:	4b07      	ldr	r3, [pc, #28]	@ (8004914 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d001      	beq.n	8004906 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021000 	.word	0x40021000
 8004914:	40022000 	.word	0x40022000

08004918 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800491e:	4b2d      	ldr	r3, [pc, #180]	@ (80049d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b03      	cmp	r3, #3
 800492c:	d00b      	beq.n	8004946 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b03      	cmp	r3, #3
 8004932:	d825      	bhi.n	8004980 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d008      	beq.n	800494c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b02      	cmp	r3, #2
 800493e:	d11f      	bne.n	8004980 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004940:	4b25      	ldr	r3, [pc, #148]	@ (80049d8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004942:	613b      	str	r3, [r7, #16]
    break;
 8004944:	e01f      	b.n	8004986 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004946:	4b25      	ldr	r3, [pc, #148]	@ (80049dc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004948:	613b      	str	r3, [r7, #16]
    break;
 800494a:	e01c      	b.n	8004986 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800494c:	4b21      	ldr	r3, [pc, #132]	@ (80049d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004958:	4b1e      	ldr	r3, [pc, #120]	@ (80049d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800495a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	e005      	b.n	8004974 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004968:	4b1a      	ldr	r3, [pc, #104]	@ (80049d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	091b      	lsrs	r3, r3, #4
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004974:	4a1a      	ldr	r2, [pc, #104]	@ (80049e0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800497c:	613b      	str	r3, [r7, #16]
    break;
 800497e:	e002      	b.n	8004986 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]
    break;
 8004984:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004986:	4b13      	ldr	r3, [pc, #76]	@ (80049d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	091b      	lsrs	r3, r3, #4
 800498c:	f003 030f 	and.w	r3, r3, #15
 8004990:	3301      	adds	r3, #1
 8004992:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004994:	4b0f      	ldr	r3, [pc, #60]	@ (80049d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	0a1b      	lsrs	r3, r3, #8
 800499a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	fb03 f202 	mul.w	r2, r3, r2
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049aa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049ac:	4b09      	ldr	r3, [pc, #36]	@ (80049d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	0e5b      	lsrs	r3, r3, #25
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	3301      	adds	r3, #1
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80049c6:	683b      	ldr	r3, [r7, #0]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	40021000 	.word	0x40021000
 80049d8:	00f42400 	.word	0x00f42400
 80049dc:	007a1200 	.word	0x007a1200
 80049e0:	08008f08 	.word	0x08008f08

080049e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049ec:	2300      	movs	r3, #0
 80049ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049f0:	2300      	movs	r3, #0
 80049f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d040      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a04:	2b80      	cmp	r3, #128	@ 0x80
 8004a06:	d02a      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a08:	2b80      	cmp	r3, #128	@ 0x80
 8004a0a:	d825      	bhi.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a0c:	2b60      	cmp	r3, #96	@ 0x60
 8004a0e:	d026      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a10:	2b60      	cmp	r3, #96	@ 0x60
 8004a12:	d821      	bhi.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a14:	2b40      	cmp	r3, #64	@ 0x40
 8004a16:	d006      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004a18:	2b40      	cmp	r3, #64	@ 0x40
 8004a1a:	d81d      	bhi.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d009      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	d010      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004a24:	e018      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a26:	4b89      	ldr	r3, [pc, #548]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	4a88      	ldr	r2, [pc, #544]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a30:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a32:	e015      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3304      	adds	r3, #4
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f001 fa24 	bl	8005e88 <RCCEx_PLLSAI1_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a44:	e00c      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3320      	adds	r3, #32
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f001 fb0f 	bl	8006070 <RCCEx_PLLSAI2_Config>
 8004a52:	4603      	mov	r3, r0
 8004a54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a56:	e003      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	74fb      	strb	r3, [r7, #19]
      break;
 8004a5c:	e000      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10b      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a66:	4b79      	ldr	r3, [pc, #484]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a6c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a74:	4975      	ldr	r1, [pc, #468]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004a7c:	e001      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7e:	7cfb      	ldrb	r3, [r7, #19]
 8004a80:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d047      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a96:	d030      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a9c:	d82a      	bhi.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aa2:	d02a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004aa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aa8:	d824      	bhi.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004aaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aae:	d008      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ab4:	d81e      	bhi.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004abe:	d010      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ac0:	e018      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ac2:	4b62      	ldr	r3, [pc, #392]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	4a61      	ldr	r2, [pc, #388]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004acc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ace:	e015      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f001 f9d6 	bl	8005e88 <RCCEx_PLLSAI1_Config>
 8004adc:	4603      	mov	r3, r0
 8004ade:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ae0:	e00c      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3320      	adds	r3, #32
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f001 fac1 	bl	8006070 <RCCEx_PLLSAI2_Config>
 8004aee:	4603      	mov	r3, r0
 8004af0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004af2:	e003      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	74fb      	strb	r3, [r7, #19]
      break;
 8004af8:	e000      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004afa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004afc:	7cfb      	ldrb	r3, [r7, #19]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10b      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b02:	4b52      	ldr	r3, [pc, #328]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b10:	494e      	ldr	r1, [pc, #312]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004b18:	e001      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1a:	7cfb      	ldrb	r3, [r7, #19]
 8004b1c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 809f 	beq.w	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b30:	4b46      	ldr	r3, [pc, #280]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004b40:	2300      	movs	r3, #0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00d      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b46:	4b41      	ldr	r3, [pc, #260]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b4a:	4a40      	ldr	r2, [pc, #256]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b50:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b52:	4b3e      	ldr	r3, [pc, #248]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b5a:	60bb      	str	r3, [r7, #8]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b62:	4b3b      	ldr	r3, [pc, #236]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a3a      	ldr	r2, [pc, #232]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b6e:	f7fd fb99 	bl	80022a4 <HAL_GetTick>
 8004b72:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b74:	e009      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b76:	f7fd fb95 	bl	80022a4 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d902      	bls.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	74fb      	strb	r3, [r7, #19]
        break;
 8004b88:	e005      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b8a:	4b31      	ldr	r3, [pc, #196]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0ef      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004b96:	7cfb      	ldrb	r3, [r7, #19]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d15b      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ba6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01f      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d019      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bba:	4b24      	ldr	r3, [pc, #144]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bc4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bc6:	4b21      	ldr	r3, [pc, #132]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004be2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004be6:	4a19      	ldr	r2, [pc, #100]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d016      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf8:	f7fd fb54 	bl	80022a4 <HAL_GetTick>
 8004bfc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bfe:	e00b      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c00:	f7fd fb50 	bl	80022a4 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d902      	bls.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	74fb      	strb	r3, [r7, #19]
            break;
 8004c16:	e006      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c18:	4b0c      	ldr	r3, [pc, #48]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0ec      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004c26:	7cfb      	ldrb	r3, [r7, #19]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10c      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c2c:	4b07      	ldr	r3, [pc, #28]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c3c:	4903      	ldr	r1, [pc, #12]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c44:	e008      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c46:	7cfb      	ldrb	r3, [r7, #19]
 8004c48:	74bb      	strb	r3, [r7, #18]
 8004c4a:	e005      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c54:	7cfb      	ldrb	r3, [r7, #19]
 8004c56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c58:	7c7b      	ldrb	r3, [r7, #17]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d105      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c5e:	4ba0      	ldr	r3, [pc, #640]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c62:	4a9f      	ldr	r2, [pc, #636]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c76:	4b9a      	ldr	r3, [pc, #616]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c7c:	f023 0203 	bic.w	r2, r3, #3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c84:	4996      	ldr	r1, [pc, #600]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c98:	4b91      	ldr	r3, [pc, #580]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9e:	f023 020c 	bic.w	r2, r3, #12
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	498e      	ldr	r1, [pc, #568]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cba:	4b89      	ldr	r3, [pc, #548]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc8:	4985      	ldr	r1, [pc, #532]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cdc:	4b80      	ldr	r3, [pc, #512]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cea:	497d      	ldr	r1, [pc, #500]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cfe:	4b78      	ldr	r3, [pc, #480]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d0c:	4974      	ldr	r1, [pc, #464]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d20:	4b6f      	ldr	r3, [pc, #444]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d2e:	496c      	ldr	r1, [pc, #432]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d42:	4b67      	ldr	r3, [pc, #412]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d50:	4963      	ldr	r1, [pc, #396]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d64:	4b5e      	ldr	r3, [pc, #376]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d72:	495b      	ldr	r1, [pc, #364]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d86:	4b56      	ldr	r3, [pc, #344]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d94:	4952      	ldr	r1, [pc, #328]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004da8:	4b4d      	ldr	r3, [pc, #308]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db6:	494a      	ldr	r1, [pc, #296]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dca:	4b45      	ldr	r3, [pc, #276]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd8:	4941      	ldr	r1, [pc, #260]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dec:	4b3c      	ldr	r3, [pc, #240]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004df2:	f023 0203 	bic.w	r2, r3, #3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dfa:	4939      	ldr	r1, [pc, #228]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d028      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e0e:	4b34      	ldr	r3, [pc, #208]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e14:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1c:	4930      	ldr	r1, [pc, #192]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e2c:	d106      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	4a2b      	ldr	r2, [pc, #172]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e38:	60d3      	str	r3, [r2, #12]
 8004e3a:	e011      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e44:	d10c      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f001 f81b 	bl	8005e88 <RCCEx_PLLSAI1_Config>
 8004e52:	4603      	mov	r3, r0
 8004e54:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e56:	7cfb      	ldrb	r3, [r7, #19]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004e5c:	7cfb      	ldrb	r3, [r7, #19]
 8004e5e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d04d      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e74:	d108      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004e76:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e7c:	4a18      	ldr	r2, [pc, #96]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e82:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004e86:	e012      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e88:	4b15      	ldr	r3, [pc, #84]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e8e:	4a14      	ldr	r2, [pc, #80]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e94:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004e98:	4b11      	ldr	r3, [pc, #68]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ea6:	490e      	ldr	r1, [pc, #56]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004eb6:	d106      	bne.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4a08      	ldr	r2, [pc, #32]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ebe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ec2:	60d3      	str	r3, [r2, #12]
 8004ec4:	e020      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ece:	d109      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ed0:	4b03      	ldr	r3, [pc, #12]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4a02      	ldr	r2, [pc, #8]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ed6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eda:	60d3      	str	r3, [r2, #12]
 8004edc:	e014      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004ede:	bf00      	nop
 8004ee0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ee8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004eec:	d10c      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 ffc7 	bl	8005e88 <RCCEx_PLLSAI1_Config>
 8004efa:	4603      	mov	r3, r0
 8004efc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004efe:	7cfb      	ldrb	r3, [r7, #19]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d028      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f14:	4b4a      	ldr	r3, [pc, #296]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f22:	4947      	ldr	r1, [pc, #284]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f32:	d106      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f34:	4b42      	ldr	r3, [pc, #264]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4a41      	ldr	r2, [pc, #260]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f3e:	60d3      	str	r3, [r2, #12]
 8004f40:	e011      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f4a:	d10c      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	2101      	movs	r1, #1
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 ff98 	bl	8005e88 <RCCEx_PLLSAI1_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f5c:	7cfb      	ldrb	r3, [r7, #19]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004f62:	7cfb      	ldrb	r3, [r7, #19]
 8004f64:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d01e      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f72:	4b33      	ldr	r3, [pc, #204]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f78:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f82:	492f      	ldr	r1, [pc, #188]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f94:	d10c      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	2102      	movs	r1, #2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 ff73 	bl	8005e88 <RCCEx_PLLSAI1_Config>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fa6:	7cfb      	ldrb	r3, [r7, #19]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004fac:	7cfb      	ldrb	r3, [r7, #19]
 8004fae:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00b      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fbc:	4b20      	ldr	r3, [pc, #128]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fc2:	f023 0204 	bic.w	r2, r3, #4
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fcc:	491c      	ldr	r1, [pc, #112]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00b      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004fe0:	4b17      	ldr	r3, [pc, #92]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fe6:	f023 0218 	bic.w	r2, r3, #24
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff0:	4913      	ldr	r1, [pc, #76]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d017      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005004:	4b0e      	ldr	r3, [pc, #56]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005006:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800500a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005014:	490a      	ldr	r1, [pc, #40]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005022:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005026:	d105      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005028:	4b05      	ldr	r3, [pc, #20]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4a04      	ldr	r2, [pc, #16]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800502e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005032:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005034:	7cbb      	ldrb	r3, [r7, #18]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40021000 	.word	0x40021000

08005044 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005056:	d13e      	bne.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005058:	4bb6      	ldr	r3, [pc, #728]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800505e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005062:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800506a:	d028      	beq.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005072:	f200 86f4 	bhi.w	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800507c:	d005      	beq.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005084:	d00e      	beq.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005086:	f000 beea 	b.w	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800508a:	4baa      	ldr	r3, [pc, #680]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800508c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b02      	cmp	r3, #2
 8005096:	f040 86e4 	bne.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800509a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800509e:	61fb      	str	r3, [r7, #28]
      break;
 80050a0:	f000 bedf 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80050a4:	4ba3      	ldr	r3, [pc, #652]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	f040 86d9 	bne.w	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80050b4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80050b8:	61fb      	str	r3, [r7, #28]
      break;
 80050ba:	f000 bed4 	b.w	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80050be:	4b9d      	ldr	r3, [pc, #628]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050ca:	f040 86ce 	bne.w	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 80050ce:	4b9a      	ldr	r3, [pc, #616]	@ (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80050d0:	61fb      	str	r3, [r7, #28]
      break;
 80050d2:	f000 beca 	b.w	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050d6:	4b97      	ldr	r3, [pc, #604]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d036      	beq.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d840      	bhi.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d003      	beq.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d020      	beq.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80050f8:	e039      	b.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80050fa:	4b8e      	ldr	r3, [pc, #568]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b02      	cmp	r3, #2
 8005104:	d116      	bne.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005106:	4b8b      	ldr	r3, [pc, #556]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005112:	4b88      	ldr	r3, [pc, #544]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	091b      	lsrs	r3, r3, #4
 8005118:	f003 030f 	and.w	r3, r3, #15
 800511c:	e005      	b.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800511e:	4b85      	ldr	r3, [pc, #532]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005120:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005124:	0a1b      	lsrs	r3, r3, #8
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	4a84      	ldr	r2, [pc, #528]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800512c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005130:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005132:	e01f      	b.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	61bb      	str	r3, [r7, #24]
      break;
 8005138:	e01c      	b.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800513a:	4b7e      	ldr	r3, [pc, #504]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005146:	d102      	bne.n	800514e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005148:	4b7d      	ldr	r3, [pc, #500]	@ (8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800514a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800514c:	e012      	b.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	61bb      	str	r3, [r7, #24]
      break;
 8005152:	e00f      	b.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005154:	4b77      	ldr	r3, [pc, #476]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005160:	d102      	bne.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005162:	4b78      	ldr	r3, [pc, #480]	@ (8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005164:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005166:	e005      	b.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	61bb      	str	r3, [r7, #24]
      break;
 800516c:	e002      	b.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	61bb      	str	r3, [r7, #24]
      break;
 8005172:	bf00      	nop
    }

    switch(PeriphClk)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800517a:	f000 8606 	beq.w	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005184:	f200 8673 	bhi.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800518e:	f000 8469 	beq.w	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005198:	f200 8669 	bhi.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051a2:	f000 8531 	beq.w	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051ac:	f200 865f 	bhi.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80051b6:	f000 8187 	beq.w	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80051c0:	f200 8655 	bhi.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051ca:	f000 80cd 	beq.w	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051d4:	f200 864b 	bhi.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051de:	f000 8430 	beq.w	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051e8:	f200 8641 	bhi.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051f2:	f000 83e4 	beq.w	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051fc:	f200 8637 	bhi.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005206:	f000 80af 	beq.w	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005210:	f200 862d 	bhi.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800521a:	f000 809d 	beq.w	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005224:	f200 8623 	bhi.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800522e:	f000 808b 	beq.w	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005238:	f200 8619 	bhi.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005242:	f000 8554 	beq.w	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800524c:	f200 860f 	bhi.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005256:	f000 8500 	beq.w	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005260:	f200 8605 	bhi.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800526a:	f000 84a1 	beq.w	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005274:	f200 85fb 	bhi.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b80      	cmp	r3, #128	@ 0x80
 800527c:	f000 846c 	beq.w	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b80      	cmp	r3, #128	@ 0x80
 8005284:	f200 85f3 	bhi.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b20      	cmp	r3, #32
 800528c:	d84c      	bhi.n	8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 85ec 	beq.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3b01      	subs	r3, #1
 800529a:	2b1f      	cmp	r3, #31
 800529c:	f200 85e7 	bhi.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80052a0:	a201      	add	r2, pc, #4	@ (adr r2, 80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80052a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a6:	bf00      	nop
 80052a8:	080056bd 	.word	0x080056bd
 80052ac:	0800572b 	.word	0x0800572b
 80052b0:	08005e6f 	.word	0x08005e6f
 80052b4:	080057bf 	.word	0x080057bf
 80052b8:	08005e6f 	.word	0x08005e6f
 80052bc:	08005e6f 	.word	0x08005e6f
 80052c0:	08005e6f 	.word	0x08005e6f
 80052c4:	08005837 	.word	0x08005837
 80052c8:	08005e6f 	.word	0x08005e6f
 80052cc:	08005e6f 	.word	0x08005e6f
 80052d0:	08005e6f 	.word	0x08005e6f
 80052d4:	08005e6f 	.word	0x08005e6f
 80052d8:	08005e6f 	.word	0x08005e6f
 80052dc:	08005e6f 	.word	0x08005e6f
 80052e0:	08005e6f 	.word	0x08005e6f
 80052e4:	080058bb 	.word	0x080058bb
 80052e8:	08005e6f 	.word	0x08005e6f
 80052ec:	08005e6f 	.word	0x08005e6f
 80052f0:	08005e6f 	.word	0x08005e6f
 80052f4:	08005e6f 	.word	0x08005e6f
 80052f8:	08005e6f 	.word	0x08005e6f
 80052fc:	08005e6f 	.word	0x08005e6f
 8005300:	08005e6f 	.word	0x08005e6f
 8005304:	08005e6f 	.word	0x08005e6f
 8005308:	08005e6f 	.word	0x08005e6f
 800530c:	08005e6f 	.word	0x08005e6f
 8005310:	08005e6f 	.word	0x08005e6f
 8005314:	08005e6f 	.word	0x08005e6f
 8005318:	08005e6f 	.word	0x08005e6f
 800531c:	08005e6f 	.word	0x08005e6f
 8005320:	08005e6f 	.word	0x08005e6f
 8005324:	0800593d 	.word	0x0800593d
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b40      	cmp	r3, #64	@ 0x40
 800532c:	f000 83e8 	beq.w	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005330:	f000 bd9d 	b.w	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005334:	40021000 	.word	0x40021000
 8005338:	0003d090 	.word	0x0003d090
 800533c:	08008f08 	.word	0x08008f08
 8005340:	00f42400 	.word	0x00f42400
 8005344:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005348:	69b9      	ldr	r1, [r7, #24]
 800534a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800534e:	f000 ff83 	bl	8006258 <RCCEx_GetSAIxPeriphCLKFreq>
 8005352:	61f8      	str	r0, [r7, #28]
      break;
 8005354:	f000 bd8e 	b.w	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005358:	69b9      	ldr	r1, [r7, #24]
 800535a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800535e:	f000 ff7b 	bl	8006258 <RCCEx_GetSAIxPeriphCLKFreq>
 8005362:	61f8      	str	r0, [r7, #28]
      break;
 8005364:	f000 bd86 	b.w	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005368:	4b9a      	ldr	r3, [pc, #616]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800537a:	d015      	beq.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005382:	f200 8092 	bhi.w	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800538c:	d029      	beq.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005394:	f200 8089 	bhi.w	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d07b      	beq.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053a4:	d04a      	beq.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 80053a6:	e080      	b.n	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80053a8:	4b8a      	ldr	r3, [pc, #552]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d17d      	bne.n	80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80053b4:	4b87      	ldr	r3, [pc, #540]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80053c0:	4b84      	ldr	r3, [pc, #528]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	091b      	lsrs	r3, r3, #4
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	e005      	b.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80053cc:	4b81      	ldr	r3, [pc, #516]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053d2:	0a1b      	lsrs	r3, r3, #8
 80053d4:	f003 030f 	and.w	r3, r3, #15
 80053d8:	4a7f      	ldr	r2, [pc, #508]	@ (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80053da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053de:	61fb      	str	r3, [r7, #28]
          break;
 80053e0:	e066      	b.n	80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80053e2:	4b7c      	ldr	r3, [pc, #496]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053ee:	d162      	bne.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80053f0:	4b78      	ldr	r3, [pc, #480]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053fc:	d15b      	bne.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80053fe:	4b75      	ldr	r3, [pc, #468]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	0a1b      	lsrs	r3, r3, #8
 8005404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005408:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	fb03 f202 	mul.w	r2, r3, r2
 8005412:	4b70      	ldr	r3, [pc, #448]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	091b      	lsrs	r3, r3, #4
 8005418:	f003 030f 	and.w	r3, r3, #15
 800541c:	3301      	adds	r3, #1
 800541e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005422:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005424:	4b6b      	ldr	r3, [pc, #428]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	0d5b      	lsrs	r3, r3, #21
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	3301      	adds	r3, #1
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	fbb2 f3f3 	udiv	r3, r2, r3
 8005438:	61fb      	str	r3, [r7, #28]
          break;
 800543a:	e03c      	b.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800543c:	4b65      	ldr	r3, [pc, #404]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005444:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005448:	d138      	bne.n	80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800544a:	4b62      	ldr	r3, [pc, #392]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005456:	d131      	bne.n	80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005458:	4b5e      	ldr	r3, [pc, #376]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	0a1b      	lsrs	r3, r3, #8
 800545e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005462:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	fb03 f202 	mul.w	r2, r3, r2
 800546c:	4b59      	ldr	r3, [pc, #356]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	091b      	lsrs	r3, r3, #4
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	3301      	adds	r3, #1
 8005478:	fbb2 f3f3 	udiv	r3, r2, r3
 800547c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800547e:	4b55      	ldr	r3, [pc, #340]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	0d5b      	lsrs	r3, r3, #21
 8005484:	f003 0303 	and.w	r3, r3, #3
 8005488:	3301      	adds	r3, #1
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005492:	61fb      	str	r3, [r7, #28]
          break;
 8005494:	e012      	b.n	80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005496:	4b4f      	ldr	r3, [pc, #316]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005498:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d10e      	bne.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 80054a4:	4b4d      	ldr	r3, [pc, #308]	@ (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80054a6:	61fb      	str	r3, [r7, #28]
          break;
 80054a8:	e00b      	b.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80054aa:	bf00      	nop
 80054ac:	f000 bce2 	b.w	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054b0:	bf00      	nop
 80054b2:	f000 bcdf 	b.w	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054b6:	bf00      	nop
 80054b8:	f000 bcdc 	b.w	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054bc:	bf00      	nop
 80054be:	f000 bcd9 	b.w	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054c2:	bf00      	nop
        break;
 80054c4:	f000 bcd6 	b.w	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80054c8:	4b42      	ldr	r3, [pc, #264]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054d6:	d13d      	bne.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80054d8:	4b3e      	ldr	r3, [pc, #248]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054e4:	f040 84c5 	bne.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80054e8:	4b3a      	ldr	r3, [pc, #232]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054f4:	f040 84bd 	bne.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80054f8:	4b36      	ldr	r3, [pc, #216]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	0a1b      	lsrs	r3, r3, #8
 80054fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005502:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	fb03 f202 	mul.w	r2, r3, r2
 800550c:	4b31      	ldr	r3, [pc, #196]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	3301      	adds	r3, #1
 8005518:	fbb2 f3f3 	udiv	r3, r2, r3
 800551c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800551e:	4b2d      	ldr	r3, [pc, #180]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	0edb      	lsrs	r3, r3, #27
 8005524:	f003 031f 	and.w	r3, r3, #31
 8005528:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005530:	4b28      	ldr	r3, [pc, #160]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800553c:	2311      	movs	r3, #17
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	e001      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8005542:	2307      	movs	r3, #7
 8005544:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	fbb2 f3f3 	udiv	r3, r2, r3
 800554e:	61fb      	str	r3, [r7, #28]
      break;
 8005550:	f000 bc8f 	b.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005554:	4b1f      	ldr	r3, [pc, #124]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800555a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005566:	d016      	beq.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800556e:	f200 809b 	bhi.w	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005578:	d032      	beq.n	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005580:	f200 8092 	bhi.w	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 8084 	beq.w	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005592:	d052      	beq.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8005594:	e088      	b.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005596:	4b0f      	ldr	r3, [pc, #60]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b02      	cmp	r3, #2
 80055a0:	f040 8084 	bne.w	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80055a4:	4b0b      	ldr	r3, [pc, #44]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80055b0:	4b08      	ldr	r3, [pc, #32]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	091b      	lsrs	r3, r3, #4
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	e005      	b.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 80055bc:	4b05      	ldr	r3, [pc, #20]	@ (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80055be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055c2:	0a1b      	lsrs	r3, r3, #8
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	4a03      	ldr	r2, [pc, #12]	@ (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80055ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ce:	61fb      	str	r3, [r7, #28]
          break;
 80055d0:	e06c      	b.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80055d2:	bf00      	nop
 80055d4:	40021000 	.word	0x40021000
 80055d8:	08008f08 	.word	0x08008f08
 80055dc:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80055e0:	4ba5      	ldr	r3, [pc, #660]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055ec:	d160      	bne.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80055ee:	4ba2      	ldr	r3, [pc, #648]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055fa:	d159      	bne.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80055fc:	4b9e      	ldr	r3, [pc, #632]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	0a1b      	lsrs	r3, r3, #8
 8005602:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005606:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	fb03 f202 	mul.w	r2, r3, r2
 8005610:	4b99      	ldr	r3, [pc, #612]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	091b      	lsrs	r3, r3, #4
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	3301      	adds	r3, #1
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005622:	4b95      	ldr	r3, [pc, #596]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	0d5b      	lsrs	r3, r3, #21
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	3301      	adds	r3, #1
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	fbb2 f3f3 	udiv	r3, r2, r3
 8005636:	61fb      	str	r3, [r7, #28]
          break;
 8005638:	e03a      	b.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800563a:	4b8f      	ldr	r3, [pc, #572]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005642:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005646:	d135      	bne.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005648:	4b8b      	ldr	r3, [pc, #556]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005650:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005654:	d12e      	bne.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005656:	4b88      	ldr	r3, [pc, #544]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	0a1b      	lsrs	r3, r3, #8
 800565c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005660:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	fb03 f202 	mul.w	r2, r3, r2
 800566a:	4b83      	ldr	r3, [pc, #524]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	091b      	lsrs	r3, r3, #4
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	3301      	adds	r3, #1
 8005676:	fbb2 f3f3 	udiv	r3, r2, r3
 800567a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800567c:	4b7e      	ldr	r3, [pc, #504]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	0d5b      	lsrs	r3, r3, #21
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	3301      	adds	r3, #1
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005690:	61fb      	str	r3, [r7, #28]
          break;
 8005692:	e00f      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005694:	4b78      	ldr	r3, [pc, #480]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005696:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d10a      	bne.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 80056a2:	4b76      	ldr	r3, [pc, #472]	@ (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80056a4:	61fb      	str	r3, [r7, #28]
          break;
 80056a6:	e007      	b.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 80056a8:	bf00      	nop
 80056aa:	e3e2      	b.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80056ac:	bf00      	nop
 80056ae:	e3e0      	b.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80056b0:	bf00      	nop
 80056b2:	e3de      	b.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80056b4:	bf00      	nop
 80056b6:	e3dc      	b.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80056b8:	bf00      	nop
      break;
 80056ba:	e3da      	b.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80056bc:	4b6e      	ldr	r3, [pc, #440]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80056be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d827      	bhi.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80056ce:	a201      	add	r2, pc, #4	@ (adr r2, 80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 80056d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d4:	080056e5 	.word	0x080056e5
 80056d8:	080056ed 	.word	0x080056ed
 80056dc:	080056f5 	.word	0x080056f5
 80056e0:	08005709 	.word	0x08005709
          frequency = HAL_RCC_GetPCLK2Freq();
 80056e4:	f7ff f8a8 	bl	8004838 <HAL_RCC_GetPCLK2Freq>
 80056e8:	61f8      	str	r0, [r7, #28]
          break;
 80056ea:	e01d      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80056ec:	f7fe fff6 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 80056f0:	61f8      	str	r0, [r7, #28]
          break;
 80056f2:	e019      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056f4:	4b60      	ldr	r3, [pc, #384]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005700:	d10f      	bne.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8005702:	4b5f      	ldr	r3, [pc, #380]	@ (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005704:	61fb      	str	r3, [r7, #28]
          break;
 8005706:	e00c      	b.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005708:	4b5b      	ldr	r3, [pc, #364]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800570a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b02      	cmp	r3, #2
 8005714:	d107      	bne.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8005716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800571a:	61fb      	str	r3, [r7, #28]
          break;
 800571c:	e003      	b.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800571e:	bf00      	nop
 8005720:	e3a8      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005722:	bf00      	nop
 8005724:	e3a6      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005726:	bf00      	nop
        break;
 8005728:	e3a4      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800572a:	4b53      	ldr	r3, [pc, #332]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005730:	f003 030c 	and.w	r3, r3, #12
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b0c      	cmp	r3, #12
 800573a:	d83a      	bhi.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800573c:	a201      	add	r2, pc, #4	@ (adr r2, 8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800573e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005742:	bf00      	nop
 8005744:	08005779 	.word	0x08005779
 8005748:	080057b3 	.word	0x080057b3
 800574c:	080057b3 	.word	0x080057b3
 8005750:	080057b3 	.word	0x080057b3
 8005754:	08005781 	.word	0x08005781
 8005758:	080057b3 	.word	0x080057b3
 800575c:	080057b3 	.word	0x080057b3
 8005760:	080057b3 	.word	0x080057b3
 8005764:	08005789 	.word	0x08005789
 8005768:	080057b3 	.word	0x080057b3
 800576c:	080057b3 	.word	0x080057b3
 8005770:	080057b3 	.word	0x080057b3
 8005774:	0800579d 	.word	0x0800579d
          frequency = HAL_RCC_GetPCLK1Freq();
 8005778:	f7ff f848 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 800577c:	61f8      	str	r0, [r7, #28]
          break;
 800577e:	e01d      	b.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8005780:	f7fe ffac 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 8005784:	61f8      	str	r0, [r7, #28]
          break;
 8005786:	e019      	b.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005788:	4b3b      	ldr	r3, [pc, #236]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005794:	d10f      	bne.n	80057b6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8005796:	4b3a      	ldr	r3, [pc, #232]	@ (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005798:	61fb      	str	r3, [r7, #28]
          break;
 800579a:	e00c      	b.n	80057b6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800579c:	4b36      	ldr	r3, [pc, #216]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d107      	bne.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 80057aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057ae:	61fb      	str	r3, [r7, #28]
          break;
 80057b0:	e003      	b.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 80057b2:	bf00      	nop
 80057b4:	e35e      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80057b6:	bf00      	nop
 80057b8:	e35c      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80057ba:	bf00      	nop
        break;
 80057bc:	e35a      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80057be:	4b2e      	ldr	r3, [pc, #184]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80057c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b30      	cmp	r3, #48	@ 0x30
 80057ce:	d021      	beq.n	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b30      	cmp	r3, #48	@ 0x30
 80057d4:	d829      	bhi.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d011      	beq.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d823      	bhi.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b10      	cmp	r3, #16
 80057ec:	d004      	beq.n	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 80057ee:	e01c      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80057f0:	f7ff f80c 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 80057f4:	61f8      	str	r0, [r7, #28]
          break;
 80057f6:	e01d      	b.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80057f8:	f7fe ff70 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 80057fc:	61f8      	str	r0, [r7, #28]
          break;
 80057fe:	e019      	b.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005800:	4b1d      	ldr	r3, [pc, #116]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005808:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800580c:	d10f      	bne.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800580e:	4b1c      	ldr	r3, [pc, #112]	@ (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005810:	61fb      	str	r3, [r7, #28]
          break;
 8005812:	e00c      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005814:	4b18      	ldr	r3, [pc, #96]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b02      	cmp	r3, #2
 8005820:	d107      	bne.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8005822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005826:	61fb      	str	r3, [r7, #28]
          break;
 8005828:	e003      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800582a:	bf00      	nop
 800582c:	e322      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800582e:	bf00      	nop
 8005830:	e320      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005832:	bf00      	nop
        break;
 8005834:	e31e      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005836:	4b10      	ldr	r3, [pc, #64]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800583c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2bc0      	cmp	r3, #192	@ 0xc0
 8005846:	d027      	beq.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2bc0      	cmp	r3, #192	@ 0xc0
 800584c:	d82f      	bhi.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b80      	cmp	r3, #128	@ 0x80
 8005852:	d017      	beq.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b80      	cmp	r3, #128	@ 0x80
 8005858:	d829      	bhi.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b40      	cmp	r3, #64	@ 0x40
 8005864:	d004      	beq.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8005866:	e022      	b.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005868:	f7fe ffd0 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 800586c:	61f8      	str	r0, [r7, #28]
          break;
 800586e:	e023      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8005870:	f7fe ff34 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 8005874:	61f8      	str	r0, [r7, #28]
          break;
 8005876:	e01f      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8005878:	40021000 	.word	0x40021000
 800587c:	02dc6c00 	.word	0x02dc6c00
 8005880:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005884:	4b9b      	ldr	r3, [pc, #620]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800588c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005890:	d10f      	bne.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8005892:	4b99      	ldr	r3, [pc, #612]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005894:	61fb      	str	r3, [r7, #28]
          break;
 8005896:	e00c      	b.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005898:	4b96      	ldr	r3, [pc, #600]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800589a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d107      	bne.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 80058a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058aa:	61fb      	str	r3, [r7, #28]
          break;
 80058ac:	e003      	b.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 80058ae:	bf00      	nop
 80058b0:	e2e0      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80058b2:	bf00      	nop
 80058b4:	e2de      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80058b6:	bf00      	nop
        break;
 80058b8:	e2dc      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80058ba:	4b8e      	ldr	r3, [pc, #568]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80058bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058cc:	d025      	beq.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058d4:	d82c      	bhi.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058dc:	d013      	beq.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058e4:	d824      	bhi.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d004      	beq.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058f2:	d004      	beq.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 80058f4:	e01c      	b.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058f6:	f7fe ff89 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 80058fa:	61f8      	str	r0, [r7, #28]
          break;
 80058fc:	e01d      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80058fe:	f7fe feed 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 8005902:	61f8      	str	r0, [r7, #28]
          break;
 8005904:	e019      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005906:	4b7b      	ldr	r3, [pc, #492]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800590e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005912:	d10f      	bne.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8005914:	4b78      	ldr	r3, [pc, #480]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005916:	61fb      	str	r3, [r7, #28]
          break;
 8005918:	e00c      	b.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800591a:	4b76      	ldr	r3, [pc, #472]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800591c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b02      	cmp	r3, #2
 8005926:	d107      	bne.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8005928:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800592c:	61fb      	str	r3, [r7, #28]
          break;
 800592e:	e003      	b.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8005930:	bf00      	nop
 8005932:	e29f      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005934:	bf00      	nop
 8005936:	e29d      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005938:	bf00      	nop
        break;
 800593a:	e29b      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800593c:	4b6d      	ldr	r3, [pc, #436]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800593e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005942:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800594e:	d025      	beq.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005956:	d82c      	bhi.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800595e:	d013      	beq.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005966:	d824      	bhi.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d004      	beq.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005974:	d004      	beq.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8005976:	e01c      	b.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005978:	f7fe ff48 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 800597c:	61f8      	str	r0, [r7, #28]
          break;
 800597e:	e01d      	b.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8005980:	f7fe feac 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 8005984:	61f8      	str	r0, [r7, #28]
          break;
 8005986:	e019      	b.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005988:	4b5a      	ldr	r3, [pc, #360]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005994:	d10f      	bne.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8005996:	4b58      	ldr	r3, [pc, #352]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005998:	61fb      	str	r3, [r7, #28]
          break;
 800599a:	e00c      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800599c:	4b55      	ldr	r3, [pc, #340]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800599e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d107      	bne.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 80059aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059ae:	61fb      	str	r3, [r7, #28]
          break;
 80059b0:	e003      	b.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 80059b2:	bf00      	nop
 80059b4:	e25e      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80059b6:	bf00      	nop
 80059b8:	e25c      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80059ba:	bf00      	nop
        break;
 80059bc:	e25a      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80059be:	4b4d      	ldr	r3, [pc, #308]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059d0:	d007      	beq.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059d8:	d12f      	bne.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80059da:	f7fe fe7f 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 80059de:	61f8      	str	r0, [r7, #28]
          break;
 80059e0:	e02e      	b.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80059e2:	4b44      	ldr	r3, [pc, #272]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059ee:	d126      	bne.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80059f0:	4b40      	ldr	r3, [pc, #256]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d020      	beq.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80059fc:	4b3d      	ldr	r3, [pc, #244]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	0a1b      	lsrs	r3, r3, #8
 8005a02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a06:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	fb03 f202 	mul.w	r2, r3, r2
 8005a10:	4b38      	ldr	r3, [pc, #224]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	091b      	lsrs	r3, r3, #4
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a20:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005a22:	4b34      	ldr	r3, [pc, #208]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	0e5b      	lsrs	r3, r3, #25
 8005a28:	f003 0303 	and.w	r3, r3, #3
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a36:	61fb      	str	r3, [r7, #28]
          break;
 8005a38:	e001      	b.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8005a3a:	bf00      	nop
 8005a3c:	e21a      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a3e:	bf00      	nop
        break;
 8005a40:	e218      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005a42:	4b2c      	ldr	r3, [pc, #176]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d103      	bne.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005a54:	f7fe fef0 	bl	8004838 <HAL_RCC_GetPCLK2Freq>
 8005a58:	61f8      	str	r0, [r7, #28]
        break;
 8005a5a:	e20b      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a5c:	f7fe fe3e 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 8005a60:	61f8      	str	r0, [r7, #28]
        break;
 8005a62:	e207      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005a64:	4b23      	ldr	r3, [pc, #140]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a6a:	f003 0318 	and.w	r3, r3, #24
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b10      	cmp	r3, #16
 8005a74:	d010      	beq.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b10      	cmp	r3, #16
 8005a7a:	d834      	bhi.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d024      	beq.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8005a88:	e02d      	b.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005a8a:	69b9      	ldr	r1, [r7, #24]
 8005a8c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005a90:	f000 fbe2 	bl	8006258 <RCCEx_GetSAIxPeriphCLKFreq>
 8005a94:	61f8      	str	r0, [r7, #28]
          break;
 8005a96:	e02b      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005a98:	4b16      	ldr	r3, [pc, #88]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d122      	bne.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005aa4:	4b13      	ldr	r3, [pc, #76]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005ab0:	4b10      	ldr	r3, [pc, #64]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	091b      	lsrs	r3, r3, #4
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	e005      	b.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8005abc:	4b0d      	ldr	r3, [pc, #52]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ac2:	0a1b      	lsrs	r3, r3, #8
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ace:	61fb      	str	r3, [r7, #28]
          break;
 8005ad0:	e00b      	b.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ad2:	4b08      	ldr	r3, [pc, #32]	@ (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ade:	d106      	bne.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8005ae0:	4b05      	ldr	r3, [pc, #20]	@ (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005ae2:	61fb      	str	r3, [r7, #28]
          break;
 8005ae4:	e003      	b.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8005ae6:	bf00      	nop
 8005ae8:	e1c4      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005aea:	bf00      	nop
 8005aec:	e1c2      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005aee:	bf00      	nop
        break;
 8005af0:	e1c0      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8005af2:	bf00      	nop
 8005af4:	40021000 	.word	0x40021000
 8005af8:	00f42400 	.word	0x00f42400
 8005afc:	08008f08 	.word	0x08008f08
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005b00:	4b96      	ldr	r3, [pc, #600]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b06:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b12:	d013      	beq.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b1a:	d819      	bhi.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d004      	beq.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b28:	d004      	beq.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8005b2a:	e011      	b.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b2c:	f7fe fe6e 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 8005b30:	61f8      	str	r0, [r7, #28]
          break;
 8005b32:	e010      	b.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b34:	f7fe fdd2 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 8005b38:	61f8      	str	r0, [r7, #28]
          break;
 8005b3a:	e00c      	b.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b3c:	4b87      	ldr	r3, [pc, #540]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b48:	d104      	bne.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8005b4a:	4b85      	ldr	r3, [pc, #532]	@ (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005b4c:	61fb      	str	r3, [r7, #28]
          break;
 8005b4e:	e001      	b.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8005b50:	bf00      	nop
 8005b52:	e18f      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005b54:	bf00      	nop
        break;
 8005b56:	e18d      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005b58:	4b80      	ldr	r3, [pc, #512]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b6a:	d013      	beq.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b72:	d819      	bhi.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d004      	beq.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b80:	d004      	beq.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8005b82:	e011      	b.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b84:	f7fe fe42 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 8005b88:	61f8      	str	r0, [r7, #28]
          break;
 8005b8a:	e010      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b8c:	f7fe fda6 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 8005b90:	61f8      	str	r0, [r7, #28]
          break;
 8005b92:	e00c      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b94:	4b71      	ldr	r3, [pc, #452]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ba0:	d104      	bne.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8005ba2:	4b6f      	ldr	r3, [pc, #444]	@ (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005ba4:	61fb      	str	r3, [r7, #28]
          break;
 8005ba6:	e001      	b.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8005ba8:	bf00      	nop
 8005baa:	e163      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005bac:	bf00      	nop
        break;
 8005bae:	e161      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005bb0:	4b6a      	ldr	r3, [pc, #424]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bc2:	d013      	beq.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bca:	d819      	bhi.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d004      	beq.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bd8:	d004      	beq.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8005bda:	e011      	b.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bdc:	f7fe fe16 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 8005be0:	61f8      	str	r0, [r7, #28]
          break;
 8005be2:	e010      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005be4:	f7fe fd7a 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 8005be8:	61f8      	str	r0, [r7, #28]
          break;
 8005bea:	e00c      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bec:	4b5b      	ldr	r3, [pc, #364]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bf8:	d104      	bne.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8005bfa:	4b59      	ldr	r3, [pc, #356]	@ (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005bfc:	61fb      	str	r3, [r7, #28]
          break;
 8005bfe:	e001      	b.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8005c00:	bf00      	nop
 8005c02:	e137      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c04:	bf00      	nop
        break;
 8005c06:	e135      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005c08:	4b54      	ldr	r3, [pc, #336]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d011      	beq.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d818      	bhi.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d004      	beq.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8005c2c:	e011      	b.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c2e:	f7fe fded 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 8005c32:	61f8      	str	r0, [r7, #28]
          break;
 8005c34:	e010      	b.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c36:	f7fe fd51 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 8005c3a:	61f8      	str	r0, [r7, #28]
          break;
 8005c3c:	e00c      	b.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c3e:	4b47      	ldr	r3, [pc, #284]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c4a:	d104      	bne.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8005c4c:	4b44      	ldr	r3, [pc, #272]	@ (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005c4e:	61fb      	str	r3, [r7, #28]
          break;
 8005c50:	e001      	b.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8005c52:	bf00      	nop
 8005c54:	e10e      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c56:	bf00      	nop
        break;
 8005c58:	e10c      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005c5a:	4b40      	ldr	r3, [pc, #256]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c60:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c6c:	d02c      	beq.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c74:	d833      	bhi.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c7c:	d01a      	beq.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c84:	d82b      	bhi.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d004      	beq.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c92:	d004      	beq.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8005c94:	e023      	b.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c96:	f7fe fdb9 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 8005c9a:	61f8      	str	r0, [r7, #28]
          break;
 8005c9c:	e026      	b.n	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d11a      	bne.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8005cac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005cb0:	61fb      	str	r3, [r7, #28]
          break;
 8005cb2:	e016      	b.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cb4:	4b29      	ldr	r3, [pc, #164]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cc0:	d111      	bne.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8005cc2:	4b27      	ldr	r3, [pc, #156]	@ (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005cc4:	61fb      	str	r3, [r7, #28]
          break;
 8005cc6:	e00e      	b.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005cc8:	4b24      	ldr	r3, [pc, #144]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d109      	bne.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8005cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cda:	61fb      	str	r3, [r7, #28]
          break;
 8005cdc:	e005      	b.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8005cde:	bf00      	nop
 8005ce0:	e0c8      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ce2:	bf00      	nop
 8005ce4:	e0c6      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ce6:	bf00      	nop
 8005ce8:	e0c4      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005cea:	bf00      	nop
        break;
 8005cec:	e0c2      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005cee:	4b1b      	ldr	r3, [pc, #108]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d00:	d030      	beq.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d08:	d837      	bhi.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d10:	d01a      	beq.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d18:	d82f      	bhi.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d004      	beq.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d26:	d004      	beq.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8005d28:	e027      	b.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d2a:	f7fe fd6f 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 8005d2e:	61f8      	str	r0, [r7, #28]
          break;
 8005d30:	e02a      	b.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005d32:	4b0a      	ldr	r3, [pc, #40]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d11e      	bne.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8005d40:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005d44:	61fb      	str	r3, [r7, #28]
          break;
 8005d46:	e01a      	b.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d48:	4b04      	ldr	r3, [pc, #16]	@ (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d54:	d115      	bne.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8005d56:	4b02      	ldr	r3, [pc, #8]	@ (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005d58:	61fb      	str	r3, [r7, #28]
          break;
 8005d5a:	e012      	b.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005d5c:	40021000 	.word	0x40021000
 8005d60:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d64:	4b46      	ldr	r3, [pc, #280]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d109      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8005d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d76:	61fb      	str	r3, [r7, #28]
          break;
 8005d78:	e005      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8005d7a:	bf00      	nop
 8005d7c:	e07a      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d7e:	bf00      	nop
 8005d80:	e078      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d82:	bf00      	nop
 8005d84:	e076      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d86:	bf00      	nop
        break;
 8005d88:	e074      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005d8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d90:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d9c:	d02c      	beq.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005da4:	d855      	bhi.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005db2:	d004      	beq.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8005db4:	e04d      	b.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005db6:	f7fe fc91 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 8005dba:	61f8      	str	r0, [r7, #28]
          break;
 8005dbc:	e04e      	b.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005dbe:	4b30      	ldr	r3, [pc, #192]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d145      	bne.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005dca:	4b2d      	ldr	r3, [pc, #180]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8005dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	091b      	lsrs	r3, r3, #4
 8005ddc:	f003 030f 	and.w	r3, r3, #15
 8005de0:	e005      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8005de2:	4b27      	ldr	r3, [pc, #156]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005de8:	0a1b      	lsrs	r3, r3, #8
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	4a25      	ldr	r2, [pc, #148]	@ (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8005df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df4:	61fb      	str	r3, [r7, #28]
          break;
 8005df6:	e02e      	b.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005df8:	4b21      	ldr	r3, [pc, #132]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e04:	d129      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005e06:	4b1e      	ldr	r3, [pc, #120]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e12:	d122      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005e14:	4b1a      	ldr	r3, [pc, #104]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	0a1b      	lsrs	r3, r3, #8
 8005e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e1e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	fb03 f202 	mul.w	r2, r3, r2
 8005e28:	4b15      	ldr	r3, [pc, #84]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	091b      	lsrs	r3, r3, #4
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	3301      	adds	r3, #1
 8005e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e38:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005e3a:	4b11      	ldr	r3, [pc, #68]	@ (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	0d5b      	lsrs	r3, r3, #21
 8005e40:	f003 0303 	and.w	r3, r3, #3
 8005e44:	3301      	adds	r3, #1
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4e:	61fb      	str	r3, [r7, #28]
          break;
 8005e50:	e003      	b.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8005e52:	bf00      	nop
 8005e54:	e00e      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e56:	bf00      	nop
 8005e58:	e00c      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e5a:	bf00      	nop
        break;
 8005e5c:	e00a      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005e5e:	bf00      	nop
 8005e60:	e008      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005e62:	bf00      	nop
 8005e64:	e006      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005e66:	bf00      	nop
 8005e68:	e004      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005e6a:	bf00      	nop
 8005e6c:	e002      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005e6e:	bf00      	nop
 8005e70:	e000      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005e72:	bf00      	nop
    }
  }

  return(frequency);
 8005e74:	69fb      	ldr	r3, [r7, #28]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3720      	adds	r7, #32
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	40021000 	.word	0x40021000
 8005e84:	08008f08 	.word	0x08008f08

08005e88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e96:	4b72      	ldr	r3, [pc, #456]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00e      	beq.n	8005ec0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ea2:	4b6f      	ldr	r3, [pc, #444]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f003 0203 	and.w	r2, r3, #3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d103      	bne.n	8005eba <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
       ||
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d142      	bne.n	8005f40 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	73fb      	strb	r3, [r7, #15]
 8005ebe:	e03f      	b.n	8005f40 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d018      	beq.n	8005efa <RCCEx_PLLSAI1_Config+0x72>
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d825      	bhi.n	8005f18 <RCCEx_PLLSAI1_Config+0x90>
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d002      	beq.n	8005ed6 <RCCEx_PLLSAI1_Config+0x4e>
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d009      	beq.n	8005ee8 <RCCEx_PLLSAI1_Config+0x60>
 8005ed4:	e020      	b.n	8005f18 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ed6:	4b62      	ldr	r3, [pc, #392]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d11d      	bne.n	8005f1e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ee6:	e01a      	b.n	8005f1e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ee8:	4b5d      	ldr	r3, [pc, #372]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d116      	bne.n	8005f22 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ef8:	e013      	b.n	8005f22 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005efa:	4b59      	ldr	r3, [pc, #356]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10f      	bne.n	8005f26 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f06:	4b56      	ldr	r3, [pc, #344]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d109      	bne.n	8005f26 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f16:	e006      	b.n	8005f26 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f1c:	e004      	b.n	8005f28 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f1e:	bf00      	nop
 8005f20:	e002      	b.n	8005f28 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f22:	bf00      	nop
 8005f24:	e000      	b.n	8005f28 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f26:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d108      	bne.n	8005f40 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005f2e:	4b4c      	ldr	r3, [pc, #304]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f023 0203 	bic.w	r2, r3, #3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4949      	ldr	r1, [pc, #292]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f040 8086 	bne.w	8006054 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f48:	4b45      	ldr	r3, [pc, #276]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a44      	ldr	r2, [pc, #272]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f54:	f7fc f9a6 	bl	80022a4 <HAL_GetTick>
 8005f58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f5a:	e009      	b.n	8005f70 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f5c:	f7fc f9a2 	bl	80022a4 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d902      	bls.n	8005f70 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	73fb      	strb	r3, [r7, #15]
        break;
 8005f6e:	e005      	b.n	8005f7c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f70:	4b3b      	ldr	r3, [pc, #236]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1ef      	bne.n	8005f5c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d168      	bne.n	8006054 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d113      	bne.n	8005fb0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f88:	4b35      	ldr	r3, [pc, #212]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	4b35      	ldr	r3, [pc, #212]	@ (8006064 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f8e:	4013      	ands	r3, r2
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	6892      	ldr	r2, [r2, #8]
 8005f94:	0211      	lsls	r1, r2, #8
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	68d2      	ldr	r2, [r2, #12]
 8005f9a:	06d2      	lsls	r2, r2, #27
 8005f9c:	4311      	orrs	r1, r2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6852      	ldr	r2, [r2, #4]
 8005fa2:	3a01      	subs	r2, #1
 8005fa4:	0112      	lsls	r2, r2, #4
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	492d      	ldr	r1, [pc, #180]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	610b      	str	r3, [r1, #16]
 8005fae:	e02d      	b.n	800600c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d115      	bne.n	8005fe2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fb8:	691a      	ldr	r2, [r3, #16]
 8005fba:	4b2b      	ldr	r3, [pc, #172]	@ (8006068 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6892      	ldr	r2, [r2, #8]
 8005fc2:	0211      	lsls	r1, r2, #8
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6912      	ldr	r2, [r2, #16]
 8005fc8:	0852      	lsrs	r2, r2, #1
 8005fca:	3a01      	subs	r2, #1
 8005fcc:	0552      	lsls	r2, r2, #21
 8005fce:	4311      	orrs	r1, r2
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6852      	ldr	r2, [r2, #4]
 8005fd4:	3a01      	subs	r2, #1
 8005fd6:	0112      	lsls	r2, r2, #4
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	4921      	ldr	r1, [pc, #132]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	610b      	str	r3, [r1, #16]
 8005fe0:	e014      	b.n	800600c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fe4:	691a      	ldr	r2, [r3, #16]
 8005fe6:	4b21      	ldr	r3, [pc, #132]	@ (800606c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fe8:	4013      	ands	r3, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	6892      	ldr	r2, [r2, #8]
 8005fee:	0211      	lsls	r1, r2, #8
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6952      	ldr	r2, [r2, #20]
 8005ff4:	0852      	lsrs	r2, r2, #1
 8005ff6:	3a01      	subs	r2, #1
 8005ff8:	0652      	lsls	r2, r2, #25
 8005ffa:	4311      	orrs	r1, r2
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6852      	ldr	r2, [r2, #4]
 8006000:	3a01      	subs	r2, #1
 8006002:	0112      	lsls	r2, r2, #4
 8006004:	430a      	orrs	r2, r1
 8006006:	4916      	ldr	r1, [pc, #88]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006008:	4313      	orrs	r3, r2
 800600a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800600c:	4b14      	ldr	r3, [pc, #80]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a13      	ldr	r2, [pc, #76]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006012:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006016:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006018:	f7fc f944 	bl	80022a4 <HAL_GetTick>
 800601c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800601e:	e009      	b.n	8006034 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006020:	f7fc f940 	bl	80022a4 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d902      	bls.n	8006034 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	73fb      	strb	r3, [r7, #15]
          break;
 8006032:	e005      	b.n	8006040 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006034:	4b0a      	ldr	r3, [pc, #40]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0ef      	beq.n	8006020 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d106      	bne.n	8006054 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006046:	4b06      	ldr	r3, [pc, #24]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006048:	691a      	ldr	r2, [r3, #16]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	4904      	ldr	r1, [pc, #16]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006050:	4313      	orrs	r3, r2
 8006052:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	40021000 	.word	0x40021000
 8006064:	07ff800f 	.word	0x07ff800f
 8006068:	ff9f800f 	.word	0xff9f800f
 800606c:	f9ff800f 	.word	0xf9ff800f

08006070 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800607e:	4b72      	ldr	r3, [pc, #456]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00e      	beq.n	80060a8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800608a:	4b6f      	ldr	r3, [pc, #444]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 0203 	and.w	r2, r3, #3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d103      	bne.n	80060a2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
       ||
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d142      	bne.n	8006128 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	73fb      	strb	r3, [r7, #15]
 80060a6:	e03f      	b.n	8006128 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	d018      	beq.n	80060e2 <RCCEx_PLLSAI2_Config+0x72>
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d825      	bhi.n	8006100 <RCCEx_PLLSAI2_Config+0x90>
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d002      	beq.n	80060be <RCCEx_PLLSAI2_Config+0x4e>
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d009      	beq.n	80060d0 <RCCEx_PLLSAI2_Config+0x60>
 80060bc:	e020      	b.n	8006100 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060be:	4b62      	ldr	r3, [pc, #392]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d11d      	bne.n	8006106 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060ce:	e01a      	b.n	8006106 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060d0:	4b5d      	ldr	r3, [pc, #372]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d116      	bne.n	800610a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060e0:	e013      	b.n	800610a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060e2:	4b59      	ldr	r3, [pc, #356]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10f      	bne.n	800610e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060ee:	4b56      	ldr	r3, [pc, #344]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d109      	bne.n	800610e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060fe:	e006      	b.n	800610e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	73fb      	strb	r3, [r7, #15]
      break;
 8006104:	e004      	b.n	8006110 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006106:	bf00      	nop
 8006108:	e002      	b.n	8006110 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800610a:	bf00      	nop
 800610c:	e000      	b.n	8006110 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800610e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d108      	bne.n	8006128 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006116:	4b4c      	ldr	r3, [pc, #304]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f023 0203 	bic.w	r2, r3, #3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4949      	ldr	r1, [pc, #292]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006124:	4313      	orrs	r3, r2
 8006126:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	2b00      	cmp	r3, #0
 800612c:	f040 8086 	bne.w	800623c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006130:	4b45      	ldr	r3, [pc, #276]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a44      	ldr	r2, [pc, #272]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006136:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800613a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800613c:	f7fc f8b2 	bl	80022a4 <HAL_GetTick>
 8006140:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006142:	e009      	b.n	8006158 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006144:	f7fc f8ae 	bl	80022a4 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b02      	cmp	r3, #2
 8006150:	d902      	bls.n	8006158 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	73fb      	strb	r3, [r7, #15]
        break;
 8006156:	e005      	b.n	8006164 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006158:	4b3b      	ldr	r3, [pc, #236]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1ef      	bne.n	8006144 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d168      	bne.n	800623c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d113      	bne.n	8006198 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006170:	4b35      	ldr	r3, [pc, #212]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006172:	695a      	ldr	r2, [r3, #20]
 8006174:	4b35      	ldr	r3, [pc, #212]	@ (800624c <RCCEx_PLLSAI2_Config+0x1dc>)
 8006176:	4013      	ands	r3, r2
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6892      	ldr	r2, [r2, #8]
 800617c:	0211      	lsls	r1, r2, #8
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	68d2      	ldr	r2, [r2, #12]
 8006182:	06d2      	lsls	r2, r2, #27
 8006184:	4311      	orrs	r1, r2
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	6852      	ldr	r2, [r2, #4]
 800618a:	3a01      	subs	r2, #1
 800618c:	0112      	lsls	r2, r2, #4
 800618e:	430a      	orrs	r2, r1
 8006190:	492d      	ldr	r1, [pc, #180]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006192:	4313      	orrs	r3, r2
 8006194:	614b      	str	r3, [r1, #20]
 8006196:	e02d      	b.n	80061f4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d115      	bne.n	80061ca <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800619e:	4b2a      	ldr	r3, [pc, #168]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061a0:	695a      	ldr	r2, [r3, #20]
 80061a2:	4b2b      	ldr	r3, [pc, #172]	@ (8006250 <RCCEx_PLLSAI2_Config+0x1e0>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6892      	ldr	r2, [r2, #8]
 80061aa:	0211      	lsls	r1, r2, #8
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6912      	ldr	r2, [r2, #16]
 80061b0:	0852      	lsrs	r2, r2, #1
 80061b2:	3a01      	subs	r2, #1
 80061b4:	0552      	lsls	r2, r2, #21
 80061b6:	4311      	orrs	r1, r2
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	6852      	ldr	r2, [r2, #4]
 80061bc:	3a01      	subs	r2, #1
 80061be:	0112      	lsls	r2, r2, #4
 80061c0:	430a      	orrs	r2, r1
 80061c2:	4921      	ldr	r1, [pc, #132]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	614b      	str	r3, [r1, #20]
 80061c8:	e014      	b.n	80061f4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80061ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061cc:	695a      	ldr	r2, [r3, #20]
 80061ce:	4b21      	ldr	r3, [pc, #132]	@ (8006254 <RCCEx_PLLSAI2_Config+0x1e4>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6892      	ldr	r2, [r2, #8]
 80061d6:	0211      	lsls	r1, r2, #8
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6952      	ldr	r2, [r2, #20]
 80061dc:	0852      	lsrs	r2, r2, #1
 80061de:	3a01      	subs	r2, #1
 80061e0:	0652      	lsls	r2, r2, #25
 80061e2:	4311      	orrs	r1, r2
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6852      	ldr	r2, [r2, #4]
 80061e8:	3a01      	subs	r2, #1
 80061ea:	0112      	lsls	r2, r2, #4
 80061ec:	430a      	orrs	r2, r1
 80061ee:	4916      	ldr	r1, [pc, #88]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80061f4:	4b14      	ldr	r3, [pc, #80]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a13      	ldr	r2, [pc, #76]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006200:	f7fc f850 	bl	80022a4 <HAL_GetTick>
 8006204:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006206:	e009      	b.n	800621c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006208:	f7fc f84c 	bl	80022a4 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b02      	cmp	r3, #2
 8006214:	d902      	bls.n	800621c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	73fb      	strb	r3, [r7, #15]
          break;
 800621a:	e005      	b.n	8006228 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800621c:	4b0a      	ldr	r3, [pc, #40]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0ef      	beq.n	8006208 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d106      	bne.n	800623c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800622e:	4b06      	ldr	r3, [pc, #24]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006230:	695a      	ldr	r2, [r3, #20]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	4904      	ldr	r1, [pc, #16]	@ (8006248 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006238:	4313      	orrs	r3, r2
 800623a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	40021000 	.word	0x40021000
 800624c:	07ff800f 	.word	0x07ff800f
 8006250:	ff9f800f 	.word	0xff9f800f
 8006254:	f9ff800f 	.word	0xf9ff800f

08006258 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006258:	b480      	push	{r7}
 800625a:	b089      	sub	sp, #36	@ 0x24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006262:	2300      	movs	r3, #0
 8006264:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006274:	d10b      	bne.n	800628e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006276:	4b7e      	ldr	r3, [pc, #504]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006278:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800627c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006280:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b60      	cmp	r3, #96	@ 0x60
 8006286:	d112      	bne.n	80062ae <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006288:	4b7a      	ldr	r3, [pc, #488]	@ (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800628a:	61fb      	str	r3, [r7, #28]
 800628c:	e00f      	b.n	80062ae <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006294:	d10b      	bne.n	80062ae <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006296:	4b76      	ldr	r3, [pc, #472]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006298:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800629c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062a0:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062a8:	d101      	bne.n	80062ae <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80062aa:	4b72      	ldr	r3, [pc, #456]	@ (8006474 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80062ac:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f040 80d6 	bne.w	8006462 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	2b40      	cmp	r3, #64	@ 0x40
 80062be:	d003      	beq.n	80062c8 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062c6:	d13b      	bne.n	8006340 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80062c8:	4b69      	ldr	r3, [pc, #420]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062d4:	f040 80c4 	bne.w	8006460 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80062d8:	4b65      	ldr	r3, [pc, #404]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 80bd 	beq.w	8006460 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80062e6:	4b62      	ldr	r3, [pc, #392]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	091b      	lsrs	r3, r3, #4
 80062ec:	f003 030f 	and.w	r3, r3, #15
 80062f0:	3301      	adds	r3, #1
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80062fa:	4b5d      	ldr	r3, [pc, #372]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	0a1b      	lsrs	r3, r3, #8
 8006300:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006304:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006306:	4b5a      	ldr	r3, [pc, #360]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	0edb      	lsrs	r3, r3, #27
 800630c:	f003 031f 	and.w	r3, r3, #31
 8006310:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006318:	4b55      	ldr	r3, [pc, #340]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006324:	2311      	movs	r3, #17
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	e001      	b.n	800632e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800632a:	2307      	movs	r3, #7
 800632c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	fb03 f202 	mul.w	r2, r3, r2
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	fbb2 f3f3 	udiv	r3, r2, r3
 800633c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800633e:	e08f      	b.n	8006460 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d13a      	bne.n	80063bc <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006346:	4b4a      	ldr	r3, [pc, #296]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800634e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006352:	f040 8086 	bne.w	8006462 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006356:	4b46      	ldr	r3, [pc, #280]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d07f      	beq.n	8006462 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006362:	4b43      	ldr	r3, [pc, #268]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	091b      	lsrs	r3, r3, #4
 8006368:	f003 030f 	and.w	r3, r3, #15
 800636c:	3301      	adds	r3, #1
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	fbb2 f3f3 	udiv	r3, r2, r3
 8006374:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006376:	4b3e      	ldr	r3, [pc, #248]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	0a1b      	lsrs	r3, r3, #8
 800637c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006380:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006382:	4b3b      	ldr	r3, [pc, #236]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	0edb      	lsrs	r3, r3, #27
 8006388:	f003 031f 	and.w	r3, r3, #31
 800638c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10a      	bne.n	80063aa <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006394:	4b36      	ldr	r3, [pc, #216]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80063a0:	2311      	movs	r3, #17
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	e001      	b.n	80063aa <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80063a6:	2307      	movs	r3, #7
 80063a8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	fb03 f202 	mul.w	r2, r3, r2
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b8:	61fb      	str	r3, [r7, #28]
 80063ba:	e052      	b.n	8006462 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	2b80      	cmp	r3, #128	@ 0x80
 80063c0:	d003      	beq.n	80063ca <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063c8:	d109      	bne.n	80063de <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063ca:	4b29      	ldr	r3, [pc, #164]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063d6:	d144      	bne.n	8006462 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80063d8:	4b27      	ldr	r3, [pc, #156]	@ (8006478 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80063da:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063dc:	e041      	b.n	8006462 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	d003      	beq.n	80063ec <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ea:	d13a      	bne.n	8006462 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80063ec:	4b20      	ldr	r3, [pc, #128]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063f8:	d133      	bne.n	8006462 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80063fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d02d      	beq.n	8006462 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006406:	4b1a      	ldr	r3, [pc, #104]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	091b      	lsrs	r3, r3, #4
 800640c:	f003 030f 	and.w	r3, r3, #15
 8006410:	3301      	adds	r3, #1
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	fbb2 f3f3 	udiv	r3, r2, r3
 8006418:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800641a:	4b15      	ldr	r3, [pc, #84]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	0a1b      	lsrs	r3, r3, #8
 8006420:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006424:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006426:	4b12      	ldr	r3, [pc, #72]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	0edb      	lsrs	r3, r3, #27
 800642c:	f003 031f 	and.w	r3, r3, #31
 8006430:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10a      	bne.n	800644e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006438:	4b0d      	ldr	r3, [pc, #52]	@ (8006470 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006444:	2311      	movs	r3, #17
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	e001      	b.n	800644e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800644a:	2307      	movs	r3, #7
 800644c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	fb03 f202 	mul.w	r2, r3, r2
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	fbb2 f3f3 	udiv	r3, r2, r3
 800645c:	61fb      	str	r3, [r7, #28]
 800645e:	e000      	b.n	8006462 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006460:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006462:	69fb      	ldr	r3, [r7, #28]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3724      	adds	r7, #36	@ 0x24
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	40021000 	.word	0x40021000
 8006474:	001fff68 	.word	0x001fff68
 8006478:	00f42400 	.word	0x00f42400

0800647c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b02      	cmp	r3, #2
 800648e:	d904      	bls.n	800649a <HAL_SAI_InitProtocol+0x1e>
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	3b03      	subs	r3, #3
 8006494:	2b01      	cmp	r3, #1
 8006496:	d812      	bhi.n	80064be <HAL_SAI_InitProtocol+0x42>
 8006498:	e008      	b.n	80064ac <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 f9fb 	bl	800689c <SAI_InitI2S>
 80064a6:	4603      	mov	r3, r0
 80064a8:	75fb      	strb	r3, [r7, #23]
      break;
 80064aa:	e00b      	b.n	80064c4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	68b9      	ldr	r1, [r7, #8]
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 faa4 	bl	8006a00 <SAI_InitPCM>
 80064b8:	4603      	mov	r3, r0
 80064ba:	75fb      	strb	r3, [r7, #23]
      break;
 80064bc:	e002      	b.n	80064c4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	75fb      	strb	r3, [r7, #23]
      break;
 80064c2:	bf00      	nop
  }

  if (status == HAL_OK)
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d104      	bne.n	80064d4 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 f808 	bl	80064e0 <HAL_SAI_Init>
 80064d0:	4603      	mov	r3, r0
 80064d2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80064d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	@ 0x28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e1c7      	b.n	8006882 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d10e      	bne.n	800651a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a81      	ldr	r2, [pc, #516]	@ (8006708 <HAL_SAI_Init+0x228>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d107      	bne.n	8006516 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800650a:	2b01      	cmp	r3, #1
 800650c:	d103      	bne.n	8006516 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e1b3      	b.n	8006882 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d106      	bne.n	8006534 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7fb fd28 	bl	8001f84 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fae5 	bl	8006b04 <SAI_Disable>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e19e      	b.n	8006882 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	2b02      	cmp	r3, #2
 8006552:	d00c      	beq.n	800656e <HAL_SAI_Init+0x8e>
 8006554:	2b02      	cmp	r3, #2
 8006556:	d80d      	bhi.n	8006574 <HAL_SAI_Init+0x94>
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <HAL_SAI_Init+0x82>
 800655c:	2b01      	cmp	r3, #1
 800655e:	d003      	beq.n	8006568 <HAL_SAI_Init+0x88>
 8006560:	e008      	b.n	8006574 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8006566:	e008      	b.n	800657a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006568:	2310      	movs	r3, #16
 800656a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800656c:	e005      	b.n	800657a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800656e:	2320      	movs	r3, #32
 8006570:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8006572:	e002      	b.n	800657a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006574:	2300      	movs	r3, #0
 8006576:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8006578:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	2b03      	cmp	r3, #3
 8006580:	d81d      	bhi.n	80065be <HAL_SAI_Init+0xde>
 8006582:	a201      	add	r2, pc, #4	@ (adr r2, 8006588 <HAL_SAI_Init+0xa8>)
 8006584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006588:	08006599 	.word	0x08006599
 800658c:	0800659f 	.word	0x0800659f
 8006590:	080065a7 	.word	0x080065a7
 8006594:	080065af 	.word	0x080065af
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006598:	2300      	movs	r3, #0
 800659a:	61fb      	str	r3, [r7, #28]
      break;
 800659c:	e012      	b.n	80065c4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800659e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065a2:	61fb      	str	r3, [r7, #28]
      break;
 80065a4:	e00e      	b.n	80065c4 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80065a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80065aa:	61fb      	str	r3, [r7, #28]
      break;
 80065ac:	e00a      	b.n	80065c4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80065ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80065b2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80065b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b6:	f043 0301 	orr.w	r3, r3, #1
 80065ba:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80065bc:	e002      	b.n	80065c4 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80065be:	2300      	movs	r3, #0
 80065c0:	61fb      	str	r3, [r7, #28]
      break;
 80065c2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a4f      	ldr	r2, [pc, #316]	@ (8006708 <HAL_SAI_Init+0x228>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d004      	beq.n	80065d8 <HAL_SAI_Init+0xf8>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a4e      	ldr	r2, [pc, #312]	@ (800670c <HAL_SAI_Init+0x22c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d103      	bne.n	80065e0 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 80065d8:	4a4d      	ldr	r2, [pc, #308]	@ (8006710 <HAL_SAI_Init+0x230>)
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	e002      	b.n	80065e6 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80065e0:	4a4c      	ldr	r2, [pc, #304]	@ (8006714 <HAL_SAI_Init+0x234>)
 80065e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e4:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d073      	beq.n	80066d6 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a45      	ldr	r2, [pc, #276]	@ (8006708 <HAL_SAI_Init+0x228>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d004      	beq.n	8006602 <HAL_SAI_Init+0x122>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a43      	ldr	r2, [pc, #268]	@ (800670c <HAL_SAI_Init+0x22c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d105      	bne.n	800660e <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006602:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006606:	f7fe fd1d 	bl	8005044 <HAL_RCCEx_GetPeriphCLKFreq>
 800660a:	61b8      	str	r0, [r7, #24]
 800660c:	e004      	b.n	8006618 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800660e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006612:	f7fe fd17 	bl	8005044 <HAL_RCCEx_GetPeriphCLKFreq>
 8006616:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006620:	d120      	bne.n	8006664 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006626:	2b04      	cmp	r3, #4
 8006628:	d102      	bne.n	8006630 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800662a:	2340      	movs	r3, #64	@ 0x40
 800662c:	613b      	str	r3, [r7, #16]
 800662e:	e00a      	b.n	8006646 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006634:	2b08      	cmp	r3, #8
 8006636:	d103      	bne.n	8006640 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8006638:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	e002      	b.n	8006646 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006644:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	4613      	mov	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	4619      	mov	r1, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	fb02 f303 	mul.w	r3, r2, r3
 800665c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	e017      	b.n	8006694 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006668:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800666c:	d101      	bne.n	8006672 <HAL_SAI_Init+0x192>
 800666e:	2302      	movs	r3, #2
 8006670:	e000      	b.n	8006674 <HAL_SAI_Init+0x194>
 8006672:	2301      	movs	r3, #1
 8006674:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	4613      	mov	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	4619      	mov	r1, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	fb02 f303 	mul.w	r3, r2, r3
 800668c:	021b      	lsls	r3, r3, #8
 800668e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006692:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	4a20      	ldr	r2, [pc, #128]	@ (8006718 <HAL_SAI_Init+0x238>)
 8006698:	fba2 2303 	umull	r2, r3, r2, r3
 800669c:	08da      	lsrs	r2, r3, #3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80066a2:	6979      	ldr	r1, [r7, #20]
 80066a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006718 <HAL_SAI_Init+0x238>)
 80066a6:	fba3 2301 	umull	r2, r3, r3, r1
 80066aa:	08da      	lsrs	r2, r3, #3
 80066ac:	4613      	mov	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	1aca      	subs	r2, r1, r3
 80066b6:	2a08      	cmp	r2, #8
 80066b8:	d904      	bls.n	80066c4 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	d104      	bne.n	80066d6 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	085a      	lsrs	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_SAI_Init+0x206>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d109      	bne.n	80066fa <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_SAI_Init+0x212>
 80066ee:	2300      	movs	r3, #0
 80066f0:	e001      	b.n	80066f6 <HAL_SAI_Init+0x216>
 80066f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066f6:	623b      	str	r3, [r7, #32]
 80066f8:	e012      	b.n	8006720 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d10c      	bne.n	800671c <HAL_SAI_Init+0x23c>
 8006702:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006706:	e00a      	b.n	800671e <HAL_SAI_Init+0x23e>
 8006708:	40015404 	.word	0x40015404
 800670c:	40015424 	.word	0x40015424
 8006710:	40015400 	.word	0x40015400
 8006714:	40015800 	.word	0x40015800
 8006718:	cccccccd 	.word	0xcccccccd
 800671c:	2300      	movs	r3, #0
 800671e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6819      	ldr	r1, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	4b58      	ldr	r3, [pc, #352]	@ (800688c <HAL_SAI_Init+0x3ac>)
 800672c:	400b      	ands	r3, r1
 800672e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6819      	ldr	r1, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006744:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800674a:	431a      	orrs	r2, r3
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8006758:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006764:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	051b      	lsls	r3, r3, #20
 800676c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006772:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6812      	ldr	r2, [r2, #0]
 8006786:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800678a:	f023 030f 	bic.w	r3, r3, #15
 800678e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6859      	ldr	r1, [r3, #4]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	699a      	ldr	r2, [r3, #24]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6899      	ldr	r1, [r3, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	4b35      	ldr	r3, [pc, #212]	@ (8006890 <HAL_SAI_Init+0x3b0>)
 80067ba:	400b      	ands	r3, r1
 80067bc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6899      	ldr	r1, [r3, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067c8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80067ce:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 80067d4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 80067da:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e0:	3b01      	subs	r3, #1
 80067e2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80067e4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68d9      	ldr	r1, [r3, #12]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80067fc:	400b      	ands	r3, r1
 80067fe:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68d9      	ldr	r1, [r3, #12]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800680e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006814:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006816:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800681c:	3b01      	subs	r3, #1
 800681e:	021b      	lsls	r3, r3, #8
 8006820:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a19      	ldr	r2, [pc, #100]	@ (8006894 <HAL_SAI_Init+0x3b4>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d119      	bne.n	8006868 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006834:	4b18      	ldr	r3, [pc, #96]	@ (8006898 <HAL_SAI_Init+0x3b8>)
 8006836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006838:	4a17      	ldr	r2, [pc, #92]	@ (8006898 <HAL_SAI_Init+0x3b8>)
 800683a:	f023 0301 	bic.w	r3, r3, #1
 800683e:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006846:	2b01      	cmp	r3, #1
 8006848:	d10e      	bne.n	8006868 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006852:	3b01      	subs	r3, #1
 8006854:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006856:	4910      	ldr	r1, [pc, #64]	@ (8006898 <HAL_SAI_Init+0x3b8>)
 8006858:	4313      	orrs	r3, r2
 800685a:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800685c:	4b0e      	ldr	r3, [pc, #56]	@ (8006898 <HAL_SAI_Init+0x3b8>)
 800685e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006860:	4a0d      	ldr	r2, [pc, #52]	@ (8006898 <HAL_SAI_Init+0x3b8>)
 8006862:	f043 0301 	orr.w	r3, r3, #1
 8006866:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3728      	adds	r7, #40	@ 0x28
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	f805c010 	.word	0xf805c010
 8006890:	fff88000 	.word	0xfff88000
 8006894:	40015404 	.word	0x40015404
 8006898:	40015400 	.word	0x40015400

0800689c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
 80068a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <SAI_InitI2S+0x2e>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d103      	bne.n	80068d2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	64da      	str	r2, [r3, #76]	@ 0x4c
 80068d0:	e002      	b.n	80068d8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2201      	movs	r2, #1
 80068d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80068de:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80068e6:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e077      	b.n	80069f2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d107      	bne.n	8006918 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006914:	661a      	str	r2, [r3, #96]	@ 0x60
 8006916:	e006      	b.n	8006926 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800691e:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Frame definition */
  switch (datasize)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b03      	cmp	r3, #3
 800692a:	d84f      	bhi.n	80069cc <SAI_InitI2S+0x130>
 800692c:	a201      	add	r2, pc, #4	@ (adr r2, 8006934 <SAI_InitI2S+0x98>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	08006945 	.word	0x08006945
 8006938:	08006967 	.word	0x08006967
 800693c:	08006989 	.word	0x08006989
 8006940:	080069ab 	.word	0x080069ab
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2280      	movs	r2, #128	@ 0x80
 8006948:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	085b      	lsrs	r3, r3, #1
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	085b      	lsrs	r3, r3, #1
 8006958:	011a      	lsls	r2, r3, #4
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2240      	movs	r2, #64	@ 0x40
 8006962:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8006964:	e035      	b.n	80069d2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2280      	movs	r2, #128	@ 0x80
 800696a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	085b      	lsrs	r3, r3, #1
 8006970:	019a      	lsls	r2, r3, #6
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	085b      	lsrs	r3, r3, #1
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2280      	movs	r2, #128	@ 0x80
 8006984:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8006986:	e024      	b.n	80069d2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	22c0      	movs	r2, #192	@ 0xc0
 800698c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	085b      	lsrs	r3, r3, #1
 8006992:	019a      	lsls	r2, r3, #6
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	085b      	lsrs	r3, r3, #1
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2280      	movs	r2, #128	@ 0x80
 80069a6:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80069a8:	e013      	b.n	80069d2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	22e0      	movs	r2, #224	@ 0xe0
 80069ae:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	085b      	lsrs	r3, r3, #1
 80069b4:	019a      	lsls	r2, r3, #6
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	085b      	lsrs	r3, r3, #1
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2280      	movs	r2, #128	@ 0x80
 80069c8:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80069ca:	e002      	b.n	80069d2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	75fb      	strb	r3, [r7, #23]
      break;
 80069d0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d10b      	bne.n	80069f0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d102      	bne.n	80069e4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2210      	movs	r2, #16
 80069e2:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d102      	bne.n	80069f0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2208      	movs	r2, #8
 80069ee:	665a      	str	r2, [r3, #100]	@ 0x64
    }
  }
  return status;
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop

08006a00 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <SAI_InitPCM+0x2e>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d103      	bne.n	8006a36 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2201      	movs	r2, #1
 8006a32:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006a34:	e002      	b.n	8006a3c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006a48:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006a50:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a64:	671a      	str	r2, [r3, #112]	@ 0x70

  if (protocol == SAI_PCM_SHORT)
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2b04      	cmp	r3, #4
 8006a6a:	d103      	bne.n	8006a74 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	655a      	str	r2, [r3, #84]	@ 0x54
 8006a72:	e002      	b.n	8006a7a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	220d      	movs	r2, #13
 8006a78:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  switch (datasize)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d837      	bhi.n	8006af0 <SAI_InitPCM+0xf0>
 8006a80:	a201      	add	r2, pc, #4	@ (adr r2, 8006a88 <SAI_InitPCM+0x88>)
 8006a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a86:	bf00      	nop
 8006a88:	08006a99 	.word	0x08006a99
 8006a8c:	08006aaf 	.word	0x08006aaf
 8006a90:	08006ac5 	.word	0x08006ac5
 8006a94:	08006adb 	.word	0x08006adb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2280      	movs	r2, #128	@ 0x80
 8006a9c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	011a      	lsls	r2, r3, #4
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2240      	movs	r2, #64	@ 0x40
 8006aaa:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8006aac:	e023      	b.n	8006af6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2280      	movs	r2, #128	@ 0x80
 8006ab2:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2280      	movs	r2, #128	@ 0x80
 8006ac0:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8006ac2:	e018      	b.n	8006af6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	22c0      	movs	r2, #192	@ 0xc0
 8006ac8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2280      	movs	r2, #128	@ 0x80
 8006ad6:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8006ad8:	e00d      	b.n	8006af6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	22e0      	movs	r2, #224	@ 0xe0
 8006ade:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2280      	movs	r2, #128	@ 0x80
 8006aec:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8006aee:	e002      	b.n	8006af6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	75fb      	strb	r3, [r7, #23]
      break;
 8006af4:	bf00      	nop
  }

  return status;
 8006af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	371c      	adds	r7, #28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006b0c:	4b18      	ldr	r3, [pc, #96]	@ (8006b70 <SAI_Disable+0x6c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a18      	ldr	r2, [pc, #96]	@ (8006b74 <SAI_Disable+0x70>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	0b1b      	lsrs	r3, r3, #12
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006b2e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10a      	bne.n	8006b4c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b3c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	72fb      	strb	r3, [r7, #11]
      break;
 8006b4a:	e009      	b.n	8006b60 <SAI_Disable+0x5c>
    }
    count--;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1e7      	bne.n	8006b30 <SAI_Disable+0x2c>

  return status;
 8006b60:	7afb      	ldrb	r3, [r7, #11]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	20000000 	.word	0x20000000
 8006b74:	95cbec1b 	.word	0x95cbec1b

08006b78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e095      	b.n	8006cb6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d108      	bne.n	8006ba4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b9a:	d009      	beq.n	8006bb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	61da      	str	r2, [r3, #28]
 8006ba2:	e005      	b.n	8006bb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d106      	bne.n	8006bd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fa ffd0 	bl	8001b70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006be6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bf0:	d902      	bls.n	8006bf8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60fb      	str	r3, [r7, #12]
 8006bf6:	e002      	b.n	8006bfe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006bfc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006c06:	d007      	beq.n	8006c18 <HAL_SPI_Init+0xa0>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c10:	d002      	beq.n	8006c18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c5a:	ea42 0103 	orr.w	r1, r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c62:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	0c1b      	lsrs	r3, r3, #16
 8006c74:	f003 0204 	and.w	r2, r3, #4
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7c:	f003 0310 	and.w	r3, r3, #16
 8006c80:	431a      	orrs	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006c94:	ea42 0103 	orr.w	r1, r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b088      	sub	sp, #32
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	60f8      	str	r0, [r7, #12]
 8006cc6:	60b9      	str	r1, [r7, #8]
 8006cc8:	603b      	str	r3, [r7, #0]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <HAL_SPI_Transmit+0x22>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e15f      	b.n	8006fa0 <HAL_SPI_Transmit+0x2e2>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ce8:	f7fb fadc 	bl	80022a4 <HAL_GetTick>
 8006cec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cee:	88fb      	ldrh	r3, [r7, #6]
 8006cf0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d002      	beq.n	8006d04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cfe:	2302      	movs	r3, #2
 8006d00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d02:	e148      	b.n	8006f96 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <HAL_SPI_Transmit+0x52>
 8006d0a:	88fb      	ldrh	r3, [r7, #6]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d102      	bne.n	8006d16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d14:	e13f      	b.n	8006f96 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2203      	movs	r2, #3
 8006d1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	88fa      	ldrh	r2, [r7, #6]
 8006d2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	88fa      	ldrh	r2, [r7, #6]
 8006d34:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d60:	d10f      	bne.n	8006d82 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d8c:	2b40      	cmp	r3, #64	@ 0x40
 8006d8e:	d007      	beq.n	8006da0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006da8:	d94f      	bls.n	8006e4a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <HAL_SPI_Transmit+0xfa>
 8006db2:	8afb      	ldrh	r3, [r7, #22]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d142      	bne.n	8006e3e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbc:	881a      	ldrh	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc8:	1c9a      	adds	r2, r3, #2
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ddc:	e02f      	b.n	8006e3e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d112      	bne.n	8006e12 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df0:	881a      	ldrh	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfc:	1c9a      	adds	r2, r3, #2
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e10:	e015      	b.n	8006e3e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e12:	f7fb fa47 	bl	80022a4 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d803      	bhi.n	8006e2a <HAL_SPI_Transmit+0x16c>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e28:	d102      	bne.n	8006e30 <HAL_SPI_Transmit+0x172>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006e3c:	e0ab      	b.n	8006f96 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1ca      	bne.n	8006dde <HAL_SPI_Transmit+0x120>
 8006e48:	e080      	b.n	8006f4c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <HAL_SPI_Transmit+0x19a>
 8006e52:	8afb      	ldrh	r3, [r7, #22]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d174      	bne.n	8006f42 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d912      	bls.n	8006e88 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e66:	881a      	ldrh	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e72:	1c9a      	adds	r2, r3, #2
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	3b02      	subs	r3, #2
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e86:	e05c      	b.n	8006f42 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	330c      	adds	r3, #12
 8006e92:	7812      	ldrb	r2, [r2, #0]
 8006e94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006eae:	e048      	b.n	8006f42 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d12b      	bne.n	8006f16 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d912      	bls.n	8006eee <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ecc:	881a      	ldrh	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed8:	1c9a      	adds	r2, r3, #2
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	3b02      	subs	r3, #2
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006eec:	e029      	b.n	8006f42 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	330c      	adds	r3, #12
 8006ef8:	7812      	ldrb	r2, [r2, #0]
 8006efa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f14:	e015      	b.n	8006f42 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f16:	f7fb f9c5 	bl	80022a4 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d803      	bhi.n	8006f2e <HAL_SPI_Transmit+0x270>
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2c:	d102      	bne.n	8006f34 <HAL_SPI_Transmit+0x276>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d106      	bne.n	8006f42 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006f40:	e029      	b.n	8006f96 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1b1      	bne.n	8006eb0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f001 f8a7 	bl	80080a4 <SPI_EndRxTxTransaction>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10a      	bne.n	8006f80 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	613b      	str	r3, [r7, #16]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	613b      	str	r3, [r7, #16]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	77fb      	strb	r3, [r7, #31]
 8006f8c:	e003      	b.n	8006f96 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006f9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3720      	adds	r7, #32
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af02      	add	r7, sp, #8
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d002      	beq.n	8006fce <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006fc8:	2302      	movs	r3, #2
 8006fca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fcc:	e11a      	b.n	8007204 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fd6:	d112      	bne.n	8006ffe <HAL_SPI_Receive+0x56>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10e      	bne.n	8006ffe <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2204      	movs	r2, #4
 8006fe4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006fe8:	88fa      	ldrh	r2, [r7, #6]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	68b9      	ldr	r1, [r7, #8]
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 f90e 	bl	8007216 <HAL_SPI_TransmitReceive>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	e107      	b.n	800720e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007004:	2b01      	cmp	r3, #1
 8007006:	d101      	bne.n	800700c <HAL_SPI_Receive+0x64>
 8007008:	2302      	movs	r3, #2
 800700a:	e100      	b.n	800720e <HAL_SPI_Receive+0x266>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007014:	f7fb f946 	bl	80022a4 <HAL_GetTick>
 8007018:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <HAL_SPI_Receive+0x7e>
 8007020:	88fb      	ldrh	r3, [r7, #6]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d102      	bne.n	800702c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	75fb      	strb	r3, [r7, #23]
    goto error;
 800702a:	e0eb      	b.n	8007204 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2204      	movs	r2, #4
 8007030:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	88fa      	ldrh	r2, [r7, #6]
 8007044:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	88fa      	ldrh	r2, [r7, #6]
 800704c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007076:	d908      	bls.n	800708a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007086:	605a      	str	r2, [r3, #4]
 8007088:	e007      	b.n	800709a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007098:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070a2:	d10f      	bne.n	80070c4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80070c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ce:	2b40      	cmp	r3, #64	@ 0x40
 80070d0:	d007      	beq.n	80070e2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80070ea:	d86f      	bhi.n	80071cc <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80070ec:	e034      	b.n	8007158 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d117      	bne.n	800712c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f103 020c 	add.w	r2, r3, #12
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007108:	7812      	ldrb	r2, [r2, #0]
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007112:	1c5a      	adds	r2, r3, #1
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800711e:	b29b      	uxth	r3, r3
 8007120:	3b01      	subs	r3, #1
 8007122:	b29a      	uxth	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800712a:	e015      	b.n	8007158 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800712c:	f7fb f8ba 	bl	80022a4 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	429a      	cmp	r2, r3
 800713a:	d803      	bhi.n	8007144 <HAL_SPI_Receive+0x19c>
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007142:	d102      	bne.n	800714a <HAL_SPI_Receive+0x1a2>
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007156:	e055      	b.n	8007204 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800715e:	b29b      	uxth	r3, r3
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1c4      	bne.n	80070ee <HAL_SPI_Receive+0x146>
 8007164:	e038      	b.n	80071d8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b01      	cmp	r3, #1
 8007172:	d115      	bne.n	80071a0 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717e:	b292      	uxth	r2, r2
 8007180:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007186:	1c9a      	adds	r2, r3, #2
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007192:	b29b      	uxth	r3, r3
 8007194:	3b01      	subs	r3, #1
 8007196:	b29a      	uxth	r2, r3
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800719e:	e015      	b.n	80071cc <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071a0:	f7fb f880 	bl	80022a4 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d803      	bhi.n	80071b8 <HAL_SPI_Receive+0x210>
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b6:	d102      	bne.n	80071be <HAL_SPI_Receive+0x216>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d106      	bne.n	80071cc <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80071ca:	e01b      	b.n	8007204 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1c6      	bne.n	8007166 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 ff09 	bl	8007ff4 <SPI_EndRxTransaction>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2220      	movs	r2, #32
 80071ec:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	75fb      	strb	r3, [r7, #23]
 80071fa:	e003      	b.n	8007204 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800720c:	7dfb      	ldrb	r3, [r7, #23]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b08a      	sub	sp, #40	@ 0x28
 800721a:	af00      	add	r7, sp, #0
 800721c:	60f8      	str	r0, [r7, #12]
 800721e:	60b9      	str	r1, [r7, #8]
 8007220:	607a      	str	r2, [r7, #4]
 8007222:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007224:	2301      	movs	r3, #1
 8007226:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <HAL_SPI_TransmitReceive+0x26>
 8007238:	2302      	movs	r3, #2
 800723a:	e20a      	b.n	8007652 <HAL_SPI_TransmitReceive+0x43c>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007244:	f7fb f82e 	bl	80022a4 <HAL_GetTick>
 8007248:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007250:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007258:	887b      	ldrh	r3, [r7, #2]
 800725a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800725c:	887b      	ldrh	r3, [r7, #2]
 800725e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007260:	7efb      	ldrb	r3, [r7, #27]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d00e      	beq.n	8007284 <HAL_SPI_TransmitReceive+0x6e>
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800726c:	d106      	bne.n	800727c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d102      	bne.n	800727c <HAL_SPI_TransmitReceive+0x66>
 8007276:	7efb      	ldrb	r3, [r7, #27]
 8007278:	2b04      	cmp	r3, #4
 800727a:	d003      	beq.n	8007284 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800727c:	2302      	movs	r3, #2
 800727e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007282:	e1e0      	b.n	8007646 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d005      	beq.n	8007296 <HAL_SPI_TransmitReceive+0x80>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <HAL_SPI_TransmitReceive+0x80>
 8007290:	887b      	ldrh	r3, [r7, #2]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d103      	bne.n	800729e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800729c:	e1d3      	b.n	8007646 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d003      	beq.n	80072b2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2205      	movs	r2, #5
 80072ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	887a      	ldrh	r2, [r7, #2]
 80072c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	887a      	ldrh	r2, [r7, #2]
 80072ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	887a      	ldrh	r2, [r7, #2]
 80072d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	887a      	ldrh	r2, [r7, #2]
 80072de:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80072f4:	d802      	bhi.n	80072fc <HAL_SPI_TransmitReceive+0xe6>
 80072f6:	8a3b      	ldrh	r3, [r7, #16]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d908      	bls.n	800730e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800730a:	605a      	str	r2, [r3, #4]
 800730c:	e007      	b.n	800731e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800731c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007328:	2b40      	cmp	r3, #64	@ 0x40
 800732a:	d007      	beq.n	800733c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800733a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007344:	f240 8081 	bls.w	800744a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <HAL_SPI_TransmitReceive+0x140>
 8007350:	8a7b      	ldrh	r3, [r7, #18]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d16d      	bne.n	8007432 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735a:	881a      	ldrh	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007366:	1c9a      	adds	r2, r3, #2
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007370:	b29b      	uxth	r3, r3
 8007372:	3b01      	subs	r3, #1
 8007374:	b29a      	uxth	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800737a:	e05a      	b.n	8007432 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f003 0302 	and.w	r3, r3, #2
 8007386:	2b02      	cmp	r3, #2
 8007388:	d11b      	bne.n	80073c2 <HAL_SPI_TransmitReceive+0x1ac>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800738e:	b29b      	uxth	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d016      	beq.n	80073c2 <HAL_SPI_TransmitReceive+0x1ac>
 8007394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007396:	2b01      	cmp	r3, #1
 8007398:	d113      	bne.n	80073c2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739e:	881a      	ldrh	r2, [r3, #0]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073aa:	1c9a      	adds	r2, r3, #2
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	3b01      	subs	r3, #1
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d11c      	bne.n	800740a <HAL_SPI_TransmitReceive+0x1f4>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d016      	beq.n	800740a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e6:	b292      	uxth	r2, r2
 80073e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ee:	1c9a      	adds	r2, r3, #2
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	3b01      	subs	r3, #1
 80073fe:	b29a      	uxth	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007406:	2301      	movs	r3, #1
 8007408:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800740a:	f7fa ff4b 	bl	80022a4 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007416:	429a      	cmp	r2, r3
 8007418:	d80b      	bhi.n	8007432 <HAL_SPI_TransmitReceive+0x21c>
 800741a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007420:	d007      	beq.n	8007432 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007430:	e109      	b.n	8007646 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007436:	b29b      	uxth	r3, r3
 8007438:	2b00      	cmp	r3, #0
 800743a:	d19f      	bne.n	800737c <HAL_SPI_TransmitReceive+0x166>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007442:	b29b      	uxth	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	d199      	bne.n	800737c <HAL_SPI_TransmitReceive+0x166>
 8007448:	e0e3      	b.n	8007612 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <HAL_SPI_TransmitReceive+0x244>
 8007452:	8a7b      	ldrh	r3, [r7, #18]
 8007454:	2b01      	cmp	r3, #1
 8007456:	f040 80cf 	bne.w	80075f8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800745e:	b29b      	uxth	r3, r3
 8007460:	2b01      	cmp	r3, #1
 8007462:	d912      	bls.n	800748a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007468:	881a      	ldrh	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007474:	1c9a      	adds	r2, r3, #2
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800747e:	b29b      	uxth	r3, r3
 8007480:	3b02      	subs	r3, #2
 8007482:	b29a      	uxth	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007488:	e0b6      	b.n	80075f8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	330c      	adds	r3, #12
 8007494:	7812      	ldrb	r2, [r2, #0]
 8007496:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	3b01      	subs	r3, #1
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074b0:	e0a2      	b.n	80075f8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d134      	bne.n	800752a <HAL_SPI_TransmitReceive+0x314>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d02f      	beq.n	800752a <HAL_SPI_TransmitReceive+0x314>
 80074ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d12c      	bne.n	800752a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d912      	bls.n	8007500 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074de:	881a      	ldrh	r2, [r3, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ea:	1c9a      	adds	r2, r3, #2
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	3b02      	subs	r3, #2
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074fe:	e012      	b.n	8007526 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	330c      	adds	r3, #12
 800750a:	7812      	ldrb	r2, [r2, #0]
 800750c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007512:	1c5a      	adds	r2, r3, #1
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800751c:	b29b      	uxth	r3, r3
 800751e:	3b01      	subs	r3, #1
 8007520:	b29a      	uxth	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b01      	cmp	r3, #1
 8007536:	d148      	bne.n	80075ca <HAL_SPI_TransmitReceive+0x3b4>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800753e:	b29b      	uxth	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	d042      	beq.n	80075ca <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800754a:	b29b      	uxth	r3, r3
 800754c:	2b01      	cmp	r3, #1
 800754e:	d923      	bls.n	8007598 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755a:	b292      	uxth	r2, r2
 800755c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007562:	1c9a      	adds	r2, r3, #2
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800756e:	b29b      	uxth	r3, r3
 8007570:	3b02      	subs	r3, #2
 8007572:	b29a      	uxth	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007580:	b29b      	uxth	r3, r3
 8007582:	2b01      	cmp	r3, #1
 8007584:	d81f      	bhi.n	80075c6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007594:	605a      	str	r2, [r3, #4]
 8007596:	e016      	b.n	80075c6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f103 020c 	add.w	r2, r3, #12
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a4:	7812      	ldrb	r2, [r2, #0]
 80075a6:	b2d2      	uxtb	r2, r2
 80075a8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	b29a      	uxth	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075c6:	2301      	movs	r3, #1
 80075c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075ca:	f7fa fe6b 	bl	80022a4 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d803      	bhi.n	80075e2 <HAL_SPI_TransmitReceive+0x3cc>
 80075da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e0:	d102      	bne.n	80075e8 <HAL_SPI_TransmitReceive+0x3d2>
 80075e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d107      	bne.n	80075f8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80075f6:	e026      	b.n	8007646 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f47f af57 	bne.w	80074b2 <HAL_SPI_TransmitReceive+0x29c>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800760a:	b29b      	uxth	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	f47f af50 	bne.w	80074b2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007612:	69fa      	ldr	r2, [r7, #28]
 8007614:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 fd44 	bl	80080a4 <SPI_EndRxTxTransaction>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d005      	beq.n	800762e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2220      	movs	r2, #32
 800762c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007632:	2b00      	cmp	r3, #0
 8007634:	d003      	beq.n	800763e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800763c:	e003      	b.n	8007646 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800764e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007652:	4618      	mov	r0, r3
 8007654:	3728      	adds	r7, #40	@ 0x28
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
	...

0800765c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	4613      	mov	r3, r2
 8007668:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b01      	cmp	r3, #1
 8007678:	d002      	beq.n	8007680 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800767a:	2302      	movs	r3, #2
 800767c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800767e:	e0fe      	b.n	800787e <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d110      	bne.n	80076aa <HAL_SPI_Receive_DMA+0x4e>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007690:	d10b      	bne.n	80076aa <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2204      	movs	r2, #4
 8007696:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800769a:	88fb      	ldrh	r3, [r7, #6]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	68b9      	ldr	r1, [r7, #8]
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 f8fb 	bl	800789c <HAL_SPI_TransmitReceive_DMA>
 80076a6:	4603      	mov	r3, r0
 80076a8:	e0ee      	b.n	8007888 <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d101      	bne.n	80076b8 <HAL_SPI_Receive_DMA+0x5c>
 80076b4:	2302      	movs	r3, #2
 80076b6:	e0e7      	b.n	8007888 <HAL_SPI_Receive_DMA+0x22c>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if ((pData == NULL) || (Size == 0U))
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <HAL_SPI_Receive_DMA+0x70>
 80076c6:	88fb      	ldrh	r3, [r7, #6]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d102      	bne.n	80076d2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076d0:	e0d5      	b.n	800787e <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2204      	movs	r2, #4
 80076d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	88fa      	ldrh	r2, [r7, #6]
 80076ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	88fa      	ldrh	r2, [r7, #6]
 80076f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007716:	d10f      	bne.n	8007738 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007726:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007736:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007746:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007750:	d908      	bls.n	8007764 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007760:	605a      	str	r2, [r3, #4]
 8007762:	e042      	b.n	80077ea <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007772:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800777e:	d134      	bne.n	80077ea <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800778e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007796:	b29b      	uxth	r3, r3
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	2b00      	cmp	r3, #0
 800779e:	d111      	bne.n	80077c4 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077ae:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	085b      	lsrs	r3, r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80077c2:	e012      	b.n	80077ea <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077d2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077da:	b29b      	uxth	r3, r3
 80077dc:	085b      	lsrs	r3, r3, #1
 80077de:	b29b      	uxth	r3, r3
 80077e0:	3301      	adds	r3, #1
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ee:	4a28      	ldr	r2, [pc, #160]	@ (8007890 <HAL_SPI_Receive_DMA+0x234>)
 80077f0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077f6:	4a27      	ldr	r2, [pc, #156]	@ (8007894 <HAL_SPI_Receive_DMA+0x238>)
 80077f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077fe:	4a26      	ldr	r2, [pc, #152]	@ (8007898 <HAL_SPI_Receive_DMA+0x23c>)
 8007800:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007806:	2200      	movs	r2, #0
 8007808:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	330c      	adds	r3, #12
 8007814:	4619      	mov	r1, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781a:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007822:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007824:	f7fb fecf 	bl	80035c6 <HAL_DMA_Start_IT>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d008      	beq.n	8007840 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007832:	f043 0210 	orr.w	r2, r3, #16
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800783e:	e01e      	b.n	800787e <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800784a:	2b40      	cmp	r3, #64	@ 0x40
 800784c:	d007      	beq.n	800785e <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800785c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f042 0220 	orr.w	r2, r2, #32
 800786c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f042 0201 	orr.w	r2, r2, #1
 800787c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007886:	7dfb      	ldrb	r3, [r7, #23]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	08007d41 	.word	0x08007d41
 8007894:	08007c09 	.word	0x08007c09
 8007898:	08007d79 	.word	0x08007d79

0800789c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d101      	bne.n	80078bc <HAL_SPI_TransmitReceive_DMA+0x20>
 80078b8:	2302      	movs	r3, #2
 80078ba:	e164      	b.n	8007b86 <HAL_SPI_TransmitReceive_DMA+0x2ea>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80078ca:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80078d2:	7dbb      	ldrb	r3, [r7, #22]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d00d      	beq.n	80078f4 <HAL_SPI_TransmitReceive_DMA+0x58>
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078de:	d106      	bne.n	80078ee <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d102      	bne.n	80078ee <HAL_SPI_TransmitReceive_DMA+0x52>
 80078e8:	7dbb      	ldrb	r3, [r7, #22]
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d002      	beq.n	80078f4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80078ee:	2302      	movs	r3, #2
 80078f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80078f2:	e143      	b.n	8007b7c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d005      	beq.n	8007906 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007900:	887b      	ldrh	r3, [r7, #2]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d102      	bne.n	800790c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	75fb      	strb	r3, [r7, #23]
    goto error;
 800790a:	e137      	b.n	8007b7c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b04      	cmp	r3, #4
 8007916:	d003      	beq.n	8007920 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2205      	movs	r2, #5
 800791c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	887a      	ldrh	r2, [r7, #2]
 8007930:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	887a      	ldrh	r2, [r7, #2]
 8007936:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	887a      	ldrh	r2, [r7, #2]
 8007942:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	887a      	ldrh	r2, [r7, #2]
 800794a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8007968:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007972:	d908      	bls.n	8007986 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007982:	605a      	str	r2, [r3, #4]
 8007984:	e06f      	b.n	8007a66 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007994:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079a0:	d126      	bne.n	80079f0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10f      	bne.n	80079ce <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80079bc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	085b      	lsrs	r3, r3, #1
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80079cc:	e010      	b.n	80079f0 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079dc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	085b      	lsrs	r3, r3, #1
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	3301      	adds	r3, #1
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079fa:	d134      	bne.n	8007a66 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	685a      	ldr	r2, [r3, #4]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007a0a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d111      	bne.n	8007a40 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a2a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	085b      	lsrs	r3, r3, #1
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007a3e:	e012      	b.n	8007a66 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a4e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	085b      	lsrs	r3, r3, #1
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d108      	bne.n	8007a84 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a76:	4a46      	ldr	r2, [pc, #280]	@ (8007b90 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 8007a78:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a7e:	4a45      	ldr	r2, [pc, #276]	@ (8007b94 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8007a80:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007a82:	e007      	b.n	8007a94 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a88:	4a43      	ldr	r2, [pc, #268]	@ (8007b98 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8007a8a:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a90:	4a42      	ldr	r2, [pc, #264]	@ (8007b9c <HAL_SPI_TransmitReceive_DMA+0x300>)
 8007a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a98:	4a41      	ldr	r2, [pc, #260]	@ (8007ba0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8007a9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	330c      	adds	r3, #12
 8007aae:	4619      	mov	r1, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007abc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007abe:	f7fb fd82 	bl	80035c6 <HAL_DMA_Start_IT>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d008      	beq.n	8007ada <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007acc:	f043 0210 	orr.w	r2, r3, #16
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007ad8:	e050      	b.n	8007b7c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f042 0201 	orr.w	r2, r2, #1
 8007ae8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aee:	2200      	movs	r2, #0
 8007af0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af6:	2200      	movs	r2, #0
 8007af8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007afe:	2200      	movs	r2, #0
 8007b00:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b06:	2200      	movs	r2, #0
 8007b08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b12:	4619      	mov	r1, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	330c      	adds	r3, #12
 8007b1a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b20:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007b22:	f7fb fd50 	bl	80035c6 <HAL_DMA_Start_IT>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d008      	beq.n	8007b3e <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b30:	f043 0210 	orr.w	r2, r3, #16
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007b3c:	e01e      	b.n	8007b7c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b48:	2b40      	cmp	r3, #64	@ 0x40
 8007b4a:	d007      	beq.n	8007b5c <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b5a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0220 	orr.w	r2, r2, #32
 8007b6a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0202 	orr.w	r2, r2, #2
 8007b7a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	08007d41 	.word	0x08007d41
 8007b94:	08007c09 	.word	0x08007c09
 8007b98:	08007d5d 	.word	0x08007d5d
 8007b9c:	08007cb1 	.word	0x08007cb1
 8007ba0:	08007d79 	.word	0x08007d79

08007ba4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c14:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c16:	f7fa fb45 	bl	80022a4 <HAL_GetTick>
 8007c1a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	d03c      	beq.n	8007ca4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f022 0220 	bic.w	r2, r2, #32
 8007c38:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10d      	bne.n	8007c5e <SPI_DMAReceiveCplt+0x56>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c4a:	d108      	bne.n	8007c5e <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f022 0203 	bic.w	r2, r2, #3
 8007c5a:	605a      	str	r2, [r3, #4]
 8007c5c:	e007      	b.n	8007c6e <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 0201 	bic.w	r2, r2, #1
 8007c6c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	2164      	movs	r1, #100	@ 0x64
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 f9be 	bl	8007ff4 <SPI_EndRxTransaction>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d002      	beq.n	8007c84 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2220      	movs	r2, #32
 8007c82:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f7ff ffa9 	bl	8007bf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007ca2:	e002      	b.n	8007caa <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f7ff ff7d 	bl	8007ba4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cbc:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cbe:	f7fa faf1 	bl	80022a4 <HAL_GetTick>
 8007cc2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0320 	and.w	r3, r3, #32
 8007cce:	2b20      	cmp	r3, #32
 8007cd0:	d030      	beq.n	8007d34 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f022 0220 	bic.w	r2, r2, #32
 8007ce0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	2164      	movs	r1, #100	@ 0x64
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 f9dc 	bl	80080a4 <SPI_EndRxTxTransaction>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d005      	beq.n	8007cfe <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cf6:	f043 0220 	orr.w	r2, r3, #32
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 0203 	bic.w	r2, r2, #3
 8007d0c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f7ff ff61 	bl	8007bf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007d32:	e002      	b.n	8007d3a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f7ff ff3f 	bl	8007bb8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d4c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f7ff ff3c 	bl	8007bcc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d54:	bf00      	nop
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d68:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f7ff ff38 	bl	8007be0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d70:	bf00      	nop
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d84:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0203 	bic.w	r2, r2, #3
 8007d94:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d9a:	f043 0210 	orr.w	r2, r3, #16
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f7ff ff22 	bl	8007bf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007db0:	bf00      	nop
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	603b      	str	r3, [r7, #0]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007dc8:	f7fa fa6c 	bl	80022a4 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd0:	1a9b      	subs	r3, r3, r2
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007dd8:	f7fa fa64 	bl	80022a4 <HAL_GetTick>
 8007ddc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007dde:	4b39      	ldr	r3, [pc, #228]	@ (8007ec4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	015b      	lsls	r3, r3, #5
 8007de4:	0d1b      	lsrs	r3, r3, #20
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	fb02 f303 	mul.w	r3, r2, r3
 8007dec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dee:	e054      	b.n	8007e9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df6:	d050      	beq.n	8007e9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007df8:	f7fa fa54 	bl	80022a4 <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	69fa      	ldr	r2, [r7, #28]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d902      	bls.n	8007e0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d13d      	bne.n	8007e8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e26:	d111      	bne.n	8007e4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e30:	d004      	beq.n	8007e3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e3a:	d107      	bne.n	8007e4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e54:	d10f      	bne.n	8007e76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e017      	b.n	8007eba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	3b01      	subs	r3, #1
 8007e98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	bf0c      	ite	eq
 8007eaa:	2301      	moveq	r3, #1
 8007eac:	2300      	movne	r3, #0
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d19b      	bne.n	8007df0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3720      	adds	r7, #32
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	20000000 	.word	0x20000000

08007ec8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08a      	sub	sp, #40	@ 0x28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007eda:	f7fa f9e3 	bl	80022a4 <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee2:	1a9b      	subs	r3, r3, r2
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007eea:	f7fa f9db 	bl	80022a4 <HAL_GetTick>
 8007eee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	330c      	adds	r3, #12
 8007ef6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007ef8:	4b3d      	ldr	r3, [pc, #244]	@ (8007ff0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	4613      	mov	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	00da      	lsls	r2, r3, #3
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	0d1b      	lsrs	r3, r3, #20
 8007f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f0a:	fb02 f303 	mul.w	r3, r2, r3
 8007f0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007f10:	e060      	b.n	8007fd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007f18:	d107      	bne.n	8007f2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d104      	bne.n	8007f2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f30:	d050      	beq.n	8007fd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f32:	f7fa f9b7 	bl	80022a4 <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d902      	bls.n	8007f48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d13d      	bne.n	8007fc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	685a      	ldr	r2, [r3, #4]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007f56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f60:	d111      	bne.n	8007f86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f6a:	d004      	beq.n	8007f76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f74:	d107      	bne.n	8007f86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f8e:	d10f      	bne.n	8007fb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007fae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e010      	b.n	8007fe6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	689a      	ldr	r2, [r3, #8]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	4013      	ands	r3, r2
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d196      	bne.n	8007f12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3728      	adds	r7, #40	@ 0x28
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000000 	.word	0x20000000

08007ff4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af02      	add	r7, sp, #8
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008008:	d111      	bne.n	800802e <SPI_EndRxTransaction+0x3a>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008012:	d004      	beq.n	800801e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800801c:	d107      	bne.n	800802e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800802c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2200      	movs	r2, #0
 8008036:	2180      	movs	r1, #128	@ 0x80
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f7ff febd 	bl	8007db8 <SPI_WaitFlagStateUntilTimeout>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d007      	beq.n	8008054 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008048:	f043 0220 	orr.w	r2, r3, #32
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e023      	b.n	800809c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800805c:	d11d      	bne.n	800809a <SPI_EndRxTransaction+0xa6>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008066:	d004      	beq.n	8008072 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008070:	d113      	bne.n	800809a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2200      	movs	r2, #0
 800807a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f7ff ff22 	bl	8007ec8 <SPI_WaitFifoStateUntilTimeout>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d007      	beq.n	800809a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800808e:	f043 0220 	orr.w	r2, r3, #32
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e000      	b.n	800809c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af02      	add	r7, sp, #8
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f7ff ff03 	bl	8007ec8 <SPI_WaitFifoStateUntilTimeout>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d007      	beq.n	80080d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080cc:	f043 0220 	orr.w	r2, r3, #32
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e027      	b.n	8008128 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2200      	movs	r2, #0
 80080e0:	2180      	movs	r1, #128	@ 0x80
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f7ff fe68 	bl	8007db8 <SPI_WaitFlagStateUntilTimeout>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d007      	beq.n	80080fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080f2:	f043 0220 	orr.w	r2, r3, #32
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e014      	b.n	8008128 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	2200      	movs	r2, #0
 8008106:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f7ff fedc 	bl	8007ec8 <SPI_WaitFifoStateUntilTimeout>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d007      	beq.n	8008126 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800811a:	f043 0220 	orr.w	r2, r3, #32
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e000      	b.n	8008128 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e049      	b.n	80081d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d106      	bne.n	800815c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7f9 fd4e 	bl	8001bf8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2202      	movs	r2, #2
 8008160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	3304      	adds	r3, #4
 800816c:	4619      	mov	r1, r3
 800816e:	4610      	mov	r0, r2
 8008170:	f000 f94a 	bl	8008408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081ec:	2300      	movs	r3, #0
 80081ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d101      	bne.n	80081fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80081fa:	2302      	movs	r3, #2
 80081fc:	e0ff      	b.n	80083fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b14      	cmp	r3, #20
 800820a:	f200 80f0 	bhi.w	80083ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800820e:	a201      	add	r2, pc, #4	@ (adr r2, 8008214 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008214:	08008269 	.word	0x08008269
 8008218:	080083ef 	.word	0x080083ef
 800821c:	080083ef 	.word	0x080083ef
 8008220:	080083ef 	.word	0x080083ef
 8008224:	080082a9 	.word	0x080082a9
 8008228:	080083ef 	.word	0x080083ef
 800822c:	080083ef 	.word	0x080083ef
 8008230:	080083ef 	.word	0x080083ef
 8008234:	080082eb 	.word	0x080082eb
 8008238:	080083ef 	.word	0x080083ef
 800823c:	080083ef 	.word	0x080083ef
 8008240:	080083ef 	.word	0x080083ef
 8008244:	0800832b 	.word	0x0800832b
 8008248:	080083ef 	.word	0x080083ef
 800824c:	080083ef 	.word	0x080083ef
 8008250:	080083ef 	.word	0x080083ef
 8008254:	0800836d 	.word	0x0800836d
 8008258:	080083ef 	.word	0x080083ef
 800825c:	080083ef 	.word	0x080083ef
 8008260:	080083ef 	.word	0x080083ef
 8008264:	080083ad 	.word	0x080083ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68b9      	ldr	r1, [r7, #8]
 800826e:	4618      	mov	r0, r3
 8008270:	f000 f964 	bl	800853c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	699a      	ldr	r2, [r3, #24]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f042 0208 	orr.w	r2, r2, #8
 8008282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	699a      	ldr	r2, [r3, #24]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f022 0204 	bic.w	r2, r2, #4
 8008292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6999      	ldr	r1, [r3, #24]
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	691a      	ldr	r2, [r3, #16]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	430a      	orrs	r2, r1
 80082a4:	619a      	str	r2, [r3, #24]
      break;
 80082a6:	e0a5      	b.n	80083f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68b9      	ldr	r1, [r7, #8]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 f9d4 	bl	800865c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	699a      	ldr	r2, [r3, #24]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	699a      	ldr	r2, [r3, #24]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6999      	ldr	r1, [r3, #24]
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	021a      	lsls	r2, r3, #8
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	430a      	orrs	r2, r1
 80082e6:	619a      	str	r2, [r3, #24]
      break;
 80082e8:	e084      	b.n	80083f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68b9      	ldr	r1, [r7, #8]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 fa3d 	bl	8008770 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	69da      	ldr	r2, [r3, #28]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f042 0208 	orr.w	r2, r2, #8
 8008304:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	69da      	ldr	r2, [r3, #28]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f022 0204 	bic.w	r2, r2, #4
 8008314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	69d9      	ldr	r1, [r3, #28]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	691a      	ldr	r2, [r3, #16]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	430a      	orrs	r2, r1
 8008326:	61da      	str	r2, [r3, #28]
      break;
 8008328:	e064      	b.n	80083f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68b9      	ldr	r1, [r7, #8]
 8008330:	4618      	mov	r0, r3
 8008332:	f000 faa5 	bl	8008880 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	69da      	ldr	r2, [r3, #28]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	69da      	ldr	r2, [r3, #28]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	69d9      	ldr	r1, [r3, #28]
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	021a      	lsls	r2, r3, #8
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	61da      	str	r2, [r3, #28]
      break;
 800836a:	e043      	b.n	80083f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68b9      	ldr	r1, [r7, #8]
 8008372:	4618      	mov	r0, r3
 8008374:	f000 faee 	bl	8008954 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f042 0208 	orr.w	r2, r2, #8
 8008386:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f022 0204 	bic.w	r2, r2, #4
 8008396:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	691a      	ldr	r2, [r3, #16]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80083aa:	e023      	b.n	80083f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68b9      	ldr	r1, [r7, #8]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 fb32 	bl	8008a1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	021a      	lsls	r2, r3, #8
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80083ec:	e002      	b.n	80083f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	75fb      	strb	r3, [r7, #23]
      break;
 80083f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop

08008408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a40      	ldr	r2, [pc, #256]	@ (800851c <TIM_Base_SetConfig+0x114>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d013      	beq.n	8008448 <TIM_Base_SetConfig+0x40>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008426:	d00f      	beq.n	8008448 <TIM_Base_SetConfig+0x40>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a3d      	ldr	r2, [pc, #244]	@ (8008520 <TIM_Base_SetConfig+0x118>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d00b      	beq.n	8008448 <TIM_Base_SetConfig+0x40>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a3c      	ldr	r2, [pc, #240]	@ (8008524 <TIM_Base_SetConfig+0x11c>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d007      	beq.n	8008448 <TIM_Base_SetConfig+0x40>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a3b      	ldr	r2, [pc, #236]	@ (8008528 <TIM_Base_SetConfig+0x120>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d003      	beq.n	8008448 <TIM_Base_SetConfig+0x40>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a3a      	ldr	r2, [pc, #232]	@ (800852c <TIM_Base_SetConfig+0x124>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d108      	bne.n	800845a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800844e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4313      	orrs	r3, r2
 8008458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a2f      	ldr	r2, [pc, #188]	@ (800851c <TIM_Base_SetConfig+0x114>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d01f      	beq.n	80084a2 <TIM_Base_SetConfig+0x9a>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008468:	d01b      	beq.n	80084a2 <TIM_Base_SetConfig+0x9a>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a2c      	ldr	r2, [pc, #176]	@ (8008520 <TIM_Base_SetConfig+0x118>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d017      	beq.n	80084a2 <TIM_Base_SetConfig+0x9a>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a2b      	ldr	r2, [pc, #172]	@ (8008524 <TIM_Base_SetConfig+0x11c>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d013      	beq.n	80084a2 <TIM_Base_SetConfig+0x9a>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a2a      	ldr	r2, [pc, #168]	@ (8008528 <TIM_Base_SetConfig+0x120>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d00f      	beq.n	80084a2 <TIM_Base_SetConfig+0x9a>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a29      	ldr	r2, [pc, #164]	@ (800852c <TIM_Base_SetConfig+0x124>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d00b      	beq.n	80084a2 <TIM_Base_SetConfig+0x9a>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a28      	ldr	r2, [pc, #160]	@ (8008530 <TIM_Base_SetConfig+0x128>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d007      	beq.n	80084a2 <TIM_Base_SetConfig+0x9a>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a27      	ldr	r2, [pc, #156]	@ (8008534 <TIM_Base_SetConfig+0x12c>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d003      	beq.n	80084a2 <TIM_Base_SetConfig+0x9a>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a26      	ldr	r2, [pc, #152]	@ (8008538 <TIM_Base_SetConfig+0x130>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d108      	bne.n	80084b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	4313      	orrs	r3, r2
 80084c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	689a      	ldr	r2, [r3, #8]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a10      	ldr	r2, [pc, #64]	@ (800851c <TIM_Base_SetConfig+0x114>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d00f      	beq.n	8008500 <TIM_Base_SetConfig+0xf8>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a12      	ldr	r2, [pc, #72]	@ (800852c <TIM_Base_SetConfig+0x124>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d00b      	beq.n	8008500 <TIM_Base_SetConfig+0xf8>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a11      	ldr	r2, [pc, #68]	@ (8008530 <TIM_Base_SetConfig+0x128>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d007      	beq.n	8008500 <TIM_Base_SetConfig+0xf8>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a10      	ldr	r2, [pc, #64]	@ (8008534 <TIM_Base_SetConfig+0x12c>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d003      	beq.n	8008500 <TIM_Base_SetConfig+0xf8>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a0f      	ldr	r2, [pc, #60]	@ (8008538 <TIM_Base_SetConfig+0x130>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d103      	bne.n	8008508 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	691a      	ldr	r2, [r3, #16]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	615a      	str	r2, [r3, #20]
}
 800850e:	bf00      	nop
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	40012c00 	.word	0x40012c00
 8008520:	40000400 	.word	0x40000400
 8008524:	40000800 	.word	0x40000800
 8008528:	40000c00 	.word	0x40000c00
 800852c:	40013400 	.word	0x40013400
 8008530:	40014000 	.word	0x40014000
 8008534:	40014400 	.word	0x40014400
 8008538:	40014800 	.word	0x40014800

0800853c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a1b      	ldr	r3, [r3, #32]
 8008550:	f023 0201 	bic.w	r2, r3, #1
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800856a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800856e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 0303 	bic.w	r3, r3, #3
 8008576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4313      	orrs	r3, r2
 8008580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	f023 0302 	bic.w	r3, r3, #2
 8008588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	4313      	orrs	r3, r2
 8008592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a2c      	ldr	r2, [pc, #176]	@ (8008648 <TIM_OC1_SetConfig+0x10c>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d00f      	beq.n	80085bc <TIM_OC1_SetConfig+0x80>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a2b      	ldr	r2, [pc, #172]	@ (800864c <TIM_OC1_SetConfig+0x110>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d00b      	beq.n	80085bc <TIM_OC1_SetConfig+0x80>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a2a      	ldr	r2, [pc, #168]	@ (8008650 <TIM_OC1_SetConfig+0x114>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d007      	beq.n	80085bc <TIM_OC1_SetConfig+0x80>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a29      	ldr	r2, [pc, #164]	@ (8008654 <TIM_OC1_SetConfig+0x118>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d003      	beq.n	80085bc <TIM_OC1_SetConfig+0x80>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a28      	ldr	r2, [pc, #160]	@ (8008658 <TIM_OC1_SetConfig+0x11c>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d10c      	bne.n	80085d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	f023 0308 	bic.w	r3, r3, #8
 80085c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	f023 0304 	bic.w	r3, r3, #4
 80085d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a1b      	ldr	r2, [pc, #108]	@ (8008648 <TIM_OC1_SetConfig+0x10c>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d00f      	beq.n	80085fe <TIM_OC1_SetConfig+0xc2>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a1a      	ldr	r2, [pc, #104]	@ (800864c <TIM_OC1_SetConfig+0x110>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d00b      	beq.n	80085fe <TIM_OC1_SetConfig+0xc2>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a19      	ldr	r2, [pc, #100]	@ (8008650 <TIM_OC1_SetConfig+0x114>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d007      	beq.n	80085fe <TIM_OC1_SetConfig+0xc2>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a18      	ldr	r2, [pc, #96]	@ (8008654 <TIM_OC1_SetConfig+0x118>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d003      	beq.n	80085fe <TIM_OC1_SetConfig+0xc2>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a17      	ldr	r2, [pc, #92]	@ (8008658 <TIM_OC1_SetConfig+0x11c>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d111      	bne.n	8008622 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800860c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	4313      	orrs	r3, r2
 8008616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	4313      	orrs	r3, r2
 8008620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	621a      	str	r2, [r3, #32]
}
 800863c:	bf00      	nop
 800863e:	371c      	adds	r7, #28
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	40012c00 	.word	0x40012c00
 800864c:	40013400 	.word	0x40013400
 8008650:	40014000 	.word	0x40014000
 8008654:	40014400 	.word	0x40014400
 8008658:	40014800 	.word	0x40014800

0800865c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a1b      	ldr	r3, [r3, #32]
 8008670:	f023 0210 	bic.w	r2, r3, #16
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800868a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800868e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	021b      	lsls	r3, r3, #8
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	f023 0320 	bic.w	r3, r3, #32
 80086aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	011b      	lsls	r3, r3, #4
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a28      	ldr	r2, [pc, #160]	@ (800875c <TIM_OC2_SetConfig+0x100>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d003      	beq.n	80086c8 <TIM_OC2_SetConfig+0x6c>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a27      	ldr	r2, [pc, #156]	@ (8008760 <TIM_OC2_SetConfig+0x104>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d10d      	bne.n	80086e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	011b      	lsls	r3, r3, #4
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	4313      	orrs	r3, r2
 80086da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a1d      	ldr	r2, [pc, #116]	@ (800875c <TIM_OC2_SetConfig+0x100>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d00f      	beq.n	800870c <TIM_OC2_SetConfig+0xb0>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a1c      	ldr	r2, [pc, #112]	@ (8008760 <TIM_OC2_SetConfig+0x104>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d00b      	beq.n	800870c <TIM_OC2_SetConfig+0xb0>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a1b      	ldr	r2, [pc, #108]	@ (8008764 <TIM_OC2_SetConfig+0x108>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d007      	beq.n	800870c <TIM_OC2_SetConfig+0xb0>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a1a      	ldr	r2, [pc, #104]	@ (8008768 <TIM_OC2_SetConfig+0x10c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d003      	beq.n	800870c <TIM_OC2_SetConfig+0xb0>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a19      	ldr	r2, [pc, #100]	@ (800876c <TIM_OC2_SetConfig+0x110>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d113      	bne.n	8008734 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800871a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	695b      	ldr	r3, [r3, #20]
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	4313      	orrs	r3, r2
 8008726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	4313      	orrs	r3, r2
 8008732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	621a      	str	r2, [r3, #32]
}
 800874e:	bf00      	nop
 8008750:	371c      	adds	r7, #28
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	40012c00 	.word	0x40012c00
 8008760:	40013400 	.word	0x40013400
 8008764:	40014000 	.word	0x40014000
 8008768:	40014400 	.word	0x40014400
 800876c:	40014800 	.word	0x40014800

08008770 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008770:	b480      	push	{r7}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a1b      	ldr	r3, [r3, #32]
 8008784:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	69db      	ldr	r3, [r3, #28]
 8008796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800879e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f023 0303 	bic.w	r3, r3, #3
 80087aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	021b      	lsls	r3, r3, #8
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a27      	ldr	r2, [pc, #156]	@ (800886c <TIM_OC3_SetConfig+0xfc>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d003      	beq.n	80087da <TIM_OC3_SetConfig+0x6a>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a26      	ldr	r2, [pc, #152]	@ (8008870 <TIM_OC3_SetConfig+0x100>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d10d      	bne.n	80087f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80087e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	021b      	lsls	r3, r3, #8
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80087f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a1c      	ldr	r2, [pc, #112]	@ (800886c <TIM_OC3_SetConfig+0xfc>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d00f      	beq.n	800881e <TIM_OC3_SetConfig+0xae>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a1b      	ldr	r2, [pc, #108]	@ (8008870 <TIM_OC3_SetConfig+0x100>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d00b      	beq.n	800881e <TIM_OC3_SetConfig+0xae>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a1a      	ldr	r2, [pc, #104]	@ (8008874 <TIM_OC3_SetConfig+0x104>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d007      	beq.n	800881e <TIM_OC3_SetConfig+0xae>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a19      	ldr	r2, [pc, #100]	@ (8008878 <TIM_OC3_SetConfig+0x108>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d003      	beq.n	800881e <TIM_OC3_SetConfig+0xae>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a18      	ldr	r2, [pc, #96]	@ (800887c <TIM_OC3_SetConfig+0x10c>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d113      	bne.n	8008846 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800882c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	011b      	lsls	r3, r3, #4
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	4313      	orrs	r3, r2
 8008838:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	011b      	lsls	r3, r3, #4
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	4313      	orrs	r3, r2
 8008844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	697a      	ldr	r2, [r7, #20]
 800885e:	621a      	str	r2, [r3, #32]
}
 8008860:	bf00      	nop
 8008862:	371c      	adds	r7, #28
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	40012c00 	.word	0x40012c00
 8008870:	40013400 	.word	0x40013400
 8008874:	40014000 	.word	0x40014000
 8008878:	40014400 	.word	0x40014400
 800887c:	40014800 	.word	0x40014800

08008880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a1b      	ldr	r3, [r3, #32]
 8008894:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80088ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	021b      	lsls	r3, r3, #8
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	031b      	lsls	r3, r3, #12
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	4313      	orrs	r3, r2
 80088da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a18      	ldr	r2, [pc, #96]	@ (8008940 <TIM_OC4_SetConfig+0xc0>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d00f      	beq.n	8008904 <TIM_OC4_SetConfig+0x84>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a17      	ldr	r2, [pc, #92]	@ (8008944 <TIM_OC4_SetConfig+0xc4>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d00b      	beq.n	8008904 <TIM_OC4_SetConfig+0x84>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a16      	ldr	r2, [pc, #88]	@ (8008948 <TIM_OC4_SetConfig+0xc8>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d007      	beq.n	8008904 <TIM_OC4_SetConfig+0x84>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a15      	ldr	r2, [pc, #84]	@ (800894c <TIM_OC4_SetConfig+0xcc>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d003      	beq.n	8008904 <TIM_OC4_SetConfig+0x84>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a14      	ldr	r2, [pc, #80]	@ (8008950 <TIM_OC4_SetConfig+0xd0>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d109      	bne.n	8008918 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800890a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	019b      	lsls	r3, r3, #6
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	4313      	orrs	r3, r2
 8008916:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	685a      	ldr	r2, [r3, #4]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	621a      	str	r2, [r3, #32]
}
 8008932:	bf00      	nop
 8008934:	371c      	adds	r7, #28
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	40012c00 	.word	0x40012c00
 8008944:	40013400 	.word	0x40013400
 8008948:	40014000 	.word	0x40014000
 800894c:	40014400 	.word	0x40014400
 8008950:	40014800 	.word	0x40014800

08008954 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a1b      	ldr	r3, [r3, #32]
 8008968:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800897a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	4313      	orrs	r3, r2
 8008990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008998:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	041b      	lsls	r3, r3, #16
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a17      	ldr	r2, [pc, #92]	@ (8008a08 <TIM_OC5_SetConfig+0xb4>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d00f      	beq.n	80089ce <TIM_OC5_SetConfig+0x7a>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a16      	ldr	r2, [pc, #88]	@ (8008a0c <TIM_OC5_SetConfig+0xb8>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d00b      	beq.n	80089ce <TIM_OC5_SetConfig+0x7a>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a15      	ldr	r2, [pc, #84]	@ (8008a10 <TIM_OC5_SetConfig+0xbc>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d007      	beq.n	80089ce <TIM_OC5_SetConfig+0x7a>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a14      	ldr	r2, [pc, #80]	@ (8008a14 <TIM_OC5_SetConfig+0xc0>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d003      	beq.n	80089ce <TIM_OC5_SetConfig+0x7a>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a13      	ldr	r2, [pc, #76]	@ (8008a18 <TIM_OC5_SetConfig+0xc4>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d109      	bne.n	80089e2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	695b      	ldr	r3, [r3, #20]
 80089da:	021b      	lsls	r3, r3, #8
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	4313      	orrs	r3, r2
 80089e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	685a      	ldr	r2, [r3, #4]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	621a      	str	r2, [r3, #32]
}
 80089fc:	bf00      	nop
 80089fe:	371c      	adds	r7, #28
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr
 8008a08:	40012c00 	.word	0x40012c00
 8008a0c:	40013400 	.word	0x40013400
 8008a10:	40014000 	.word	0x40014000
 8008a14:	40014400 	.word	0x40014400
 8008a18:	40014800 	.word	0x40014800

08008a1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b087      	sub	sp, #28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	021b      	lsls	r3, r3, #8
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	051b      	lsls	r3, r3, #20
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a18      	ldr	r2, [pc, #96]	@ (8008ad4 <TIM_OC6_SetConfig+0xb8>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d00f      	beq.n	8008a98 <TIM_OC6_SetConfig+0x7c>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a17      	ldr	r2, [pc, #92]	@ (8008ad8 <TIM_OC6_SetConfig+0xbc>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d00b      	beq.n	8008a98 <TIM_OC6_SetConfig+0x7c>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a16      	ldr	r2, [pc, #88]	@ (8008adc <TIM_OC6_SetConfig+0xc0>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d007      	beq.n	8008a98 <TIM_OC6_SetConfig+0x7c>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a15      	ldr	r2, [pc, #84]	@ (8008ae0 <TIM_OC6_SetConfig+0xc4>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d003      	beq.n	8008a98 <TIM_OC6_SetConfig+0x7c>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a14      	ldr	r2, [pc, #80]	@ (8008ae4 <TIM_OC6_SetConfig+0xc8>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d109      	bne.n	8008aac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	029b      	lsls	r3, r3, #10
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	621a      	str	r2, [r3, #32]
}
 8008ac6:	bf00      	nop
 8008ac8:	371c      	adds	r7, #28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	40012c00 	.word	0x40012c00
 8008ad8:	40013400 	.word	0x40013400
 8008adc:	40014000 	.word	0x40014000
 8008ae0:	40014400 	.word	0x40014400
 8008ae4:	40014800 	.word	0x40014800

08008ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d101      	bne.n	8008b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008afc:	2302      	movs	r3, #2
 8008afe:	e068      	b.n	8008bd2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a2e      	ldr	r2, [pc, #184]	@ (8008be0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d004      	beq.n	8008b34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a2d      	ldr	r2, [pc, #180]	@ (8008be4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d108      	bne.n	8008b46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008b3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a1e      	ldr	r2, [pc, #120]	@ (8008be0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d01d      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b72:	d018      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a1b      	ldr	r2, [pc, #108]	@ (8008be8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d013      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a1a      	ldr	r2, [pc, #104]	@ (8008bec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d00e      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a18      	ldr	r2, [pc, #96]	@ (8008bf0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d009      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a13      	ldr	r2, [pc, #76]	@ (8008be4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d004      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a14      	ldr	r2, [pc, #80]	@ (8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d10c      	bne.n	8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	40012c00 	.word	0x40012c00
 8008be4:	40013400 	.word	0x40013400
 8008be8:	40000400 	.word	0x40000400
 8008bec:	40000800 	.word	0x40000800
 8008bf0:	40000c00 	.word	0x40000c00
 8008bf4:	40014000 	.word	0x40014000

08008bf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c02:	2300      	movs	r3, #0
 8008c04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d101      	bne.n	8008c14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c10:	2302      	movs	r3, #2
 8008c12:	e065      	b.n	8008ce0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	041b      	lsls	r3, r3, #16
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a16      	ldr	r2, [pc, #88]	@ (8008cec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d004      	beq.n	8008ca2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a14      	ldr	r2, [pc, #80]	@ (8008cf0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d115      	bne.n	8008cce <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cac:	051b      	lsls	r3, r3, #20
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	69db      	ldr	r3, [r3, #28]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3714      	adds	r7, #20
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	40012c00 	.word	0x40012c00
 8008cf0:	40013400 	.word	0x40013400

08008cf4 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b08b      	sub	sp, #44	@ 0x2c
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d101      	bne.n	8008d14 <HAL_TIMEx_ConfigBreakInput+0x20>
 8008d10:	2302      	movs	r3, #2
 8008d12:	e0af      	b.n	8008e74 <HAL_TIMEx_ConfigBreakInput+0x180>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3b01      	subs	r3, #1
 8008d22:	2b07      	cmp	r3, #7
 8008d24:	d83a      	bhi.n	8008d9c <HAL_TIMEx_ConfigBreakInput+0xa8>
 8008d26:	a201      	add	r2, pc, #4	@ (adr r2, 8008d2c <HAL_TIMEx_ConfigBreakInput+0x38>)
 8008d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2c:	08008d4d 	.word	0x08008d4d
 8008d30:	08008d61 	.word	0x08008d61
 8008d34:	08008d9d 	.word	0x08008d9d
 8008d38:	08008d75 	.word	0x08008d75
 8008d3c:	08008d9d 	.word	0x08008d9d
 8008d40:	08008d9d 	.word	0x08008d9d
 8008d44:	08008d9d 	.word	0x08008d9d
 8008d48:	08008d89 	.word	0x08008d89
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 8008d50:	2300      	movs	r3, #0
 8008d52:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 8008d54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d58:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 8008d5a:	2309      	movs	r3, #9
 8008d5c:	613b      	str	r3, [r7, #16]
      break;
 8008d5e:	e026      	b.n	8008dae <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 8008d60:	2302      	movs	r3, #2
 8008d62:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 8008d64:	2301      	movs	r3, #1
 8008d66:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 8008d68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d6c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 8008d6e:	230a      	movs	r3, #10
 8008d70:	613b      	str	r3, [r7, #16]
      break;
 8008d72:	e01c      	b.n	8008dae <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 8008d74:	2304      	movs	r3, #4
 8008d76:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 8008d78:	2302      	movs	r3, #2
 8008d7a:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 8008d7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008d80:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 8008d82:	230b      	movs	r3, #11
 8008d84:	613b      	str	r3, [r7, #16]
      break;
 8008d86:	e012      	b.n	8008dae <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 8008d88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008d8c:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 8008d8e:	2308      	movs	r3, #8
 8008d90:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	613b      	str	r3, [r7, #16]
      break;
 8008d9a:	e008      	b.n	8008dae <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 8008da0:	2300      	movs	r3, #0
 8008da2:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 8008da4:	2300      	movs	r3, #0
 8008da6:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	613b      	str	r3, [r7, #16]
      break;
 8008dac:	bf00      	nop
    }
  }

  switch (BreakInput)
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d003      	beq.n	8008dbc <HAL_TIMEx_ConfigBreakInput+0xc8>
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d029      	beq.n	8008e0e <HAL_TIMEx_ConfigBreakInput+0x11a>
 8008dba:	e051      	b.n	8008e60 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dc2:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	43db      	mvns	r3, r3
 8008dc8:	6a3a      	ldr	r2, [r7, #32]
 8008dca:	4013      	ands	r3, r2
 8008dcc:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	409a      	lsls	r2, r3
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	4013      	ands	r3, r2
 8008dda:	6a3a      	ldr	r2, [r7, #32]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b08      	cmp	r3, #8
 8008de6:	d00d      	beq.n	8008e04 <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	43db      	mvns	r3, r3
 8008dec:	6a3a      	ldr	r2, [r7, #32]
 8008dee:	4013      	ands	r3, r2
 8008df0:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	689a      	ldr	r2, [r3, #8]
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	409a      	lsls	r2, r3
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	6a3a      	ldr	r2, [r7, #32]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	6a3a      	ldr	r2, [r7, #32]
 8008e0a:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8008e0c:	e02c      	b.n	8008e68 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e14:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	43db      	mvns	r3, r3
 8008e1a:	6a3a      	ldr	r2, [r7, #32]
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	409a      	lsls	r2, r3
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	6a3a      	ldr	r2, [r7, #32]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b08      	cmp	r3, #8
 8008e38:	d00d      	beq.n	8008e56 <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	43db      	mvns	r3, r3
 8008e3e:	6a3a      	ldr	r2, [r7, #32]
 8008e40:	4013      	ands	r3, r2
 8008e42:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	409a      	lsls	r2, r3
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	4013      	ands	r3, r2
 8008e50:	6a3a      	ldr	r2, [r7, #32]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	6a3a      	ldr	r2, [r7, #32]
 8008e5c:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8008e5e:	e003      	b.n	8008e68 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008e66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	372c      	adds	r7, #44	@ 0x2c
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <memset>:
 8008e80:	4402      	add	r2, r0
 8008e82:	4603      	mov	r3, r0
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d100      	bne.n	8008e8a <memset+0xa>
 8008e88:	4770      	bx	lr
 8008e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e8e:	e7f9      	b.n	8008e84 <memset+0x4>

08008e90 <__libc_init_array>:
 8008e90:	b570      	push	{r4, r5, r6, lr}
 8008e92:	4d0d      	ldr	r5, [pc, #52]	@ (8008ec8 <__libc_init_array+0x38>)
 8008e94:	4c0d      	ldr	r4, [pc, #52]	@ (8008ecc <__libc_init_array+0x3c>)
 8008e96:	1b64      	subs	r4, r4, r5
 8008e98:	10a4      	asrs	r4, r4, #2
 8008e9a:	2600      	movs	r6, #0
 8008e9c:	42a6      	cmp	r6, r4
 8008e9e:	d109      	bne.n	8008eb4 <__libc_init_array+0x24>
 8008ea0:	4d0b      	ldr	r5, [pc, #44]	@ (8008ed0 <__libc_init_array+0x40>)
 8008ea2:	4c0c      	ldr	r4, [pc, #48]	@ (8008ed4 <__libc_init_array+0x44>)
 8008ea4:	f000 f818 	bl	8008ed8 <_init>
 8008ea8:	1b64      	subs	r4, r4, r5
 8008eaa:	10a4      	asrs	r4, r4, #2
 8008eac:	2600      	movs	r6, #0
 8008eae:	42a6      	cmp	r6, r4
 8008eb0:	d105      	bne.n	8008ebe <__libc_init_array+0x2e>
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eb8:	4798      	blx	r3
 8008eba:	3601      	adds	r6, #1
 8008ebc:	e7ee      	b.n	8008e9c <__libc_init_array+0xc>
 8008ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ec2:	4798      	blx	r3
 8008ec4:	3601      	adds	r6, #1
 8008ec6:	e7f2      	b.n	8008eae <__libc_init_array+0x1e>
 8008ec8:	08008f40 	.word	0x08008f40
 8008ecc:	08008f40 	.word	0x08008f40
 8008ed0:	08008f40 	.word	0x08008f40
 8008ed4:	08008f44 	.word	0x08008f44

08008ed8 <_init>:
 8008ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eda:	bf00      	nop
 8008edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ede:	bc08      	pop	{r3}
 8008ee0:	469e      	mov	lr, r3
 8008ee2:	4770      	bx	lr

08008ee4 <_fini>:
 8008ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee6:	bf00      	nop
 8008ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eea:	bc08      	pop	{r3}
 8008eec:	469e      	mov	lr, r3
 8008eee:	4770      	bx	lr

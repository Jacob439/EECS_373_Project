
LoRa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008198  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008358  08008358  00018358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083a0  080083a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080083a0  080083a0  000183a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083a8  080083a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083a8  080083a8  000183a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083ac  080083ac  000183ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080083b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  2000000c  080083bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  080083bc  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000139ba  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002670  00000000  00000000  00033a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  000360b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe2  00000000  00000000  00037520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bd65  00000000  00000000  00038502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015daf  00000000  00000000  00064267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00116971  00000000  00000000  0007a016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057e0  00000000  00000000  00190988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00196168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008340 	.word	0x08008340

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08008340 	.word	0x08008340

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b970 	b.w	80004f8 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	460b      	mov	r3, r1
 8000506:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 800050c:	78fb      	ldrb	r3, [r7, #3]
 800050e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000512:	b2db      	uxtb	r3, r3
 8000514:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6858      	ldr	r0, [r3, #4]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	8adb      	ldrh	r3, [r3, #22]
 800051e:	2200      	movs	r2, #0
 8000520:	4619      	mov	r1, r3
 8000522:	f003 f87d 	bl	8003620 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6818      	ldr	r0, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	1cf9      	adds	r1, r7, #3
 8000530:	2201      	movs	r2, #1
 8000532:	f006 f9a6 	bl	8006882 <HAL_SPI_Transmit>
 8000536:	4603      	mov	r3, r0
 8000538:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	f107 010f 	add.w	r1, r7, #15
 8000546:	2201      	movs	r2, #1
 8000548:	f006 fb10 	bl	8006b6c <HAL_SPI_Receive>
 800054c:	4603      	mov	r3, r0
 800054e:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	6858      	ldr	r0, [r3, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	8adb      	ldrh	r3, [r3, #22]
 8000558:	2201      	movs	r2, #1
 800055a:	4619      	mov	r1, r3
 800055c:	f003 f860 	bl	8003620 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000560:	7bfb      	ldrb	r3, [r7, #15]
}
 8000562:	4618      	mov	r0, r3
 8000564:	3718      	adds	r7, #24
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b084      	sub	sp, #16
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	460b      	mov	r3, r1
 8000574:	70fb      	strb	r3, [r7, #3]
 8000576:	4613      	mov	r3, r2
 8000578:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800057a:	78fb      	ldrb	r3, [r7, #3]
 800057c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000580:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000582:	78bb      	ldrb	r3, [r7, #2]
 8000584:	021b      	lsls	r3, r3, #8
 8000586:	b21a      	sxth	r2, r3
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	b21b      	sxth	r3, r3
 800058c:	4313      	orrs	r3, r2
 800058e:	b21b      	sxth	r3, r3
 8000590:	b29b      	uxth	r3, r3
 8000592:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6858      	ldr	r0, [r3, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	8adb      	ldrh	r3, [r3, #22]
 800059c:	2200      	movs	r2, #0
 800059e:	4619      	mov	r1, r3
 80005a0:	f003 f83e 	bl	8003620 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	6818      	ldr	r0, [r3, #0]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	f107 010a 	add.w	r1, r7, #10
 80005b0:	2202      	movs	r2, #2
 80005b2:	f006 f966 	bl	8006882 <HAL_SPI_Transmit>
 80005b6:	4603      	mov	r3, r0
 80005b8:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6858      	ldr	r0, [r3, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	8adb      	ldrh	r3, [r3, #22]
 80005c2:	2201      	movs	r2, #1
 80005c4:	4619      	mov	r1, r3
 80005c6:	f003 f82b 	bl	8003620 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	460b      	mov	r3, r1
 80005dc:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	461a      	mov	r2, r3
 80005e8:	2101      	movs	r1, #1
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f7ff ffbd 	bl	800056a <write_register>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	2b2c      	cmp	r3, #44	; 0x2c
 8000608:	d801      	bhi.n	800060e <set_OCP+0x16>
    imax = 45;
 800060a:	232d      	movs	r3, #45	; 0x2d
 800060c:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 800060e:	78fb      	ldrb	r3, [r7, #3]
 8000610:	2bf0      	cmp	r3, #240	; 0xf0
 8000612:	d901      	bls.n	8000618 <set_OCP+0x20>
    imax = 240;
 8000614:	23f0      	movs	r3, #240	; 0xf0
 8000616:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8000618:	78fb      	ldrb	r3, [r7, #3]
 800061a:	2b81      	cmp	r3, #129	; 0x81
 800061c:	d809      	bhi.n	8000632 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	3b2d      	subs	r3, #45	; 0x2d
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <set_OCP+0x68>)
 8000624:	fb82 1203 	smull	r1, r2, r2, r3
 8000628:	1052      	asrs	r2, r2, #1
 800062a:	17db      	asrs	r3, r3, #31
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e008      	b.n	8000644 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8000632:	78fb      	ldrb	r3, [r7, #3]
 8000634:	331e      	adds	r3, #30
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <set_OCP+0x68>)
 8000638:	fb82 1203 	smull	r1, r2, r2, r3
 800063c:	1092      	asrs	r2, r2, #2
 800063e:	17db      	asrs	r3, r3, #31
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	f043 0320 	orr.w	r3, r3, #32
 800064a:	b2db      	uxtb	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	210b      	movs	r1, #11
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ff8a 	bl	800056a <write_register>
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	66666667 	.word	0x66666667

08000664 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8000664:	b5b0      	push	{r4, r5, r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 800066c:	211d      	movs	r1, #29
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f7ff ff44 	bl	80004fc <read_register>
 8000674:	4603      	mov	r3, r0
 8000676:	091b      	lsrs	r3, r3, #4
 8000678:	b2db      	uxtb	r3, r3
 800067a:	b2db      	uxtb	r3, r3
 800067c:	2200      	movs	r2, #0
 800067e:	461c      	mov	r4, r3
 8000680:	4615      	mov	r5, r2
 8000682:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8000686:	211e      	movs	r1, #30
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff ff37 	bl	80004fc <read_register>
 800068e:	4603      	mov	r3, r0
 8000690:	091b      	lsrs	r3, r3, #4
 8000692:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8000694:	2304      	movs	r3, #4
 8000696:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	2b0a      	cmp	r3, #10
 800069c:	d908      	bls.n	80006b0 <set_low_data_rate_optimization+0x4c>
 800069e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80006a2:	1fd1      	subs	r1, r2, #7
 80006a4:	430b      	orrs	r3, r1
 80006a6:	d103      	bne.n	80006b0 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 80006a8:	7ffb      	ldrb	r3, [r7, #31]
 80006aa:	f043 0308 	orr.w	r3, r3, #8
 80006ae:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 80006b0:	7ffb      	ldrb	r3, [r7, #31]
 80006b2:	461a      	mov	r2, r3
 80006b4:	2126      	movs	r1, #38	; 0x26
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ff57 	bl	800056a <write_register>
}
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bdb0      	pop	{r4, r5, r7, pc}

080006c4 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 80006cc:	2100      	movs	r1, #0
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff ff7f 	bl	80005d2 <set_mode>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 80006e4:	2101      	movs	r1, #1
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ff73 	bl	80005d2 <set_mode>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80006fc:	211d      	movs	r1, #29
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f7ff fefc 	bl	80004fc <read_register>
 8000704:	4603      	mov	r3, r0
 8000706:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	f023 0301 	bic.w	r3, r3, #1
 800070e:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	461a      	mov	r2, r3
 8000714:	211d      	movs	r1, #29
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f7ff ff27 	bl	800056a <write_register>
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	691b      	ldr	r3, [r3, #16]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d10e      	bne.n	8000756 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	2b0f      	cmp	r3, #15
 800073c:	d901      	bls.n	8000742 <lora_set_tx_power+0x1e>
      level = 15;
 800073e:	230f      	movs	r3, #15
 8000740:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8000742:	78fb      	ldrb	r3, [r7, #3]
 8000744:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000748:	b2db      	uxtb	r3, r3
 800074a:	461a      	mov	r2, r3
 800074c:	2109      	movs	r1, #9
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff ff0b 	bl	800056a <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8000754:	e02e      	b.n	80007b4 <lora_set_tx_power+0x90>
    if (level > 20) {
 8000756:	78fb      	ldrb	r3, [r7, #3]
 8000758:	2b14      	cmp	r3, #20
 800075a:	d901      	bls.n	8000760 <lora_set_tx_power+0x3c>
      level = 20;
 800075c:	2314      	movs	r3, #20
 800075e:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d801      	bhi.n	800076a <lora_set_tx_power+0x46>
      level = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800076a:	78fb      	ldrb	r3, [r7, #3]
 800076c:	2b11      	cmp	r3, #17
 800076e:	d90c      	bls.n	800078a <lora_set_tx_power+0x66>
      level -= 3;
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	3b03      	subs	r3, #3
 8000774:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8000776:	2287      	movs	r2, #135	; 0x87
 8000778:	214d      	movs	r1, #77	; 0x4d
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff fef5 	bl	800056a <write_register>
      set_OCP(lora, 140);
 8000780:	218c      	movs	r1, #140	; 0x8c
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff ff38 	bl	80005f8 <set_OCP>
 8000788:	e008      	b.n	800079c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800078a:	2284      	movs	r2, #132	; 0x84
 800078c:	214d      	movs	r1, #77	; 0x4d
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff feeb 	bl	800056a <write_register>
      set_OCP(lora, 97);
 8000794:	2161      	movs	r1, #97	; 0x61
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ff2e 	bl	80005f8 <set_OCP>
    level -= 2;
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	3b02      	subs	r3, #2
 80007a0:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 80007a2:	78fb      	ldrb	r3, [r7, #3]
 80007a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	461a      	mov	r2, r3
 80007ac:	2109      	movs	r1, #9
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff fedb 	bl	800056a <write_register>
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 80007c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	f04f 0100 	mov.w	r1, #0
 80007d4:	04d9      	lsls	r1, r3, #19
 80007d6:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80007da:	04d0      	lsls	r0, r2, #19
 80007dc:	4a19      	ldr	r2, [pc, #100]	; (8000844 <lora_set_frequency+0x88>)
 80007de:	f04f 0300 	mov.w	r3, #0
 80007e2:	f7ff fd0d 	bl	8000200 <__aeabi_uldivmod>
 80007e6:	4602      	mov	r2, r0
 80007e8:	460b      	mov	r3, r1
 80007ea:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80007ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80007f2:	f04f 0200 	mov.w	r2, #0
 80007f6:	f04f 0300 	mov.w	r3, #0
 80007fa:	0c02      	lsrs	r2, r0, #16
 80007fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000800:	0c0b      	lsrs	r3, r1, #16
 8000802:	b2d3      	uxtb	r3, r2
 8000804:	461a      	mov	r2, r3
 8000806:	2106      	movs	r1, #6
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f7ff feae 	bl	800056a <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 800080e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000812:	f04f 0200 	mov.w	r2, #0
 8000816:	f04f 0300 	mov.w	r3, #0
 800081a:	0a02      	lsrs	r2, r0, #8
 800081c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000820:	0a0b      	lsrs	r3, r1, #8
 8000822:	b2d3      	uxtb	r3, r2
 8000824:	461a      	mov	r2, r3
 8000826:	2107      	movs	r1, #7
 8000828:	68f8      	ldr	r0, [r7, #12]
 800082a:	f7ff fe9e 	bl	800056a <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 800082e:	7c3b      	ldrb	r3, [r7, #16]
 8000830:	461a      	mov	r2, r3
 8000832:	2108      	movs	r1, #8
 8000834:	68f8      	ldr	r0, [r7, #12]
 8000836:	f7ff fe98 	bl	800056a <write_register>
}
 800083a:	bf00      	nop
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	01e84800 	.word	0x01e84800

08000848 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8000854:	78fb      	ldrb	r3, [r7, #3]
 8000856:	2b05      	cmp	r3, #5
 8000858:	d802      	bhi.n	8000860 <lora_set_spreading_factor+0x18>
    sf = 6;
 800085a:	2306      	movs	r3, #6
 800085c:	70fb      	strb	r3, [r7, #3]
 800085e:	e004      	b.n	800086a <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	2b0c      	cmp	r3, #12
 8000864:	d901      	bls.n	800086a <lora_set_spreading_factor+0x22>
    sf = 12;
 8000866:	230c      	movs	r3, #12
 8000868:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 800086a:	78fb      	ldrb	r3, [r7, #3]
 800086c:	2b06      	cmp	r3, #6
 800086e:	d10a      	bne.n	8000886 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8000870:	22c5      	movs	r2, #197	; 0xc5
 8000872:	2131      	movs	r1, #49	; 0x31
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff fe78 	bl	800056a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 800087a:	220c      	movs	r2, #12
 800087c:	2137      	movs	r1, #55	; 0x37
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff fe73 	bl	800056a <write_register>
 8000884:	e009      	b.n	800089a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8000886:	22c3      	movs	r2, #195	; 0xc3
 8000888:	2131      	movs	r1, #49	; 0x31
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff fe6d 	bl	800056a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000890:	220a      	movs	r2, #10
 8000892:	2137      	movs	r1, #55	; 0x37
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f7ff fe68 	bl	800056a <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800089a:	211e      	movs	r1, #30
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff fe2d 	bl	80004fc <read_register>
 80008a2:	4603      	mov	r3, r0
 80008a4:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 80008a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008aa:	f003 030f 	and.w	r3, r3, #15
 80008ae:	b25a      	sxtb	r2, r3
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	461a      	mov	r2, r3
 80008c0:	211e      	movs	r1, #30
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff fe51 	bl	800056a <write_register>

  set_low_data_rate_optimization(lora);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff fecb 	bl	8000664 <set_low_data_rate_optimization>
}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	460b      	mov	r3, r1
 80008e0:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 80008e2:	887b      	ldrh	r3, [r7, #2]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	461a      	mov	r2, r3
 80008ec:	2120      	movs	r1, #32
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff fe3b 	bl	800056a <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 80008f4:	887b      	ldrh	r3, [r7, #2]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	f003 030f 	and.w	r3, r3, #15
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	2121      	movs	r1, #33	; 0x21
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff fe31 	bl	800056a <write_register>
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8000918:	2142      	movs	r1, #66	; 0x42
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff fdee 	bl	80004fc <read_register>
 8000920:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b086      	sub	sp, #24
 800092e:	af00      	add	r7, sp, #0
 8000930:	60f8      	str	r0, [r7, #12]
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
 8000936:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	887a      	ldrh	r2, [r7, #2]
 8000948:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 800094a:	6a3a      	ldr	r2, [r7, #32]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2201      	movs	r2, #1
 8000954:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	2200      	movs	r2, #0
 800095a:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2200      	movs	r2, #0
 8000960:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000968:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 800096a:	68f8      	ldr	r0, [r7, #12]
 800096c:	f7ff ffd0 	bl	8000910 <lora_version>
 8000970:	4603      	mov	r3, r0
 8000972:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8000974:	7dfb      	ldrb	r3, [r7, #23]
 8000976:	2b12      	cmp	r3, #18
 8000978:	d001      	beq.n	800097e <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 800097a:	2304      	movs	r3, #4
 800097c:	e031      	b.n	80009e2 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f7ff fea0 	bl	80006c4 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f7ff fe9d 	bl	80006c4 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 800098a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f7ff ff14 	bl	80007bc <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000994:	2107      	movs	r1, #7
 8000996:	68f8      	ldr	r0, [r7, #12]
 8000998:	f7ff ff56 	bl	8000848 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 800099c:	210a      	movs	r1, #10
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f7ff ff99 	bl	80008d6 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 80009a4:	68f8      	ldr	r0, [r7, #12]
 80009a6:	f7ff fea5 	bl	80006f4 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 80009aa:	210c      	movs	r1, #12
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f7ff fda5 	bl	80004fc <read_register>
 80009b2:	4603      	mov	r3, r0
 80009b4:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 80009b6:	7dbb      	ldrb	r3, [r7, #22]
 80009b8:	f043 0303 	orr.w	r3, r3, #3
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	461a      	mov	r2, r3
 80009c0:	210c      	movs	r1, #12
 80009c2:	68f8      	ldr	r0, [r7, #12]
 80009c4:	f7ff fdd1 	bl	800056a <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 80009c8:	2204      	movs	r2, #4
 80009ca:	2126      	movs	r1, #38	; 0x26
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f7ff fdcc 	bl	800056a <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 80009d2:	2111      	movs	r1, #17
 80009d4:	68f8      	ldr	r0, [r7, #12]
 80009d6:	f7ff fea5 	bl	8000724 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f7ff fe7e 	bl	80006dc <lora_mode_standby>

  return LORA_OK;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	0000      	movs	r0, r0
 80009ec:	0000      	movs	r0, r0
	...

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f6:	f001 faaa 	bl	8001f4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fa:	f000 f831 	bl	8000a60 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009fe:	f000 f881 	bl	8000b04 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a02:	f000 fd31 	bl	8001468 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a06:	f000 f8af 	bl	8000b68 <MX_ADC1_Init>
  MX_COMP1_Init();
 8000a0a:	f000 f911 	bl	8000c30 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000a0e:	f000 f93d 	bl	8000c8c <MX_COMP2_Init>
  MX_SAI1_Init();
 8000a12:	f000 f967 	bl	8000ce4 <MX_SAI1_Init>
  MX_SAI2_Init();
 8000a16:	f000 f9fd 	bl	8000e14 <MX_SAI2_Init>
  MX_TIM1_Init();
 8000a1a:	f000 faa1 	bl	8000f60 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a1e:	f000 fb6f 	bl	8001100 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a22:	f000 fbd1 	bl	80011c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a26:	f000 fc35 	bl	8001294 <MX_TIM4_Init>
  MX_TIM15_Init();
 8000a2a:	f000 fc99 	bl	8001360 <MX_TIM15_Init>
  MX_SPI2_Init();
 8000a2e:	f000 fa59 	bl	8000ee4 <MX_SPI2_Init>
//  HAL_SPI_Transmit(&hspi2, 0x00, 0, HAL_MAX_DELAY);
//  HAL
  lora_sx1276 lora;

    // SX1276 compatible module connected to SPI1, NSS pin connected to GPIO with label LORA_NSS
    uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US);
 8000a32:	1d38      	adds	r0, r7, #4
 8000a34:	a308      	add	r3, pc, #32	; (adr r3, 8000a58 <main+0x68>)
 8000a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a3a:	e9cd 2300 	strd	r2, r3, [sp]
 8000a3e:	2301      	movs	r3, #1
 8000a40:	4a03      	ldr	r2, [pc, #12]	; (8000a50 <main+0x60>)
 8000a42:	4904      	ldr	r1, [pc, #16]	; (8000a54 <main+0x64>)
 8000a44:	f7ff ff71 	bl	800092a <lora_init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	77fb      	strb	r3, [r7, #31]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <main+0x5c>
 8000a4e:	bf00      	nop
 8000a50:	48000c00 	.word	0x48000c00
 8000a54:	200002a4 	.word	0x200002a4
 8000a58:	3689cac0 	.word	0x3689cac0
 8000a5c:	00000000 	.word	0x00000000

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b096      	sub	sp, #88	; 0x58
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2244      	movs	r2, #68	; 0x44
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f007 fc3a 	bl	80082e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	463b      	mov	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a86:	f002 fe03 	bl	8003690 <HAL_PWREx_ControlVoltageScaling>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a90:	f000 fe42 	bl	8001718 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a94:	2310      	movs	r3, #16
 8000a96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000aa0:	2360      	movs	r3, #96	; 0x60
 8000aa2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aac:	2301      	movs	r3, #1
 8000aae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 fe97 	bl	80037f8 <HAL_RCC_OscConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000ad0:	f000 fe22 	bl	8001718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ae8:	463b      	mov	r3, r7
 8000aea:	2101      	movs	r1, #1
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 fa9d 	bl	800402c <HAL_RCC_ClockConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000af8:	f000 fe0e 	bl	8001718 <Error_Handler>
  }
}
 8000afc:	bf00      	nop
 8000afe:	3758      	adds	r7, #88	; 0x58
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0a6      	sub	sp, #152	; 0x98
 8000b08:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2294      	movs	r2, #148	; 0x94
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f007 fbe9 	bl	80082e8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8000b16:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8000b1a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b30:	2301      	movs	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000b34:	2318      	movs	r3, #24
 8000b36:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <PeriphCommonClock_Config+0x60>)
 8000b46:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f003 fd2c 	bl	80045a8 <HAL_RCCEx_PeriphCLKConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000b56:	f000 fddf 	bl	8001718 <Error_Handler>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3798      	adds	r7, #152	; 0x98
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	01010000 	.word	0x01010000

08000b68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
 8000b7c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b7e:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <MX_ADC1_Init+0xbc>)
 8000b80:	4a29      	ldr	r2, [pc, #164]	; (8000c28 <MX_ADC1_Init+0xc0>)
 8000b82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b84:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <MX_ADC1_Init+0xbc>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b8a:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <MX_ADC1_Init+0xbc>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b90:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <MX_ADC1_Init+0xbc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b96:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <MX_ADC1_Init+0xbc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b9c:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <MX_ADC1_Init+0xbc>)
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <MX_ADC1_Init+0xbc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <MX_ADC1_Init+0xbc>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <MX_ADC1_Init+0xbc>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <MX_ADC1_Init+0xbc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <MX_ADC1_Init+0xbc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_ADC1_Init+0xbc>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_ADC1_Init+0xbc>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_ADC1_Init+0xbc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_ADC1_Init+0xbc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bde:	4811      	ldr	r0, [pc, #68]	; (8000c24 <MX_ADC1_Init+0xbc>)
 8000be0:	f001 fbca 	bl	8002378 <HAL_ADC_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000bea:	f000 fd95 	bl	8001718 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_ADC1_Init+0xc4>)
 8000bf0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bf2:	2306      	movs	r3, #6
 8000bf4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bfa:	237f      	movs	r3, #127	; 0x7f
 8000bfc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bfe:	2304      	movs	r3, #4
 8000c00:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c06:	463b      	mov	r3, r7
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4806      	ldr	r0, [pc, #24]	; (8000c24 <MX_ADC1_Init+0xbc>)
 8000c0c:	f001 fcfa 	bl	8002604 <HAL_ADC_ConfigChannel>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c16:	f000 fd7f 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000028 	.word	0x20000028
 8000c28:	50040000 	.word	0x50040000
 8000c2c:	04300002 	.word	0x04300002

08000c30 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <MX_COMP1_Init+0x50>)
 8000c36:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <MX_COMP1_Init+0x54>)
 8000c38:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_COMP1_Init+0x50>)
 8000c3c:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <MX_COMP1_Init+0x58>)
 8000c3e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MX_COMP1_Init+0x50>)
 8000c42:	2280      	movs	r2, #128	; 0x80
 8000c44:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_COMP1_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_COMP1_Init+0x50>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <MX_COMP1_Init+0x50>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_COMP1_Init+0x50>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <MX_COMP1_Init+0x50>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_COMP1_Init+0x50>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_COMP1_Init+0x50>)
 8000c6c:	f002 f96e 	bl	8002f4c <HAL_COMP_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8000c76:	f000 fd4f 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000090 	.word	0x20000090
 8000c84:	40010200 	.word	0x40010200
 8000c88:	00800030 	.word	0x00800030

08000c8c <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <MX_COMP2_Init+0x50>)
 8000c92:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <MX_COMP2_Init+0x54>)
 8000c94:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_COMP2_Init+0x50>)
 8000c98:	2270      	movs	r2, #112	; 0x70
 8000c9a:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_COMP2_Init+0x50>)
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_COMP2_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_COMP2_Init+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_COMP2_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_COMP2_Init+0x50>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_COMP2_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_COMP2_Init+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_COMP2_Init+0x50>)
 8000cc8:	f002 f940 	bl	8002f4c <HAL_COMP_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8000cd2:	f000 fd21 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000bc 	.word	0x200000bc
 8000ce0:	40010204 	.word	0x40010204

08000ce4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000ce8:	4b45      	ldr	r3, [pc, #276]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000cea:	4a46      	ldr	r2, [pc, #280]	; (8000e04 <MX_SAI1_Init+0x120>)
 8000cec:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000cee:	4b44      	ldr	r3, [pc, #272]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000cf4:	4b42      	ldr	r3, [pc, #264]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000cfa:	4b41      	ldr	r3, [pc, #260]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000cfc:	2240      	movs	r2, #64	; 0x40
 8000cfe:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d00:	4b3f      	ldr	r3, [pc, #252]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d06:	4b3e      	ldr	r3, [pc, #248]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d0c:	4b3c      	ldr	r3, [pc, #240]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d12:	4b3b      	ldr	r3, [pc, #236]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d18:	4b39      	ldr	r3, [pc, #228]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000d1e:	4b38      	ldr	r3, [pc, #224]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d24:	4b36      	ldr	r3, [pc, #216]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d2a:	4b35      	ldr	r3, [pc, #212]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d2c:	4a36      	ldr	r2, [pc, #216]	; (8000e08 <MX_SAI1_Init+0x124>)
 8000d2e:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d30:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d36:	4b32      	ldr	r3, [pc, #200]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d3c:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d42:	4b2f      	ldr	r3, [pc, #188]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000d48:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8000d50:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000d56:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d5c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000d5e:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d60:	2208      	movs	r2, #8
 8000d62:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000d64:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d6a:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d70:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d76:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000d7c:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d82:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000d94:	481a      	ldr	r0, [pc, #104]	; (8000e00 <MX_SAI1_Init+0x11c>)
 8000d96:	f005 f985 	bl	80060a4 <HAL_SAI_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8000da0:	f000 fcba 	bl	8001718 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <MX_SAI1_Init+0x128>)
 8000da6:	4a1a      	ldr	r2, [pc, #104]	; (8000e10 <MX_SAI1_Init+0x12c>)
 8000da8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <MX_SAI1_Init+0x128>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <MX_SAI1_Init+0x128>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MX_SAI1_Init+0x128>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <MX_SAI1_Init+0x128>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_SAI1_Init+0x128>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <MX_SAI1_Init+0x128>)
 8000dca:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <MX_SAI1_Init+0x124>)
 8000dcc:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_SAI1_Init+0x128>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dd4:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <MX_SAI1_Init+0x128>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_SAI1_Init+0x128>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000de0:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <MX_SAI1_Init+0x128>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000de6:	2302      	movs	r3, #2
 8000de8:	2200      	movs	r2, #0
 8000dea:	2100      	movs	r1, #0
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <MX_SAI1_Init+0x128>)
 8000dee:	f005 f927 	bl	8006040 <HAL_SAI_InitProtocol>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8000df8:	f000 fc8e 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200000e8 	.word	0x200000e8
 8000e04:	40015424 	.word	0x40015424
 8000e08:	0002ee00 	.word	0x0002ee00
 8000e0c:	2000017c 	.word	0x2000017c
 8000e10:	40015404 	.word	0x40015404

08000e14 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000e18:	4b2f      	ldr	r3, [pc, #188]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e1a:	4a30      	ldr	r2, [pc, #192]	; (8000edc <MX_SAI2_Init+0xc8>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e24:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000e2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e2c:	2240      	movs	r2, #64	; 0x40
 8000e2e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e30:	4b29      	ldr	r3, [pc, #164]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e36:	4b28      	ldr	r3, [pc, #160]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e3c:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e42:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e48:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000e4e:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e54:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000e5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e5c:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <MX_SAI2_Init+0xcc>)
 8000e5e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e8c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e90:	2208      	movs	r2, #8
 8000e92:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_SAI2_Init+0xc4>)
 8000ec6:	f005 f8ed 	bl	80060a4 <HAL_SAI_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8000ed0:	f000 fc22 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000210 	.word	0x20000210
 8000edc:	40015804 	.word	0x40015804
 8000ee0:	0002ee00 	.word	0x0002ee00

08000ee4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <MX_SPI2_Init+0x74>)
 8000eea:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <MX_SPI2_Init+0x78>)
 8000eec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_SPI2_Init+0x74>)
 8000ef0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <MX_SPI2_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <MX_SPI2_Init+0x74>)
 8000efe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f02:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_SPI2_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <MX_SPI2_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_SPI2_Init+0x74>)
 8000f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f16:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_SPI2_Init+0x74>)
 8000f1a:	2218      	movs	r2, #24
 8000f1c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_SPI2_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_SPI2_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <MX_SPI2_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_SPI2_Init+0x74>)
 8000f32:	2207      	movs	r2, #7
 8000f34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <MX_SPI2_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_SPI2_Init+0x74>)
 8000f3e:	2208      	movs	r2, #8
 8000f40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_SPI2_Init+0x74>)
 8000f44:	f005 fbfa 	bl	800673c <HAL_SPI_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f4e:	f000 fbe3 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200002a4 	.word	0x200002a4
 8000f5c:	40003800 	.word	0x40003800

08000f60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b098      	sub	sp, #96	; 0x60
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000f72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]
 8000f8e:	615a      	str	r2, [r3, #20]
 8000f90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f92:	463b      	mov	r3, r7
 8000f94:	222c      	movs	r2, #44	; 0x2c
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f007 f9a5 	bl	80082e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f9e:	4b56      	ldr	r3, [pc, #344]	; (80010f8 <MX_TIM1_Init+0x198>)
 8000fa0:	4a56      	ldr	r2, [pc, #344]	; (80010fc <MX_TIM1_Init+0x19c>)
 8000fa2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fa4:	4b54      	ldr	r3, [pc, #336]	; (80010f8 <MX_TIM1_Init+0x198>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000faa:	4b53      	ldr	r3, [pc, #332]	; (80010f8 <MX_TIM1_Init+0x198>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fb0:	4b51      	ldr	r3, [pc, #324]	; (80010f8 <MX_TIM1_Init+0x198>)
 8000fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb8:	4b4f      	ldr	r3, [pc, #316]	; (80010f8 <MX_TIM1_Init+0x198>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fbe:	4b4e      	ldr	r3, [pc, #312]	; (80010f8 <MX_TIM1_Init+0x198>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc4:	4b4c      	ldr	r3, [pc, #304]	; (80010f8 <MX_TIM1_Init+0x198>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fca:	484b      	ldr	r0, [pc, #300]	; (80010f8 <MX_TIM1_Init+0x198>)
 8000fcc:	f006 fae4 	bl	8007598 <HAL_TIM_PWM_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fd6:	f000 fb9f 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fe6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fea:	4619      	mov	r1, r3
 8000fec:	4842      	ldr	r0, [pc, #264]	; (80010f8 <MX_TIM1_Init+0x198>)
 8000fee:	f006 ffaf 	bl	8007f50 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000ff8:	f000 fb8e 	bl	8001718 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001000:	2301      	movs	r3, #1
 8001002:	64fb      	str	r3, [r7, #76]	; 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001004:	2300      	movs	r3, #0
 8001006:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001008:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800100c:	461a      	mov	r2, r3
 800100e:	2101      	movs	r1, #1
 8001010:	4839      	ldr	r0, [pc, #228]	; (80010f8 <MX_TIM1_Init+0x198>)
 8001012:	f007 f8a3 	bl	800815c <HAL_TIMEx_ConfigBreakInput>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800101c:	f000 fb7c 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001020:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001024:	461a      	mov	r2, r3
 8001026:	2102      	movs	r1, #2
 8001028:	4833      	ldr	r0, [pc, #204]	; (80010f8 <MX_TIM1_Init+0x198>)
 800102a:	f007 f897 	bl	800815c <HAL_TIMEx_ConfigBreakInput>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001034:	f000 fb70 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001038:	2360      	movs	r3, #96	; 0x60
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001040:	2300      	movs	r3, #0
 8001042:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001044:	2300      	movs	r3, #0
 8001046:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001058:	2200      	movs	r2, #0
 800105a:	4619      	mov	r1, r3
 800105c:	4826      	ldr	r0, [pc, #152]	; (80010f8 <MX_TIM1_Init+0x198>)
 800105e:	f006 faf3 	bl	8007648 <HAL_TIM_PWM_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001068:	f000 fb56 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800106c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001070:	2204      	movs	r2, #4
 8001072:	4619      	mov	r1, r3
 8001074:	4820      	ldr	r0, [pc, #128]	; (80010f8 <MX_TIM1_Init+0x198>)
 8001076:	f006 fae7 	bl	8007648 <HAL_TIM_PWM_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8001080:	f000 fb4a 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001084:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001088:	2208      	movs	r2, #8
 800108a:	4619      	mov	r1, r3
 800108c:	481a      	ldr	r0, [pc, #104]	; (80010f8 <MX_TIM1_Init+0x198>)
 800108e:	f006 fadb 	bl	8007648 <HAL_TIM_PWM_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001098:	f000 fb3e 	bl	8001718 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800109c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010a0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80010a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80010b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80010c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010ca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010d4:	463b      	mov	r3, r7
 80010d6:	4619      	mov	r1, r3
 80010d8:	4807      	ldr	r0, [pc, #28]	; (80010f8 <MX_TIM1_Init+0x198>)
 80010da:	f006 ffc1 	bl	8008060 <HAL_TIMEx_ConfigBreakDeadTime>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 80010e4:	f000 fb18 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010e8:	4803      	ldr	r0, [pc, #12]	; (80010f8 <MX_TIM1_Init+0x198>)
 80010ea:	f000 fd07 	bl	8001afc <HAL_TIM_MspPostInit>

}
 80010ee:	bf00      	nop
 80010f0:	3760      	adds	r7, #96	; 0x60
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000308 	.word	0x20000308
 80010fc:	40012c00 	.word	0x40012c00

08001100 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	615a      	str	r2, [r3, #20]
 8001122:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001124:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <MX_TIM2_Init+0xc4>)
 8001126:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800112a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <MX_TIM2_Init+0xc4>)
 800112e:	2200      	movs	r2, #0
 8001130:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <MX_TIM2_Init+0xc4>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <MX_TIM2_Init+0xc4>)
 800113a:	f04f 32ff 	mov.w	r2, #4294967295
 800113e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001140:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <MX_TIM2_Init+0xc4>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <MX_TIM2_Init+0xc4>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800114c:	481d      	ldr	r0, [pc, #116]	; (80011c4 <MX_TIM2_Init+0xc4>)
 800114e:	f006 fa23 	bl	8007598 <HAL_TIM_PWM_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001158:	f000 fade 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	4816      	ldr	r0, [pc, #88]	; (80011c4 <MX_TIM2_Init+0xc4>)
 800116c:	f006 fef0 	bl	8007f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001176:	f000 facf 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800117a:	2360      	movs	r3, #96	; 0x60
 800117c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800118a:	463b      	mov	r3, r7
 800118c:	2200      	movs	r2, #0
 800118e:	4619      	mov	r1, r3
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <MX_TIM2_Init+0xc4>)
 8001192:	f006 fa59 	bl	8007648 <HAL_TIM_PWM_ConfigChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800119c:	f000 fabc 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011a0:	463b      	mov	r3, r7
 80011a2:	2208      	movs	r2, #8
 80011a4:	4619      	mov	r1, r3
 80011a6:	4807      	ldr	r0, [pc, #28]	; (80011c4 <MX_TIM2_Init+0xc4>)
 80011a8:	f006 fa4e 	bl	8007648 <HAL_TIM_PWM_ConfigChannel>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80011b2:	f000 fab1 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011b6:	4803      	ldr	r0, [pc, #12]	; (80011c4 <MX_TIM2_Init+0xc4>)
 80011b8:	f000 fca0 	bl	8001afc <HAL_TIM_MspPostInit>

}
 80011bc:	bf00      	nop
 80011be:	3728      	adds	r7, #40	; 0x28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000354 	.word	0x20000354

080011c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011da:	463b      	mov	r3, r7
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
 80011e8:	615a      	str	r2, [r3, #20]
 80011ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ec:	4b27      	ldr	r3, [pc, #156]	; (800128c <MX_TIM3_Init+0xc4>)
 80011ee:	4a28      	ldr	r2, [pc, #160]	; (8001290 <MX_TIM3_Init+0xc8>)
 80011f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <MX_TIM3_Init+0xc4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f8:	4b24      	ldr	r3, [pc, #144]	; (800128c <MX_TIM3_Init+0xc4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011fe:	4b23      	ldr	r3, [pc, #140]	; (800128c <MX_TIM3_Init+0xc4>)
 8001200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001204:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001206:	4b21      	ldr	r3, [pc, #132]	; (800128c <MX_TIM3_Init+0xc4>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120c:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_TIM3_Init+0xc4>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001212:	481e      	ldr	r0, [pc, #120]	; (800128c <MX_TIM3_Init+0xc4>)
 8001214:	f006 f9c0 	bl	8007598 <HAL_TIM_PWM_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800121e:	f000 fa7b 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	4816      	ldr	r0, [pc, #88]	; (800128c <MX_TIM3_Init+0xc4>)
 8001232:	f006 fe8d 	bl	8007f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800123c:	f000 fa6c 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001240:	2360      	movs	r3, #96	; 0x60
 8001242:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	2204      	movs	r2, #4
 8001254:	4619      	mov	r1, r3
 8001256:	480d      	ldr	r0, [pc, #52]	; (800128c <MX_TIM3_Init+0xc4>)
 8001258:	f006 f9f6 	bl	8007648 <HAL_TIM_PWM_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001262:	f000 fa59 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001266:	463b      	mov	r3, r7
 8001268:	2208      	movs	r2, #8
 800126a:	4619      	mov	r1, r3
 800126c:	4807      	ldr	r0, [pc, #28]	; (800128c <MX_TIM3_Init+0xc4>)
 800126e:	f006 f9eb 	bl	8007648 <HAL_TIM_PWM_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001278:	f000 fa4e 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800127c:	4803      	ldr	r0, [pc, #12]	; (800128c <MX_TIM3_Init+0xc4>)
 800127e:	f000 fc3d 	bl	8001afc <HAL_TIM_MspPostInit>

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200003a0 	.word	0x200003a0
 8001290:	40000400 	.word	0x40000400

08001294 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a6:	463b      	mov	r3, r7
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
 80012b4:	615a      	str	r2, [r3, #20]
 80012b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012b8:	4b27      	ldr	r3, [pc, #156]	; (8001358 <MX_TIM4_Init+0xc4>)
 80012ba:	4a28      	ldr	r2, [pc, #160]	; (800135c <MX_TIM4_Init+0xc8>)
 80012bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <MX_TIM4_Init+0xc4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <MX_TIM4_Init+0xc4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012ca:	4b23      	ldr	r3, [pc, #140]	; (8001358 <MX_TIM4_Init+0xc4>)
 80012cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b21      	ldr	r3, [pc, #132]	; (8001358 <MX_TIM4_Init+0xc4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <MX_TIM4_Init+0xc4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012de:	481e      	ldr	r0, [pc, #120]	; (8001358 <MX_TIM4_Init+0xc4>)
 80012e0:	f006 f95a 	bl	8007598 <HAL_TIM_PWM_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80012ea:	f000 fa15 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	4816      	ldr	r0, [pc, #88]	; (8001358 <MX_TIM4_Init+0xc4>)
 80012fe:	f006 fe27 	bl	8007f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001308:	f000 fa06 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130c:	2360      	movs	r3, #96	; 0x60
 800130e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	2208      	movs	r2, #8
 8001320:	4619      	mov	r1, r3
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_TIM4_Init+0xc4>)
 8001324:	f006 f990 	bl	8007648 <HAL_TIM_PWM_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800132e:	f000 f9f3 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001332:	463b      	mov	r3, r7
 8001334:	220c      	movs	r2, #12
 8001336:	4619      	mov	r1, r3
 8001338:	4807      	ldr	r0, [pc, #28]	; (8001358 <MX_TIM4_Init+0xc4>)
 800133a:	f006 f985 	bl	8007648 <HAL_TIM_PWM_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001344:	f000 f9e8 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <MX_TIM4_Init+0xc4>)
 800134a:	f000 fbd7 	bl	8001afc <HAL_TIM_MspPostInit>

}
 800134e:	bf00      	nop
 8001350:	3728      	adds	r7, #40	; 0x28
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200003ec 	.word	0x200003ec
 800135c:	40000800 	.word	0x40000800

08001360 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b096      	sub	sp, #88	; 0x58
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001366:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001372:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	615a      	str	r2, [r3, #20]
 8001384:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	222c      	movs	r2, #44	; 0x2c
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f006 ffab 	bl	80082e8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001392:	4b33      	ldr	r3, [pc, #204]	; (8001460 <MX_TIM15_Init+0x100>)
 8001394:	4a33      	ldr	r2, [pc, #204]	; (8001464 <MX_TIM15_Init+0x104>)
 8001396:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001398:	4b31      	ldr	r3, [pc, #196]	; (8001460 <MX_TIM15_Init+0x100>)
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b30      	ldr	r3, [pc, #192]	; (8001460 <MX_TIM15_Init+0x100>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80013a4:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <MX_TIM15_Init+0x100>)
 80013a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013aa:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	4b2c      	ldr	r3, [pc, #176]	; (8001460 <MX_TIM15_Init+0x100>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80013b2:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <MX_TIM15_Init+0x100>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b8:	4b29      	ldr	r3, [pc, #164]	; (8001460 <MX_TIM15_Init+0x100>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80013be:	4828      	ldr	r0, [pc, #160]	; (8001460 <MX_TIM15_Init+0x100>)
 80013c0:	f006 f8ea 	bl	8007598 <HAL_TIM_PWM_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80013ca:	f000 f9a5 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80013d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013da:	4619      	mov	r1, r3
 80013dc:	4820      	ldr	r0, [pc, #128]	; (8001460 <MX_TIM15_Init+0x100>)
 80013de:	f006 fdb7 	bl	8007f50 <HAL_TIMEx_MasterConfigSynchronization>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80013e8:	f000 f996 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ec:	2360      	movs	r3, #96	; 0x60
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013f8:	2300      	movs	r3, #0
 80013fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001408:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800140c:	2200      	movs	r2, #0
 800140e:	4619      	mov	r1, r3
 8001410:	4813      	ldr	r0, [pc, #76]	; (8001460 <MX_TIM15_Init+0x100>)
 8001412:	f006 f919 	bl	8007648 <HAL_TIM_PWM_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800141c:	f000 f97c 	bl	8001718 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001438:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	4619      	mov	r1, r3
 8001442:	4807      	ldr	r0, [pc, #28]	; (8001460 <MX_TIM15_Init+0x100>)
 8001444:	f006 fe0c 	bl	8008060 <HAL_TIMEx_ConfigBreakDeadTime>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800144e:	f000 f963 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001452:	4803      	ldr	r0, [pc, #12]	; (8001460 <MX_TIM15_Init+0x100>)
 8001454:	f000 fb52 	bl	8001afc <HAL_TIM_MspPostInit>

}
 8001458:	bf00      	nop
 800145a:	3758      	adds	r7, #88	; 0x58
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000438 	.word	0x20000438
 8001464:	40014000 	.word	0x40014000

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08e      	sub	sp, #56	; 0x38
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800147e:	4ba0      	ldr	r3, [pc, #640]	; (8001700 <MX_GPIO_Init+0x298>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4a9f      	ldr	r2, [pc, #636]	; (8001700 <MX_GPIO_Init+0x298>)
 8001484:	f043 0310 	orr.w	r3, r3, #16
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4b9d      	ldr	r3, [pc, #628]	; (8001700 <MX_GPIO_Init+0x298>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	623b      	str	r3, [r7, #32]
 8001494:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	4b9a      	ldr	r3, [pc, #616]	; (8001700 <MX_GPIO_Init+0x298>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	4a99      	ldr	r2, [pc, #612]	; (8001700 <MX_GPIO_Init+0x298>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a2:	4b97      	ldr	r3, [pc, #604]	; (8001700 <MX_GPIO_Init+0x298>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ae:	4b94      	ldr	r3, [pc, #592]	; (8001700 <MX_GPIO_Init+0x298>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	4a93      	ldr	r2, [pc, #588]	; (8001700 <MX_GPIO_Init+0x298>)
 80014b4:	f043 0320 	orr.w	r3, r3, #32
 80014b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ba:	4b91      	ldr	r3, [pc, #580]	; (8001700 <MX_GPIO_Init+0x298>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	f003 0320 	and.w	r3, r3, #32
 80014c2:	61bb      	str	r3, [r7, #24]
 80014c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c6:	4b8e      	ldr	r3, [pc, #568]	; (8001700 <MX_GPIO_Init+0x298>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	4a8d      	ldr	r2, [pc, #564]	; (8001700 <MX_GPIO_Init+0x298>)
 80014cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d2:	4b8b      	ldr	r3, [pc, #556]	; (8001700 <MX_GPIO_Init+0x298>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b88      	ldr	r3, [pc, #544]	; (8001700 <MX_GPIO_Init+0x298>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	4a87      	ldr	r2, [pc, #540]	; (8001700 <MX_GPIO_Init+0x298>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ea:	4b85      	ldr	r3, [pc, #532]	; (8001700 <MX_GPIO_Init+0x298>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	4b82      	ldr	r3, [pc, #520]	; (8001700 <MX_GPIO_Init+0x298>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4a81      	ldr	r2, [pc, #516]	; (8001700 <MX_GPIO_Init+0x298>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b7f      	ldr	r3, [pc, #508]	; (8001700 <MX_GPIO_Init+0x298>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800150e:	4b7c      	ldr	r3, [pc, #496]	; (8001700 <MX_GPIO_Init+0x298>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a7b      	ldr	r2, [pc, #492]	; (8001700 <MX_GPIO_Init+0x298>)
 8001514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b79      	ldr	r3, [pc, #484]	; (8001700 <MX_GPIO_Init+0x298>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001526:	4b76      	ldr	r3, [pc, #472]	; (8001700 <MX_GPIO_Init+0x298>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	4a75      	ldr	r2, [pc, #468]	; (8001700 <MX_GPIO_Init+0x298>)
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001532:	4b73      	ldr	r3, [pc, #460]	; (8001700 <MX_GPIO_Init+0x298>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800153e:	f002 f94b 	bl	80037d8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2102      	movs	r1, #2
 8001546:	486f      	ldr	r0, [pc, #444]	; (8001704 <MX_GPIO_Init+0x29c>)
 8001548:	f002 f86a 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	2101      	movs	r1, #1
 8001550:	486d      	ldr	r0, [pc, #436]	; (8001708 <MX_GPIO_Init+0x2a0>)
 8001552:	f002 f865 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001556:	2307      	movs	r3, #7
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155a:	2312      	movs	r3, #18
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155e:	2301      	movs	r3, #1
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001566:	2304      	movs	r3, #4
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800156a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156e:	4619      	mov	r1, r3
 8001570:	4866      	ldr	r0, [pc, #408]	; (800170c <MX_GPIO_Init+0x2a4>)
 8001572:	f001 fec3 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001576:	23f0      	movs	r3, #240	; 0xf0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001586:	2305      	movs	r3, #5
 8001588:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158e:	4619      	mov	r1, r3
 8001590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001594:	f001 feb2 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001598:	2302      	movs	r3, #2
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ac:	4619      	mov	r1, r3
 80015ae:	4855      	ldr	r0, [pc, #340]	; (8001704 <MX_GPIO_Init+0x29c>)
 80015b0:	f001 fea4 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015c6:	2307      	movs	r3, #7
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ce:	4619      	mov	r1, r3
 80015d0:	484d      	ldr	r0, [pc, #308]	; (8001708 <MX_GPIO_Init+0x2a0>)
 80015d2:	f001 fe93 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80015d6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80015e8:	2308      	movs	r3, #8
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	4844      	ldr	r0, [pc, #272]	; (8001704 <MX_GPIO_Init+0x29c>)
 80015f4:	f001 fe82 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80015f8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800160a:	230c      	movs	r3, #12
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001612:	4619      	mov	r1, r3
 8001614:	483e      	ldr	r0, [pc, #248]	; (8001710 <MX_GPIO_Init+0x2a8>)
 8001616:	f001 fe71 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800161a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800162c:	230a      	movs	r3, #10
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001634:	4619      	mov	r1, r3
 8001636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163a:	f001 fe5f 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800163e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001650:	4619      	mov	r1, r3
 8001652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001656:	f001 fe51 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800165a:	2301      	movs	r3, #1
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166e:	4619      	mov	r1, r3
 8001670:	4825      	ldr	r0, [pc, #148]	; (8001708 <MX_GPIO_Init+0x2a0>)
 8001672:	f001 fe43 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001676:	2304      	movs	r3, #4
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001686:	230c      	movs	r3, #12
 8001688:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	4619      	mov	r1, r3
 8001690:	481d      	ldr	r0, [pc, #116]	; (8001708 <MX_GPIO_Init+0x2a0>)
 8001692:	f001 fe33 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001696:	2360      	movs	r3, #96	; 0x60
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a6:	2307      	movs	r3, #7
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ae:	4619      	mov	r1, r3
 80016b0:	4815      	ldr	r0, [pc, #84]	; (8001708 <MX_GPIO_Init+0x2a0>)
 80016b2:	f001 fe23 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80016b6:	2338      	movs	r3, #56	; 0x38
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016c6:	2306      	movs	r3, #6
 80016c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	4619      	mov	r1, r3
 80016d0:	4810      	ldr	r0, [pc, #64]	; (8001714 <MX_GPIO_Init+0x2ac>)
 80016d2:	f001 fe13 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016dc:	2312      	movs	r3, #18
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e4:	2303      	movs	r3, #3
 80016e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e8:	2304      	movs	r3, #4
 80016ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f0:	4619      	mov	r1, r3
 80016f2:	4808      	ldr	r0, [pc, #32]	; (8001714 <MX_GPIO_Init+0x2ac>)
 80016f4:	f001 fe02 	bl	80032fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016f8:	bf00      	nop
 80016fa:	3738      	adds	r7, #56	; 0x38
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40021000 	.word	0x40021000
 8001704:	48001800 	.word	0x48001800
 8001708:	48000c00 	.word	0x48000c00
 800170c:	48001400 	.word	0x48001400
 8001710:	48000800 	.word	0x48000800
 8001714:	48000400 	.word	0x48000400

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001720:	e7fe      	b.n	8001720 <Error_Handler+0x8>
	...

08001724 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <HAL_MspInit+0x44>)
 800172c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172e:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <HAL_MspInit+0x44>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6613      	str	r3, [r2, #96]	; 0x60
 8001736:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_MspInit+0x44>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_MspInit+0x44>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001746:	4a08      	ldr	r2, [pc, #32]	; (8001768 <HAL_MspInit+0x44>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174c:	6593      	str	r3, [r2, #88]	; 0x58
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_MspInit+0x44>)
 8001750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000

0800176c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a2d      	ldr	r2, [pc, #180]	; (8001840 <HAL_ADC_MspInit+0xd4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d154      	bne.n	8001838 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800178e:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <HAL_ADC_MspInit+0xd8>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	4a2c      	ldr	r2, [pc, #176]	; (8001844 <HAL_ADC_MspInit+0xd8>)
 8001794:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179a:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <HAL_ADC_MspInit+0xd8>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	4b27      	ldr	r3, [pc, #156]	; (8001844 <HAL_ADC_MspInit+0xd8>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	4a26      	ldr	r2, [pc, #152]	; (8001844 <HAL_ADC_MspInit+0xd8>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_ADC_MspInit+0xd8>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b21      	ldr	r3, [pc, #132]	; (8001844 <HAL_ADC_MspInit+0xd8>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	4a20      	ldr	r2, [pc, #128]	; (8001844 <HAL_ADC_MspInit+0xd8>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <HAL_ADC_MspInit+0xd8>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_ADC_MspInit+0xd8>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <HAL_ADC_MspInit+0xd8>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_ADC_MspInit+0xd8>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017ee:	233f      	movs	r3, #63	; 0x3f
 80017f0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017f2:	230b      	movs	r3, #11
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	4619      	mov	r1, r3
 8001800:	4811      	ldr	r0, [pc, #68]	; (8001848 <HAL_ADC_MspInit+0xdc>)
 8001802:	f001 fd7b 	bl	80032fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001806:	230a      	movs	r3, #10
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800180a:	230b      	movs	r3, #11
 800180c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181c:	f001 fd6e 	bl	80032fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001820:	2302      	movs	r3, #2
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001824:	230b      	movs	r3, #11
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	4619      	mov	r1, r3
 8001832:	4806      	ldr	r0, [pc, #24]	; (800184c <HAL_ADC_MspInit+0xe0>)
 8001834:	f001 fd62 	bl	80032fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001838:	bf00      	nop
 800183a:	3730      	adds	r7, #48	; 0x30
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	50040000 	.word	0x50040000
 8001844:	40021000 	.word	0x40021000
 8001848:	48000800 	.word	0x48000800
 800184c:	48000400 	.word	0x48000400

08001850 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a1e      	ldr	r2, [pc, #120]	; (80018e8 <HAL_COMP_MspInit+0x98>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d118      	bne.n	80018a4 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <HAL_COMP_MspInit+0x9c>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <HAL_COMP_MspInit+0x9c>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187e:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HAL_COMP_MspInit+0x9c>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800188a:	2304      	movs	r3, #4
 800188c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188e:	2303      	movs	r3, #3
 8001890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	4814      	ldr	r0, [pc, #80]	; (80018f0 <HAL_COMP_MspInit+0xa0>)
 800189e:	f001 fd2d 	bl	80032fc <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 80018a2:	e01c      	b.n	80018de <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <HAL_COMP_MspInit+0xa4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d117      	bne.n	80018de <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_COMP_MspInit+0x9c>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <HAL_COMP_MspInit+0x9c>)
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_COMP_MspInit+0x9c>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018c6:	23c0      	movs	r3, #192	; 0xc0
 80018c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ca:	2303      	movs	r3, #3
 80018cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <HAL_COMP_MspInit+0xa0>)
 80018da:	f001 fd0f 	bl	80032fc <HAL_GPIO_Init>
}
 80018de:	bf00      	nop
 80018e0:	3728      	adds	r7, #40	; 0x28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40010200 	.word	0x40010200
 80018ec:	40021000 	.word	0x40021000
 80018f0:	48000400 	.word	0x48000400
 80018f4:	40010204 	.word	0x40010204

080018f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a17      	ldr	r2, [pc, #92]	; (8001974 <HAL_SPI_MspInit+0x7c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d127      	bne.n	800196a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_SPI_MspInit+0x80>)
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	4a16      	ldr	r2, [pc, #88]	; (8001978 <HAL_SPI_MspInit+0x80>)
 8001920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001924:	6593      	str	r3, [r2, #88]	; 0x58
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <HAL_SPI_MspInit+0x80>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_SPI_MspInit+0x80>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	4a10      	ldr	r2, [pc, #64]	; (8001978 <HAL_SPI_MspInit+0x80>)
 8001938:	f043 0308 	orr.w	r3, r3, #8
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_SPI_MspInit+0x80>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800194a:	231a      	movs	r3, #26
 800194c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800195a:	2305      	movs	r3, #5
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <HAL_SPI_MspInit+0x84>)
 8001966:	f001 fcc9 	bl	80032fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	; 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40003800 	.word	0x40003800
 8001978:	40021000 	.word	0x40021000
 800197c:	48000c00 	.word	0x48000c00

08001980 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08e      	sub	sp, #56	; 0x38
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a51      	ldr	r2, [pc, #324]	; (8001ae4 <HAL_TIM_PWM_MspInit+0x164>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d139      	bne.n	8001a16 <HAL_TIM_PWM_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019a2:	4b51      	ldr	r3, [pc, #324]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a6:	4a50      	ldr	r2, [pc, #320]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 80019a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019ac:	6613      	str	r3, [r2, #96]	; 0x60
 80019ae:	4b4e      	ldr	r3, [pc, #312]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019b6:	623b      	str	r3, [r7, #32]
 80019b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ba:	4b4b      	ldr	r3, [pc, #300]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	4a4a      	ldr	r2, [pc, #296]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 80019c0:	f043 0310 	orr.w	r3, r3, #16
 80019c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c6:	4b48      	ldr	r3, [pc, #288]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019e2:	2301      	movs	r3, #1
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ea:	4619      	mov	r1, r3
 80019ec:	483f      	ldr	r0, [pc, #252]	; (8001aec <HAL_TIM_PWM_MspInit+0x16c>)
 80019ee:	f001 fc85 	bl	80032fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019f2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001a04:	2303      	movs	r3, #3
 8001a06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4837      	ldr	r0, [pc, #220]	; (8001aec <HAL_TIM_PWM_MspInit+0x16c>)
 8001a10:	f001 fc74 	bl	80032fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001a14:	e062      	b.n	8001adc <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM2)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1e:	d10c      	bne.n	8001a3a <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a20:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	4a30      	ldr	r2, [pc, #192]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	69bb      	ldr	r3, [r7, #24]
}
 8001a38:	e050      	b.n	8001adc <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM3)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a2c      	ldr	r2, [pc, #176]	; (8001af0 <HAL_TIM_PWM_MspInit+0x170>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d10c      	bne.n	8001a5e <HAL_TIM_PWM_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a44:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	4a27      	ldr	r2, [pc, #156]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a4a:	f043 0302 	orr.w	r3, r3, #2
 8001a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	697b      	ldr	r3, [r7, #20]
}
 8001a5c:	e03e      	b.n	8001adc <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM4)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a24      	ldr	r2, [pc, #144]	; (8001af4 <HAL_TIM_PWM_MspInit+0x174>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d128      	bne.n	8001aba <HAL_TIM_PWM_MspInit+0x13a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a68:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a6e:	f043 0304 	orr.w	r3, r3, #4
 8001a72:	6593      	str	r3, [r2, #88]	; 0x58
 8001a74:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a84:	4a18      	ldr	r2, [pc, #96]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a86:	f043 0310 	orr.w	r3, r3, #16
 8001a8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8c:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480e      	ldr	r0, [pc, #56]	; (8001aec <HAL_TIM_PWM_MspInit+0x16c>)
 8001ab4:	f001 fc22 	bl	80032fc <HAL_GPIO_Init>
}
 8001ab8:	e010      	b.n	8001adc <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM15)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <HAL_TIM_PWM_MspInit+0x178>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d10b      	bne.n	8001adc <HAL_TIM_PWM_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 8001ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 8001aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ace:	6613      	str	r3, [r2, #96]	; 0x60
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x168>)
 8001ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
}
 8001adc:	bf00      	nop
 8001ade:	3738      	adds	r7, #56	; 0x38
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40012c00 	.word	0x40012c00
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	48001000 	.word	0x48001000
 8001af0:	40000400 	.word	0x40000400
 8001af4:	40000800 	.word	0x40000800
 8001af8:	40014000 	.word	0x40014000

08001afc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08e      	sub	sp, #56	; 0x38
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a73      	ldr	r2, [pc, #460]	; (8001ce8 <HAL_TIM_MspPostInit+0x1ec>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d11d      	bne.n	8001b5a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b1e:	4b73      	ldr	r3, [pc, #460]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	4a72      	ldr	r2, [pc, #456]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001b24:	f043 0310 	orr.w	r3, r3, #16
 8001b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2a:	4b70      	ldr	r3, [pc, #448]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	623b      	str	r3, [r7, #32]
 8001b34:	6a3b      	ldr	r3, [r7, #32]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b36:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b50:	4619      	mov	r1, r3
 8001b52:	4867      	ldr	r0, [pc, #412]	; (8001cf0 <HAL_TIM_MspPostInit+0x1f4>)
 8001b54:	f001 fbd2 	bl	80032fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001b58:	e0c2      	b.n	8001ce0 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b62:	d13a      	bne.n	8001bda <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b64:	4b61      	ldr	r3, [pc, #388]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b68:	4a60      	ldr	r2, [pc, #384]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b70:	4b5e      	ldr	r3, [pc, #376]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7c:	4b5b      	ldr	r3, [pc, #364]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b80:	4a5a      	ldr	r2, [pc, #360]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001b82:	f043 0302 	orr.w	r3, r3, #2
 8001b86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b88:	4b58      	ldr	r3, [pc, #352]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b94:	2301      	movs	r3, #1
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bac:	4619      	mov	r1, r3
 8001bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb2:	f001 fba3 	bl	80032fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4848      	ldr	r0, [pc, #288]	; (8001cf4 <HAL_TIM_MspPostInit+0x1f8>)
 8001bd4:	f001 fb92 	bl	80032fc <HAL_GPIO_Init>
}
 8001bd8:	e082      	b.n	8001ce0 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a46      	ldr	r2, [pc, #280]	; (8001cf8 <HAL_TIM_MspPostInit+0x1fc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d138      	bne.n	8001c56 <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be4:	4b41      	ldr	r3, [pc, #260]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	4a40      	ldr	r2, [pc, #256]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf0:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfc:	4b3b      	ldr	r3, [pc, #236]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c00:	4a3a      	ldr	r2, [pc, #232]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001c02:	f043 0304 	orr.w	r3, r3, #4
 8001c06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c08:	4b38      	ldr	r3, [pc, #224]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c14:	2301      	movs	r3, #1
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c24:	2302      	movs	r3, #2
 8001c26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4831      	ldr	r0, [pc, #196]	; (8001cf4 <HAL_TIM_MspPostInit+0x1f8>)
 8001c30:	f001 fb64 	bl	80032fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c44:	2302      	movs	r3, #2
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	482b      	ldr	r0, [pc, #172]	; (8001cfc <HAL_TIM_MspPostInit+0x200>)
 8001c50:	f001 fb54 	bl	80032fc <HAL_GPIO_Init>
}
 8001c54:	e044      	b.n	8001ce0 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a29      	ldr	r2, [pc, #164]	; (8001d00 <HAL_TIM_MspPostInit+0x204>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d11d      	bne.n	8001c9c <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c60:	4b22      	ldr	r3, [pc, #136]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c64:	4a21      	ldr	r2, [pc, #132]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001c66:	f043 0308 	orr.w	r3, r3, #8
 8001c6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c78:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	4619      	mov	r1, r3
 8001c94:	481b      	ldr	r0, [pc, #108]	; (8001d04 <HAL_TIM_MspPostInit+0x208>)
 8001c96:	f001 fb31 	bl	80032fc <HAL_GPIO_Init>
}
 8001c9a:	e021      	b.n	8001ce0 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a19      	ldr	r2, [pc, #100]	; (8001d08 <HAL_TIM_MspPostInit+0x20c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d11c      	bne.n	8001ce0 <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	4a10      	ldr	r2, [pc, #64]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_TIM_MspPostInit+0x1f0>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001cbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001cd0:	230e      	movs	r3, #14
 8001cd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <HAL_TIM_MspPostInit+0x1f8>)
 8001cdc:	f001 fb0e 	bl	80032fc <HAL_GPIO_Init>
}
 8001ce0:	bf00      	nop
 8001ce2:	3738      	adds	r7, #56	; 0x38
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40012c00 	.word	0x40012c00
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	48001000 	.word	0x48001000
 8001cf4:	48000400 	.word	0x48000400
 8001cf8:	40000400 	.word	0x40000400
 8001cfc:	48000800 	.word	0x48000800
 8001d00:	40000800 	.word	0x40000800
 8001d04:	48000c00 	.word	0x48000c00
 8001d08:	40014000 	.word	0x40014000

08001d0c <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a50      	ldr	r2, [pc, #320]	; (8001e5c <HAL_SAI_MspInit+0x150>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d124      	bne.n	8001d68 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001d1e:	4b50      	ldr	r3, [pc, #320]	; (8001e60 <HAL_SAI_MspInit+0x154>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10b      	bne.n	8001d3e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001d26:	4b4f      	ldr	r3, [pc, #316]	; (8001e64 <HAL_SAI_MspInit+0x158>)
 8001d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2a:	4a4e      	ldr	r2, [pc, #312]	; (8001e64 <HAL_SAI_MspInit+0x158>)
 8001d2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d30:	6613      	str	r3, [r2, #96]	; 0x60
 8001d32:	4b4c      	ldr	r3, [pc, #304]	; (8001e64 <HAL_SAI_MspInit+0x158>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001d3e:	4b48      	ldr	r3, [pc, #288]	; (8001e60 <HAL_SAI_MspInit+0x154>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	3301      	adds	r3, #1
 8001d44:	4a46      	ldr	r2, [pc, #280]	; (8001e60 <HAL_SAI_MspInit+0x154>)
 8001d46:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001d48:	2374      	movs	r3, #116	; 0x74
 8001d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001d58:	230d      	movs	r3, #13
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	4841      	ldr	r0, [pc, #260]	; (8001e68 <HAL_SAI_MspInit+0x15c>)
 8001d64:	f001 faca 	bl	80032fc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a3f      	ldr	r2, [pc, #252]	; (8001e6c <HAL_SAI_MspInit+0x160>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d135      	bne.n	8001dde <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8001d72:	4b3b      	ldr	r3, [pc, #236]	; (8001e60 <HAL_SAI_MspInit+0x154>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10b      	bne.n	8001d92 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001d7a:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <HAL_SAI_MspInit+0x158>)
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7e:	4a39      	ldr	r2, [pc, #228]	; (8001e64 <HAL_SAI_MspInit+0x158>)
 8001d80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d84:	6613      	str	r3, [r2, #96]	; 0x60
 8001d86:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <HAL_SAI_MspInit+0x158>)
 8001d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001d92:	4b33      	ldr	r3, [pc, #204]	; (8001e60 <HAL_SAI_MspInit+0x154>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	3301      	adds	r3, #1
 8001d98:	4a31      	ldr	r2, [pc, #196]	; (8001e60 <HAL_SAI_MspInit+0x154>)
 8001d9a:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001dac:	230d      	movs	r3, #13
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4619      	mov	r1, r3
 8001db6:	482c      	ldr	r0, [pc, #176]	; (8001e68 <HAL_SAI_MspInit+0x15c>)
 8001db8:	f001 faa0 	bl	80032fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001dbc:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001dce:	230d      	movs	r3, #13
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4825      	ldr	r0, [pc, #148]	; (8001e70 <HAL_SAI_MspInit+0x164>)
 8001dda:	f001 fa8f 	bl	80032fc <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <HAL_SAI_MspInit+0x168>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d135      	bne.n	8001e54 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8001de8:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <HAL_SAI_MspInit+0x16c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10b      	bne.n	8001e08 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001df0:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <HAL_SAI_MspInit+0x158>)
 8001df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df4:	4a1b      	ldr	r2, [pc, #108]	; (8001e64 <HAL_SAI_MspInit+0x158>)
 8001df6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dfa:	6613      	str	r3, [r2, #96]	; 0x60
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_SAI_MspInit+0x158>)
 8001dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <HAL_SAI_MspInit+0x16c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	4a1a      	ldr	r2, [pc, #104]	; (8001e78 <HAL_SAI_MspInit+0x16c>)
 8001e10:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001e12:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001e24:	230d      	movs	r3, #13
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4813      	ldr	r0, [pc, #76]	; (8001e7c <HAL_SAI_MspInit+0x170>)
 8001e30:	f001 fa64 	bl	80032fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e34:	2340      	movs	r3, #64	; 0x40
 8001e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001e44:	230d      	movs	r3, #13
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	480c      	ldr	r0, [pc, #48]	; (8001e80 <HAL_SAI_MspInit+0x174>)
 8001e50:	f001 fa54 	bl	80032fc <HAL_GPIO_Init>

    }
}
 8001e54:	bf00      	nop
 8001e56:	3728      	adds	r7, #40	; 0x28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40015404 	.word	0x40015404
 8001e60:	20000484 	.word	0x20000484
 8001e64:	40021000 	.word	0x40021000
 8001e68:	48001000 	.word	0x48001000
 8001e6c:	40015424 	.word	0x40015424
 8001e70:	48001400 	.word	0x48001400
 8001e74:	40015804 	.word	0x40015804
 8001e78:	20000488 	.word	0x20000488
 8001e7c:	48000400 	.word	0x48000400
 8001e80:	48000800 	.word	0x48000800

08001e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e88:	e7fe      	b.n	8001e88 <NMI_Handler+0x4>

08001e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <HardFault_Handler+0x4>

08001e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <MemManage_Handler+0x4>

08001e96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e9a:	e7fe      	b.n	8001e9a <BusFault_Handler+0x4>

08001e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <UsageFault_Handler+0x4>

08001ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed0:	f000 f892 	bl	8001ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <SystemInit+0x20>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee2:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <SystemInit+0x20>)
 8001ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f00:	f7ff ffea 	bl	8001ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f06:	490d      	ldr	r1, [pc, #52]	; (8001f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f08:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <LoopForever+0xe>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f0c:	e002      	b.n	8001f14 <LoopCopyDataInit>

08001f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f12:	3304      	adds	r3, #4

08001f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f18:	d3f9      	bcc.n	8001f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f1c:	4c0a      	ldr	r4, [pc, #40]	; (8001f48 <LoopForever+0x16>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f20:	e001      	b.n	8001f26 <LoopFillZerobss>

08001f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f24:	3204      	adds	r2, #4

08001f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f28:	d3fb      	bcc.n	8001f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f006 f9e5 	bl	80082f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f2e:	f7fe fd5f 	bl	80009f0 <main>

08001f32 <LoopForever>:

LoopForever:
    b LoopForever
 8001f32:	e7fe      	b.n	8001f32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f34:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f40:	080083b0 	.word	0x080083b0
  ldr r2, =_sbss
 8001f44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f48:	20000490 	.word	0x20000490

08001f4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f4c:	e7fe      	b.n	8001f4c <ADC1_IRQHandler>

08001f4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f58:	2003      	movs	r0, #3
 8001f5a:	f001 f99b 	bl	8003294 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f000 f80e 	bl	8001f80 <HAL_InitTick>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	71fb      	strb	r3, [r7, #7]
 8001f6e:	e001      	b.n	8001f74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f70:	f7ff fbd8 	bl	8001724 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f74:	79fb      	ldrb	r3, [r7, #7]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f8c:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_InitTick+0x6c>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d023      	beq.n	8001fdc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f94:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <HAL_InitTick+0x70>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b14      	ldr	r3, [pc, #80]	; (8001fec <HAL_InitTick+0x6c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f001 f999 	bl	80032e2 <HAL_SYSTICK_Config>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10f      	bne.n	8001fd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b0f      	cmp	r3, #15
 8001fba:	d809      	bhi.n	8001fd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	f001 f971 	bl	80032aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fc8:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <HAL_InitTick+0x74>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e007      	b.n	8001fe0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e004      	b.n	8001fe0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
 8001fda:	e001      	b.n	8001fe0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000008 	.word	0x20000008
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_IncTick+0x20>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_IncTick+0x24>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4413      	add	r3, r2
 8002008:	4a04      	ldr	r2, [pc, #16]	; (800201c <HAL_IncTick+0x24>)
 800200a:	6013      	str	r3, [r2, #0]
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000008 	.word	0x20000008
 800201c:	2000048c 	.word	0x2000048c

08002020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return uwTick;
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <HAL_GetTick+0x14>)
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	2000048c 	.word	0x2000048c

08002038 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	609a      	str	r2, [r3, #8]
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	609a      	str	r2, [r3, #8]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3360      	adds	r3, #96	; 0x60
 80020b2:	461a      	mov	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <LL_ADC_SetOffset+0x44>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020d8:	bf00      	nop
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	03fff000 	.word	0x03fff000

080020e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3360      	adds	r3, #96	; 0x60
 80020f6:	461a      	mov	r2, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3360      	adds	r3, #96	; 0x60
 8002124:	461a      	mov	r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	431a      	orrs	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800213e:	bf00      	nop
 8002140:	371c      	adds	r7, #28
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	615a      	str	r2, [r3, #20]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3330      	adds	r3, #48	; 0x30
 8002180:	461a      	mov	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	4413      	add	r3, r2
 800218e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	211f      	movs	r1, #31
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	401a      	ands	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	0e9b      	lsrs	r3, r3, #26
 80021a8:	f003 011f 	and.w	r1, r3, #31
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	431a      	orrs	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021bc:	bf00      	nop
 80021be:	371c      	adds	r7, #28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3314      	adds	r3, #20
 80021d8:	461a      	mov	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	0e5b      	lsrs	r3, r3, #25
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	4413      	add	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	0d1b      	lsrs	r3, r3, #20
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	2107      	movs	r1, #7
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	401a      	ands	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	0d1b      	lsrs	r3, r3, #20
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	fa01 f303 	lsl.w	r3, r1, r3
 800220c:	431a      	orrs	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002212:	bf00      	nop
 8002214:	371c      	adds	r7, #28
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002238:	43db      	mvns	r3, r3
 800223a:	401a      	ands	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f003 0318 	and.w	r3, r3, #24
 8002242:	4908      	ldr	r1, [pc, #32]	; (8002264 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002244:	40d9      	lsrs	r1, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	400b      	ands	r3, r1
 800224a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224e:	431a      	orrs	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	0007ffff 	.word	0x0007ffff

08002268 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002278:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6093      	str	r3, [r2, #8]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800229c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022a0:	d101      	bne.n	80022a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022f0:	d101      	bne.n	80022f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <LL_ADC_IsEnabled+0x18>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <LL_ADC_IsEnabled+0x1a>
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b04      	cmp	r3, #4
 800233c:	d101      	bne.n	8002342 <LL_ADC_REG_IsConversionOngoing+0x18>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b08      	cmp	r3, #8
 8002362:	d101      	bne.n	8002368 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e129      	b.n	80025e6 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff f9e3 	bl	800176c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff67 	bl	800228c <LL_ADC_IsDeepPowerDownEnabled>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d004      	beq.n	80023ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff4d 	bl	8002268 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff ff82 	bl	80022dc <LL_ADC_IsInternalRegulatorEnabled>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d115      	bne.n	800240a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff ff66 	bl	80022b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023e8:	4b81      	ldr	r3, [pc, #516]	; (80025f0 <HAL_ADC_Init+0x278>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	099b      	lsrs	r3, r3, #6
 80023ee:	4a81      	ldr	r2, [pc, #516]	; (80025f4 <HAL_ADC_Init+0x27c>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	099b      	lsrs	r3, r3, #6
 80023f6:	3301      	adds	r3, #1
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023fc:	e002      	b.n	8002404 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3b01      	subs	r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f9      	bne.n	80023fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ff64 	bl	80022dc <LL_ADC_IsInternalRegulatorEnabled>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10d      	bne.n	8002436 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241e:	f043 0210 	orr.w	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ff75 	bl	800232a <LL_ADC_REG_IsConversionOngoing>
 8002440:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b00      	cmp	r3, #0
 800244c:	f040 80c2 	bne.w	80025d4 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f040 80be 	bne.w	80025d4 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002460:	f043 0202 	orr.w	r2, r3, #2
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff49 	bl	8002304 <LL_ADC_IsEnabled>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10b      	bne.n	8002490 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002478:	485f      	ldr	r0, [pc, #380]	; (80025f8 <HAL_ADC_Init+0x280>)
 800247a:	f7ff ff43 	bl	8002304 <LL_ADC_IsEnabled>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4619      	mov	r1, r3
 800248a:	485c      	ldr	r0, [pc, #368]	; (80025fc <HAL_ADC_Init+0x284>)
 800248c:	f7ff fdd4 	bl	8002038 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	7e5b      	ldrb	r3, [r3, #25]
 8002494:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800249a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80024a0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80024a6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ae:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d106      	bne.n	80024cc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	3b01      	subs	r3, #1
 80024c4:	045b      	lsls	r3, r3, #17
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d009      	beq.n	80024e8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	4b44      	ldr	r3, [pc, #272]	; (8002600 <HAL_ADC_Init+0x288>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	69b9      	ldr	r1, [r7, #24]
 80024f8:	430b      	orrs	r3, r1
 80024fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff25 	bl	8002350 <LL_ADC_INJ_IsConversionOngoing>
 8002506:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d140      	bne.n	8002590 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d13d      	bne.n	8002590 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7e1b      	ldrb	r3, [r3, #24]
 800251c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800251e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002526:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002536:	f023 0306 	bic.w	r3, r3, #6
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	69b9      	ldr	r1, [r7, #24]
 8002540:	430b      	orrs	r3, r1
 8002542:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800254a:	2b01      	cmp	r3, #1
 800254c:	d118      	bne.n	8002580 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002558:	f023 0304 	bic.w	r3, r3, #4
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002564:	4311      	orrs	r1, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800256a:	4311      	orrs	r1, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002570:	430a      	orrs	r2, r1
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0201 	orr.w	r2, r2, #1
 800257c:	611a      	str	r2, [r3, #16]
 800257e:	e007      	b.n	8002590 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d10c      	bne.n	80025b2 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f023 010f 	bic.w	r1, r3, #15
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	1e5a      	subs	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
 80025b0:	e007      	b.n	80025c2 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 020f 	bic.w	r2, r2, #15
 80025c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	f043 0201 	orr.w	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	659a      	str	r2, [r3, #88]	; 0x58
 80025d2:	e007      	b.n	80025e4 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	f043 0210 	orr.w	r2, r3, #16
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000000 	.word	0x20000000
 80025f4:	053e2d63 	.word	0x053e2d63
 80025f8:	50040000 	.word	0x50040000
 80025fc:	50040300 	.word	0x50040300
 8002600:	fff0c007 	.word	0xfff0c007

08002604 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b0b6      	sub	sp, #216	; 0xd8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x22>
 8002622:	2302      	movs	r3, #2
 8002624:	e3d5      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x7ce>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fe79 	bl	800232a <LL_ADC_REG_IsConversionOngoing>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	f040 83ba 	bne.w	8002db4 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b05      	cmp	r3, #5
 800264e:	d824      	bhi.n	800269a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	3b02      	subs	r3, #2
 8002656:	2b03      	cmp	r3, #3
 8002658:	d81b      	bhi.n	8002692 <HAL_ADC_ConfigChannel+0x8e>
 800265a:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <HAL_ADC_ConfigChannel+0x5c>)
 800265c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002660:	08002671 	.word	0x08002671
 8002664:	08002679 	.word	0x08002679
 8002668:	08002681 	.word	0x08002681
 800266c:	08002689 	.word	0x08002689
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002670:	230c      	movs	r3, #12
 8002672:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002676:	e010      	b.n	800269a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002678:	2312      	movs	r3, #18
 800267a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800267e:	e00c      	b.n	800269a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002680:	2318      	movs	r3, #24
 8002682:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002686:	e008      	b.n	800269a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800268c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002690:	e003      	b.n	800269a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002692:	2306      	movs	r3, #6
 8002694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002698:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80026a8:	f7ff fd62 	bl	8002170 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fe3a 	bl	800232a <LL_ADC_REG_IsConversionOngoing>
 80026b6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fe46 	bl	8002350 <LL_ADC_INJ_IsConversionOngoing>
 80026c4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f040 81bf 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f040 81ba 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026e4:	d10f      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2200      	movs	r2, #0
 80026f0:	4619      	mov	r1, r3
 80026f2:	f7ff fd69 	bl	80021c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fd23 	bl	800214a <LL_ADC_SetSamplingTimeCommonConfig>
 8002704:	e00e      	b.n	8002724 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	6819      	ldr	r1, [r3, #0]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	461a      	mov	r2, r3
 8002714:	f7ff fd58 	bl	80021c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fd13 	bl	800214a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	08db      	lsrs	r3, r3, #3
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b04      	cmp	r3, #4
 8002744:	d00a      	beq.n	800275c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6919      	ldr	r1, [r3, #16]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002756:	f7ff fca3 	bl	80020a0 <LL_ADC_SetOffset>
 800275a:	e179      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fcc0 	bl	80020e8 <LL_ADC_GetOffsetChannel>
 8002768:	4603      	mov	r3, r0
 800276a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10a      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x184>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fcb5 	bl	80020e8 <LL_ADC_GetOffsetChannel>
 800277e:	4603      	mov	r3, r0
 8002780:	0e9b      	lsrs	r3, r3, #26
 8002782:	f003 021f 	and.w	r2, r3, #31
 8002786:	e01e      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x1c2>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fcaa 	bl	80020e8 <LL_ADC_GetOffsetChannel>
 8002794:	4603      	mov	r3, r0
 8002796:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80027b6:	2320      	movs	r3, #32
 80027b8:	e004      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80027ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d105      	bne.n	80027de <HAL_ADC_ConfigChannel+0x1da>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	0e9b      	lsrs	r3, r3, #26
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	e018      	b.n	8002810 <HAL_ADC_ConfigChannel+0x20c>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80027f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80027fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002802:	2320      	movs	r3, #32
 8002804:	e004      	b.n	8002810 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002806:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002810:	429a      	cmp	r2, r3
 8002812:	d106      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2200      	movs	r2, #0
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fc79 	bl	8002114 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2101      	movs	r1, #1
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fc5d 	bl	80020e8 <LL_ADC_GetOffsetChannel>
 800282e:	4603      	mov	r3, r0
 8002830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10a      	bne.n	800284e <HAL_ADC_ConfigChannel+0x24a>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2101      	movs	r1, #1
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fc52 	bl	80020e8 <LL_ADC_GetOffsetChannel>
 8002844:	4603      	mov	r3, r0
 8002846:	0e9b      	lsrs	r3, r3, #26
 8002848:	f003 021f 	and.w	r2, r3, #31
 800284c:	e01e      	b.n	800288c <HAL_ADC_ConfigChannel+0x288>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2101      	movs	r1, #1
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fc47 	bl	80020e8 <LL_ADC_GetOffsetChannel>
 800285a:	4603      	mov	r3, r0
 800285c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800286c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002870:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002874:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800287c:	2320      	movs	r3, #32
 800287e:	e004      	b.n	800288a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002880:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002884:	fab3 f383 	clz	r3, r3
 8002888:	b2db      	uxtb	r3, r3
 800288a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002894:	2b00      	cmp	r3, #0
 8002896:	d105      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x2a0>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	0e9b      	lsrs	r3, r3, #26
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	e018      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x2d2>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028b0:	fa93 f3a3 	rbit	r3, r3
 80028b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80028b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80028c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80028c8:	2320      	movs	r3, #32
 80028ca:	e004      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80028cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d106      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2200      	movs	r2, #0
 80028e0:	2101      	movs	r1, #1
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fc16 	bl	8002114 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2102      	movs	r1, #2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fbfa 	bl	80020e8 <LL_ADC_GetOffsetChannel>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10a      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x310>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2102      	movs	r1, #2
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fbef 	bl	80020e8 <LL_ADC_GetOffsetChannel>
 800290a:	4603      	mov	r3, r0
 800290c:	0e9b      	lsrs	r3, r3, #26
 800290e:	f003 021f 	and.w	r2, r3, #31
 8002912:	e01e      	b.n	8002952 <HAL_ADC_ConfigChannel+0x34e>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2102      	movs	r1, #2
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fbe4 	bl	80020e8 <LL_ADC_GetOffsetChannel>
 8002920:	4603      	mov	r3, r0
 8002922:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002932:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002936:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800293a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002942:	2320      	movs	r3, #32
 8002944:	e004      	b.n	8002950 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295a:	2b00      	cmp	r3, #0
 800295c:	d105      	bne.n	800296a <HAL_ADC_ConfigChannel+0x366>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	0e9b      	lsrs	r3, r3, #26
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	e014      	b.n	8002994 <HAL_ADC_ConfigChannel+0x390>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800297a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800297e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002986:	2320      	movs	r3, #32
 8002988:	e004      	b.n	8002994 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800298a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002994:	429a      	cmp	r2, r3
 8002996:	d106      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2200      	movs	r2, #0
 800299e:	2102      	movs	r1, #2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fbb7 	bl	8002114 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2103      	movs	r1, #3
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fb9b 	bl	80020e8 <LL_ADC_GetOffsetChannel>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x3ce>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2103      	movs	r1, #3
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fb90 	bl	80020e8 <LL_ADC_GetOffsetChannel>
 80029c8:	4603      	mov	r3, r0
 80029ca:	0e9b      	lsrs	r3, r3, #26
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	e017      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x3fe>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2103      	movs	r1, #3
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fb85 	bl	80020e8 <LL_ADC_GetOffsetChannel>
 80029de:	4603      	mov	r3, r0
 80029e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80029ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ec:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80029ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80029f4:	2320      	movs	r3, #32
 80029f6:	e003      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80029f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d105      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x416>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	0e9b      	lsrs	r3, r3, #26
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	e011      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x43a>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002a28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a2a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002a2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002a32:	2320      	movs	r3, #32
 8002a34:	e003      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002a36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d106      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2200      	movs	r2, #0
 8002a48:	2103      	movs	r1, #3
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fb62 	bl	8002114 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fc55 	bl	8002304 <LL_ADC_IsEnabled>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f040 813f 	bne.w	8002ce0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6819      	ldr	r1, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f7ff fbd6 	bl	8002220 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a8e      	ldr	r2, [pc, #568]	; (8002cb4 <HAL_ADC_ConfigChannel+0x6b0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	f040 8130 	bne.w	8002ce0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x4a4>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	0e9b      	lsrs	r3, r3, #26
 8002a96:	3301      	adds	r3, #1
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	2b09      	cmp	r3, #9
 8002a9e:	bf94      	ite	ls
 8002aa0:	2301      	movls	r3, #1
 8002aa2:	2300      	movhi	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	e019      	b.n	8002adc <HAL_ADC_ConfigChannel+0x4d8>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002ac0:	2320      	movs	r3, #32
 8002ac2:	e003      	b.n	8002acc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	2b09      	cmp	r3, #9
 8002ad4:	bf94      	ite	ls
 8002ad6:	2301      	movls	r3, #1
 8002ad8:	2300      	movhi	r3, #0
 8002ada:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d079      	beq.n	8002bd4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d107      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x4f8>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	0e9b      	lsrs	r3, r3, #26
 8002af2:	3301      	adds	r3, #1
 8002af4:	069b      	lsls	r3, r3, #26
 8002af6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002afa:	e015      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x524>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b0c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002b14:	2320      	movs	r3, #32
 8002b16:	e003      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	3301      	adds	r3, #1
 8002b22:	069b      	lsls	r3, r3, #26
 8002b24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d109      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x544>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0e9b      	lsrs	r3, r3, #26
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	2101      	movs	r1, #1
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	e017      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x574>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b58:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002b60:	2320      	movs	r3, #32
 8002b62:	e003      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	2101      	movs	r1, #1
 8002b74:	fa01 f303 	lsl.w	r3, r1, r3
 8002b78:	ea42 0103 	orr.w	r1, r2, r3
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x59a>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	0e9b      	lsrs	r3, r3, #26
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f003 021f 	and.w	r2, r3, #31
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	051b      	lsls	r3, r3, #20
 8002b9c:	e018      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x5cc>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	e003      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	e080      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d107      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x5ec>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0e9b      	lsrs	r3, r3, #26
 8002be6:	3301      	adds	r3, #1
 8002be8:	069b      	lsls	r3, r3, #26
 8002bea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bee:	e015      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x618>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e003      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	3301      	adds	r3, #1
 8002c16:	069b      	lsls	r3, r3, #26
 8002c18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x638>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	0e9b      	lsrs	r3, r3, #26
 8002c2e:	3301      	adds	r3, #1
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	2101      	movs	r1, #1
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	e017      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x668>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	61bb      	str	r3, [r7, #24]
  return result;
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002c54:	2320      	movs	r3, #32
 8002c56:	e003      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	3301      	adds	r3, #1
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	2101      	movs	r1, #1
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	ea42 0103 	orr.w	r1, r2, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10d      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x694>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	0e9b      	lsrs	r3, r3, #26
 8002c82:	3301      	adds	r3, #1
 8002c84:	f003 021f 	and.w	r2, r3, #31
 8002c88:	4613      	mov	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3b1e      	subs	r3, #30
 8002c90:	051b      	lsls	r3, r3, #20
 8002c92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c96:	e01d      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x6d0>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	60fb      	str	r3, [r7, #12]
  return result;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d103      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002cb0:	2320      	movs	r3, #32
 8002cb2:	e005      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x6bc>
 8002cb4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	f003 021f 	and.w	r2, r3, #31
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	4413      	add	r3, r2
 8002ccc:	3b1e      	subs	r3, #30
 8002cce:	051b      	lsls	r3, r3, #20
 8002cd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f7ff fa74 	bl	80021c8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b3d      	ldr	r3, [pc, #244]	; (8002ddc <HAL_ADC_ConfigChannel+0x7d8>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d06c      	beq.n	8002dc6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cec:	483c      	ldr	r0, [pc, #240]	; (8002de0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cee:	f7ff f9c9 	bl	8002084 <LL_ADC_GetCommonPathInternalCh>
 8002cf2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a3a      	ldr	r2, [pc, #232]	; (8002de4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d127      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d121      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a35      	ldr	r2, [pc, #212]	; (8002de8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d157      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d1e:	4619      	mov	r1, r3
 8002d20:	482f      	ldr	r0, [pc, #188]	; (8002de0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d22:	f7ff f99c 	bl	800205e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d26:	4b31      	ldr	r3, [pc, #196]	; (8002dec <HAL_ADC_ConfigChannel+0x7e8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	099b      	lsrs	r3, r3, #6
 8002d2c:	4a30      	ldr	r2, [pc, #192]	; (8002df0 <HAL_ADC_ConfigChannel+0x7ec>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	099b      	lsrs	r3, r3, #6
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	4613      	mov	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d40:	e002      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f9      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d4e:	e03a      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a27      	ldr	r2, [pc, #156]	; (8002df4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d113      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10d      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1f      	ldr	r2, [pc, #124]	; (8002de8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d12a      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4819      	ldr	r0, [pc, #100]	; (8002de0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d7c:	f7ff f96f 	bl	800205e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d80:	e021      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1c      	ldr	r2, [pc, #112]	; (8002df8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d11c      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d116      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d111      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002da6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002daa:	4619      	mov	r1, r3
 8002dac:	480c      	ldr	r0, [pc, #48]	; (8002de0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002dae:	f7ff f956 	bl	800205e <LL_ADC_SetCommonPathInternalCh>
 8002db2:	e008      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	f043 0220 	orr.w	r2, r3, #32
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002dce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	37d8      	adds	r7, #216	; 0xd8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	80080000 	.word	0x80080000
 8002de0:	50040300 	.word	0x50040300
 8002de4:	c7520000 	.word	0xc7520000
 8002de8:	50040000 	.word	0x50040000
 8002dec:	20000000 	.word	0x20000000
 8002df0:	053e2d63 	.word	0x053e2d63
 8002df4:	cb840000 	.word	0xcb840000
 8002df8:	80000001 	.word	0x80000001

08002dfc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <LL_EXTI_EnableIT_0_31+0x20>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4904      	ldr	r1, [pc, #16]	; (8002e1c <LL_EXTI_EnableIT_0_31+0x20>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	40010400 	.word	0x40010400

08002e20 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002e28:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <LL_EXTI_DisableIT_0_31+0x24>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	4904      	ldr	r1, [pc, #16]	; (8002e44 <LL_EXTI_DisableIT_0_31+0x24>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40010400 	.word	0x40010400

08002e48 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	4904      	ldr	r1, [pc, #16]	; (8002e68 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	604b      	str	r3, [r1, #4]

}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	40010400 	.word	0x40010400

08002e6c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	4904      	ldr	r1, [pc, #16]	; (8002e90 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	604b      	str	r3, [r1, #4]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40010400 	.word	0x40010400

08002e94 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	4904      	ldr	r1, [pc, #16]	; (8002eb4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	608b      	str	r3, [r1, #8]

}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	40010400 	.word	0x40010400

08002eb8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	4904      	ldr	r1, [pc, #16]	; (8002edc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]

}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40010400 	.word	0x40010400

08002ee0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	4904      	ldr	r1, [pc, #16]	; (8002f00 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60cb      	str	r3, [r1, #12]
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	40010400 	.word	0x40010400

08002f04 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002f0c:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	4904      	ldr	r1, [pc, #16]	; (8002f28 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	60cb      	str	r3, [r1, #12]
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40010400 	.word	0x40010400

08002f2c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002f34:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6153      	str	r3, [r2, #20]
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40010400 	.word	0x40010400

08002f4c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d102      	bne.n	8002f68 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	77fb      	strb	r3, [r7, #31]
 8002f66:	e0d1      	b.n	800310c <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f76:	d102      	bne.n	8002f7e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	77fb      	strb	r3, [r7, #31]
 8002f7c:	e0c6      	b.n	800310c <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d115      	bne.n	8002fb6 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f98:	4b5f      	ldr	r3, [pc, #380]	; (8003118 <HAL_COMP_Init+0x1cc>)
 8002f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9c:	4a5e      	ldr	r2, [pc, #376]	; (8003118 <HAL_COMP_Init+0x1cc>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6613      	str	r3, [r2, #96]	; 0x60
 8002fa4:	4b5c      	ldr	r3, [pc, #368]	; (8003118 <HAL_COMP_Init+0x1cc>)
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7fe fc4d 	bl	8001850 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fc0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b4b      	ldr	r3, [pc, #300]	; (800311c <HAL_COMP_Init+0x1d0>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	6979      	ldr	r1, [r7, #20]
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003002:	d106      	bne.n	8003012 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8003004:	4b46      	ldr	r3, [pc, #280]	; (8003120 <HAL_COMP_Init+0x1d4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a45      	ldr	r2, [pc, #276]	; (8003120 <HAL_COMP_Init+0x1d4>)
 800300a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	e005      	b.n	800301e <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8003012:	4b43      	ldr	r3, [pc, #268]	; (8003120 <HAL_COMP_Init+0x1d4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a42      	ldr	r2, [pc, #264]	; (8003120 <HAL_COMP_Init+0x1d4>)
 8003018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800301c:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d016      	beq.n	800305a <HAL_COMP_Init+0x10e>
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d113      	bne.n	800305a <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003032:	4b3c      	ldr	r3, [pc, #240]	; (8003124 <HAL_COMP_Init+0x1d8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	099b      	lsrs	r3, r3, #6
 8003038:	4a3b      	ldr	r2, [pc, #236]	; (8003128 <HAL_COMP_Init+0x1dc>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	099b      	lsrs	r3, r3, #6
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800304c:	e002      	b.n	8003054 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	3b01      	subs	r3, #1
 8003052:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f9      	bne.n	800304e <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a33      	ldr	r2, [pc, #204]	; (800312c <HAL_COMP_Init+0x1e0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d102      	bne.n	800306a <HAL_COMP_Init+0x11e>
 8003064:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003068:	e001      	b.n	800306e <HAL_COMP_Init+0x122>
 800306a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800306e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d037      	beq.n	80030ec <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003088:	6938      	ldr	r0, [r7, #16]
 800308a:	f7ff ff03 	bl	8002e94 <LL_EXTI_EnableRisingTrig_0_31>
 800308e:	e002      	b.n	8003096 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003090:	6938      	ldr	r0, [r7, #16]
 8003092:	f7ff ff11 	bl	8002eb8 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80030a2:	6938      	ldr	r0, [r7, #16]
 80030a4:	f7ff ff1c 	bl	8002ee0 <LL_EXTI_EnableFallingTrig_0_31>
 80030a8:	e002      	b.n	80030b0 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80030aa:	6938      	ldr	r0, [r7, #16]
 80030ac:	f7ff ff2a 	bl	8002f04 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80030b0:	6938      	ldr	r0, [r7, #16]
 80030b2:	f7ff ff3b 	bl	8002f2c <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80030c2:	6938      	ldr	r0, [r7, #16]
 80030c4:	f7ff fec0 	bl	8002e48 <LL_EXTI_EnableEvent_0_31>
 80030c8:	e002      	b.n	80030d0 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80030ca:	6938      	ldr	r0, [r7, #16]
 80030cc:	f7ff fece 	bl	8002e6c <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80030dc:	6938      	ldr	r0, [r7, #16]
 80030de:	f7ff fe8d 	bl	8002dfc <LL_EXTI_EnableIT_0_31>
 80030e2:	e009      	b.n	80030f8 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80030e4:	6938      	ldr	r0, [r7, #16]
 80030e6:	f7ff fe9b 	bl	8002e20 <LL_EXTI_DisableIT_0_31>
 80030ea:	e005      	b.n	80030f8 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80030ec:	6938      	ldr	r0, [r7, #16]
 80030ee:	f7ff febd 	bl	8002e6c <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80030f2:	6938      	ldr	r0, [r7, #16]
 80030f4:	f7ff fe94 	bl	8002e20 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d103      	bne.n	800310c <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800310c:	7ffb      	ldrb	r3, [r7, #31]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40021000 	.word	0x40021000
 800311c:	ff207d03 	.word	0xff207d03
 8003120:	40010204 	.word	0x40010204
 8003124:	20000000 	.word	0x20000000
 8003128:	053e2d63 	.word	0x053e2d63
 800312c:	40010200 	.word	0x40010200

08003130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800314c:	4013      	ands	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800315c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003162:	4a04      	ldr	r2, [pc, #16]	; (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	60d3      	str	r3, [r2, #12]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <__NVIC_GetPriorityGrouping+0x18>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	f003 0307 	and.w	r3, r3, #7
}
 8003186:	4618      	mov	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	6039      	str	r1, [r7, #0]
 800319e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	db0a      	blt.n	80031be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	490c      	ldr	r1, [pc, #48]	; (80031e0 <__NVIC_SetPriority+0x4c>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	0112      	lsls	r2, r2, #4
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	440b      	add	r3, r1
 80031b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031bc:	e00a      	b.n	80031d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	4908      	ldr	r1, [pc, #32]	; (80031e4 <__NVIC_SetPriority+0x50>)
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	3b04      	subs	r3, #4
 80031cc:	0112      	lsls	r2, r2, #4
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	440b      	add	r3, r1
 80031d2:	761a      	strb	r2, [r3, #24]
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000e100 	.word	0xe000e100
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b089      	sub	sp, #36	; 0x24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f1c3 0307 	rsb	r3, r3, #7
 8003202:	2b04      	cmp	r3, #4
 8003204:	bf28      	it	cs
 8003206:	2304      	movcs	r3, #4
 8003208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3304      	adds	r3, #4
 800320e:	2b06      	cmp	r3, #6
 8003210:	d902      	bls.n	8003218 <NVIC_EncodePriority+0x30>
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3b03      	subs	r3, #3
 8003216:	e000      	b.n	800321a <NVIC_EncodePriority+0x32>
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800321c:	f04f 32ff 	mov.w	r2, #4294967295
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43da      	mvns	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	401a      	ands	r2, r3
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003230:	f04f 31ff 	mov.w	r1, #4294967295
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	fa01 f303 	lsl.w	r3, r1, r3
 800323a:	43d9      	mvns	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003240:	4313      	orrs	r3, r2
         );
}
 8003242:	4618      	mov	r0, r3
 8003244:	3724      	adds	r7, #36	; 0x24
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003260:	d301      	bcc.n	8003266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003262:	2301      	movs	r3, #1
 8003264:	e00f      	b.n	8003286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <SysTick_Config+0x40>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3b01      	subs	r3, #1
 800326c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800326e:	210f      	movs	r1, #15
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	f7ff ff8e 	bl	8003194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <SysTick_Config+0x40>)
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800327e:	4b04      	ldr	r3, [pc, #16]	; (8003290 <SysTick_Config+0x40>)
 8003280:	2207      	movs	r2, #7
 8003282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	e000e010 	.word	0xe000e010

08003294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff ff47 	bl	8003130 <__NVIC_SetPriorityGrouping>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	4603      	mov	r3, r0
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
 80032b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032bc:	f7ff ff5c 	bl	8003178 <__NVIC_GetPriorityGrouping>
 80032c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	6978      	ldr	r0, [r7, #20]
 80032c8:	f7ff ff8e 	bl	80031e8 <NVIC_EncodePriority>
 80032cc:	4602      	mov	r2, r0
 80032ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff5d 	bl	8003194 <__NVIC_SetPriority>
}
 80032da:	bf00      	nop
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ffb0 	bl	8003250 <SysTick_Config>
 80032f0:	4603      	mov	r3, r0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800330a:	e166      	b.n	80035da <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	2101      	movs	r1, #1
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	4013      	ands	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8158 	beq.w	80035d4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	2b01      	cmp	r3, #1
 800332e:	d005      	beq.n	800333c <HAL_GPIO_Init+0x40>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d130      	bne.n	800339e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003372:	2201      	movs	r2, #1
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	f003 0201 	and.w	r2, r3, #1
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d017      	beq.n	80033da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	2203      	movs	r2, #3
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4013      	ands	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d123      	bne.n	800342e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	08da      	lsrs	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3208      	adds	r2, #8
 80033ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	220f      	movs	r2, #15
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	08da      	lsrs	r2, r3, #3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3208      	adds	r2, #8
 8003428:	6939      	ldr	r1, [r7, #16]
 800342a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	2203      	movs	r2, #3
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0203 	and.w	r2, r3, #3
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80b2 	beq.w	80035d4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003470:	4b61      	ldr	r3, [pc, #388]	; (80035f8 <HAL_GPIO_Init+0x2fc>)
 8003472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003474:	4a60      	ldr	r2, [pc, #384]	; (80035f8 <HAL_GPIO_Init+0x2fc>)
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	6613      	str	r3, [r2, #96]	; 0x60
 800347c:	4b5e      	ldr	r3, [pc, #376]	; (80035f8 <HAL_GPIO_Init+0x2fc>)
 800347e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003488:	4a5c      	ldr	r2, [pc, #368]	; (80035fc <HAL_GPIO_Init+0x300>)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	3302      	adds	r3, #2
 8003490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003494:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	220f      	movs	r2, #15
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4013      	ands	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034b2:	d02b      	beq.n	800350c <HAL_GPIO_Init+0x210>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a52      	ldr	r2, [pc, #328]	; (8003600 <HAL_GPIO_Init+0x304>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d025      	beq.n	8003508 <HAL_GPIO_Init+0x20c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a51      	ldr	r2, [pc, #324]	; (8003604 <HAL_GPIO_Init+0x308>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d01f      	beq.n	8003504 <HAL_GPIO_Init+0x208>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a50      	ldr	r2, [pc, #320]	; (8003608 <HAL_GPIO_Init+0x30c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d019      	beq.n	8003500 <HAL_GPIO_Init+0x204>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a4f      	ldr	r2, [pc, #316]	; (800360c <HAL_GPIO_Init+0x310>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d013      	beq.n	80034fc <HAL_GPIO_Init+0x200>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a4e      	ldr	r2, [pc, #312]	; (8003610 <HAL_GPIO_Init+0x314>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00d      	beq.n	80034f8 <HAL_GPIO_Init+0x1fc>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a4d      	ldr	r2, [pc, #308]	; (8003614 <HAL_GPIO_Init+0x318>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <HAL_GPIO_Init+0x1f8>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a4c      	ldr	r2, [pc, #304]	; (8003618 <HAL_GPIO_Init+0x31c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d101      	bne.n	80034f0 <HAL_GPIO_Init+0x1f4>
 80034ec:	2307      	movs	r3, #7
 80034ee:	e00e      	b.n	800350e <HAL_GPIO_Init+0x212>
 80034f0:	2308      	movs	r3, #8
 80034f2:	e00c      	b.n	800350e <HAL_GPIO_Init+0x212>
 80034f4:	2306      	movs	r3, #6
 80034f6:	e00a      	b.n	800350e <HAL_GPIO_Init+0x212>
 80034f8:	2305      	movs	r3, #5
 80034fa:	e008      	b.n	800350e <HAL_GPIO_Init+0x212>
 80034fc:	2304      	movs	r3, #4
 80034fe:	e006      	b.n	800350e <HAL_GPIO_Init+0x212>
 8003500:	2303      	movs	r3, #3
 8003502:	e004      	b.n	800350e <HAL_GPIO_Init+0x212>
 8003504:	2302      	movs	r3, #2
 8003506:	e002      	b.n	800350e <HAL_GPIO_Init+0x212>
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <HAL_GPIO_Init+0x212>
 800350c:	2300      	movs	r3, #0
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	f002 0203 	and.w	r2, r2, #3
 8003514:	0092      	lsls	r2, r2, #2
 8003516:	4093      	lsls	r3, r2
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800351e:	4937      	ldr	r1, [pc, #220]	; (80035fc <HAL_GPIO_Init+0x300>)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	3302      	adds	r3, #2
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800352c:	4b3b      	ldr	r3, [pc, #236]	; (800361c <HAL_GPIO_Init+0x320>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	43db      	mvns	r3, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003550:	4a32      	ldr	r2, [pc, #200]	; (800361c <HAL_GPIO_Init+0x320>)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003556:	4b31      	ldr	r3, [pc, #196]	; (800361c <HAL_GPIO_Init+0x320>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	43db      	mvns	r3, r3
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4013      	ands	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800357a:	4a28      	ldr	r2, [pc, #160]	; (800361c <HAL_GPIO_Init+0x320>)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003580:	4b26      	ldr	r3, [pc, #152]	; (800361c <HAL_GPIO_Init+0x320>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	43db      	mvns	r3, r3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035a4:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_GPIO_Init+0x320>)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <HAL_GPIO_Init+0x320>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4013      	ands	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035ce:	4a13      	ldr	r2, [pc, #76]	; (800361c <HAL_GPIO_Init+0x320>)
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	3301      	adds	r3, #1
 80035d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f47f ae91 	bne.w	800330c <HAL_GPIO_Init+0x10>
  }
}
 80035ea:	bf00      	nop
 80035ec:	bf00      	nop
 80035ee:	371c      	adds	r7, #28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40010000 	.word	0x40010000
 8003600:	48000400 	.word	0x48000400
 8003604:	48000800 	.word	0x48000800
 8003608:	48000c00 	.word	0x48000c00
 800360c:	48001000 	.word	0x48001000
 8003610:	48001400 	.word	0x48001400
 8003614:	48001800 	.word	0x48001800
 8003618:	48001c00 	.word	0x48001c00
 800361c:	40010400 	.word	0x40010400

08003620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
 800362c:	4613      	mov	r3, r2
 800362e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003630:	787b      	ldrb	r3, [r7, #1]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003636:	887a      	ldrh	r2, [r7, #2]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800363c:	e002      	b.n	8003644 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800363e:	887a      	ldrh	r2, [r7, #2]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003654:	4b0d      	ldr	r3, [pc, #52]	; (800368c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800365c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003660:	d102      	bne.n	8003668 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003666:	e00b      	b.n	8003680 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003668:	4b08      	ldr	r3, [pc, #32]	; (800368c <HAL_PWREx_GetVoltageRange+0x3c>)
 800366a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003676:	d102      	bne.n	800367e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800367c:	e000      	b.n	8003680 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800367e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40007000 	.word	0x40007000

08003690 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d141      	bne.n	8003722 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800369e:	4b4b      	ldr	r3, [pc, #300]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036aa:	d131      	bne.n	8003710 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036ac:	4b47      	ldr	r3, [pc, #284]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036b2:	4a46      	ldr	r2, [pc, #280]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036bc:	4b43      	ldr	r3, [pc, #268]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036c4:	4a41      	ldr	r2, [pc, #260]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80036cc:	4b40      	ldr	r3, [pc, #256]	; (80037d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2232      	movs	r2, #50	; 0x32
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	4a3f      	ldr	r2, [pc, #252]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	0c9b      	lsrs	r3, r3, #18
 80036de:	3301      	adds	r3, #1
 80036e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036e2:	e002      	b.n	80036ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ea:	4b38      	ldr	r3, [pc, #224]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f6:	d102      	bne.n	80036fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f2      	bne.n	80036e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036fe:	4b33      	ldr	r3, [pc, #204]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800370a:	d158      	bne.n	80037be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e057      	b.n	80037c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003710:	4b2e      	ldr	r3, [pc, #184]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003716:	4a2d      	ldr	r2, [pc, #180]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800371c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003720:	e04d      	b.n	80037be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003728:	d141      	bne.n	80037ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800372a:	4b28      	ldr	r3, [pc, #160]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003736:	d131      	bne.n	800379c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003738:	4b24      	ldr	r3, [pc, #144]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800373e:	4a23      	ldr	r2, [pc, #140]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003744:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003748:	4b20      	ldr	r3, [pc, #128]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003750:	4a1e      	ldr	r2, [pc, #120]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003756:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003758:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2232      	movs	r2, #50	; 0x32
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	4a1c      	ldr	r2, [pc, #112]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	0c9b      	lsrs	r3, r3, #18
 800376a:	3301      	adds	r3, #1
 800376c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800376e:	e002      	b.n	8003776 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	3b01      	subs	r3, #1
 8003774:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003776:	4b15      	ldr	r3, [pc, #84]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003782:	d102      	bne.n	800378a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f2      	bne.n	8003770 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800378a:	4b10      	ldr	r3, [pc, #64]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003796:	d112      	bne.n	80037be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e011      	b.n	80037c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800379e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a2:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037ac:	e007      	b.n	80037be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037ae:	4b07      	ldr	r3, [pc, #28]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037b6:	4a05      	ldr	r2, [pc, #20]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037bc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	40007000 	.word	0x40007000
 80037d0:	20000000 	.word	0x20000000
 80037d4:	431bde83 	.word	0x431bde83

080037d8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	4a04      	ldr	r2, [pc, #16]	; (80037f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80037e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037e6:	6053      	str	r3, [r2, #4]
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40007000 	.word	0x40007000

080037f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d102      	bne.n	800380c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	f000 bc08 	b.w	800401c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800380c:	4b96      	ldr	r3, [pc, #600]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 030c 	and.w	r3, r3, #12
 8003814:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003816:	4b94      	ldr	r3, [pc, #592]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80e4 	beq.w	80039f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d007      	beq.n	8003844 <HAL_RCC_OscConfig+0x4c>
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2b0c      	cmp	r3, #12
 8003838:	f040 808b 	bne.w	8003952 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b01      	cmp	r3, #1
 8003840:	f040 8087 	bne.w	8003952 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003844:	4b88      	ldr	r3, [pc, #544]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_RCC_OscConfig+0x64>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e3df      	b.n	800401c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1a      	ldr	r2, [r3, #32]
 8003860:	4b81      	ldr	r3, [pc, #516]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d004      	beq.n	8003876 <HAL_RCC_OscConfig+0x7e>
 800386c:	4b7e      	ldr	r3, [pc, #504]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003874:	e005      	b.n	8003882 <HAL_RCC_OscConfig+0x8a>
 8003876:	4b7c      	ldr	r3, [pc, #496]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 8003878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003882:	4293      	cmp	r3, r2
 8003884:	d223      	bcs.n	80038ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fdcc 	bl	8004428 <RCC_SetFlashLatencyFromMSIRange>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e3c0      	b.n	800401c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800389a:	4b73      	ldr	r3, [pc, #460]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a72      	ldr	r2, [pc, #456]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 80038a0:	f043 0308 	orr.w	r3, r3, #8
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	4b70      	ldr	r3, [pc, #448]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	496d      	ldr	r1, [pc, #436]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038b8:	4b6b      	ldr	r3, [pc, #428]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	021b      	lsls	r3, r3, #8
 80038c6:	4968      	ldr	r1, [pc, #416]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	604b      	str	r3, [r1, #4]
 80038cc:	e025      	b.n	800391a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038ce:	4b66      	ldr	r3, [pc, #408]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a65      	ldr	r2, [pc, #404]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 80038d4:	f043 0308 	orr.w	r3, r3, #8
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	4b63      	ldr	r3, [pc, #396]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	4960      	ldr	r1, [pc, #384]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038ec:	4b5e      	ldr	r3, [pc, #376]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	495b      	ldr	r1, [pc, #364]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fd8c 	bl	8004428 <RCC_SetFlashLatencyFromMSIRange>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e380      	b.n	800401c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800391a:	f000 fcc1 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 800391e:	4602      	mov	r2, r0
 8003920:	4b51      	ldr	r3, [pc, #324]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	4950      	ldr	r1, [pc, #320]	; (8003a6c <HAL_RCC_OscConfig+0x274>)
 800392c:	5ccb      	ldrb	r3, [r1, r3]
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	fa22 f303 	lsr.w	r3, r2, r3
 8003936:	4a4e      	ldr	r2, [pc, #312]	; (8003a70 <HAL_RCC_OscConfig+0x278>)
 8003938:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800393a:	4b4e      	ldr	r3, [pc, #312]	; (8003a74 <HAL_RCC_OscConfig+0x27c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe fb1e 	bl	8001f80 <HAL_InitTick>
 8003944:	4603      	mov	r3, r0
 8003946:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d052      	beq.n	80039f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	e364      	b.n	800401c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d032      	beq.n	80039c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800395a:	4b43      	ldr	r3, [pc, #268]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a42      	ldr	r2, [pc, #264]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003966:	f7fe fb5b 	bl	8002020 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800396e:	f7fe fb57 	bl	8002020 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e34d      	b.n	800401c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003980:	4b39      	ldr	r3, [pc, #228]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800398c:	4b36      	ldr	r3, [pc, #216]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a35      	ldr	r2, [pc, #212]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 8003992:	f043 0308 	orr.w	r3, r3, #8
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b33      	ldr	r3, [pc, #204]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	4930      	ldr	r1, [pc, #192]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039aa:	4b2f      	ldr	r3, [pc, #188]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	492b      	ldr	r1, [pc, #172]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	604b      	str	r3, [r1, #4]
 80039be:	e01a      	b.n	80039f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039c0:	4b29      	ldr	r3, [pc, #164]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a28      	ldr	r2, [pc, #160]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039cc:	f7fe fb28 	bl	8002020 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039d4:	f7fe fb24 	bl	8002020 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e31a      	b.n	800401c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039e6:	4b20      	ldr	r3, [pc, #128]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x1dc>
 80039f2:	e000      	b.n	80039f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d073      	beq.n	8003aea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_OscConfig+0x21c>
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	2b0c      	cmp	r3, #12
 8003a0c:	d10e      	bne.n	8003a2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d10b      	bne.n	8003a2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a14:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d063      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x2f0>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d15f      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e2f7      	b.n	800401c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a34:	d106      	bne.n	8003a44 <HAL_RCC_OscConfig+0x24c>
 8003a36:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a0b      	ldr	r2, [pc, #44]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 8003a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	e025      	b.n	8003a90 <HAL_RCC_OscConfig+0x298>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a4c:	d114      	bne.n	8003a78 <HAL_RCC_OscConfig+0x280>
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a05      	ldr	r2, [pc, #20]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 8003a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a02      	ldr	r2, [pc, #8]	; (8003a68 <HAL_RCC_OscConfig+0x270>)
 8003a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	e013      	b.n	8003a90 <HAL_RCC_OscConfig+0x298>
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	08008358 	.word	0x08008358
 8003a70:	20000000 	.word	0x20000000
 8003a74:	20000004 	.word	0x20000004
 8003a78:	4ba0      	ldr	r3, [pc, #640]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a9f      	ldr	r2, [pc, #636]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4b9d      	ldr	r3, [pc, #628]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a9c      	ldr	r2, [pc, #624]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d013      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fe fac2 	bl	8002020 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7fe fabe 	bl	8002020 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	; 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e2b4      	b.n	800401c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ab2:	4b92      	ldr	r3, [pc, #584]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x2a8>
 8003abe:	e014      	b.n	8003aea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fe faae 	bl	8002020 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac8:	f7fe faaa 	bl	8002020 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b64      	cmp	r3, #100	; 0x64
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e2a0      	b.n	800401c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ada:	4b88      	ldr	r3, [pc, #544]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x2d0>
 8003ae6:	e000      	b.n	8003aea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d060      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_OscConfig+0x310>
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2b0c      	cmp	r3, #12
 8003b00:	d119      	bne.n	8003b36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d116      	bne.n	8003b36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b08:	4b7c      	ldr	r3, [pc, #496]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_RCC_OscConfig+0x328>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e27d      	b.n	800401c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b20:	4b76      	ldr	r3, [pc, #472]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	061b      	lsls	r3, r3, #24
 8003b2e:	4973      	ldr	r1, [pc, #460]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b34:	e040      	b.n	8003bb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d023      	beq.n	8003b86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b3e:	4b6f      	ldr	r3, [pc, #444]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a6e      	ldr	r2, [pc, #440]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4a:	f7fe fa69 	bl	8002020 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b52:	f7fe fa65 	bl	8002020 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e25b      	b.n	800401c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b64:	4b65      	ldr	r3, [pc, #404]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b70:	4b62      	ldr	r3, [pc, #392]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	061b      	lsls	r3, r3, #24
 8003b7e:	495f      	ldr	r1, [pc, #380]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	604b      	str	r3, [r1, #4]
 8003b84:	e018      	b.n	8003bb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b86:	4b5d      	ldr	r3, [pc, #372]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a5c      	ldr	r2, [pc, #368]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b92:	f7fe fa45 	bl	8002020 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b9a:	f7fe fa41 	bl	8002020 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e237      	b.n	800401c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bac:	4b53      	ldr	r3, [pc, #332]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f0      	bne.n	8003b9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d03c      	beq.n	8003c3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d01c      	beq.n	8003c06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bcc:	4b4b      	ldr	r3, [pc, #300]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd2:	4a4a      	ldr	r2, [pc, #296]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bdc:	f7fe fa20 	bl	8002020 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be4:	f7fe fa1c 	bl	8002020 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e212      	b.n	800401c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bf6:	4b41      	ldr	r3, [pc, #260]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0ef      	beq.n	8003be4 <HAL_RCC_OscConfig+0x3ec>
 8003c04:	e01b      	b.n	8003c3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c06:	4b3d      	ldr	r3, [pc, #244]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c0c:	4a3b      	ldr	r2, [pc, #236]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003c0e:	f023 0301 	bic.w	r3, r3, #1
 8003c12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c16:	f7fe fa03 	bl	8002020 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c1e:	f7fe f9ff 	bl	8002020 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e1f5      	b.n	800401c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c30:	4b32      	ldr	r3, [pc, #200]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1ef      	bne.n	8003c1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 80a6 	beq.w	8003d98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c50:	4b2a      	ldr	r3, [pc, #168]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10d      	bne.n	8003c78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5c:	4b27      	ldr	r3, [pc, #156]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c60:	4a26      	ldr	r2, [pc, #152]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c66:	6593      	str	r3, [r2, #88]	; 0x58
 8003c68:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c74:	2301      	movs	r3, #1
 8003c76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c78:	4b21      	ldr	r3, [pc, #132]	; (8003d00 <HAL_RCC_OscConfig+0x508>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d118      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c84:	4b1e      	ldr	r3, [pc, #120]	; (8003d00 <HAL_RCC_OscConfig+0x508>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1d      	ldr	r2, [pc, #116]	; (8003d00 <HAL_RCC_OscConfig+0x508>)
 8003c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c90:	f7fe f9c6 	bl	8002020 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c98:	f7fe f9c2 	bl	8002020 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e1b8      	b.n	800401c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003caa:	4b15      	ldr	r3, [pc, #84]	; (8003d00 <HAL_RCC_OscConfig+0x508>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d108      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x4d8>
 8003cbe:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc4:	4a0d      	ldr	r2, [pc, #52]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cce:	e029      	b.n	8003d24 <HAL_RCC_OscConfig+0x52c>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b05      	cmp	r3, #5
 8003cd6:	d115      	bne.n	8003d04 <HAL_RCC_OscConfig+0x50c>
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cde:	4a07      	ldr	r2, [pc, #28]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003ce0:	f043 0304 	orr.w	r3, r3, #4
 8003ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ce8:	4b04      	ldr	r3, [pc, #16]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cee:	4a03      	ldr	r2, [pc, #12]	; (8003cfc <HAL_RCC_OscConfig+0x504>)
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cf8:	e014      	b.n	8003d24 <HAL_RCC_OscConfig+0x52c>
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40007000 	.word	0x40007000
 8003d04:	4b9d      	ldr	r3, [pc, #628]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	4a9c      	ldr	r2, [pc, #624]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d14:	4b99      	ldr	r3, [pc, #612]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	4a98      	ldr	r2, [pc, #608]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003d1c:	f023 0304 	bic.w	r3, r3, #4
 8003d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d016      	beq.n	8003d5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2c:	f7fe f978 	bl	8002020 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d32:	e00a      	b.n	8003d4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	f7fe f974 	bl	8002020 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e168      	b.n	800401c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d4a:	4b8c      	ldr	r3, [pc, #560]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0ed      	beq.n	8003d34 <HAL_RCC_OscConfig+0x53c>
 8003d58:	e015      	b.n	8003d86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5a:	f7fe f961 	bl	8002020 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d60:	e00a      	b.n	8003d78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d62:	f7fe f95d 	bl	8002020 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e151      	b.n	800401c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d78:	4b80      	ldr	r3, [pc, #512]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1ed      	bne.n	8003d62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d86:	7ffb      	ldrb	r3, [r7, #31]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d105      	bne.n	8003d98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8c:	4b7b      	ldr	r3, [pc, #492]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d90:	4a7a      	ldr	r2, [pc, #488]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d03c      	beq.n	8003e1e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d01c      	beq.n	8003de6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dac:	4b73      	ldr	r3, [pc, #460]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003dae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003db2:	4a72      	ldr	r2, [pc, #456]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003db4:	f043 0301 	orr.w	r3, r3, #1
 8003db8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbc:	f7fe f930 	bl	8002020 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dc4:	f7fe f92c 	bl	8002020 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e122      	b.n	800401c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dd6:	4b69      	ldr	r3, [pc, #420]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0ef      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x5cc>
 8003de4:	e01b      	b.n	8003e1e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003de6:	4b65      	ldr	r3, [pc, #404]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003de8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dec:	4a63      	ldr	r2, [pc, #396]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df6:	f7fe f913 	bl	8002020 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dfe:	f7fe f90f 	bl	8002020 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e105      	b.n	800401c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e10:	4b5a      	ldr	r3, [pc, #360]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1ef      	bne.n	8003dfe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80f9 	beq.w	800401a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	f040 80cf 	bne.w	8003fd0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e32:	4b52      	ldr	r3, [pc, #328]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f003 0203 	and.w	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d12c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	3b01      	subs	r3, #1
 8003e52:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d123      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e62:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d11b      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d113      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	085b      	lsrs	r3, r3, #1
 8003e84:	3b01      	subs	r3, #1
 8003e86:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d109      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d071      	beq.n	8003f84 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b0c      	cmp	r3, #12
 8003ea4:	d068      	beq.n	8003f78 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ea6:	4b35      	ldr	r3, [pc, #212]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d105      	bne.n	8003ebe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003eb2:	4b32      	ldr	r3, [pc, #200]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e0ac      	b.n	800401c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ec2:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a2d      	ldr	r2, [pc, #180]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003ec8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ecc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ece:	f7fe f8a7 	bl	8002020 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed6:	f7fe f8a3 	bl	8002020 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e099      	b.n	800401c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee8:	4b24      	ldr	r3, [pc, #144]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f0      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef4:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <HAL_RCC_OscConfig+0x788>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f04:	3a01      	subs	r2, #1
 8003f06:	0112      	lsls	r2, r2, #4
 8003f08:	4311      	orrs	r1, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f0e:	0212      	lsls	r2, r2, #8
 8003f10:	4311      	orrs	r1, r2
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f16:	0852      	lsrs	r2, r2, #1
 8003f18:	3a01      	subs	r2, #1
 8003f1a:	0552      	lsls	r2, r2, #21
 8003f1c:	4311      	orrs	r1, r2
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f22:	0852      	lsrs	r2, r2, #1
 8003f24:	3a01      	subs	r2, #1
 8003f26:	0652      	lsls	r2, r2, #25
 8003f28:	4311      	orrs	r1, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f2e:	06d2      	lsls	r2, r2, #27
 8003f30:	430a      	orrs	r2, r1
 8003f32:	4912      	ldr	r1, [pc, #72]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f38:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a0f      	ldr	r2, [pc, #60]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f44:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4a0c      	ldr	r2, [pc, #48]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f50:	f7fe f866 	bl	8002020 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f58:	f7fe f862 	bl	8002020 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e058      	b.n	800401c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f6a:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <HAL_RCC_OscConfig+0x784>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f76:	e050      	b.n	800401a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e04f      	b.n	800401c <HAL_RCC_OscConfig+0x824>
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f84:	4b27      	ldr	r3, [pc, #156]	; (8004024 <HAL_RCC_OscConfig+0x82c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d144      	bne.n	800401a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f90:	4b24      	ldr	r3, [pc, #144]	; (8004024 <HAL_RCC_OscConfig+0x82c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a23      	ldr	r2, [pc, #140]	; (8004024 <HAL_RCC_OscConfig+0x82c>)
 8003f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f9c:	4b21      	ldr	r3, [pc, #132]	; (8004024 <HAL_RCC_OscConfig+0x82c>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4a20      	ldr	r2, [pc, #128]	; (8004024 <HAL_RCC_OscConfig+0x82c>)
 8003fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fa8:	f7fe f83a 	bl	8002020 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fe f836 	bl	8002020 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e02c      	b.n	800401c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc2:	4b18      	ldr	r3, [pc, #96]	; (8004024 <HAL_RCC_OscConfig+0x82c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x7b8>
 8003fce:	e024      	b.n	800401a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	2b0c      	cmp	r3, #12
 8003fd4:	d01f      	beq.n	8004016 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd6:	4b13      	ldr	r3, [pc, #76]	; (8004024 <HAL_RCC_OscConfig+0x82c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a12      	ldr	r2, [pc, #72]	; (8004024 <HAL_RCC_OscConfig+0x82c>)
 8003fdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe2:	f7fe f81d 	bl	8002020 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fea:	f7fe f819 	bl	8002020 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e00f      	b.n	800401c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ffc:	4b09      	ldr	r3, [pc, #36]	; (8004024 <HAL_RCC_OscConfig+0x82c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f0      	bne.n	8003fea <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_RCC_OscConfig+0x82c>)
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	4905      	ldr	r1, [pc, #20]	; (8004024 <HAL_RCC_OscConfig+0x82c>)
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <HAL_RCC_OscConfig+0x830>)
 8004010:	4013      	ands	r3, r2
 8004012:	60cb      	str	r3, [r1, #12]
 8004014:	e001      	b.n	800401a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3720      	adds	r7, #32
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000
 8004028:	feeefffc 	.word	0xfeeefffc

0800402c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e11d      	b.n	8004280 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004044:	4b90      	ldr	r3, [pc, #576]	; (8004288 <HAL_RCC_ClockConfig+0x25c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d910      	bls.n	8004074 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004052:	4b8d      	ldr	r3, [pc, #564]	; (8004288 <HAL_RCC_ClockConfig+0x25c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f023 020f 	bic.w	r2, r3, #15
 800405a:	498b      	ldr	r1, [pc, #556]	; (8004288 <HAL_RCC_ClockConfig+0x25c>)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004062:	4b89      	ldr	r3, [pc, #548]	; (8004288 <HAL_RCC_ClockConfig+0x25c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d001      	beq.n	8004074 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e105      	b.n	8004280 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d010      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	4b81      	ldr	r3, [pc, #516]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800408c:	429a      	cmp	r2, r3
 800408e:	d908      	bls.n	80040a2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004090:	4b7e      	ldr	r3, [pc, #504]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	497b      	ldr	r1, [pc, #492]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d079      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d11e      	bne.n	80040f4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b6:	4b75      	ldr	r3, [pc, #468]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e0dc      	b.n	8004280 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80040c6:	f000 fa09 	bl	80044dc <RCC_GetSysClockFreqFromPLLSource>
 80040ca:	4603      	mov	r3, r0
 80040cc:	4a70      	ldr	r2, [pc, #448]	; (8004290 <HAL_RCC_ClockConfig+0x264>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d946      	bls.n	8004160 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80040d2:	4b6e      	ldr	r3, [pc, #440]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d140      	bne.n	8004160 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040de:	4b6b      	ldr	r3, [pc, #428]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040e6:	4a69      	ldr	r2, [pc, #420]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 80040e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	e035      	b.n	8004160 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d107      	bne.n	800410c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040fc:	4b63      	ldr	r3, [pc, #396]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d115      	bne.n	8004134 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0b9      	b.n	8004280 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d107      	bne.n	8004124 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004114:	4b5d      	ldr	r3, [pc, #372]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d109      	bne.n	8004134 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0ad      	b.n	8004280 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004124:	4b59      	ldr	r3, [pc, #356]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0a5      	b.n	8004280 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004134:	f000 f8b4 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 8004138:	4603      	mov	r3, r0
 800413a:	4a55      	ldr	r2, [pc, #340]	; (8004290 <HAL_RCC_ClockConfig+0x264>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d90f      	bls.n	8004160 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004140:	4b52      	ldr	r3, [pc, #328]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d109      	bne.n	8004160 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800414c:	4b4f      	ldr	r3, [pc, #316]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004154:	4a4d      	ldr	r2, [pc, #308]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 8004156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800415a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800415c:	2380      	movs	r3, #128	; 0x80
 800415e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004160:	4b4a      	ldr	r3, [pc, #296]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f023 0203 	bic.w	r2, r3, #3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	4947      	ldr	r1, [pc, #284]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004172:	f7fd ff55 	bl	8002020 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004178:	e00a      	b.n	8004190 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417a:	f7fd ff51 	bl	8002020 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	f241 3288 	movw	r2, #5000	; 0x1388
 8004188:	4293      	cmp	r3, r2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e077      	b.n	8004280 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004190:	4b3e      	ldr	r3, [pc, #248]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 020c 	and.w	r2, r3, #12
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	429a      	cmp	r2, r3
 80041a0:	d1eb      	bne.n	800417a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b80      	cmp	r3, #128	; 0x80
 80041a6:	d105      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80041a8:	4b38      	ldr	r3, [pc, #224]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	4a37      	ldr	r2, [pc, #220]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 80041ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041b2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d010      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	4b31      	ldr	r3, [pc, #196]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d208      	bcs.n	80041e2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d0:	4b2e      	ldr	r3, [pc, #184]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	492b      	ldr	r1, [pc, #172]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e2:	4b29      	ldr	r3, [pc, #164]	; (8004288 <HAL_RCC_ClockConfig+0x25c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d210      	bcs.n	8004212 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f0:	4b25      	ldr	r3, [pc, #148]	; (8004288 <HAL_RCC_ClockConfig+0x25c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f023 020f 	bic.w	r2, r3, #15
 80041f8:	4923      	ldr	r1, [pc, #140]	; (8004288 <HAL_RCC_ClockConfig+0x25c>)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004200:	4b21      	ldr	r3, [pc, #132]	; (8004288 <HAL_RCC_ClockConfig+0x25c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d001      	beq.n	8004212 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e036      	b.n	8004280 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b00      	cmp	r3, #0
 800421c:	d008      	beq.n	8004230 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800421e:	4b1b      	ldr	r3, [pc, #108]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	4918      	ldr	r1, [pc, #96]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 800422c:	4313      	orrs	r3, r2
 800422e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b00      	cmp	r3, #0
 800423a:	d009      	beq.n	8004250 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800423c:	4b13      	ldr	r3, [pc, #76]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	4910      	ldr	r1, [pc, #64]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 800424c:	4313      	orrs	r3, r2
 800424e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004250:	f000 f826 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 8004254:	4602      	mov	r2, r0
 8004256:	4b0d      	ldr	r3, [pc, #52]	; (800428c <HAL_RCC_ClockConfig+0x260>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	091b      	lsrs	r3, r3, #4
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	490c      	ldr	r1, [pc, #48]	; (8004294 <HAL_RCC_ClockConfig+0x268>)
 8004262:	5ccb      	ldrb	r3, [r1, r3]
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
 800426c:	4a0a      	ldr	r2, [pc, #40]	; (8004298 <HAL_RCC_ClockConfig+0x26c>)
 800426e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004270:	4b0a      	ldr	r3, [pc, #40]	; (800429c <HAL_RCC_ClockConfig+0x270>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7fd fe83 	bl	8001f80 <HAL_InitTick>
 800427a:	4603      	mov	r3, r0
 800427c:	73fb      	strb	r3, [r7, #15]

  return status;
 800427e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40022000 	.word	0x40022000
 800428c:	40021000 	.word	0x40021000
 8004290:	04c4b400 	.word	0x04c4b400
 8004294:	08008358 	.word	0x08008358
 8004298:	20000000 	.word	0x20000000
 800429c:	20000004 	.word	0x20000004

080042a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b089      	sub	sp, #36	; 0x24
 80042a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
 80042aa:	2300      	movs	r3, #0
 80042ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ae:	4b3e      	ldr	r3, [pc, #248]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
 80042b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042b8:	4b3b      	ldr	r3, [pc, #236]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <HAL_RCC_GetSysClockFreq+0x34>
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	2b0c      	cmp	r3, #12
 80042cc:	d121      	bne.n	8004312 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d11e      	bne.n	8004312 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042d4:	4b34      	ldr	r3, [pc, #208]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d107      	bne.n	80042f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042e0:	4b31      	ldr	r3, [pc, #196]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042e6:	0a1b      	lsrs	r3, r3, #8
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	e005      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042f0:	4b2d      	ldr	r3, [pc, #180]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	091b      	lsrs	r3, r3, #4
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042fc:	4a2b      	ldr	r2, [pc, #172]	; (80043ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004304:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10d      	bne.n	8004328 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004310:	e00a      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	2b04      	cmp	r3, #4
 8004316:	d102      	bne.n	800431e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004318:	4b25      	ldr	r3, [pc, #148]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800431a:	61bb      	str	r3, [r7, #24]
 800431c:	e004      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b08      	cmp	r3, #8
 8004322:	d101      	bne.n	8004328 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004324:	4b23      	ldr	r3, [pc, #140]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004326:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	2b0c      	cmp	r3, #12
 800432c:	d134      	bne.n	8004398 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800432e:	4b1e      	ldr	r3, [pc, #120]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d003      	beq.n	8004346 <HAL_RCC_GetSysClockFreq+0xa6>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b03      	cmp	r3, #3
 8004342:	d003      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0xac>
 8004344:	e005      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004346:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004348:	617b      	str	r3, [r7, #20]
      break;
 800434a:	e005      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800434c:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800434e:	617b      	str	r3, [r7, #20]
      break;
 8004350:	e002      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	617b      	str	r3, [r7, #20]
      break;
 8004356:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004358:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	3301      	adds	r3, #1
 8004364:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004366:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	0a1b      	lsrs	r3, r3, #8
 800436c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	fb03 f202 	mul.w	r2, r3, r2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800437e:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	0e5b      	lsrs	r3, r3, #25
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	3301      	adds	r3, #1
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	fbb2 f3f3 	udiv	r3, r2, r3
 8004396:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004398:	69bb      	ldr	r3, [r7, #24]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3724      	adds	r7, #36	; 0x24
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40021000 	.word	0x40021000
 80043ac:	08008370 	.word	0x08008370
 80043b0:	00f42400 	.word	0x00f42400
 80043b4:	007a1200 	.word	0x007a1200

080043b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043bc:	4b03      	ldr	r3, [pc, #12]	; (80043cc <HAL_RCC_GetHCLKFreq+0x14>)
 80043be:	681b      	ldr	r3, [r3, #0]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	20000000 	.word	0x20000000

080043d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043d4:	f7ff fff0 	bl	80043b8 <HAL_RCC_GetHCLKFreq>
 80043d8:	4602      	mov	r2, r0
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	0a1b      	lsrs	r3, r3, #8
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	4904      	ldr	r1, [pc, #16]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043e6:	5ccb      	ldrb	r3, [r1, r3]
 80043e8:	f003 031f 	and.w	r3, r3, #31
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40021000 	.word	0x40021000
 80043f8:	08008368 	.word	0x08008368

080043fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004400:	f7ff ffda 	bl	80043b8 <HAL_RCC_GetHCLKFreq>
 8004404:	4602      	mov	r2, r0
 8004406:	4b06      	ldr	r3, [pc, #24]	; (8004420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	0adb      	lsrs	r3, r3, #11
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	4904      	ldr	r1, [pc, #16]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004412:	5ccb      	ldrb	r3, [r1, r3]
 8004414:	f003 031f 	and.w	r3, r3, #31
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40021000 	.word	0x40021000
 8004424:	08008368 	.word	0x08008368

08004428 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004434:	4b27      	ldr	r3, [pc, #156]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004440:	f7ff f906 	bl	8003650 <HAL_PWREx_GetVoltageRange>
 8004444:	6178      	str	r0, [r7, #20]
 8004446:	e014      	b.n	8004472 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004448:	4b22      	ldr	r3, [pc, #136]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	4a21      	ldr	r2, [pc, #132]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800444e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004452:	6593      	str	r3, [r2, #88]	; 0x58
 8004454:	4b1f      	ldr	r3, [pc, #124]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004460:	f7ff f8f6 	bl	8003650 <HAL_PWREx_GetVoltageRange>
 8004464:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004466:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446a:	4a1a      	ldr	r2, [pc, #104]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800446c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004470:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004478:	d10b      	bne.n	8004492 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b80      	cmp	r3, #128	; 0x80
 800447e:	d913      	bls.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2ba0      	cmp	r3, #160	; 0xa0
 8004484:	d902      	bls.n	800448c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004486:	2302      	movs	r3, #2
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	e00d      	b.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800448c:	2301      	movs	r3, #1
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	e00a      	b.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b7f      	cmp	r3, #127	; 0x7f
 8004496:	d902      	bls.n	800449e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004498:	2302      	movs	r3, #2
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	e004      	b.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b70      	cmp	r3, #112	; 0x70
 80044a2:	d101      	bne.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044a4:	2301      	movs	r3, #1
 80044a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044a8:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f023 020f 	bic.w	r2, r3, #15
 80044b0:	4909      	ldr	r1, [pc, #36]	; (80044d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044b8:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d001      	beq.n	80044ca <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40021000 	.word	0x40021000
 80044d8:	40022000 	.word	0x40022000

080044dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044e2:	4b2d      	ldr	r3, [pc, #180]	; (8004598 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d00b      	beq.n	800450a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d825      	bhi.n	8004544 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d008      	beq.n	8004510 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b02      	cmp	r3, #2
 8004502:	d11f      	bne.n	8004544 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004504:	4b25      	ldr	r3, [pc, #148]	; (800459c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004506:	613b      	str	r3, [r7, #16]
    break;
 8004508:	e01f      	b.n	800454a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800450a:	4b25      	ldr	r3, [pc, #148]	; (80045a0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800450c:	613b      	str	r3, [r7, #16]
    break;
 800450e:	e01c      	b.n	800454a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004510:	4b21      	ldr	r3, [pc, #132]	; (8004598 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d107      	bne.n	800452c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800451c:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800451e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004522:	0a1b      	lsrs	r3, r3, #8
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	e005      	b.n	8004538 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800452c:	4b1a      	ldr	r3, [pc, #104]	; (8004598 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004538:	4a1a      	ldr	r2, [pc, #104]	; (80045a4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004540:	613b      	str	r3, [r7, #16]
    break;
 8004542:	e002      	b.n	800454a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004544:	2300      	movs	r3, #0
 8004546:	613b      	str	r3, [r7, #16]
    break;
 8004548:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800454a:	4b13      	ldr	r3, [pc, #76]	; (8004598 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	091b      	lsrs	r3, r3, #4
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	3301      	adds	r3, #1
 8004556:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004558:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	0a1b      	lsrs	r3, r3, #8
 800455e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	fb03 f202 	mul.w	r2, r3, r2
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	fbb2 f3f3 	udiv	r3, r2, r3
 800456e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	0e5b      	lsrs	r3, r3, #25
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	3301      	adds	r3, #1
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	fbb2 f3f3 	udiv	r3, r2, r3
 8004588:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800458a:	683b      	ldr	r3, [r7, #0]
}
 800458c:	4618      	mov	r0, r3
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	40021000 	.word	0x40021000
 800459c:	00f42400 	.word	0x00f42400
 80045a0:	007a1200 	.word	0x007a1200
 80045a4:	08008370 	.word	0x08008370

080045a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045b0:	2300      	movs	r3, #0
 80045b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045b4:	2300      	movs	r3, #0
 80045b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d040      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c8:	2b80      	cmp	r3, #128	; 0x80
 80045ca:	d02a      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045cc:	2b80      	cmp	r3, #128	; 0x80
 80045ce:	d825      	bhi.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045d0:	2b60      	cmp	r3, #96	; 0x60
 80045d2:	d026      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045d4:	2b60      	cmp	r3, #96	; 0x60
 80045d6:	d821      	bhi.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045d8:	2b40      	cmp	r3, #64	; 0x40
 80045da:	d006      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x42>
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d81d      	bhi.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d009      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d010      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80045e8:	e018      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045ea:	4b89      	ldr	r3, [pc, #548]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	4a88      	ldr	r2, [pc, #544]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045f6:	e015      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	2100      	movs	r1, #0
 80045fe:	4618      	mov	r0, r3
 8004600:	f001 fa24 	bl	8005a4c <RCCEx_PLLSAI1_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004608:	e00c      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3320      	adds	r3, #32
 800460e:	2100      	movs	r1, #0
 8004610:	4618      	mov	r0, r3
 8004612:	f001 fb0f 	bl	8005c34 <RCCEx_PLLSAI2_Config>
 8004616:	4603      	mov	r3, r0
 8004618:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800461a:	e003      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	74fb      	strb	r3, [r7, #19]
      break;
 8004620:	e000      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10b      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800462a:	4b79      	ldr	r3, [pc, #484]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800462c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004630:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004638:	4975      	ldr	r1, [pc, #468]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004640:	e001      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004642:	7cfb      	ldrb	r3, [r7, #19]
 8004644:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d047      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465a:	d030      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x116>
 800465c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004660:	d82a      	bhi.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004666:	d02a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800466c:	d824      	bhi.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800466e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004672:	d008      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004678:	d81e      	bhi.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800467e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004682:	d010      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004684:	e018      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004686:	4b62      	ldr	r3, [pc, #392]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	4a61      	ldr	r2, [pc, #388]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800468c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004690:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004692:	e015      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3304      	adds	r3, #4
 8004698:	2100      	movs	r1, #0
 800469a:	4618      	mov	r0, r3
 800469c:	f001 f9d6 	bl	8005a4c <RCCEx_PLLSAI1_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046a4:	e00c      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3320      	adds	r3, #32
 80046aa:	2100      	movs	r1, #0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f001 fac1 	bl	8005c34 <RCCEx_PLLSAI2_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046b6:	e003      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	74fb      	strb	r3, [r7, #19]
      break;
 80046bc:	e000      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80046be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c0:	7cfb      	ldrb	r3, [r7, #19]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10b      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046c6:	4b52      	ldr	r3, [pc, #328]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	494e      	ldr	r1, [pc, #312]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80046dc:	e001      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046de:	7cfb      	ldrb	r3, [r7, #19]
 80046e0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 809f 	beq.w	800482e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f0:	2300      	movs	r3, #0
 80046f2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046f4:	4b46      	ldr	r3, [pc, #280]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004704:	2300      	movs	r3, #0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00d      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800470a:	4b41      	ldr	r3, [pc, #260]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800470c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470e:	4a40      	ldr	r2, [pc, #256]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004714:	6593      	str	r3, [r2, #88]	; 0x58
 8004716:	4b3e      	ldr	r3, [pc, #248]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004722:	2301      	movs	r3, #1
 8004724:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004726:	4b3b      	ldr	r3, [pc, #236]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a3a      	ldr	r2, [pc, #232]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800472c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004730:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004732:	f7fd fc75 	bl	8002020 <HAL_GetTick>
 8004736:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004738:	e009      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800473a:	f7fd fc71 	bl	8002020 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d902      	bls.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	74fb      	strb	r3, [r7, #19]
        break;
 800474c:	e005      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800474e:	4b31      	ldr	r3, [pc, #196]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0ef      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800475a:	7cfb      	ldrb	r3, [r7, #19]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d15b      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004760:	4b2b      	ldr	r3, [pc, #172]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d01f      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	429a      	cmp	r2, r3
 800477c:	d019      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800477e:	4b24      	ldr	r3, [pc, #144]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004788:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800478a:	4b21      	ldr	r3, [pc, #132]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004790:	4a1f      	ldr	r2, [pc, #124]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800479a:	4b1d      	ldr	r3, [pc, #116]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800479c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a0:	4a1b      	ldr	r2, [pc, #108]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047aa:	4a19      	ldr	r2, [pc, #100]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d016      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fd fc30 	bl	8002020 <HAL_GetTick>
 80047c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c2:	e00b      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c4:	f7fd fc2c 	bl	8002020 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d902      	bls.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	74fb      	strb	r3, [r7, #19]
            break;
 80047da:	e006      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047dc:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0ec      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80047ea:	7cfb      	ldrb	r3, [r7, #19]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10c      	bne.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047f0:	4b07      	ldr	r3, [pc, #28]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004800:	4903      	ldr	r1, [pc, #12]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004808:	e008      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	74bb      	strb	r3, [r7, #18]
 800480e:	e005      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004810:	40021000 	.word	0x40021000
 8004814:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004818:	7cfb      	ldrb	r3, [r7, #19]
 800481a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800481c:	7c7b      	ldrb	r3, [r7, #17]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d105      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004822:	4ba0      	ldr	r3, [pc, #640]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004826:	4a9f      	ldr	r2, [pc, #636]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800482c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800483a:	4b9a      	ldr	r3, [pc, #616]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	f023 0203 	bic.w	r2, r3, #3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004848:	4996      	ldr	r1, [pc, #600]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800485c:	4b91      	ldr	r3, [pc, #580]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	f023 020c 	bic.w	r2, r3, #12
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	498e      	ldr	r1, [pc, #568]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800487e:	4b89      	ldr	r3, [pc, #548]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004884:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488c:	4985      	ldr	r1, [pc, #532]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048a0:	4b80      	ldr	r3, [pc, #512]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ae:	497d      	ldr	r1, [pc, #500]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048c2:	4b78      	ldr	r3, [pc, #480]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d0:	4974      	ldr	r1, [pc, #464]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048e4:	4b6f      	ldr	r3, [pc, #444]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f2:	496c      	ldr	r1, [pc, #432]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004906:	4b67      	ldr	r3, [pc, #412]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004914:	4963      	ldr	r1, [pc, #396]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004928:	4b5e      	ldr	r3, [pc, #376]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004936:	495b      	ldr	r1, [pc, #364]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800494a:	4b56      	ldr	r3, [pc, #344]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800494c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004950:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004958:	4952      	ldr	r1, [pc, #328]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800496c:	4b4d      	ldr	r3, [pc, #308]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004972:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497a:	494a      	ldr	r1, [pc, #296]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800498e:	4b45      	ldr	r3, [pc, #276]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004994:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499c:	4941      	ldr	r1, [pc, #260]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049b0:	4b3c      	ldr	r3, [pc, #240]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049b6:	f023 0203 	bic.w	r2, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049be:	4939      	ldr	r1, [pc, #228]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d028      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049d2:	4b34      	ldr	r3, [pc, #208]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e0:	4930      	ldr	r1, [pc, #192]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049f0:	d106      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049f2:	4b2c      	ldr	r3, [pc, #176]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	4a2b      	ldr	r2, [pc, #172]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049fc:	60d3      	str	r3, [r2, #12]
 80049fe:	e011      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a08:	d10c      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	2101      	movs	r1, #1
 8004a10:	4618      	mov	r0, r3
 8004a12:	f001 f81b 	bl	8005a4c <RCCEx_PLLSAI1_Config>
 8004a16:	4603      	mov	r3, r0
 8004a18:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a1a:	7cfb      	ldrb	r3, [r7, #19]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004a20:	7cfb      	ldrb	r3, [r7, #19]
 8004a22:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d04d      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a38:	d108      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004a3a:	4b1a      	ldr	r3, [pc, #104]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a40:	4a18      	ldr	r2, [pc, #96]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a46:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004a4a:	e012      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004a4c:	4b15      	ldr	r3, [pc, #84]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a52:	4a14      	ldr	r2, [pc, #80]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a58:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004a5c:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a6a:	490e      	ldr	r1, [pc, #56]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a7a:	d106      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a7c:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a86:	60d3      	str	r3, [r2, #12]
 8004a88:	e020      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a92:	d109      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a94:	4b03      	ldr	r3, [pc, #12]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	4a02      	ldr	r2, [pc, #8]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a9e:	60d3      	str	r3, [r2, #12]
 8004aa0:	e014      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004aa2:	bf00      	nop
 8004aa4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ab0:	d10c      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 ffc7 	bl	8005a4c <RCCEx_PLLSAI1_Config>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ac2:	7cfb      	ldrb	r3, [r7, #19]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004ac8:	7cfb      	ldrb	r3, [r7, #19]
 8004aca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d028      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ad8:	4b4a      	ldr	r3, [pc, #296]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ade:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae6:	4947      	ldr	r1, [pc, #284]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004af2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004af6:	d106      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004af8:	4b42      	ldr	r3, [pc, #264]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	4a41      	ldr	r2, [pc, #260]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b02:	60d3      	str	r3, [r2, #12]
 8004b04:	e011      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b0e:	d10c      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3304      	adds	r3, #4
 8004b14:	2101      	movs	r1, #1
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 ff98 	bl	8005a4c <RCCEx_PLLSAI1_Config>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b20:	7cfb      	ldrb	r3, [r7, #19]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004b26:	7cfb      	ldrb	r3, [r7, #19]
 8004b28:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d01e      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b36:	4b33      	ldr	r3, [pc, #204]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b46:	492f      	ldr	r1, [pc, #188]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b58:	d10c      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	2102      	movs	r1, #2
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 ff73 	bl	8005a4c <RCCEx_PLLSAI1_Config>
 8004b66:	4603      	mov	r3, r0
 8004b68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b6a:	7cfb      	ldrb	r3, [r7, #19]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004b70:	7cfb      	ldrb	r3, [r7, #19]
 8004b72:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00b      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b80:	4b20      	ldr	r3, [pc, #128]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b86:	f023 0204 	bic.w	r2, r3, #4
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b90:	491c      	ldr	r1, [pc, #112]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00b      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ba4:	4b17      	ldr	r3, [pc, #92]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004baa:	f023 0218 	bic.w	r2, r3, #24
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb4:	4913      	ldr	r1, [pc, #76]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d017      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004bc8:	4b0e      	ldr	r3, [pc, #56]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bd8:	490a      	ldr	r1, [pc, #40]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bea:	d105      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bec:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	4a04      	ldr	r2, [pc, #16]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bf6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bf8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40021000 	.word	0x40021000

08004c08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c1a:	d13e      	bne.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004c1c:	4bb6      	ldr	r3, [pc, #728]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c26:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c2e:	d028      	beq.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c36:	f200 86f4 	bhi.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c40:	d005      	beq.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c48:	d00e      	beq.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004c4a:	f000 beea 	b.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c4e:	4baa      	ldr	r3, [pc, #680]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	f040 86e4 	bne.w	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8004c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c62:	61fb      	str	r3, [r7, #28]
      break;
 8004c64:	f000 bedf 	b.w	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004c68:	4ba3      	ldr	r3, [pc, #652]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	f040 86d9 	bne.w	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8004c78:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004c7c:	61fb      	str	r3, [r7, #28]
      break;
 8004c7e:	f000 bed4 	b.w	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c82:	4b9d      	ldr	r3, [pc, #628]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c8e:	f040 86ce 	bne.w	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8004c92:	4b9a      	ldr	r3, [pc, #616]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004c94:	61fb      	str	r3, [r7, #28]
      break;
 8004c96:	f000 beca 	b.w	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c9a:	4b97      	ldr	r3, [pc, #604]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d036      	beq.n	8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d840      	bhi.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d003      	beq.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d020      	beq.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004cbc:	e039      	b.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004cbe:	4b8e      	ldr	r3, [pc, #568]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d116      	bne.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004cca:	4b8b      	ldr	r3, [pc, #556]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d005      	beq.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004cd6:	4b88      	ldr	r3, [pc, #544]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	091b      	lsrs	r3, r3, #4
 8004cdc:	f003 030f 	and.w	r3, r3, #15
 8004ce0:	e005      	b.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004ce2:	4b85      	ldr	r3, [pc, #532]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ce8:	0a1b      	lsrs	r3, r3, #8
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	4a84      	ldr	r2, [pc, #528]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cf4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004cf6:	e01f      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61bb      	str	r3, [r7, #24]
      break;
 8004cfc:	e01c      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cfe:	4b7e      	ldr	r3, [pc, #504]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d0a:	d102      	bne.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004d0c:	4b7d      	ldr	r3, [pc, #500]	; (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004d0e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004d10:	e012      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61bb      	str	r3, [r7, #24]
      break;
 8004d16:	e00f      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d18:	4b77      	ldr	r3, [pc, #476]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d24:	d102      	bne.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004d26:	4b78      	ldr	r3, [pc, #480]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004d28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004d2a:	e005      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61bb      	str	r3, [r7, #24]
      break;
 8004d30:	e002      	b.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61bb      	str	r3, [r7, #24]
      break;
 8004d36:	bf00      	nop
    }

    switch(PeriphClk)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d3e:	f000 8606 	beq.w	800594e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d48:	f200 8673 	bhi.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d52:	f000 8469 	beq.w	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d5c:	f200 8669 	bhi.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d66:	f000 8531 	beq.w	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d70:	f200 865f 	bhi.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d7a:	f000 8187 	beq.w	800508c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d84:	f200 8655 	bhi.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d8e:	f000 80cd 	beq.w	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d98:	f200 864b 	bhi.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da2:	f000 8430 	beq.w	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dac:	f200 8641 	bhi.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004db6:	f000 83e4 	beq.w	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dc0:	f200 8637 	bhi.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dca:	f000 80af 	beq.w	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd4:	f200 862d 	bhi.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dde:	f000 809d 	beq.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de8:	f200 8623 	bhi.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df2:	f000 808b 	beq.w	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dfc:	f200 8619 	bhi.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e06:	f000 8554 	beq.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e10:	f200 860f 	bhi.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e1a:	f000 8500 	beq.w	800581e <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e24:	f200 8605 	bhi.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2e:	f000 84a1 	beq.w	8005774 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e38:	f200 85fb 	bhi.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b80      	cmp	r3, #128	; 0x80
 8004e40:	f000 846c 	beq.w	800571c <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b80      	cmp	r3, #128	; 0x80
 8004e48:	f200 85f3 	bhi.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d84c      	bhi.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 85ec 	beq.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	2b1f      	cmp	r3, #31
 8004e60:	f200 85e7 	bhi.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004e64:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6a:	bf00      	nop
 8004e6c:	08005281 	.word	0x08005281
 8004e70:	080052ef 	.word	0x080052ef
 8004e74:	08005a33 	.word	0x08005a33
 8004e78:	08005383 	.word	0x08005383
 8004e7c:	08005a33 	.word	0x08005a33
 8004e80:	08005a33 	.word	0x08005a33
 8004e84:	08005a33 	.word	0x08005a33
 8004e88:	080053fb 	.word	0x080053fb
 8004e8c:	08005a33 	.word	0x08005a33
 8004e90:	08005a33 	.word	0x08005a33
 8004e94:	08005a33 	.word	0x08005a33
 8004e98:	08005a33 	.word	0x08005a33
 8004e9c:	08005a33 	.word	0x08005a33
 8004ea0:	08005a33 	.word	0x08005a33
 8004ea4:	08005a33 	.word	0x08005a33
 8004ea8:	0800547f 	.word	0x0800547f
 8004eac:	08005a33 	.word	0x08005a33
 8004eb0:	08005a33 	.word	0x08005a33
 8004eb4:	08005a33 	.word	0x08005a33
 8004eb8:	08005a33 	.word	0x08005a33
 8004ebc:	08005a33 	.word	0x08005a33
 8004ec0:	08005a33 	.word	0x08005a33
 8004ec4:	08005a33 	.word	0x08005a33
 8004ec8:	08005a33 	.word	0x08005a33
 8004ecc:	08005a33 	.word	0x08005a33
 8004ed0:	08005a33 	.word	0x08005a33
 8004ed4:	08005a33 	.word	0x08005a33
 8004ed8:	08005a33 	.word	0x08005a33
 8004edc:	08005a33 	.word	0x08005a33
 8004ee0:	08005a33 	.word	0x08005a33
 8004ee4:	08005a33 	.word	0x08005a33
 8004ee8:	08005501 	.word	0x08005501
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b40      	cmp	r3, #64	; 0x40
 8004ef0:	f000 83e8 	beq.w	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004ef4:	f000 bd9d 	b.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	0003d090 	.word	0x0003d090
 8004f00:	08008370 	.word	0x08008370
 8004f04:	00f42400 	.word	0x00f42400
 8004f08:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004f0c:	69b9      	ldr	r1, [r7, #24]
 8004f0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004f12:	f000 ff83 	bl	8005e1c <RCCEx_GetSAIxPeriphCLKFreq>
 8004f16:	61f8      	str	r0, [r7, #28]
      break;
 8004f18:	f000 bd8e 	b.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004f1c:	69b9      	ldr	r1, [r7, #24]
 8004f1e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004f22:	f000 ff7b 	bl	8005e1c <RCCEx_GetSAIxPeriphCLKFreq>
 8004f26:	61f8      	str	r0, [r7, #28]
      break;
 8004f28:	f000 bd86 	b.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004f2c:	4b9a      	ldr	r3, [pc, #616]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f32:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004f3e:	d015      	beq.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004f46:	f200 8092 	bhi.w	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f50:	d029      	beq.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f58:	f200 8089 	bhi.w	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d07b      	beq.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f68:	d04a      	beq.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8004f6a:	e080      	b.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004f6c:	4b8a      	ldr	r3, [pc, #552]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d17d      	bne.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004f78:	4b87      	ldr	r3, [pc, #540]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8004f84:	4b84      	ldr	r3, [pc, #528]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	091b      	lsrs	r3, r3, #4
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	e005      	b.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8004f90:	4b81      	ldr	r3, [pc, #516]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f96:	0a1b      	lsrs	r3, r3, #8
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	4a7f      	ldr	r2, [pc, #508]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa2:	61fb      	str	r3, [r7, #28]
          break;
 8004fa4:	e066      	b.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004fa6:	4b7c      	ldr	r3, [pc, #496]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fb2:	d162      	bne.n	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004fb4:	4b78      	ldr	r3, [pc, #480]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc0:	d15b      	bne.n	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004fc2:	4b75      	ldr	r3, [pc, #468]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	0a1b      	lsrs	r3, r3, #8
 8004fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fcc:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	fb03 f202 	mul.w	r2, r3, r2
 8004fd6:	4b70      	ldr	r3, [pc, #448]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	091b      	lsrs	r3, r3, #4
 8004fdc:	f003 030f 	and.w	r3, r3, #15
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004fe8:	4b6b      	ldr	r3, [pc, #428]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	0d5b      	lsrs	r3, r3, #21
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffc:	61fb      	str	r3, [r7, #28]
          break;
 8004ffe:	e03c      	b.n	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005000:	4b65      	ldr	r3, [pc, #404]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800500c:	d138      	bne.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800500e:	4b62      	ldr	r3, [pc, #392]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800501a:	d131      	bne.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800501c:	4b5e      	ldr	r3, [pc, #376]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	0a1b      	lsrs	r3, r3, #8
 8005022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005026:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	fb03 f202 	mul.w	r2, r3, r2
 8005030:	4b59      	ldr	r3, [pc, #356]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	3301      	adds	r3, #1
 800503c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005040:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005042:	4b55      	ldr	r3, [pc, #340]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	0d5b      	lsrs	r3, r3, #21
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	3301      	adds	r3, #1
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	fbb2 f3f3 	udiv	r3, r2, r3
 8005056:	61fb      	str	r3, [r7, #28]
          break;
 8005058:	e012      	b.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800505a:	4b4f      	ldr	r3, [pc, #316]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800505c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b02      	cmp	r3, #2
 8005066:	d10e      	bne.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8005068:	4b4d      	ldr	r3, [pc, #308]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800506a:	61fb      	str	r3, [r7, #28]
          break;
 800506c:	e00b      	b.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800506e:	bf00      	nop
 8005070:	f000 bce2 	b.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005074:	bf00      	nop
 8005076:	f000 bcdf 	b.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800507a:	bf00      	nop
 800507c:	f000 bcdc 	b.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005080:	bf00      	nop
 8005082:	f000 bcd9 	b.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005086:	bf00      	nop
        break;
 8005088:	f000 bcd6 	b.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800508c:	4b42      	ldr	r3, [pc, #264]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800508e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800509a:	d13d      	bne.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800509c:	4b3e      	ldr	r3, [pc, #248]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050a8:	f040 84c5 	bne.w	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80050ac:	4b3a      	ldr	r3, [pc, #232]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b8:	f040 84bd 	bne.w	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80050bc:	4b36      	ldr	r3, [pc, #216]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	0a1b      	lsrs	r3, r3, #8
 80050c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050c6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	fb03 f202 	mul.w	r2, r3, r2
 80050d0:	4b31      	ldr	r3, [pc, #196]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	091b      	lsrs	r3, r3, #4
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	3301      	adds	r3, #1
 80050dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e0:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80050e2:	4b2d      	ldr	r3, [pc, #180]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	0edb      	lsrs	r3, r3, #27
 80050e8:	f003 031f 	and.w	r3, r3, #31
 80050ec:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10a      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80050f4:	4b28      	ldr	r3, [pc, #160]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8005100:	2311      	movs	r3, #17
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	e001      	b.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8005106:	2307      	movs	r3, #7
 8005108:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005112:	61fb      	str	r3, [r7, #28]
      break;
 8005114:	f000 bc8f 	b.w	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005118:	4b1f      	ldr	r3, [pc, #124]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800512a:	d016      	beq.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005132:	f200 809b 	bhi.w	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800513c:	d032      	beq.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005144:	f200 8092 	bhi.w	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 8084 	beq.w	8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005156:	d052      	beq.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8005158:	e088      	b.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800515a:	4b0f      	ldr	r3, [pc, #60]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b02      	cmp	r3, #2
 8005164:	f040 8084 	bne.w	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005168:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005174:	4b08      	ldr	r3, [pc, #32]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	091b      	lsrs	r3, r3, #4
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	e005      	b.n	800518c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8005180:	4b05      	ldr	r3, [pc, #20]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005186:	0a1b      	lsrs	r3, r3, #8
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	4a03      	ldr	r2, [pc, #12]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800518e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005192:	61fb      	str	r3, [r7, #28]
          break;
 8005194:	e06c      	b.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8005196:	bf00      	nop
 8005198:	40021000 	.word	0x40021000
 800519c:	08008370 	.word	0x08008370
 80051a0:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80051a4:	4ba5      	ldr	r3, [pc, #660]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051b0:	d160      	bne.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80051b2:	4ba2      	ldr	r3, [pc, #648]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051be:	d159      	bne.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80051c0:	4b9e      	ldr	r3, [pc, #632]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	0a1b      	lsrs	r3, r3, #8
 80051c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ca:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	fb03 f202 	mul.w	r2, r3, r2
 80051d4:	4b99      	ldr	r3, [pc, #612]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	3301      	adds	r3, #1
 80051e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80051e6:	4b95      	ldr	r3, [pc, #596]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	0d5b      	lsrs	r3, r3, #21
 80051ec:	f003 0303 	and.w	r3, r3, #3
 80051f0:	3301      	adds	r3, #1
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fa:	61fb      	str	r3, [r7, #28]
          break;
 80051fc:	e03a      	b.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80051fe:	4b8f      	ldr	r3, [pc, #572]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800520a:	d135      	bne.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800520c:	4b8b      	ldr	r3, [pc, #556]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005218:	d12e      	bne.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800521a:	4b88      	ldr	r3, [pc, #544]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	0a1b      	lsrs	r3, r3, #8
 8005220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005224:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	fb03 f202 	mul.w	r2, r3, r2
 800522e:	4b83      	ldr	r3, [pc, #524]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	091b      	lsrs	r3, r3, #4
 8005234:	f003 030f 	and.w	r3, r3, #15
 8005238:	3301      	adds	r3, #1
 800523a:	fbb2 f3f3 	udiv	r3, r2, r3
 800523e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005240:	4b7e      	ldr	r3, [pc, #504]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	0d5b      	lsrs	r3, r3, #21
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	3301      	adds	r3, #1
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	fbb2 f3f3 	udiv	r3, r2, r3
 8005254:	61fb      	str	r3, [r7, #28]
          break;
 8005256:	e00f      	b.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005258:	4b78      	ldr	r3, [pc, #480]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800525a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b02      	cmp	r3, #2
 8005264:	d10a      	bne.n	800527c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8005266:	4b76      	ldr	r3, [pc, #472]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005268:	61fb      	str	r3, [r7, #28]
          break;
 800526a:	e007      	b.n	800527c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800526c:	bf00      	nop
 800526e:	e3e2      	b.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005270:	bf00      	nop
 8005272:	e3e0      	b.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005274:	bf00      	nop
 8005276:	e3de      	b.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005278:	bf00      	nop
 800527a:	e3dc      	b.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800527c:	bf00      	nop
      break;
 800527e:	e3da      	b.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005280:	4b6e      	ldr	r3, [pc, #440]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d827      	bhi.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005292:	a201      	add	r2, pc, #4	; (adr r2, 8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8005294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005298:	080052a9 	.word	0x080052a9
 800529c:	080052b1 	.word	0x080052b1
 80052a0:	080052b9 	.word	0x080052b9
 80052a4:	080052cd 	.word	0x080052cd
          frequency = HAL_RCC_GetPCLK2Freq();
 80052a8:	f7ff f8a8 	bl	80043fc <HAL_RCC_GetPCLK2Freq>
 80052ac:	61f8      	str	r0, [r7, #28]
          break;
 80052ae:	e01d      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80052b0:	f7fe fff6 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 80052b4:	61f8      	str	r0, [r7, #28]
          break;
 80052b6:	e019      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052b8:	4b60      	ldr	r3, [pc, #384]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c4:	d10f      	bne.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 80052c6:	4b5f      	ldr	r3, [pc, #380]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80052c8:	61fb      	str	r3, [r7, #28]
          break;
 80052ca:	e00c      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80052cc:	4b5b      	ldr	r3, [pc, #364]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80052ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d107      	bne.n	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 80052da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052de:	61fb      	str	r3, [r7, #28]
          break;
 80052e0:	e003      	b.n	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80052e2:	bf00      	nop
 80052e4:	e3a8      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80052e6:	bf00      	nop
 80052e8:	e3a6      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80052ea:	bf00      	nop
        break;
 80052ec:	e3a4      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80052ee:	4b53      	ldr	r3, [pc, #332]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80052f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f4:	f003 030c 	and.w	r3, r3, #12
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b0c      	cmp	r3, #12
 80052fe:	d83a      	bhi.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005300:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8005302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005306:	bf00      	nop
 8005308:	0800533d 	.word	0x0800533d
 800530c:	08005377 	.word	0x08005377
 8005310:	08005377 	.word	0x08005377
 8005314:	08005377 	.word	0x08005377
 8005318:	08005345 	.word	0x08005345
 800531c:	08005377 	.word	0x08005377
 8005320:	08005377 	.word	0x08005377
 8005324:	08005377 	.word	0x08005377
 8005328:	0800534d 	.word	0x0800534d
 800532c:	08005377 	.word	0x08005377
 8005330:	08005377 	.word	0x08005377
 8005334:	08005377 	.word	0x08005377
 8005338:	08005361 	.word	0x08005361
          frequency = HAL_RCC_GetPCLK1Freq();
 800533c:	f7ff f848 	bl	80043d0 <HAL_RCC_GetPCLK1Freq>
 8005340:	61f8      	str	r0, [r7, #28]
          break;
 8005342:	e01d      	b.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8005344:	f7fe ffac 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 8005348:	61f8      	str	r0, [r7, #28]
          break;
 800534a:	e019      	b.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800534c:	4b3b      	ldr	r3, [pc, #236]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005358:	d10f      	bne.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800535a:	4b3a      	ldr	r3, [pc, #232]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800535c:	61fb      	str	r3, [r7, #28]
          break;
 800535e:	e00c      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005360:	4b36      	ldr	r3, [pc, #216]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b02      	cmp	r3, #2
 800536c:	d107      	bne.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800536e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005372:	61fb      	str	r3, [r7, #28]
          break;
 8005374:	e003      	b.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8005376:	bf00      	nop
 8005378:	e35e      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800537a:	bf00      	nop
 800537c:	e35c      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800537e:	bf00      	nop
        break;
 8005380:	e35a      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005382:	4b2e      	ldr	r3, [pc, #184]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005388:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2b30      	cmp	r3, #48	; 0x30
 8005392:	d021      	beq.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b30      	cmp	r3, #48	; 0x30
 8005398:	d829      	bhi.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b20      	cmp	r3, #32
 800539e:	d011      	beq.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d823      	bhi.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b10      	cmp	r3, #16
 80053b0:	d004      	beq.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 80053b2:	e01c      	b.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80053b4:	f7ff f80c 	bl	80043d0 <HAL_RCC_GetPCLK1Freq>
 80053b8:	61f8      	str	r0, [r7, #28]
          break;
 80053ba:	e01d      	b.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80053bc:	f7fe ff70 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 80053c0:	61f8      	str	r0, [r7, #28]
          break;
 80053c2:	e019      	b.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053c4:	4b1d      	ldr	r3, [pc, #116]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d0:	d10f      	bne.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 80053d2:	4b1c      	ldr	r3, [pc, #112]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80053d4:	61fb      	str	r3, [r7, #28]
          break;
 80053d6:	e00c      	b.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80053d8:	4b18      	ldr	r3, [pc, #96]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d107      	bne.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 80053e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ea:	61fb      	str	r3, [r7, #28]
          break;
 80053ec:	e003      	b.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80053ee:	bf00      	nop
 80053f0:	e322      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80053f2:	bf00      	nop
 80053f4:	e320      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80053f6:	bf00      	nop
        break;
 80053f8:	e31e      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80053fa:	4b10      	ldr	r3, [pc, #64]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005400:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2bc0      	cmp	r3, #192	; 0xc0
 800540a:	d027      	beq.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2bc0      	cmp	r3, #192	; 0xc0
 8005410:	d82f      	bhi.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b80      	cmp	r3, #128	; 0x80
 8005416:	d017      	beq.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b80      	cmp	r3, #128	; 0x80
 800541c:	d829      	bhi.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b40      	cmp	r3, #64	; 0x40
 8005428:	d004      	beq.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800542a:	e022      	b.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800542c:	f7fe ffd0 	bl	80043d0 <HAL_RCC_GetPCLK1Freq>
 8005430:	61f8      	str	r0, [r7, #28]
          break;
 8005432:	e023      	b.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8005434:	f7fe ff34 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 8005438:	61f8      	str	r0, [r7, #28]
          break;
 800543a:	e01f      	b.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800543c:	40021000 	.word	0x40021000
 8005440:	02dc6c00 	.word	0x02dc6c00
 8005444:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005448:	4b9b      	ldr	r3, [pc, #620]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005454:	d10f      	bne.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8005456:	4b99      	ldr	r3, [pc, #612]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005458:	61fb      	str	r3, [r7, #28]
          break;
 800545a:	e00c      	b.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800545c:	4b96      	ldr	r3, [pc, #600]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b02      	cmp	r3, #2
 8005468:	d107      	bne.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800546a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800546e:	61fb      	str	r3, [r7, #28]
          break;
 8005470:	e003      	b.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8005472:	bf00      	nop
 8005474:	e2e0      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005476:	bf00      	nop
 8005478:	e2de      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800547a:	bf00      	nop
        break;
 800547c:	e2dc      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800547e:	4b8e      	ldr	r3, [pc, #568]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005490:	d025      	beq.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005498:	d82c      	bhi.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a0:	d013      	beq.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a8:	d824      	bhi.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d004      	beq.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b6:	d004      	beq.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 80054b8:	e01c      	b.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80054ba:	f7fe ff89 	bl	80043d0 <HAL_RCC_GetPCLK1Freq>
 80054be:	61f8      	str	r0, [r7, #28]
          break;
 80054c0:	e01d      	b.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80054c2:	f7fe feed 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 80054c6:	61f8      	str	r0, [r7, #28]
          break;
 80054c8:	e019      	b.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054ca:	4b7b      	ldr	r3, [pc, #492]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d6:	d10f      	bne.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 80054d8:	4b78      	ldr	r3, [pc, #480]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80054da:	61fb      	str	r3, [r7, #28]
          break;
 80054dc:	e00c      	b.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80054de:	4b76      	ldr	r3, [pc, #472]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80054e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d107      	bne.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 80054ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054f0:	61fb      	str	r3, [r7, #28]
          break;
 80054f2:	e003      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 80054f4:	bf00      	nop
 80054f6:	e29f      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054f8:	bf00      	nop
 80054fa:	e29d      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054fc:	bf00      	nop
        break;
 80054fe:	e29b      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005500:	4b6d      	ldr	r3, [pc, #436]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005506:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005512:	d025      	beq.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800551a:	d82c      	bhi.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005522:	d013      	beq.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800552a:	d824      	bhi.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d004      	beq.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005538:	d004      	beq.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800553a:	e01c      	b.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800553c:	f7fe ff48 	bl	80043d0 <HAL_RCC_GetPCLK1Freq>
 8005540:	61f8      	str	r0, [r7, #28]
          break;
 8005542:	e01d      	b.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8005544:	f7fe feac 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 8005548:	61f8      	str	r0, [r7, #28]
          break;
 800554a:	e019      	b.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800554c:	4b5a      	ldr	r3, [pc, #360]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005558:	d10f      	bne.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800555a:	4b58      	ldr	r3, [pc, #352]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800555c:	61fb      	str	r3, [r7, #28]
          break;
 800555e:	e00c      	b.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005560:	4b55      	ldr	r3, [pc, #340]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b02      	cmp	r3, #2
 800556c:	d107      	bne.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800556e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005572:	61fb      	str	r3, [r7, #28]
          break;
 8005574:	e003      	b.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8005576:	bf00      	nop
 8005578:	e25e      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800557a:	bf00      	nop
 800557c:	e25c      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800557e:	bf00      	nop
        break;
 8005580:	e25a      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005582:	4b4d      	ldr	r3, [pc, #308]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005588:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005594:	d007      	beq.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800559c:	d12f      	bne.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800559e:	f7fe fe7f 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 80055a2:	61f8      	str	r0, [r7, #28]
          break;
 80055a4:	e02e      	b.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80055a6:	4b44      	ldr	r3, [pc, #272]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055b2:	d126      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80055b4:	4b40      	ldr	r3, [pc, #256]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d020      	beq.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80055c0:	4b3d      	ldr	r3, [pc, #244]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	0a1b      	lsrs	r3, r3, #8
 80055c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ca:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	fb03 f202 	mul.w	r2, r3, r2
 80055d4:	4b38      	ldr	r3, [pc, #224]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	091b      	lsrs	r3, r3, #4
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	3301      	adds	r3, #1
 80055e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80055e6:	4b34      	ldr	r3, [pc, #208]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	0e5b      	lsrs	r3, r3, #25
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	3301      	adds	r3, #1
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fa:	61fb      	str	r3, [r7, #28]
          break;
 80055fc:	e001      	b.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 80055fe:	bf00      	nop
 8005600:	e21a      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005602:	bf00      	nop
        break;
 8005604:	e218      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005606:	4b2c      	ldr	r3, [pc, #176]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005608:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d103      	bne.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005618:	f7fe fef0 	bl	80043fc <HAL_RCC_GetPCLK2Freq>
 800561c:	61f8      	str	r0, [r7, #28]
        break;
 800561e:	e20b      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8005620:	f7fe fe3e 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 8005624:	61f8      	str	r0, [r7, #28]
        break;
 8005626:	e207      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005628:	4b23      	ldr	r3, [pc, #140]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800562a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800562e:	f003 0318 	and.w	r3, r3, #24
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b10      	cmp	r3, #16
 8005638:	d010      	beq.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b10      	cmp	r3, #16
 800563e:	d834      	bhi.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b08      	cmp	r3, #8
 800564a:	d024      	beq.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800564c:	e02d      	b.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800564e:	69b9      	ldr	r1, [r7, #24]
 8005650:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005654:	f000 fbe2 	bl	8005e1c <RCCEx_GetSAIxPeriphCLKFreq>
 8005658:	61f8      	str	r0, [r7, #28]
          break;
 800565a:	e02b      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800565c:	4b16      	ldr	r3, [pc, #88]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b02      	cmp	r3, #2
 8005666:	d122      	bne.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005668:	4b13      	ldr	r3, [pc, #76]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0308 	and.w	r3, r3, #8
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005674:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	091b      	lsrs	r3, r3, #4
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	e005      	b.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8005680:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	f003 030f 	and.w	r3, r3, #15
 800568c:	4a0c      	ldr	r2, [pc, #48]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800568e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005692:	61fb      	str	r3, [r7, #28]
          break;
 8005694:	e00b      	b.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005696:	4b08      	ldr	r3, [pc, #32]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800569e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a2:	d106      	bne.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 80056a4:	4b05      	ldr	r3, [pc, #20]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80056a6:	61fb      	str	r3, [r7, #28]
          break;
 80056a8:	e003      	b.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 80056aa:	bf00      	nop
 80056ac:	e1c4      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80056ae:	bf00      	nop
 80056b0:	e1c2      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80056b2:	bf00      	nop
        break;
 80056b4:	e1c0      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80056b6:	bf00      	nop
 80056b8:	40021000 	.word	0x40021000
 80056bc:	00f42400 	.word	0x00f42400
 80056c0:	08008370 	.word	0x08008370
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80056c4:	4b96      	ldr	r3, [pc, #600]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80056c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056d6:	d013      	beq.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056de:	d819      	bhi.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d004      	beq.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ec:	d004      	beq.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 80056ee:	e011      	b.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80056f0:	f7fe fe6e 	bl	80043d0 <HAL_RCC_GetPCLK1Freq>
 80056f4:	61f8      	str	r0, [r7, #28]
          break;
 80056f6:	e010      	b.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 80056f8:	f7fe fdd2 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 80056fc:	61f8      	str	r0, [r7, #28]
          break;
 80056fe:	e00c      	b.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005700:	4b87      	ldr	r3, [pc, #540]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570c:	d104      	bne.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800570e:	4b85      	ldr	r3, [pc, #532]	; (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005710:	61fb      	str	r3, [r7, #28]
          break;
 8005712:	e001      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8005714:	bf00      	nop
 8005716:	e18f      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005718:	bf00      	nop
        break;
 800571a:	e18d      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800571c:	4b80      	ldr	r3, [pc, #512]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005722:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800572e:	d013      	beq.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005736:	d819      	bhi.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d004      	beq.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005744:	d004      	beq.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8005746:	e011      	b.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005748:	f7fe fe42 	bl	80043d0 <HAL_RCC_GetPCLK1Freq>
 800574c:	61f8      	str	r0, [r7, #28]
          break;
 800574e:	e010      	b.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005750:	f7fe fda6 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 8005754:	61f8      	str	r0, [r7, #28]
          break;
 8005756:	e00c      	b.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005758:	4b71      	ldr	r3, [pc, #452]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005764:	d104      	bne.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8005766:	4b6f      	ldr	r3, [pc, #444]	; (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005768:	61fb      	str	r3, [r7, #28]
          break;
 800576a:	e001      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800576c:	bf00      	nop
 800576e:	e163      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005770:	bf00      	nop
        break;
 8005772:	e161      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005774:	4b6a      	ldr	r3, [pc, #424]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005786:	d013      	beq.n	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800578e:	d819      	bhi.n	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d004      	beq.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800579c:	d004      	beq.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800579e:	e011      	b.n	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80057a0:	f7fe fe16 	bl	80043d0 <HAL_RCC_GetPCLK1Freq>
 80057a4:	61f8      	str	r0, [r7, #28]
          break;
 80057a6:	e010      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 80057a8:	f7fe fd7a 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 80057ac:	61f8      	str	r0, [r7, #28]
          break;
 80057ae:	e00c      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057b0:	4b5b      	ldr	r3, [pc, #364]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057bc:	d104      	bne.n	80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 80057be:	4b59      	ldr	r3, [pc, #356]	; (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80057c0:	61fb      	str	r3, [r7, #28]
          break;
 80057c2:	e001      	b.n	80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 80057c4:	bf00      	nop
 80057c6:	e137      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80057c8:	bf00      	nop
        break;
 80057ca:	e135      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80057cc:	4b54      	ldr	r3, [pc, #336]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80057ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d011      	beq.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d818      	bhi.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d004      	beq.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 80057f0:	e011      	b.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80057f2:	f7fe fded 	bl	80043d0 <HAL_RCC_GetPCLK1Freq>
 80057f6:	61f8      	str	r0, [r7, #28]
          break;
 80057f8:	e010      	b.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 80057fa:	f7fe fd51 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 80057fe:	61f8      	str	r0, [r7, #28]
          break;
 8005800:	e00c      	b.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005802:	4b47      	ldr	r3, [pc, #284]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580e:	d104      	bne.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8005810:	4b44      	ldr	r3, [pc, #272]	; (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005812:	61fb      	str	r3, [r7, #28]
          break;
 8005814:	e001      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8005816:	bf00      	nop
 8005818:	e10e      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800581a:	bf00      	nop
        break;
 800581c:	e10c      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800581e:	4b40      	ldr	r3, [pc, #256]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005824:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005830:	d02c      	beq.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005838:	d833      	bhi.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005840:	d01a      	beq.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005848:	d82b      	bhi.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d004      	beq.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005856:	d004      	beq.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8005858:	e023      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800585a:	f7fe fdb9 	bl	80043d0 <HAL_RCC_GetPCLK1Freq>
 800585e:	61f8      	str	r0, [r7, #28]
          break;
 8005860:	e026      	b.n	80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005862:	4b2f      	ldr	r3, [pc, #188]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b02      	cmp	r3, #2
 800586e:	d11a      	bne.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8005870:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005874:	61fb      	str	r3, [r7, #28]
          break;
 8005876:	e016      	b.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005878:	4b29      	ldr	r3, [pc, #164]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005884:	d111      	bne.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8005886:	4b27      	ldr	r3, [pc, #156]	; (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005888:	61fb      	str	r3, [r7, #28]
          break;
 800588a:	e00e      	b.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800588c:	4b24      	ldr	r3, [pc, #144]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800588e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b02      	cmp	r3, #2
 8005898:	d109      	bne.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800589a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800589e:	61fb      	str	r3, [r7, #28]
          break;
 80058a0:	e005      	b.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 80058a2:	bf00      	nop
 80058a4:	e0c8      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80058a6:	bf00      	nop
 80058a8:	e0c6      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80058aa:	bf00      	nop
 80058ac:	e0c4      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80058ae:	bf00      	nop
        break;
 80058b0:	e0c2      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80058b2:	4b1b      	ldr	r3, [pc, #108]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058c4:	d030      	beq.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058cc:	d837      	bhi.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058d4:	d01a      	beq.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058dc:	d82f      	bhi.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d004      	beq.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ea:	d004      	beq.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 80058ec:	e027      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058ee:	f7fe fd6f 	bl	80043d0 <HAL_RCC_GetPCLK1Freq>
 80058f2:	61f8      	str	r0, [r7, #28]
          break;
 80058f4:	e02a      	b.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80058f6:	4b0a      	ldr	r3, [pc, #40]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80058f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b02      	cmp	r3, #2
 8005902:	d11e      	bne.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8005904:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005908:	61fb      	str	r3, [r7, #28]
          break;
 800590a:	e01a      	b.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800590c:	4b04      	ldr	r3, [pc, #16]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005918:	d115      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800591a:	4b02      	ldr	r3, [pc, #8]	; (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800591c:	61fb      	str	r3, [r7, #28]
          break;
 800591e:	e012      	b.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005920:	40021000 	.word	0x40021000
 8005924:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005928:	4b46      	ldr	r3, [pc, #280]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b02      	cmp	r3, #2
 8005934:	d109      	bne.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8005936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800593a:	61fb      	str	r3, [r7, #28]
          break;
 800593c:	e005      	b.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800593e:	bf00      	nop
 8005940:	e07a      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005942:	bf00      	nop
 8005944:	e078      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005946:	bf00      	nop
 8005948:	e076      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800594a:	bf00      	nop
        break;
 800594c:	e074      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800594e:	4b3d      	ldr	r3, [pc, #244]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005950:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005954:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005960:	d02c      	beq.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005968:	d855      	bhi.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d004      	beq.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005976:	d004      	beq.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8005978:	e04d      	b.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800597a:	f7fe fc91 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 800597e:	61f8      	str	r0, [r7, #28]
          break;
 8005980:	e04e      	b.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005982:	4b30      	ldr	r3, [pc, #192]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b02      	cmp	r3, #2
 800598c:	d145      	bne.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800598e:	4b2d      	ldr	r3, [pc, #180]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d005      	beq.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800599a:	4b2a      	ldr	r3, [pc, #168]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	091b      	lsrs	r3, r3, #4
 80059a0:	f003 030f 	and.w	r3, r3, #15
 80059a4:	e005      	b.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 80059a6:	4b27      	ldr	r3, [pc, #156]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80059a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ac:	0a1b      	lsrs	r3, r3, #8
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	4a25      	ldr	r2, [pc, #148]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80059b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059b8:	61fb      	str	r3, [r7, #28]
          break;
 80059ba:	e02e      	b.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80059bc:	4b21      	ldr	r3, [pc, #132]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059c8:	d129      	bne.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80059ca:	4b1e      	ldr	r3, [pc, #120]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059d6:	d122      	bne.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80059d8:	4b1a      	ldr	r3, [pc, #104]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	0a1b      	lsrs	r3, r3, #8
 80059de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059e2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	fb03 f202 	mul.w	r2, r3, r2
 80059ec:	4b15      	ldr	r3, [pc, #84]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	091b      	lsrs	r3, r3, #4
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	3301      	adds	r3, #1
 80059f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80059fe:	4b11      	ldr	r3, [pc, #68]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	0d5b      	lsrs	r3, r3, #21
 8005a04:	f003 0303 	and.w	r3, r3, #3
 8005a08:	3301      	adds	r3, #1
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a12:	61fb      	str	r3, [r7, #28]
          break;
 8005a14:	e003      	b.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8005a16:	bf00      	nop
 8005a18:	e00e      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a1a:	bf00      	nop
 8005a1c:	e00c      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a1e:	bf00      	nop
        break;
 8005a20:	e00a      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005a22:	bf00      	nop
 8005a24:	e008      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005a26:	bf00      	nop
 8005a28:	e006      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005a2a:	bf00      	nop
 8005a2c:	e004      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005a2e:	bf00      	nop
 8005a30:	e002      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005a32:	bf00      	nop
 8005a34:	e000      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005a36:	bf00      	nop
    }
  }

  return(frequency);
 8005a38:	69fb      	ldr	r3, [r7, #28]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3720      	adds	r7, #32
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	40021000 	.word	0x40021000
 8005a48:	08008370 	.word	0x08008370

08005a4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a5a:	4b72      	ldr	r3, [pc, #456]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00e      	beq.n	8005a84 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a66:	4b6f      	ldr	r3, [pc, #444]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 0203 	and.w	r2, r3, #3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d103      	bne.n	8005a7e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
       ||
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d142      	bne.n	8005b04 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	73fb      	strb	r3, [r7, #15]
 8005a82:	e03f      	b.n	8005b04 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d018      	beq.n	8005abe <RCCEx_PLLSAI1_Config+0x72>
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d825      	bhi.n	8005adc <RCCEx_PLLSAI1_Config+0x90>
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d002      	beq.n	8005a9a <RCCEx_PLLSAI1_Config+0x4e>
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d009      	beq.n	8005aac <RCCEx_PLLSAI1_Config+0x60>
 8005a98:	e020      	b.n	8005adc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a9a:	4b62      	ldr	r3, [pc, #392]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d11d      	bne.n	8005ae2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aaa:	e01a      	b.n	8005ae2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005aac:	4b5d      	ldr	r3, [pc, #372]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d116      	bne.n	8005ae6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005abc:	e013      	b.n	8005ae6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005abe:	4b59      	ldr	r3, [pc, #356]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10f      	bne.n	8005aea <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005aca:	4b56      	ldr	r3, [pc, #344]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d109      	bne.n	8005aea <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ada:	e006      	b.n	8005aea <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae0:	e004      	b.n	8005aec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005ae2:	bf00      	nop
 8005ae4:	e002      	b.n	8005aec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005ae6:	bf00      	nop
 8005ae8:	e000      	b.n	8005aec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005aea:	bf00      	nop
    }

    if(status == HAL_OK)
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d108      	bne.n	8005b04 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005af2:	4b4c      	ldr	r3, [pc, #304]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f023 0203 	bic.w	r2, r3, #3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4949      	ldr	r1, [pc, #292]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f040 8086 	bne.w	8005c18 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b0c:	4b45      	ldr	r3, [pc, #276]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a44      	ldr	r2, [pc, #272]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b18:	f7fc fa82 	bl	8002020 <HAL_GetTick>
 8005b1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b1e:	e009      	b.n	8005b34 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b20:	f7fc fa7e 	bl	8002020 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d902      	bls.n	8005b34 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	73fb      	strb	r3, [r7, #15]
        break;
 8005b32:	e005      	b.n	8005b40 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b34:	4b3b      	ldr	r3, [pc, #236]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1ef      	bne.n	8005b20 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d168      	bne.n	8005c18 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d113      	bne.n	8005b74 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b4c:	4b35      	ldr	r3, [pc, #212]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	4b35      	ldr	r3, [pc, #212]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6892      	ldr	r2, [r2, #8]
 8005b58:	0211      	lsls	r1, r2, #8
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	68d2      	ldr	r2, [r2, #12]
 8005b5e:	06d2      	lsls	r2, r2, #27
 8005b60:	4311      	orrs	r1, r2
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6852      	ldr	r2, [r2, #4]
 8005b66:	3a01      	subs	r2, #1
 8005b68:	0112      	lsls	r2, r2, #4
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	492d      	ldr	r1, [pc, #180]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	610b      	str	r3, [r1, #16]
 8005b72:	e02d      	b.n	8005bd0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d115      	bne.n	8005ba6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b7a:	4b2a      	ldr	r3, [pc, #168]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b7c:	691a      	ldr	r2, [r3, #16]
 8005b7e:	4b2b      	ldr	r3, [pc, #172]	; (8005c2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6892      	ldr	r2, [r2, #8]
 8005b86:	0211      	lsls	r1, r2, #8
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6912      	ldr	r2, [r2, #16]
 8005b8c:	0852      	lsrs	r2, r2, #1
 8005b8e:	3a01      	subs	r2, #1
 8005b90:	0552      	lsls	r2, r2, #21
 8005b92:	4311      	orrs	r1, r2
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6852      	ldr	r2, [r2, #4]
 8005b98:	3a01      	subs	r2, #1
 8005b9a:	0112      	lsls	r2, r2, #4
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	4921      	ldr	r1, [pc, #132]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	610b      	str	r3, [r1, #16]
 8005ba4:	e014      	b.n	8005bd0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ba6:	4b1f      	ldr	r3, [pc, #124]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ba8:	691a      	ldr	r2, [r3, #16]
 8005baa:	4b21      	ldr	r3, [pc, #132]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6892      	ldr	r2, [r2, #8]
 8005bb2:	0211      	lsls	r1, r2, #8
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6952      	ldr	r2, [r2, #20]
 8005bb8:	0852      	lsrs	r2, r2, #1
 8005bba:	3a01      	subs	r2, #1
 8005bbc:	0652      	lsls	r2, r2, #25
 8005bbe:	4311      	orrs	r1, r2
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6852      	ldr	r2, [r2, #4]
 8005bc4:	3a01      	subs	r2, #1
 8005bc6:	0112      	lsls	r2, r2, #4
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	4916      	ldr	r1, [pc, #88]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005bd0:	4b14      	ldr	r3, [pc, #80]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a13      	ldr	r2, [pc, #76]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bdc:	f7fc fa20 	bl	8002020 <HAL_GetTick>
 8005be0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005be2:	e009      	b.n	8005bf8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005be4:	f7fc fa1c 	bl	8002020 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d902      	bls.n	8005bf8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	73fb      	strb	r3, [r7, #15]
          break;
 8005bf6:	e005      	b.n	8005c04 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0ef      	beq.n	8005be4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c0a:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c0c:	691a      	ldr	r2, [r3, #16]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	4904      	ldr	r1, [pc, #16]	; (8005c24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	40021000 	.word	0x40021000
 8005c28:	07ff800f 	.word	0x07ff800f
 8005c2c:	ff9f800f 	.word	0xff9f800f
 8005c30:	f9ff800f 	.word	0xf9ff800f

08005c34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c42:	4b72      	ldr	r3, [pc, #456]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00e      	beq.n	8005c6c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c4e:	4b6f      	ldr	r3, [pc, #444]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f003 0203 	and.w	r2, r3, #3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d103      	bne.n	8005c66 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
       ||
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d142      	bne.n	8005cec <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	73fb      	strb	r3, [r7, #15]
 8005c6a:	e03f      	b.n	8005cec <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d018      	beq.n	8005ca6 <RCCEx_PLLSAI2_Config+0x72>
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d825      	bhi.n	8005cc4 <RCCEx_PLLSAI2_Config+0x90>
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d002      	beq.n	8005c82 <RCCEx_PLLSAI2_Config+0x4e>
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d009      	beq.n	8005c94 <RCCEx_PLLSAI2_Config+0x60>
 8005c80:	e020      	b.n	8005cc4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c82:	4b62      	ldr	r3, [pc, #392]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d11d      	bne.n	8005cca <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c92:	e01a      	b.n	8005cca <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c94:	4b5d      	ldr	r3, [pc, #372]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d116      	bne.n	8005cce <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ca4:	e013      	b.n	8005cce <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ca6:	4b59      	ldr	r3, [pc, #356]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10f      	bne.n	8005cd2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cb2:	4b56      	ldr	r3, [pc, #344]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d109      	bne.n	8005cd2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cc2:	e006      	b.n	8005cd2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cc8:	e004      	b.n	8005cd4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005cca:	bf00      	nop
 8005ccc:	e002      	b.n	8005cd4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005cce:	bf00      	nop
 8005cd0:	e000      	b.n	8005cd4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005cd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d108      	bne.n	8005cec <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005cda:	4b4c      	ldr	r3, [pc, #304]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f023 0203 	bic.w	r2, r3, #3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4949      	ldr	r1, [pc, #292]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f040 8086 	bne.w	8005e00 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005cf4:	4b45      	ldr	r3, [pc, #276]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a44      	ldr	r2, [pc, #272]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d00:	f7fc f98e 	bl	8002020 <HAL_GetTick>
 8005d04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d06:	e009      	b.n	8005d1c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d08:	f7fc f98a 	bl	8002020 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d902      	bls.n	8005d1c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	73fb      	strb	r3, [r7, #15]
        break;
 8005d1a:	e005      	b.n	8005d28 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d1c:	4b3b      	ldr	r3, [pc, #236]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1ef      	bne.n	8005d08 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d168      	bne.n	8005e00 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d113      	bne.n	8005d5c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d34:	4b35      	ldr	r3, [pc, #212]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d36:	695a      	ldr	r2, [r3, #20]
 8005d38:	4b35      	ldr	r3, [pc, #212]	; (8005e10 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6892      	ldr	r2, [r2, #8]
 8005d40:	0211      	lsls	r1, r2, #8
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	68d2      	ldr	r2, [r2, #12]
 8005d46:	06d2      	lsls	r2, r2, #27
 8005d48:	4311      	orrs	r1, r2
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6852      	ldr	r2, [r2, #4]
 8005d4e:	3a01      	subs	r2, #1
 8005d50:	0112      	lsls	r2, r2, #4
 8005d52:	430a      	orrs	r2, r1
 8005d54:	492d      	ldr	r1, [pc, #180]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	614b      	str	r3, [r1, #20]
 8005d5a:	e02d      	b.n	8005db8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d115      	bne.n	8005d8e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d62:	4b2a      	ldr	r3, [pc, #168]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d64:	695a      	ldr	r2, [r3, #20]
 8005d66:	4b2b      	ldr	r3, [pc, #172]	; (8005e14 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	6892      	ldr	r2, [r2, #8]
 8005d6e:	0211      	lsls	r1, r2, #8
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6912      	ldr	r2, [r2, #16]
 8005d74:	0852      	lsrs	r2, r2, #1
 8005d76:	3a01      	subs	r2, #1
 8005d78:	0552      	lsls	r2, r2, #21
 8005d7a:	4311      	orrs	r1, r2
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6852      	ldr	r2, [r2, #4]
 8005d80:	3a01      	subs	r2, #1
 8005d82:	0112      	lsls	r2, r2, #4
 8005d84:	430a      	orrs	r2, r1
 8005d86:	4921      	ldr	r1, [pc, #132]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	614b      	str	r3, [r1, #20]
 8005d8c:	e014      	b.n	8005db8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d8e:	4b1f      	ldr	r3, [pc, #124]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d90:	695a      	ldr	r2, [r3, #20]
 8005d92:	4b21      	ldr	r3, [pc, #132]	; (8005e18 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005d94:	4013      	ands	r3, r2
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6892      	ldr	r2, [r2, #8]
 8005d9a:	0211      	lsls	r1, r2, #8
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6952      	ldr	r2, [r2, #20]
 8005da0:	0852      	lsrs	r2, r2, #1
 8005da2:	3a01      	subs	r2, #1
 8005da4:	0652      	lsls	r2, r2, #25
 8005da6:	4311      	orrs	r1, r2
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6852      	ldr	r2, [r2, #4]
 8005dac:	3a01      	subs	r2, #1
 8005dae:	0112      	lsls	r2, r2, #4
 8005db0:	430a      	orrs	r2, r1
 8005db2:	4916      	ldr	r1, [pc, #88]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005db8:	4b14      	ldr	r3, [pc, #80]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a13      	ldr	r2, [pc, #76]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc4:	f7fc f92c 	bl	8002020 <HAL_GetTick>
 8005dc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dca:	e009      	b.n	8005de0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005dcc:	f7fc f928 	bl	8002020 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d902      	bls.n	8005de0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	73fb      	strb	r3, [r7, #15]
          break;
 8005dde:	e005      	b.n	8005dec <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005de0:	4b0a      	ldr	r3, [pc, #40]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0ef      	beq.n	8005dcc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005df2:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005df4:	695a      	ldr	r2, [r3, #20]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	4904      	ldr	r1, [pc, #16]	; (8005e0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40021000 	.word	0x40021000
 8005e10:	07ff800f 	.word	0x07ff800f
 8005e14:	ff9f800f 	.word	0xff9f800f
 8005e18:	f9ff800f 	.word	0xf9ff800f

08005e1c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b089      	sub	sp, #36	; 0x24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e38:	d10b      	bne.n	8005e52 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005e3a:	4b7e      	ldr	r3, [pc, #504]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e40:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005e44:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	2b60      	cmp	r3, #96	; 0x60
 8005e4a:	d112      	bne.n	8005e72 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005e4c:	4b7a      	ldr	r3, [pc, #488]	; (8006038 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005e4e:	61fb      	str	r3, [r7, #28]
 8005e50:	e00f      	b.n	8005e72 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e58:	d10b      	bne.n	8005e72 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005e5a:	4b76      	ldr	r3, [pc, #472]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e64:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e6c:	d101      	bne.n	8005e72 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005e6e:	4b72      	ldr	r3, [pc, #456]	; (8006038 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005e70:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f040 80d6 	bne.w	8006026 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	2b40      	cmp	r3, #64	; 0x40
 8005e82:	d003      	beq.n	8005e8c <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e8a:	d13b      	bne.n	8005f04 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005e8c:	4b69      	ldr	r3, [pc, #420]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e98:	f040 80c4 	bne.w	8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8005e9c:	4b65      	ldr	r3, [pc, #404]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 80bd 	beq.w	8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005eaa:	4b62      	ldr	r3, [pc, #392]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	091b      	lsrs	r3, r3, #4
 8005eb0:	f003 030f 	and.w	r3, r3, #15
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebc:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005ebe:	4b5d      	ldr	r3, [pc, #372]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	0a1b      	lsrs	r3, r3, #8
 8005ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ec8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005eca:	4b5a      	ldr	r3, [pc, #360]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	0edb      	lsrs	r3, r3, #27
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005edc:	4b55      	ldr	r3, [pc, #340]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8005ee8:	2311      	movs	r3, #17
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	e001      	b.n	8005ef2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8005eee:	2307      	movs	r3, #7
 8005ef0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	fb03 f202 	mul.w	r2, r3, r2
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f00:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005f02:	e08f      	b.n	8006024 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d13a      	bne.n	8005f80 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005f0a:	4b4a      	ldr	r3, [pc, #296]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f16:	f040 8086 	bne.w	8006026 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005f1a:	4b46      	ldr	r3, [pc, #280]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d07f      	beq.n	8006026 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005f26:	4b43      	ldr	r3, [pc, #268]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	091b      	lsrs	r3, r3, #4
 8005f2c:	f003 030f 	and.w	r3, r3, #15
 8005f30:	3301      	adds	r3, #1
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f38:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005f3a:	4b3e      	ldr	r3, [pc, #248]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	0a1b      	lsrs	r3, r3, #8
 8005f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f44:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8005f46:	4b3b      	ldr	r3, [pc, #236]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	0edb      	lsrs	r3, r3, #27
 8005f4c:	f003 031f 	and.w	r3, r3, #31
 8005f50:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10a      	bne.n	8005f6e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005f58:	4b36      	ldr	r3, [pc, #216]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8005f64:	2311      	movs	r3, #17
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	e001      	b.n	8005f6e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8005f6a:	2307      	movs	r3, #7
 8005f6c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	fb03 f202 	mul.w	r2, r3, r2
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7c:	61fb      	str	r3, [r7, #28]
 8005f7e:	e052      	b.n	8006026 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2b80      	cmp	r3, #128	; 0x80
 8005f84:	d003      	beq.n	8005f8e <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f8c:	d109      	bne.n	8005fa2 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f8e:	4b29      	ldr	r3, [pc, #164]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f9a:	d144      	bne.n	8006026 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8005f9c:	4b27      	ldr	r3, [pc, #156]	; (800603c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8005f9e:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fa0:	e041      	b.n	8006026 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	d003      	beq.n	8005fb0 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fae:	d13a      	bne.n	8006026 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005fb0:	4b20      	ldr	r3, [pc, #128]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fbc:	d133      	bne.n	8006026 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005fbe:	4b1d      	ldr	r3, [pc, #116]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d02d      	beq.n	8006026 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8005fca:	4b1a      	ldr	r3, [pc, #104]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	091b      	lsrs	r3, r3, #4
 8005fd0:	f003 030f 	and.w	r3, r3, #15
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fdc:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005fde:	4b15      	ldr	r3, [pc, #84]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	0a1b      	lsrs	r3, r3, #8
 8005fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fe8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8005fea:	4b12      	ldr	r3, [pc, #72]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	0edb      	lsrs	r3, r3, #27
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10a      	bne.n	8006012 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005ffc:	4b0d      	ldr	r3, [pc, #52]	; (8006034 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006008:	2311      	movs	r3, #17
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	e001      	b.n	8006012 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800600e:	2307      	movs	r3, #7
 8006010:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	fb03 f202 	mul.w	r2, r3, r2
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006020:	61fb      	str	r3, [r7, #28]
 8006022:	e000      	b.n	8006026 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006024:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006026:	69fb      	ldr	r3, [r7, #28]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3724      	adds	r7, #36	; 0x24
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	40021000 	.word	0x40021000
 8006038:	001fff68 	.word	0x001fff68
 800603c:	00f42400 	.word	0x00f42400

08006040 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d904      	bls.n	800605e <HAL_SAI_InitProtocol+0x1e>
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	3b03      	subs	r3, #3
 8006058:	2b01      	cmp	r3, #1
 800605a:	d812      	bhi.n	8006082 <HAL_SAI_InitProtocol+0x42>
 800605c:	e008      	b.n	8006070 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f9fb 	bl	8006460 <SAI_InitI2S>
 800606a:	4603      	mov	r3, r0
 800606c:	75fb      	strb	r3, [r7, #23]
      break;
 800606e:	e00b      	b.n	8006088 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 faa4 	bl	80065c4 <SAI_InitPCM>
 800607c:	4603      	mov	r3, r0
 800607e:	75fb      	strb	r3, [r7, #23]
      break;
 8006080:	e002      	b.n	8006088 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	75fb      	strb	r3, [r7, #23]
      break;
 8006086:	bf00      	nop
  }

  if (status == HAL_OK)
 8006088:	7dfb      	ldrb	r3, [r7, #23]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d104      	bne.n	8006098 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f808 	bl	80060a4 <HAL_SAI_Init>
 8006094:	4603      	mov	r3, r0
 8006096:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006098:	7dfb      	ldrb	r3, [r7, #23]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08a      	sub	sp, #40	; 0x28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e1c7      	b.n	8006446 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d10e      	bne.n	80060de <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a81      	ldr	r2, [pc, #516]	; (80062cc <HAL_SAI_Init+0x228>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d107      	bne.n	80060da <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d103      	bne.n	80060da <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e1b3      	b.n	8006446 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d106      	bne.n	80060f8 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7fb fe0a 	bl	8001d0c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fae5 	bl	80066c8 <SAI_Disable>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e19e      	b.n	8006446 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d00c      	beq.n	8006132 <HAL_SAI_Init+0x8e>
 8006118:	2b02      	cmp	r3, #2
 800611a:	d80d      	bhi.n	8006138 <HAL_SAI_Init+0x94>
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <HAL_SAI_Init+0x82>
 8006120:	2b01      	cmp	r3, #1
 8006122:	d003      	beq.n	800612c <HAL_SAI_Init+0x88>
 8006124:	e008      	b.n	8006138 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006126:	2300      	movs	r3, #0
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800612a:	e008      	b.n	800613e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800612c:	2310      	movs	r3, #16
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006130:	e005      	b.n	800613e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006132:	2320      	movs	r3, #32
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006136:	e002      	b.n	800613e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006138:	2300      	movs	r3, #0
 800613a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800613c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	2b03      	cmp	r3, #3
 8006144:	d81d      	bhi.n	8006182 <HAL_SAI_Init+0xde>
 8006146:	a201      	add	r2, pc, #4	; (adr r2, 800614c <HAL_SAI_Init+0xa8>)
 8006148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614c:	0800615d 	.word	0x0800615d
 8006150:	08006163 	.word	0x08006163
 8006154:	0800616b 	.word	0x0800616b
 8006158:	08006173 	.word	0x08006173
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	61fb      	str	r3, [r7, #28]
      break;
 8006160:	e012      	b.n	8006188 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006166:	61fb      	str	r3, [r7, #28]
      break;
 8006168:	e00e      	b.n	8006188 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800616a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800616e:	61fb      	str	r3, [r7, #28]
      break;
 8006170:	e00a      	b.n	8006188 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006172:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006176:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	f043 0301 	orr.w	r3, r3, #1
 800617e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006180:	e002      	b.n	8006188 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8006182:	2300      	movs	r3, #0
 8006184:	61fb      	str	r3, [r7, #28]
      break;
 8006186:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a4f      	ldr	r2, [pc, #316]	; (80062cc <HAL_SAI_Init+0x228>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d004      	beq.n	800619c <HAL_SAI_Init+0xf8>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a4e      	ldr	r2, [pc, #312]	; (80062d0 <HAL_SAI_Init+0x22c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d103      	bne.n	80061a4 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800619c:	4a4d      	ldr	r2, [pc, #308]	; (80062d4 <HAL_SAI_Init+0x230>)
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	e002      	b.n	80061aa <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80061a4:	4a4c      	ldr	r2, [pc, #304]	; (80062d8 <HAL_SAI_Init+0x234>)
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d073      	beq.n	800629a <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a45      	ldr	r2, [pc, #276]	; (80062cc <HAL_SAI_Init+0x228>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d004      	beq.n	80061c6 <HAL_SAI_Init+0x122>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a43      	ldr	r2, [pc, #268]	; (80062d0 <HAL_SAI_Init+0x22c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d105      	bne.n	80061d2 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80061c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80061ca:	f7fe fd1d 	bl	8004c08 <HAL_RCCEx_GetPeriphCLKFreq>
 80061ce:	61b8      	str	r0, [r7, #24]
 80061d0:	e004      	b.n	80061dc <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80061d2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80061d6:	f7fe fd17 	bl	8004c08 <HAL_RCCEx_GetPeriphCLKFreq>
 80061da:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061e4:	d120      	bne.n	8006228 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d102      	bne.n	80061f4 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80061ee:	2340      	movs	r3, #64	; 0x40
 80061f0:	613b      	str	r3, [r7, #16]
 80061f2:	e00a      	b.n	800620a <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d103      	bne.n	8006204 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80061fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	e002      	b.n	800620a <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006208:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	4613      	mov	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	4619      	mov	r1, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	fb02 f303 	mul.w	r3, r2, r3
 8006220:	fbb1 f3f3 	udiv	r3, r1, r3
 8006224:	617b      	str	r3, [r7, #20]
 8006226:	e017      	b.n	8006258 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006230:	d101      	bne.n	8006236 <HAL_SAI_Init+0x192>
 8006232:	2302      	movs	r3, #2
 8006234:	e000      	b.n	8006238 <HAL_SAI_Init+0x194>
 8006236:	2301      	movs	r3, #1
 8006238:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	4619      	mov	r1, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	fb02 f303 	mul.w	r3, r2, r3
 8006250:	021b      	lsls	r3, r3, #8
 8006252:	fbb1 f3f3 	udiv	r3, r1, r3
 8006256:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	4a20      	ldr	r2, [pc, #128]	; (80062dc <HAL_SAI_Init+0x238>)
 800625c:	fba2 2303 	umull	r2, r3, r2, r3
 8006260:	08da      	lsrs	r2, r3, #3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006266:	6979      	ldr	r1, [r7, #20]
 8006268:	4b1c      	ldr	r3, [pc, #112]	; (80062dc <HAL_SAI_Init+0x238>)
 800626a:	fba3 2301 	umull	r2, r3, r3, r1
 800626e:	08da      	lsrs	r2, r3, #3
 8006270:	4613      	mov	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	1aca      	subs	r2, r1, r3
 800627a:	2a08      	cmp	r2, #8
 800627c:	d904      	bls.n	8006288 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628c:	2b04      	cmp	r3, #4
 800628e:	d104      	bne.n	800629a <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	085a      	lsrs	r2, r3, #1
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <HAL_SAI_Init+0x206>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d109      	bne.n	80062be <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <HAL_SAI_Init+0x212>
 80062b2:	2300      	movs	r3, #0
 80062b4:	e001      	b.n	80062ba <HAL_SAI_Init+0x216>
 80062b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062ba:	623b      	str	r3, [r7, #32]
 80062bc:	e012      	b.n	80062e4 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d10c      	bne.n	80062e0 <HAL_SAI_Init+0x23c>
 80062c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062ca:	e00a      	b.n	80062e2 <HAL_SAI_Init+0x23e>
 80062cc:	40015404 	.word	0x40015404
 80062d0:	40015424 	.word	0x40015424
 80062d4:	40015400 	.word	0x40015400
 80062d8:	40015800 	.word	0x40015800
 80062dc:	cccccccd 	.word	0xcccccccd
 80062e0:	2300      	movs	r3, #0
 80062e2:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6819      	ldr	r1, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	4b58      	ldr	r3, [pc, #352]	; (8006450 <HAL_SAI_Init+0x3ac>)
 80062f0:	400b      	ands	r3, r1
 80062f2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6819      	ldr	r1, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006308:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800630e:	431a      	orrs	r2, r3
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800631c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006328:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	051b      	lsls	r3, r3, #20
 8006330:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006336:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6812      	ldr	r2, [r2, #0]
 800634a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800634e:	f023 030f 	bic.w	r3, r3, #15
 8006352:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6859      	ldr	r1, [r3, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	699a      	ldr	r2, [r3, #24]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006362:	431a      	orrs	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006368:	431a      	orrs	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6899      	ldr	r1, [r3, #8]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	4b35      	ldr	r3, [pc, #212]	; (8006454 <HAL_SAI_Init+0x3b0>)
 800637e:	400b      	ands	r3, r1
 8006380:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6899      	ldr	r1, [r3, #8]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006392:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8006398:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 800639e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a4:	3b01      	subs	r3, #1
 80063a6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80063a8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68d9      	ldr	r1, [r3, #12]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	f24f 0320 	movw	r3, #61472	; 0xf020
 80063c0:	400b      	ands	r3, r1
 80063c2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68d9      	ldr	r1, [r3, #12]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063d2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80063da:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e0:	3b01      	subs	r3, #1
 80063e2:	021b      	lsls	r3, r3, #8
 80063e4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a19      	ldr	r2, [pc, #100]	; (8006458 <HAL_SAI_Init+0x3b4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d119      	bne.n	800642c <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80063f8:	4b18      	ldr	r3, [pc, #96]	; (800645c <HAL_SAI_Init+0x3b8>)
 80063fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fc:	4a17      	ldr	r2, [pc, #92]	; (800645c <HAL_SAI_Init+0x3b8>)
 80063fe:	f023 0301 	bic.w	r3, r3, #1
 8006402:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800640a:	2b01      	cmp	r3, #1
 800640c:	d10e      	bne.n	800642c <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	3b01      	subs	r3, #1
 8006418:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800641a:	4910      	ldr	r1, [pc, #64]	; (800645c <HAL_SAI_Init+0x3b8>)
 800641c:	4313      	orrs	r3, r2
 800641e:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006420:	4b0e      	ldr	r3, [pc, #56]	; (800645c <HAL_SAI_Init+0x3b8>)
 8006422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006424:	4a0d      	ldr	r2, [pc, #52]	; (800645c <HAL_SAI_Init+0x3b8>)
 8006426:	f043 0301 	orr.w	r3, r3, #1
 800642a:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3728      	adds	r7, #40	; 0x28
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	f805c010 	.word	0xf805c010
 8006454:	fff88000 	.word	0xfff88000
 8006458:	40015404 	.word	0x40015404
 800645c:	40015400 	.word	0x40015400

08006460 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <SAI_InitI2S+0x2e>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2b02      	cmp	r3, #2
 800648c:	d103      	bne.n	8006496 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	64da      	str	r2, [r3, #76]	; 0x4c
 8006494:	e002      	b.n	800649c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80064a2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064aa:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e077      	b.n	80065b6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d107      	bne.n	80064dc <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80064d8:	661a      	str	r2, [r3, #96]	; 0x60
 80064da:	e006      	b.n	80064ea <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80064e2:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d84f      	bhi.n	8006590 <SAI_InitI2S+0x130>
 80064f0:	a201      	add	r2, pc, #4	; (adr r2, 80064f8 <SAI_InitI2S+0x98>)
 80064f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f6:	bf00      	nop
 80064f8:	08006509 	.word	0x08006509
 80064fc:	0800652b 	.word	0x0800652b
 8006500:	0800654d 	.word	0x0800654d
 8006504:	0800656f 	.word	0x0800656f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2280      	movs	r2, #128	; 0x80
 800650c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	085b      	lsrs	r3, r3, #1
 800651c:	011a      	lsls	r2, r3, #4
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2240      	movs	r2, #64	; 0x40
 8006526:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006528:	e035      	b.n	8006596 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2280      	movs	r2, #128	; 0x80
 800652e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	085b      	lsrs	r3, r3, #1
 8006534:	019a      	lsls	r2, r3, #6
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2280      	movs	r2, #128	; 0x80
 8006548:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800654a:	e024      	b.n	8006596 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	22c0      	movs	r2, #192	; 0xc0
 8006550:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	085b      	lsrs	r3, r3, #1
 8006556:	019a      	lsls	r2, r3, #6
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	085b      	lsrs	r3, r3, #1
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2280      	movs	r2, #128	; 0x80
 800656a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800656c:	e013      	b.n	8006596 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	22e0      	movs	r2, #224	; 0xe0
 8006572:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	085b      	lsrs	r3, r3, #1
 8006578:	019a      	lsls	r2, r3, #6
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	085b      	lsrs	r3, r3, #1
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2280      	movs	r2, #128	; 0x80
 800658c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800658e:	e002      	b.n	8006596 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	75fb      	strb	r3, [r7, #23]
      break;
 8006594:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b02      	cmp	r3, #2
 800659a:	d10b      	bne.n	80065b4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d102      	bne.n	80065a8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2210      	movs	r2, #16
 80065a6:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d102      	bne.n	80065b4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2208      	movs	r2, #8
 80065b2:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop

080065c4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <SAI_InitPCM+0x2e>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d103      	bne.n	80065fa <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2201      	movs	r2, #1
 80065f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80065f8:	e002      	b.n	8006600 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800660c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006614:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006628:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b04      	cmp	r3, #4
 800662e:	d103      	bne.n	8006638 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2201      	movs	r2, #1
 8006634:	655a      	str	r2, [r3, #84]	; 0x54
 8006636:	e002      	b.n	800663e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	220d      	movs	r2, #13
 800663c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b03      	cmp	r3, #3
 8006642:	d837      	bhi.n	80066b4 <SAI_InitPCM+0xf0>
 8006644:	a201      	add	r2, pc, #4	; (adr r2, 800664c <SAI_InitPCM+0x88>)
 8006646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664a:	bf00      	nop
 800664c:	0800665d 	.word	0x0800665d
 8006650:	08006673 	.word	0x08006673
 8006654:	08006689 	.word	0x08006689
 8006658:	0800669f 	.word	0x0800669f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2280      	movs	r2, #128	; 0x80
 8006660:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	011a      	lsls	r2, r3, #4
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2240      	movs	r2, #64	; 0x40
 800666e:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006670:	e023      	b.n	80066ba <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2280      	movs	r2, #128	; 0x80
 8006676:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2280      	movs	r2, #128	; 0x80
 8006684:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006686:	e018      	b.n	80066ba <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	22c0      	movs	r2, #192	; 0xc0
 800668c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2280      	movs	r2, #128	; 0x80
 800669a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800669c:	e00d      	b.n	80066ba <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	22e0      	movs	r2, #224	; 0xe0
 80066a2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2280      	movs	r2, #128	; 0x80
 80066b0:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80066b2:	e002      	b.n	80066ba <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	75fb      	strb	r3, [r7, #23]
      break;
 80066b8:	bf00      	nop
  }

  return status;
 80066ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	371c      	adds	r7, #28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80066d0:	4b18      	ldr	r3, [pc, #96]	; (8006734 <SAI_Disable+0x6c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a18      	ldr	r2, [pc, #96]	; (8006738 <SAI_Disable+0x70>)
 80066d6:	fba2 2303 	umull	r2, r3, r2, r3
 80066da:	0b1b      	lsrs	r3, r3, #12
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80066f2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10a      	bne.n	8006710 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006700:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	72fb      	strb	r3, [r7, #11]
      break;
 800670e:	e009      	b.n	8006724 <SAI_Disable+0x5c>
    }
    count--;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3b01      	subs	r3, #1
 8006714:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1e7      	bne.n	80066f4 <SAI_Disable+0x2c>

  return status;
 8006724:	7afb      	ldrb	r3, [r7, #11]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	20000000 	.word	0x20000000
 8006738:	95cbec1b 	.word	0x95cbec1b

0800673c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e095      	b.n	800687a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006752:	2b00      	cmp	r3, #0
 8006754:	d108      	bne.n	8006768 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800675e:	d009      	beq.n	8006774 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	61da      	str	r2, [r3, #28]
 8006766:	e005      	b.n	8006774 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7fb f8b2 	bl	80018f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067b4:	d902      	bls.n	80067bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80067b6:	2300      	movs	r3, #0
 80067b8:	60fb      	str	r3, [r7, #12]
 80067ba:	e002      	b.n	80067c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80067bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80067ca:	d007      	beq.n	80067dc <HAL_SPI_Init+0xa0>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067d4:	d002      	beq.n	80067dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	431a      	orrs	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006814:	431a      	orrs	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681e:	ea42 0103 	orr.w	r1, r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006826:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	0c1b      	lsrs	r3, r3, #16
 8006838:	f003 0204 	and.w	r2, r3, #4
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	f003 0310 	and.w	r3, r3, #16
 8006844:	431a      	orrs	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006858:	ea42 0103 	orr.w	r1, r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b088      	sub	sp, #32
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	603b      	str	r3, [r7, #0]
 800688e:	4613      	mov	r3, r2
 8006890:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <HAL_SPI_Transmit+0x22>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e15f      	b.n	8006b64 <HAL_SPI_Transmit+0x2e2>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068ac:	f7fb fbb8 	bl	8002020 <HAL_GetTick>
 80068b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d002      	beq.n	80068c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80068c2:	2302      	movs	r3, #2
 80068c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068c6:	e148      	b.n	8006b5a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <HAL_SPI_Transmit+0x52>
 80068ce:	88fb      	ldrh	r3, [r7, #6]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d102      	bne.n	80068da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068d8:	e13f      	b.n	8006b5a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2203      	movs	r2, #3
 80068de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	88fa      	ldrh	r2, [r7, #6]
 80068f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006924:	d10f      	bne.n	8006946 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006934:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006944:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006950:	2b40      	cmp	r3, #64	; 0x40
 8006952:	d007      	beq.n	8006964 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006962:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800696c:	d94f      	bls.n	8006a0e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <HAL_SPI_Transmit+0xfa>
 8006976:	8afb      	ldrh	r3, [r7, #22]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d142      	bne.n	8006a02 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006980:	881a      	ldrh	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	1c9a      	adds	r2, r3, #2
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006996:	b29b      	uxth	r3, r3
 8006998:	3b01      	subs	r3, #1
 800699a:	b29a      	uxth	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069a0:	e02f      	b.n	8006a02 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d112      	bne.n	80069d6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b4:	881a      	ldrh	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	1c9a      	adds	r2, r3, #2
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069d4:	e015      	b.n	8006a02 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069d6:	f7fb fb23 	bl	8002020 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d803      	bhi.n	80069ee <HAL_SPI_Transmit+0x16c>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ec:	d102      	bne.n	80069f4 <HAL_SPI_Transmit+0x172>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d106      	bne.n	8006a02 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006a00:	e0ab      	b.n	8006b5a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1ca      	bne.n	80069a2 <HAL_SPI_Transmit+0x120>
 8006a0c:	e080      	b.n	8006b10 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <HAL_SPI_Transmit+0x19a>
 8006a16:	8afb      	ldrh	r3, [r7, #22]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d174      	bne.n	8006b06 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d912      	bls.n	8006a4c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2a:	881a      	ldrh	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	1c9a      	adds	r2, r3, #2
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b02      	subs	r3, #2
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a4a:	e05c      	b.n	8006b06 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	330c      	adds	r3, #12
 8006a56:	7812      	ldrb	r2, [r2, #0]
 8006a58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006a72:	e048      	b.n	8006b06 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d12b      	bne.n	8006ada <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d912      	bls.n	8006ab2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	881a      	ldrh	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	1c9a      	adds	r2, r3, #2
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	3b02      	subs	r3, #2
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ab0:	e029      	b.n	8006b06 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	330c      	adds	r3, #12
 8006abc:	7812      	ldrb	r2, [r2, #0]
 8006abe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ad8:	e015      	b.n	8006b06 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ada:	f7fb faa1 	bl	8002020 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d803      	bhi.n	8006af2 <HAL_SPI_Transmit+0x270>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af0:	d102      	bne.n	8006af8 <HAL_SPI_Transmit+0x276>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d106      	bne.n	8006b06 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006b04:	e029      	b.n	8006b5a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1b1      	bne.n	8006a74 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fcf9 	bl	800750c <SPI_EndRxTxTransaction>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2220      	movs	r2, #32
 8006b24:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10a      	bne.n	8006b44 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b2e:	2300      	movs	r3, #0
 8006b30:	613b      	str	r3, [r7, #16]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	77fb      	strb	r3, [r7, #31]
 8006b50:	e003      	b.n	8006b5a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b62:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3720      	adds	r7, #32
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b088      	sub	sp, #32
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	603b      	str	r3, [r7, #0]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d002      	beq.n	8006b92 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b90:	e11a      	b.n	8006dc8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b9a:	d112      	bne.n	8006bc2 <HAL_SPI_Receive+0x56>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10e      	bne.n	8006bc2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2204      	movs	r2, #4
 8006ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006bac:	88fa      	ldrh	r2, [r7, #6]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f90e 	bl	8006dda <HAL_SPI_TransmitReceive>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	e107      	b.n	8006dd2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <HAL_SPI_Receive+0x64>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e100      	b.n	8006dd2 <HAL_SPI_Receive+0x266>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bd8:	f7fb fa22 	bl	8002020 <HAL_GetTick>
 8006bdc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <HAL_SPI_Receive+0x7e>
 8006be4:	88fb      	ldrh	r3, [r7, #6]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d102      	bne.n	8006bf0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006bee:	e0eb      	b.n	8006dc8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2204      	movs	r2, #4
 8006bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	88fa      	ldrh	r2, [r7, #6]
 8006c08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	88fa      	ldrh	r2, [r7, #6]
 8006c10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c3a:	d908      	bls.n	8006c4e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c4a:	605a      	str	r2, [r3, #4]
 8006c4c:	e007      	b.n	8006c5e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c5c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c66:	d10f      	bne.n	8006c88 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c86:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c92:	2b40      	cmp	r3, #64	; 0x40
 8006c94:	d007      	beq.n	8006ca6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ca4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cae:	d86f      	bhi.n	8006d90 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006cb0:	e034      	b.n	8006d1c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d117      	bne.n	8006cf0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f103 020c 	add.w	r2, r3, #12
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ccc:	7812      	ldrb	r2, [r2, #0]
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	1c5a      	adds	r2, r3, #1
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006cee:	e015      	b.n	8006d1c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cf0:	f7fb f996 	bl	8002020 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d803      	bhi.n	8006d08 <HAL_SPI_Receive+0x19c>
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d06:	d102      	bne.n	8006d0e <HAL_SPI_Receive+0x1a2>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d106      	bne.n	8006d1c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006d1a:	e055      	b.n	8006dc8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1c4      	bne.n	8006cb2 <HAL_SPI_Receive+0x146>
 8006d28:	e038      	b.n	8006d9c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d115      	bne.n	8006d64 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	b292      	uxth	r2, r2
 8006d44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	1c9a      	adds	r2, r3, #2
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006d62:	e015      	b.n	8006d90 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d64:	f7fb f95c 	bl	8002020 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d803      	bhi.n	8006d7c <HAL_SPI_Receive+0x210>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7a:	d102      	bne.n	8006d82 <HAL_SPI_Receive+0x216>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d106      	bne.n	8006d90 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006d8e:	e01b      	b.n	8006dc8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1c6      	bne.n	8006d2a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 fb5b 	bl	800745c <SPI_EndRxTransaction>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2220      	movs	r2, #32
 8006db0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d002      	beq.n	8006dc0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	75fb      	strb	r3, [r7, #23]
 8006dbe:	e003      	b.n	8006dc8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b08a      	sub	sp, #40	; 0x28
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	607a      	str	r2, [r7, #4]
 8006de6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006de8:	2301      	movs	r3, #1
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d101      	bne.n	8006e00 <HAL_SPI_TransmitReceive+0x26>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e20a      	b.n	8007216 <HAL_SPI_TransmitReceive+0x43c>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e08:	f7fb f90a 	bl	8002020 <HAL_GetTick>
 8006e0c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e14:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006e1c:	887b      	ldrh	r3, [r7, #2]
 8006e1e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006e20:	887b      	ldrh	r3, [r7, #2]
 8006e22:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e24:	7efb      	ldrb	r3, [r7, #27]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d00e      	beq.n	8006e48 <HAL_SPI_TransmitReceive+0x6e>
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e30:	d106      	bne.n	8006e40 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d102      	bne.n	8006e40 <HAL_SPI_TransmitReceive+0x66>
 8006e3a:	7efb      	ldrb	r3, [r7, #27]
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d003      	beq.n	8006e48 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006e40:	2302      	movs	r3, #2
 8006e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006e46:	e1e0      	b.n	800720a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <HAL_SPI_TransmitReceive+0x80>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <HAL_SPI_TransmitReceive+0x80>
 8006e54:	887b      	ldrh	r3, [r7, #2]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d103      	bne.n	8006e62 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006e60:	e1d3      	b.n	800720a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d003      	beq.n	8006e76 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2205      	movs	r2, #5
 8006e72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	887a      	ldrh	r2, [r7, #2]
 8006e86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	887a      	ldrh	r2, [r7, #2]
 8006e8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	887a      	ldrh	r2, [r7, #2]
 8006e9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	887a      	ldrh	r2, [r7, #2]
 8006ea2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006eb8:	d802      	bhi.n	8006ec0 <HAL_SPI_TransmitReceive+0xe6>
 8006eba:	8a3b      	ldrh	r3, [r7, #16]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d908      	bls.n	8006ed2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ece:	605a      	str	r2, [r3, #4]
 8006ed0:	e007      	b.n	8006ee2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ee0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	d007      	beq.n	8006f00 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006efe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f08:	f240 8081 	bls.w	800700e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <HAL_SPI_TransmitReceive+0x140>
 8006f14:	8a7b      	ldrh	r3, [r7, #18]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d16d      	bne.n	8006ff6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1e:	881a      	ldrh	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2a:	1c9a      	adds	r2, r3, #2
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f3e:	e05a      	b.n	8006ff6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d11b      	bne.n	8006f86 <HAL_SPI_TransmitReceive+0x1ac>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d016      	beq.n	8006f86 <HAL_SPI_TransmitReceive+0x1ac>
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d113      	bne.n	8006f86 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f62:	881a      	ldrh	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6e:	1c9a      	adds	r2, r3, #2
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d11c      	bne.n	8006fce <HAL_SPI_TransmitReceive+0x1f4>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d016      	beq.n	8006fce <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	b292      	uxth	r2, r2
 8006fac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	1c9a      	adds	r2, r3, #2
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fce:	f7fb f827 	bl	8002020 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d80b      	bhi.n	8006ff6 <HAL_SPI_TransmitReceive+0x21c>
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe4:	d007      	beq.n	8006ff6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006ff4:	e109      	b.n	800720a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d19f      	bne.n	8006f40 <HAL_SPI_TransmitReceive+0x166>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007006:	b29b      	uxth	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d199      	bne.n	8006f40 <HAL_SPI_TransmitReceive+0x166>
 800700c:	e0e3      	b.n	80071d6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <HAL_SPI_TransmitReceive+0x244>
 8007016:	8a7b      	ldrh	r3, [r7, #18]
 8007018:	2b01      	cmp	r3, #1
 800701a:	f040 80cf 	bne.w	80071bc <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007022:	b29b      	uxth	r3, r3
 8007024:	2b01      	cmp	r3, #1
 8007026:	d912      	bls.n	800704e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	881a      	ldrh	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007038:	1c9a      	adds	r2, r3, #2
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007042:	b29b      	uxth	r3, r3
 8007044:	3b02      	subs	r3, #2
 8007046:	b29a      	uxth	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800704c:	e0b6      	b.n	80071bc <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	330c      	adds	r3, #12
 8007058:	7812      	ldrb	r2, [r2, #0]
 800705a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800706a:	b29b      	uxth	r3, r3
 800706c:	3b01      	subs	r3, #1
 800706e:	b29a      	uxth	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007074:	e0a2      	b.n	80071bc <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b02      	cmp	r3, #2
 8007082:	d134      	bne.n	80070ee <HAL_SPI_TransmitReceive+0x314>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007088:	b29b      	uxth	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d02f      	beq.n	80070ee <HAL_SPI_TransmitReceive+0x314>
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	2b01      	cmp	r3, #1
 8007092:	d12c      	bne.n	80070ee <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007098:	b29b      	uxth	r3, r3
 800709a:	2b01      	cmp	r3, #1
 800709c:	d912      	bls.n	80070c4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a2:	881a      	ldrh	r2, [r3, #0]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ae:	1c9a      	adds	r2, r3, #2
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b02      	subs	r3, #2
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070c2:	e012      	b.n	80070ea <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	330c      	adds	r3, #12
 80070ce:	7812      	ldrb	r2, [r2, #0]
 80070d0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d148      	bne.n	800718e <HAL_SPI_TransmitReceive+0x3b4>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007102:	b29b      	uxth	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d042      	beq.n	800718e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800710e:	b29b      	uxth	r3, r3
 8007110:	2b01      	cmp	r3, #1
 8007112:	d923      	bls.n	800715c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	b292      	uxth	r2, r2
 8007120:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	1c9a      	adds	r2, r3, #2
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007132:	b29b      	uxth	r3, r3
 8007134:	3b02      	subs	r3, #2
 8007136:	b29a      	uxth	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007144:	b29b      	uxth	r3, r3
 8007146:	2b01      	cmp	r3, #1
 8007148:	d81f      	bhi.n	800718a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007158:	605a      	str	r2, [r3, #4]
 800715a:	e016      	b.n	800718a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f103 020c 	add.w	r2, r3, #12
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	7812      	ldrb	r2, [r2, #0]
 800716a:	b2d2      	uxtb	r2, r2
 800716c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800717e:	b29b      	uxth	r3, r3
 8007180:	3b01      	subs	r3, #1
 8007182:	b29a      	uxth	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800718a:	2301      	movs	r3, #1
 800718c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800718e:	f7fa ff47 	bl	8002020 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800719a:	429a      	cmp	r2, r3
 800719c:	d803      	bhi.n	80071a6 <HAL_SPI_TransmitReceive+0x3cc>
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a4:	d102      	bne.n	80071ac <HAL_SPI_TransmitReceive+0x3d2>
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d107      	bne.n	80071bc <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80071ba:	e026      	b.n	800720a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f47f af57 	bne.w	8007076 <HAL_SPI_TransmitReceive+0x29c>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f47f af50 	bne.w	8007076 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071d6:	69fa      	ldr	r2, [r7, #28]
 80071d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f996 	bl	800750c <SPI_EndRxTxTransaction>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d005      	beq.n	80071f2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2220      	movs	r2, #32
 80071f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007200:	e003      	b.n	800720a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007212:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007216:	4618      	mov	r0, r3
 8007218:	3728      	adds	r7, #40	; 0x28
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b088      	sub	sp, #32
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	603b      	str	r3, [r7, #0]
 800722c:	4613      	mov	r3, r2
 800722e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007230:	f7fa fef6 	bl	8002020 <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007238:	1a9b      	subs	r3, r3, r2
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	4413      	add	r3, r2
 800723e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007240:	f7fa feee 	bl	8002020 <HAL_GetTick>
 8007244:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007246:	4b39      	ldr	r3, [pc, #228]	; (800732c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	015b      	lsls	r3, r3, #5
 800724c:	0d1b      	lsrs	r3, r3, #20
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	fb02 f303 	mul.w	r3, r2, r3
 8007254:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007256:	e054      	b.n	8007302 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725e:	d050      	beq.n	8007302 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007260:	f7fa fede 	bl	8002020 <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	429a      	cmp	r2, r3
 800726e:	d902      	bls.n	8007276 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d13d      	bne.n	80072f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800728e:	d111      	bne.n	80072b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007298:	d004      	beq.n	80072a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072a2:	d107      	bne.n	80072b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072bc:	d10f      	bne.n	80072de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e017      	b.n	8007322 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	3b01      	subs	r3, #1
 8007300:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	4013      	ands	r3, r2
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	429a      	cmp	r2, r3
 8007310:	bf0c      	ite	eq
 8007312:	2301      	moveq	r3, #1
 8007314:	2300      	movne	r3, #0
 8007316:	b2db      	uxtb	r3, r3
 8007318:	461a      	mov	r2, r3
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	429a      	cmp	r2, r3
 800731e:	d19b      	bne.n	8007258 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3720      	adds	r7, #32
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000000 	.word	0x20000000

08007330 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08a      	sub	sp, #40	; 0x28
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007342:	f7fa fe6d 	bl	8002020 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734a:	1a9b      	subs	r3, r3, r2
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	4413      	add	r3, r2
 8007350:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007352:	f7fa fe65 	bl	8002020 <HAL_GetTick>
 8007356:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	330c      	adds	r3, #12
 800735e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007360:	4b3d      	ldr	r3, [pc, #244]	; (8007458 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	4613      	mov	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	00da      	lsls	r2, r3, #3
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	0d1b      	lsrs	r3, r3, #20
 8007370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007372:	fb02 f303 	mul.w	r3, r2, r3
 8007376:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007378:	e060      	b.n	800743c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007380:	d107      	bne.n	8007392 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d104      	bne.n	8007392 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007390:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007398:	d050      	beq.n	800743c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800739a:	f7fa fe41 	bl	8002020 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d902      	bls.n	80073b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d13d      	bne.n	800742c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073c8:	d111      	bne.n	80073ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073d2:	d004      	beq.n	80073de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073dc:	d107      	bne.n	80073ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073f6:	d10f      	bne.n	8007418 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007416:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e010      	b.n	800744e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	3b01      	subs	r3, #1
 800743a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689a      	ldr	r2, [r3, #8]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	4013      	ands	r3, r2
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	429a      	cmp	r2, r3
 800744a:	d196      	bne.n	800737a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3728      	adds	r7, #40	; 0x28
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20000000 	.word	0x20000000

0800745c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af02      	add	r7, sp, #8
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007470:	d111      	bne.n	8007496 <SPI_EndRxTransaction+0x3a>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800747a:	d004      	beq.n	8007486 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007484:	d107      	bne.n	8007496 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007494:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2200      	movs	r2, #0
 800749e:	2180      	movs	r1, #128	; 0x80
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f7ff febd 	bl	8007220 <SPI_WaitFlagStateUntilTimeout>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d007      	beq.n	80074bc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b0:	f043 0220 	orr.w	r2, r3, #32
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e023      	b.n	8007504 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074c4:	d11d      	bne.n	8007502 <SPI_EndRxTransaction+0xa6>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ce:	d004      	beq.n	80074da <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d8:	d113      	bne.n	8007502 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f7ff ff22 	bl	8007330 <SPI_WaitFifoStateUntilTimeout>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074f6:	f043 0220 	orr.w	r2, r3, #32
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e000      	b.n	8007504 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af02      	add	r7, sp, #8
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2200      	movs	r2, #0
 8007520:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7ff ff03 	bl	8007330 <SPI_WaitFifoStateUntilTimeout>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d007      	beq.n	8007540 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007534:	f043 0220 	orr.w	r2, r3, #32
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e027      	b.n	8007590 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2200      	movs	r2, #0
 8007548:	2180      	movs	r1, #128	; 0x80
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f7ff fe68 	bl	8007220 <SPI_WaitFlagStateUntilTimeout>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d007      	beq.n	8007566 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800755a:	f043 0220 	orr.w	r2, r3, #32
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e014      	b.n	8007590 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2200      	movs	r2, #0
 800756e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f7ff fedc 	bl	8007330 <SPI_WaitFifoStateUntilTimeout>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d007      	beq.n	800758e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007582:	f043 0220 	orr.w	r2, r3, #32
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e000      	b.n	8007590 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e049      	b.n	800763e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d106      	bne.n	80075c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7fa f9de 	bl	8001980 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2202      	movs	r2, #2
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3304      	adds	r3, #4
 80075d4:	4619      	mov	r1, r3
 80075d6:	4610      	mov	r0, r2
 80075d8:	f000 f94a 	bl	8007870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
	...

08007648 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800765e:	2b01      	cmp	r3, #1
 8007660:	d101      	bne.n	8007666 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007662:	2302      	movs	r3, #2
 8007664:	e0ff      	b.n	8007866 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b14      	cmp	r3, #20
 8007672:	f200 80f0 	bhi.w	8007856 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007676:	a201      	add	r2, pc, #4	; (adr r2, 800767c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767c:	080076d1 	.word	0x080076d1
 8007680:	08007857 	.word	0x08007857
 8007684:	08007857 	.word	0x08007857
 8007688:	08007857 	.word	0x08007857
 800768c:	08007711 	.word	0x08007711
 8007690:	08007857 	.word	0x08007857
 8007694:	08007857 	.word	0x08007857
 8007698:	08007857 	.word	0x08007857
 800769c:	08007753 	.word	0x08007753
 80076a0:	08007857 	.word	0x08007857
 80076a4:	08007857 	.word	0x08007857
 80076a8:	08007857 	.word	0x08007857
 80076ac:	08007793 	.word	0x08007793
 80076b0:	08007857 	.word	0x08007857
 80076b4:	08007857 	.word	0x08007857
 80076b8:	08007857 	.word	0x08007857
 80076bc:	080077d5 	.word	0x080077d5
 80076c0:	08007857 	.word	0x08007857
 80076c4:	08007857 	.word	0x08007857
 80076c8:	08007857 	.word	0x08007857
 80076cc:	08007815 	.word	0x08007815
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68b9      	ldr	r1, [r7, #8]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 f964 	bl	80079a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	699a      	ldr	r2, [r3, #24]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f042 0208 	orr.w	r2, r2, #8
 80076ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	699a      	ldr	r2, [r3, #24]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f022 0204 	bic.w	r2, r2, #4
 80076fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6999      	ldr	r1, [r3, #24]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	691a      	ldr	r2, [r3, #16]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	619a      	str	r2, [r3, #24]
      break;
 800770e:	e0a5      	b.n	800785c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68b9      	ldr	r1, [r7, #8]
 8007716:	4618      	mov	r0, r3
 8007718:	f000 f9d4 	bl	8007ac4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	699a      	ldr	r2, [r3, #24]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800772a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	699a      	ldr	r2, [r3, #24]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800773a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6999      	ldr	r1, [r3, #24]
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	021a      	lsls	r2, r3, #8
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	619a      	str	r2, [r3, #24]
      break;
 8007750:	e084      	b.n	800785c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68b9      	ldr	r1, [r7, #8]
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fa3d 	bl	8007bd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	69da      	ldr	r2, [r3, #28]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f042 0208 	orr.w	r2, r2, #8
 800776c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	69da      	ldr	r2, [r3, #28]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 0204 	bic.w	r2, r2, #4
 800777c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	69d9      	ldr	r1, [r3, #28]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	691a      	ldr	r2, [r3, #16]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	61da      	str	r2, [r3, #28]
      break;
 8007790:	e064      	b.n	800785c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68b9      	ldr	r1, [r7, #8]
 8007798:	4618      	mov	r0, r3
 800779a:	f000 faa5 	bl	8007ce8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69da      	ldr	r2, [r3, #28]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69da      	ldr	r2, [r3, #28]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69d9      	ldr	r1, [r3, #28]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	021a      	lsls	r2, r3, #8
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	61da      	str	r2, [r3, #28]
      break;
 80077d2:	e043      	b.n	800785c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68b9      	ldr	r1, [r7, #8]
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 faee 	bl	8007dbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f042 0208 	orr.w	r2, r2, #8
 80077ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 0204 	bic.w	r2, r2, #4
 80077fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	691a      	ldr	r2, [r3, #16]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007812:	e023      	b.n	800785c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68b9      	ldr	r1, [r7, #8]
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fb32 	bl	8007e84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800782e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800783e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	021a      	lsls	r2, r3, #8
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	430a      	orrs	r2, r1
 8007852:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007854:	e002      	b.n	800785c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	75fb      	strb	r3, [r7, #23]
      break;
 800785a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007864:	7dfb      	ldrb	r3, [r7, #23]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop

08007870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a40      	ldr	r2, [pc, #256]	; (8007984 <TIM_Base_SetConfig+0x114>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d013      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800788e:	d00f      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a3d      	ldr	r2, [pc, #244]	; (8007988 <TIM_Base_SetConfig+0x118>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d00b      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a3c      	ldr	r2, [pc, #240]	; (800798c <TIM_Base_SetConfig+0x11c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d007      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a3b      	ldr	r2, [pc, #236]	; (8007990 <TIM_Base_SetConfig+0x120>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d003      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a3a      	ldr	r2, [pc, #232]	; (8007994 <TIM_Base_SetConfig+0x124>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d108      	bne.n	80078c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	4313      	orrs	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a2f      	ldr	r2, [pc, #188]	; (8007984 <TIM_Base_SetConfig+0x114>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d01f      	beq.n	800790a <TIM_Base_SetConfig+0x9a>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d0:	d01b      	beq.n	800790a <TIM_Base_SetConfig+0x9a>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a2c      	ldr	r2, [pc, #176]	; (8007988 <TIM_Base_SetConfig+0x118>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d017      	beq.n	800790a <TIM_Base_SetConfig+0x9a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a2b      	ldr	r2, [pc, #172]	; (800798c <TIM_Base_SetConfig+0x11c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d013      	beq.n	800790a <TIM_Base_SetConfig+0x9a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a2a      	ldr	r2, [pc, #168]	; (8007990 <TIM_Base_SetConfig+0x120>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00f      	beq.n	800790a <TIM_Base_SetConfig+0x9a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a29      	ldr	r2, [pc, #164]	; (8007994 <TIM_Base_SetConfig+0x124>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00b      	beq.n	800790a <TIM_Base_SetConfig+0x9a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a28      	ldr	r2, [pc, #160]	; (8007998 <TIM_Base_SetConfig+0x128>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d007      	beq.n	800790a <TIM_Base_SetConfig+0x9a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a27      	ldr	r2, [pc, #156]	; (800799c <TIM_Base_SetConfig+0x12c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d003      	beq.n	800790a <TIM_Base_SetConfig+0x9a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a26      	ldr	r2, [pc, #152]	; (80079a0 <TIM_Base_SetConfig+0x130>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d108      	bne.n	800791c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4313      	orrs	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	689a      	ldr	r2, [r3, #8]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a10      	ldr	r2, [pc, #64]	; (8007984 <TIM_Base_SetConfig+0x114>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d00f      	beq.n	8007968 <TIM_Base_SetConfig+0xf8>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a12      	ldr	r2, [pc, #72]	; (8007994 <TIM_Base_SetConfig+0x124>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00b      	beq.n	8007968 <TIM_Base_SetConfig+0xf8>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a11      	ldr	r2, [pc, #68]	; (8007998 <TIM_Base_SetConfig+0x128>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d007      	beq.n	8007968 <TIM_Base_SetConfig+0xf8>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a10      	ldr	r2, [pc, #64]	; (800799c <TIM_Base_SetConfig+0x12c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_Base_SetConfig+0xf8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a0f      	ldr	r2, [pc, #60]	; (80079a0 <TIM_Base_SetConfig+0x130>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d103      	bne.n	8007970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	615a      	str	r2, [r3, #20]
}
 8007976:	bf00      	nop
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	40012c00 	.word	0x40012c00
 8007988:	40000400 	.word	0x40000400
 800798c:	40000800 	.word	0x40000800
 8007990:	40000c00 	.word	0x40000c00
 8007994:	40013400 	.word	0x40013400
 8007998:	40014000 	.word	0x40014000
 800799c:	40014400 	.word	0x40014400
 80079a0:	40014800 	.word	0x40014800

080079a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	f023 0201 	bic.w	r2, r3, #1
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f023 0303 	bic.w	r3, r3, #3
 80079de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f023 0302 	bic.w	r3, r3, #2
 80079f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a2c      	ldr	r2, [pc, #176]	; (8007ab0 <TIM_OC1_SetConfig+0x10c>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d00f      	beq.n	8007a24 <TIM_OC1_SetConfig+0x80>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a2b      	ldr	r2, [pc, #172]	; (8007ab4 <TIM_OC1_SetConfig+0x110>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d00b      	beq.n	8007a24 <TIM_OC1_SetConfig+0x80>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a2a      	ldr	r2, [pc, #168]	; (8007ab8 <TIM_OC1_SetConfig+0x114>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d007      	beq.n	8007a24 <TIM_OC1_SetConfig+0x80>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a29      	ldr	r2, [pc, #164]	; (8007abc <TIM_OC1_SetConfig+0x118>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d003      	beq.n	8007a24 <TIM_OC1_SetConfig+0x80>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a28      	ldr	r2, [pc, #160]	; (8007ac0 <TIM_OC1_SetConfig+0x11c>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d10c      	bne.n	8007a3e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f023 0308 	bic.w	r3, r3, #8
 8007a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f023 0304 	bic.w	r3, r3, #4
 8007a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a1b      	ldr	r2, [pc, #108]	; (8007ab0 <TIM_OC1_SetConfig+0x10c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d00f      	beq.n	8007a66 <TIM_OC1_SetConfig+0xc2>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a1a      	ldr	r2, [pc, #104]	; (8007ab4 <TIM_OC1_SetConfig+0x110>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d00b      	beq.n	8007a66 <TIM_OC1_SetConfig+0xc2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a19      	ldr	r2, [pc, #100]	; (8007ab8 <TIM_OC1_SetConfig+0x114>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d007      	beq.n	8007a66 <TIM_OC1_SetConfig+0xc2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a18      	ldr	r2, [pc, #96]	; (8007abc <TIM_OC1_SetConfig+0x118>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d003      	beq.n	8007a66 <TIM_OC1_SetConfig+0xc2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a17      	ldr	r2, [pc, #92]	; (8007ac0 <TIM_OC1_SetConfig+0x11c>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d111      	bne.n	8007a8a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	621a      	str	r2, [r3, #32]
}
 8007aa4:	bf00      	nop
 8007aa6:	371c      	adds	r7, #28
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	40012c00 	.word	0x40012c00
 8007ab4:	40013400 	.word	0x40013400
 8007ab8:	40014000 	.word	0x40014000
 8007abc:	40014400 	.word	0x40014400
 8007ac0:	40014800 	.word	0x40014800

08007ac4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	f023 0210 	bic.w	r2, r3, #16
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	f023 0320 	bic.w	r3, r3, #32
 8007b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a28      	ldr	r2, [pc, #160]	; (8007bc4 <TIM_OC2_SetConfig+0x100>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d003      	beq.n	8007b30 <TIM_OC2_SetConfig+0x6c>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a27      	ldr	r2, [pc, #156]	; (8007bc8 <TIM_OC2_SetConfig+0x104>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d10d      	bne.n	8007b4c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a1d      	ldr	r2, [pc, #116]	; (8007bc4 <TIM_OC2_SetConfig+0x100>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d00f      	beq.n	8007b74 <TIM_OC2_SetConfig+0xb0>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a1c      	ldr	r2, [pc, #112]	; (8007bc8 <TIM_OC2_SetConfig+0x104>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d00b      	beq.n	8007b74 <TIM_OC2_SetConfig+0xb0>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a1b      	ldr	r2, [pc, #108]	; (8007bcc <TIM_OC2_SetConfig+0x108>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d007      	beq.n	8007b74 <TIM_OC2_SetConfig+0xb0>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a1a      	ldr	r2, [pc, #104]	; (8007bd0 <TIM_OC2_SetConfig+0x10c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d003      	beq.n	8007b74 <TIM_OC2_SetConfig+0xb0>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a19      	ldr	r2, [pc, #100]	; (8007bd4 <TIM_OC2_SetConfig+0x110>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d113      	bne.n	8007b9c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	693a      	ldr	r2, [r7, #16]
 8007ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	621a      	str	r2, [r3, #32]
}
 8007bb6:	bf00      	nop
 8007bb8:	371c      	adds	r7, #28
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	40012c00 	.word	0x40012c00
 8007bc8:	40013400 	.word	0x40013400
 8007bcc:	40014000 	.word	0x40014000
 8007bd0:	40014400 	.word	0x40014400
 8007bd4:	40014800 	.word	0x40014800

08007bd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	69db      	ldr	r3, [r3, #28]
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f023 0303 	bic.w	r3, r3, #3
 8007c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	021b      	lsls	r3, r3, #8
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a27      	ldr	r2, [pc, #156]	; (8007cd4 <TIM_OC3_SetConfig+0xfc>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d003      	beq.n	8007c42 <TIM_OC3_SetConfig+0x6a>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a26      	ldr	r2, [pc, #152]	; (8007cd8 <TIM_OC3_SetConfig+0x100>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d10d      	bne.n	8007c5e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	021b      	lsls	r3, r3, #8
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a1c      	ldr	r2, [pc, #112]	; (8007cd4 <TIM_OC3_SetConfig+0xfc>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d00f      	beq.n	8007c86 <TIM_OC3_SetConfig+0xae>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a1b      	ldr	r2, [pc, #108]	; (8007cd8 <TIM_OC3_SetConfig+0x100>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d00b      	beq.n	8007c86 <TIM_OC3_SetConfig+0xae>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a1a      	ldr	r2, [pc, #104]	; (8007cdc <TIM_OC3_SetConfig+0x104>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d007      	beq.n	8007c86 <TIM_OC3_SetConfig+0xae>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a19      	ldr	r2, [pc, #100]	; (8007ce0 <TIM_OC3_SetConfig+0x108>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d003      	beq.n	8007c86 <TIM_OC3_SetConfig+0xae>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a18      	ldr	r2, [pc, #96]	; (8007ce4 <TIM_OC3_SetConfig+0x10c>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d113      	bne.n	8007cae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	011b      	lsls	r3, r3, #4
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	011b      	lsls	r3, r3, #4
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	621a      	str	r2, [r3, #32]
}
 8007cc8:	bf00      	nop
 8007cca:	371c      	adds	r7, #28
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	40012c00 	.word	0x40012c00
 8007cd8:	40013400 	.word	0x40013400
 8007cdc:	40014000 	.word	0x40014000
 8007ce0:	40014400 	.word	0x40014400
 8007ce4:	40014800 	.word	0x40014800

08007ce8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	021b      	lsls	r3, r3, #8
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	031b      	lsls	r3, r3, #12
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a18      	ldr	r2, [pc, #96]	; (8007da8 <TIM_OC4_SetConfig+0xc0>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d00f      	beq.n	8007d6c <TIM_OC4_SetConfig+0x84>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a17      	ldr	r2, [pc, #92]	; (8007dac <TIM_OC4_SetConfig+0xc4>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d00b      	beq.n	8007d6c <TIM_OC4_SetConfig+0x84>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a16      	ldr	r2, [pc, #88]	; (8007db0 <TIM_OC4_SetConfig+0xc8>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d007      	beq.n	8007d6c <TIM_OC4_SetConfig+0x84>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a15      	ldr	r2, [pc, #84]	; (8007db4 <TIM_OC4_SetConfig+0xcc>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d003      	beq.n	8007d6c <TIM_OC4_SetConfig+0x84>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a14      	ldr	r2, [pc, #80]	; (8007db8 <TIM_OC4_SetConfig+0xd0>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d109      	bne.n	8007d80 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	019b      	lsls	r3, r3, #6
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	621a      	str	r2, [r3, #32]
}
 8007d9a:	bf00      	nop
 8007d9c:	371c      	adds	r7, #28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	40012c00 	.word	0x40012c00
 8007dac:	40013400 	.word	0x40013400
 8007db0:	40014000 	.word	0x40014000
 8007db4:	40014400 	.word	0x40014400
 8007db8:	40014800 	.word	0x40014800

08007dbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b087      	sub	sp, #28
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a1b      	ldr	r3, [r3, #32]
 8007dd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	041b      	lsls	r3, r3, #16
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a17      	ldr	r2, [pc, #92]	; (8007e70 <TIM_OC5_SetConfig+0xb4>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d00f      	beq.n	8007e36 <TIM_OC5_SetConfig+0x7a>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a16      	ldr	r2, [pc, #88]	; (8007e74 <TIM_OC5_SetConfig+0xb8>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d00b      	beq.n	8007e36 <TIM_OC5_SetConfig+0x7a>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a15      	ldr	r2, [pc, #84]	; (8007e78 <TIM_OC5_SetConfig+0xbc>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d007      	beq.n	8007e36 <TIM_OC5_SetConfig+0x7a>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a14      	ldr	r2, [pc, #80]	; (8007e7c <TIM_OC5_SetConfig+0xc0>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d003      	beq.n	8007e36 <TIM_OC5_SetConfig+0x7a>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a13      	ldr	r2, [pc, #76]	; (8007e80 <TIM_OC5_SetConfig+0xc4>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d109      	bne.n	8007e4a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	021b      	lsls	r3, r3, #8
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	621a      	str	r2, [r3, #32]
}
 8007e64:	bf00      	nop
 8007e66:	371c      	adds	r7, #28
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	40012c00 	.word	0x40012c00
 8007e74:	40013400 	.word	0x40013400
 8007e78:	40014000 	.word	0x40014000
 8007e7c:	40014400 	.word	0x40014400
 8007e80:	40014800 	.word	0x40014800

08007e84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	021b      	lsls	r3, r3, #8
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	051b      	lsls	r3, r3, #20
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a18      	ldr	r2, [pc, #96]	; (8007f3c <TIM_OC6_SetConfig+0xb8>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d00f      	beq.n	8007f00 <TIM_OC6_SetConfig+0x7c>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a17      	ldr	r2, [pc, #92]	; (8007f40 <TIM_OC6_SetConfig+0xbc>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d00b      	beq.n	8007f00 <TIM_OC6_SetConfig+0x7c>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a16      	ldr	r2, [pc, #88]	; (8007f44 <TIM_OC6_SetConfig+0xc0>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d007      	beq.n	8007f00 <TIM_OC6_SetConfig+0x7c>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a15      	ldr	r2, [pc, #84]	; (8007f48 <TIM_OC6_SetConfig+0xc4>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d003      	beq.n	8007f00 <TIM_OC6_SetConfig+0x7c>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a14      	ldr	r2, [pc, #80]	; (8007f4c <TIM_OC6_SetConfig+0xc8>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d109      	bne.n	8007f14 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	029b      	lsls	r3, r3, #10
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	621a      	str	r2, [r3, #32]
}
 8007f2e:	bf00      	nop
 8007f30:	371c      	adds	r7, #28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	40012c00 	.word	0x40012c00
 8007f40:	40013400 	.word	0x40013400
 8007f44:	40014000 	.word	0x40014000
 8007f48:	40014400 	.word	0x40014400
 8007f4c:	40014800 	.word	0x40014800

08007f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d101      	bne.n	8007f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f64:	2302      	movs	r3, #2
 8007f66:	e068      	b.n	800803a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a2e      	ldr	r2, [pc, #184]	; (8008048 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d004      	beq.n	8007f9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a2d      	ldr	r2, [pc, #180]	; (800804c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d108      	bne.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007fa2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a1e      	ldr	r2, [pc, #120]	; (8008048 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d01d      	beq.n	800800e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fda:	d018      	beq.n	800800e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a1b      	ldr	r2, [pc, #108]	; (8008050 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d013      	beq.n	800800e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a1a      	ldr	r2, [pc, #104]	; (8008054 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d00e      	beq.n	800800e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a18      	ldr	r2, [pc, #96]	; (8008058 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d009      	beq.n	800800e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a13      	ldr	r2, [pc, #76]	; (800804c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d004      	beq.n	800800e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a14      	ldr	r2, [pc, #80]	; (800805c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d10c      	bne.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008014:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	4313      	orrs	r3, r2
 800801e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	40012c00 	.word	0x40012c00
 800804c:	40013400 	.word	0x40013400
 8008050:	40000400 	.word	0x40000400
 8008054:	40000800 	.word	0x40000800
 8008058:	40000c00 	.word	0x40000c00
 800805c:	40014000 	.word	0x40014000

08008060 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008074:	2b01      	cmp	r3, #1
 8008076:	d101      	bne.n	800807c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008078:	2302      	movs	r3, #2
 800807a:	e065      	b.n	8008148 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	4313      	orrs	r3, r2
 8008090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	4313      	orrs	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e2:	4313      	orrs	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	041b      	lsls	r3, r3, #16
 80080f2:	4313      	orrs	r3, r2
 80080f4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a16      	ldr	r2, [pc, #88]	; (8008154 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d004      	beq.n	800810a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a14      	ldr	r2, [pc, #80]	; (8008158 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d115      	bne.n	8008136 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008114:	051b      	lsls	r3, r3, #20
 8008116:	4313      	orrs	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	69db      	ldr	r3, [r3, #28]
 8008124:	4313      	orrs	r3, r2
 8008126:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	4313      	orrs	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	40012c00 	.word	0x40012c00
 8008158:	40013400 	.word	0x40013400

0800815c <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800815c:	b480      	push	{r7}
 800815e:	b08b      	sub	sp, #44	; 0x2c
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008174:	2b01      	cmp	r3, #1
 8008176:	d101      	bne.n	800817c <HAL_TIMEx_ConfigBreakInput+0x20>
 8008178:	2302      	movs	r3, #2
 800817a:	e0af      	b.n	80082dc <HAL_TIMEx_ConfigBreakInput+0x180>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	3b01      	subs	r3, #1
 800818a:	2b07      	cmp	r3, #7
 800818c:	d83a      	bhi.n	8008204 <HAL_TIMEx_ConfigBreakInput+0xa8>
 800818e:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8008190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008194:	080081b5 	.word	0x080081b5
 8008198:	080081c9 	.word	0x080081c9
 800819c:	08008205 	.word	0x08008205
 80081a0:	080081dd 	.word	0x080081dd
 80081a4:	08008205 	.word	0x08008205
 80081a8:	08008205 	.word	0x08008205
 80081ac:	08008205 	.word	0x08008205
 80081b0:	080081f1 	.word	0x080081f1
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 80081b4:	2301      	movs	r3, #1
 80081b6:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 80081b8:	2300      	movs	r3, #0
 80081ba:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 80081bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081c0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 80081c2:	2309      	movs	r3, #9
 80081c4:	613b      	str	r3, [r7, #16]
      break;
 80081c6:	e026      	b.n	8008216 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 80081c8:	2302      	movs	r3, #2
 80081ca:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 80081cc:	2301      	movs	r3, #1
 80081ce:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 80081d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081d4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 80081d6:	230a      	movs	r3, #10
 80081d8:	613b      	str	r3, [r7, #16]
      break;
 80081da:	e01c      	b.n	8008216 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 80081dc:	2304      	movs	r3, #4
 80081de:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 80081e0:	2302      	movs	r3, #2
 80081e2:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 80081e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081e8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 80081ea:	230b      	movs	r3, #11
 80081ec:	613b      	str	r3, [r7, #16]
      break;
 80081ee:	e012      	b.n	8008216 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 80081f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081f4:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 80081f6:	2308      	movs	r3, #8
 80081f8:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80081fe:	2300      	movs	r3, #0
 8008200:	613b      	str	r3, [r7, #16]
      break;
 8008202:	e008      	b.n	8008216 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 8008204:	2300      	movs	r3, #0
 8008206:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 8008208:	2300      	movs	r3, #0
 800820a:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800820c:	2300      	movs	r3, #0
 800820e:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	613b      	str	r3, [r7, #16]
      break;
 8008214:	bf00      	nop
    }
  }

  switch (BreakInput)
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d003      	beq.n	8008224 <HAL_TIMEx_ConfigBreakInput+0xc8>
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2b02      	cmp	r3, #2
 8008220:	d029      	beq.n	8008276 <HAL_TIMEx_ConfigBreakInput+0x11a>
 8008222:	e051      	b.n	80082c8 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800822a:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	43db      	mvns	r3, r3
 8008230:	6a3a      	ldr	r2, [r7, #32]
 8008232:	4013      	ands	r3, r2
 8008234:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	409a      	lsls	r2, r3
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	4013      	ands	r3, r2
 8008242:	6a3a      	ldr	r2, [r7, #32]
 8008244:	4313      	orrs	r3, r2
 8008246:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b08      	cmp	r3, #8
 800824e:	d00d      	beq.n	800826c <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	43db      	mvns	r3, r3
 8008254:	6a3a      	ldr	r2, [r7, #32]
 8008256:	4013      	ands	r3, r2
 8008258:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	689a      	ldr	r2, [r3, #8]
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	409a      	lsls	r2, r3
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	4013      	ands	r3, r2
 8008266:	6a3a      	ldr	r2, [r7, #32]
 8008268:	4313      	orrs	r3, r2
 800826a:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6a3a      	ldr	r2, [r7, #32]
 8008272:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8008274:	e02c      	b.n	80082d0 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800827c:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	43db      	mvns	r3, r3
 8008282:	6a3a      	ldr	r2, [r7, #32]
 8008284:	4013      	ands	r3, r2
 8008286:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	409a      	lsls	r2, r3
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	4013      	ands	r3, r2
 8008294:	6a3a      	ldr	r2, [r7, #32]
 8008296:	4313      	orrs	r3, r2
 8008298:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b08      	cmp	r3, #8
 80082a0:	d00d      	beq.n	80082be <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	43db      	mvns	r3, r3
 80082a6:	6a3a      	ldr	r2, [r7, #32]
 80082a8:	4013      	ands	r3, r2
 80082aa:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689a      	ldr	r2, [r3, #8]
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	409a      	lsls	r2, r3
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	4013      	ands	r3, r2
 80082b8:	6a3a      	ldr	r2, [r7, #32]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6a3a      	ldr	r2, [r7, #32]
 80082c4:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80082c6:	e003      	b.n	80082d0 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80082ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80082dc:	4618      	mov	r0, r3
 80082de:	372c      	adds	r7, #44	; 0x2c
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <memset>:
 80082e8:	4402      	add	r2, r0
 80082ea:	4603      	mov	r3, r0
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d100      	bne.n	80082f2 <memset+0xa>
 80082f0:	4770      	bx	lr
 80082f2:	f803 1b01 	strb.w	r1, [r3], #1
 80082f6:	e7f9      	b.n	80082ec <memset+0x4>

080082f8 <__libc_init_array>:
 80082f8:	b570      	push	{r4, r5, r6, lr}
 80082fa:	4d0d      	ldr	r5, [pc, #52]	; (8008330 <__libc_init_array+0x38>)
 80082fc:	4c0d      	ldr	r4, [pc, #52]	; (8008334 <__libc_init_array+0x3c>)
 80082fe:	1b64      	subs	r4, r4, r5
 8008300:	10a4      	asrs	r4, r4, #2
 8008302:	2600      	movs	r6, #0
 8008304:	42a6      	cmp	r6, r4
 8008306:	d109      	bne.n	800831c <__libc_init_array+0x24>
 8008308:	4d0b      	ldr	r5, [pc, #44]	; (8008338 <__libc_init_array+0x40>)
 800830a:	4c0c      	ldr	r4, [pc, #48]	; (800833c <__libc_init_array+0x44>)
 800830c:	f000 f818 	bl	8008340 <_init>
 8008310:	1b64      	subs	r4, r4, r5
 8008312:	10a4      	asrs	r4, r4, #2
 8008314:	2600      	movs	r6, #0
 8008316:	42a6      	cmp	r6, r4
 8008318:	d105      	bne.n	8008326 <__libc_init_array+0x2e>
 800831a:	bd70      	pop	{r4, r5, r6, pc}
 800831c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008320:	4798      	blx	r3
 8008322:	3601      	adds	r6, #1
 8008324:	e7ee      	b.n	8008304 <__libc_init_array+0xc>
 8008326:	f855 3b04 	ldr.w	r3, [r5], #4
 800832a:	4798      	blx	r3
 800832c:	3601      	adds	r6, #1
 800832e:	e7f2      	b.n	8008316 <__libc_init_array+0x1e>
 8008330:	080083a8 	.word	0x080083a8
 8008334:	080083a8 	.word	0x080083a8
 8008338:	080083a8 	.word	0x080083a8
 800833c:	080083ac 	.word	0x080083ac

08008340 <_init>:
 8008340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008342:	bf00      	nop
 8008344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008346:	bc08      	pop	{r3}
 8008348:	469e      	mov	lr, r3
 800834a:	4770      	bx	lr

0800834c <_fini>:
 800834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834e:	bf00      	nop
 8008350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008352:	bc08      	pop	{r3}
 8008354:	469e      	mov	lr, r3
 8008356:	4770      	bx	lr


LoRa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091ec  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080093ac  080093ac  000193ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093f4  080093f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080093f4  080093f4  000193f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093fc  080093fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093fc  080093fc  000193fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009400  08009400  00019400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  2000000c  08009410  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08009410  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014392  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002869  00000000  00000000  00034411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  00036c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001054  00000000  00000000  00038180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bf8f  00000000  00000000  000391d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d5c  00000000  00000000  00065163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00116c59  00000000  00000000  0007bebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a2c  00000000  00000000  00192b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00198544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009394 	.word	0x08009394

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08009394 	.word	0x08009394

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b970 	b.w	80004f8 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	460b      	mov	r3, r1
 8000506:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 800050c:	78fb      	ldrb	r3, [r7, #3]
 800050e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000512:	b2db      	uxtb	r3, r3
 8000514:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6858      	ldr	r0, [r3, #4]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	8adb      	ldrh	r3, [r3, #22]
 800051e:	2200      	movs	r2, #0
 8000520:	4619      	mov	r1, r3
 8000522:	f003 fb93 	bl	8003c4c <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6818      	ldr	r0, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	1cf9      	adds	r1, r7, #3
 8000530:	2201      	movs	r2, #1
 8000532:	f006 fcbc 	bl	8006eae <HAL_SPI_Transmit>
 8000536:	4603      	mov	r3, r0
 8000538:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	f107 010f 	add.w	r1, r7, #15
 8000546:	2201      	movs	r2, #1
 8000548:	f006 fe26 	bl	8007198 <HAL_SPI_Receive>
 800054c:	4603      	mov	r3, r0
 800054e:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	6858      	ldr	r0, [r3, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	8adb      	ldrh	r3, [r3, #22]
 8000558:	2201      	movs	r2, #1
 800055a:	4619      	mov	r1, r3
 800055c:	f003 fb76 	bl	8003c4c <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000560:	7bfb      	ldrb	r3, [r7, #15]
}
 8000562:	4618      	mov	r0, r3
 8000564:	3718      	adds	r7, #24
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b084      	sub	sp, #16
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	460b      	mov	r3, r1
 8000574:	70fb      	strb	r3, [r7, #3]
 8000576:	4613      	mov	r3, r2
 8000578:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800057a:	78fb      	ldrb	r3, [r7, #3]
 800057c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000580:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000582:	78bb      	ldrb	r3, [r7, #2]
 8000584:	021b      	lsls	r3, r3, #8
 8000586:	b21a      	sxth	r2, r3
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	b21b      	sxth	r3, r3
 800058c:	4313      	orrs	r3, r2
 800058e:	b21b      	sxth	r3, r3
 8000590:	b29b      	uxth	r3, r3
 8000592:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6858      	ldr	r0, [r3, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	8adb      	ldrh	r3, [r3, #22]
 800059c:	2200      	movs	r2, #0
 800059e:	4619      	mov	r1, r3
 80005a0:	f003 fb54 	bl	8003c4c <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	6818      	ldr	r0, [r3, #0]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	f107 010a 	add.w	r1, r7, #10
 80005b0:	2202      	movs	r2, #2
 80005b2:	f006 fc7c 	bl	8006eae <HAL_SPI_Transmit>
 80005b6:	4603      	mov	r3, r0
 80005b8:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6858      	ldr	r0, [r3, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	8adb      	ldrh	r3, [r3, #22]
 80005c2:	2201      	movs	r2, #1
 80005c4:	4619      	mov	r1, r3
 80005c6:	f003 fb41 	bl	8003c4c <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b088      	sub	sp, #32
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	60f8      	str	r0, [r7, #12]
 80005da:	60b9      	str	r1, [r7, #8]
 80005dc:	4611      	mov	r1, r2
 80005de:	461a      	mov	r2, r3
 80005e0:	460b      	mov	r3, r1
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	4613      	mov	r3, r2
 80005e6:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	6858      	ldr	r0, [r3, #4]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	8adb      	ldrh	r3, [r3, #22]
 80005f4:	2200      	movs	r2, #0
 80005f6:	4619      	mov	r1, r3
 80005f8:	f003 fb28 	bl	8003c4c <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	6818      	ldr	r0, [r3, #0]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	f107 0117 	add.w	r1, r7, #23
 8000608:	2201      	movs	r2, #1
 800060a:	f006 fc50 	bl	8006eae <HAL_SPI_Transmit>
 800060e:	4603      	mov	r3, r0
 8000610:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8000612:	79bb      	ldrb	r3, [r7, #6]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d108      	bne.n	800062a <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	79fa      	ldrb	r2, [r7, #7]
 800061e:	b292      	uxth	r2, r2
 8000620:	68b9      	ldr	r1, [r7, #8]
 8000622:	4618      	mov	r0, r3
 8000624:	f007 f912 	bl	800784c <HAL_SPI_Transmit_DMA>
 8000628:	e012      	b.n	8000650 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	6818      	ldr	r0, [r3, #0]
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	b29a      	uxth	r2, r3
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	68b9      	ldr	r1, [r7, #8]
 8000638:	f006 fc39 	bl	8006eae <HAL_SPI_Transmit>
 800063c:	4603      	mov	r3, r0
 800063e:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	6858      	ldr	r0, [r3, #4]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	8adb      	ldrh	r3, [r3, #22]
 8000648:	2201      	movs	r2, #1
 800064a:	4619      	mov	r1, r3
 800064c:	f003 fafe 	bl	8003c4c <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <read_fifo>:

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b088      	sub	sp, #32
 800065a:	af00      	add	r7, sp, #0
 800065c:	60f8      	str	r0, [r7, #12]
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	4611      	mov	r1, r2
 8000662:	461a      	mov	r2, r3
 8000664:	460b      	mov	r3, r1
 8000666:	71fb      	strb	r3, [r7, #7]
 8000668:	4613      	mov	r3, r2
 800066a:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO;
 800066c:	2300      	movs	r3, #0
 800066e:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	6858      	ldr	r0, [r3, #4]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	8adb      	ldrh	r3, [r3, #22]
 8000678:	2200      	movs	r2, #0
 800067a:	4619      	mov	r1, r3
 800067c:	f003 fae6 	bl	8003c4c <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	6818      	ldr	r0, [r3, #0]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	f107 0117 	add.w	r1, r7, #23
 800068c:	2201      	movs	r2, #1
 800068e:	f006 fc0e 	bl	8006eae <HAL_SPI_Transmit>
 8000692:	4603      	mov	r3, r0
 8000694:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 8000696:	79bb      	ldrb	r3, [r7, #6]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d10a      	bne.n	80006b2 <read_fifo+0x5c>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	79fa      	ldrb	r2, [r7, #7]
 80006a2:	b292      	uxth	r2, r2
 80006a4:	68b9      	ldr	r1, [r7, #8]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f007 f9c0 	bl	8007a2c <HAL_SPI_Receive_DMA>
 80006ac:	4603      	mov	r3, r0
 80006ae:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 80006b0:	e012      	b.n	80006d8 <read_fifo+0x82>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	68b9      	ldr	r1, [r7, #8]
 80006c0:	f006 fd6a 	bl	8007198 <HAL_SPI_Receive>
 80006c4:	4603      	mov	r3, r0
 80006c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	6858      	ldr	r0, [r3, #4]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	8adb      	ldrh	r3, [r3, #22]
 80006d0:	2201      	movs	r2, #1
 80006d2:	4619      	mov	r1, r3
 80006d4:	f003 faba 	bl	8003c4c <HAL_GPIO_WritePin>
}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 80006ec:	78fb      	ldrb	r3, [r7, #3]
 80006ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	461a      	mov	r2, r3
 80006f6:	2101      	movs	r1, #1
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff36 	bl	800056a <write_register>
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	2b2c      	cmp	r3, #44	; 0x2c
 8000718:	d801      	bhi.n	800071e <set_OCP+0x16>
    imax = 45;
 800071a:	232d      	movs	r3, #45	; 0x2d
 800071c:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	2bf0      	cmp	r3, #240	; 0xf0
 8000722:	d901      	bls.n	8000728 <set_OCP+0x20>
    imax = 240;
 8000724:	23f0      	movs	r3, #240	; 0xf0
 8000726:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8000728:	78fb      	ldrb	r3, [r7, #3]
 800072a:	2b81      	cmp	r3, #129	; 0x81
 800072c:	d809      	bhi.n	8000742 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	3b2d      	subs	r3, #45	; 0x2d
 8000732:	4a0f      	ldr	r2, [pc, #60]	; (8000770 <set_OCP+0x68>)
 8000734:	fb82 1203 	smull	r1, r2, r2, r3
 8000738:	1052      	asrs	r2, r2, #1
 800073a:	17db      	asrs	r3, r3, #31
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	e008      	b.n	8000754 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8000742:	78fb      	ldrb	r3, [r7, #3]
 8000744:	331e      	adds	r3, #30
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <set_OCP+0x68>)
 8000748:	fb82 1203 	smull	r1, r2, r2, r3
 800074c:	1092      	asrs	r2, r2, #2
 800074e:	17db      	asrs	r3, r3, #31
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	f043 0320 	orr.w	r3, r3, #32
 800075a:	b2db      	uxtb	r3, r3
 800075c:	461a      	mov	r2, r3
 800075e:	210b      	movs	r1, #11
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff02 	bl	800056a <write_register>
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	66666667 	.word	0x66666667

08000774 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8000774:	b5b0      	push	{r4, r5, r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 800077c:	211d      	movs	r1, #29
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff febc 	bl	80004fc <read_register>
 8000784:	4603      	mov	r3, r0
 8000786:	091b      	lsrs	r3, r3, #4
 8000788:	b2db      	uxtb	r3, r3
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2200      	movs	r2, #0
 800078e:	461c      	mov	r4, r3
 8000790:	4615      	mov	r5, r2
 8000792:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8000796:	211e      	movs	r1, #30
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff feaf 	bl	80004fc <read_register>
 800079e:	4603      	mov	r3, r0
 80007a0:	091b      	lsrs	r3, r3, #4
 80007a2:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 80007a4:	2304      	movs	r3, #4
 80007a6:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	2b0a      	cmp	r3, #10
 80007ac:	d908      	bls.n	80007c0 <set_low_data_rate_optimization+0x4c>
 80007ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80007b2:	1fd1      	subs	r1, r2, #7
 80007b4:	430b      	orrs	r3, r1
 80007b6:	d103      	bne.n	80007c0 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 80007b8:	7ffb      	ldrb	r3, [r7, #31]
 80007ba:	f043 0308 	orr.w	r3, r3, #8
 80007be:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 80007c0:	7ffb      	ldrb	r3, [r7, #31]
 80007c2:	461a      	mov	r2, r3
 80007c4:	2126      	movs	r1, #38	; 0x26
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff fecf 	bl	800056a <write_register>
}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bdb0      	pop	{r4, r5, r7, pc}

080007d4 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 80007dc:	2100      	movs	r1, #0
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ff7e 	bl	80006e0 <set_mode>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <lora_mode_receive_single>:

  set_mode(lora, OPMODE_RX_CONTINUOUS);
}

void lora_mode_receive_single(lora_sx1276 *lora)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7d5b      	ldrb	r3, [r3, #21]
 80007f8:	461a      	mov	r2, r3
 80007fa:	210f      	movs	r1, #15
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff feb4 	bl	800056a <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8000802:	22f0      	movs	r2, #240	; 0xf0
 8000804:	2112      	movs	r1, #18
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff feaf 	bl	800056a <write_register>

  set_mode(lora, OPMODE_RX_SINGLE);
 800080c:	2106      	movs	r1, #6
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ff66 	bl	80006e0 <set_mode>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <lora_mode_standby>:

void lora_mode_standby(lora_sx1276 *lora)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8000824:	2101      	movs	r1, #1
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ff5a 	bl	80006e0 <set_mode>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 800083c:	211d      	movs	r1, #29
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff fe5c 	bl	80004fc <read_register>
 8000844:	4603      	mov	r3, r0
 8000846:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	f023 0301 	bic.w	r3, r3, #1
 800084e:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	461a      	mov	r2, r3
 8000854:	211d      	movs	r1, #29
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff fe87 	bl	800056a <write_register>
}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	691b      	ldr	r3, [r3, #16]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d10e      	bne.n	8000896 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	2b0f      	cmp	r3, #15
 800087c:	d901      	bls.n	8000882 <lora_set_tx_power+0x1e>
      level = 15;
 800087e:	230f      	movs	r3, #15
 8000880:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8000882:	78fb      	ldrb	r3, [r7, #3]
 8000884:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000888:	b2db      	uxtb	r3, r3
 800088a:	461a      	mov	r2, r3
 800088c:	2109      	movs	r1, #9
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff fe6b 	bl	800056a <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8000894:	e02e      	b.n	80008f4 <lora_set_tx_power+0x90>
    if (level > 20) {
 8000896:	78fb      	ldrb	r3, [r7, #3]
 8000898:	2b14      	cmp	r3, #20
 800089a:	d901      	bls.n	80008a0 <lora_set_tx_power+0x3c>
      level = 20;
 800089c:	2314      	movs	r3, #20
 800089e:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d801      	bhi.n	80008aa <lora_set_tx_power+0x46>
      level = 2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 80008aa:	78fb      	ldrb	r3, [r7, #3]
 80008ac:	2b11      	cmp	r3, #17
 80008ae:	d90c      	bls.n	80008ca <lora_set_tx_power+0x66>
      level -= 3;
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	3b03      	subs	r3, #3
 80008b4:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80008b6:	2287      	movs	r2, #135	; 0x87
 80008b8:	214d      	movs	r1, #77	; 0x4d
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff fe55 	bl	800056a <write_register>
      set_OCP(lora, 140);
 80008c0:	218c      	movs	r1, #140	; 0x8c
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff ff20 	bl	8000708 <set_OCP>
 80008c8:	e008      	b.n	80008dc <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 80008ca:	2284      	movs	r2, #132	; 0x84
 80008cc:	214d      	movs	r1, #77	; 0x4d
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff fe4b 	bl	800056a <write_register>
      set_OCP(lora, 97);
 80008d4:	2161      	movs	r1, #97	; 0x61
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ff16 	bl	8000708 <set_OCP>
    level -= 2;
 80008dc:	78fb      	ldrb	r3, [r7, #3]
 80008de:	3b02      	subs	r3, #2
 80008e0:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	461a      	mov	r2, r3
 80008ec:	2109      	movs	r1, #9
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff fe3b 	bl	800056a <write_register>
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8000908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	f04f 0100 	mov.w	r1, #0
 8000914:	04d9      	lsls	r1, r3, #19
 8000916:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800091a:	04d0      	lsls	r0, r2, #19
 800091c:	4a19      	ldr	r2, [pc, #100]	; (8000984 <lora_set_frequency+0x88>)
 800091e:	f04f 0300 	mov.w	r3, #0
 8000922:	f7ff fc6d 	bl	8000200 <__aeabi_uldivmod>
 8000926:	4602      	mov	r2, r0
 8000928:	460b      	mov	r3, r1
 800092a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 800092e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000932:	f04f 0200 	mov.w	r2, #0
 8000936:	f04f 0300 	mov.w	r3, #0
 800093a:	0c02      	lsrs	r2, r0, #16
 800093c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000940:	0c0b      	lsrs	r3, r1, #16
 8000942:	b2d3      	uxtb	r3, r2
 8000944:	461a      	mov	r2, r3
 8000946:	2106      	movs	r1, #6
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	f7ff fe0e 	bl	800056a <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 800094e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000952:	f04f 0200 	mov.w	r2, #0
 8000956:	f04f 0300 	mov.w	r3, #0
 800095a:	0a02      	lsrs	r2, r0, #8
 800095c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000960:	0a0b      	lsrs	r3, r1, #8
 8000962:	b2d3      	uxtb	r3, r2
 8000964:	461a      	mov	r2, r3
 8000966:	2107      	movs	r1, #7
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f7ff fdfe 	bl	800056a <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 800096e:	7c3b      	ldrb	r3, [r7, #16]
 8000970:	461a      	mov	r2, r3
 8000972:	2108      	movs	r1, #8
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f7ff fdf8 	bl	800056a <write_register>
}
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	01e84800 	.word	0x01e84800

08000988 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	2b05      	cmp	r3, #5
 8000998:	d802      	bhi.n	80009a0 <lora_set_spreading_factor+0x18>
    sf = 6;
 800099a:	2306      	movs	r3, #6
 800099c:	70fb      	strb	r3, [r7, #3]
 800099e:	e004      	b.n	80009aa <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80009a0:	78fb      	ldrb	r3, [r7, #3]
 80009a2:	2b0c      	cmp	r3, #12
 80009a4:	d901      	bls.n	80009aa <lora_set_spreading_factor+0x22>
    sf = 12;
 80009a6:	230c      	movs	r3, #12
 80009a8:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80009aa:	78fb      	ldrb	r3, [r7, #3]
 80009ac:	2b06      	cmp	r3, #6
 80009ae:	d10a      	bne.n	80009c6 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80009b0:	22c5      	movs	r2, #197	; 0xc5
 80009b2:	2131      	movs	r1, #49	; 0x31
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff fdd8 	bl	800056a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 80009ba:	220c      	movs	r2, #12
 80009bc:	2137      	movs	r1, #55	; 0x37
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff fdd3 	bl	800056a <write_register>
 80009c4:	e009      	b.n	80009da <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 80009c6:	22c3      	movs	r2, #195	; 0xc3
 80009c8:	2131      	movs	r1, #49	; 0x31
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff fdcd 	bl	800056a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 80009d0:	220a      	movs	r2, #10
 80009d2:	2137      	movs	r1, #55	; 0x37
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff fdc8 	bl	800056a <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 80009da:	211e      	movs	r1, #30
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff fd8d 	bl	80004fc <read_register>
 80009e2:	4603      	mov	r3, r0
 80009e4:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 80009e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ea:	f003 030f 	and.w	r3, r3, #15
 80009ee:	b25a      	sxtb	r2, r3
 80009f0:	78fb      	ldrb	r3, [r7, #3]
 80009f2:	011b      	lsls	r3, r3, #4
 80009f4:	b25b      	sxtb	r3, r3
 80009f6:	4313      	orrs	r3, r2
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	461a      	mov	r2, r3
 8000a00:	211e      	movs	r1, #30
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff fdb1 	bl	800056a <write_register>

  set_low_data_rate_optimization(lora);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff feb3 	bl	8000774 <set_low_data_rate_optimization>
}
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	460b      	mov	r3, r1
 8000a20:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8000a22:	887b      	ldrh	r3, [r7, #2]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff fd9b 	bl	800056a <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8000a34:	887b      	ldrh	r3, [r7, #2]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	f003 030f 	and.w	r3, r3, #15
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	461a      	mov	r2, r3
 8000a40:	2121      	movs	r1, #33	; 0x21
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff fd91 	bl	800056a <write_register>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8000a58:	2142      	movs	r1, #66	; 0x42
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff fd4e 	bl	80004fc <read_register>
 8000a60:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b084      	sub	sp, #16
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 8000a72:	2101      	movs	r1, #1
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff fd41 	bl	80004fc <read_register>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	f003 0303 	and.w	r3, r3, #3
 8000a84:	2b03      	cmp	r3, #3
 8000a86:	d101      	bne.n	8000a8c <lora_is_transmitting+0x22>
 8000a88:	2305      	movs	r3, #5
 8000a8a:	e000      	b.n	8000a8e <lora_is_transmitting+0x24>
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	f7ff ffdc 	bl	8000a6a <lora_is_transmitting>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8000ab8:	2305      	movs	r3, #5
 8000aba:	e02a      	b.n	8000b12 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8000abc:	2101      	movs	r1, #1
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff fe0e 	bl	80006e0 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f000 f904 	bl	8000cd2 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	7d1b      	ldrb	r3, [r3, #20]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	210d      	movs	r1, #13
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f7ff fd49 	bl	800056a <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	7d1b      	ldrb	r3, [r3, #20]
 8000adc:	461a      	mov	r2, r3
 8000ade:	210e      	movs	r1, #14
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f7ff fd42 	bl	800056a <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	2122      	movs	r1, #34	; 0x22
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f7ff fd3c 	bl	800056a <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8000af2:	79bb      	ldrb	r3, [r7, #6]
 8000af4:	79fa      	ldrb	r2, [r7, #7]
 8000af6:	68b9      	ldr	r1, [r7, #8]
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f7ff fd6a 	bl	80005d2 <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8000afe:	79bb      	ldrb	r3, [r7, #6]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d101      	bne.n	8000b08 <lora_send_packet_base+0x72>
    return LORA_OK;
 8000b04:	2300      	movs	r3, #0
 8000b06:	e004      	b.n	8000b12 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8000b08:	2103      	movs	r1, #3
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f7ff fde8 	bl	80006e0 <set_mode>
  return LORA_OK;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	4613      	mov	r3, r2
 8000b26:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8000b28:	79fa      	ldrb	r2, [r7, #7]
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f7ff ffb1 	bl	8000a96 <lora_send_packet_base>
 8000b34:	4603      	mov	r3, r0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b084      	sub	sp, #16
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 8000b46:	2112      	movs	r1, #18
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff fcd7 	bl	80004fc <read_register>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b58:	b2db      	uxtb	r3, r3
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <lora_pending_packet_length>:

uint8_t lora_pending_packet_length(lora_sx1276 *lora)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b084      	sub	sp, #16
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  uint8_t len;

  // Query for current header mode - implicit / explicit
  uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 8000b6a:	211d      	movs	r1, #29
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff fcc5 	bl	80004fc <read_register>
 8000b72:	4603      	mov	r3, r0
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	73bb      	strb	r3, [r7, #14]
  if (implicit) {
 8000b7a:	7bbb      	ldrb	r3, [r7, #14]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d006      	beq.n	8000b8e <lora_pending_packet_length+0x2c>
    len = read_register(lora, REG_PAYLOAD_LENGTH);
 8000b80:	2122      	movs	r1, #34	; 0x22
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff fcba 	bl	80004fc <read_register>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	73fb      	strb	r3, [r7, #15]
 8000b8c:	e005      	b.n	8000b9a <lora_pending_packet_length+0x38>
  } else {
    len = read_register(lora, REG_RX_NB_BYTES);
 8000b8e:	2113      	movs	r1, #19
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff fcb3 	bl	80004fc <read_register>
 8000b96:	4603      	mov	r3, r0
 8000b98:	73fb      	strb	r3, [r7, #15]
  }

  return len;
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <lora_receive_packet_base>:


static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 8000bb4:	2306      	movs	r3, #6
 8000bb6:	75fb      	strb	r3, [r7, #23]
  uint8_t len = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	75bb      	strb	r3, [r7, #22]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 8000bbc:	2112      	movs	r1, #18
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f7ff fc9c 	bl	80004fc <read_register>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	757b      	strb	r3, [r7, #21]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8000bc8:	22f0      	movs	r2, #240	; 0xf0
 8000bca:	2112      	movs	r1, #18
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f7ff fccc 	bl	800056a <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 8000bd2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	da02      	bge.n	8000be0 <lora_receive_packet_base+0x3c>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	75fb      	strb	r3, [r7, #23]
    goto done;
 8000bde:	e030      	b.n	8000c42 <lora_receive_packet_base+0x9e>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 8000be0:	7d7b      	ldrb	r3, [r7, #21]
 8000be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d02a      	beq.n	8000c40 <lora_receive_packet_base+0x9c>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 8000bea:	7d7b      	ldrb	r3, [r7, #21]
 8000bec:	f003 0310 	and.w	r3, r3, #16
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <lora_receive_packet_base+0x56>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	75fb      	strb	r3, [r7, #23]
      goto done;
 8000bf8:	e023      	b.n	8000c42 <lora_receive_packet_base+0x9e>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 8000bfa:	7d7b      	ldrb	r3, [r7, #21]
 8000bfc:	f003 0320 	and.w	r3, r3, #32
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <lora_receive_packet_base+0x66>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	75fb      	strb	r3, [r7, #23]
      goto done;
 8000c08:	e01b      	b.n	8000c42 <lora_receive_packet_base+0x9e>
    }
    // Query for current header mode - implicit / explicit
    len = lora_pending_packet_length(lora);
 8000c0a:	68f8      	ldr	r0, [r7, #12]
 8000c0c:	f7ff ffa9 	bl	8000b62 <lora_pending_packet_length>
 8000c10:	4603      	mov	r3, r0
 8000c12:	75bb      	strb	r3, [r7, #22]
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 8000c14:	2110      	movs	r1, #16
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f7ff fc70 	bl	80004fc <read_register>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	753b      	strb	r3, [r7, #20]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 8000c20:	7d3b      	ldrb	r3, [r7, #20]
 8000c22:	461a      	mov	r2, r3
 8000c24:	210d      	movs	r1, #13
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	f7ff fc9f 	bl	800056a <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 8000c2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c30:	7dba      	ldrb	r2, [r7, #22]
 8000c32:	68b9      	ldr	r1, [r7, #8]
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f7ff fd0e 	bl	8000656 <read_fifo>
    res = LORA_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	75fb      	strb	r3, [r7, #23]
 8000c3e:	e000      	b.n	8000c42 <lora_receive_packet_base+0x9e>
  }

done:
 8000c40:	bf00      	nop
  if (error) {
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <lora_receive_packet_base+0xaa>
    *error = res;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	7dfa      	ldrb	r2, [r7, #23]
 8000c4c:	701a      	strb	r2, [r3, #0]
  }

  return len;
 8000c4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af02      	add	r7, sp, #8
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	4613      	mov	r3, r2
 8000c66:	71fb      	strb	r3, [r7, #7]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 8000c68:	79fa      	ldrb	r2, [r7, #7]
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f7ff ff96 	bl	8000ba4 <lora_receive_packet_base>
 8000c78:	4603      	mov	r3, r0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 8000c96:	e00b      	b.n	8000cb0 <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f7ff ff50 	bl	8000b3e <lora_is_packet_available>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10a      	bne.n	8000cba <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f001 fc01 	bl	80024ac <HAL_Delay>
    elapsed++;
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d3ef      	bcc.n	8000c98 <lora_receive_packet_blocking+0x16>
 8000cb8:	e000      	b.n	8000cbc <lora_receive_packet_blocking+0x3a>
      break;
 8000cba:	bf00      	nop
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 8000cbc:	79fa      	ldrb	r2, [r7, #7]
 8000cbe:	6a3b      	ldr	r3, [r7, #32]
 8000cc0:	68b9      	ldr	r1, [r7, #8]
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f7ff ffc8 	bl	8000c58 <lora_receive_packet>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8000cda:	2208      	movs	r2, #8
 8000cdc:	2112      	movs	r1, #18
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fc43 	bl	800056a <write_register>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	887a      	ldrh	r2, [r7, #2]
 8000d0a:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8000d0c:	6a3a      	ldr	r2, [r7, #32]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2201      	movs	r2, #1
 8000d16:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2200      	movs	r2, #0
 8000d22:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d2a:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f7ff fe8f 	bl	8000a50 <lora_version>
 8000d32:	4603      	mov	r3, r0
 8000d34:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
 8000d38:	2b12      	cmp	r3, #18
 8000d3a:	d001      	beq.n	8000d40 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	e031      	b.n	8000da4 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000d40:	68f8      	ldr	r0, [r7, #12]
 8000d42:	f7ff fd47 	bl	80007d4 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f7ff fd44 	bl	80007d4 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000d4c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	f7ff fdd3 	bl	80008fc <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000d56:	2107      	movs	r1, #7
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	f7ff fe15 	bl	8000988 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000d5e:	210a      	movs	r1, #10
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f7ff fe58 	bl	8000a16 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000d66:	68f8      	ldr	r0, [r7, #12]
 8000d68:	f7ff fd64 	bl	8000834 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000d6c:	210c      	movs	r1, #12
 8000d6e:	68f8      	ldr	r0, [r7, #12]
 8000d70:	f7ff fbc4 	bl	80004fc <read_register>
 8000d74:	4603      	mov	r3, r0
 8000d76:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000d78:	7dbb      	ldrb	r3, [r7, #22]
 8000d7a:	f043 0303 	orr.w	r3, r3, #3
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	461a      	mov	r2, r3
 8000d82:	210c      	movs	r1, #12
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	f7ff fbf0 	bl	800056a <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	2126      	movs	r1, #38	; 0x26
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f7ff fbeb 	bl	800056a <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000d94:	2111      	movs	r1, #17
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f7ff fd64 	bl	8000864 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f7ff fd3d 	bl	800081c <lora_mode_standby>

  return LORA_OK;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	0000      	movs	r0, r0
	...

08000db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b09a      	sub	sp, #104	; 0x68
 8000db4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db6:	f001 fb04 	bl	80023c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dba:	f000 f88b 	bl	8000ed4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000dbe:	f000 f8db 	bl	8000f78 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc2:	f000 fd8b 	bl	80018dc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dc6:	f000 f909 	bl	8000fdc <MX_ADC1_Init>
  MX_COMP1_Init();
 8000dca:	f000 f96b 	bl	80010a4 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000dce:	f000 f997 	bl	8001100 <MX_COMP2_Init>
  MX_SAI1_Init();
 8000dd2:	f000 f9c1 	bl	8001158 <MX_SAI1_Init>
  MX_SAI2_Init();
 8000dd6:	f000 fa57 	bl	8001288 <MX_SAI2_Init>
  MX_TIM1_Init();
 8000dda:	f000 fafb 	bl	80013d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000dde:	f000 fbc9 	bl	8001574 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000de2:	f000 fc2b 	bl	800163c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000de6:	f000 fc8f 	bl	8001708 <MX_TIM4_Init>
  MX_TIM15_Init();
 8000dea:	f000 fcf3 	bl	80017d4 <MX_TIM15_Init>
  MX_SPI2_Init();
 8000dee:	f000 fab3 	bl	8001358 <MX_SPI2_Init>
    // SX1276 compatible module connected to SPI1, NSS pin connected to GPIO with label LORA_NSS
//    uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
//    if (res != LORA_OK) {
//      // Initialization failed
//    }
  uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 8000df2:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000df6:	a330      	add	r3, pc, #192	; (adr r3, 8000eb8 <main+0x108>)
 8000df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfc:	e9cd 2300 	strd	r2, r3, [sp]
 8000e00:	2301      	movs	r3, #1
 8000e02:	4a2f      	ldr	r2, [pc, #188]	; (8000ec0 <main+0x110>)
 8000e04:	492f      	ldr	r1, [pc, #188]	; (8000ec4 <main+0x114>)
 8000e06:	f7ff ff71 	bl	8000cec <lora_init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 while (res != LORA_OK) {
 8000e10:	e011      	b.n	8000e36 <main+0x86>
   // Initialization failed
	 HAL_Delay(100);
 8000e12:	2064      	movs	r0, #100	; 0x64
 8000e14:	f001 fb4a 	bl	80024ac <HAL_Delay>
	 uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 8000e18:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000e1c:	a326      	add	r3, pc, #152	; (adr r3, 8000eb8 <main+0x108>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	e9cd 2300 	strd	r2, r3, [sp]
 8000e26:	2301      	movs	r3, #1
 8000e28:	4a25      	ldr	r2, [pc, #148]	; (8000ec0 <main+0x110>)
 8000e2a:	4926      	ldr	r1, [pc, #152]	; (8000ec4 <main+0x114>)
 8000e2c:	f7ff ff5e 	bl	8000cec <lora_init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 while (res != LORA_OK) {
 8000e36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1e9      	bne.n	8000e12 <main+0x62>
 // SENDING
  struct arm_to_base outputdata;
  struct gps_data gps;
  struct base_to_arm buzzer;

  gps.longitude = 1.2345;
 8000e3e:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <main+0x118>)
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  gps.latitude = 5.4321;
 8000e42:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <main+0x11c>)
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  outputdata.data = gps;
 8000e46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e52:	e883 0003 	stmia.w	r3, {r0, r1}
  outputdata.heartrate = 98.54;
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <main+0x120>)
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
  outputdata.steps = 20000;
 8000e5a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000e5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
//	  buffer[len] = 0; // null terminate string to print it
//	  res = lora_send_packet(&lora, &outgoingdata, sizeof(outgoingdata));

	  // SENDING
//	  res = lora_send_packet(&lora, (uint8_t *)"Jacob is cool", 13);
	  res = lora_send_packet(&lora, &outputdata, sizeof(outputdata));
 8000e60:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000e64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e68:	2210      	movs	r2, #16
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fe55 	bl	8000b1a <lora_send_packet>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  if (res != LORA_OK) {
		// Send failed
	  }
//	  HAL_Delay(5000);
	  // buzz is only 1 byte. This should limit time listening
	  lora_mode_receive_single(&lora);
 8000e76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fcb6 	bl	80007ec <lora_mode_receive_single>
	  len = lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 10000, &res);
 8000e80:	1d39      	adds	r1, r7, #4
 8000e82:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000e86:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e90:	2220      	movs	r2, #32
 8000e92:	f7ff fef6 	bl	8000c82 <lora_receive_packet_blocking>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000e9c:	793b      	ldrb	r3, [r7, #4]
	  memcpy(&buzzer, &buffer, sizeof(buzzer));
 8000e9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  buffer[len] = 0; // Marking end of packet, idk if this is really necessary
 8000ea2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ea6:	3360      	adds	r3, #96	; 0x60
 8000ea8:	443b      	add	r3, r7
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f803 2c5c 	strb.w	r2, [r3, #-92]
  {
 8000eb0:	e7d6      	b.n	8000e60 <main+0xb0>
 8000eb2:	bf00      	nop
 8000eb4:	f3af 8000 	nop.w
 8000eb8:	36e55840 	.word	0x36e55840
 8000ebc:	00000000 	.word	0x00000000
 8000ec0:	48000c00 	.word	0x48000c00
 8000ec4:	200002a4 	.word	0x200002a4
 8000ec8:	3f9e0419 	.word	0x3f9e0419
 8000ecc:	40add3c3 	.word	0x40add3c3
 8000ed0:	42c5147b 	.word	0x42c5147b

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b096      	sub	sp, #88	; 0x58
 8000ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	2244      	movs	r2, #68	; 0x44
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f008 fa2a 	bl	800933c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee8:	463b      	mov	r3, r7
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ef6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000efa:	f002 fedf 	bl	8003cbc <HAL_PWREx_ControlVoltageScaling>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f04:	f000 fe42 	bl	8001b8c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f08:	2310      	movs	r3, #16
 8000f0a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f14:	2360      	movs	r3, #96	; 0x60
 8000f16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000f24:	2310      	movs	r3, #16
 8000f26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f002 ff73 	bl	8003e24 <HAL_RCC_OscConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f44:	f000 fe22 	bl	8001b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f48:	230f      	movs	r3, #15
 8000f4a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2101      	movs	r1, #1
 8000f60:	4618      	mov	r0, r3
 8000f62:	f003 fb79 	bl	8004658 <HAL_RCC_ClockConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f6c:	f000 fe0e 	bl	8001b8c <Error_Handler>
  }
}
 8000f70:	bf00      	nop
 8000f72:	3758      	adds	r7, #88	; 0x58
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0a6      	sub	sp, #152	; 0x98
 8000f7c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2294      	movs	r2, #148	; 0x94
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f008 f9d9 	bl	800933c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8000f8a:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8000f8e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000fa8:	2318      	movs	r3, #24
 8000faa:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <PeriphCommonClock_Config+0x60>)
 8000fba:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f003 fe08 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000fca:	f000 fddf 	bl	8001b8c <Error_Handler>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3798      	adds	r7, #152	; 0x98
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	01010000 	.word	0x01010000

08000fdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ff2:	4b29      	ldr	r3, [pc, #164]	; (8001098 <MX_ADC1_Init+0xbc>)
 8000ff4:	4a29      	ldr	r2, [pc, #164]	; (800109c <MX_ADC1_Init+0xc0>)
 8000ff6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <MX_ADC1_Init+0xbc>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ffe:	4b26      	ldr	r3, [pc, #152]	; (8001098 <MX_ADC1_Init+0xbc>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001004:	4b24      	ldr	r3, [pc, #144]	; (8001098 <MX_ADC1_Init+0xbc>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800100a:	4b23      	ldr	r3, [pc, #140]	; (8001098 <MX_ADC1_Init+0xbc>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001010:	4b21      	ldr	r3, [pc, #132]	; (8001098 <MX_ADC1_Init+0xbc>)
 8001012:	2204      	movs	r2, #4
 8001014:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <MX_ADC1_Init+0xbc>)
 8001018:	2200      	movs	r2, #0
 800101a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <MX_ADC1_Init+0xbc>)
 800101e:	2200      	movs	r2, #0
 8001020:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <MX_ADC1_Init+0xbc>)
 8001024:	2201      	movs	r2, #1
 8001026:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <MX_ADC1_Init+0xbc>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001030:	4b19      	ldr	r3, [pc, #100]	; (8001098 <MX_ADC1_Init+0xbc>)
 8001032:	2200      	movs	r2, #0
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <MX_ADC1_Init+0xbc>)
 8001038:	2200      	movs	r2, #0
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <MX_ADC1_Init+0xbc>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_ADC1_Init+0xbc>)
 8001046:	2200      	movs	r2, #0
 8001048:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <MX_ADC1_Init+0xbc>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001052:	4811      	ldr	r0, [pc, #68]	; (8001098 <MX_ADC1_Init+0xbc>)
 8001054:	f001 fbee 	bl	8002834 <HAL_ADC_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800105e:	f000 fd95 	bl	8001b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_ADC1_Init+0xc4>)
 8001064:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001066:	2306      	movs	r3, #6
 8001068:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800106e:	237f      	movs	r3, #127	; 0x7f
 8001070:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001072:	2304      	movs	r3, #4
 8001074:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107a:	463b      	mov	r3, r7
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	; (8001098 <MX_ADC1_Init+0xbc>)
 8001080:	f001 fd1e 	bl	8002ac0 <HAL_ADC_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800108a:	f000 fd7f 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000028 	.word	0x20000028
 800109c:	50040000 	.word	0x50040000
 80010a0:	04300002 	.word	0x04300002

080010a4 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_COMP1_Init+0x50>)
 80010aa:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <MX_COMP1_Init+0x54>)
 80010ac:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_COMP1_Init+0x50>)
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_COMP1_Init+0x58>)
 80010b2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_COMP1_Init+0x50>)
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_COMP1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_COMP1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <MX_COMP1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_COMP1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <MX_COMP1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_COMP1_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_COMP1_Init+0x50>)
 80010e0:	f002 f992 	bl	8003408 <HAL_COMP_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 80010ea:	f000 fd4f 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000090 	.word	0x20000090
 80010f8:	40010200 	.word	0x40010200
 80010fc:	00800030 	.word	0x00800030

08001100 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_COMP2_Init+0x50>)
 8001106:	4a13      	ldr	r2, [pc, #76]	; (8001154 <MX_COMP2_Init+0x54>)
 8001108:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_COMP2_Init+0x50>)
 800110c:	2270      	movs	r2, #112	; 0x70
 800110e:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_COMP2_Init+0x50>)
 8001112:	2280      	movs	r2, #128	; 0x80
 8001114:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_COMP2_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_COMP2_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <MX_COMP2_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_COMP2_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <MX_COMP2_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_COMP2_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_COMP2_Init+0x50>)
 800113c:	f002 f964 	bl	8003408 <HAL_COMP_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8001146:	f000 fd21 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200000bc 	.word	0x200000bc
 8001154:	40010204 	.word	0x40010204

08001158 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 800115c:	4b45      	ldr	r3, [pc, #276]	; (8001274 <MX_SAI1_Init+0x11c>)
 800115e:	4a46      	ldr	r2, [pc, #280]	; (8001278 <MX_SAI1_Init+0x120>)
 8001160:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001162:	4b44      	ldr	r3, [pc, #272]	; (8001274 <MX_SAI1_Init+0x11c>)
 8001164:	2200      	movs	r2, #0
 8001166:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001168:	4b42      	ldr	r3, [pc, #264]	; (8001274 <MX_SAI1_Init+0x11c>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800116e:	4b41      	ldr	r3, [pc, #260]	; (8001274 <MX_SAI1_Init+0x11c>)
 8001170:	2240      	movs	r2, #64	; 0x40
 8001172:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001174:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <MX_SAI1_Init+0x11c>)
 8001176:	2200      	movs	r2, #0
 8001178:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800117a:	4b3e      	ldr	r3, [pc, #248]	; (8001274 <MX_SAI1_Init+0x11c>)
 800117c:	2200      	movs	r2, #0
 800117e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001180:	4b3c      	ldr	r3, [pc, #240]	; (8001274 <MX_SAI1_Init+0x11c>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001186:	4b3b      	ldr	r3, [pc, #236]	; (8001274 <MX_SAI1_Init+0x11c>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800118c:	4b39      	ldr	r3, [pc, #228]	; (8001274 <MX_SAI1_Init+0x11c>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001192:	4b38      	ldr	r3, [pc, #224]	; (8001274 <MX_SAI1_Init+0x11c>)
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001198:	4b36      	ldr	r3, [pc, #216]	; (8001274 <MX_SAI1_Init+0x11c>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800119e:	4b35      	ldr	r3, [pc, #212]	; (8001274 <MX_SAI1_Init+0x11c>)
 80011a0:	4a36      	ldr	r2, [pc, #216]	; (800127c <MX_SAI1_Init+0x124>)
 80011a2:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80011a4:	4b33      	ldr	r3, [pc, #204]	; (8001274 <MX_SAI1_Init+0x11c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80011aa:	4b32      	ldr	r3, [pc, #200]	; (8001274 <MX_SAI1_Init+0x11c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80011b0:	4b30      	ldr	r3, [pc, #192]	; (8001274 <MX_SAI1_Init+0x11c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011b6:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <MX_SAI1_Init+0x11c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 80011bc:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <MX_SAI1_Init+0x11c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 80011c4:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <MX_SAI1_Init+0x11c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80011ca:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <MX_SAI1_Init+0x11c>)
 80011cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <MX_SAI1_Init+0x11c>)
 80011d4:	2208      	movs	r2, #8
 80011d6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80011d8:	4b26      	ldr	r3, [pc, #152]	; (8001274 <MX_SAI1_Init+0x11c>)
 80011da:	2201      	movs	r2, #1
 80011dc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80011de:	4b25      	ldr	r3, [pc, #148]	; (8001274 <MX_SAI1_Init+0x11c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80011e4:	4b23      	ldr	r3, [pc, #140]	; (8001274 <MX_SAI1_Init+0x11c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <MX_SAI1_Init+0x11c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <MX_SAI1_Init+0x11c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <MX_SAI1_Init+0x11c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_SAI1_Init+0x11c>)
 80011fe:	2201      	movs	r2, #1
 8001200:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <MX_SAI1_Init+0x11c>)
 8001204:	2200      	movs	r2, #0
 8001206:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001208:	481a      	ldr	r0, [pc, #104]	; (8001274 <MX_SAI1_Init+0x11c>)
 800120a:	f005 fa61 	bl	80066d0 <HAL_SAI_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8001214:	f000 fcba 	bl	8001b8c <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_SAI1_Init+0x128>)
 800121a:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <MX_SAI1_Init+0x12c>)
 800121c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <MX_SAI1_Init+0x128>)
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_SAI1_Init+0x128>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <MX_SAI1_Init+0x128>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_SAI1_Init+0x128>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_SAI1_Init+0x128>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <MX_SAI1_Init+0x128>)
 800123e:	4a0f      	ldr	r2, [pc, #60]	; (800127c <MX_SAI1_Init+0x124>)
 8001240:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_SAI1_Init+0x128>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <MX_SAI1_Init+0x128>)
 800124a:	2200      	movs	r2, #0
 800124c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_SAI1_Init+0x128>)
 8001250:	2200      	movs	r2, #0
 8001252:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_SAI1_Init+0x128>)
 8001256:	2200      	movs	r2, #0
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800125a:	2302      	movs	r3, #2
 800125c:	2200      	movs	r2, #0
 800125e:	2100      	movs	r1, #0
 8001260:	4807      	ldr	r0, [pc, #28]	; (8001280 <MX_SAI1_Init+0x128>)
 8001262:	f005 fa03 	bl	800666c <HAL_SAI_InitProtocol>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 800126c:	f000 fc8e 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200000e8 	.word	0x200000e8
 8001278:	40015424 	.word	0x40015424
 800127c:	0002ee00 	.word	0x0002ee00
 8001280:	2000017c 	.word	0x2000017c
 8001284:	40015404 	.word	0x40015404

08001288 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800128c:	4b2f      	ldr	r3, [pc, #188]	; (800134c <MX_SAI2_Init+0xc4>)
 800128e:	4a30      	ldr	r2, [pc, #192]	; (8001350 <MX_SAI2_Init+0xc8>)
 8001290:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001292:	4b2e      	ldr	r3, [pc, #184]	; (800134c <MX_SAI2_Init+0xc4>)
 8001294:	2200      	movs	r2, #0
 8001296:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001298:	4b2c      	ldr	r3, [pc, #176]	; (800134c <MX_SAI2_Init+0xc4>)
 800129a:	2200      	movs	r2, #0
 800129c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800129e:	4b2b      	ldr	r3, [pc, #172]	; (800134c <MX_SAI2_Init+0xc4>)
 80012a0:	2240      	movs	r2, #64	; 0x40
 80012a2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80012a4:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_SAI2_Init+0xc4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80012aa:	4b28      	ldr	r3, [pc, #160]	; (800134c <MX_SAI2_Init+0xc4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80012b0:	4b26      	ldr	r3, [pc, #152]	; (800134c <MX_SAI2_Init+0xc4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80012b6:	4b25      	ldr	r3, [pc, #148]	; (800134c <MX_SAI2_Init+0xc4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <MX_SAI2_Init+0xc4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80012c2:	4b22      	ldr	r3, [pc, #136]	; (800134c <MX_SAI2_Init+0xc4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <MX_SAI2_Init+0xc4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_SAI2_Init+0xc4>)
 80012d0:	4a20      	ldr	r2, [pc, #128]	; (8001354 <MX_SAI2_Init+0xcc>)
 80012d2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_SAI2_Init+0xc4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <MX_SAI2_Init+0xc4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_SAI2_Init+0xc4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <MX_SAI2_Init+0xc4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_SAI2_Init+0xc4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <MX_SAI2_Init+0xc4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_SAI2_Init+0xc4>)
 80012fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001300:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_SAI2_Init+0xc4>)
 8001304:	2208      	movs	r2, #8
 8001306:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <MX_SAI2_Init+0xc4>)
 800130a:	2201      	movs	r2, #1
 800130c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_SAI2_Init+0xc4>)
 8001310:	2200      	movs	r2, #0
 8001312:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <MX_SAI2_Init+0xc4>)
 8001316:	2200      	movs	r2, #0
 8001318:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_SAI2_Init+0xc4>)
 800131c:	2200      	movs	r2, #0
 800131e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <MX_SAI2_Init+0xc4>)
 8001322:	2200      	movs	r2, #0
 8001324:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_SAI2_Init+0xc4>)
 8001328:	2200      	movs	r2, #0
 800132a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <MX_SAI2_Init+0xc4>)
 800132e:	2201      	movs	r2, #1
 8001330:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_SAI2_Init+0xc4>)
 8001334:	2200      	movs	r2, #0
 8001336:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_SAI2_Init+0xc4>)
 800133a:	f005 f9c9 	bl	80066d0 <HAL_SAI_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8001344:	f000 fc22 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000210 	.word	0x20000210
 8001350:	40015804 	.word	0x40015804
 8001354:	0002ee00 	.word	0x0002ee00

08001358 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_SPI2_Init+0x74>)
 800135e:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <MX_SPI2_Init+0x78>)
 8001360:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_SPI2_Init+0x74>)
 8001364:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001368:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_SPI2_Init+0x74>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_SPI2_Init+0x74>)
 8001372:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001376:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_SPI2_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_SPI2_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_SPI2_Init+0x74>)
 8001386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800138a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_SPI2_Init+0x74>)
 800138e:	2218      	movs	r2, #24
 8001390:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_SPI2_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_SPI2_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_SPI2_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_SPI2_Init+0x74>)
 80013a6:	2207      	movs	r2, #7
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_SPI2_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_SPI2_Init+0x74>)
 80013b2:	2208      	movs	r2, #8
 80013b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_SPI2_Init+0x74>)
 80013b8:	f005 fcd6 	bl	8006d68 <HAL_SPI_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80013c2:	f000 fbe3 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200002a4 	.word	0x200002a4
 80013d0:	40003800 	.word	0x40003800

080013d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b098      	sub	sp, #96	; 0x60
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80013e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001406:	463b      	mov	r3, r7
 8001408:	222c      	movs	r2, #44	; 0x2c
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f007 ff95 	bl	800933c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001412:	4b56      	ldr	r3, [pc, #344]	; (800156c <MX_TIM1_Init+0x198>)
 8001414:	4a56      	ldr	r2, [pc, #344]	; (8001570 <MX_TIM1_Init+0x19c>)
 8001416:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001418:	4b54      	ldr	r3, [pc, #336]	; (800156c <MX_TIM1_Init+0x198>)
 800141a:	2200      	movs	r2, #0
 800141c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141e:	4b53      	ldr	r3, [pc, #332]	; (800156c <MX_TIM1_Init+0x198>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001424:	4b51      	ldr	r3, [pc, #324]	; (800156c <MX_TIM1_Init+0x198>)
 8001426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800142a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142c:	4b4f      	ldr	r3, [pc, #316]	; (800156c <MX_TIM1_Init+0x198>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001432:	4b4e      	ldr	r3, [pc, #312]	; (800156c <MX_TIM1_Init+0x198>)
 8001434:	2200      	movs	r2, #0
 8001436:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001438:	4b4c      	ldr	r3, [pc, #304]	; (800156c <MX_TIM1_Init+0x198>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800143e:	484b      	ldr	r0, [pc, #300]	; (800156c <MX_TIM1_Init+0x198>)
 8001440:	f007 f8d4 	bl	80085ec <HAL_TIM_PWM_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800144a:	f000 fb9f 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800145a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800145e:	4619      	mov	r1, r3
 8001460:	4842      	ldr	r0, [pc, #264]	; (800156c <MX_TIM1_Init+0x198>)
 8001462:	f007 fd9f 	bl	8008fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800146c:	f000 fb8e 	bl	8001b8c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001470:	2301      	movs	r3, #1
 8001472:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001474:	2301      	movs	r3, #1
 8001476:	64fb      	str	r3, [r7, #76]	; 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001478:	2300      	movs	r3, #0
 800147a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800147c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001480:	461a      	mov	r2, r3
 8001482:	2101      	movs	r1, #1
 8001484:	4839      	ldr	r0, [pc, #228]	; (800156c <MX_TIM1_Init+0x198>)
 8001486:	f007 fe93 	bl	80091b0 <HAL_TIMEx_ConfigBreakInput>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001490:	f000 fb7c 	bl	8001b8c <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001494:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001498:	461a      	mov	r2, r3
 800149a:	2102      	movs	r1, #2
 800149c:	4833      	ldr	r0, [pc, #204]	; (800156c <MX_TIM1_Init+0x198>)
 800149e:	f007 fe87 	bl	80091b0 <HAL_TIMEx_ConfigBreakInput>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80014a8:	f000 fb70 	bl	8001b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ac:	2360      	movs	r3, #96	; 0x60
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b4:	2300      	movs	r3, #0
 80014b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014b8:	2300      	movs	r3, #0
 80014ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014c0:	2300      	movs	r3, #0
 80014c2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014cc:	2200      	movs	r2, #0
 80014ce:	4619      	mov	r1, r3
 80014d0:	4826      	ldr	r0, [pc, #152]	; (800156c <MX_TIM1_Init+0x198>)
 80014d2:	f007 f8e3 	bl	800869c <HAL_TIM_PWM_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80014dc:	f000 fb56 	bl	8001b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e4:	2204      	movs	r2, #4
 80014e6:	4619      	mov	r1, r3
 80014e8:	4820      	ldr	r0, [pc, #128]	; (800156c <MX_TIM1_Init+0x198>)
 80014ea:	f007 f8d7 	bl	800869c <HAL_TIM_PWM_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80014f4:	f000 fb4a 	bl	8001b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014fc:	2208      	movs	r2, #8
 80014fe:	4619      	mov	r1, r3
 8001500:	481a      	ldr	r0, [pc, #104]	; (800156c <MX_TIM1_Init+0x198>)
 8001502:	f007 f8cb 	bl	800869c <HAL_TIM_PWM_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 800150c:	f000 fb3e 	bl	8001b8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001510:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001514:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001528:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800152a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800152e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001534:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001538:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800153a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800153e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	4619      	mov	r1, r3
 800154c:	4807      	ldr	r0, [pc, #28]	; (800156c <MX_TIM1_Init+0x198>)
 800154e:	f007 fdb1 	bl	80090b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001558:	f000 fb18 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800155c:	4803      	ldr	r0, [pc, #12]	; (800156c <MX_TIM1_Init+0x198>)
 800155e:	f000 fd07 	bl	8001f70 <HAL_TIM_MspPostInit>

}
 8001562:	bf00      	nop
 8001564:	3760      	adds	r7, #96	; 0x60
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000308 	.word	0x20000308
 8001570:	40012c00 	.word	0x40012c00

08001574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001586:	463b      	mov	r3, r7
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
 8001594:	615a      	str	r2, [r3, #20]
 8001596:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <MX_TIM2_Init+0xc4>)
 800159a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800159e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015a0:	4b25      	ldr	r3, [pc, #148]	; (8001638 <MX_TIM2_Init+0xc4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a6:	4b24      	ldr	r3, [pc, #144]	; (8001638 <MX_TIM2_Init+0xc4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015ac:	4b22      	ldr	r3, [pc, #136]	; (8001638 <MX_TIM2_Init+0xc4>)
 80015ae:	f04f 32ff 	mov.w	r2, #4294967295
 80015b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b4:	4b20      	ldr	r3, [pc, #128]	; (8001638 <MX_TIM2_Init+0xc4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ba:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <MX_TIM2_Init+0xc4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015c0:	481d      	ldr	r0, [pc, #116]	; (8001638 <MX_TIM2_Init+0xc4>)
 80015c2:	f007 f813 	bl	80085ec <HAL_TIM_PWM_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80015cc:	f000 fade 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	4816      	ldr	r0, [pc, #88]	; (8001638 <MX_TIM2_Init+0xc4>)
 80015e0:	f007 fce0 	bl	8008fa4 <HAL_TIMEx_MasterConfigSynchronization>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80015ea:	f000 facf 	bl	8001b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ee:	2360      	movs	r3, #96	; 0x60
 80015f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015fe:	463b      	mov	r3, r7
 8001600:	2200      	movs	r2, #0
 8001602:	4619      	mov	r1, r3
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <MX_TIM2_Init+0xc4>)
 8001606:	f007 f849 	bl	800869c <HAL_TIM_PWM_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001610:	f000 fabc 	bl	8001b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	2208      	movs	r2, #8
 8001618:	4619      	mov	r1, r3
 800161a:	4807      	ldr	r0, [pc, #28]	; (8001638 <MX_TIM2_Init+0xc4>)
 800161c:	f007 f83e 	bl	800869c <HAL_TIM_PWM_ConfigChannel>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001626:	f000 fab1 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800162a:	4803      	ldr	r0, [pc, #12]	; (8001638 <MX_TIM2_Init+0xc4>)
 800162c:	f000 fca0 	bl	8001f70 <HAL_TIM_MspPostInit>

}
 8001630:	bf00      	nop
 8001632:	3728      	adds	r7, #40	; 0x28
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000354 	.word	0x20000354

0800163c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001642:	f107 031c 	add.w	r3, r7, #28
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164e:	463b      	mov	r3, r7
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
 800165c:	615a      	str	r2, [r3, #20]
 800165e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001660:	4b27      	ldr	r3, [pc, #156]	; (8001700 <MX_TIM3_Init+0xc4>)
 8001662:	4a28      	ldr	r2, [pc, #160]	; (8001704 <MX_TIM3_Init+0xc8>)
 8001664:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001666:	4b26      	ldr	r3, [pc, #152]	; (8001700 <MX_TIM3_Init+0xc4>)
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b24      	ldr	r3, [pc, #144]	; (8001700 <MX_TIM3_Init+0xc4>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001672:	4b23      	ldr	r3, [pc, #140]	; (8001700 <MX_TIM3_Init+0xc4>)
 8001674:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001678:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <MX_TIM3_Init+0xc4>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <MX_TIM3_Init+0xc4>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001686:	481e      	ldr	r0, [pc, #120]	; (8001700 <MX_TIM3_Init+0xc4>)
 8001688:	f006 ffb0 	bl	80085ec <HAL_TIM_PWM_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001692:	f000 fa7b 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	4816      	ldr	r0, [pc, #88]	; (8001700 <MX_TIM3_Init+0xc4>)
 80016a6:	f007 fc7d 	bl	8008fa4 <HAL_TIMEx_MasterConfigSynchronization>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80016b0:	f000 fa6c 	bl	8001b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b4:	2360      	movs	r3, #96	; 0x60
 80016b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016bc:	2300      	movs	r3, #0
 80016be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016c4:	463b      	mov	r3, r7
 80016c6:	2204      	movs	r2, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	480d      	ldr	r0, [pc, #52]	; (8001700 <MX_TIM3_Init+0xc4>)
 80016cc:	f006 ffe6 	bl	800869c <HAL_TIM_PWM_ConfigChannel>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80016d6:	f000 fa59 	bl	8001b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016da:	463b      	mov	r3, r7
 80016dc:	2208      	movs	r2, #8
 80016de:	4619      	mov	r1, r3
 80016e0:	4807      	ldr	r0, [pc, #28]	; (8001700 <MX_TIM3_Init+0xc4>)
 80016e2:	f006 ffdb 	bl	800869c <HAL_TIM_PWM_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80016ec:	f000 fa4e 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <MX_TIM3_Init+0xc4>)
 80016f2:	f000 fc3d 	bl	8001f70 <HAL_TIM_MspPostInit>

}
 80016f6:	bf00      	nop
 80016f8:	3728      	adds	r7, #40	; 0x28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200003a0 	.word	0x200003a0
 8001704:	40000400 	.word	0x40000400

08001708 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800171a:	463b      	mov	r3, r7
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	615a      	str	r2, [r3, #20]
 800172a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800172c:	4b27      	ldr	r3, [pc, #156]	; (80017cc <MX_TIM4_Init+0xc4>)
 800172e:	4a28      	ldr	r2, [pc, #160]	; (80017d0 <MX_TIM4_Init+0xc8>)
 8001730:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001732:	4b26      	ldr	r3, [pc, #152]	; (80017cc <MX_TIM4_Init+0xc4>)
 8001734:	2200      	movs	r2, #0
 8001736:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <MX_TIM4_Init+0xc4>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800173e:	4b23      	ldr	r3, [pc, #140]	; (80017cc <MX_TIM4_Init+0xc4>)
 8001740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001744:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001746:	4b21      	ldr	r3, [pc, #132]	; (80017cc <MX_TIM4_Init+0xc4>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <MX_TIM4_Init+0xc4>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001752:	481e      	ldr	r0, [pc, #120]	; (80017cc <MX_TIM4_Init+0xc4>)
 8001754:	f006 ff4a 	bl	80085ec <HAL_TIM_PWM_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800175e:	f000 fa15 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	4619      	mov	r1, r3
 8001770:	4816      	ldr	r0, [pc, #88]	; (80017cc <MX_TIM4_Init+0xc4>)
 8001772:	f007 fc17 	bl	8008fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800177c:	f000 fa06 	bl	8001b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001780:	2360      	movs	r3, #96	; 0x60
 8001782:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001790:	463b      	mov	r3, r7
 8001792:	2208      	movs	r2, #8
 8001794:	4619      	mov	r1, r3
 8001796:	480d      	ldr	r0, [pc, #52]	; (80017cc <MX_TIM4_Init+0xc4>)
 8001798:	f006 ff80 	bl	800869c <HAL_TIM_PWM_ConfigChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80017a2:	f000 f9f3 	bl	8001b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017a6:	463b      	mov	r3, r7
 80017a8:	220c      	movs	r2, #12
 80017aa:	4619      	mov	r1, r3
 80017ac:	4807      	ldr	r0, [pc, #28]	; (80017cc <MX_TIM4_Init+0xc4>)
 80017ae:	f006 ff75 	bl	800869c <HAL_TIM_PWM_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80017b8:	f000 f9e8 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017bc:	4803      	ldr	r0, [pc, #12]	; (80017cc <MX_TIM4_Init+0xc4>)
 80017be:	f000 fbd7 	bl	8001f70 <HAL_TIM_MspPostInit>

}
 80017c2:	bf00      	nop
 80017c4:	3728      	adds	r7, #40	; 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200003ec 	.word	0x200003ec
 80017d0:	40000800 	.word	0x40000800

080017d4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b096      	sub	sp, #88	; 0x58
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]
 80017f6:	615a      	str	r2, [r3, #20]
 80017f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	222c      	movs	r2, #44	; 0x2c
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f007 fd9b 	bl	800933c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001806:	4b33      	ldr	r3, [pc, #204]	; (80018d4 <MX_TIM15_Init+0x100>)
 8001808:	4a33      	ldr	r2, [pc, #204]	; (80018d8 <MX_TIM15_Init+0x104>)
 800180a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800180c:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <MX_TIM15_Init+0x100>)
 800180e:	2200      	movs	r2, #0
 8001810:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001812:	4b30      	ldr	r3, [pc, #192]	; (80018d4 <MX_TIM15_Init+0x100>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001818:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <MX_TIM15_Init+0x100>)
 800181a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800181e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001820:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <MX_TIM15_Init+0x100>)
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <MX_TIM15_Init+0x100>)
 8001828:	2200      	movs	r2, #0
 800182a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182c:	4b29      	ldr	r3, [pc, #164]	; (80018d4 <MX_TIM15_Init+0x100>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001832:	4828      	ldr	r0, [pc, #160]	; (80018d4 <MX_TIM15_Init+0x100>)
 8001834:	f006 feda 	bl	80085ec <HAL_TIM_PWM_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800183e:	f000 f9a5 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800184a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800184e:	4619      	mov	r1, r3
 8001850:	4820      	ldr	r0, [pc, #128]	; (80018d4 <MX_TIM15_Init+0x100>)
 8001852:	f007 fba7 	bl	8008fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800185c:	f000 f996 	bl	8001b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001860:	2360      	movs	r3, #96	; 0x60
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001868:	2300      	movs	r3, #0
 800186a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800186c:	2300      	movs	r3, #0
 800186e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001878:	2300      	movs	r3, #0
 800187a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800187c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001880:	2200      	movs	r2, #0
 8001882:	4619      	mov	r1, r3
 8001884:	4813      	ldr	r0, [pc, #76]	; (80018d4 <MX_TIM15_Init+0x100>)
 8001886:	f006 ff09 	bl	800869c <HAL_TIM_PWM_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001890:	f000 f97c 	bl	8001b8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <MX_TIM15_Init+0x100>)
 80018b8:	f007 fbfc 	bl	80090b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 80018c2:	f000 f963 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80018c6:	4803      	ldr	r0, [pc, #12]	; (80018d4 <MX_TIM15_Init+0x100>)
 80018c8:	f000 fb52 	bl	8001f70 <HAL_TIM_MspPostInit>

}
 80018cc:	bf00      	nop
 80018ce:	3758      	adds	r7, #88	; 0x58
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000438 	.word	0x20000438
 80018d8:	40014000 	.word	0x40014000

080018dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08e      	sub	sp, #56	; 0x38
 80018e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018f2:	4ba0      	ldr	r3, [pc, #640]	; (8001b74 <MX_GPIO_Init+0x298>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	4a9f      	ldr	r2, [pc, #636]	; (8001b74 <MX_GPIO_Init+0x298>)
 80018f8:	f043 0310 	orr.w	r3, r3, #16
 80018fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fe:	4b9d      	ldr	r3, [pc, #628]	; (8001b74 <MX_GPIO_Init+0x298>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	623b      	str	r3, [r7, #32]
 8001908:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800190a:	4b9a      	ldr	r3, [pc, #616]	; (8001b74 <MX_GPIO_Init+0x298>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	4a99      	ldr	r2, [pc, #612]	; (8001b74 <MX_GPIO_Init+0x298>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001916:	4b97      	ldr	r3, [pc, #604]	; (8001b74 <MX_GPIO_Init+0x298>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	61fb      	str	r3, [r7, #28]
 8001920:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001922:	4b94      	ldr	r3, [pc, #592]	; (8001b74 <MX_GPIO_Init+0x298>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	4a93      	ldr	r2, [pc, #588]	; (8001b74 <MX_GPIO_Init+0x298>)
 8001928:	f043 0320 	orr.w	r3, r3, #32
 800192c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192e:	4b91      	ldr	r3, [pc, #580]	; (8001b74 <MX_GPIO_Init+0x298>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	f003 0320 	and.w	r3, r3, #32
 8001936:	61bb      	str	r3, [r7, #24]
 8001938:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800193a:	4b8e      	ldr	r3, [pc, #568]	; (8001b74 <MX_GPIO_Init+0x298>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	4a8d      	ldr	r2, [pc, #564]	; (8001b74 <MX_GPIO_Init+0x298>)
 8001940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001946:	4b8b      	ldr	r3, [pc, #556]	; (8001b74 <MX_GPIO_Init+0x298>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b88      	ldr	r3, [pc, #544]	; (8001b74 <MX_GPIO_Init+0x298>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	4a87      	ldr	r2, [pc, #540]	; (8001b74 <MX_GPIO_Init+0x298>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195e:	4b85      	ldr	r3, [pc, #532]	; (8001b74 <MX_GPIO_Init+0x298>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	4b82      	ldr	r3, [pc, #520]	; (8001b74 <MX_GPIO_Init+0x298>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	4a81      	ldr	r2, [pc, #516]	; (8001b74 <MX_GPIO_Init+0x298>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001976:	4b7f      	ldr	r3, [pc, #508]	; (8001b74 <MX_GPIO_Init+0x298>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001982:	4b7c      	ldr	r3, [pc, #496]	; (8001b74 <MX_GPIO_Init+0x298>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a7b      	ldr	r2, [pc, #492]	; (8001b74 <MX_GPIO_Init+0x298>)
 8001988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b79      	ldr	r3, [pc, #484]	; (8001b74 <MX_GPIO_Init+0x298>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800199a:	4b76      	ldr	r3, [pc, #472]	; (8001b74 <MX_GPIO_Init+0x298>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	4a75      	ldr	r2, [pc, #468]	; (8001b74 <MX_GPIO_Init+0x298>)
 80019a0:	f043 0308 	orr.w	r3, r3, #8
 80019a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a6:	4b73      	ldr	r3, [pc, #460]	; (8001b74 <MX_GPIO_Init+0x298>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80019b2:	f002 fa27 	bl	8003e04 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2102      	movs	r1, #2
 80019ba:	486f      	ldr	r0, [pc, #444]	; (8001b78 <MX_GPIO_Init+0x29c>)
 80019bc:	f002 f946 	bl	8003c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 80019c0:	2201      	movs	r2, #1
 80019c2:	2101      	movs	r1, #1
 80019c4:	486d      	ldr	r0, [pc, #436]	; (8001b7c <MX_GPIO_Init+0x2a0>)
 80019c6:	f002 f941 	bl	8003c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80019ca:	2307      	movs	r3, #7
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ce:	2312      	movs	r3, #18
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d6:	2303      	movs	r3, #3
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019da:	2304      	movs	r3, #4
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e2:	4619      	mov	r1, r3
 80019e4:	4866      	ldr	r0, [pc, #408]	; (8001b80 <MX_GPIO_Init+0x2a4>)
 80019e6:	f001 ff9f 	bl	8003928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019ea:	23f0      	movs	r3, #240	; 0xf0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019fa:	2305      	movs	r3, #5
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a02:	4619      	mov	r1, r3
 8001a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a08:	f001 ff8e 	bl	8003928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	4855      	ldr	r0, [pc, #340]	; (8001b78 <MX_GPIO_Init+0x29c>)
 8001a24:	f001 ff80 	bl	8003928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a36:	2303      	movs	r3, #3
 8001a38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a42:	4619      	mov	r1, r3
 8001a44:	484d      	ldr	r0, [pc, #308]	; (8001b7c <MX_GPIO_Init+0x2a0>)
 8001a46:	f001 ff6f 	bl	8003928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001a4a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a64:	4619      	mov	r1, r3
 8001a66:	4844      	ldr	r0, [pc, #272]	; (8001b78 <MX_GPIO_Init+0x29c>)
 8001a68:	f001 ff5e 	bl	8003928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a6c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a7e:	230c      	movs	r3, #12
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a86:	4619      	mov	r1, r3
 8001a88:	483e      	ldr	r0, [pc, #248]	; (8001b84 <MX_GPIO_Init+0x2a8>)
 8001a8a:	f001 ff4d 	bl	8003928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001a8e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001aa0:	230a      	movs	r3, #10
 8001aa2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aae:	f001 ff3b 	bl	8003928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aca:	f001 ff2d 	bl	8003928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4825      	ldr	r0, [pc, #148]	; (8001b7c <MX_GPIO_Init+0x2a0>)
 8001ae6:	f001 ff1f 	bl	8003928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001aea:	2304      	movs	r3, #4
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af6:	2303      	movs	r3, #3
 8001af8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001afa:	230c      	movs	r3, #12
 8001afc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b02:	4619      	mov	r1, r3
 8001b04:	481d      	ldr	r0, [pc, #116]	; (8001b7c <MX_GPIO_Init+0x2a0>)
 8001b06:	f001 ff0f 	bl	8003928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b0a:	2360      	movs	r3, #96	; 0x60
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b22:	4619      	mov	r1, r3
 8001b24:	4815      	ldr	r0, [pc, #84]	; (8001b7c <MX_GPIO_Init+0x2a0>)
 8001b26:	f001 feff 	bl	8003928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001b2a:	2338      	movs	r3, #56	; 0x38
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b3a:	2306      	movs	r3, #6
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b42:	4619      	mov	r1, r3
 8001b44:	4810      	ldr	r0, [pc, #64]	; (8001b88 <MX_GPIO_Init+0x2ac>)
 8001b46:	f001 feef 	bl	8003928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b50:	2312      	movs	r3, #18
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b64:	4619      	mov	r1, r3
 8001b66:	4808      	ldr	r0, [pc, #32]	; (8001b88 <MX_GPIO_Init+0x2ac>)
 8001b68:	f001 fede 	bl	8003928 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b6c:	bf00      	nop
 8001b6e:	3738      	adds	r7, #56	; 0x38
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	48001800 	.word	0x48001800
 8001b7c:	48000c00 	.word	0x48000c00
 8001b80:	48001400 	.word	0x48001400
 8001b84:	48000800 	.word	0x48000800
 8001b88:	48000400 	.word	0x48000400

08001b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b90:	b672      	cpsid	i
}
 8001b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <Error_Handler+0x8>
	...

08001b98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_MspInit+0x44>)
 8001ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <HAL_MspInit+0x44>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6613      	str	r3, [r2, #96]	; 0x60
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_MspInit+0x44>)
 8001bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_MspInit+0x44>)
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <HAL_MspInit+0x44>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_MspInit+0x44>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08c      	sub	sp, #48	; 0x30
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a2d      	ldr	r2, [pc, #180]	; (8001cb4 <HAL_ADC_MspInit+0xd4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d154      	bne.n	8001cac <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c02:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <HAL_ADC_MspInit+0xd8>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c06:	4a2c      	ldr	r2, [pc, #176]	; (8001cb8 <HAL_ADC_MspInit+0xd8>)
 8001c08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <HAL_ADC_MspInit+0xd8>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c16:	61bb      	str	r3, [r7, #24]
 8001c18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1a:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <HAL_ADC_MspInit+0xd8>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	4a26      	ldr	r2, [pc, #152]	; (8001cb8 <HAL_ADC_MspInit+0xd8>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c26:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <HAL_ADC_MspInit+0xd8>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <HAL_ADC_MspInit+0xd8>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	4a20      	ldr	r2, [pc, #128]	; (8001cb8 <HAL_ADC_MspInit+0xd8>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <HAL_ADC_MspInit+0xd8>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_ADC_MspInit+0xd8>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	4a1a      	ldr	r2, [pc, #104]	; (8001cb8 <HAL_ADC_MspInit+0xd8>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c56:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_ADC_MspInit+0xd8>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c62:	233f      	movs	r3, #63	; 0x3f
 8001c64:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c66:	230b      	movs	r3, #11
 8001c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	4619      	mov	r1, r3
 8001c74:	4811      	ldr	r0, [pc, #68]	; (8001cbc <HAL_ADC_MspInit+0xdc>)
 8001c76:	f001 fe57 	bl	8003928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001c7a:	230a      	movs	r3, #10
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c7e:	230b      	movs	r3, #11
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 031c 	add.w	r3, r7, #28
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c90:	f001 fe4a 	bl	8003928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c94:	2302      	movs	r3, #2
 8001c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c98:	230b      	movs	r3, #11
 8001c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca0:	f107 031c 	add.w	r3, r7, #28
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <HAL_ADC_MspInit+0xe0>)
 8001ca8:	f001 fe3e 	bl	8003928 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cac:	bf00      	nop
 8001cae:	3730      	adds	r7, #48	; 0x30
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	50040000 	.word	0x50040000
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	48000800 	.word	0x48000800
 8001cc0:	48000400 	.word	0x48000400

08001cc4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1e      	ldr	r2, [pc, #120]	; (8001d5c <HAL_COMP_MspInit+0x98>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d118      	bne.n	8001d18 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <HAL_COMP_MspInit+0x9c>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	4a1d      	ldr	r2, [pc, #116]	; (8001d60 <HAL_COMP_MspInit+0x9c>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_COMP_MspInit+0x9c>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cfe:	2304      	movs	r3, #4
 8001d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d02:	2303      	movs	r3, #3
 8001d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4814      	ldr	r0, [pc, #80]	; (8001d64 <HAL_COMP_MspInit+0xa0>)
 8001d12:	f001 fe09 	bl	8003928 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8001d16:	e01c      	b.n	8001d52 <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <HAL_COMP_MspInit+0xa4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d117      	bne.n	8001d52 <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <HAL_COMP_MspInit+0x9c>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	4a0e      	ldr	r2, [pc, #56]	; (8001d60 <HAL_COMP_MspInit+0x9c>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <HAL_COMP_MspInit+0x9c>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d3a:	23c0      	movs	r3, #192	; 0xc0
 8001d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4805      	ldr	r0, [pc, #20]	; (8001d64 <HAL_COMP_MspInit+0xa0>)
 8001d4e:	f001 fdeb 	bl	8003928 <HAL_GPIO_Init>
}
 8001d52:	bf00      	nop
 8001d54:	3728      	adds	r7, #40	; 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40010200 	.word	0x40010200
 8001d60:	40021000 	.word	0x40021000
 8001d64:	48000400 	.word	0x48000400
 8001d68:	40010204 	.word	0x40010204

08001d6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a17      	ldr	r2, [pc, #92]	; (8001de8 <HAL_SPI_MspInit+0x7c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d127      	bne.n	8001dde <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_SPI_MspInit+0x80>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	4a16      	ldr	r2, [pc, #88]	; (8001dec <HAL_SPI_MspInit+0x80>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d98:	6593      	str	r3, [r2, #88]	; 0x58
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <HAL_SPI_MspInit+0x80>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_SPI_MspInit+0x80>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	4a10      	ldr	r2, [pc, #64]	; (8001dec <HAL_SPI_MspInit+0x80>)
 8001dac:	f043 0308 	orr.w	r3, r3, #8
 8001db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_SPI_MspInit+0x80>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8001dbe:	231a      	movs	r3, #26
 8001dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dce:	2305      	movs	r3, #5
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4805      	ldr	r0, [pc, #20]	; (8001df0 <HAL_SPI_MspInit+0x84>)
 8001dda:	f001 fda5 	bl	8003928 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001dde:	bf00      	nop
 8001de0:	3728      	adds	r7, #40	; 0x28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40003800 	.word	0x40003800
 8001dec:	40021000 	.word	0x40021000
 8001df0:	48000c00 	.word	0x48000c00

08001df4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08e      	sub	sp, #56	; 0x38
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a51      	ldr	r2, [pc, #324]	; (8001f58 <HAL_TIM_PWM_MspInit+0x164>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d139      	bne.n	8001e8a <HAL_TIM_PWM_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e16:	4b51      	ldr	r3, [pc, #324]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1a:	4a50      	ldr	r2, [pc, #320]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001e1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e20:	6613      	str	r3, [r2, #96]	; 0x60
 8001e22:	4b4e      	ldr	r3, [pc, #312]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e2a:	623b      	str	r3, [r7, #32]
 8001e2c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e2e:	4b4b      	ldr	r3, [pc, #300]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	4a4a      	ldr	r2, [pc, #296]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001e34:	f043 0310 	orr.w	r3, r3, #16
 8001e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e3a:	4b48      	ldr	r3, [pc, #288]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	61fb      	str	r3, [r7, #28]
 8001e44:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e56:	2301      	movs	r3, #1
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5e:	4619      	mov	r1, r3
 8001e60:	483f      	ldr	r0, [pc, #252]	; (8001f60 <HAL_TIM_PWM_MspInit+0x16c>)
 8001e62:	f001 fd61 	bl	8003928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001e66:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e80:	4619      	mov	r1, r3
 8001e82:	4837      	ldr	r0, [pc, #220]	; (8001f60 <HAL_TIM_PWM_MspInit+0x16c>)
 8001e84:	f001 fd50 	bl	8003928 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001e88:	e062      	b.n	8001f50 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM2)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e92:	d10c      	bne.n	8001eae <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e94:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	4a30      	ldr	r2, [pc, #192]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea0:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	69bb      	ldr	r3, [r7, #24]
}
 8001eac:	e050      	b.n	8001f50 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM3)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a2c      	ldr	r2, [pc, #176]	; (8001f64 <HAL_TIM_PWM_MspInit+0x170>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d10c      	bne.n	8001ed2 <HAL_TIM_PWM_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eb8:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebc:	4a27      	ldr	r2, [pc, #156]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	697b      	ldr	r3, [r7, #20]
}
 8001ed0:	e03e      	b.n	8001f50 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM4)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a24      	ldr	r2, [pc, #144]	; (8001f68 <HAL_TIM_PWM_MspInit+0x174>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d128      	bne.n	8001f2e <HAL_TIM_PWM_MspInit+0x13a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	4a1e      	ldr	r2, [pc, #120]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee8:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef8:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001efa:	f043 0310 	orr.w	r3, r3, #16
 8001efe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f00:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f24:	4619      	mov	r1, r3
 8001f26:	480e      	ldr	r0, [pc, #56]	; (8001f60 <HAL_TIM_PWM_MspInit+0x16c>)
 8001f28:	f001 fcfe 	bl	8003928 <HAL_GPIO_Init>
}
 8001f2c:	e010      	b.n	8001f50 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM15)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <HAL_TIM_PWM_MspInit+0x178>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d10b      	bne.n	8001f50 <HAL_TIM_PWM_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f42:	6613      	str	r3, [r2, #96]	; 0x60
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_TIM_PWM_MspInit+0x168>)
 8001f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
}
 8001f50:	bf00      	nop
 8001f52:	3738      	adds	r7, #56	; 0x38
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40012c00 	.word	0x40012c00
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	48001000 	.word	0x48001000
 8001f64:	40000400 	.word	0x40000400
 8001f68:	40000800 	.word	0x40000800
 8001f6c:	40014000 	.word	0x40014000

08001f70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08e      	sub	sp, #56	; 0x38
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a73      	ldr	r2, [pc, #460]	; (800215c <HAL_TIM_MspPostInit+0x1ec>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d11d      	bne.n	8001fce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f92:	4b73      	ldr	r3, [pc, #460]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	4a72      	ldr	r2, [pc, #456]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 8001f98:	f043 0310 	orr.w	r3, r3, #16
 8001f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9e:	4b70      	ldr	r3, [pc, #448]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	623b      	str	r3, [r7, #32]
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001faa:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4867      	ldr	r0, [pc, #412]	; (8002164 <HAL_TIM_MspPostInit+0x1f4>)
 8001fc8:	f001 fcae 	bl	8003928 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001fcc:	e0c2      	b.n	8002154 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd6:	d13a      	bne.n	800204e <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd8:	4b61      	ldr	r3, [pc, #388]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 8001fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fdc:	4a60      	ldr	r2, [pc, #384]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe4:	4b5e      	ldr	r3, [pc, #376]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 8001fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff0:	4b5b      	ldr	r3, [pc, #364]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 8001ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff4:	4a5a      	ldr	r2, [pc, #360]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 8001ff6:	f043 0302 	orr.w	r3, r3, #2
 8001ffa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ffc:	4b58      	ldr	r3, [pc, #352]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 8001ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002008:	2301      	movs	r3, #1
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002014:	2300      	movs	r3, #0
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002018:	2301      	movs	r3, #1
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002020:	4619      	mov	r1, r3
 8002022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002026:	f001 fc7f 	bl	8003928 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800202a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800203c:	2301      	movs	r3, #1
 800203e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002044:	4619      	mov	r1, r3
 8002046:	4848      	ldr	r0, [pc, #288]	; (8002168 <HAL_TIM_MspPostInit+0x1f8>)
 8002048:	f001 fc6e 	bl	8003928 <HAL_GPIO_Init>
}
 800204c:	e082      	b.n	8002154 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a46      	ldr	r2, [pc, #280]	; (800216c <HAL_TIM_MspPostInit+0x1fc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d138      	bne.n	80020ca <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002058:	4b41      	ldr	r3, [pc, #260]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 800205a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205c:	4a40      	ldr	r2, [pc, #256]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 800205e:	f043 0302 	orr.w	r3, r3, #2
 8002062:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002064:	4b3e      	ldr	r3, [pc, #248]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 8002066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002070:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 8002072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002074:	4a3a      	ldr	r2, [pc, #232]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 8002076:	f043 0304 	orr.w	r3, r3, #4
 800207a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800207c:	4b38      	ldr	r3, [pc, #224]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 800207e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002088:	2301      	movs	r3, #1
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002098:	2302      	movs	r3, #2
 800209a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a0:	4619      	mov	r1, r3
 80020a2:	4831      	ldr	r0, [pc, #196]	; (8002168 <HAL_TIM_MspPostInit+0x1f8>)
 80020a4:	f001 fc40 	bl	8003928 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020b8:	2302      	movs	r3, #2
 80020ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c0:	4619      	mov	r1, r3
 80020c2:	482b      	ldr	r0, [pc, #172]	; (8002170 <HAL_TIM_MspPostInit+0x200>)
 80020c4:	f001 fc30 	bl	8003928 <HAL_GPIO_Init>
}
 80020c8:	e044      	b.n	8002154 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a29      	ldr	r2, [pc, #164]	; (8002174 <HAL_TIM_MspPostInit+0x204>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d11d      	bne.n	8002110 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d4:	4b22      	ldr	r3, [pc, #136]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 80020d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d8:	4a21      	ldr	r2, [pc, #132]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 80020da:	f043 0308 	orr.w	r3, r3, #8
 80020de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020e0:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 80020e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80020ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2300      	movs	r3, #0
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020fe:	2302      	movs	r3, #2
 8002100:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002106:	4619      	mov	r1, r3
 8002108:	481b      	ldr	r0, [pc, #108]	; (8002178 <HAL_TIM_MspPostInit+0x208>)
 800210a:	f001 fc0d 	bl	8003928 <HAL_GPIO_Init>
}
 800210e:	e021      	b.n	8002154 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a19      	ldr	r2, [pc, #100]	; (800217c <HAL_TIM_MspPostInit+0x20c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d11c      	bne.n	8002154 <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211e:	4a10      	ldr	r2, [pc, #64]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_TIM_MspPostInit+0x1f0>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002132:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002144:	230e      	movs	r3, #14
 8002146:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214c:	4619      	mov	r1, r3
 800214e:	4806      	ldr	r0, [pc, #24]	; (8002168 <HAL_TIM_MspPostInit+0x1f8>)
 8002150:	f001 fbea 	bl	8003928 <HAL_GPIO_Init>
}
 8002154:	bf00      	nop
 8002156:	3738      	adds	r7, #56	; 0x38
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40012c00 	.word	0x40012c00
 8002160:	40021000 	.word	0x40021000
 8002164:	48001000 	.word	0x48001000
 8002168:	48000400 	.word	0x48000400
 800216c:	40000400 	.word	0x40000400
 8002170:	48000800 	.word	0x48000800
 8002174:	40000800 	.word	0x40000800
 8002178:	48000c00 	.word	0x48000c00
 800217c:	40014000 	.word	0x40014000

08002180 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	; 0x28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a50      	ldr	r2, [pc, #320]	; (80022d0 <HAL_SAI_MspInit+0x150>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d124      	bne.n	80021dc <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002192:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <HAL_SAI_MspInit+0x154>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10b      	bne.n	80021b2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800219a:	4b4f      	ldr	r3, [pc, #316]	; (80022d8 <HAL_SAI_MspInit+0x158>)
 800219c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219e:	4a4e      	ldr	r2, [pc, #312]	; (80022d8 <HAL_SAI_MspInit+0x158>)
 80021a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021a4:	6613      	str	r3, [r2, #96]	; 0x60
 80021a6:	4b4c      	ldr	r3, [pc, #304]	; (80022d8 <HAL_SAI_MspInit+0x158>)
 80021a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80021b2:	4b48      	ldr	r3, [pc, #288]	; (80022d4 <HAL_SAI_MspInit+0x154>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3301      	adds	r3, #1
 80021b8:	4a46      	ldr	r2, [pc, #280]	; (80022d4 <HAL_SAI_MspInit+0x154>)
 80021ba:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80021bc:	2374      	movs	r3, #116	; 0x74
 80021be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80021cc:	230d      	movs	r3, #13
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	4841      	ldr	r0, [pc, #260]	; (80022dc <HAL_SAI_MspInit+0x15c>)
 80021d8:	f001 fba6 	bl	8003928 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a3f      	ldr	r2, [pc, #252]	; (80022e0 <HAL_SAI_MspInit+0x160>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d135      	bne.n	8002252 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80021e6:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <HAL_SAI_MspInit+0x154>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10b      	bne.n	8002206 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80021ee:	4b3a      	ldr	r3, [pc, #232]	; (80022d8 <HAL_SAI_MspInit+0x158>)
 80021f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f2:	4a39      	ldr	r2, [pc, #228]	; (80022d8 <HAL_SAI_MspInit+0x158>)
 80021f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021f8:	6613      	str	r3, [r2, #96]	; 0x60
 80021fa:	4b37      	ldr	r3, [pc, #220]	; (80022d8 <HAL_SAI_MspInit+0x158>)
 80021fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002206:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <HAL_SAI_MspInit+0x154>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	3301      	adds	r3, #1
 800220c:	4a31      	ldr	r2, [pc, #196]	; (80022d4 <HAL_SAI_MspInit+0x154>)
 800220e:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002210:	2308      	movs	r3, #8
 8002212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002220:	230d      	movs	r3, #13
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4619      	mov	r1, r3
 800222a:	482c      	ldr	r0, [pc, #176]	; (80022dc <HAL_SAI_MspInit+0x15c>)
 800222c:	f001 fb7c 	bl	8003928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002230:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223e:	2300      	movs	r3, #0
 8002240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002242:	230d      	movs	r3, #13
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	4619      	mov	r1, r3
 800224c:	4825      	ldr	r0, [pc, #148]	; (80022e4 <HAL_SAI_MspInit+0x164>)
 800224e:	f001 fb6b 	bl	8003928 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a24      	ldr	r2, [pc, #144]	; (80022e8 <HAL_SAI_MspInit+0x168>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d135      	bne.n	80022c8 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800225c:	4b23      	ldr	r3, [pc, #140]	; (80022ec <HAL_SAI_MspInit+0x16c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10b      	bne.n	800227c <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002264:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <HAL_SAI_MspInit+0x158>)
 8002266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002268:	4a1b      	ldr	r2, [pc, #108]	; (80022d8 <HAL_SAI_MspInit+0x158>)
 800226a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800226e:	6613      	str	r3, [r2, #96]	; 0x60
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_SAI_MspInit+0x158>)
 8002272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_SAI_MspInit+0x16c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3301      	adds	r3, #1
 8002282:	4a1a      	ldr	r2, [pc, #104]	; (80022ec <HAL_SAI_MspInit+0x16c>)
 8002284:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002286:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800228a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002298:	230d      	movs	r3, #13
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	4813      	ldr	r0, [pc, #76]	; (80022f0 <HAL_SAI_MspInit+0x170>)
 80022a4:	f001 fb40 	bl	8003928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022a8:	2340      	movs	r3, #64	; 0x40
 80022aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80022b8:	230d      	movs	r3, #13
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4619      	mov	r1, r3
 80022c2:	480c      	ldr	r0, [pc, #48]	; (80022f4 <HAL_SAI_MspInit+0x174>)
 80022c4:	f001 fb30 	bl	8003928 <HAL_GPIO_Init>

    }
}
 80022c8:	bf00      	nop
 80022ca:	3728      	adds	r7, #40	; 0x28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40015404 	.word	0x40015404
 80022d4:	20000484 	.word	0x20000484
 80022d8:	40021000 	.word	0x40021000
 80022dc:	48001000 	.word	0x48001000
 80022e0:	40015424 	.word	0x40015424
 80022e4:	48001400 	.word	0x48001400
 80022e8:	40015804 	.word	0x40015804
 80022ec:	20000488 	.word	0x20000488
 80022f0:	48000400 	.word	0x48000400
 80022f4:	48000800 	.word	0x48000800

080022f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022fc:	e7fe      	b.n	80022fc <NMI_Handler+0x4>

080022fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002302:	e7fe      	b.n	8002302 <HardFault_Handler+0x4>

08002304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002308:	e7fe      	b.n	8002308 <MemManage_Handler+0x4>

0800230a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800230e:	e7fe      	b.n	800230e <BusFault_Handler+0x4>

08002310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <UsageFault_Handler+0x4>

08002316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002344:	f000 f892 	bl	800246c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}

0800234c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <SystemInit+0x20>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <SystemInit+0x20>)
 8002358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800235c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002374:	f7ff ffea 	bl	800234c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002378:	480c      	ldr	r0, [pc, #48]	; (80023ac <LoopForever+0x6>)
  ldr r1, =_edata
 800237a:	490d      	ldr	r1, [pc, #52]	; (80023b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800237c:	4a0d      	ldr	r2, [pc, #52]	; (80023b4 <LoopForever+0xe>)
  movs r3, #0
 800237e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002380:	e002      	b.n	8002388 <LoopCopyDataInit>

08002382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002386:	3304      	adds	r3, #4

08002388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800238c:	d3f9      	bcc.n	8002382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800238e:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002390:	4c0a      	ldr	r4, [pc, #40]	; (80023bc <LoopForever+0x16>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002394:	e001      	b.n	800239a <LoopFillZerobss>

08002396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002398:	3204      	adds	r2, #4

0800239a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800239a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800239c:	d3fb      	bcc.n	8002396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800239e:	f006 ffd5 	bl	800934c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023a2:	f7fe fd05 	bl	8000db0 <main>

080023a6 <LoopForever>:

LoopForever:
    b LoopForever
 80023a6:	e7fe      	b.n	80023a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023a8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80023ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80023b4:	08009404 	.word	0x08009404
  ldr r2, =_sbss
 80023b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80023bc:	20000490 	.word	0x20000490

080023c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023c0:	e7fe      	b.n	80023c0 <ADC1_IRQHandler>

080023c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023cc:	2003      	movs	r0, #3
 80023ce:	f001 f9bf 	bl	8003750 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023d2:	2000      	movs	r0, #0
 80023d4:	f000 f80e 	bl	80023f4 <HAL_InitTick>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	71fb      	strb	r3, [r7, #7]
 80023e2:	e001      	b.n	80023e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023e4:	f7ff fbd8 	bl	8001b98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023e8:	79fb      	ldrb	r3, [r7, #7]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002400:	4b17      	ldr	r3, [pc, #92]	; (8002460 <HAL_InitTick+0x6c>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d023      	beq.n	8002450 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002408:	4b16      	ldr	r3, [pc, #88]	; (8002464 <HAL_InitTick+0x70>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b14      	ldr	r3, [pc, #80]	; (8002460 <HAL_InitTick+0x6c>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4619      	mov	r1, r3
 8002412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002416:	fbb3 f3f1 	udiv	r3, r3, r1
 800241a:	fbb2 f3f3 	udiv	r3, r2, r3
 800241e:	4618      	mov	r0, r3
 8002420:	f001 f9bd 	bl	800379e <HAL_SYSTICK_Config>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10f      	bne.n	800244a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b0f      	cmp	r3, #15
 800242e:	d809      	bhi.n	8002444 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002430:	2200      	movs	r2, #0
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	f04f 30ff 	mov.w	r0, #4294967295
 8002438:	f001 f995 	bl	8003766 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800243c:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <HAL_InitTick+0x74>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e007      	b.n	8002454 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
 8002448:	e004      	b.n	8002454 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	e001      	b.n	8002454 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000008 	.word	0x20000008
 8002464:	20000000 	.word	0x20000000
 8002468:	20000004 	.word	0x20000004

0800246c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_IncTick+0x20>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_IncTick+0x24>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4413      	add	r3, r2
 800247c:	4a04      	ldr	r2, [pc, #16]	; (8002490 <HAL_IncTick+0x24>)
 800247e:	6013      	str	r3, [r2, #0]
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20000008 	.word	0x20000008
 8002490:	2000048c 	.word	0x2000048c

08002494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return uwTick;
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_GetTick+0x14>)
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	2000048c 	.word	0x2000048c

080024ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b4:	f7ff ffee 	bl	8002494 <HAL_GetTick>
 80024b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c4:	d005      	beq.n	80024d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <HAL_Delay+0x44>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4413      	add	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024d2:	bf00      	nop
 80024d4:	f7ff ffde 	bl	8002494 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d8f7      	bhi.n	80024d4 <HAL_Delay+0x28>
  {
  }
}
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000008 	.word	0x20000008

080024f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	609a      	str	r2, [r3, #8]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	609a      	str	r2, [r3, #8]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3360      	adds	r3, #96	; 0x60
 800256e:	461a      	mov	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <LL_ADC_SetOffset+0x44>)
 800257e:	4013      	ands	r3, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	4313      	orrs	r3, r2
 800258c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002594:	bf00      	nop
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	03fff000 	.word	0x03fff000

080025a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3360      	adds	r3, #96	; 0x60
 80025b2:	461a      	mov	r2, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	3360      	adds	r3, #96	; 0x60
 80025e0:	461a      	mov	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	431a      	orrs	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025fa:	bf00      	nop
 80025fc:	371c      	adds	r7, #28
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	615a      	str	r2, [r3, #20]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3330      	adds	r3, #48	; 0x30
 800263c:	461a      	mov	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	4413      	add	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	211f      	movs	r1, #31
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	401a      	ands	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	0e9b      	lsrs	r3, r3, #26
 8002664:	f003 011f 	and.w	r1, r3, #31
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	431a      	orrs	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002678:	bf00      	nop
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3314      	adds	r3, #20
 8002694:	461a      	mov	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	0e5b      	lsrs	r3, r3, #25
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	4413      	add	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	0d1b      	lsrs	r3, r3, #20
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	2107      	movs	r1, #7
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	401a      	ands	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	0d1b      	lsrs	r3, r3, #20
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	fa01 f303 	lsl.w	r3, r1, r3
 80026c8:	431a      	orrs	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026ce:	bf00      	nop
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f4:	43db      	mvns	r3, r3
 80026f6:	401a      	ands	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0318 	and.w	r3, r3, #24
 80026fe:	4908      	ldr	r1, [pc, #32]	; (8002720 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002700:	40d9      	lsrs	r1, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	400b      	ands	r3, r1
 8002706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270a:	431a      	orrs	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	0007ffff 	.word	0x0007ffff

08002724 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002734:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6093      	str	r3, [r2, #8]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800275c:	d101      	bne.n	8002762 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002780:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002784:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027ac:	d101      	bne.n	80027b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <LL_ADC_IsEnabled+0x18>
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <LL_ADC_IsEnabled+0x1a>
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d101      	bne.n	80027fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b08      	cmp	r3, #8
 800281e:	d101      	bne.n	8002824 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e129      	b.n	8002aa2 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002858:	2b00      	cmp	r3, #0
 800285a:	d109      	bne.n	8002870 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff f9bf 	bl	8001be0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff ff67 	bl	8002748 <LL_ADC_IsDeepPowerDownEnabled>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d004      	beq.n	800288a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff4d 	bl	8002724 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ff82 	bl	8002798 <LL_ADC_IsInternalRegulatorEnabled>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d115      	bne.n	80028c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ff66 	bl	8002770 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028a4:	4b81      	ldr	r3, [pc, #516]	; (8002aac <HAL_ADC_Init+0x278>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	099b      	lsrs	r3, r3, #6
 80028aa:	4a81      	ldr	r2, [pc, #516]	; (8002ab0 <HAL_ADC_Init+0x27c>)
 80028ac:	fba2 2303 	umull	r2, r3, r2, r3
 80028b0:	099b      	lsrs	r3, r3, #6
 80028b2:	3301      	adds	r3, #1
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028b8:	e002      	b.n	80028c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3b01      	subs	r3, #1
 80028be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f9      	bne.n	80028ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ff64 	bl	8002798 <LL_ADC_IsInternalRegulatorEnabled>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10d      	bne.n	80028f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	f043 0210 	orr.w	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	f043 0201 	orr.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ff75 	bl	80027e6 <LL_ADC_REG_IsConversionOngoing>
 80028fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 80c2 	bne.w	8002a90 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f040 80be 	bne.w	8002a90 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002918:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800291c:	f043 0202 	orr.w	r2, r3, #2
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff49 	bl	80027c0 <LL_ADC_IsEnabled>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10b      	bne.n	800294c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002934:	485f      	ldr	r0, [pc, #380]	; (8002ab4 <HAL_ADC_Init+0x280>)
 8002936:	f7ff ff43 	bl	80027c0 <LL_ADC_IsEnabled>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d105      	bne.n	800294c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4619      	mov	r1, r3
 8002946:	485c      	ldr	r0, [pc, #368]	; (8002ab8 <HAL_ADC_Init+0x284>)
 8002948:	f7ff fdd4 	bl	80024f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7e5b      	ldrb	r3, [r3, #25]
 8002950:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002956:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800295c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002962:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3020 	ldrb.w	r3, [r3, #32]
 800296a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d106      	bne.n	8002988 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	3b01      	subs	r3, #1
 8002980:	045b      	lsls	r3, r3, #17
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	d009      	beq.n	80029a4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	4b44      	ldr	r3, [pc, #272]	; (8002abc <HAL_ADC_Init+0x288>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	69b9      	ldr	r1, [r7, #24]
 80029b4:	430b      	orrs	r3, r1
 80029b6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff25 	bl	800280c <LL_ADC_INJ_IsConversionOngoing>
 80029c2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d140      	bne.n	8002a4c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d13d      	bne.n	8002a4c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7e1b      	ldrb	r3, [r3, #24]
 80029d8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029da:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029e2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029f2:	f023 0306 	bic.w	r3, r3, #6
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	69b9      	ldr	r1, [r7, #24]
 80029fc:	430b      	orrs	r3, r1
 80029fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d118      	bne.n	8002a3c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a14:	f023 0304 	bic.w	r3, r3, #4
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a20:	4311      	orrs	r1, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a26:	4311      	orrs	r1, r2
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0201 	orr.w	r2, r2, #1
 8002a38:	611a      	str	r2, [r3, #16]
 8002a3a:	e007      	b.n	8002a4c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d10c      	bne.n	8002a6e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f023 010f 	bic.w	r1, r3, #15
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	1e5a      	subs	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a6c:	e007      	b.n	8002a7e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 020f 	bic.w	r2, r2, #15
 8002a7c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	f023 0303 	bic.w	r3, r3, #3
 8002a86:	f043 0201 	orr.w	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	659a      	str	r2, [r3, #88]	; 0x58
 8002a8e:	e007      	b.n	8002aa0 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a94:	f043 0210 	orr.w	r2, r3, #16
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002aa0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3720      	adds	r7, #32
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	053e2d63 	.word	0x053e2d63
 8002ab4:	50040000 	.word	0x50040000
 8002ab8:	50040300 	.word	0x50040300
 8002abc:	fff0c007 	.word	0xfff0c007

08002ac0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b0b6      	sub	sp, #216	; 0xd8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x22>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e3d5      	b.n	800328e <HAL_ADC_ConfigChannel+0x7ce>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fe79 	bl	80027e6 <LL_ADC_REG_IsConversionOngoing>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f040 83ba 	bne.w	8003270 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b05      	cmp	r3, #5
 8002b0a:	d824      	bhi.n	8002b56 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	3b02      	subs	r3, #2
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d81b      	bhi.n	8002b4e <HAL_ADC_ConfigChannel+0x8e>
 8002b16:	a201      	add	r2, pc, #4	; (adr r2, 8002b1c <HAL_ADC_ConfigChannel+0x5c>)
 8002b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1c:	08002b2d 	.word	0x08002b2d
 8002b20:	08002b35 	.word	0x08002b35
 8002b24:	08002b3d 	.word	0x08002b3d
 8002b28:	08002b45 	.word	0x08002b45
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002b2c:	230c      	movs	r3, #12
 8002b2e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b32:	e010      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002b34:	2312      	movs	r3, #18
 8002b36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b3a:	e00c      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002b3c:	2318      	movs	r3, #24
 8002b3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b42:	e008      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b4c:	e003      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002b4e:	2306      	movs	r3, #6
 8002b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b54:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002b64:	f7ff fd62 	bl	800262c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fe3a 	bl	80027e6 <LL_ADC_REG_IsConversionOngoing>
 8002b72:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fe46 	bl	800280c <LL_ADC_INJ_IsConversionOngoing>
 8002b80:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f040 81bf 	bne.w	8002f0c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f040 81ba 	bne.w	8002f0c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ba0:	d10f      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2200      	movs	r2, #0
 8002bac:	4619      	mov	r1, r3
 8002bae:	f7ff fd69 	bl	8002684 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fd23 	bl	8002606 <LL_ADC_SetSamplingTimeCommonConfig>
 8002bc0:	e00e      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6819      	ldr	r1, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f7ff fd58 	bl	8002684 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2100      	movs	r1, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fd13 	bl	8002606 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	08db      	lsrs	r3, r3, #3
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d00a      	beq.n	8002c18 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6919      	ldr	r1, [r3, #16]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c12:	f7ff fca3 	bl	800255c <LL_ADC_SetOffset>
 8002c16:	e179      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fcc0 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10a      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x184>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2100      	movs	r1, #0
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fcb5 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	0e9b      	lsrs	r3, r3, #26
 8002c3e:	f003 021f 	and.w	r2, r3, #31
 8002c42:	e01e      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x1c2>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fcaa 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002c72:	2320      	movs	r3, #32
 8002c74:	e004      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002c76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c7a:	fab3 f383 	clz	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d105      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x1da>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	0e9b      	lsrs	r3, r3, #26
 8002c94:	f003 031f 	and.w	r3, r3, #31
 8002c98:	e018      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x20c>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002cae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002cb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	e004      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002cc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d106      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fc79 	bl	80025d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fc5d 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x24a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fc52 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 8002d00:	4603      	mov	r3, r0
 8002d02:	0e9b      	lsrs	r3, r3, #26
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	e01e      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x288>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2101      	movs	r1, #1
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fc47 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002d30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002d38:	2320      	movs	r3, #32
 8002d3a:	e004      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002d3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x2a0>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	0e9b      	lsrs	r3, r3, #26
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	e018      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x2d2>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002d74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002d84:	2320      	movs	r3, #32
 8002d86:	e004      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d8c:	fab3 f383 	clz	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d106      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fc16 	bl	80025d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2102      	movs	r1, #2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fbfa 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10a      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x310>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2102      	movs	r1, #2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fbef 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	0e9b      	lsrs	r3, r3, #26
 8002dca:	f003 021f 	and.w	r2, r3, #31
 8002dce:	e01e      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x34e>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2102      	movs	r1, #2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fbe4 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002dee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002df2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	e004      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d105      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x366>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	0e9b      	lsrs	r3, r3, #26
 8002e20:	f003 031f 	and.w	r3, r3, #31
 8002e24:	e014      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x390>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002e3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002e42:	2320      	movs	r3, #32
 8002e44:	e004      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002e46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d106      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fbb7 	bl	80025d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2103      	movs	r1, #3
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fb9b 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x3ce>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2103      	movs	r1, #3
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fb90 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	0e9b      	lsrs	r3, r3, #26
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	e017      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x3fe>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2103      	movs	r1, #3
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fb85 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea8:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002eb0:	2320      	movs	r3, #32
 8002eb2:	e003      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d105      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x416>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	0e9b      	lsrs	r3, r3, #26
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	e011      	b.n	8002efa <HAL_ADC_ConfigChannel+0x43a>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002ee4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ee6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002eee:	2320      	movs	r3, #32
 8002ef0:	e003      	b.n	8002efa <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002ef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d106      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2200      	movs	r2, #0
 8002f04:	2103      	movs	r1, #3
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fb62 	bl	80025d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fc55 	bl	80027c0 <LL_ADC_IsEnabled>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f040 813f 	bne.w	800319c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6819      	ldr	r1, [r3, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f7ff fbd6 	bl	80026dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4a8e      	ldr	r2, [pc, #568]	; (8003170 <HAL_ADC_ConfigChannel+0x6b0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	f040 8130 	bne.w	800319c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10b      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x4a4>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	0e9b      	lsrs	r3, r3, #26
 8002f52:	3301      	adds	r3, #1
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	2b09      	cmp	r3, #9
 8002f5a:	bf94      	ite	ls
 8002f5c:	2301      	movls	r3, #1
 8002f5e:	2300      	movhi	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e019      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x4d8>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f74:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	e003      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	2b09      	cmp	r3, #9
 8002f90:	bf94      	ite	ls
 8002f92:	2301      	movls	r3, #1
 8002f94:	2300      	movhi	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d079      	beq.n	8003090 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d107      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x4f8>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	0e9b      	lsrs	r3, r3, #26
 8002fae:	3301      	adds	r3, #1
 8002fb0:	069b      	lsls	r3, r3, #26
 8002fb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fb6:	e015      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x524>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc0:	fa93 f3a3 	rbit	r3, r3
 8002fc4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fc8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	e003      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	3301      	adds	r3, #1
 8002fde:	069b      	lsls	r3, r3, #26
 8002fe0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d109      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x544>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0e9b      	lsrs	r3, r3, #26
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	e017      	b.n	8003034 <HAL_ADC_ConfigChannel+0x574>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003014:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800301c:	2320      	movs	r3, #32
 800301e:	e003      	b.n	8003028 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	3301      	adds	r3, #1
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	2101      	movs	r1, #1
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	ea42 0103 	orr.w	r1, r2, r3
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <HAL_ADC_ConfigChannel+0x59a>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	0e9b      	lsrs	r3, r3, #26
 800304a:	3301      	adds	r3, #1
 800304c:	f003 021f 	and.w	r2, r3, #31
 8003050:	4613      	mov	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4413      	add	r3, r2
 8003056:	051b      	lsls	r3, r3, #20
 8003058:	e018      	b.n	800308c <HAL_ADC_ConfigChannel+0x5cc>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003062:	fa93 f3a3 	rbit	r3, r3
 8003066:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003072:	2320      	movs	r3, #32
 8003074:	e003      	b.n	800307e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003078:	fab3 f383 	clz	r3, r3
 800307c:	b2db      	uxtb	r3, r3
 800307e:	3301      	adds	r3, #1
 8003080:	f003 021f 	and.w	r2, r3, #31
 8003084:	4613      	mov	r3, r2
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4413      	add	r3, r2
 800308a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800308c:	430b      	orrs	r3, r1
 800308e:	e080      	b.n	8003192 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003098:	2b00      	cmp	r3, #0
 800309a:	d107      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x5ec>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	0e9b      	lsrs	r3, r3, #26
 80030a2:	3301      	adds	r3, #1
 80030a4:	069b      	lsls	r3, r3, #26
 80030a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030aa:	e015      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x618>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80030be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80030c4:	2320      	movs	r3, #32
 80030c6:	e003      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80030c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	3301      	adds	r3, #1
 80030d2:	069b      	lsls	r3, r3, #26
 80030d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d109      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x638>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	0e9b      	lsrs	r3, r3, #26
 80030ea:	3301      	adds	r3, #1
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	2101      	movs	r1, #1
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	e017      	b.n	8003128 <HAL_ADC_ConfigChannel+0x668>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	fa93 f3a3 	rbit	r3, r3
 8003104:	61bb      	str	r3, [r7, #24]
  return result;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003110:	2320      	movs	r3, #32
 8003112:	e003      	b.n	800311c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	3301      	adds	r3, #1
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	2101      	movs	r1, #1
 8003124:	fa01 f303 	lsl.w	r3, r1, r3
 8003128:	ea42 0103 	orr.w	r1, r2, r3
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10d      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x694>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	0e9b      	lsrs	r3, r3, #26
 800313e:	3301      	adds	r3, #1
 8003140:	f003 021f 	and.w	r2, r3, #31
 8003144:	4613      	mov	r3, r2
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4413      	add	r3, r2
 800314a:	3b1e      	subs	r3, #30
 800314c:	051b      	lsls	r3, r3, #20
 800314e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003152:	e01d      	b.n	8003190 <HAL_ADC_ConfigChannel+0x6d0>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	60fb      	str	r3, [r7, #12]
  return result;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d103      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800316c:	2320      	movs	r3, #32
 800316e:	e005      	b.n	800317c <HAL_ADC_ConfigChannel+0x6bc>
 8003170:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	3301      	adds	r3, #1
 800317e:	f003 021f 	and.w	r2, r3, #31
 8003182:	4613      	mov	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4413      	add	r3, r2
 8003188:	3b1e      	subs	r3, #30
 800318a:	051b      	lsls	r3, r3, #20
 800318c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003190:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003196:	4619      	mov	r1, r3
 8003198:	f7ff fa74 	bl	8002684 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b3d      	ldr	r3, [pc, #244]	; (8003298 <HAL_ADC_ConfigChannel+0x7d8>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d06c      	beq.n	8003282 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031a8:	483c      	ldr	r0, [pc, #240]	; (800329c <HAL_ADC_ConfigChannel+0x7dc>)
 80031aa:	f7ff f9c9 	bl	8002540 <LL_ADC_GetCommonPathInternalCh>
 80031ae:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a3a      	ldr	r2, [pc, #232]	; (80032a0 <HAL_ADC_ConfigChannel+0x7e0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d127      	bne.n	800320c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d121      	bne.n	800320c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a35      	ldr	r2, [pc, #212]	; (80032a4 <HAL_ADC_ConfigChannel+0x7e4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d157      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031da:	4619      	mov	r1, r3
 80031dc:	482f      	ldr	r0, [pc, #188]	; (800329c <HAL_ADC_ConfigChannel+0x7dc>)
 80031de:	f7ff f99c 	bl	800251a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031e2:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <HAL_ADC_ConfigChannel+0x7e8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	099b      	lsrs	r3, r3, #6
 80031e8:	4a30      	ldr	r2, [pc, #192]	; (80032ac <HAL_ADC_ConfigChannel+0x7ec>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	099b      	lsrs	r3, r3, #6
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80031fc:	e002      	b.n	8003204 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	3b01      	subs	r3, #1
 8003202:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f9      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800320a:	e03a      	b.n	8003282 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a27      	ldr	r2, [pc, #156]	; (80032b0 <HAL_ADC_ConfigChannel+0x7f0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d113      	bne.n	800323e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003216:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800321a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10d      	bne.n	800323e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a1f      	ldr	r2, [pc, #124]	; (80032a4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d12a      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800322c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003230:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003234:	4619      	mov	r1, r3
 8003236:	4819      	ldr	r0, [pc, #100]	; (800329c <HAL_ADC_ConfigChannel+0x7dc>)
 8003238:	f7ff f96f 	bl	800251a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800323c:	e021      	b.n	8003282 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <HAL_ADC_ConfigChannel+0x7f4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d11c      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003248:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800324c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d116      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a12      	ldr	r2, [pc, #72]	; (80032a4 <HAL_ADC_ConfigChannel+0x7e4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d111      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800325e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003262:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003266:	4619      	mov	r1, r3
 8003268:	480c      	ldr	r0, [pc, #48]	; (800329c <HAL_ADC_ConfigChannel+0x7dc>)
 800326a:	f7ff f956 	bl	800251a <LL_ADC_SetCommonPathInternalCh>
 800326e:	e008      	b.n	8003282 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	f043 0220 	orr.w	r2, r3, #32
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800328a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800328e:	4618      	mov	r0, r3
 8003290:	37d8      	adds	r7, #216	; 0xd8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	80080000 	.word	0x80080000
 800329c:	50040300 	.word	0x50040300
 80032a0:	c7520000 	.word	0xc7520000
 80032a4:	50040000 	.word	0x50040000
 80032a8:	20000000 	.word	0x20000000
 80032ac:	053e2d63 	.word	0x053e2d63
 80032b0:	cb840000 	.word	0xcb840000
 80032b4:	80000001 	.word	0x80000001

080032b8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <LL_EXTI_EnableIT_0_31+0x20>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4904      	ldr	r1, [pc, #16]	; (80032d8 <LL_EXTI_EnableIT_0_31+0x20>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	40010400 	.word	0x40010400

080032dc <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <LL_EXTI_DisableIT_0_31+0x24>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	4904      	ldr	r1, [pc, #16]	; (8003300 <LL_EXTI_DisableIT_0_31+0x24>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40010400 	.word	0x40010400

08003304 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <LL_EXTI_EnableEvent_0_31+0x20>)
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	4904      	ldr	r1, [pc, #16]	; (8003324 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4313      	orrs	r3, r2
 8003316:	604b      	str	r3, [r1, #4]

}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40010400 	.word	0x40010400

08003328 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003330:	4b06      	ldr	r3, [pc, #24]	; (800334c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	43db      	mvns	r3, r3
 8003338:	4904      	ldr	r1, [pc, #16]	; (800334c <LL_EXTI_DisableEvent_0_31+0x24>)
 800333a:	4013      	ands	r3, r2
 800333c:	604b      	str	r3, [r1, #4]
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40010400 	.word	0x40010400

08003350 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	4904      	ldr	r1, [pc, #16]	; (8003370 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4313      	orrs	r3, r2
 8003362:	608b      	str	r3, [r1, #8]

}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	40010400 	.word	0x40010400

08003374 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	43db      	mvns	r3, r3
 8003384:	4904      	ldr	r1, [pc, #16]	; (8003398 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003386:	4013      	ands	r3, r2
 8003388:	608b      	str	r3, [r1, #8]

}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40010400 	.word	0x40010400

0800339c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	4904      	ldr	r1, [pc, #16]	; (80033bc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60cb      	str	r3, [r1, #12]
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	40010400 	.word	0x40010400

080033c0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	43db      	mvns	r3, r3
 80033d0:	4904      	ldr	r1, [pc, #16]	; (80033e4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	60cb      	str	r3, [r1, #12]
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40010400 	.word	0x40010400

080033e8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80033f0:	4a04      	ldr	r2, [pc, #16]	; (8003404 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6153      	str	r3, [r2, #20]
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40010400 	.word	0x40010400

08003408 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d102      	bne.n	8003424 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e0d1      	b.n	80035c8 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800342e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003432:	d102      	bne.n	800343a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	77fb      	strb	r3, [r7, #31]
 8003438:	e0c6      	b.n	80035c8 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d115      	bne.n	8003472 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003454:	4b5f      	ldr	r3, [pc, #380]	; (80035d4 <HAL_COMP_Init+0x1cc>)
 8003456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003458:	4a5e      	ldr	r2, [pc, #376]	; (80035d4 <HAL_COMP_Init+0x1cc>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6613      	str	r3, [r2, #96]	; 0x60
 8003460:	4b5c      	ldr	r3, [pc, #368]	; (80035d4 <HAL_COMP_Init+0x1cc>)
 8003462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7fe fc29 	bl	8001cc4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800347c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	4b4b      	ldr	r3, [pc, #300]	; (80035d8 <HAL_COMP_Init+0x1d0>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	6979      	ldr	r1, [r7, #20]
 80034b2:	430b      	orrs	r3, r1
 80034b4:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034be:	d106      	bne.n	80034ce <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80034c0:	4b46      	ldr	r3, [pc, #280]	; (80035dc <HAL_COMP_Init+0x1d4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a45      	ldr	r2, [pc, #276]	; (80035dc <HAL_COMP_Init+0x1d4>)
 80034c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	e005      	b.n	80034da <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80034ce:	4b43      	ldr	r3, [pc, #268]	; (80035dc <HAL_COMP_Init+0x1d4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a42      	ldr	r2, [pc, #264]	; (80035dc <HAL_COMP_Init+0x1d4>)
 80034d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034d8:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d016      	beq.n	8003516 <HAL_COMP_Init+0x10e>
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d113      	bne.n	8003516 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034ee:	4b3c      	ldr	r3, [pc, #240]	; (80035e0 <HAL_COMP_Init+0x1d8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	099b      	lsrs	r3, r3, #6
 80034f4:	4a3b      	ldr	r2, [pc, #236]	; (80035e4 <HAL_COMP_Init+0x1dc>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	099b      	lsrs	r3, r3, #6
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003508:	e002      	b.n	8003510 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3b01      	subs	r3, #1
 800350e:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f9      	bne.n	800350a <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a33      	ldr	r2, [pc, #204]	; (80035e8 <HAL_COMP_Init+0x1e0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d102      	bne.n	8003526 <HAL_COMP_Init+0x11e>
 8003520:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003524:	e001      	b.n	800352a <HAL_COMP_Init+0x122>
 8003526:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800352a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d037      	beq.n	80035a8 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003544:	6938      	ldr	r0, [r7, #16]
 8003546:	f7ff ff03 	bl	8003350 <LL_EXTI_EnableRisingTrig_0_31>
 800354a:	e002      	b.n	8003552 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800354c:	6938      	ldr	r0, [r7, #16]
 800354e:	f7ff ff11 	bl	8003374 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800355e:	6938      	ldr	r0, [r7, #16]
 8003560:	f7ff ff1c 	bl	800339c <LL_EXTI_EnableFallingTrig_0_31>
 8003564:	e002      	b.n	800356c <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003566:	6938      	ldr	r0, [r7, #16]
 8003568:	f7ff ff2a 	bl	80033c0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 800356c:	6938      	ldr	r0, [r7, #16]
 800356e:	f7ff ff3b 	bl	80033e8 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800357e:	6938      	ldr	r0, [r7, #16]
 8003580:	f7ff fec0 	bl	8003304 <LL_EXTI_EnableEvent_0_31>
 8003584:	e002      	b.n	800358c <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003586:	6938      	ldr	r0, [r7, #16]
 8003588:	f7ff fece 	bl	8003328 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8003598:	6938      	ldr	r0, [r7, #16]
 800359a:	f7ff fe8d 	bl	80032b8 <LL_EXTI_EnableIT_0_31>
 800359e:	e009      	b.n	80035b4 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80035a0:	6938      	ldr	r0, [r7, #16]
 80035a2:	f7ff fe9b 	bl	80032dc <LL_EXTI_DisableIT_0_31>
 80035a6:	e005      	b.n	80035b4 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80035a8:	6938      	ldr	r0, [r7, #16]
 80035aa:	f7ff febd 	bl	8003328 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80035ae:	6938      	ldr	r0, [r7, #16]
 80035b0:	f7ff fe94 	bl	80032dc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d103      	bne.n	80035c8 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80035c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000
 80035d8:	ff207d03 	.word	0xff207d03
 80035dc:	40010204 	.word	0x40010204
 80035e0:	20000000 	.word	0x20000000
 80035e4:	053e2d63 	.word	0x053e2d63
 80035e8:	40010200 	.word	0x40010200

080035ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035fc:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <__NVIC_SetPriorityGrouping+0x44>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003608:	4013      	ands	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800361e:	4a04      	ldr	r2, [pc, #16]	; (8003630 <__NVIC_SetPriorityGrouping+0x44>)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	60d3      	str	r3, [r2, #12]
}
 8003624:	bf00      	nop
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003638:	4b04      	ldr	r3, [pc, #16]	; (800364c <__NVIC_GetPriorityGrouping+0x18>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	0a1b      	lsrs	r3, r3, #8
 800363e:	f003 0307 	and.w	r3, r3, #7
}
 8003642:	4618      	mov	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	6039      	str	r1, [r7, #0]
 800365a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800365c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003660:	2b00      	cmp	r3, #0
 8003662:	db0a      	blt.n	800367a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	b2da      	uxtb	r2, r3
 8003668:	490c      	ldr	r1, [pc, #48]	; (800369c <__NVIC_SetPriority+0x4c>)
 800366a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366e:	0112      	lsls	r2, r2, #4
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	440b      	add	r3, r1
 8003674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003678:	e00a      	b.n	8003690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	b2da      	uxtb	r2, r3
 800367e:	4908      	ldr	r1, [pc, #32]	; (80036a0 <__NVIC_SetPriority+0x50>)
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	3b04      	subs	r3, #4
 8003688:	0112      	lsls	r2, r2, #4
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	440b      	add	r3, r1
 800368e:	761a      	strb	r2, [r3, #24]
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000e100 	.word	0xe000e100
 80036a0:	e000ed00 	.word	0xe000ed00

080036a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b089      	sub	sp, #36	; 0x24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f1c3 0307 	rsb	r3, r3, #7
 80036be:	2b04      	cmp	r3, #4
 80036c0:	bf28      	it	cs
 80036c2:	2304      	movcs	r3, #4
 80036c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2b06      	cmp	r3, #6
 80036cc:	d902      	bls.n	80036d4 <NVIC_EncodePriority+0x30>
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	3b03      	subs	r3, #3
 80036d2:	e000      	b.n	80036d6 <NVIC_EncodePriority+0x32>
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d8:	f04f 32ff 	mov.w	r2, #4294967295
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43da      	mvns	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	401a      	ands	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036ec:	f04f 31ff 	mov.w	r1, #4294967295
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	fa01 f303 	lsl.w	r3, r1, r3
 80036f6:	43d9      	mvns	r1, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036fc:	4313      	orrs	r3, r2
         );
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3724      	adds	r7, #36	; 0x24
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3b01      	subs	r3, #1
 8003718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800371c:	d301      	bcc.n	8003722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800371e:	2301      	movs	r3, #1
 8003720:	e00f      	b.n	8003742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003722:	4a0a      	ldr	r2, [pc, #40]	; (800374c <SysTick_Config+0x40>)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3b01      	subs	r3, #1
 8003728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800372a:	210f      	movs	r1, #15
 800372c:	f04f 30ff 	mov.w	r0, #4294967295
 8003730:	f7ff ff8e 	bl	8003650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <SysTick_Config+0x40>)
 8003736:	2200      	movs	r2, #0
 8003738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800373a:	4b04      	ldr	r3, [pc, #16]	; (800374c <SysTick_Config+0x40>)
 800373c:	2207      	movs	r2, #7
 800373e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	e000e010 	.word	0xe000e010

08003750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff ff47 	bl	80035ec <__NVIC_SetPriorityGrouping>
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b086      	sub	sp, #24
 800376a:	af00      	add	r7, sp, #0
 800376c:	4603      	mov	r3, r0
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	607a      	str	r2, [r7, #4]
 8003772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003778:	f7ff ff5c 	bl	8003634 <__NVIC_GetPriorityGrouping>
 800377c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	6978      	ldr	r0, [r7, #20]
 8003784:	f7ff ff8e 	bl	80036a4 <NVIC_EncodePriority>
 8003788:	4602      	mov	r2, r0
 800378a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800378e:	4611      	mov	r1, r2
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff ff5d 	bl	8003650 <__NVIC_SetPriority>
}
 8003796:	bf00      	nop
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff ffb0 	bl	800370c <SysTick_Config>
 80037ac:	4603      	mov	r3, r0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b086      	sub	sp, #24
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
 80037c2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_DMA_Start_IT+0x20>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e066      	b.n	80038a4 <HAL_DMA_Start_IT+0xee>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d155      	bne.n	8003896 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2202      	movs	r2, #2
 80037ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0201 	bic.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f84c 	bl	80038ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 020e 	orr.w	r2, r2, #14
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	e00f      	b.n	800384e <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0204 	bic.w	r2, r2, #4
 800383c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 020a 	orr.w	r2, r2, #10
 800384c:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800386a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003882:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	e005      	b.n	80038a2 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800389e:	2302      	movs	r3, #2
 80038a0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d004      	beq.n	80038d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038d4:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	f003 021c 	and.w	r2, r3, #28
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	2101      	movs	r1, #1
 80038e4:	fa01 f202 	lsl.w	r2, r1, r2
 80038e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b10      	cmp	r3, #16
 80038f8:	d108      	bne.n	800390c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800390a:	e007      	b.n	800391c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	60da      	str	r2, [r3, #12]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003936:	e166      	b.n	8003c06 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	2101      	movs	r1, #1
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	fa01 f303 	lsl.w	r3, r1, r3
 8003944:	4013      	ands	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8158 	beq.w	8003c00 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b01      	cmp	r3, #1
 800395a:	d005      	beq.n	8003968 <HAL_GPIO_Init+0x40>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d130      	bne.n	80039ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	2203      	movs	r2, #3
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800399e:	2201      	movs	r2, #1
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4013      	ands	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	f003 0201 	and.w	r2, r3, #1
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d017      	beq.n	8003a06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	2203      	movs	r2, #3
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4013      	ands	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d123      	bne.n	8003a5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	08da      	lsrs	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3208      	adds	r2, #8
 8003a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	220f      	movs	r2, #15
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	08da      	lsrs	r2, r3, #3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3208      	adds	r2, #8
 8003a54:	6939      	ldr	r1, [r7, #16]
 8003a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	2203      	movs	r2, #3
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f003 0203 	and.w	r2, r3, #3
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 80b2 	beq.w	8003c00 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9c:	4b61      	ldr	r3, [pc, #388]	; (8003c24 <HAL_GPIO_Init+0x2fc>)
 8003a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa0:	4a60      	ldr	r2, [pc, #384]	; (8003c24 <HAL_GPIO_Init+0x2fc>)
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	6613      	str	r3, [r2, #96]	; 0x60
 8003aa8:	4b5e      	ldr	r3, [pc, #376]	; (8003c24 <HAL_GPIO_Init+0x2fc>)
 8003aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ab4:	4a5c      	ldr	r2, [pc, #368]	; (8003c28 <HAL_GPIO_Init+0x300>)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	089b      	lsrs	r3, r3, #2
 8003aba:	3302      	adds	r3, #2
 8003abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	220f      	movs	r2, #15
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ade:	d02b      	beq.n	8003b38 <HAL_GPIO_Init+0x210>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a52      	ldr	r2, [pc, #328]	; (8003c2c <HAL_GPIO_Init+0x304>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d025      	beq.n	8003b34 <HAL_GPIO_Init+0x20c>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a51      	ldr	r2, [pc, #324]	; (8003c30 <HAL_GPIO_Init+0x308>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d01f      	beq.n	8003b30 <HAL_GPIO_Init+0x208>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a50      	ldr	r2, [pc, #320]	; (8003c34 <HAL_GPIO_Init+0x30c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d019      	beq.n	8003b2c <HAL_GPIO_Init+0x204>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a4f      	ldr	r2, [pc, #316]	; (8003c38 <HAL_GPIO_Init+0x310>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d013      	beq.n	8003b28 <HAL_GPIO_Init+0x200>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a4e      	ldr	r2, [pc, #312]	; (8003c3c <HAL_GPIO_Init+0x314>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00d      	beq.n	8003b24 <HAL_GPIO_Init+0x1fc>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a4d      	ldr	r2, [pc, #308]	; (8003c40 <HAL_GPIO_Init+0x318>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d007      	beq.n	8003b20 <HAL_GPIO_Init+0x1f8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a4c      	ldr	r2, [pc, #304]	; (8003c44 <HAL_GPIO_Init+0x31c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d101      	bne.n	8003b1c <HAL_GPIO_Init+0x1f4>
 8003b18:	2307      	movs	r3, #7
 8003b1a:	e00e      	b.n	8003b3a <HAL_GPIO_Init+0x212>
 8003b1c:	2308      	movs	r3, #8
 8003b1e:	e00c      	b.n	8003b3a <HAL_GPIO_Init+0x212>
 8003b20:	2306      	movs	r3, #6
 8003b22:	e00a      	b.n	8003b3a <HAL_GPIO_Init+0x212>
 8003b24:	2305      	movs	r3, #5
 8003b26:	e008      	b.n	8003b3a <HAL_GPIO_Init+0x212>
 8003b28:	2304      	movs	r3, #4
 8003b2a:	e006      	b.n	8003b3a <HAL_GPIO_Init+0x212>
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e004      	b.n	8003b3a <HAL_GPIO_Init+0x212>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e002      	b.n	8003b3a <HAL_GPIO_Init+0x212>
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <HAL_GPIO_Init+0x212>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	f002 0203 	and.w	r2, r2, #3
 8003b40:	0092      	lsls	r2, r2, #2
 8003b42:	4093      	lsls	r3, r2
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b4a:	4937      	ldr	r1, [pc, #220]	; (8003c28 <HAL_GPIO_Init+0x300>)
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	089b      	lsrs	r3, r3, #2
 8003b50:	3302      	adds	r3, #2
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b58:	4b3b      	ldr	r3, [pc, #236]	; (8003c48 <HAL_GPIO_Init+0x320>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	43db      	mvns	r3, r3
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b7c:	4a32      	ldr	r2, [pc, #200]	; (8003c48 <HAL_GPIO_Init+0x320>)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b82:	4b31      	ldr	r3, [pc, #196]	; (8003c48 <HAL_GPIO_Init+0x320>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ba6:	4a28      	ldr	r2, [pc, #160]	; (8003c48 <HAL_GPIO_Init+0x320>)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bac:	4b26      	ldr	r3, [pc, #152]	; (8003c48 <HAL_GPIO_Init+0x320>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bd0:	4a1d      	ldr	r2, [pc, #116]	; (8003c48 <HAL_GPIO_Init+0x320>)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003bd6:	4b1c      	ldr	r3, [pc, #112]	; (8003c48 <HAL_GPIO_Init+0x320>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	43db      	mvns	r3, r3
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4013      	ands	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bfa:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <HAL_GPIO_Init+0x320>)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	3301      	adds	r3, #1
 8003c04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f47f ae91 	bne.w	8003938 <HAL_GPIO_Init+0x10>
  }
}
 8003c16:	bf00      	nop
 8003c18:	bf00      	nop
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40010000 	.word	0x40010000
 8003c2c:	48000400 	.word	0x48000400
 8003c30:	48000800 	.word	0x48000800
 8003c34:	48000c00 	.word	0x48000c00
 8003c38:	48001000 	.word	0x48001000
 8003c3c:	48001400 	.word	0x48001400
 8003c40:	48001800 	.word	0x48001800
 8003c44:	48001c00 	.word	0x48001c00
 8003c48:	40010400 	.word	0x40010400

08003c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	807b      	strh	r3, [r7, #2]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c5c:	787b      	ldrb	r3, [r7, #1]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c62:	887a      	ldrh	r2, [r7, #2]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c68:	e002      	b.n	8003c70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c6a:	887a      	ldrh	r2, [r7, #2]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c80:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8c:	d102      	bne.n	8003c94 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c92:	e00b      	b.n	8003cac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003c94:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca2:	d102      	bne.n	8003caa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ca8:	e000      	b.n	8003cac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003caa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40007000 	.word	0x40007000

08003cbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d141      	bne.n	8003d4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cca:	4b4b      	ldr	r3, [pc, #300]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd6:	d131      	bne.n	8003d3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cd8:	4b47      	ldr	r3, [pc, #284]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cde:	4a46      	ldr	r2, [pc, #280]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ce8:	4b43      	ldr	r3, [pc, #268]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cf0:	4a41      	ldr	r2, [pc, #260]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cf6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003cf8:	4b40      	ldr	r3, [pc, #256]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2232      	movs	r2, #50	; 0x32
 8003cfe:	fb02 f303 	mul.w	r3, r2, r3
 8003d02:	4a3f      	ldr	r2, [pc, #252]	; (8003e00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d04:	fba2 2303 	umull	r2, r3, r2, r3
 8003d08:	0c9b      	lsrs	r3, r3, #18
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d0e:	e002      	b.n	8003d16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d16:	4b38      	ldr	r3, [pc, #224]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d22:	d102      	bne.n	8003d2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f2      	bne.n	8003d10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d2a:	4b33      	ldr	r3, [pc, #204]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d36:	d158      	bne.n	8003dea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e057      	b.n	8003dec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d3c:	4b2e      	ldr	r3, [pc, #184]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d42:	4a2d      	ldr	r2, [pc, #180]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d4c:	e04d      	b.n	8003dea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d54:	d141      	bne.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d56:	4b28      	ldr	r3, [pc, #160]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d62:	d131      	bne.n	8003dc8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d64:	4b24      	ldr	r3, [pc, #144]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d6a:	4a23      	ldr	r2, [pc, #140]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d74:	4b20      	ldr	r3, [pc, #128]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d7c:	4a1e      	ldr	r2, [pc, #120]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d84:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2232      	movs	r2, #50	; 0x32
 8003d8a:	fb02 f303 	mul.w	r3, r2, r3
 8003d8e:	4a1c      	ldr	r2, [pc, #112]	; (8003e00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d90:	fba2 2303 	umull	r2, r3, r2, r3
 8003d94:	0c9b      	lsrs	r3, r3, #18
 8003d96:	3301      	adds	r3, #1
 8003d98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d9a:	e002      	b.n	8003da2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003da2:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dae:	d102      	bne.n	8003db6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f2      	bne.n	8003d9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003db6:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc2:	d112      	bne.n	8003dea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e011      	b.n	8003dec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dce:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003dd8:	e007      	b.n	8003dea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dda:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003de2:	4a05      	ldr	r2, [pc, #20]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003de8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	40007000 	.word	0x40007000
 8003dfc:	20000000 	.word	0x20000000
 8003e00:	431bde83 	.word	0x431bde83

08003e04 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003e08:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	4a04      	ldr	r2, [pc, #16]	; (8003e20 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e12:	6053      	str	r3, [r2, #4]
}
 8003e14:	bf00      	nop
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40007000 	.word	0x40007000

08003e24 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b088      	sub	sp, #32
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	f000 bc08 	b.w	8004648 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e38:	4b96      	ldr	r3, [pc, #600]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 030c 	and.w	r3, r3, #12
 8003e40:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e42:	4b94      	ldr	r3, [pc, #592]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80e4 	beq.w	8004022 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <HAL_RCC_OscConfig+0x4c>
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	2b0c      	cmp	r3, #12
 8003e64:	f040 808b 	bne.w	8003f7e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	f040 8087 	bne.w	8003f7e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e70:	4b88      	ldr	r3, [pc, #544]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_RCC_OscConfig+0x64>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e3df      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1a      	ldr	r2, [r3, #32]
 8003e8c:	4b81      	ldr	r3, [pc, #516]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d004      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x7e>
 8003e98:	4b7e      	ldr	r3, [pc, #504]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ea0:	e005      	b.n	8003eae <HAL_RCC_OscConfig+0x8a>
 8003ea2:	4b7c      	ldr	r3, [pc, #496]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d223      	bcs.n	8003efa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fdcc 	bl	8004a54 <RCC_SetFlashLatencyFromMSIRange>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e3c0      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ec6:	4b73      	ldr	r3, [pc, #460]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a72      	ldr	r2, [pc, #456]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003ecc:	f043 0308 	orr.w	r3, r3, #8
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	4b70      	ldr	r3, [pc, #448]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	496d      	ldr	r1, [pc, #436]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ee4:	4b6b      	ldr	r3, [pc, #428]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	4968      	ldr	r1, [pc, #416]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	604b      	str	r3, [r1, #4]
 8003ef8:	e025      	b.n	8003f46 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003efa:	4b66      	ldr	r3, [pc, #408]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a65      	ldr	r2, [pc, #404]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003f00:	f043 0308 	orr.w	r3, r3, #8
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	4b63      	ldr	r3, [pc, #396]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	4960      	ldr	r1, [pc, #384]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f18:	4b5e      	ldr	r3, [pc, #376]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	495b      	ldr	r1, [pc, #364]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fd8c 	bl	8004a54 <RCC_SetFlashLatencyFromMSIRange>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e380      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f46:	f000 fcc1 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	4b51      	ldr	r3, [pc, #324]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	4950      	ldr	r1, [pc, #320]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003f58:	5ccb      	ldrb	r3, [r1, r3]
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f62:	4a4e      	ldr	r2, [pc, #312]	; (800409c <HAL_RCC_OscConfig+0x278>)
 8003f64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f66:	4b4e      	ldr	r3, [pc, #312]	; (80040a0 <HAL_RCC_OscConfig+0x27c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe fa42 	bl	80023f4 <HAL_InitTick>
 8003f70:	4603      	mov	r3, r0
 8003f72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d052      	beq.n	8004020 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	e364      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d032      	beq.n	8003fec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f86:	4b43      	ldr	r3, [pc, #268]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a42      	ldr	r2, [pc, #264]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f92:	f7fe fa7f 	bl	8002494 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f9a:	f7fe fa7b 	bl	8002494 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e34d      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fac:	4b39      	ldr	r3, [pc, #228]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0f0      	beq.n	8003f9a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fb8:	4b36      	ldr	r3, [pc, #216]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a35      	ldr	r2, [pc, #212]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003fbe:	f043 0308 	orr.w	r3, r3, #8
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	4b33      	ldr	r3, [pc, #204]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	4930      	ldr	r1, [pc, #192]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fd6:	4b2f      	ldr	r3, [pc, #188]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	492b      	ldr	r1, [pc, #172]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	604b      	str	r3, [r1, #4]
 8003fea:	e01a      	b.n	8004022 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fec:	4b29      	ldr	r3, [pc, #164]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a28      	ldr	r2, [pc, #160]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8003ff2:	f023 0301 	bic.w	r3, r3, #1
 8003ff6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ff8:	f7fe fa4c 	bl	8002494 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004000:	f7fe fa48 	bl	8002494 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e31a      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004012:	4b20      	ldr	r3, [pc, #128]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x1dc>
 800401e:	e000      	b.n	8004022 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004020:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d073      	beq.n	8004116 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d005      	beq.n	8004040 <HAL_RCC_OscConfig+0x21c>
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b0c      	cmp	r3, #12
 8004038:	d10e      	bne.n	8004058 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b03      	cmp	r3, #3
 800403e:	d10b      	bne.n	8004058 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004040:	4b14      	ldr	r3, [pc, #80]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d063      	beq.n	8004114 <HAL_RCC_OscConfig+0x2f0>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d15f      	bne.n	8004114 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e2f7      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004060:	d106      	bne.n	8004070 <HAL_RCC_OscConfig+0x24c>
 8004062:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a0b      	ldr	r2, [pc, #44]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8004068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	e025      	b.n	80040bc <HAL_RCC_OscConfig+0x298>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004078:	d114      	bne.n	80040a4 <HAL_RCC_OscConfig+0x280>
 800407a:	4b06      	ldr	r3, [pc, #24]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a05      	ldr	r2, [pc, #20]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8004080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	4b03      	ldr	r3, [pc, #12]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a02      	ldr	r2, [pc, #8]	; (8004094 <HAL_RCC_OscConfig+0x270>)
 800408c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e013      	b.n	80040bc <HAL_RCC_OscConfig+0x298>
 8004094:	40021000 	.word	0x40021000
 8004098:	080093ac 	.word	0x080093ac
 800409c:	20000000 	.word	0x20000000
 80040a0:	20000004 	.word	0x20000004
 80040a4:	4ba0      	ldr	r3, [pc, #640]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a9f      	ldr	r2, [pc, #636]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 80040aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	4b9d      	ldr	r3, [pc, #628]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a9c      	ldr	r2, [pc, #624]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 80040b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d013      	beq.n	80040ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fe f9e6 	bl	8002494 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040cc:	f7fe f9e2 	bl	8002494 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	; 0x64
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e2b4      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040de:	4b92      	ldr	r3, [pc, #584]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0x2a8>
 80040ea:	e014      	b.n	8004116 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fe f9d2 	bl	8002494 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f4:	f7fe f9ce 	bl	8002494 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b64      	cmp	r3, #100	; 0x64
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e2a0      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004106:	4b88      	ldr	r3, [pc, #544]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x2d0>
 8004112:	e000      	b.n	8004116 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d060      	beq.n	80041e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2b04      	cmp	r3, #4
 8004126:	d005      	beq.n	8004134 <HAL_RCC_OscConfig+0x310>
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	2b0c      	cmp	r3, #12
 800412c:	d119      	bne.n	8004162 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d116      	bne.n	8004162 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004134:	4b7c      	ldr	r3, [pc, #496]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_RCC_OscConfig+0x328>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e27d      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414c:	4b76      	ldr	r3, [pc, #472]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	061b      	lsls	r3, r3, #24
 800415a:	4973      	ldr	r1, [pc, #460]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 800415c:	4313      	orrs	r3, r2
 800415e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004160:	e040      	b.n	80041e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d023      	beq.n	80041b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800416a:	4b6f      	ldr	r3, [pc, #444]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a6e      	ldr	r2, [pc, #440]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 8004170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004176:	f7fe f98d 	bl	8002494 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417e:	f7fe f989 	bl	8002494 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e25b      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004190:	4b65      	ldr	r3, [pc, #404]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419c:	4b62      	ldr	r3, [pc, #392]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	061b      	lsls	r3, r3, #24
 80041aa:	495f      	ldr	r1, [pc, #380]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	604b      	str	r3, [r1, #4]
 80041b0:	e018      	b.n	80041e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b2:	4b5d      	ldr	r3, [pc, #372]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a5c      	ldr	r2, [pc, #368]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 80041b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041be:	f7fe f969 	bl	8002494 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c6:	f7fe f965 	bl	8002494 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e237      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d8:	4b53      	ldr	r3, [pc, #332]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f0      	bne.n	80041c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d03c      	beq.n	800426a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01c      	beq.n	8004232 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f8:	4b4b      	ldr	r3, [pc, #300]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 80041fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041fe:	4a4a      	ldr	r2, [pc, #296]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 8004200:	f043 0301 	orr.w	r3, r3, #1
 8004204:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004208:	f7fe f944 	bl	8002494 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004210:	f7fe f940 	bl	8002494 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e212      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004222:	4b41      	ldr	r3, [pc, #260]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 8004224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0ef      	beq.n	8004210 <HAL_RCC_OscConfig+0x3ec>
 8004230:	e01b      	b.n	800426a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004232:	4b3d      	ldr	r3, [pc, #244]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 8004234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004238:	4a3b      	ldr	r2, [pc, #236]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004242:	f7fe f927 	bl	8002494 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800424a:	f7fe f923 	bl	8002494 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e1f5      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800425c:	4b32      	ldr	r3, [pc, #200]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 800425e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1ef      	bne.n	800424a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 80a6 	beq.w	80043c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004278:	2300      	movs	r3, #0
 800427a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800427c:	4b2a      	ldr	r3, [pc, #168]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 800427e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10d      	bne.n	80042a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004288:	4b27      	ldr	r3, [pc, #156]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 800428a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428c:	4a26      	ldr	r2, [pc, #152]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 800428e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004292:	6593      	str	r3, [r2, #88]	; 0x58
 8004294:	4b24      	ldr	r3, [pc, #144]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 8004296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a0:	2301      	movs	r3, #1
 80042a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042a4:	4b21      	ldr	r3, [pc, #132]	; (800432c <HAL_RCC_OscConfig+0x508>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d118      	bne.n	80042e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042b0:	4b1e      	ldr	r3, [pc, #120]	; (800432c <HAL_RCC_OscConfig+0x508>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1d      	ldr	r2, [pc, #116]	; (800432c <HAL_RCC_OscConfig+0x508>)
 80042b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042bc:	f7fe f8ea 	bl	8002494 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c4:	f7fe f8e6 	bl	8002494 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e1b8      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d6:	4b15      	ldr	r3, [pc, #84]	; (800432c <HAL_RCC_OscConfig+0x508>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d108      	bne.n	80042fc <HAL_RCC_OscConfig+0x4d8>
 80042ea:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f0:	4a0d      	ldr	r2, [pc, #52]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042fa:	e029      	b.n	8004350 <HAL_RCC_OscConfig+0x52c>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2b05      	cmp	r3, #5
 8004302:	d115      	bne.n	8004330 <HAL_RCC_OscConfig+0x50c>
 8004304:	4b08      	ldr	r3, [pc, #32]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430a:	4a07      	ldr	r2, [pc, #28]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 800430c:	f043 0304 	orr.w	r3, r3, #4
 8004310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	4a03      	ldr	r2, [pc, #12]	; (8004328 <HAL_RCC_OscConfig+0x504>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004324:	e014      	b.n	8004350 <HAL_RCC_OscConfig+0x52c>
 8004326:	bf00      	nop
 8004328:	40021000 	.word	0x40021000
 800432c:	40007000 	.word	0x40007000
 8004330:	4b9d      	ldr	r3, [pc, #628]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004336:	4a9c      	ldr	r2, [pc, #624]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004340:	4b99      	ldr	r3, [pc, #612]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	4a98      	ldr	r2, [pc, #608]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 8004348:	f023 0304 	bic.w	r3, r3, #4
 800434c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d016      	beq.n	8004386 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004358:	f7fe f89c 	bl	8002494 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800435e:	e00a      	b.n	8004376 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004360:	f7fe f898 	bl	8002494 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f241 3288 	movw	r2, #5000	; 0x1388
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e168      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004376:	4b8c      	ldr	r3, [pc, #560]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0ed      	beq.n	8004360 <HAL_RCC_OscConfig+0x53c>
 8004384:	e015      	b.n	80043b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004386:	f7fe f885 	bl	8002494 <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800438c:	e00a      	b.n	80043a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438e:	f7fe f881 	bl	8002494 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	f241 3288 	movw	r2, #5000	; 0x1388
 800439c:	4293      	cmp	r3, r2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e151      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043a4:	4b80      	ldr	r3, [pc, #512]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1ed      	bne.n	800438e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043b2:	7ffb      	ldrb	r3, [r7, #31]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d105      	bne.n	80043c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b8:	4b7b      	ldr	r3, [pc, #492]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	4a7a      	ldr	r2, [pc, #488]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 80043be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d03c      	beq.n	800444a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01c      	beq.n	8004412 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043d8:	4b73      	ldr	r3, [pc, #460]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 80043da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043de:	4a72      	ldr	r2, [pc, #456]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e8:	f7fe f854 	bl	8002494 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043f0:	f7fe f850 	bl	8002494 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e122      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004402:	4b69      	ldr	r3, [pc, #420]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 8004404:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0ef      	beq.n	80043f0 <HAL_RCC_OscConfig+0x5cc>
 8004410:	e01b      	b.n	800444a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004412:	4b65      	ldr	r3, [pc, #404]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 8004414:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004418:	4a63      	ldr	r2, [pc, #396]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004422:	f7fe f837 	bl	8002494 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800442a:	f7fe f833 	bl	8002494 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e105      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800443c:	4b5a      	ldr	r3, [pc, #360]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 800443e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1ef      	bne.n	800442a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 80f9 	beq.w	8004646 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	2b02      	cmp	r3, #2
 800445a:	f040 80cf 	bne.w	80045fc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800445e:	4b52      	ldr	r3, [pc, #328]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f003 0203 	and.w	r2, r3, #3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	429a      	cmp	r2, r3
 8004470:	d12c      	bne.n	80044cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	3b01      	subs	r3, #1
 800447e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004480:	429a      	cmp	r2, r3
 8004482:	d123      	bne.n	80044cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d11b      	bne.n	80044cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d113      	bne.n	80044cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	085b      	lsrs	r3, r3, #1
 80044b0:	3b01      	subs	r3, #1
 80044b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d109      	bne.n	80044cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	085b      	lsrs	r3, r3, #1
 80044c4:	3b01      	subs	r3, #1
 80044c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d071      	beq.n	80045b0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2b0c      	cmp	r3, #12
 80044d0:	d068      	beq.n	80045a4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044d2:	4b35      	ldr	r3, [pc, #212]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d105      	bne.n	80044ea <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80044de:	4b32      	ldr	r3, [pc, #200]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e0ac      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044ee:	4b2e      	ldr	r3, [pc, #184]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a2d      	ldr	r2, [pc, #180]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 80044f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044fa:	f7fd ffcb 	bl	8002494 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004502:	f7fd ffc7 	bl	8002494 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e099      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004514:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f0      	bne.n	8004502 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004520:	4b21      	ldr	r3, [pc, #132]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	4b21      	ldr	r3, [pc, #132]	; (80045ac <HAL_RCC_OscConfig+0x788>)
 8004526:	4013      	ands	r3, r2
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004530:	3a01      	subs	r2, #1
 8004532:	0112      	lsls	r2, r2, #4
 8004534:	4311      	orrs	r1, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800453a:	0212      	lsls	r2, r2, #8
 800453c:	4311      	orrs	r1, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004542:	0852      	lsrs	r2, r2, #1
 8004544:	3a01      	subs	r2, #1
 8004546:	0552      	lsls	r2, r2, #21
 8004548:	4311      	orrs	r1, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800454e:	0852      	lsrs	r2, r2, #1
 8004550:	3a01      	subs	r2, #1
 8004552:	0652      	lsls	r2, r2, #25
 8004554:	4311      	orrs	r1, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800455a:	06d2      	lsls	r2, r2, #27
 800455c:	430a      	orrs	r2, r1
 800455e:	4912      	ldr	r1, [pc, #72]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 8004560:	4313      	orrs	r3, r2
 8004562:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004564:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a0f      	ldr	r2, [pc, #60]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 800456a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800456e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004570:	4b0d      	ldr	r3, [pc, #52]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	4a0c      	ldr	r2, [pc, #48]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 8004576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800457a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800457c:	f7fd ff8a 	bl	8002494 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004584:	f7fd ff86 	bl	8002494 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e058      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004596:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <HAL_RCC_OscConfig+0x784>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045a2:	e050      	b.n	8004646 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e04f      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
 80045a8:	40021000 	.word	0x40021000
 80045ac:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b0:	4b27      	ldr	r3, [pc, #156]	; (8004650 <HAL_RCC_OscConfig+0x82c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d144      	bne.n	8004646 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045bc:	4b24      	ldr	r3, [pc, #144]	; (8004650 <HAL_RCC_OscConfig+0x82c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a23      	ldr	r2, [pc, #140]	; (8004650 <HAL_RCC_OscConfig+0x82c>)
 80045c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045c8:	4b21      	ldr	r3, [pc, #132]	; (8004650 <HAL_RCC_OscConfig+0x82c>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4a20      	ldr	r2, [pc, #128]	; (8004650 <HAL_RCC_OscConfig+0x82c>)
 80045ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045d4:	f7fd ff5e 	bl	8002494 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045dc:	f7fd ff5a 	bl	8002494 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e02c      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ee:	4b18      	ldr	r3, [pc, #96]	; (8004650 <HAL_RCC_OscConfig+0x82c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0f0      	beq.n	80045dc <HAL_RCC_OscConfig+0x7b8>
 80045fa:	e024      	b.n	8004646 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b0c      	cmp	r3, #12
 8004600:	d01f      	beq.n	8004642 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004602:	4b13      	ldr	r3, [pc, #76]	; (8004650 <HAL_RCC_OscConfig+0x82c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a12      	ldr	r2, [pc, #72]	; (8004650 <HAL_RCC_OscConfig+0x82c>)
 8004608:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800460c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460e:	f7fd ff41 	bl	8002494 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004616:	f7fd ff3d 	bl	8002494 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e00f      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004628:	4b09      	ldr	r3, [pc, #36]	; (8004650 <HAL_RCC_OscConfig+0x82c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1f0      	bne.n	8004616 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004634:	4b06      	ldr	r3, [pc, #24]	; (8004650 <HAL_RCC_OscConfig+0x82c>)
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	4905      	ldr	r1, [pc, #20]	; (8004650 <HAL_RCC_OscConfig+0x82c>)
 800463a:	4b06      	ldr	r3, [pc, #24]	; (8004654 <HAL_RCC_OscConfig+0x830>)
 800463c:	4013      	ands	r3, r2
 800463e:	60cb      	str	r3, [r1, #12]
 8004640:	e001      	b.n	8004646 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40021000 	.word	0x40021000
 8004654:	feeefffc 	.word	0xfeeefffc

08004658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e11d      	b.n	80048ac <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004670:	4b90      	ldr	r3, [pc, #576]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d910      	bls.n	80046a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467e:	4b8d      	ldr	r3, [pc, #564]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 020f 	bic.w	r2, r3, #15
 8004686:	498b      	ldr	r1, [pc, #556]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	4b89      	ldr	r3, [pc, #548]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e105      	b.n	80048ac <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d010      	beq.n	80046ce <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	4b81      	ldr	r3, [pc, #516]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d908      	bls.n	80046ce <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046bc:	4b7e      	ldr	r3, [pc, #504]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	497b      	ldr	r1, [pc, #492]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d079      	beq.n	80047ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d11e      	bne.n	8004720 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e2:	4b75      	ldr	r3, [pc, #468]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e0dc      	b.n	80048ac <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80046f2:	f000 fa09 	bl	8004b08 <RCC_GetSysClockFreqFromPLLSource>
 80046f6:	4603      	mov	r3, r0
 80046f8:	4a70      	ldr	r2, [pc, #448]	; (80048bc <HAL_RCC_ClockConfig+0x264>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d946      	bls.n	800478c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80046fe:	4b6e      	ldr	r3, [pc, #440]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d140      	bne.n	800478c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800470a:	4b6b      	ldr	r3, [pc, #428]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004712:	4a69      	ldr	r2, [pc, #420]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004718:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800471a:	2380      	movs	r3, #128	; 0x80
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	e035      	b.n	800478c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d107      	bne.n	8004738 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004728:	4b63      	ldr	r3, [pc, #396]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d115      	bne.n	8004760 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0b9      	b.n	80048ac <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d107      	bne.n	8004750 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004740:	4b5d      	ldr	r3, [pc, #372]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d109      	bne.n	8004760 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e0ad      	b.n	80048ac <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004750:	4b59      	ldr	r3, [pc, #356]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0a5      	b.n	80048ac <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004760:	f000 f8b4 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8004764:	4603      	mov	r3, r0
 8004766:	4a55      	ldr	r2, [pc, #340]	; (80048bc <HAL_RCC_ClockConfig+0x264>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d90f      	bls.n	800478c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800476c:	4b52      	ldr	r3, [pc, #328]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d109      	bne.n	800478c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004778:	4b4f      	ldr	r3, [pc, #316]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004780:	4a4d      	ldr	r2, [pc, #308]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004786:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800478c:	4b4a      	ldr	r3, [pc, #296]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f023 0203 	bic.w	r2, r3, #3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	4947      	ldr	r1, [pc, #284]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800479a:	4313      	orrs	r3, r2
 800479c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800479e:	f7fd fe79 	bl	8002494 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a4:	e00a      	b.n	80047bc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a6:	f7fd fe75 	bl	8002494 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e077      	b.n	80048ac <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047bc:	4b3e      	ldr	r3, [pc, #248]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 020c 	and.w	r2, r3, #12
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d1eb      	bne.n	80047a6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2b80      	cmp	r3, #128	; 0x80
 80047d2:	d105      	bne.n	80047e0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80047d4:	4b38      	ldr	r3, [pc, #224]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	4a37      	ldr	r2, [pc, #220]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80047da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047de:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d010      	beq.n	800480e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	4b31      	ldr	r3, [pc, #196]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d208      	bcs.n	800480e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047fc:	4b2e      	ldr	r3, [pc, #184]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	492b      	ldr	r1, [pc, #172]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800480a:	4313      	orrs	r3, r2
 800480c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800480e:	4b29      	ldr	r3, [pc, #164]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d210      	bcs.n	800483e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481c:	4b25      	ldr	r3, [pc, #148]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f023 020f 	bic.w	r2, r3, #15
 8004824:	4923      	ldr	r1, [pc, #140]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	4313      	orrs	r3, r2
 800482a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482c:	4b21      	ldr	r3, [pc, #132]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d001      	beq.n	800483e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e036      	b.n	80048ac <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800484a:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	4918      	ldr	r1, [pc, #96]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004858:	4313      	orrs	r3, r2
 800485a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d009      	beq.n	800487c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004868:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	4910      	ldr	r1, [pc, #64]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004878:	4313      	orrs	r3, r2
 800487a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800487c:	f000 f826 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8004880:	4602      	mov	r2, r0
 8004882:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	091b      	lsrs	r3, r3, #4
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	490c      	ldr	r1, [pc, #48]	; (80048c0 <HAL_RCC_ClockConfig+0x268>)
 800488e:	5ccb      	ldrb	r3, [r1, r3]
 8004890:	f003 031f 	and.w	r3, r3, #31
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
 8004898:	4a0a      	ldr	r2, [pc, #40]	; (80048c4 <HAL_RCC_ClockConfig+0x26c>)
 800489a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <HAL_RCC_ClockConfig+0x270>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fd fda7 	bl	80023f4 <HAL_InitTick>
 80048a6:	4603      	mov	r3, r0
 80048a8:	73fb      	strb	r3, [r7, #15]

  return status;
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40022000 	.word	0x40022000
 80048b8:	40021000 	.word	0x40021000
 80048bc:	04c4b400 	.word	0x04c4b400
 80048c0:	080093ac 	.word	0x080093ac
 80048c4:	20000000 	.word	0x20000000
 80048c8:	20000004 	.word	0x20000004

080048cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b089      	sub	sp, #36	; 0x24
 80048d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
 80048d6:	2300      	movs	r3, #0
 80048d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048da:	4b3e      	ldr	r3, [pc, #248]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 030c 	and.w	r3, r3, #12
 80048e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048e4:	4b3b      	ldr	r3, [pc, #236]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0303 	and.w	r3, r3, #3
 80048ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_RCC_GetSysClockFreq+0x34>
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2b0c      	cmp	r3, #12
 80048f8:	d121      	bne.n	800493e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d11e      	bne.n	800493e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004900:	4b34      	ldr	r3, [pc, #208]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d107      	bne.n	800491c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800490c:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800490e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004912:	0a1b      	lsrs	r3, r3, #8
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	e005      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800491c:	4b2d      	ldr	r3, [pc, #180]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004928:	4a2b      	ldr	r2, [pc, #172]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004930:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10d      	bne.n	8004954 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800493c:	e00a      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b04      	cmp	r3, #4
 8004942:	d102      	bne.n	800494a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004944:	4b25      	ldr	r3, [pc, #148]	; (80049dc <HAL_RCC_GetSysClockFreq+0x110>)
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	e004      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d101      	bne.n	8004954 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004950:	4b23      	ldr	r3, [pc, #140]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004952:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2b0c      	cmp	r3, #12
 8004958:	d134      	bne.n	80049c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800495a:	4b1e      	ldr	r3, [pc, #120]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d003      	beq.n	8004972 <HAL_RCC_GetSysClockFreq+0xa6>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b03      	cmp	r3, #3
 800496e:	d003      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0xac>
 8004970:	e005      	b.n	800497e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004972:	4b1a      	ldr	r3, [pc, #104]	; (80049dc <HAL_RCC_GetSysClockFreq+0x110>)
 8004974:	617b      	str	r3, [r7, #20]
      break;
 8004976:	e005      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800497a:	617b      	str	r3, [r7, #20]
      break;
 800497c:	e002      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	617b      	str	r3, [r7, #20]
      break;
 8004982:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004984:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	3301      	adds	r3, #1
 8004990:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004992:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	0a1b      	lsrs	r3, r3, #8
 8004998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	fb03 f202 	mul.w	r2, r3, r2
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	0e5b      	lsrs	r3, r3, #25
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	3301      	adds	r3, #1
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049c4:	69bb      	ldr	r3, [r7, #24]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3724      	adds	r7, #36	; 0x24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40021000 	.word	0x40021000
 80049d8:	080093c4 	.word	0x080093c4
 80049dc:	00f42400 	.word	0x00f42400
 80049e0:	007a1200 	.word	0x007a1200

080049e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e8:	4b03      	ldr	r3, [pc, #12]	; (80049f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80049ea:	681b      	ldr	r3, [r3, #0]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	20000000 	.word	0x20000000

080049fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a00:	f7ff fff0 	bl	80049e4 <HAL_RCC_GetHCLKFreq>
 8004a04:	4602      	mov	r2, r0
 8004a06:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	4904      	ldr	r1, [pc, #16]	; (8004a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a12:	5ccb      	ldrb	r3, [r1, r3]
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40021000 	.word	0x40021000
 8004a24:	080093bc 	.word	0x080093bc

08004a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a2c:	f7ff ffda 	bl	80049e4 <HAL_RCC_GetHCLKFreq>
 8004a30:	4602      	mov	r2, r0
 8004a32:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	0adb      	lsrs	r3, r3, #11
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	4904      	ldr	r1, [pc, #16]	; (8004a50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a3e:	5ccb      	ldrb	r3, [r1, r3]
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	080093bc 	.word	0x080093bc

08004a54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a60:	4b27      	ldr	r3, [pc, #156]	; (8004b00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a6c:	f7ff f906 	bl	8003c7c <HAL_PWREx_GetVoltageRange>
 8004a70:	6178      	str	r0, [r7, #20]
 8004a72:	e014      	b.n	8004a9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a74:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a78:	4a21      	ldr	r2, [pc, #132]	; (8004b00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a80:	4b1f      	ldr	r3, [pc, #124]	; (8004b00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a8c:	f7ff f8f6 	bl	8003c7c <HAL_PWREx_GetVoltageRange>
 8004a90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a92:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a96:	4a1a      	ldr	r2, [pc, #104]	; (8004b00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa4:	d10b      	bne.n	8004abe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b80      	cmp	r3, #128	; 0x80
 8004aaa:	d913      	bls.n	8004ad4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2ba0      	cmp	r3, #160	; 0xa0
 8004ab0:	d902      	bls.n	8004ab8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	e00d      	b.n	8004ad4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ab8:	2301      	movs	r3, #1
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	e00a      	b.n	8004ad4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ac2:	d902      	bls.n	8004aca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	e004      	b.n	8004ad4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b70      	cmp	r3, #112	; 0x70
 8004ace:	d101      	bne.n	8004ad4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f023 020f 	bic.w	r2, r3, #15
 8004adc:	4909      	ldr	r1, [pc, #36]	; (8004b04 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ae4:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d001      	beq.n	8004af6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40021000 	.word	0x40021000
 8004b04:	40022000 	.word	0x40022000

08004b08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b0e:	4b2d      	ldr	r3, [pc, #180]	; (8004bc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b03      	cmp	r3, #3
 8004b1c:	d00b      	beq.n	8004b36 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d825      	bhi.n	8004b70 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d008      	beq.n	8004b3c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d11f      	bne.n	8004b70 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004b30:	4b25      	ldr	r3, [pc, #148]	; (8004bc8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b32:	613b      	str	r3, [r7, #16]
    break;
 8004b34:	e01f      	b.n	8004b76 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004b36:	4b25      	ldr	r3, [pc, #148]	; (8004bcc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004b38:	613b      	str	r3, [r7, #16]
    break;
 8004b3a:	e01c      	b.n	8004b76 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b3c:	4b21      	ldr	r3, [pc, #132]	; (8004bc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d107      	bne.n	8004b58 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b48:	4b1e      	ldr	r3, [pc, #120]	; (8004bc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b4e:	0a1b      	lsrs	r3, r3, #8
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	e005      	b.n	8004b64 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b58:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004b64:	4a1a      	ldr	r2, [pc, #104]	; (8004bd0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6c:	613b      	str	r3, [r7, #16]
    break;
 8004b6e:	e002      	b.n	8004b76 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004b70:	2300      	movs	r3, #0
 8004b72:	613b      	str	r3, [r7, #16]
    break;
 8004b74:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b76:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	091b      	lsrs	r3, r3, #4
 8004b7c:	f003 030f 	and.w	r3, r3, #15
 8004b80:	3301      	adds	r3, #1
 8004b82:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b84:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	0a1b      	lsrs	r3, r3, #8
 8004b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	fb03 f202 	mul.w	r2, r3, r2
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	0e5b      	lsrs	r3, r3, #25
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004bb6:	683b      	ldr	r3, [r7, #0]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	00f42400 	.word	0x00f42400
 8004bcc:	007a1200 	.word	0x007a1200
 8004bd0:	080093c4 	.word	0x080093c4

08004bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bdc:	2300      	movs	r3, #0
 8004bde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004be0:	2300      	movs	r3, #0
 8004be2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d040      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bf4:	2b80      	cmp	r3, #128	; 0x80
 8004bf6:	d02a      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004bf8:	2b80      	cmp	r3, #128	; 0x80
 8004bfa:	d825      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004bfc:	2b60      	cmp	r3, #96	; 0x60
 8004bfe:	d026      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c00:	2b60      	cmp	r3, #96	; 0x60
 8004c02:	d821      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c04:	2b40      	cmp	r3, #64	; 0x40
 8004c06:	d006      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004c08:	2b40      	cmp	r3, #64	; 0x40
 8004c0a:	d81d      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d009      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	d010      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004c14:	e018      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c16:	4b89      	ldr	r3, [pc, #548]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	4a88      	ldr	r2, [pc, #544]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c20:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c22:	e015      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3304      	adds	r3, #4
 8004c28:	2100      	movs	r1, #0
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f001 fa24 	bl	8006078 <RCCEx_PLLSAI1_Config>
 8004c30:	4603      	mov	r3, r0
 8004c32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c34:	e00c      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3320      	adds	r3, #32
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f001 fb0f 	bl	8006260 <RCCEx_PLLSAI2_Config>
 8004c42:	4603      	mov	r3, r0
 8004c44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c46:	e003      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	74fb      	strb	r3, [r7, #19]
      break;
 8004c4c:	e000      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c50:	7cfb      	ldrb	r3, [r7, #19]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10b      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c56:	4b79      	ldr	r3, [pc, #484]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c5c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c64:	4975      	ldr	r1, [pc, #468]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004c6c:	e001      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6e:	7cfb      	ldrb	r3, [r7, #19]
 8004c70:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d047      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c86:	d030      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8c:	d82a      	bhi.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004c8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c92:	d02a      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004c94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c98:	d824      	bhi.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c9e:	d008      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca4:	d81e      	bhi.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cae:	d010      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004cb0:	e018      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cb2:	4b62      	ldr	r3, [pc, #392]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	4a61      	ldr	r2, [pc, #388]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cbc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cbe:	e015      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f001 f9d6 	bl	8006078 <RCCEx_PLLSAI1_Config>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cd0:	e00c      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3320      	adds	r3, #32
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f001 fac1 	bl	8006260 <RCCEx_PLLSAI2_Config>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ce2:	e003      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	74fb      	strb	r3, [r7, #19]
      break;
 8004ce8:	e000      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cec:	7cfb      	ldrb	r3, [r7, #19]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10b      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cf2:	4b52      	ldr	r3, [pc, #328]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d00:	494e      	ldr	r1, [pc, #312]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004d08:	e001      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0a:	7cfb      	ldrb	r3, [r7, #19]
 8004d0c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 809f 	beq.w	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d20:	4b46      	ldr	r3, [pc, #280]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e000      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004d30:	2300      	movs	r3, #0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00d      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d36:	4b41      	ldr	r3, [pc, #260]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3a:	4a40      	ldr	r2, [pc, #256]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d40:	6593      	str	r3, [r2, #88]	; 0x58
 8004d42:	4b3e      	ldr	r3, [pc, #248]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d52:	4b3b      	ldr	r3, [pc, #236]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a3a      	ldr	r2, [pc, #232]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d5e:	f7fd fb99 	bl	8002494 <HAL_GetTick>
 8004d62:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d64:	e009      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d66:	f7fd fb95 	bl	8002494 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d902      	bls.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	74fb      	strb	r3, [r7, #19]
        break;
 8004d78:	e005      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d7a:	4b31      	ldr	r3, [pc, #196]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0ef      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004d86:	7cfb      	ldrb	r3, [r7, #19]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d15b      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d8c:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d96:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01f      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d019      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004daa:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004db6:	4b21      	ldr	r3, [pc, #132]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbc:	4a1f      	ldr	r2, [pc, #124]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dc6:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dcc:	4a1b      	ldr	r2, [pc, #108]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dd6:	4a19      	ldr	r2, [pc, #100]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d016      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fd fb54 	bl	8002494 <HAL_GetTick>
 8004dec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dee:	e00b      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df0:	f7fd fb50 	bl	8002494 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d902      	bls.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	74fb      	strb	r3, [r7, #19]
            break;
 8004e06:	e006      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0ec      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004e16:	7cfb      	ldrb	r3, [r7, #19]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10c      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e1c:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2c:	4903      	ldr	r1, [pc, #12]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e34:	e008      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e36:	7cfb      	ldrb	r3, [r7, #19]
 8004e38:	74bb      	strb	r3, [r7, #18]
 8004e3a:	e005      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	7cfb      	ldrb	r3, [r7, #19]
 8004e46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e48:	7c7b      	ldrb	r3, [r7, #17]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d105      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4e:	4ba0      	ldr	r3, [pc, #640]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e52:	4a9f      	ldr	r2, [pc, #636]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e66:	4b9a      	ldr	r3, [pc, #616]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6c:	f023 0203 	bic.w	r2, r3, #3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e74:	4996      	ldr	r1, [pc, #600]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e88:	4b91      	ldr	r3, [pc, #580]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8e:	f023 020c 	bic.w	r2, r3, #12
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	498e      	ldr	r1, [pc, #568]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004eaa:	4b89      	ldr	r3, [pc, #548]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb8:	4985      	ldr	r1, [pc, #532]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ecc:	4b80      	ldr	r3, [pc, #512]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eda:	497d      	ldr	r1, [pc, #500]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0310 	and.w	r3, r3, #16
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004eee:	4b78      	ldr	r3, [pc, #480]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efc:	4974      	ldr	r1, [pc, #464]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f10:	4b6f      	ldr	r3, [pc, #444]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1e:	496c      	ldr	r1, [pc, #432]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f32:	4b67      	ldr	r3, [pc, #412]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f40:	4963      	ldr	r1, [pc, #396]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f54:	4b5e      	ldr	r3, [pc, #376]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f62:	495b      	ldr	r1, [pc, #364]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f76:	4b56      	ldr	r3, [pc, #344]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f84:	4952      	ldr	r1, [pc, #328]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f98:	4b4d      	ldr	r3, [pc, #308]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa6:	494a      	ldr	r1, [pc, #296]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fba:	4b45      	ldr	r3, [pc, #276]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc8:	4941      	ldr	r1, [pc, #260]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fdc:	4b3c      	ldr	r3, [pc, #240]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fe2:	f023 0203 	bic.w	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fea:	4939      	ldr	r1, [pc, #228]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d028      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ffe:	4b34      	ldr	r3, [pc, #208]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005004:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500c:	4930      	ldr	r1, [pc, #192]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005018:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800501c:	d106      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800501e:	4b2c      	ldr	r3, [pc, #176]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	4a2b      	ldr	r2, [pc, #172]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005024:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005028:	60d3      	str	r3, [r2, #12]
 800502a:	e011      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005030:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005034:	d10c      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3304      	adds	r3, #4
 800503a:	2101      	movs	r1, #1
 800503c:	4618      	mov	r0, r3
 800503e:	f001 f81b 	bl	8006078 <RCCEx_PLLSAI1_Config>
 8005042:	4603      	mov	r3, r0
 8005044:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005046:	7cfb      	ldrb	r3, [r7, #19]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800504c:	7cfb      	ldrb	r3, [r7, #19]
 800504e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d04d      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005064:	d108      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005066:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005068:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800506c:	4a18      	ldr	r2, [pc, #96]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800506e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005072:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005076:	e012      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005078:	4b15      	ldr	r3, [pc, #84]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800507a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800507e:	4a14      	ldr	r2, [pc, #80]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005080:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005084:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005088:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800508a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005096:	490e      	ldr	r1, [pc, #56]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a6:	d106      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050a8:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	4a08      	ldr	r2, [pc, #32]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050b2:	60d3      	str	r3, [r2, #12]
 80050b4:	e020      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050be:	d109      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050c0:	4b03      	ldr	r3, [pc, #12]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4a02      	ldr	r2, [pc, #8]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ca:	60d3      	str	r3, [r2, #12]
 80050cc:	e014      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80050ce:	bf00      	nop
 80050d0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050dc:	d10c      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3304      	adds	r3, #4
 80050e2:	2101      	movs	r1, #1
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 ffc7 	bl	8006078 <RCCEx_PLLSAI1_Config>
 80050ea:	4603      	mov	r3, r0
 80050ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050ee:	7cfb      	ldrb	r3, [r7, #19]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80050f4:	7cfb      	ldrb	r3, [r7, #19]
 80050f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d028      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005104:	4b4a      	ldr	r3, [pc, #296]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005112:	4947      	ldr	r1, [pc, #284]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800511e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005122:	d106      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005124:	4b42      	ldr	r3, [pc, #264]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	4a41      	ldr	r2, [pc, #260]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800512a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800512e:	60d3      	str	r3, [r2, #12]
 8005130:	e011      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005136:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800513a:	d10c      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3304      	adds	r3, #4
 8005140:	2101      	movs	r1, #1
 8005142:	4618      	mov	r0, r3
 8005144:	f000 ff98 	bl	8006078 <RCCEx_PLLSAI1_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800514c:	7cfb      	ldrb	r3, [r7, #19]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005152:	7cfb      	ldrb	r3, [r7, #19]
 8005154:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01e      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005162:	4b33      	ldr	r3, [pc, #204]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005168:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005172:	492f      	ldr	r1, [pc, #188]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005180:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005184:	d10c      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3304      	adds	r3, #4
 800518a:	2102      	movs	r1, #2
 800518c:	4618      	mov	r0, r3
 800518e:	f000 ff73 	bl	8006078 <RCCEx_PLLSAI1_Config>
 8005192:	4603      	mov	r3, r0
 8005194:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005196:	7cfb      	ldrb	r3, [r7, #19]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800519c:	7cfb      	ldrb	r3, [r7, #19]
 800519e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00b      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051ac:	4b20      	ldr	r3, [pc, #128]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051b2:	f023 0204 	bic.w	r2, r3, #4
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051bc:	491c      	ldr	r1, [pc, #112]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00b      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80051d0:	4b17      	ldr	r3, [pc, #92]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051d6:	f023 0218 	bic.w	r2, r3, #24
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e0:	4913      	ldr	r1, [pc, #76]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d017      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80051f4:	4b0e      	ldr	r3, [pc, #56]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005204:	490a      	ldr	r1, [pc, #40]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005212:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005216:	d105      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005218:	4b05      	ldr	r3, [pc, #20]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	4a04      	ldr	r2, [pc, #16]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800521e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005222:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005224:	7cbb      	ldrb	r3, [r7, #18]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40021000 	.word	0x40021000

08005234 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005246:	d13e      	bne.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005248:	4bb6      	ldr	r3, [pc, #728]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005252:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800525a:	d028      	beq.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005262:	f200 86f4 	bhi.w	800604e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800526c:	d005      	beq.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005274:	d00e      	beq.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005276:	f000 beea 	b.w	800604e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800527a:	4baa      	ldr	r3, [pc, #680]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800527c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b02      	cmp	r3, #2
 8005286:	f040 86e4 	bne.w	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800528a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800528e:	61fb      	str	r3, [r7, #28]
      break;
 8005290:	f000 bedf 	b.w	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005294:	4ba3      	ldr	r3, [pc, #652]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b02      	cmp	r3, #2
 80052a0:	f040 86d9 	bne.w	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80052a4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80052a8:	61fb      	str	r3, [r7, #28]
      break;
 80052aa:	f000 bed4 	b.w	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80052ae:	4b9d      	ldr	r3, [pc, #628]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052ba:	f040 86ce 	bne.w	800605a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 80052be:	4b9a      	ldr	r3, [pc, #616]	; (8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80052c0:	61fb      	str	r3, [r7, #28]
      break;
 80052c2:	f000 beca 	b.w	800605a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052c6:	4b97      	ldr	r3, [pc, #604]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d036      	beq.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d840      	bhi.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d003      	beq.n	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d020      	beq.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80052e8:	e039      	b.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80052ea:	4b8e      	ldr	r3, [pc, #568]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d116      	bne.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80052f6:	4b8b      	ldr	r3, [pc, #556]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d005      	beq.n	800530e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005302:	4b88      	ldr	r3, [pc, #544]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	091b      	lsrs	r3, r3, #4
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	e005      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800530e:	4b85      	ldr	r3, [pc, #532]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005314:	0a1b      	lsrs	r3, r3, #8
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	4a84      	ldr	r2, [pc, #528]	; (800552c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800531c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005320:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005322:	e01f      	b.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	61bb      	str	r3, [r7, #24]
      break;
 8005328:	e01c      	b.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800532a:	4b7e      	ldr	r3, [pc, #504]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005336:	d102      	bne.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005338:	4b7d      	ldr	r3, [pc, #500]	; (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800533a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800533c:	e012      	b.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	61bb      	str	r3, [r7, #24]
      break;
 8005342:	e00f      	b.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005344:	4b77      	ldr	r3, [pc, #476]	; (8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005350:	d102      	bne.n	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005352:	4b78      	ldr	r3, [pc, #480]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005354:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005356:	e005      	b.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	61bb      	str	r3, [r7, #24]
      break;
 800535c:	e002      	b.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	61bb      	str	r3, [r7, #24]
      break;
 8005362:	bf00      	nop
    }

    switch(PeriphClk)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800536a:	f000 8606 	beq.w	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005374:	f200 8673 	bhi.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800537e:	f000 8469 	beq.w	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005388:	f200 8669 	bhi.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005392:	f000 8531 	beq.w	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800539c:	f200 865f 	bhi.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053a6:	f000 8187 	beq.w	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053b0:	f200 8655 	bhi.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053ba:	f000 80cd 	beq.w	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053c4:	f200 864b 	bhi.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ce:	f000 8430 	beq.w	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d8:	f200 8641 	bhi.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053e2:	f000 83e4 	beq.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ec:	f200 8637 	bhi.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053f6:	f000 80af 	beq.w	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005400:	f200 862d 	bhi.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540a:	f000 809d 	beq.w	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005414:	f200 8623 	bhi.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800541e:	f000 808b 	beq.w	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005428:	f200 8619 	bhi.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005432:	f000 8554 	beq.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800543c:	f200 860f 	bhi.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005446:	f000 8500 	beq.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005450:	f200 8605 	bhi.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800545a:	f000 84a1 	beq.w	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005464:	f200 85fb 	bhi.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b80      	cmp	r3, #128	; 0x80
 800546c:	f000 846c 	beq.w	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b80      	cmp	r3, #128	; 0x80
 8005474:	f200 85f3 	bhi.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b20      	cmp	r3, #32
 800547c:	d84c      	bhi.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 85ec 	beq.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3b01      	subs	r3, #1
 800548a:	2b1f      	cmp	r3, #31
 800548c:	f200 85e7 	bhi.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005490:	a201      	add	r2, pc, #4	; (adr r2, 8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005496:	bf00      	nop
 8005498:	080058ad 	.word	0x080058ad
 800549c:	0800591b 	.word	0x0800591b
 80054a0:	0800605f 	.word	0x0800605f
 80054a4:	080059af 	.word	0x080059af
 80054a8:	0800605f 	.word	0x0800605f
 80054ac:	0800605f 	.word	0x0800605f
 80054b0:	0800605f 	.word	0x0800605f
 80054b4:	08005a27 	.word	0x08005a27
 80054b8:	0800605f 	.word	0x0800605f
 80054bc:	0800605f 	.word	0x0800605f
 80054c0:	0800605f 	.word	0x0800605f
 80054c4:	0800605f 	.word	0x0800605f
 80054c8:	0800605f 	.word	0x0800605f
 80054cc:	0800605f 	.word	0x0800605f
 80054d0:	0800605f 	.word	0x0800605f
 80054d4:	08005aab 	.word	0x08005aab
 80054d8:	0800605f 	.word	0x0800605f
 80054dc:	0800605f 	.word	0x0800605f
 80054e0:	0800605f 	.word	0x0800605f
 80054e4:	0800605f 	.word	0x0800605f
 80054e8:	0800605f 	.word	0x0800605f
 80054ec:	0800605f 	.word	0x0800605f
 80054f0:	0800605f 	.word	0x0800605f
 80054f4:	0800605f 	.word	0x0800605f
 80054f8:	0800605f 	.word	0x0800605f
 80054fc:	0800605f 	.word	0x0800605f
 8005500:	0800605f 	.word	0x0800605f
 8005504:	0800605f 	.word	0x0800605f
 8005508:	0800605f 	.word	0x0800605f
 800550c:	0800605f 	.word	0x0800605f
 8005510:	0800605f 	.word	0x0800605f
 8005514:	08005b2d 	.word	0x08005b2d
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b40      	cmp	r3, #64	; 0x40
 800551c:	f000 83e8 	beq.w	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005520:	f000 bd9d 	b.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005524:	40021000 	.word	0x40021000
 8005528:	0003d090 	.word	0x0003d090
 800552c:	080093c4 	.word	0x080093c4
 8005530:	00f42400 	.word	0x00f42400
 8005534:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005538:	69b9      	ldr	r1, [r7, #24]
 800553a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800553e:	f000 ff83 	bl	8006448 <RCCEx_GetSAIxPeriphCLKFreq>
 8005542:	61f8      	str	r0, [r7, #28]
      break;
 8005544:	f000 bd8e 	b.w	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005548:	69b9      	ldr	r1, [r7, #24]
 800554a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800554e:	f000 ff7b 	bl	8006448 <RCCEx_GetSAIxPeriphCLKFreq>
 8005552:	61f8      	str	r0, [r7, #28]
      break;
 8005554:	f000 bd86 	b.w	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005558:	4b9a      	ldr	r3, [pc, #616]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800555a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800556a:	d015      	beq.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005572:	f200 8092 	bhi.w	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800557c:	d029      	beq.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005584:	f200 8089 	bhi.w	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d07b      	beq.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005594:	d04a      	beq.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8005596:	e080      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005598:	4b8a      	ldr	r3, [pc, #552]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d17d      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80055a4:	4b87      	ldr	r3, [pc, #540]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80055b0:	4b84      	ldr	r3, [pc, #528]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	091b      	lsrs	r3, r3, #4
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	e005      	b.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80055bc:	4b81      	ldr	r3, [pc, #516]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80055be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055c2:	0a1b      	lsrs	r3, r3, #8
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	4a7f      	ldr	r2, [pc, #508]	; (80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80055ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ce:	61fb      	str	r3, [r7, #28]
          break;
 80055d0:	e066      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80055d2:	4b7c      	ldr	r3, [pc, #496]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055de:	d162      	bne.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80055e0:	4b78      	ldr	r3, [pc, #480]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ec:	d15b      	bne.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80055ee:	4b75      	ldr	r3, [pc, #468]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	0a1b      	lsrs	r3, r3, #8
 80055f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055f8:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	fb03 f202 	mul.w	r2, r3, r2
 8005602:	4b70      	ldr	r3, [pc, #448]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	091b      	lsrs	r3, r3, #4
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	3301      	adds	r3, #1
 800560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005612:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005614:	4b6b      	ldr	r3, [pc, #428]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	0d5b      	lsrs	r3, r3, #21
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	3301      	adds	r3, #1
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	fbb2 f3f3 	udiv	r3, r2, r3
 8005628:	61fb      	str	r3, [r7, #28]
          break;
 800562a:	e03c      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800562c:	4b65      	ldr	r3, [pc, #404]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005638:	d138      	bne.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800563a:	4b62      	ldr	r3, [pc, #392]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005646:	d131      	bne.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005648:	4b5e      	ldr	r3, [pc, #376]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	0a1b      	lsrs	r3, r3, #8
 800564e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005652:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	fb03 f202 	mul.w	r2, r3, r2
 800565c:	4b59      	ldr	r3, [pc, #356]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	091b      	lsrs	r3, r3, #4
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	3301      	adds	r3, #1
 8005668:	fbb2 f3f3 	udiv	r3, r2, r3
 800566c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800566e:	4b55      	ldr	r3, [pc, #340]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	0d5b      	lsrs	r3, r3, #21
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	3301      	adds	r3, #1
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005682:	61fb      	str	r3, [r7, #28]
          break;
 8005684:	e012      	b.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005686:	4b4f      	ldr	r3, [pc, #316]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005688:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b02      	cmp	r3, #2
 8005692:	d10e      	bne.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8005694:	4b4d      	ldr	r3, [pc, #308]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005696:	61fb      	str	r3, [r7, #28]
          break;
 8005698:	e00b      	b.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800569a:	bf00      	nop
 800569c:	f000 bce2 	b.w	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80056a0:	bf00      	nop
 80056a2:	f000 bcdf 	b.w	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80056a6:	bf00      	nop
 80056a8:	f000 bcdc 	b.w	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80056ac:	bf00      	nop
 80056ae:	f000 bcd9 	b.w	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80056b2:	bf00      	nop
        break;
 80056b4:	f000 bcd6 	b.w	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80056b8:	4b42      	ldr	r3, [pc, #264]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80056ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056c6:	d13d      	bne.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80056c8:	4b3e      	ldr	r3, [pc, #248]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056d4:	f040 84c5 	bne.w	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80056d8:	4b3a      	ldr	r3, [pc, #232]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e4:	f040 84bd 	bne.w	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80056e8:	4b36      	ldr	r3, [pc, #216]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	0a1b      	lsrs	r3, r3, #8
 80056ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056f2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	fb03 f202 	mul.w	r2, r3, r2
 80056fc:	4b31      	ldr	r3, [pc, #196]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	091b      	lsrs	r3, r3, #4
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	3301      	adds	r3, #1
 8005708:	fbb2 f3f3 	udiv	r3, r2, r3
 800570c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800570e:	4b2d      	ldr	r3, [pc, #180]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	0edb      	lsrs	r3, r3, #27
 8005714:	f003 031f 	and.w	r3, r3, #31
 8005718:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10a      	bne.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005720:	4b28      	ldr	r3, [pc, #160]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800572c:	2311      	movs	r3, #17
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	e001      	b.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8005732:	2307      	movs	r3, #7
 8005734:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	fbb2 f3f3 	udiv	r3, r2, r3
 800573e:	61fb      	str	r3, [r7, #28]
      break;
 8005740:	f000 bc8f 	b.w	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005744:	4b1f      	ldr	r3, [pc, #124]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005756:	d016      	beq.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800575e:	f200 809b 	bhi.w	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005768:	d032      	beq.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005770:	f200 8092 	bhi.w	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 8084 	beq.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005782:	d052      	beq.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8005784:	e088      	b.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005786:	4b0f      	ldr	r3, [pc, #60]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b02      	cmp	r3, #2
 8005790:	f040 8084 	bne.w	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005794:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0308 	and.w	r3, r3, #8
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80057a0:	4b08      	ldr	r3, [pc, #32]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	091b      	lsrs	r3, r3, #4
 80057a6:	f003 030f 	and.w	r3, r3, #15
 80057aa:	e005      	b.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 80057ac:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057b2:	0a1b      	lsrs	r3, r3, #8
 80057b4:	f003 030f 	and.w	r3, r3, #15
 80057b8:	4a03      	ldr	r2, [pc, #12]	; (80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80057ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057be:	61fb      	str	r3, [r7, #28]
          break;
 80057c0:	e06c      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80057c2:	bf00      	nop
 80057c4:	40021000 	.word	0x40021000
 80057c8:	080093c4 	.word	0x080093c4
 80057cc:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80057d0:	4ba5      	ldr	r3, [pc, #660]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057dc:	d160      	bne.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80057de:	4ba2      	ldr	r3, [pc, #648]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ea:	d159      	bne.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80057ec:	4b9e      	ldr	r3, [pc, #632]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	0a1b      	lsrs	r3, r3, #8
 80057f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	fb03 f202 	mul.w	r2, r3, r2
 8005800:	4b99      	ldr	r3, [pc, #612]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	3301      	adds	r3, #1
 800580c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005810:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005812:	4b95      	ldr	r3, [pc, #596]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	0d5b      	lsrs	r3, r3, #21
 8005818:	f003 0303 	and.w	r3, r3, #3
 800581c:	3301      	adds	r3, #1
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	fbb2 f3f3 	udiv	r3, r2, r3
 8005826:	61fb      	str	r3, [r7, #28]
          break;
 8005828:	e03a      	b.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800582a:	4b8f      	ldr	r3, [pc, #572]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005836:	d135      	bne.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005838:	4b8b      	ldr	r3, [pc, #556]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005844:	d12e      	bne.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005846:	4b88      	ldr	r3, [pc, #544]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	0a1b      	lsrs	r3, r3, #8
 800584c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005850:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	fb03 f202 	mul.w	r2, r3, r2
 800585a:	4b83      	ldr	r3, [pc, #524]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	091b      	lsrs	r3, r3, #4
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	3301      	adds	r3, #1
 8005866:	fbb2 f3f3 	udiv	r3, r2, r3
 800586a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800586c:	4b7e      	ldr	r3, [pc, #504]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	0d5b      	lsrs	r3, r3, #21
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	3301      	adds	r3, #1
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005880:	61fb      	str	r3, [r7, #28]
          break;
 8005882:	e00f      	b.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005884:	4b78      	ldr	r3, [pc, #480]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005886:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b02      	cmp	r3, #2
 8005890:	d10a      	bne.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8005892:	4b76      	ldr	r3, [pc, #472]	; (8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005894:	61fb      	str	r3, [r7, #28]
          break;
 8005896:	e007      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8005898:	bf00      	nop
 800589a:	e3e2      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800589c:	bf00      	nop
 800589e:	e3e0      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80058a0:	bf00      	nop
 80058a2:	e3de      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80058a4:	bf00      	nop
 80058a6:	e3dc      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80058a8:	bf00      	nop
      break;
 80058aa:	e3da      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80058ac:	4b6e      	ldr	r3, [pc, #440]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d827      	bhi.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80058be:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 80058c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c4:	080058d5 	.word	0x080058d5
 80058c8:	080058dd 	.word	0x080058dd
 80058cc:	080058e5 	.word	0x080058e5
 80058d0:	080058f9 	.word	0x080058f9
          frequency = HAL_RCC_GetPCLK2Freq();
 80058d4:	f7ff f8a8 	bl	8004a28 <HAL_RCC_GetPCLK2Freq>
 80058d8:	61f8      	str	r0, [r7, #28]
          break;
 80058da:	e01d      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80058dc:	f7fe fff6 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 80058e0:	61f8      	str	r0, [r7, #28]
          break;
 80058e2:	e019      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058e4:	4b60      	ldr	r3, [pc, #384]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f0:	d10f      	bne.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 80058f2:	4b5f      	ldr	r3, [pc, #380]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80058f4:	61fb      	str	r3, [r7, #28]
          break;
 80058f6:	e00c      	b.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80058f8:	4b5b      	ldr	r3, [pc, #364]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80058fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b02      	cmp	r3, #2
 8005904:	d107      	bne.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8005906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800590a:	61fb      	str	r3, [r7, #28]
          break;
 800590c:	e003      	b.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800590e:	bf00      	nop
 8005910:	e3a8      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005912:	bf00      	nop
 8005914:	e3a6      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005916:	bf00      	nop
        break;
 8005918:	e3a4      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800591a:	4b53      	ldr	r3, [pc, #332]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005920:	f003 030c 	and.w	r3, r3, #12
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b0c      	cmp	r3, #12
 800592a:	d83a      	bhi.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800592c:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800592e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005932:	bf00      	nop
 8005934:	08005969 	.word	0x08005969
 8005938:	080059a3 	.word	0x080059a3
 800593c:	080059a3 	.word	0x080059a3
 8005940:	080059a3 	.word	0x080059a3
 8005944:	08005971 	.word	0x08005971
 8005948:	080059a3 	.word	0x080059a3
 800594c:	080059a3 	.word	0x080059a3
 8005950:	080059a3 	.word	0x080059a3
 8005954:	08005979 	.word	0x08005979
 8005958:	080059a3 	.word	0x080059a3
 800595c:	080059a3 	.word	0x080059a3
 8005960:	080059a3 	.word	0x080059a3
 8005964:	0800598d 	.word	0x0800598d
          frequency = HAL_RCC_GetPCLK1Freq();
 8005968:	f7ff f848 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 800596c:	61f8      	str	r0, [r7, #28]
          break;
 800596e:	e01d      	b.n	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8005970:	f7fe ffac 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8005974:	61f8      	str	r0, [r7, #28]
          break;
 8005976:	e019      	b.n	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005978:	4b3b      	ldr	r3, [pc, #236]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005984:	d10f      	bne.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8005986:	4b3a      	ldr	r3, [pc, #232]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005988:	61fb      	str	r3, [r7, #28]
          break;
 800598a:	e00c      	b.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800598c:	4b36      	ldr	r3, [pc, #216]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800598e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b02      	cmp	r3, #2
 8005998:	d107      	bne.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800599a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800599e:	61fb      	str	r3, [r7, #28]
          break;
 80059a0:	e003      	b.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 80059a2:	bf00      	nop
 80059a4:	e35e      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80059a6:	bf00      	nop
 80059a8:	e35c      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80059aa:	bf00      	nop
        break;
 80059ac:	e35a      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80059ae:	4b2e      	ldr	r3, [pc, #184]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80059b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b30      	cmp	r3, #48	; 0x30
 80059be:	d021      	beq.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b30      	cmp	r3, #48	; 0x30
 80059c4:	d829      	bhi.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	d011      	beq.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d823      	bhi.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b10      	cmp	r3, #16
 80059dc:	d004      	beq.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 80059de:	e01c      	b.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80059e0:	f7ff f80c 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 80059e4:	61f8      	str	r0, [r7, #28]
          break;
 80059e6:	e01d      	b.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80059e8:	f7fe ff70 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 80059ec:	61f8      	str	r0, [r7, #28]
          break;
 80059ee:	e019      	b.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059f0:	4b1d      	ldr	r3, [pc, #116]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059fc:	d10f      	bne.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 80059fe:	4b1c      	ldr	r3, [pc, #112]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005a00:	61fb      	str	r3, [r7, #28]
          break;
 8005a02:	e00c      	b.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a04:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d107      	bne.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8005a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a16:	61fb      	str	r3, [r7, #28]
          break;
 8005a18:	e003      	b.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8005a1a:	bf00      	nop
 8005a1c:	e322      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a1e:	bf00      	nop
 8005a20:	e320      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a22:	bf00      	nop
        break;
 8005a24:	e31e      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005a26:	4b10      	ldr	r3, [pc, #64]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2bc0      	cmp	r3, #192	; 0xc0
 8005a36:	d027      	beq.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a3c:	d82f      	bhi.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b80      	cmp	r3, #128	; 0x80
 8005a42:	d017      	beq.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2b80      	cmp	r3, #128	; 0x80
 8005a48:	d829      	bhi.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d004      	beq.n	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8005a56:	e022      	b.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a58:	f7fe ffd0 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8005a5c:	61f8      	str	r0, [r7, #28]
          break;
 8005a5e:	e023      	b.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a60:	f7fe ff34 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8005a64:	61f8      	str	r0, [r7, #28]
          break;
 8005a66:	e01f      	b.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	02dc6c00 	.word	0x02dc6c00
 8005a70:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a74:	4b9b      	ldr	r3, [pc, #620]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a80:	d10f      	bne.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8005a82:	4b99      	ldr	r3, [pc, #612]	; (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005a84:	61fb      	str	r3, [r7, #28]
          break;
 8005a86:	e00c      	b.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a88:	4b96      	ldr	r3, [pc, #600]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d107      	bne.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8005a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a9a:	61fb      	str	r3, [r7, #28]
          break;
 8005a9c:	e003      	b.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8005a9e:	bf00      	nop
 8005aa0:	e2e0      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005aa2:	bf00      	nop
 8005aa4:	e2de      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005aa6:	bf00      	nop
        break;
 8005aa8:	e2dc      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005aaa:	4b8e      	ldr	r3, [pc, #568]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005abc:	d025      	beq.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ac4:	d82c      	bhi.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005acc:	d013      	beq.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad4:	d824      	bhi.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d004      	beq.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae2:	d004      	beq.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8005ae4:	e01c      	b.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ae6:	f7fe ff89 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8005aea:	61f8      	str	r0, [r7, #28]
          break;
 8005aec:	e01d      	b.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005aee:	f7fe feed 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8005af2:	61f8      	str	r0, [r7, #28]
          break;
 8005af4:	e019      	b.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005af6:	4b7b      	ldr	r3, [pc, #492]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b02:	d10f      	bne.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8005b04:	4b78      	ldr	r3, [pc, #480]	; (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005b06:	61fb      	str	r3, [r7, #28]
          break;
 8005b08:	e00c      	b.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b0a:	4b76      	ldr	r3, [pc, #472]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d107      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8005b18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b1c:	61fb      	str	r3, [r7, #28]
          break;
 8005b1e:	e003      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8005b20:	bf00      	nop
 8005b22:	e29f      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005b24:	bf00      	nop
 8005b26:	e29d      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005b28:	bf00      	nop
        break;
 8005b2a:	e29b      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005b2c:	4b6d      	ldr	r3, [pc, #436]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b32:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b3e:	d025      	beq.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b46:	d82c      	bhi.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b4e:	d013      	beq.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b56:	d824      	bhi.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d004      	beq.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b64:	d004      	beq.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8005b66:	e01c      	b.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b68:	f7fe ff48 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8005b6c:	61f8      	str	r0, [r7, #28]
          break;
 8005b6e:	e01d      	b.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b70:	f7fe feac 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8005b74:	61f8      	str	r0, [r7, #28]
          break;
 8005b76:	e019      	b.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b78:	4b5a      	ldr	r3, [pc, #360]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b84:	d10f      	bne.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8005b86:	4b58      	ldr	r3, [pc, #352]	; (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005b88:	61fb      	str	r3, [r7, #28]
          break;
 8005b8a:	e00c      	b.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b8c:	4b55      	ldr	r3, [pc, #340]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d107      	bne.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8005b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b9e:	61fb      	str	r3, [r7, #28]
          break;
 8005ba0:	e003      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8005ba2:	bf00      	nop
 8005ba4:	e25e      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ba6:	bf00      	nop
 8005ba8:	e25c      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005baa:	bf00      	nop
        break;
 8005bac:	e25a      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005bae:	4b4d      	ldr	r3, [pc, #308]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bc0:	d007      	beq.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bc8:	d12f      	bne.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bca:	f7fe fe7f 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8005bce:	61f8      	str	r0, [r7, #28]
          break;
 8005bd0:	e02e      	b.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005bd2:	4b44      	ldr	r3, [pc, #272]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bde:	d126      	bne.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005be0:	4b40      	ldr	r3, [pc, #256]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d020      	beq.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005bec:	4b3d      	ldr	r3, [pc, #244]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	0a1b      	lsrs	r3, r3, #8
 8005bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	fb03 f202 	mul.w	r2, r3, r2
 8005c00:	4b38      	ldr	r3, [pc, #224]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	091b      	lsrs	r3, r3, #4
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c10:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005c12:	4b34      	ldr	r3, [pc, #208]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	0e5b      	lsrs	r3, r3, #25
 8005c18:	f003 0303 	and.w	r3, r3, #3
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c26:	61fb      	str	r3, [r7, #28]
          break;
 8005c28:	e001      	b.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8005c2a:	bf00      	nop
 8005c2c:	e21a      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c2e:	bf00      	nop
        break;
 8005c30:	e218      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005c32:	4b2c      	ldr	r3, [pc, #176]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d103      	bne.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005c44:	f7fe fef0 	bl	8004a28 <HAL_RCC_GetPCLK2Freq>
 8005c48:	61f8      	str	r0, [r7, #28]
        break;
 8005c4a:	e20b      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c4c:	f7fe fe3e 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8005c50:	61f8      	str	r0, [r7, #28]
        break;
 8005c52:	e207      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005c54:	4b23      	ldr	r3, [pc, #140]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c5a:	f003 0318 	and.w	r3, r3, #24
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b10      	cmp	r3, #16
 8005c64:	d010      	beq.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b10      	cmp	r3, #16
 8005c6a:	d834      	bhi.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d024      	beq.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8005c78:	e02d      	b.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005c7a:	69b9      	ldr	r1, [r7, #24]
 8005c7c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005c80:	f000 fbe2 	bl	8006448 <RCCEx_GetSAIxPeriphCLKFreq>
 8005c84:	61f8      	str	r0, [r7, #28]
          break;
 8005c86:	e02b      	b.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005c88:	4b16      	ldr	r3, [pc, #88]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d122      	bne.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005c94:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d005      	beq.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005ca0:	4b10      	ldr	r3, [pc, #64]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	091b      	lsrs	r3, r3, #4
 8005ca6:	f003 030f 	and.w	r3, r3, #15
 8005caa:	e005      	b.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8005cac:	4b0d      	ldr	r3, [pc, #52]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb2:	0a1b      	lsrs	r3, r3, #8
 8005cb4:	f003 030f 	and.w	r3, r3, #15
 8005cb8:	4a0c      	ldr	r2, [pc, #48]	; (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cbe:	61fb      	str	r3, [r7, #28]
          break;
 8005cc0:	e00b      	b.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cc2:	4b08      	ldr	r3, [pc, #32]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cce:	d106      	bne.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8005cd0:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005cd2:	61fb      	str	r3, [r7, #28]
          break;
 8005cd4:	e003      	b.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8005cd6:	bf00      	nop
 8005cd8:	e1c4      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005cda:	bf00      	nop
 8005cdc:	e1c2      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005cde:	bf00      	nop
        break;
 8005ce0:	e1c0      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8005ce2:	bf00      	nop
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	00f42400 	.word	0x00f42400
 8005cec:	080093c4 	.word	0x080093c4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005cf0:	4b96      	ldr	r3, [pc, #600]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d02:	d013      	beq.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d0a:	d819      	bhi.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d004      	beq.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d18:	d004      	beq.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8005d1a:	e011      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d1c:	f7fe fe6e 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8005d20:	61f8      	str	r0, [r7, #28]
          break;
 8005d22:	e010      	b.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d24:	f7fe fdd2 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8005d28:	61f8      	str	r0, [r7, #28]
          break;
 8005d2a:	e00c      	b.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d2c:	4b87      	ldr	r3, [pc, #540]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d38:	d104      	bne.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8005d3a:	4b85      	ldr	r3, [pc, #532]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005d3c:	61fb      	str	r3, [r7, #28]
          break;
 8005d3e:	e001      	b.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8005d40:	bf00      	nop
 8005d42:	e18f      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d44:	bf00      	nop
        break;
 8005d46:	e18d      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005d48:	4b80      	ldr	r3, [pc, #512]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d5a:	d013      	beq.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d62:	d819      	bhi.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d004      	beq.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d70:	d004      	beq.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8005d72:	e011      	b.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d74:	f7fe fe42 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8005d78:	61f8      	str	r0, [r7, #28]
          break;
 8005d7a:	e010      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d7c:	f7fe fda6 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8005d80:	61f8      	str	r0, [r7, #28]
          break;
 8005d82:	e00c      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d84:	4b71      	ldr	r3, [pc, #452]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d90:	d104      	bne.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8005d92:	4b6f      	ldr	r3, [pc, #444]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005d94:	61fb      	str	r3, [r7, #28]
          break;
 8005d96:	e001      	b.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8005d98:	bf00      	nop
 8005d9a:	e163      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d9c:	bf00      	nop
        break;
 8005d9e:	e161      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005da0:	4b6a      	ldr	r3, [pc, #424]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005db2:	d013      	beq.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dba:	d819      	bhi.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d004      	beq.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc8:	d004      	beq.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8005dca:	e011      	b.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005dcc:	f7fe fe16 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8005dd0:	61f8      	str	r0, [r7, #28]
          break;
 8005dd2:	e010      	b.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005dd4:	f7fe fd7a 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8005dd8:	61f8      	str	r0, [r7, #28]
          break;
 8005dda:	e00c      	b.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ddc:	4b5b      	ldr	r3, [pc, #364]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de8:	d104      	bne.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8005dea:	4b59      	ldr	r3, [pc, #356]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005dec:	61fb      	str	r3, [r7, #28]
          break;
 8005dee:	e001      	b.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8005df0:	bf00      	nop
 8005df2:	e137      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005df4:	bf00      	nop
        break;
 8005df6:	e135      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005df8:	4b54      	ldr	r3, [pc, #336]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d011      	beq.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d818      	bhi.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d004      	beq.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8005e1c:	e011      	b.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e1e:	f7fe fded 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8005e22:	61f8      	str	r0, [r7, #28]
          break;
 8005e24:	e010      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e26:	f7fe fd51 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8005e2a:	61f8      	str	r0, [r7, #28]
          break;
 8005e2c:	e00c      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e2e:	4b47      	ldr	r3, [pc, #284]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e3a:	d104      	bne.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8005e3c:	4b44      	ldr	r3, [pc, #272]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005e3e:	61fb      	str	r3, [r7, #28]
          break;
 8005e40:	e001      	b.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8005e42:	bf00      	nop
 8005e44:	e10e      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e46:	bf00      	nop
        break;
 8005e48:	e10c      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005e4a:	4b40      	ldr	r3, [pc, #256]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e5c:	d02c      	beq.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e64:	d833      	bhi.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e6c:	d01a      	beq.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e74:	d82b      	bhi.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d004      	beq.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e82:	d004      	beq.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8005e84:	e023      	b.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e86:	f7fe fdb9 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8005e8a:	61f8      	str	r0, [r7, #28]
          break;
 8005e8c:	e026      	b.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005e8e:	4b2f      	ldr	r3, [pc, #188]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d11a      	bne.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8005e9c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005ea0:	61fb      	str	r3, [r7, #28]
          break;
 8005ea2:	e016      	b.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ea4:	4b29      	ldr	r3, [pc, #164]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb0:	d111      	bne.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8005eb2:	4b27      	ldr	r3, [pc, #156]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005eb4:	61fb      	str	r3, [r7, #28]
          break;
 8005eb6:	e00e      	b.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005eb8:	4b24      	ldr	r3, [pc, #144]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d109      	bne.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8005ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eca:	61fb      	str	r3, [r7, #28]
          break;
 8005ecc:	e005      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8005ece:	bf00      	nop
 8005ed0:	e0c8      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ed2:	bf00      	nop
 8005ed4:	e0c6      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ed6:	bf00      	nop
 8005ed8:	e0c4      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005eda:	bf00      	nop
        break;
 8005edc:	e0c2      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005ede:	4b1b      	ldr	r3, [pc, #108]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ef0:	d030      	beq.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ef8:	d837      	bhi.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f00:	d01a      	beq.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f08:	d82f      	bhi.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d004      	beq.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f16:	d004      	beq.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8005f18:	e027      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f1a:	f7fe fd6f 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8005f1e:	61f8      	str	r0, [r7, #28]
          break;
 8005f20:	e02a      	b.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005f22:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d11e      	bne.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8005f30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005f34:	61fb      	str	r3, [r7, #28]
          break;
 8005f36:	e01a      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f38:	4b04      	ldr	r3, [pc, #16]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f44:	d115      	bne.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8005f46:	4b02      	ldr	r3, [pc, #8]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005f48:	61fb      	str	r3, [r7, #28]
          break;
 8005f4a:	e012      	b.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005f54:	4b46      	ldr	r3, [pc, #280]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d109      	bne.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8005f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f66:	61fb      	str	r3, [r7, #28]
          break;
 8005f68:	e005      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8005f6a:	bf00      	nop
 8005f6c:	e07a      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f6e:	bf00      	nop
 8005f70:	e078      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f72:	bf00      	nop
 8005f74:	e076      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f76:	bf00      	nop
        break;
 8005f78:	e074      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005f7a:	4b3d      	ldr	r3, [pc, #244]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005f7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f80:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f8c:	d02c      	beq.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f94:	d855      	bhi.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d004      	beq.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fa2:	d004      	beq.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8005fa4:	e04d      	b.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005fa6:	f7fe fc91 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8005faa:	61f8      	str	r0, [r7, #28]
          break;
 8005fac:	e04e      	b.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005fae:	4b30      	ldr	r3, [pc, #192]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d145      	bne.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005fba:	4b2d      	ldr	r3, [pc, #180]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d005      	beq.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8005fc6:	4b2a      	ldr	r3, [pc, #168]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	091b      	lsrs	r3, r3, #4
 8005fcc:	f003 030f 	and.w	r3, r3, #15
 8005fd0:	e005      	b.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8005fd2:	4b27      	ldr	r3, [pc, #156]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fd8:	0a1b      	lsrs	r3, r3, #8
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	4a25      	ldr	r2, [pc, #148]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8005fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fe4:	61fb      	str	r3, [r7, #28]
          break;
 8005fe6:	e02e      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005fe8:	4b21      	ldr	r3, [pc, #132]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ff4:	d129      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005ff6:	4b1e      	ldr	r3, [pc, #120]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006002:	d122      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006004:	4b1a      	ldr	r3, [pc, #104]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	0a1b      	lsrs	r3, r3, #8
 800600a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800600e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	fb03 f202 	mul.w	r2, r3, r2
 8006018:	4b15      	ldr	r3, [pc, #84]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	091b      	lsrs	r3, r3, #4
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	3301      	adds	r3, #1
 8006024:	fbb2 f3f3 	udiv	r3, r2, r3
 8006028:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800602a:	4b11      	ldr	r3, [pc, #68]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	0d5b      	lsrs	r3, r3, #21
 8006030:	f003 0303 	and.w	r3, r3, #3
 8006034:	3301      	adds	r3, #1
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	fbb2 f3f3 	udiv	r3, r2, r3
 800603e:	61fb      	str	r3, [r7, #28]
          break;
 8006040:	e003      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8006042:	bf00      	nop
 8006044:	e00e      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006046:	bf00      	nop
 8006048:	e00c      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800604a:	bf00      	nop
        break;
 800604c:	e00a      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800604e:	bf00      	nop
 8006050:	e008      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006052:	bf00      	nop
 8006054:	e006      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006056:	bf00      	nop
 8006058:	e004      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800605a:	bf00      	nop
 800605c:	e002      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800605e:	bf00      	nop
 8006060:	e000      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006062:	bf00      	nop
    }
  }

  return(frequency);
 8006064:	69fb      	ldr	r3, [r7, #28]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3720      	adds	r7, #32
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40021000 	.word	0x40021000
 8006074:	080093c4 	.word	0x080093c4

08006078 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006086:	4b72      	ldr	r3, [pc, #456]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f003 0303 	and.w	r3, r3, #3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00e      	beq.n	80060b0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006092:	4b6f      	ldr	r3, [pc, #444]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f003 0203 	and.w	r2, r3, #3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d103      	bne.n	80060aa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
       ||
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d142      	bne.n	8006130 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	73fb      	strb	r3, [r7, #15]
 80060ae:	e03f      	b.n	8006130 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d018      	beq.n	80060ea <RCCEx_PLLSAI1_Config+0x72>
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d825      	bhi.n	8006108 <RCCEx_PLLSAI1_Config+0x90>
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d002      	beq.n	80060c6 <RCCEx_PLLSAI1_Config+0x4e>
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d009      	beq.n	80060d8 <RCCEx_PLLSAI1_Config+0x60>
 80060c4:	e020      	b.n	8006108 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060c6:	4b62      	ldr	r3, [pc, #392]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d11d      	bne.n	800610e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060d6:	e01a      	b.n	800610e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060d8:	4b5d      	ldr	r3, [pc, #372]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d116      	bne.n	8006112 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060e8:	e013      	b.n	8006112 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060ea:	4b59      	ldr	r3, [pc, #356]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10f      	bne.n	8006116 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060f6:	4b56      	ldr	r3, [pc, #344]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d109      	bne.n	8006116 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006106:	e006      	b.n	8006116 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	73fb      	strb	r3, [r7, #15]
      break;
 800610c:	e004      	b.n	8006118 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800610e:	bf00      	nop
 8006110:	e002      	b.n	8006118 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006112:	bf00      	nop
 8006114:	e000      	b.n	8006118 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006116:	bf00      	nop
    }

    if(status == HAL_OK)
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d108      	bne.n	8006130 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800611e:	4b4c      	ldr	r3, [pc, #304]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f023 0203 	bic.w	r2, r3, #3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4949      	ldr	r1, [pc, #292]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 800612c:	4313      	orrs	r3, r2
 800612e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	2b00      	cmp	r3, #0
 8006134:	f040 8086 	bne.w	8006244 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006138:	4b45      	ldr	r3, [pc, #276]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a44      	ldr	r2, [pc, #272]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 800613e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006144:	f7fc f9a6 	bl	8002494 <HAL_GetTick>
 8006148:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800614a:	e009      	b.n	8006160 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800614c:	f7fc f9a2 	bl	8002494 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d902      	bls.n	8006160 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	73fb      	strb	r3, [r7, #15]
        break;
 800615e:	e005      	b.n	800616c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006160:	4b3b      	ldr	r3, [pc, #236]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1ef      	bne.n	800614c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800616c:	7bfb      	ldrb	r3, [r7, #15]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d168      	bne.n	8006244 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d113      	bne.n	80061a0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006178:	4b35      	ldr	r3, [pc, #212]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	4b35      	ldr	r3, [pc, #212]	; (8006254 <RCCEx_PLLSAI1_Config+0x1dc>)
 800617e:	4013      	ands	r3, r2
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6892      	ldr	r2, [r2, #8]
 8006184:	0211      	lsls	r1, r2, #8
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	68d2      	ldr	r2, [r2, #12]
 800618a:	06d2      	lsls	r2, r2, #27
 800618c:	4311      	orrs	r1, r2
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6852      	ldr	r2, [r2, #4]
 8006192:	3a01      	subs	r2, #1
 8006194:	0112      	lsls	r2, r2, #4
 8006196:	430a      	orrs	r2, r1
 8006198:	492d      	ldr	r1, [pc, #180]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 800619a:	4313      	orrs	r3, r2
 800619c:	610b      	str	r3, [r1, #16]
 800619e:	e02d      	b.n	80061fc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d115      	bne.n	80061d2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061a6:	4b2a      	ldr	r3, [pc, #168]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061a8:	691a      	ldr	r2, [r3, #16]
 80061aa:	4b2b      	ldr	r3, [pc, #172]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6892      	ldr	r2, [r2, #8]
 80061b2:	0211      	lsls	r1, r2, #8
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6912      	ldr	r2, [r2, #16]
 80061b8:	0852      	lsrs	r2, r2, #1
 80061ba:	3a01      	subs	r2, #1
 80061bc:	0552      	lsls	r2, r2, #21
 80061be:	4311      	orrs	r1, r2
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6852      	ldr	r2, [r2, #4]
 80061c4:	3a01      	subs	r2, #1
 80061c6:	0112      	lsls	r2, r2, #4
 80061c8:	430a      	orrs	r2, r1
 80061ca:	4921      	ldr	r1, [pc, #132]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	610b      	str	r3, [r1, #16]
 80061d0:	e014      	b.n	80061fc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061d2:	4b1f      	ldr	r3, [pc, #124]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061d4:	691a      	ldr	r2, [r3, #16]
 80061d6:	4b21      	ldr	r3, [pc, #132]	; (800625c <RCCEx_PLLSAI1_Config+0x1e4>)
 80061d8:	4013      	ands	r3, r2
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6892      	ldr	r2, [r2, #8]
 80061de:	0211      	lsls	r1, r2, #8
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6952      	ldr	r2, [r2, #20]
 80061e4:	0852      	lsrs	r2, r2, #1
 80061e6:	3a01      	subs	r2, #1
 80061e8:	0652      	lsls	r2, r2, #25
 80061ea:	4311      	orrs	r1, r2
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6852      	ldr	r2, [r2, #4]
 80061f0:	3a01      	subs	r2, #1
 80061f2:	0112      	lsls	r2, r2, #4
 80061f4:	430a      	orrs	r2, r1
 80061f6:	4916      	ldr	r1, [pc, #88]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80061fc:	4b14      	ldr	r3, [pc, #80]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a13      	ldr	r2, [pc, #76]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006202:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006206:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006208:	f7fc f944 	bl	8002494 <HAL_GetTick>
 800620c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800620e:	e009      	b.n	8006224 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006210:	f7fc f940 	bl	8002494 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d902      	bls.n	8006224 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	73fb      	strb	r3, [r7, #15]
          break;
 8006222:	e005      	b.n	8006230 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006224:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0ef      	beq.n	8006210 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d106      	bne.n	8006244 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006236:	4b06      	ldr	r3, [pc, #24]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	4904      	ldr	r1, [pc, #16]	; (8006250 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006240:	4313      	orrs	r3, r2
 8006242:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006244:	7bfb      	ldrb	r3, [r7, #15]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	40021000 	.word	0x40021000
 8006254:	07ff800f 	.word	0x07ff800f
 8006258:	ff9f800f 	.word	0xff9f800f
 800625c:	f9ff800f 	.word	0xf9ff800f

08006260 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800626e:	4b72      	ldr	r3, [pc, #456]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00e      	beq.n	8006298 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800627a:	4b6f      	ldr	r3, [pc, #444]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0203 	and.w	r2, r3, #3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d103      	bne.n	8006292 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
       ||
 800628e:	2b00      	cmp	r3, #0
 8006290:	d142      	bne.n	8006318 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	73fb      	strb	r3, [r7, #15]
 8006296:	e03f      	b.n	8006318 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b03      	cmp	r3, #3
 800629e:	d018      	beq.n	80062d2 <RCCEx_PLLSAI2_Config+0x72>
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d825      	bhi.n	80062f0 <RCCEx_PLLSAI2_Config+0x90>
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d002      	beq.n	80062ae <RCCEx_PLLSAI2_Config+0x4e>
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d009      	beq.n	80062c0 <RCCEx_PLLSAI2_Config+0x60>
 80062ac:	e020      	b.n	80062f0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062ae:	4b62      	ldr	r3, [pc, #392]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d11d      	bne.n	80062f6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062be:	e01a      	b.n	80062f6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062c0:	4b5d      	ldr	r3, [pc, #372]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d116      	bne.n	80062fa <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062d0:	e013      	b.n	80062fa <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062d2:	4b59      	ldr	r3, [pc, #356]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10f      	bne.n	80062fe <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062de:	4b56      	ldr	r3, [pc, #344]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d109      	bne.n	80062fe <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062ee:	e006      	b.n	80062fe <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	73fb      	strb	r3, [r7, #15]
      break;
 80062f4:	e004      	b.n	8006300 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80062f6:	bf00      	nop
 80062f8:	e002      	b.n	8006300 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80062fa:	bf00      	nop
 80062fc:	e000      	b.n	8006300 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80062fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d108      	bne.n	8006318 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006306:	4b4c      	ldr	r3, [pc, #304]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f023 0203 	bic.w	r2, r3, #3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4949      	ldr	r1, [pc, #292]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006314:	4313      	orrs	r3, r2
 8006316:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006318:	7bfb      	ldrb	r3, [r7, #15]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f040 8086 	bne.w	800642c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006320:	4b45      	ldr	r3, [pc, #276]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a44      	ldr	r2, [pc, #272]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800632a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800632c:	f7fc f8b2 	bl	8002494 <HAL_GetTick>
 8006330:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006332:	e009      	b.n	8006348 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006334:	f7fc f8ae 	bl	8002494 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d902      	bls.n	8006348 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	73fb      	strb	r3, [r7, #15]
        break;
 8006346:	e005      	b.n	8006354 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006348:	4b3b      	ldr	r3, [pc, #236]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1ef      	bne.n	8006334 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d168      	bne.n	800642c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d113      	bne.n	8006388 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006360:	4b35      	ldr	r3, [pc, #212]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006362:	695a      	ldr	r2, [r3, #20]
 8006364:	4b35      	ldr	r3, [pc, #212]	; (800643c <RCCEx_PLLSAI2_Config+0x1dc>)
 8006366:	4013      	ands	r3, r2
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	6892      	ldr	r2, [r2, #8]
 800636c:	0211      	lsls	r1, r2, #8
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	68d2      	ldr	r2, [r2, #12]
 8006372:	06d2      	lsls	r2, r2, #27
 8006374:	4311      	orrs	r1, r2
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	6852      	ldr	r2, [r2, #4]
 800637a:	3a01      	subs	r2, #1
 800637c:	0112      	lsls	r2, r2, #4
 800637e:	430a      	orrs	r2, r1
 8006380:	492d      	ldr	r1, [pc, #180]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006382:	4313      	orrs	r3, r2
 8006384:	614b      	str	r3, [r1, #20]
 8006386:	e02d      	b.n	80063e4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d115      	bne.n	80063ba <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800638e:	4b2a      	ldr	r3, [pc, #168]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006390:	695a      	ldr	r2, [r3, #20]
 8006392:	4b2b      	ldr	r3, [pc, #172]	; (8006440 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006394:	4013      	ands	r3, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6892      	ldr	r2, [r2, #8]
 800639a:	0211      	lsls	r1, r2, #8
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6912      	ldr	r2, [r2, #16]
 80063a0:	0852      	lsrs	r2, r2, #1
 80063a2:	3a01      	subs	r2, #1
 80063a4:	0552      	lsls	r2, r2, #21
 80063a6:	4311      	orrs	r1, r2
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6852      	ldr	r2, [r2, #4]
 80063ac:	3a01      	subs	r2, #1
 80063ae:	0112      	lsls	r2, r2, #4
 80063b0:	430a      	orrs	r2, r1
 80063b2:	4921      	ldr	r1, [pc, #132]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	614b      	str	r3, [r1, #20]
 80063b8:	e014      	b.n	80063e4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80063ba:	4b1f      	ldr	r3, [pc, #124]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063bc:	695a      	ldr	r2, [r3, #20]
 80063be:	4b21      	ldr	r3, [pc, #132]	; (8006444 <RCCEx_PLLSAI2_Config+0x1e4>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	6892      	ldr	r2, [r2, #8]
 80063c6:	0211      	lsls	r1, r2, #8
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6952      	ldr	r2, [r2, #20]
 80063cc:	0852      	lsrs	r2, r2, #1
 80063ce:	3a01      	subs	r2, #1
 80063d0:	0652      	lsls	r2, r2, #25
 80063d2:	4311      	orrs	r1, r2
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6852      	ldr	r2, [r2, #4]
 80063d8:	3a01      	subs	r2, #1
 80063da:	0112      	lsls	r2, r2, #4
 80063dc:	430a      	orrs	r2, r1
 80063de:	4916      	ldr	r1, [pc, #88]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80063e4:	4b14      	ldr	r3, [pc, #80]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a13      	ldr	r2, [pc, #76]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f0:	f7fc f850 	bl	8002494 <HAL_GetTick>
 80063f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063f6:	e009      	b.n	800640c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80063f8:	f7fc f84c 	bl	8002494 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d902      	bls.n	800640c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	73fb      	strb	r3, [r7, #15]
          break;
 800640a:	e005      	b.n	8006418 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800640c:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0ef      	beq.n	80063f8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d106      	bne.n	800642c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800641e:	4b06      	ldr	r3, [pc, #24]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006420:	695a      	ldr	r2, [r3, #20]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	4904      	ldr	r1, [pc, #16]	; (8006438 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006428:	4313      	orrs	r3, r2
 800642a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800642c:	7bfb      	ldrb	r3, [r7, #15]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40021000 	.word	0x40021000
 800643c:	07ff800f 	.word	0x07ff800f
 8006440:	ff9f800f 	.word	0xff9f800f
 8006444:	f9ff800f 	.word	0xf9ff800f

08006448 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006448:	b480      	push	{r7}
 800644a:	b089      	sub	sp, #36	; 0x24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800645a:	2300      	movs	r3, #0
 800645c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006464:	d10b      	bne.n	800647e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006466:	4b7e      	ldr	r3, [pc, #504]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006468:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800646c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006470:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2b60      	cmp	r3, #96	; 0x60
 8006476:	d112      	bne.n	800649e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006478:	4b7a      	ldr	r3, [pc, #488]	; (8006664 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800647a:	61fb      	str	r3, [r7, #28]
 800647c:	e00f      	b.n	800649e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006484:	d10b      	bne.n	800649e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006486:	4b76      	ldr	r3, [pc, #472]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006488:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800648c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006490:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006498:	d101      	bne.n	800649e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800649a:	4b72      	ldr	r3, [pc, #456]	; (8006664 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800649c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f040 80d6 	bne.w	8006652 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	2b40      	cmp	r3, #64	; 0x40
 80064ae:	d003      	beq.n	80064b8 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b6:	d13b      	bne.n	8006530 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80064b8:	4b69      	ldr	r3, [pc, #420]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064c4:	f040 80c4 	bne.w	8006650 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80064c8:	4b65      	ldr	r3, [pc, #404]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 80bd 	beq.w	8006650 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80064d6:	4b62      	ldr	r3, [pc, #392]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	091b      	lsrs	r3, r3, #4
 80064dc:	f003 030f 	and.w	r3, r3, #15
 80064e0:	3301      	adds	r3, #1
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80064ea:	4b5d      	ldr	r3, [pc, #372]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	0a1b      	lsrs	r3, r3, #8
 80064f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80064f6:	4b5a      	ldr	r3, [pc, #360]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	0edb      	lsrs	r3, r3, #27
 80064fc:	f003 031f 	and.w	r3, r3, #31
 8006500:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10a      	bne.n	800651e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006508:	4b55      	ldr	r3, [pc, #340]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006514:	2311      	movs	r3, #17
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	e001      	b.n	800651e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800651a:	2307      	movs	r3, #7
 800651c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	fb03 f202 	mul.w	r2, r3, r2
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	fbb2 f3f3 	udiv	r3, r2, r3
 800652c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800652e:	e08f      	b.n	8006650 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d13a      	bne.n	80065ac <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006536:	4b4a      	ldr	r3, [pc, #296]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800653e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006542:	f040 8086 	bne.w	8006652 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006546:	4b46      	ldr	r3, [pc, #280]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d07f      	beq.n	8006652 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006552:	4b43      	ldr	r3, [pc, #268]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	091b      	lsrs	r3, r3, #4
 8006558:	f003 030f 	and.w	r3, r3, #15
 800655c:	3301      	adds	r3, #1
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	fbb2 f3f3 	udiv	r3, r2, r3
 8006564:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006566:	4b3e      	ldr	r3, [pc, #248]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	0a1b      	lsrs	r3, r3, #8
 800656c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006570:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006572:	4b3b      	ldr	r3, [pc, #236]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	0edb      	lsrs	r3, r3, #27
 8006578:	f003 031f 	and.w	r3, r3, #31
 800657c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006584:	4b36      	ldr	r3, [pc, #216]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006590:	2311      	movs	r3, #17
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	e001      	b.n	800659a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006596:	2307      	movs	r3, #7
 8006598:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	fb03 f202 	mul.w	r2, r3, r2
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a8:	61fb      	str	r3, [r7, #28]
 80065aa:	e052      	b.n	8006652 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	2b80      	cmp	r3, #128	; 0x80
 80065b0:	d003      	beq.n	80065ba <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b8:	d109      	bne.n	80065ce <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065ba:	4b29      	ldr	r3, [pc, #164]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c6:	d144      	bne.n	8006652 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80065c8:	4b27      	ldr	r3, [pc, #156]	; (8006668 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80065ca:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065cc:	e041      	b.n	8006652 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	d003      	beq.n	80065dc <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065da:	d13a      	bne.n	8006652 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80065dc:	4b20      	ldr	r3, [pc, #128]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e8:	d133      	bne.n	8006652 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80065ea:	4b1d      	ldr	r3, [pc, #116]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d02d      	beq.n	8006652 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80065f6:	4b1a      	ldr	r3, [pc, #104]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	091b      	lsrs	r3, r3, #4
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	3301      	adds	r3, #1
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	fbb2 f3f3 	udiv	r3, r2, r3
 8006608:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800660a:	4b15      	ldr	r3, [pc, #84]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	0a1b      	lsrs	r3, r3, #8
 8006610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006614:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006616:	4b12      	ldr	r3, [pc, #72]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	0edb      	lsrs	r3, r3, #27
 800661c:	f003 031f 	and.w	r3, r3, #31
 8006620:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10a      	bne.n	800663e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006628:	4b0d      	ldr	r3, [pc, #52]	; (8006660 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006634:	2311      	movs	r3, #17
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	e001      	b.n	800663e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800663a:	2307      	movs	r3, #7
 800663c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	fb03 f202 	mul.w	r2, r3, r2
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	fbb2 f3f3 	udiv	r3, r2, r3
 800664c:	61fb      	str	r3, [r7, #28]
 800664e:	e000      	b.n	8006652 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006650:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006652:	69fb      	ldr	r3, [r7, #28]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3724      	adds	r7, #36	; 0x24
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	40021000 	.word	0x40021000
 8006664:	001fff68 	.word	0x001fff68
 8006668:	00f42400 	.word	0x00f42400

0800666c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b02      	cmp	r3, #2
 800667e:	d904      	bls.n	800668a <HAL_SAI_InitProtocol+0x1e>
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	3b03      	subs	r3, #3
 8006684:	2b01      	cmp	r3, #1
 8006686:	d812      	bhi.n	80066ae <HAL_SAI_InitProtocol+0x42>
 8006688:	e008      	b.n	800669c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	68b9      	ldr	r1, [r7, #8]
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 f9fb 	bl	8006a8c <SAI_InitI2S>
 8006696:	4603      	mov	r3, r0
 8006698:	75fb      	strb	r3, [r7, #23]
      break;
 800669a:	e00b      	b.n	80066b4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	68b9      	ldr	r1, [r7, #8]
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 faa4 	bl	8006bf0 <SAI_InitPCM>
 80066a8:	4603      	mov	r3, r0
 80066aa:	75fb      	strb	r3, [r7, #23]
      break;
 80066ac:	e002      	b.n	80066b4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	75fb      	strb	r3, [r7, #23]
      break;
 80066b2:	bf00      	nop
  }

  if (status == HAL_OK)
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d104      	bne.n	80066c4 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 f808 	bl	80066d0 <HAL_SAI_Init>
 80066c0:	4603      	mov	r3, r0
 80066c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80066c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08a      	sub	sp, #40	; 0x28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e1c7      	b.n	8006a72 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d10e      	bne.n	800670a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a81      	ldr	r2, [pc, #516]	; (80068f8 <HAL_SAI_Init+0x228>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d107      	bne.n	8006706 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d103      	bne.n	8006706 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e1b3      	b.n	8006a72 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d106      	bne.n	8006724 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7fb fd2e 	bl	8002180 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fae5 	bl	8006cf4 <SAI_Disable>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e19e      	b.n	8006a72 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d00c      	beq.n	800675e <HAL_SAI_Init+0x8e>
 8006744:	2b02      	cmp	r3, #2
 8006746:	d80d      	bhi.n	8006764 <HAL_SAI_Init+0x94>
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <HAL_SAI_Init+0x82>
 800674c:	2b01      	cmp	r3, #1
 800674e:	d003      	beq.n	8006758 <HAL_SAI_Init+0x88>
 8006750:	e008      	b.n	8006764 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006756:	e008      	b.n	800676a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006758:	2310      	movs	r3, #16
 800675a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800675c:	e005      	b.n	800676a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800675e:	2320      	movs	r3, #32
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006762:	e002      	b.n	800676a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006764:	2300      	movs	r3, #0
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006768:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b03      	cmp	r3, #3
 8006770:	d81d      	bhi.n	80067ae <HAL_SAI_Init+0xde>
 8006772:	a201      	add	r2, pc, #4	; (adr r2, 8006778 <HAL_SAI_Init+0xa8>)
 8006774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006778:	08006789 	.word	0x08006789
 800677c:	0800678f 	.word	0x0800678f
 8006780:	08006797 	.word	0x08006797
 8006784:	0800679f 	.word	0x0800679f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006788:	2300      	movs	r3, #0
 800678a:	61fb      	str	r3, [r7, #28]
      break;
 800678c:	e012      	b.n	80067b4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800678e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006792:	61fb      	str	r3, [r7, #28]
      break;
 8006794:	e00e      	b.n	80067b4 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006796:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800679a:	61fb      	str	r3, [r7, #28]
      break;
 800679c:	e00a      	b.n	80067b4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800679e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80067a2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	f043 0301 	orr.w	r3, r3, #1
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80067ac:	e002      	b.n	80067b4 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	61fb      	str	r3, [r7, #28]
      break;
 80067b2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a4f      	ldr	r2, [pc, #316]	; (80068f8 <HAL_SAI_Init+0x228>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d004      	beq.n	80067c8 <HAL_SAI_Init+0xf8>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a4e      	ldr	r2, [pc, #312]	; (80068fc <HAL_SAI_Init+0x22c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d103      	bne.n	80067d0 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 80067c8:	4a4d      	ldr	r2, [pc, #308]	; (8006900 <HAL_SAI_Init+0x230>)
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	e002      	b.n	80067d6 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80067d0:	4a4c      	ldr	r2, [pc, #304]	; (8006904 <HAL_SAI_Init+0x234>)
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d073      	beq.n	80068c6 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a45      	ldr	r2, [pc, #276]	; (80068f8 <HAL_SAI_Init+0x228>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d004      	beq.n	80067f2 <HAL_SAI_Init+0x122>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a43      	ldr	r2, [pc, #268]	; (80068fc <HAL_SAI_Init+0x22c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d105      	bne.n	80067fe <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80067f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80067f6:	f7fe fd1d 	bl	8005234 <HAL_RCCEx_GetPeriphCLKFreq>
 80067fa:	61b8      	str	r0, [r7, #24]
 80067fc:	e004      	b.n	8006808 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80067fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006802:	f7fe fd17 	bl	8005234 <HAL_RCCEx_GetPeriphCLKFreq>
 8006806:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006810:	d120      	bne.n	8006854 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	2b04      	cmp	r3, #4
 8006818:	d102      	bne.n	8006820 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800681a:	2340      	movs	r3, #64	; 0x40
 800681c:	613b      	str	r3, [r7, #16]
 800681e:	e00a      	b.n	8006836 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006824:	2b08      	cmp	r3, #8
 8006826:	d103      	bne.n	8006830 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8006828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800682c:	613b      	str	r3, [r7, #16]
 800682e:	e002      	b.n	8006836 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006834:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006836:	69ba      	ldr	r2, [r7, #24]
 8006838:	4613      	mov	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	4619      	mov	r1, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	fb02 f303 	mul.w	r3, r2, r3
 800684c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006850:	617b      	str	r3, [r7, #20]
 8006852:	e017      	b.n	8006884 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800685c:	d101      	bne.n	8006862 <HAL_SAI_Init+0x192>
 800685e:	2302      	movs	r3, #2
 8006860:	e000      	b.n	8006864 <HAL_SAI_Init+0x194>
 8006862:	2301      	movs	r3, #1
 8006864:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	4619      	mov	r1, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	fb02 f303 	mul.w	r3, r2, r3
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006882:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	4a20      	ldr	r2, [pc, #128]	; (8006908 <HAL_SAI_Init+0x238>)
 8006888:	fba2 2303 	umull	r2, r3, r2, r3
 800688c:	08da      	lsrs	r2, r3, #3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006892:	6979      	ldr	r1, [r7, #20]
 8006894:	4b1c      	ldr	r3, [pc, #112]	; (8006908 <HAL_SAI_Init+0x238>)
 8006896:	fba3 2301 	umull	r2, r3, r3, r1
 800689a:	08da      	lsrs	r2, r3, #3
 800689c:	4613      	mov	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	1aca      	subs	r2, r1, r3
 80068a6:	2a08      	cmp	r2, #8
 80068a8:	d904      	bls.n	80068b4 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d104      	bne.n	80068c6 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a1b      	ldr	r3, [r3, #32]
 80068c0:	085a      	lsrs	r2, r3, #1
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <HAL_SAI_Init+0x206>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d109      	bne.n	80068ea <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d101      	bne.n	80068e2 <HAL_SAI_Init+0x212>
 80068de:	2300      	movs	r3, #0
 80068e0:	e001      	b.n	80068e6 <HAL_SAI_Init+0x216>
 80068e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068e6:	623b      	str	r3, [r7, #32]
 80068e8:	e012      	b.n	8006910 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d10c      	bne.n	800690c <HAL_SAI_Init+0x23c>
 80068f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068f6:	e00a      	b.n	800690e <HAL_SAI_Init+0x23e>
 80068f8:	40015404 	.word	0x40015404
 80068fc:	40015424 	.word	0x40015424
 8006900:	40015400 	.word	0x40015400
 8006904:	40015800 	.word	0x40015800
 8006908:	cccccccd 	.word	0xcccccccd
 800690c:	2300      	movs	r3, #0
 800690e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6819      	ldr	r1, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	4b58      	ldr	r3, [pc, #352]	; (8006a7c <HAL_SAI_Init+0x3ac>)
 800691c:	400b      	ands	r3, r1
 800691e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6819      	ldr	r1, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006934:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800693a:	431a      	orrs	r2, r3
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8006948:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006954:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	051b      	lsls	r3, r3, #20
 800695c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006962:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6812      	ldr	r2, [r2, #0]
 8006976:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800697a:	f023 030f 	bic.w	r3, r3, #15
 800697e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6859      	ldr	r1, [r3, #4]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699a      	ldr	r2, [r3, #24]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006994:	431a      	orrs	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6899      	ldr	r1, [r3, #8]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	4b35      	ldr	r3, [pc, #212]	; (8006a80 <HAL_SAI_Init+0x3b0>)
 80069aa:	400b      	ands	r3, r1
 80069ac:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6899      	ldr	r1, [r3, #8]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80069be:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 80069c4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 80069ca:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d0:	3b01      	subs	r3, #1
 80069d2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80069d4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68d9      	ldr	r1, [r3, #12]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	f24f 0320 	movw	r3, #61472	; 0xf020
 80069ec:	400b      	ands	r3, r1
 80069ee:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68d9      	ldr	r1, [r3, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069fe:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a04:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006a06:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	021b      	lsls	r3, r3, #8
 8006a10:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a19      	ldr	r2, [pc, #100]	; (8006a84 <HAL_SAI_Init+0x3b4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d119      	bne.n	8006a58 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006a24:	4b18      	ldr	r3, [pc, #96]	; (8006a88 <HAL_SAI_Init+0x3b8>)
 8006a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a28:	4a17      	ldr	r2, [pc, #92]	; (8006a88 <HAL_SAI_Init+0x3b8>)
 8006a2a:	f023 0301 	bic.w	r3, r3, #1
 8006a2e:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d10e      	bne.n	8006a58 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a42:	3b01      	subs	r3, #1
 8006a44:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006a46:	4910      	ldr	r1, [pc, #64]	; (8006a88 <HAL_SAI_Init+0x3b8>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006a4c:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <HAL_SAI_Init+0x3b8>)
 8006a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a50:	4a0d      	ldr	r2, [pc, #52]	; (8006a88 <HAL_SAI_Init+0x3b8>)
 8006a52:	f043 0301 	orr.w	r3, r3, #1
 8006a56:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3728      	adds	r7, #40	; 0x28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	f805c010 	.word	0xf805c010
 8006a80:	fff88000 	.word	0xfff88000
 8006a84:	40015404 	.word	0x40015404
 8006a88:	40015400 	.word	0x40015400

08006a8c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <SAI_InitI2S+0x2e>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d103      	bne.n	8006ac2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	64da      	str	r2, [r3, #76]	; 0x4c
 8006ac0:	e002      	b.n	8006ac8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ace:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ad6:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e077      	b.n	8006be2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d107      	bne.n	8006b08 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006b04:	661a      	str	r2, [r3, #96]	; 0x60
 8006b06:	e006      	b.n	8006b16 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006b0e:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d84f      	bhi.n	8006bbc <SAI_InitI2S+0x130>
 8006b1c:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <SAI_InitI2S+0x98>)
 8006b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b22:	bf00      	nop
 8006b24:	08006b35 	.word	0x08006b35
 8006b28:	08006b57 	.word	0x08006b57
 8006b2c:	08006b79 	.word	0x08006b79
 8006b30:	08006b9b 	.word	0x08006b9b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2280      	movs	r2, #128	; 0x80
 8006b38:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	085b      	lsrs	r3, r3, #1
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	085b      	lsrs	r3, r3, #1
 8006b48:	011a      	lsls	r2, r3, #4
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2240      	movs	r2, #64	; 0x40
 8006b52:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006b54:	e035      	b.n	8006bc2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2280      	movs	r2, #128	; 0x80
 8006b5a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	085b      	lsrs	r3, r3, #1
 8006b60:	019a      	lsls	r2, r3, #6
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	085b      	lsrs	r3, r3, #1
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2280      	movs	r2, #128	; 0x80
 8006b74:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006b76:	e024      	b.n	8006bc2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	22c0      	movs	r2, #192	; 0xc0
 8006b7c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	085b      	lsrs	r3, r3, #1
 8006b82:	019a      	lsls	r2, r3, #6
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	085b      	lsrs	r3, r3, #1
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2280      	movs	r2, #128	; 0x80
 8006b96:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006b98:	e013      	b.n	8006bc2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	22e0      	movs	r2, #224	; 0xe0
 8006b9e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	019a      	lsls	r2, r3, #6
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	085b      	lsrs	r3, r3, #1
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2280      	movs	r2, #128	; 0x80
 8006bb8:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006bba:	e002      	b.n	8006bc2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d10b      	bne.n	8006be0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d102      	bne.n	8006bd4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2210      	movs	r2, #16
 8006bd2:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d102      	bne.n	8006be0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2208      	movs	r2, #8
 8006bde:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	371c      	adds	r7, #28
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop

08006bf0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <SAI_InitPCM+0x2e>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d103      	bne.n	8006c26 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2201      	movs	r2, #1
 8006c22:	64da      	str	r2, [r3, #76]	; 0x4c
 8006c24:	e002      	b.n	8006c2c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006c38:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006c40:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c54:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d103      	bne.n	8006c64 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	655a      	str	r2, [r3, #84]	; 0x54
 8006c62:	e002      	b.n	8006c6a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	220d      	movs	r2, #13
 8006c68:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b03      	cmp	r3, #3
 8006c6e:	d837      	bhi.n	8006ce0 <SAI_InitPCM+0xf0>
 8006c70:	a201      	add	r2, pc, #4	; (adr r2, 8006c78 <SAI_InitPCM+0x88>)
 8006c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c76:	bf00      	nop
 8006c78:	08006c89 	.word	0x08006c89
 8006c7c:	08006c9f 	.word	0x08006c9f
 8006c80:	08006cb5 	.word	0x08006cb5
 8006c84:	08006ccb 	.word	0x08006ccb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2280      	movs	r2, #128	; 0x80
 8006c8c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	011a      	lsls	r2, r3, #4
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2240      	movs	r2, #64	; 0x40
 8006c9a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006c9c:	e023      	b.n	8006ce6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2280      	movs	r2, #128	; 0x80
 8006ca2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2280      	movs	r2, #128	; 0x80
 8006cb0:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006cb2:	e018      	b.n	8006ce6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	22c0      	movs	r2, #192	; 0xc0
 8006cb8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2280      	movs	r2, #128	; 0x80
 8006cc6:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006cc8:	e00d      	b.n	8006ce6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	22e0      	movs	r2, #224	; 0xe0
 8006cce:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2280      	movs	r2, #128	; 0x80
 8006cdc:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006cde:	e002      	b.n	8006ce6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ce4:	bf00      	nop
  }

  return status;
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	371c      	adds	r7, #28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006cfc:	4b18      	ldr	r3, [pc, #96]	; (8006d60 <SAI_Disable+0x6c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a18      	ldr	r2, [pc, #96]	; (8006d64 <SAI_Disable+0x70>)
 8006d02:	fba2 2303 	umull	r2, r3, r2, r3
 8006d06:	0b1b      	lsrs	r3, r3, #12
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006d1e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10a      	bne.n	8006d3c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	72fb      	strb	r3, [r7, #11]
      break;
 8006d3a:	e009      	b.n	8006d50 <SAI_Disable+0x5c>
    }
    count--;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1e7      	bne.n	8006d20 <SAI_Disable+0x2c>

  return status;
 8006d50:	7afb      	ldrb	r3, [r7, #11]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	20000000 	.word	0x20000000
 8006d64:	95cbec1b 	.word	0x95cbec1b

08006d68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e095      	b.n	8006ea6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d108      	bne.n	8006d94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d8a:	d009      	beq.n	8006da0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	61da      	str	r2, [r3, #28]
 8006d92:	e005      	b.n	8006da0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d106      	bne.n	8006dc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7fa ffd6 	bl	8001d6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dd6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006de0:	d902      	bls.n	8006de8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	e002      	b.n	8006dee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006dec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006df6:	d007      	beq.n	8006e08 <HAL_SPI_Init+0xa0>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e00:	d002      	beq.n	8006e08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e4a:	ea42 0103 	orr.w	r1, r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e52:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	0c1b      	lsrs	r3, r3, #16
 8006e64:	f003 0204 	and.w	r2, r3, #4
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	f003 0310 	and.w	r3, r3, #16
 8006e70:	431a      	orrs	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e76:	f003 0308 	and.w	r3, r3, #8
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006e84:	ea42 0103 	orr.w	r1, r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b088      	sub	sp, #32
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	603b      	str	r3, [r7, #0]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_SPI_Transmit+0x22>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e15f      	b.n	8007190 <HAL_SPI_Transmit+0x2e2>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ed8:	f7fb fadc 	bl	8002494 <HAL_GetTick>
 8006edc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d002      	beq.n	8006ef4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006eee:	2302      	movs	r3, #2
 8006ef0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ef2:	e148      	b.n	8007186 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <HAL_SPI_Transmit+0x52>
 8006efa:	88fb      	ldrh	r3, [r7, #6]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d102      	bne.n	8006f06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f04:	e13f      	b.n	8007186 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2203      	movs	r2, #3
 8006f0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	88fa      	ldrh	r2, [r7, #6]
 8006f1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	88fa      	ldrh	r2, [r7, #6]
 8006f24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f50:	d10f      	bne.n	8006f72 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7c:	2b40      	cmp	r3, #64	; 0x40
 8006f7e:	d007      	beq.n	8006f90 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f98:	d94f      	bls.n	800703a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <HAL_SPI_Transmit+0xfa>
 8006fa2:	8afb      	ldrh	r3, [r7, #22]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d142      	bne.n	800702e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fac:	881a      	ldrh	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb8:	1c9a      	adds	r2, r3, #2
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fcc:	e02f      	b.n	800702e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d112      	bne.n	8007002 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe0:	881a      	ldrh	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	1c9a      	adds	r2, r3, #2
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007000:	e015      	b.n	800702e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007002:	f7fb fa47 	bl	8002494 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	429a      	cmp	r2, r3
 8007010:	d803      	bhi.n	800701a <HAL_SPI_Transmit+0x16c>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007018:	d102      	bne.n	8007020 <HAL_SPI_Transmit+0x172>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d106      	bne.n	800702e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800702c:	e0ab      	b.n	8007186 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007032:	b29b      	uxth	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1ca      	bne.n	8006fce <HAL_SPI_Transmit+0x120>
 8007038:	e080      	b.n	800713c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d002      	beq.n	8007048 <HAL_SPI_Transmit+0x19a>
 8007042:	8afb      	ldrh	r3, [r7, #22]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d174      	bne.n	8007132 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800704c:	b29b      	uxth	r3, r3
 800704e:	2b01      	cmp	r3, #1
 8007050:	d912      	bls.n	8007078 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	881a      	ldrh	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007062:	1c9a      	adds	r2, r3, #2
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800706c:	b29b      	uxth	r3, r3
 800706e:	3b02      	subs	r3, #2
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007076:	e05c      	b.n	8007132 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	330c      	adds	r3, #12
 8007082:	7812      	ldrb	r2, [r2, #0]
 8007084:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007094:	b29b      	uxth	r3, r3
 8007096:	3b01      	subs	r3, #1
 8007098:	b29a      	uxth	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800709e:	e048      	b.n	8007132 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d12b      	bne.n	8007106 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d912      	bls.n	80070de <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070bc:	881a      	ldrh	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c8:	1c9a      	adds	r2, r3, #2
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	3b02      	subs	r3, #2
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070dc:	e029      	b.n	8007132 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	330c      	adds	r3, #12
 80070e8:	7812      	ldrb	r2, [r2, #0]
 80070ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	3b01      	subs	r3, #1
 80070fe:	b29a      	uxth	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007104:	e015      	b.n	8007132 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007106:	f7fb f9c5 	bl	8002494 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	429a      	cmp	r2, r3
 8007114:	d803      	bhi.n	800711e <HAL_SPI_Transmit+0x270>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711c:	d102      	bne.n	8007124 <HAL_SPI_Transmit+0x276>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d106      	bne.n	8007132 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007130:	e029      	b.n	8007186 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007136:	b29b      	uxth	r3, r3
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1b1      	bne.n	80070a0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f001 fa0d 	bl	8008560 <SPI_EndRxTxTransaction>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2220      	movs	r2, #32
 8007150:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10a      	bne.n	8007170 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800715a:	2300      	movs	r3, #0
 800715c:	613b      	str	r3, [r7, #16]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	613b      	str	r3, [r7, #16]
 800716e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	77fb      	strb	r3, [r7, #31]
 800717c:	e003      	b.n	8007186 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800718e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3720      	adds	r7, #32
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af02      	add	r7, sp, #8
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	603b      	str	r3, [r7, #0]
 80071a4:	4613      	mov	r3, r2
 80071a6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d002      	beq.n	80071be <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80071b8:	2302      	movs	r3, #2
 80071ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071bc:	e11a      	b.n	80073f4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071c6:	d112      	bne.n	80071ee <HAL_SPI_Receive+0x56>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10e      	bne.n	80071ee <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2204      	movs	r2, #4
 80071d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80071d8:	88fa      	ldrh	r2, [r7, #6]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	4613      	mov	r3, r2
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	68b9      	ldr	r1, [r7, #8]
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 f90e 	bl	8007406 <HAL_SPI_TransmitReceive>
 80071ea:	4603      	mov	r3, r0
 80071ec:	e107      	b.n	80073fe <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d101      	bne.n	80071fc <HAL_SPI_Receive+0x64>
 80071f8:	2302      	movs	r3, #2
 80071fa:	e100      	b.n	80073fe <HAL_SPI_Receive+0x266>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007204:	f7fb f946 	bl	8002494 <HAL_GetTick>
 8007208:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <HAL_SPI_Receive+0x7e>
 8007210:	88fb      	ldrh	r3, [r7, #6]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d102      	bne.n	800721c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	75fb      	strb	r3, [r7, #23]
    goto error;
 800721a:	e0eb      	b.n	80073f4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2204      	movs	r2, #4
 8007220:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	88fa      	ldrh	r2, [r7, #6]
 8007234:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	88fa      	ldrh	r2, [r7, #6]
 800723c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007266:	d908      	bls.n	800727a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007276:	605a      	str	r2, [r3, #4]
 8007278:	e007      	b.n	800728a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007288:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007292:	d10f      	bne.n	80072b4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072be:	2b40      	cmp	r3, #64	; 0x40
 80072c0:	d007      	beq.n	80072d2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072da:	d86f      	bhi.n	80073bc <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80072dc:	e034      	b.n	8007348 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d117      	bne.n	800731c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f103 020c 	add.w	r2, r3, #12
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f8:	7812      	ldrb	r2, [r2, #0]
 80072fa:	b2d2      	uxtb	r2, r2
 80072fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800730e:	b29b      	uxth	r3, r3
 8007310:	3b01      	subs	r3, #1
 8007312:	b29a      	uxth	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800731a:	e015      	b.n	8007348 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800731c:	f7fb f8ba 	bl	8002494 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d803      	bhi.n	8007334 <HAL_SPI_Receive+0x19c>
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007332:	d102      	bne.n	800733a <HAL_SPI_Receive+0x1a2>
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d106      	bne.n	8007348 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007346:	e055      	b.n	80073f4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800734e:	b29b      	uxth	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1c4      	bne.n	80072de <HAL_SPI_Receive+0x146>
 8007354:	e038      	b.n	80073c8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b01      	cmp	r3, #1
 8007362:	d115      	bne.n	8007390 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68da      	ldr	r2, [r3, #12]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	b292      	uxth	r2, r2
 8007370:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	1c9a      	adds	r2, r3, #2
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007382:	b29b      	uxth	r3, r3
 8007384:	3b01      	subs	r3, #1
 8007386:	b29a      	uxth	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800738e:	e015      	b.n	80073bc <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007390:	f7fb f880 	bl	8002494 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	429a      	cmp	r2, r3
 800739e:	d803      	bhi.n	80073a8 <HAL_SPI_Receive+0x210>
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a6:	d102      	bne.n	80073ae <HAL_SPI_Receive+0x216>
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d106      	bne.n	80073bc <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80073ba:	e01b      	b.n	80073f4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1c6      	bne.n	8007356 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f001 f86f 	bl	80084b0 <SPI_EndRxTransaction>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2220      	movs	r2, #32
 80073dc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	75fb      	strb	r3, [r7, #23]
 80073ea:	e003      	b.n	80073f4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b08a      	sub	sp, #40	; 0x28
 800740a:	af00      	add	r7, sp, #0
 800740c:	60f8      	str	r0, [r7, #12]
 800740e:	60b9      	str	r1, [r7, #8]
 8007410:	607a      	str	r2, [r7, #4]
 8007412:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007414:	2301      	movs	r3, #1
 8007416:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007418:	2300      	movs	r3, #0
 800741a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007424:	2b01      	cmp	r3, #1
 8007426:	d101      	bne.n	800742c <HAL_SPI_TransmitReceive+0x26>
 8007428:	2302      	movs	r3, #2
 800742a:	e20a      	b.n	8007842 <HAL_SPI_TransmitReceive+0x43c>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007434:	f7fb f82e 	bl	8002494 <HAL_GetTick>
 8007438:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007440:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007448:	887b      	ldrh	r3, [r7, #2]
 800744a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800744c:	887b      	ldrh	r3, [r7, #2]
 800744e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007450:	7efb      	ldrb	r3, [r7, #27]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d00e      	beq.n	8007474 <HAL_SPI_TransmitReceive+0x6e>
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800745c:	d106      	bne.n	800746c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d102      	bne.n	800746c <HAL_SPI_TransmitReceive+0x66>
 8007466:	7efb      	ldrb	r3, [r7, #27]
 8007468:	2b04      	cmp	r3, #4
 800746a:	d003      	beq.n	8007474 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800746c:	2302      	movs	r3, #2
 800746e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007472:	e1e0      	b.n	8007836 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d005      	beq.n	8007486 <HAL_SPI_TransmitReceive+0x80>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <HAL_SPI_TransmitReceive+0x80>
 8007480:	887b      	ldrh	r3, [r7, #2]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d103      	bne.n	800748e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800748c:	e1d3      	b.n	8007836 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b04      	cmp	r3, #4
 8007498:	d003      	beq.n	80074a2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2205      	movs	r2, #5
 800749e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	887a      	ldrh	r2, [r7, #2]
 80074b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	887a      	ldrh	r2, [r7, #2]
 80074ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	887a      	ldrh	r2, [r7, #2]
 80074c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	887a      	ldrh	r2, [r7, #2]
 80074ce:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074e4:	d802      	bhi.n	80074ec <HAL_SPI_TransmitReceive+0xe6>
 80074e6:	8a3b      	ldrh	r3, [r7, #16]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d908      	bls.n	80074fe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80074fa:	605a      	str	r2, [r3, #4]
 80074fc:	e007      	b.n	800750e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800750c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007518:	2b40      	cmp	r3, #64	; 0x40
 800751a:	d007      	beq.n	800752c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800752a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007534:	f240 8081 	bls.w	800763a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <HAL_SPI_TransmitReceive+0x140>
 8007540:	8a7b      	ldrh	r3, [r7, #18]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d16d      	bne.n	8007622 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754a:	881a      	ldrh	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007556:	1c9a      	adds	r2, r3, #2
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007560:	b29b      	uxth	r3, r3
 8007562:	3b01      	subs	r3, #1
 8007564:	b29a      	uxth	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800756a:	e05a      	b.n	8007622 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b02      	cmp	r3, #2
 8007578:	d11b      	bne.n	80075b2 <HAL_SPI_TransmitReceive+0x1ac>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800757e:	b29b      	uxth	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d016      	beq.n	80075b2 <HAL_SPI_TransmitReceive+0x1ac>
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	2b01      	cmp	r3, #1
 8007588:	d113      	bne.n	80075b2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758e:	881a      	ldrh	r2, [r3, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759a:	1c9a      	adds	r2, r3, #2
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	3b01      	subs	r3, #1
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d11c      	bne.n	80075fa <HAL_SPI_TransmitReceive+0x1f4>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d016      	beq.n	80075fa <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68da      	ldr	r2, [r3, #12]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	b292      	uxth	r2, r2
 80075d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	1c9a      	adds	r2, r3, #2
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	3b01      	subs	r3, #1
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075f6:	2301      	movs	r3, #1
 80075f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80075fa:	f7fa ff4b 	bl	8002494 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007606:	429a      	cmp	r2, r3
 8007608:	d80b      	bhi.n	8007622 <HAL_SPI_TransmitReceive+0x21c>
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007610:	d007      	beq.n	8007622 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007620:	e109      	b.n	8007836 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007626:	b29b      	uxth	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d19f      	bne.n	800756c <HAL_SPI_TransmitReceive+0x166>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007632:	b29b      	uxth	r3, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	d199      	bne.n	800756c <HAL_SPI_TransmitReceive+0x166>
 8007638:	e0e3      	b.n	8007802 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d003      	beq.n	800764a <HAL_SPI_TransmitReceive+0x244>
 8007642:	8a7b      	ldrh	r3, [r7, #18]
 8007644:	2b01      	cmp	r3, #1
 8007646:	f040 80cf 	bne.w	80077e8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800764e:	b29b      	uxth	r3, r3
 8007650:	2b01      	cmp	r3, #1
 8007652:	d912      	bls.n	800767a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	881a      	ldrh	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007664:	1c9a      	adds	r2, r3, #2
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800766e:	b29b      	uxth	r3, r3
 8007670:	3b02      	subs	r3, #2
 8007672:	b29a      	uxth	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007678:	e0b6      	b.n	80077e8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	330c      	adds	r3, #12
 8007684:	7812      	ldrb	r2, [r2, #0]
 8007686:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076a0:	e0a2      	b.n	80077e8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d134      	bne.n	800771a <HAL_SPI_TransmitReceive+0x314>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d02f      	beq.n	800771a <HAL_SPI_TransmitReceive+0x314>
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d12c      	bne.n	800771a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d912      	bls.n	80076f0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ce:	881a      	ldrh	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	1c9a      	adds	r2, r3, #2
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	3b02      	subs	r3, #2
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076ee:	e012      	b.n	8007716 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	330c      	adds	r3, #12
 80076fa:	7812      	ldrb	r2, [r2, #0]
 80076fc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b01      	cmp	r3, #1
 8007726:	d148      	bne.n	80077ba <HAL_SPI_TransmitReceive+0x3b4>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800772e:	b29b      	uxth	r3, r3
 8007730:	2b00      	cmp	r3, #0
 8007732:	d042      	beq.n	80077ba <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800773a:	b29b      	uxth	r3, r3
 800773c:	2b01      	cmp	r3, #1
 800773e:	d923      	bls.n	8007788 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68da      	ldr	r2, [r3, #12]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	b292      	uxth	r2, r2
 800774c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	1c9a      	adds	r2, r3, #2
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800775e:	b29b      	uxth	r3, r3
 8007760:	3b02      	subs	r3, #2
 8007762:	b29a      	uxth	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b01      	cmp	r3, #1
 8007774:	d81f      	bhi.n	80077b6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007784:	605a      	str	r2, [r3, #4]
 8007786:	e016      	b.n	80077b6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f103 020c 	add.w	r2, r3, #12
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007794:	7812      	ldrb	r2, [r2, #0]
 8007796:	b2d2      	uxtb	r2, r2
 8007798:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779e:	1c5a      	adds	r2, r3, #1
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	3b01      	subs	r3, #1
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077b6:	2301      	movs	r3, #1
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80077ba:	f7fa fe6b 	bl	8002494 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d803      	bhi.n	80077d2 <HAL_SPI_TransmitReceive+0x3cc>
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d0:	d102      	bne.n	80077d8 <HAL_SPI_TransmitReceive+0x3d2>
 80077d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d107      	bne.n	80077e8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80077e6:	e026      	b.n	8007836 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f47f af57 	bne.w	80076a2 <HAL_SPI_TransmitReceive+0x29c>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f47f af50 	bne.w	80076a2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007802:	69fa      	ldr	r2, [r7, #28]
 8007804:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f000 feaa 	bl	8008560 <SPI_EndRxTxTransaction>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d005      	beq.n	800781e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2220      	movs	r2, #32
 800781c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800782c:	e003      	b.n	8007836 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800783e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007842:	4618      	mov	r0, r3
 8007844:	3728      	adds	r7, #40	; 0x28
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	4613      	mov	r3, r2
 8007858:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007864:	2b01      	cmp	r3, #1
 8007866:	d101      	bne.n	800786c <HAL_SPI_Transmit_DMA+0x20>
 8007868:	2302      	movs	r3, #2
 800786a:	e0d4      	b.n	8007a16 <HAL_SPI_Transmit_DMA+0x1ca>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b01      	cmp	r3, #1
 800787e:	d002      	beq.n	8007886 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007880:	2302      	movs	r3, #2
 8007882:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007884:	e0c2      	b.n	8007a0c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <HAL_SPI_Transmit_DMA+0x46>
 800788c:	88fb      	ldrh	r3, [r7, #6]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d102      	bne.n	8007898 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007896:	e0b9      	b.n	8007a0c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2203      	movs	r2, #3
 800789c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	88fa      	ldrh	r2, [r7, #6]
 80078b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	88fa      	ldrh	r2, [r7, #6]
 80078b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078e2:	d10f      	bne.n	8007904 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007902:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007908:	4a45      	ldr	r2, [pc, #276]	; (8007a20 <HAL_SPI_Transmit_DMA+0x1d4>)
 800790a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007910:	4a44      	ldr	r2, [pc, #272]	; (8007a24 <HAL_SPI_Transmit_DMA+0x1d8>)
 8007912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007918:	4a43      	ldr	r2, [pc, #268]	; (8007a28 <HAL_SPI_Transmit_DMA+0x1dc>)
 800791a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007920:	2200      	movs	r2, #0
 8007922:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007932:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800793c:	d82d      	bhi.n	800799a <HAL_SPI_Transmit_DMA+0x14e>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007948:	d127      	bne.n	800799a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800794e:	b29b      	uxth	r3, r3
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10f      	bne.n	8007978 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007966:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800796c:	b29b      	uxth	r3, r3
 800796e:	085b      	lsrs	r3, r3, #1
 8007970:	b29a      	uxth	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007976:	e010      	b.n	800799a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007986:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800798c:	b29b      	uxth	r3, r3
 800798e:	085b      	lsrs	r3, r3, #1
 8007990:	b29b      	uxth	r3, r3
 8007992:	3301      	adds	r3, #1
 8007994:	b29a      	uxth	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a2:	4619      	mov	r1, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	330c      	adds	r3, #12
 80079aa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079b0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80079b2:	f7fb ff00 	bl	80037b6 <HAL_DMA_Start_IT>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d008      	beq.n	80079ce <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079c0:	f043 0210 	orr.w	r2, r3, #16
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	75fb      	strb	r3, [r7, #23]

    goto error;
 80079cc:	e01e      	b.n	8007a0c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d8:	2b40      	cmp	r3, #64	; 0x40
 80079da:	d007      	beq.n	80079ec <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079ea:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f042 0220 	orr.w	r2, r2, #32
 80079fa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	685a      	ldr	r2, [r3, #4]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f042 0202 	orr.w	r2, r2, #2
 8007a0a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	080081df 	.word	0x080081df
 8007a24:	08008001 	.word	0x08008001
 8007a28:	08008233 	.word	0x08008233

08007a2c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	4613      	mov	r3, r2
 8007a38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d002      	beq.n	8007a50 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a4e:	e0fe      	b.n	8007c4e <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d110      	bne.n	8007a7a <HAL_SPI_Receive_DMA+0x4e>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a60:	d10b      	bne.n	8007a7a <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2204      	movs	r2, #4
 8007a66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007a6a:	88fb      	ldrh	r3, [r7, #6]
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	68b9      	ldr	r1, [r7, #8]
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 f8fb 	bl	8007c6c <HAL_SPI_TransmitReceive_DMA>
 8007a76:	4603      	mov	r3, r0
 8007a78:	e0ee      	b.n	8007c58 <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d101      	bne.n	8007a88 <HAL_SPI_Receive_DMA+0x5c>
 8007a84:	2302      	movs	r3, #2
 8007a86:	e0e7      	b.n	8007c58 <HAL_SPI_Receive_DMA+0x22c>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <HAL_SPI_Receive_DMA+0x70>
 8007a96:	88fb      	ldrh	r3, [r7, #6]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d102      	bne.n	8007aa2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007aa0:	e0d5      	b.n	8007c4e <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2204      	movs	r2, #4
 8007aa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	88fa      	ldrh	r2, [r7, #6]
 8007aba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	88fa      	ldrh	r2, [r7, #6]
 8007ac2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ae6:	d10f      	bne.n	8007b08 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007af6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b16:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b20:	d908      	bls.n	8007b34 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b30:	605a      	str	r2, [r3, #4]
 8007b32:	e042      	b.n	8007bba <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b42:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b4e:	d134      	bne.n	8007bba <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b5e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d111      	bne.n	8007b94 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b7e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	085b      	lsrs	r3, r3, #1
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007b92:	e012      	b.n	8007bba <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685a      	ldr	r2, [r3, #4]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ba2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	085b      	lsrs	r3, r3, #1
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bbe:	4a28      	ldr	r2, [pc, #160]	; (8007c60 <HAL_SPI_Receive_DMA+0x234>)
 8007bc0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc6:	4a27      	ldr	r2, [pc, #156]	; (8007c64 <HAL_SPI_Receive_DMA+0x238>)
 8007bc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bce:	4a26      	ldr	r2, [pc, #152]	; (8007c68 <HAL_SPI_Receive_DMA+0x23c>)
 8007bd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	330c      	adds	r3, #12
 8007be4:	4619      	mov	r1, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bf2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007bf4:	f7fb fddf 	bl	80037b6 <HAL_DMA_Start_IT>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d008      	beq.n	8007c10 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c02:	f043 0210 	orr.w	r2, r3, #16
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007c0e:	e01e      	b.n	8007c4e <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1a:	2b40      	cmp	r3, #64	; 0x40
 8007c1c:	d007      	beq.n	8007c2e <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c2c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f042 0220 	orr.w	r2, r2, #32
 8007c3c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0201 	orr.w	r2, r2, #1
 8007c4c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3718      	adds	r7, #24
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	080081fb 	.word	0x080081fb
 8007c64:	080080a7 	.word	0x080080a7
 8007c68:	08008233 	.word	0x08008233

08007c6c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
 8007c78:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d101      	bne.n	8007c8c <HAL_SPI_TransmitReceive_DMA+0x20>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e164      	b.n	8007f56 <HAL_SPI_TransmitReceive_DMA+0x2ea>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c9a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007ca2:	7dbb      	ldrb	r3, [r7, #22]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d00d      	beq.n	8007cc4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cae:	d106      	bne.n	8007cbe <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d102      	bne.n	8007cbe <HAL_SPI_TransmitReceive_DMA+0x52>
 8007cb8:	7dbb      	ldrb	r3, [r7, #22]
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	d002      	beq.n	8007cc4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007cc2:	e143      	b.n	8007f4c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007cd0:	887b      	ldrh	r3, [r7, #2]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d102      	bne.n	8007cdc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007cda:	e137      	b.n	8007f4c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b04      	cmp	r3, #4
 8007ce6:	d003      	beq.n	8007cf0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2205      	movs	r2, #5
 8007cec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	887a      	ldrh	r2, [r7, #2]
 8007d00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	887a      	ldrh	r2, [r7, #2]
 8007d06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	887a      	ldrh	r2, [r7, #2]
 8007d12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	887a      	ldrh	r2, [r7, #2]
 8007d1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8007d38:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d42:	d908      	bls.n	8007d56 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d52:	605a      	str	r2, [r3, #4]
 8007d54:	e06f      	b.n	8007e36 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d64:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d70:	d126      	bne.n	8007dc0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10f      	bne.n	8007d9e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d8c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	085b      	lsrs	r3, r3, #1
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d9c:	e010      	b.n	8007dc0 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dac:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	085b      	lsrs	r3, r3, #1
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	3301      	adds	r3, #1
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dca:	d134      	bne.n	8007e36 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007dda:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d111      	bne.n	8007e10 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dfa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	085b      	lsrs	r3, r3, #1
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007e0e:	e012      	b.n	8007e36 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e1e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	085b      	lsrs	r3, r3, #1
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d108      	bne.n	8007e54 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e46:	4a46      	ldr	r2, [pc, #280]	; (8007f60 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 8007e48:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e4e:	4a45      	ldr	r2, [pc, #276]	; (8007f64 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8007e50:	62da      	str	r2, [r3, #44]	; 0x2c
 8007e52:	e007      	b.n	8007e64 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e58:	4a43      	ldr	r2, [pc, #268]	; (8007f68 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8007e5a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e60:	4a42      	ldr	r2, [pc, #264]	; (8007f6c <HAL_SPI_TransmitReceive_DMA+0x300>)
 8007e62:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e68:	4a41      	ldr	r2, [pc, #260]	; (8007f70 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8007e6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e70:	2200      	movs	r2, #0
 8007e72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	330c      	adds	r3, #12
 8007e7e:	4619      	mov	r1, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e84:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e8c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007e8e:	f7fb fc92 	bl	80037b6 <HAL_DMA_Start_IT>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d008      	beq.n	8007eaa <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e9c:	f043 0210 	orr.w	r2, r3, #16
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007ea8:	e050      	b.n	8007f4c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f042 0201 	orr.w	r2, r2, #1
 8007eb8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ece:	2200      	movs	r2, #0
 8007ed0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	330c      	adds	r3, #12
 8007eea:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ef0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007ef2:	f7fb fc60 	bl	80037b6 <HAL_DMA_Start_IT>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d008      	beq.n	8007f0e <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f00:	f043 0210 	orr.w	r2, r3, #16
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007f0c:	e01e      	b.n	8007f4c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f18:	2b40      	cmp	r3, #64	; 0x40
 8007f1a:	d007      	beq.n	8007f2c <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f2a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f042 0220 	orr.w	r2, r2, #32
 8007f3a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685a      	ldr	r2, [r3, #4]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f042 0202 	orr.w	r2, r2, #2
 8007f4a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3718      	adds	r7, #24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	080081fb 	.word	0x080081fb
 8007f64:	080080a7 	.word	0x080080a7
 8007f68:	08008217 	.word	0x08008217
 8007f6c:	0800814f 	.word	0x0800814f
 8007f70:	08008233 	.word	0x08008233

08007f74 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800800e:	f7fa fa41 	bl	8002494 <HAL_GetTick>
 8008012:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0320 	and.w	r3, r3, #32
 800801e:	2b20      	cmp	r3, #32
 8008020:	d03b      	beq.n	800809a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0220 	bic.w	r2, r2, #32
 8008030:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 0202 	bic.w	r2, r2, #2
 8008040:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	2164      	movs	r1, #100	; 0x64
 8008046:	6978      	ldr	r0, [r7, #20]
 8008048:	f000 fa8a 	bl	8008560 <SPI_EndRxTxTransaction>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d005      	beq.n	800805e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008056:	f043 0220 	orr.w	r2, r3, #32
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10a      	bne.n	800807c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008066:	2300      	movs	r3, #0
 8008068:	60fb      	str	r3, [r7, #12]
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	60fb      	str	r3, [r7, #12]
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	60fb      	str	r3, [r7, #12]
 800807a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	2200      	movs	r2, #0
 8008080:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008092:	6978      	ldr	r0, [r7, #20]
 8008094:	f7ff ffaa 	bl	8007fec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008098:	e002      	b.n	80080a0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800809a:	6978      	ldr	r0, [r7, #20]
 800809c:	f7ff ff6a 	bl	8007f74 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b2:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080b4:	f7fa f9ee 	bl	8002494 <HAL_GetTick>
 80080b8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0320 	and.w	r3, r3, #32
 80080c4:	2b20      	cmp	r3, #32
 80080c6:	d03c      	beq.n	8008142 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 0220 	bic.w	r2, r2, #32
 80080d6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10d      	bne.n	80080fc <SPI_DMAReceiveCplt+0x56>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080e8:	d108      	bne.n	80080fc <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685a      	ldr	r2, [r3, #4]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f022 0203 	bic.w	r2, r2, #3
 80080f8:	605a      	str	r2, [r3, #4]
 80080fa:	e007      	b.n	800810c <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f022 0201 	bic.w	r2, r2, #1
 800810a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	2164      	movs	r1, #100	; 0x64
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 f9cd 	bl	80084b0 <SPI_EndRxTransaction>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2220      	movs	r2, #32
 8008120:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f7ff ff56 	bl	8007fec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008140:	e002      	b.n	8008148 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f7ff ff20 	bl	8007f88 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800815c:	f7fa f99a 	bl	8002494 <HAL_GetTick>
 8008160:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0320 	and.w	r3, r3, #32
 800816c:	2b20      	cmp	r3, #32
 800816e:	d030      	beq.n	80081d2 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0220 	bic.w	r2, r2, #32
 800817e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	2164      	movs	r1, #100	; 0x64
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 f9eb 	bl	8008560 <SPI_EndRxTxTransaction>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d005      	beq.n	800819c <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008194:	f043 0220 	orr.w	r2, r3, #32
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0203 	bic.w	r2, r2, #3
 80081aa:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f7ff ff0e 	bl	8007fec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80081d0:	e002      	b.n	80081d8 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f7ff fee2 	bl	8007f9c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f7ff fedf 	bl	8007fb0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80081f2:	bf00      	nop
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b084      	sub	sp, #16
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008206:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f7ff fedb 	bl	8007fc4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800820e:	bf00      	nop
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008222:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7ff fed7 	bl	8007fd8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800822a:	bf00      	nop
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	685a      	ldr	r2, [r3, #4]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 0203 	bic.w	r2, r2, #3
 800824e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008254:	f043 0210 	orr.w	r2, r3, #16
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f7ff fec1 	bl	8007fec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800826a:	bf00      	nop
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
	...

08008274 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b088      	sub	sp, #32
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	603b      	str	r3, [r7, #0]
 8008280:	4613      	mov	r3, r2
 8008282:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008284:	f7fa f906 	bl	8002494 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828c:	1a9b      	subs	r3, r3, r2
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	4413      	add	r3, r2
 8008292:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008294:	f7fa f8fe 	bl	8002494 <HAL_GetTick>
 8008298:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800829a:	4b39      	ldr	r3, [pc, #228]	; (8008380 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	015b      	lsls	r3, r3, #5
 80082a0:	0d1b      	lsrs	r3, r3, #20
 80082a2:	69fa      	ldr	r2, [r7, #28]
 80082a4:	fb02 f303 	mul.w	r3, r2, r3
 80082a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082aa:	e054      	b.n	8008356 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b2:	d050      	beq.n	8008356 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082b4:	f7fa f8ee 	bl	8002494 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	69fa      	ldr	r2, [r7, #28]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d902      	bls.n	80082ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d13d      	bne.n	8008346 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80082d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082e2:	d111      	bne.n	8008308 <SPI_WaitFlagStateUntilTimeout+0x94>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082ec:	d004      	beq.n	80082f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f6:	d107      	bne.n	8008308 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008306:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008310:	d10f      	bne.n	8008332 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008320:	601a      	str	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008330:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e017      	b.n	8008376 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800834c:	2300      	movs	r3, #0
 800834e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	3b01      	subs	r3, #1
 8008354:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	4013      	ands	r3, r2
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	429a      	cmp	r2, r3
 8008364:	bf0c      	ite	eq
 8008366:	2301      	moveq	r3, #1
 8008368:	2300      	movne	r3, #0
 800836a:	b2db      	uxtb	r3, r3
 800836c:	461a      	mov	r2, r3
 800836e:	79fb      	ldrb	r3, [r7, #7]
 8008370:	429a      	cmp	r2, r3
 8008372:	d19b      	bne.n	80082ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3720      	adds	r7, #32
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	20000000 	.word	0x20000000

08008384 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b08a      	sub	sp, #40	; 0x28
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008396:	f7fa f87d 	bl	8002494 <HAL_GetTick>
 800839a:	4602      	mov	r2, r0
 800839c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839e:	1a9b      	subs	r3, r3, r2
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	4413      	add	r3, r2
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80083a6:	f7fa f875 	bl	8002494 <HAL_GetTick>
 80083aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	330c      	adds	r3, #12
 80083b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80083b4:	4b3d      	ldr	r3, [pc, #244]	; (80084ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	4613      	mov	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	00da      	lsls	r2, r3, #3
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	0d1b      	lsrs	r3, r3, #20
 80083c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c6:	fb02 f303 	mul.w	r3, r2, r3
 80083ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80083cc:	e060      	b.n	8008490 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80083d4:	d107      	bne.n	80083e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d104      	bne.n	80083e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ec:	d050      	beq.n	8008490 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083ee:	f7fa f851 	bl	8002494 <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d902      	bls.n	8008404 <SPI_WaitFifoStateUntilTimeout+0x80>
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	2b00      	cmp	r3, #0
 8008402:	d13d      	bne.n	8008480 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008412:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800841c:	d111      	bne.n	8008442 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008426:	d004      	beq.n	8008432 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008430:	d107      	bne.n	8008442 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008440:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800844a:	d10f      	bne.n	800846c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800846a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	e010      	b.n	80084a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008486:	2300      	movs	r3, #0
 8008488:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	3b01      	subs	r3, #1
 800848e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689a      	ldr	r2, [r3, #8]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	4013      	ands	r3, r2
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	429a      	cmp	r2, r3
 800849e:	d196      	bne.n	80083ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3728      	adds	r7, #40	; 0x28
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20000000 	.word	0x20000000

080084b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af02      	add	r7, sp, #8
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084c4:	d111      	bne.n	80084ea <SPI_EndRxTransaction+0x3a>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ce:	d004      	beq.n	80084da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d8:	d107      	bne.n	80084ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084e8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	2200      	movs	r2, #0
 80084f2:	2180      	movs	r1, #128	; 0x80
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f7ff febd 	bl	8008274 <SPI_WaitFlagStateUntilTimeout>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d007      	beq.n	8008510 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008504:	f043 0220 	orr.w	r2, r3, #32
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e023      	b.n	8008558 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008518:	d11d      	bne.n	8008556 <SPI_EndRxTransaction+0xa6>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008522:	d004      	beq.n	800852e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800852c:	d113      	bne.n	8008556 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2200      	movs	r2, #0
 8008536:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f7ff ff22 	bl	8008384 <SPI_WaitFifoStateUntilTimeout>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d007      	beq.n	8008556 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800854a:	f043 0220 	orr.w	r2, r3, #32
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	e000      	b.n	8008558 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af02      	add	r7, sp, #8
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	9300      	str	r3, [sp, #0]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2200      	movs	r2, #0
 8008574:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f7ff ff03 	bl	8008384 <SPI_WaitFifoStateUntilTimeout>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d007      	beq.n	8008594 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008588:	f043 0220 	orr.w	r2, r3, #32
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008590:	2303      	movs	r3, #3
 8008592:	e027      	b.n	80085e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	2200      	movs	r2, #0
 800859c:	2180      	movs	r1, #128	; 0x80
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f7ff fe68 	bl	8008274 <SPI_WaitFlagStateUntilTimeout>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d007      	beq.n	80085ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085ae:	f043 0220 	orr.w	r2, r3, #32
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e014      	b.n	80085e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f7ff fedc 	bl	8008384 <SPI_WaitFifoStateUntilTimeout>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d007      	beq.n	80085e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085d6:	f043 0220 	orr.w	r2, r3, #32
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e000      	b.n	80085e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e049      	b.n	8008692 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d106      	bne.n	8008618 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7f9 fbee 	bl	8001df4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2202      	movs	r2, #2
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3304      	adds	r3, #4
 8008628:	4619      	mov	r1, r3
 800862a:	4610      	mov	r0, r2
 800862c:	f000 f94a 	bl	80088c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
	...

0800869c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d101      	bne.n	80086ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80086b6:	2302      	movs	r3, #2
 80086b8:	e0ff      	b.n	80088ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b14      	cmp	r3, #20
 80086c6:	f200 80f0 	bhi.w	80088aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80086ca:	a201      	add	r2, pc, #4	; (adr r2, 80086d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80086cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d0:	08008725 	.word	0x08008725
 80086d4:	080088ab 	.word	0x080088ab
 80086d8:	080088ab 	.word	0x080088ab
 80086dc:	080088ab 	.word	0x080088ab
 80086e0:	08008765 	.word	0x08008765
 80086e4:	080088ab 	.word	0x080088ab
 80086e8:	080088ab 	.word	0x080088ab
 80086ec:	080088ab 	.word	0x080088ab
 80086f0:	080087a7 	.word	0x080087a7
 80086f4:	080088ab 	.word	0x080088ab
 80086f8:	080088ab 	.word	0x080088ab
 80086fc:	080088ab 	.word	0x080088ab
 8008700:	080087e7 	.word	0x080087e7
 8008704:	080088ab 	.word	0x080088ab
 8008708:	080088ab 	.word	0x080088ab
 800870c:	080088ab 	.word	0x080088ab
 8008710:	08008829 	.word	0x08008829
 8008714:	080088ab 	.word	0x080088ab
 8008718:	080088ab 	.word	0x080088ab
 800871c:	080088ab 	.word	0x080088ab
 8008720:	08008869 	.word	0x08008869
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68b9      	ldr	r1, [r7, #8]
 800872a:	4618      	mov	r0, r3
 800872c:	f000 f964 	bl	80089f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	699a      	ldr	r2, [r3, #24]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f042 0208 	orr.w	r2, r2, #8
 800873e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	699a      	ldr	r2, [r3, #24]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 0204 	bic.w	r2, r2, #4
 800874e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6999      	ldr	r1, [r3, #24]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	691a      	ldr	r2, [r3, #16]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	619a      	str	r2, [r3, #24]
      break;
 8008762:	e0a5      	b.n	80088b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68b9      	ldr	r1, [r7, #8]
 800876a:	4618      	mov	r0, r3
 800876c:	f000 f9d4 	bl	8008b18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	699a      	ldr	r2, [r3, #24]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800877e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	699a      	ldr	r2, [r3, #24]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800878e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6999      	ldr	r1, [r3, #24]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	021a      	lsls	r2, r3, #8
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	430a      	orrs	r2, r1
 80087a2:	619a      	str	r2, [r3, #24]
      break;
 80087a4:	e084      	b.n	80088b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68b9      	ldr	r1, [r7, #8]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 fa3d 	bl	8008c2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	69da      	ldr	r2, [r3, #28]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f042 0208 	orr.w	r2, r2, #8
 80087c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	69da      	ldr	r2, [r3, #28]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f022 0204 	bic.w	r2, r2, #4
 80087d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	69d9      	ldr	r1, [r3, #28]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	691a      	ldr	r2, [r3, #16]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	430a      	orrs	r2, r1
 80087e2:	61da      	str	r2, [r3, #28]
      break;
 80087e4:	e064      	b.n	80088b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68b9      	ldr	r1, [r7, #8]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 faa5 	bl	8008d3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	69da      	ldr	r2, [r3, #28]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	69da      	ldr	r2, [r3, #28]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	69d9      	ldr	r1, [r3, #28]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	021a      	lsls	r2, r3, #8
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	61da      	str	r2, [r3, #28]
      break;
 8008826:	e043      	b.n	80088b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68b9      	ldr	r1, [r7, #8]
 800882e:	4618      	mov	r0, r3
 8008830:	f000 faee 	bl	8008e10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f042 0208 	orr.w	r2, r2, #8
 8008842:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0204 	bic.w	r2, r2, #4
 8008852:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	691a      	ldr	r2, [r3, #16]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	430a      	orrs	r2, r1
 8008864:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008866:	e023      	b.n	80088b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68b9      	ldr	r1, [r7, #8]
 800886e:	4618      	mov	r0, r3
 8008870:	f000 fb32 	bl	8008ed8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008882:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008892:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	021a      	lsls	r2, r3, #8
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	430a      	orrs	r2, r1
 80088a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80088a8:	e002      	b.n	80088b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	75fb      	strb	r3, [r7, #23]
      break;
 80088ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop

080088c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a40      	ldr	r2, [pc, #256]	; (80089d8 <TIM_Base_SetConfig+0x114>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d013      	beq.n	8008904 <TIM_Base_SetConfig+0x40>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088e2:	d00f      	beq.n	8008904 <TIM_Base_SetConfig+0x40>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a3d      	ldr	r2, [pc, #244]	; (80089dc <TIM_Base_SetConfig+0x118>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d00b      	beq.n	8008904 <TIM_Base_SetConfig+0x40>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a3c      	ldr	r2, [pc, #240]	; (80089e0 <TIM_Base_SetConfig+0x11c>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d007      	beq.n	8008904 <TIM_Base_SetConfig+0x40>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a3b      	ldr	r2, [pc, #236]	; (80089e4 <TIM_Base_SetConfig+0x120>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d003      	beq.n	8008904 <TIM_Base_SetConfig+0x40>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a3a      	ldr	r2, [pc, #232]	; (80089e8 <TIM_Base_SetConfig+0x124>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d108      	bne.n	8008916 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800890a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4313      	orrs	r3, r2
 8008914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a2f      	ldr	r2, [pc, #188]	; (80089d8 <TIM_Base_SetConfig+0x114>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d01f      	beq.n	800895e <TIM_Base_SetConfig+0x9a>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008924:	d01b      	beq.n	800895e <TIM_Base_SetConfig+0x9a>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a2c      	ldr	r2, [pc, #176]	; (80089dc <TIM_Base_SetConfig+0x118>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d017      	beq.n	800895e <TIM_Base_SetConfig+0x9a>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a2b      	ldr	r2, [pc, #172]	; (80089e0 <TIM_Base_SetConfig+0x11c>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d013      	beq.n	800895e <TIM_Base_SetConfig+0x9a>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a2a      	ldr	r2, [pc, #168]	; (80089e4 <TIM_Base_SetConfig+0x120>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d00f      	beq.n	800895e <TIM_Base_SetConfig+0x9a>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a29      	ldr	r2, [pc, #164]	; (80089e8 <TIM_Base_SetConfig+0x124>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d00b      	beq.n	800895e <TIM_Base_SetConfig+0x9a>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a28      	ldr	r2, [pc, #160]	; (80089ec <TIM_Base_SetConfig+0x128>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d007      	beq.n	800895e <TIM_Base_SetConfig+0x9a>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a27      	ldr	r2, [pc, #156]	; (80089f0 <TIM_Base_SetConfig+0x12c>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d003      	beq.n	800895e <TIM_Base_SetConfig+0x9a>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a26      	ldr	r2, [pc, #152]	; (80089f4 <TIM_Base_SetConfig+0x130>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d108      	bne.n	8008970 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	4313      	orrs	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	689a      	ldr	r2, [r3, #8]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a10      	ldr	r2, [pc, #64]	; (80089d8 <TIM_Base_SetConfig+0x114>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d00f      	beq.n	80089bc <TIM_Base_SetConfig+0xf8>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a12      	ldr	r2, [pc, #72]	; (80089e8 <TIM_Base_SetConfig+0x124>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d00b      	beq.n	80089bc <TIM_Base_SetConfig+0xf8>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a11      	ldr	r2, [pc, #68]	; (80089ec <TIM_Base_SetConfig+0x128>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d007      	beq.n	80089bc <TIM_Base_SetConfig+0xf8>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a10      	ldr	r2, [pc, #64]	; (80089f0 <TIM_Base_SetConfig+0x12c>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d003      	beq.n	80089bc <TIM_Base_SetConfig+0xf8>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a0f      	ldr	r2, [pc, #60]	; (80089f4 <TIM_Base_SetConfig+0x130>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d103      	bne.n	80089c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	691a      	ldr	r2, [r3, #16]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	615a      	str	r2, [r3, #20]
}
 80089ca:	bf00      	nop
 80089cc:	3714      	adds	r7, #20
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	40012c00 	.word	0x40012c00
 80089dc:	40000400 	.word	0x40000400
 80089e0:	40000800 	.word	0x40000800
 80089e4:	40000c00 	.word	0x40000c00
 80089e8:	40013400 	.word	0x40013400
 80089ec:	40014000 	.word	0x40014000
 80089f0:	40014400 	.word	0x40014400
 80089f4:	40014800 	.word	0x40014800

080089f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a1b      	ldr	r3, [r3, #32]
 8008a0c:	f023 0201 	bic.w	r2, r3, #1
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f023 0303 	bic.w	r3, r3, #3
 8008a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f023 0302 	bic.w	r3, r3, #2
 8008a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a2c      	ldr	r2, [pc, #176]	; (8008b04 <TIM_OC1_SetConfig+0x10c>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d00f      	beq.n	8008a78 <TIM_OC1_SetConfig+0x80>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a2b      	ldr	r2, [pc, #172]	; (8008b08 <TIM_OC1_SetConfig+0x110>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d00b      	beq.n	8008a78 <TIM_OC1_SetConfig+0x80>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a2a      	ldr	r2, [pc, #168]	; (8008b0c <TIM_OC1_SetConfig+0x114>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d007      	beq.n	8008a78 <TIM_OC1_SetConfig+0x80>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a29      	ldr	r2, [pc, #164]	; (8008b10 <TIM_OC1_SetConfig+0x118>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d003      	beq.n	8008a78 <TIM_OC1_SetConfig+0x80>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a28      	ldr	r2, [pc, #160]	; (8008b14 <TIM_OC1_SetConfig+0x11c>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d10c      	bne.n	8008a92 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	f023 0308 	bic.w	r3, r3, #8
 8008a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f023 0304 	bic.w	r3, r3, #4
 8008a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a1b      	ldr	r2, [pc, #108]	; (8008b04 <TIM_OC1_SetConfig+0x10c>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d00f      	beq.n	8008aba <TIM_OC1_SetConfig+0xc2>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a1a      	ldr	r2, [pc, #104]	; (8008b08 <TIM_OC1_SetConfig+0x110>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d00b      	beq.n	8008aba <TIM_OC1_SetConfig+0xc2>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a19      	ldr	r2, [pc, #100]	; (8008b0c <TIM_OC1_SetConfig+0x114>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d007      	beq.n	8008aba <TIM_OC1_SetConfig+0xc2>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a18      	ldr	r2, [pc, #96]	; (8008b10 <TIM_OC1_SetConfig+0x118>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d003      	beq.n	8008aba <TIM_OC1_SetConfig+0xc2>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a17      	ldr	r2, [pc, #92]	; (8008b14 <TIM_OC1_SetConfig+0x11c>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d111      	bne.n	8008ade <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	685a      	ldr	r2, [r3, #4]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	697a      	ldr	r2, [r7, #20]
 8008af6:	621a      	str	r2, [r3, #32]
}
 8008af8:	bf00      	nop
 8008afa:	371c      	adds	r7, #28
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	40012c00 	.word	0x40012c00
 8008b08:	40013400 	.word	0x40013400
 8008b0c:	40014000 	.word	0x40014000
 8008b10:	40014400 	.word	0x40014400
 8008b14:	40014800 	.word	0x40014800

08008b18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b087      	sub	sp, #28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a1b      	ldr	r3, [r3, #32]
 8008b2c:	f023 0210 	bic.w	r2, r3, #16
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	021b      	lsls	r3, r3, #8
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f023 0320 	bic.w	r3, r3, #32
 8008b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	011b      	lsls	r3, r3, #4
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a28      	ldr	r2, [pc, #160]	; (8008c18 <TIM_OC2_SetConfig+0x100>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d003      	beq.n	8008b84 <TIM_OC2_SetConfig+0x6c>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a27      	ldr	r2, [pc, #156]	; (8008c1c <TIM_OC2_SetConfig+0x104>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d10d      	bne.n	8008ba0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	011b      	lsls	r3, r3, #4
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a1d      	ldr	r2, [pc, #116]	; (8008c18 <TIM_OC2_SetConfig+0x100>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d00f      	beq.n	8008bc8 <TIM_OC2_SetConfig+0xb0>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a1c      	ldr	r2, [pc, #112]	; (8008c1c <TIM_OC2_SetConfig+0x104>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d00b      	beq.n	8008bc8 <TIM_OC2_SetConfig+0xb0>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a1b      	ldr	r2, [pc, #108]	; (8008c20 <TIM_OC2_SetConfig+0x108>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d007      	beq.n	8008bc8 <TIM_OC2_SetConfig+0xb0>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a1a      	ldr	r2, [pc, #104]	; (8008c24 <TIM_OC2_SetConfig+0x10c>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d003      	beq.n	8008bc8 <TIM_OC2_SetConfig+0xb0>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a19      	ldr	r2, [pc, #100]	; (8008c28 <TIM_OC2_SetConfig+0x110>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d113      	bne.n	8008bf0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	695b      	ldr	r3, [r3, #20]
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	685a      	ldr	r2, [r3, #4]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	621a      	str	r2, [r3, #32]
}
 8008c0a:	bf00      	nop
 8008c0c:	371c      	adds	r7, #28
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	40012c00 	.word	0x40012c00
 8008c1c:	40013400 	.word	0x40013400
 8008c20:	40014000 	.word	0x40014000
 8008c24:	40014400 	.word	0x40014400
 8008c28:	40014800 	.word	0x40014800

08008c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b087      	sub	sp, #28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a1b      	ldr	r3, [r3, #32]
 8008c40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f023 0303 	bic.w	r3, r3, #3
 8008c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	021b      	lsls	r3, r3, #8
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a27      	ldr	r2, [pc, #156]	; (8008d28 <TIM_OC3_SetConfig+0xfc>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d003      	beq.n	8008c96 <TIM_OC3_SetConfig+0x6a>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a26      	ldr	r2, [pc, #152]	; (8008d2c <TIM_OC3_SetConfig+0x100>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d10d      	bne.n	8008cb2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	021b      	lsls	r3, r3, #8
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a1c      	ldr	r2, [pc, #112]	; (8008d28 <TIM_OC3_SetConfig+0xfc>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d00f      	beq.n	8008cda <TIM_OC3_SetConfig+0xae>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a1b      	ldr	r2, [pc, #108]	; (8008d2c <TIM_OC3_SetConfig+0x100>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d00b      	beq.n	8008cda <TIM_OC3_SetConfig+0xae>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a1a      	ldr	r2, [pc, #104]	; (8008d30 <TIM_OC3_SetConfig+0x104>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d007      	beq.n	8008cda <TIM_OC3_SetConfig+0xae>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a19      	ldr	r2, [pc, #100]	; (8008d34 <TIM_OC3_SetConfig+0x108>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d003      	beq.n	8008cda <TIM_OC3_SetConfig+0xae>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a18      	ldr	r2, [pc, #96]	; (8008d38 <TIM_OC3_SetConfig+0x10c>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d113      	bne.n	8008d02 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	011b      	lsls	r3, r3, #4
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	011b      	lsls	r3, r3, #4
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	621a      	str	r2, [r3, #32]
}
 8008d1c:	bf00      	nop
 8008d1e:	371c      	adds	r7, #28
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	40012c00 	.word	0x40012c00
 8008d2c:	40013400 	.word	0x40013400
 8008d30:	40014000 	.word	0x40014000
 8008d34:	40014400 	.word	0x40014400
 8008d38:	40014800 	.word	0x40014800

08008d3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a1b      	ldr	r3, [r3, #32]
 8008d50:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	69db      	ldr	r3, [r3, #28]
 8008d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	021b      	lsls	r3, r3, #8
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	031b      	lsls	r3, r3, #12
 8008d92:	693a      	ldr	r2, [r7, #16]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a18      	ldr	r2, [pc, #96]	; (8008dfc <TIM_OC4_SetConfig+0xc0>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00f      	beq.n	8008dc0 <TIM_OC4_SetConfig+0x84>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a17      	ldr	r2, [pc, #92]	; (8008e00 <TIM_OC4_SetConfig+0xc4>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d00b      	beq.n	8008dc0 <TIM_OC4_SetConfig+0x84>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a16      	ldr	r2, [pc, #88]	; (8008e04 <TIM_OC4_SetConfig+0xc8>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d007      	beq.n	8008dc0 <TIM_OC4_SetConfig+0x84>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a15      	ldr	r2, [pc, #84]	; (8008e08 <TIM_OC4_SetConfig+0xcc>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d003      	beq.n	8008dc0 <TIM_OC4_SetConfig+0x84>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a14      	ldr	r2, [pc, #80]	; (8008e0c <TIM_OC4_SetConfig+0xd0>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d109      	bne.n	8008dd4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	019b      	lsls	r3, r3, #6
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	621a      	str	r2, [r3, #32]
}
 8008dee:	bf00      	nop
 8008df0:	371c      	adds	r7, #28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	40012c00 	.word	0x40012c00
 8008e00:	40013400 	.word	0x40013400
 8008e04:	40014000 	.word	0x40014000
 8008e08:	40014400 	.word	0x40014400
 8008e0c:	40014800 	.word	0x40014800

08008e10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b087      	sub	sp, #28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a1b      	ldr	r3, [r3, #32]
 8008e1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a1b      	ldr	r3, [r3, #32]
 8008e24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008e54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	041b      	lsls	r3, r3, #16
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a17      	ldr	r2, [pc, #92]	; (8008ec4 <TIM_OC5_SetConfig+0xb4>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d00f      	beq.n	8008e8a <TIM_OC5_SetConfig+0x7a>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a16      	ldr	r2, [pc, #88]	; (8008ec8 <TIM_OC5_SetConfig+0xb8>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d00b      	beq.n	8008e8a <TIM_OC5_SetConfig+0x7a>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a15      	ldr	r2, [pc, #84]	; (8008ecc <TIM_OC5_SetConfig+0xbc>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d007      	beq.n	8008e8a <TIM_OC5_SetConfig+0x7a>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a14      	ldr	r2, [pc, #80]	; (8008ed0 <TIM_OC5_SetConfig+0xc0>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d003      	beq.n	8008e8a <TIM_OC5_SetConfig+0x7a>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a13      	ldr	r2, [pc, #76]	; (8008ed4 <TIM_OC5_SetConfig+0xc4>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d109      	bne.n	8008e9e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	021b      	lsls	r3, r3, #8
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	621a      	str	r2, [r3, #32]
}
 8008eb8:	bf00      	nop
 8008eba:	371c      	adds	r7, #28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	40012c00 	.word	0x40012c00
 8008ec8:	40013400 	.word	0x40013400
 8008ecc:	40014000 	.word	0x40014000
 8008ed0:	40014400 	.word	0x40014400
 8008ed4:	40014800 	.word	0x40014800

08008ed8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b087      	sub	sp, #28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a1b      	ldr	r3, [r3, #32]
 8008ee6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a1b      	ldr	r3, [r3, #32]
 8008eec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	021b      	lsls	r3, r3, #8
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	051b      	lsls	r3, r3, #20
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a18      	ldr	r2, [pc, #96]	; (8008f90 <TIM_OC6_SetConfig+0xb8>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d00f      	beq.n	8008f54 <TIM_OC6_SetConfig+0x7c>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a17      	ldr	r2, [pc, #92]	; (8008f94 <TIM_OC6_SetConfig+0xbc>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d00b      	beq.n	8008f54 <TIM_OC6_SetConfig+0x7c>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a16      	ldr	r2, [pc, #88]	; (8008f98 <TIM_OC6_SetConfig+0xc0>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d007      	beq.n	8008f54 <TIM_OC6_SetConfig+0x7c>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a15      	ldr	r2, [pc, #84]	; (8008f9c <TIM_OC6_SetConfig+0xc4>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d003      	beq.n	8008f54 <TIM_OC6_SetConfig+0x7c>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a14      	ldr	r2, [pc, #80]	; (8008fa0 <TIM_OC6_SetConfig+0xc8>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d109      	bne.n	8008f68 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	695b      	ldr	r3, [r3, #20]
 8008f60:	029b      	lsls	r3, r3, #10
 8008f62:	697a      	ldr	r2, [r7, #20]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	685a      	ldr	r2, [r3, #4]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	621a      	str	r2, [r3, #32]
}
 8008f82:	bf00      	nop
 8008f84:	371c      	adds	r7, #28
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	40012c00 	.word	0x40012c00
 8008f94:	40013400 	.word	0x40013400
 8008f98:	40014000 	.word	0x40014000
 8008f9c:	40014400 	.word	0x40014400
 8008fa0:	40014800 	.word	0x40014800

08008fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d101      	bne.n	8008fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fb8:	2302      	movs	r3, #2
 8008fba:	e068      	b.n	800908e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a2e      	ldr	r2, [pc, #184]	; (800909c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d004      	beq.n	8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a2d      	ldr	r2, [pc, #180]	; (80090a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d108      	bne.n	8009002 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ff6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009008:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	4313      	orrs	r3, r2
 8009012:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a1e      	ldr	r2, [pc, #120]	; (800909c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d01d      	beq.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800902e:	d018      	beq.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a1b      	ldr	r2, [pc, #108]	; (80090a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d013      	beq.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a1a      	ldr	r2, [pc, #104]	; (80090a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d00e      	beq.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a18      	ldr	r2, [pc, #96]	; (80090ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d009      	beq.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a13      	ldr	r2, [pc, #76]	; (80090a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d004      	beq.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a14      	ldr	r2, [pc, #80]	; (80090b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d10c      	bne.n	800907c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009068:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	4313      	orrs	r3, r2
 8009072:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3714      	adds	r7, #20
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	40012c00 	.word	0x40012c00
 80090a0:	40013400 	.word	0x40013400
 80090a4:	40000400 	.word	0x40000400
 80090a8:	40000800 	.word	0x40000800
 80090ac:	40000c00 	.word	0x40000c00
 80090b0:	40014000 	.word	0x40014000

080090b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090be:	2300      	movs	r3, #0
 80090c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d101      	bne.n	80090d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090cc:	2302      	movs	r3, #2
 80090ce:	e065      	b.n	800919c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	4313      	orrs	r3, r2
 8009100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4313      	orrs	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	4313      	orrs	r3, r2
 800911c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	4313      	orrs	r3, r2
 800912a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009136:	4313      	orrs	r3, r2
 8009138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	699b      	ldr	r3, [r3, #24]
 8009144:	041b      	lsls	r3, r3, #16
 8009146:	4313      	orrs	r3, r2
 8009148:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a16      	ldr	r2, [pc, #88]	; (80091a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d004      	beq.n	800915e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a14      	ldr	r2, [pc, #80]	; (80091ac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d115      	bne.n	800918a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009168:	051b      	lsls	r3, r3, #20
 800916a:	4313      	orrs	r3, r2
 800916c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	4313      	orrs	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	4313      	orrs	r3, r2
 8009188:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3714      	adds	r7, #20
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr
 80091a8:	40012c00 	.word	0x40012c00
 80091ac:	40013400 	.word	0x40013400

080091b0 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 80091b0:	b480      	push	{r7}
 80091b2:	b08b      	sub	sp, #44	; 0x2c
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d101      	bne.n	80091d0 <HAL_TIMEx_ConfigBreakInput+0x20>
 80091cc:	2302      	movs	r3, #2
 80091ce:	e0af      	b.n	8009330 <HAL_TIMEx_ConfigBreakInput+0x180>
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	3b01      	subs	r3, #1
 80091de:	2b07      	cmp	r3, #7
 80091e0:	d83a      	bhi.n	8009258 <HAL_TIMEx_ConfigBreakInput+0xa8>
 80091e2:	a201      	add	r2, pc, #4	; (adr r2, 80091e8 <HAL_TIMEx_ConfigBreakInput+0x38>)
 80091e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e8:	08009209 	.word	0x08009209
 80091ec:	0800921d 	.word	0x0800921d
 80091f0:	08009259 	.word	0x08009259
 80091f4:	08009231 	.word	0x08009231
 80091f8:	08009259 	.word	0x08009259
 80091fc:	08009259 	.word	0x08009259
 8009200:	08009259 	.word	0x08009259
 8009204:	08009245 	.word	0x08009245
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 8009208:	2301      	movs	r3, #1
 800920a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800920c:	2300      	movs	r3, #0
 800920e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 8009210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009214:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 8009216:	2309      	movs	r3, #9
 8009218:	613b      	str	r3, [r7, #16]
      break;
 800921a:	e026      	b.n	800926a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800921c:	2302      	movs	r3, #2
 800921e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 8009220:	2301      	movs	r3, #1
 8009222:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 8009224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009228:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800922a:	230a      	movs	r3, #10
 800922c:	613b      	str	r3, [r7, #16]
      break;
 800922e:	e01c      	b.n	800926a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 8009230:	2304      	movs	r3, #4
 8009232:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 8009234:	2302      	movs	r3, #2
 8009236:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 8009238:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800923c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800923e:	230b      	movs	r3, #11
 8009240:	613b      	str	r3, [r7, #16]
      break;
 8009242:	e012      	b.n	800926a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 8009244:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009248:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 800924a:	2308      	movs	r3, #8
 800924c:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800924e:	2300      	movs	r3, #0
 8009250:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8009252:	2300      	movs	r3, #0
 8009254:	613b      	str	r3, [r7, #16]
      break;
 8009256:	e008      	b.n	800926a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 8009258:	2300      	movs	r3, #0
 800925a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800925c:	2300      	movs	r3, #0
 800925e:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 8009260:	2300      	movs	r3, #0
 8009262:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 8009264:	2300      	movs	r3, #0
 8009266:	613b      	str	r3, [r7, #16]
      break;
 8009268:	bf00      	nop
    }
  }

  switch (BreakInput)
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d003      	beq.n	8009278 <HAL_TIMEx_ConfigBreakInput+0xc8>
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	2b02      	cmp	r3, #2
 8009274:	d029      	beq.n	80092ca <HAL_TIMEx_ConfigBreakInput+0x11a>
 8009276:	e051      	b.n	800931c <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800927e:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	43db      	mvns	r3, r3
 8009284:	6a3a      	ldr	r2, [r7, #32]
 8009286:	4013      	ands	r3, r2
 8009288:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	685a      	ldr	r2, [r3, #4]
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	409a      	lsls	r2, r3
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	4013      	ands	r3, r2
 8009296:	6a3a      	ldr	r2, [r7, #32]
 8009298:	4313      	orrs	r3, r2
 800929a:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b08      	cmp	r3, #8
 80092a2:	d00d      	beq.n	80092c0 <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	43db      	mvns	r3, r3
 80092a8:	6a3a      	ldr	r2, [r7, #32]
 80092aa:	4013      	ands	r3, r2
 80092ac:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	689a      	ldr	r2, [r3, #8]
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	409a      	lsls	r2, r3
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	4013      	ands	r3, r2
 80092ba:	6a3a      	ldr	r2, [r7, #32]
 80092bc:	4313      	orrs	r3, r2
 80092be:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6a3a      	ldr	r2, [r7, #32]
 80092c6:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 80092c8:	e02c      	b.n	8009324 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092d0:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	43db      	mvns	r3, r3
 80092d6:	6a3a      	ldr	r2, [r7, #32]
 80092d8:	4013      	ands	r3, r2
 80092da:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	409a      	lsls	r2, r3
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	4013      	ands	r3, r2
 80092e8:	6a3a      	ldr	r2, [r7, #32]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b08      	cmp	r3, #8
 80092f4:	d00d      	beq.n	8009312 <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	43db      	mvns	r3, r3
 80092fa:	6a3a      	ldr	r2, [r7, #32]
 80092fc:	4013      	ands	r3, r2
 80092fe:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	689a      	ldr	r2, [r3, #8]
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	409a      	lsls	r2, r3
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	4013      	ands	r3, r2
 800930c:	6a3a      	ldr	r2, [r7, #32]
 800930e:	4313      	orrs	r3, r2
 8009310:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6a3a      	ldr	r2, [r7, #32]
 8009318:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800931a:	e003      	b.n	8009324 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8009322:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2200      	movs	r2, #0
 8009328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800932c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009330:	4618      	mov	r0, r3
 8009332:	372c      	adds	r7, #44	; 0x2c
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <memset>:
 800933c:	4402      	add	r2, r0
 800933e:	4603      	mov	r3, r0
 8009340:	4293      	cmp	r3, r2
 8009342:	d100      	bne.n	8009346 <memset+0xa>
 8009344:	4770      	bx	lr
 8009346:	f803 1b01 	strb.w	r1, [r3], #1
 800934a:	e7f9      	b.n	8009340 <memset+0x4>

0800934c <__libc_init_array>:
 800934c:	b570      	push	{r4, r5, r6, lr}
 800934e:	4d0d      	ldr	r5, [pc, #52]	; (8009384 <__libc_init_array+0x38>)
 8009350:	4c0d      	ldr	r4, [pc, #52]	; (8009388 <__libc_init_array+0x3c>)
 8009352:	1b64      	subs	r4, r4, r5
 8009354:	10a4      	asrs	r4, r4, #2
 8009356:	2600      	movs	r6, #0
 8009358:	42a6      	cmp	r6, r4
 800935a:	d109      	bne.n	8009370 <__libc_init_array+0x24>
 800935c:	4d0b      	ldr	r5, [pc, #44]	; (800938c <__libc_init_array+0x40>)
 800935e:	4c0c      	ldr	r4, [pc, #48]	; (8009390 <__libc_init_array+0x44>)
 8009360:	f000 f818 	bl	8009394 <_init>
 8009364:	1b64      	subs	r4, r4, r5
 8009366:	10a4      	asrs	r4, r4, #2
 8009368:	2600      	movs	r6, #0
 800936a:	42a6      	cmp	r6, r4
 800936c:	d105      	bne.n	800937a <__libc_init_array+0x2e>
 800936e:	bd70      	pop	{r4, r5, r6, pc}
 8009370:	f855 3b04 	ldr.w	r3, [r5], #4
 8009374:	4798      	blx	r3
 8009376:	3601      	adds	r6, #1
 8009378:	e7ee      	b.n	8009358 <__libc_init_array+0xc>
 800937a:	f855 3b04 	ldr.w	r3, [r5], #4
 800937e:	4798      	blx	r3
 8009380:	3601      	adds	r6, #1
 8009382:	e7f2      	b.n	800936a <__libc_init_array+0x1e>
 8009384:	080093fc 	.word	0x080093fc
 8009388:	080093fc 	.word	0x080093fc
 800938c:	080093fc 	.word	0x080093fc
 8009390:	08009400 	.word	0x08009400

08009394 <_init>:
 8009394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009396:	bf00      	nop
 8009398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939a:	bc08      	pop	{r3}
 800939c:	469e      	mov	lr, r3
 800939e:	4770      	bx	lr

080093a0 <_fini>:
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a2:	bf00      	nop
 80093a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a6:	bc08      	pop	{r3}
 80093a8:	469e      	mov	lr, r3
 80093aa:	4770      	bx	lr

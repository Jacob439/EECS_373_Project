
DISPLAY_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011fb8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000058a4  08012178  08012178  00022178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017a1c  08017a1c  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08017a1c  08017a1c  00027a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017a24  08017a24  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017a24  08017a24  00027a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017a28  08017a28  00027a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08017a2c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a00  200001f4  08017c20  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bf4  08017c20  00030bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 13 .debug_info   000259e7  00000000  00000000  00030267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045dc  00000000  00000000  00055c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021a8  00000000  00000000  0005a230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a50  00000000  00000000  0005c3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fffa  00000000  00000000  0005de28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028ad8  00000000  00000000  0008de22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001295cc  00000000  00000000  000b68fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a2cc  00000000  00000000  001dfec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  001ea194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08012160 	.word	0x08012160

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	08012160 	.word	0x08012160

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <initTempHumSensor>:
#include "TempHumSensor.h"

// i2c handler
static I2C_HandleTypeDef* hi2c;

void initTempHumSensor(I2C_HandleTypeDef* hi2c_in) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	hi2c = hi2c_in;
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <initTempHumSensor+0x1c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000210 	.word	0x20000210

08000ef4 <req_measurements>:

// send command to sensor
void req_measurements() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af02      	add	r7, sp, #8
	uint8_t buf[2] = {CMD_MSB, CMD_LSB};
 8000efa:	f640 532c 	movw	r3, #3372	; 0xd2c
 8000efe:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(hi2c, SAD_W, buf, 2, 1000);
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <req_measurements+0x28>)
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	1d3a      	adds	r2, r7, #4
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	2188      	movs	r1, #136	; 0x88
 8000f10:	f006 fff0 	bl	8007ef4 <HAL_I2C_Master_Transmit>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000210 	.word	0x20000210

08000f20 <read_raw_measurements>:

// send read request to sensor
// sensor will pull clock down until measurements are done
TempHumRaw_t read_raw_measurements() {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af02      	add	r7, sp, #8
	TempHumRaw_t data;
	uint8_t buf[6];
	HAL_I2C_Master_Receive(hi2c, SAD_R, buf, 6, 1000);
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <read_raw_measurements+0x58>)
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	463a      	mov	r2, r7
 8000f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2306      	movs	r3, #6
 8000f34:	2189      	movs	r1, #137	; 0x89
 8000f36:	f007 f8f5 	bl	8008124 <HAL_I2C_Master_Receive>
	data.temp = buf[0] << 8 | buf[1];
 8000f3a:	783b      	ldrb	r3, [r7, #0]
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	787b      	ldrb	r3, [r7, #1]
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	813b      	strh	r3, [r7, #8]
	data.hum = buf[3] << 8 | buf[4];
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	793b      	ldrb	r3, [r7, #4]
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	817b      	strh	r3, [r7, #10]
	return data;
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	2300      	movs	r3, #0
 8000f64:	89ba      	ldrh	r2, [r7, #12]
 8000f66:	f362 030f 	bfi	r3, r2, #0, #16
 8000f6a:	89fa      	ldrh	r2, [r7, #14]
 8000f6c:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000210 	.word	0x20000210

08000f7c <get_temp_hum>:

// get converted values
TempHum_t get_temp_hum() {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
	TempHumRaw_t raw_data;
	TempHum_t conv_data;
	req_measurements();
 8000f82:	f7ff ffb7 	bl	8000ef4 <req_measurements>
	raw_data = read_raw_measurements();
 8000f86:	f7ff ffcb 	bl	8000f20 <read_raw_measurements>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	617b      	str	r3, [r7, #20]
	int32_t casted_temp = (uint32_t)(raw_data.temp);
 8000f8e:	8abb      	ldrh	r3, [r7, #20]
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t casted_hum = (uint32_t)(raw_data.hum);
 8000f92:	8afb      	ldrh	r3, [r7, #22]
 8000f94:	623b      	str	r3, [r7, #32]
	conv_data.temp = -45.0f + 315.0f * ((float)casted_temp/65535.0f);
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa0:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001004 <get_temp_hum+0x88>
 8000fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001008 <get_temp_hum+0x8c>
 8000fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800100c <get_temp_hum+0x90>
 8000fb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fb8:	edc7 7a03 	vstr	s15, [r7, #12]
	conv_data.hum = 100.0f * ((float)casted_hum/65535.0f);
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001004 <get_temp_hum+0x88>
 8000fca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fce:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001010 <get_temp_hum+0x94>
 8000fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd6:	edc7 7a04 	vstr	s15, [r7, #16]
	return conv_data;
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	f107 020c 	add.w	r2, r7, #12
 8000fe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fe6:	e883 0003 	stmia.w	r3, {r0, r1}
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	ee07 2a10 	vmov	s14, r2
 8000ff2:	ee07 3a90 	vmov	s15, r3
}
 8000ff6:	eeb0 0a47 	vmov.f32	s0, s14
 8000ffa:	eef0 0a67 	vmov.f32	s1, s15
 8000ffe:	3728      	adds	r7, #40	; 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	477fff00 	.word	0x477fff00
 8001008:	439d8000 	.word	0x439d8000
 800100c:	42340000 	.word	0x42340000
 8001010:	42c80000 	.word	0x42c80000

08001014 <JOYSTICK_INIT>:

#include "joystick.h"

	//Write a byte value to a spot in the Joystick
	I2C_HandleTypeDef Hi2c1;
	void JOYSTICK_INIT(I2C_HandleTypeDef hi2c1){
 8001014:	b084      	sub	sp, #16
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
 800101a:	f107 0c08 	add.w	ip, r7, #8
 800101e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		Hi2c1 = hi2c1;
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <JOYSTICK_INIT+0x2c>)
 8001024:	4618      	mov	r0, r3
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	2254      	movs	r2, #84	; 0x54
 800102c:	4619      	mov	r1, r3
 800102e:	f00f f8de 	bl	80101ee <memcpy>
	}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800103a:	b004      	add	sp, #16
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000218 	.word	0x20000218

08001044 <readRegister>:
      return(1);
  }

  //Reads from a given location from the Joystick
  uint8_t readRegister(uint8_t reg)
  {
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af02      	add	r7, sp, #8
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	  uint8_t buf[10] = {reg};
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	811a      	strh	r2, [r3, #8]
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	753b      	strb	r3, [r7, #20]
	  uint8_t buf0[10] = {};
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	809a      	strh	r2, [r3, #4]
	  ret = HAL_I2C_Master_Transmit(&Hi2c1, JOYSTICK_ADDRESS, &buf[0], 1, 1000);
 800106c:	f107 0214 	add.w	r2, r7, #20
 8001070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	2140      	movs	r1, #64	; 0x40
 800107a:	4810      	ldr	r0, [pc, #64]	; (80010bc <readRegister+0x78>)
 800107c:	f006 ff3a 	bl	8007ef4 <HAL_I2C_Master_Transmit>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <readRegister+0x7c>)
 8001086:	701a      	strb	r2, [r3, #0]
	  ret = HAL_I2C_Master_Receive(&Hi2c1, JOYSTICK_ADDRESS, &buf0[0], 1, 1000);
 8001088:	f107 0208 	add.w	r2, r7, #8
 800108c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	2140      	movs	r1, #64	; 0x40
 8001096:	4809      	ldr	r0, [pc, #36]	; (80010bc <readRegister+0x78>)
 8001098:	f007 f844 	bl	8008124 <HAL_I2C_Master_Receive>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <readRegister+0x7c>)
 80010a2:	701a      	strb	r2, [r3, #0]

    if (ret != 0)
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <readRegister+0x7c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <readRegister+0x6c>
    {
      //Serial.println("No ack!");
      return (0); //Device failed to ack
 80010ac:	2300      	movs	r3, #0
 80010ae:	e000      	b.n	80010b2 <readRegister+0x6e>
    }
    return buf0[0];
 80010b0:	7a3b      	ldrb	r3, [r7, #8]
  }
 80010b2:	4618      	mov	r0, r3
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000218 	.word	0x20000218
 80010c0:	20000214 	.word	0x20000214

080010c4 <getHorizontal>:
  //Returns the 10-bit ADC value of the joystick horizontal position
  uint16_t getHorizontal()
  {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
    uint16_t X_MSB = readRegister(JOYSTICK_X_MSB);
 80010ca:	2003      	movs	r0, #3
 80010cc:	f7ff ffba 	bl	8001044 <readRegister>
 80010d0:	4603      	mov	r3, r0
 80010d2:	80fb      	strh	r3, [r7, #6]
    uint16_t X_LSB = readRegister(JOYSTICK_X_LSB);
 80010d4:	2004      	movs	r0, #4
 80010d6:	f7ff ffb5 	bl	8001044 <readRegister>
 80010da:	4603      	mov	r3, r0
 80010dc:	80bb      	strh	r3, [r7, #4]
    return ((X_MSB<<8) | X_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	021a      	lsls	r2, r3, #8
 80010e2:	88bb      	ldrh	r3, [r7, #4]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	119b      	asrs	r3, r3, #6
 80010e8:	b29b      	uxth	r3, r3
  }
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <getVertical>:
  //Returns the 10-bit ADC value of the joystick vertical position
  uint16_t getVertical()
  {
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
    uint16_t Y_MSB = readRegister(JOYSTICK_Y_MSB);
 80010f8:	2005      	movs	r0, #5
 80010fa:	f7ff ffa3 	bl	8001044 <readRegister>
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
    uint16_t Y_LSB = readRegister(JOYSTICK_Y_LSB);
 8001102:	2006      	movs	r0, #6
 8001104:	f7ff ff9e 	bl	8001044 <readRegister>
 8001108:	4603      	mov	r3, r0
 800110a:	80bb      	strh	r3, [r7, #4]
    return ((Y_MSB<<8) | Y_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	021a      	lsls	r2, r3, #8
 8001110:	88bb      	ldrh	r3, [r7, #4]
 8001112:	4313      	orrs	r3, r2
 8001114:	119b      	asrs	r3, r3, #6
 8001116:	b29b      	uxth	r3, r3
  }
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <threshold>:
  // 2: Right
  // 3: Up
  // 4: Down
  // 0: Center
  // Range: 0 to 2044
  uint8_t threshold(){
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
	  uint16_t horizontal = getHorizontal();
 8001126:	f7ff ffcd 	bl	80010c4 <getHorizontal>
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
	  uint16_t vertical = getVertical();
 800112e:	f7ff ffe0 	bl	80010f2 <getVertical>
 8001132:	4603      	mov	r3, r0
 8001134:	80bb      	strh	r3, [r7, #4]

	  // Perspective: Pin connections closest to you
	  // (0,0) is upper left, (1023, 1023) is lower right
	  // (0, 514) is left
	  // (512, 1023) is down
	  uint8_t lr = vertical > 250 && vertical < 750 ? 1 : 0;
 8001136:	88bb      	ldrh	r3, [r7, #4]
 8001138:	2bfa      	cmp	r3, #250	; 0xfa
 800113a:	d906      	bls.n	800114a <threshold+0x2a>
 800113c:	88bb      	ldrh	r3, [r7, #4]
 800113e:	f240 22ed 	movw	r2, #749	; 0x2ed
 8001142:	4293      	cmp	r3, r2
 8001144:	d801      	bhi.n	800114a <threshold+0x2a>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <threshold+0x2c>
 800114a:	2300      	movs	r3, #0
 800114c:	70fb      	strb	r3, [r7, #3]
	  if (horizontal < 250 && lr) {
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	2bf9      	cmp	r3, #249	; 0xf9
 8001152:	d804      	bhi.n	800115e <threshold+0x3e>
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <threshold+0x3e>
		  return 1;
 800115a:	2301      	movs	r3, #1
 800115c:	e00a      	b.n	8001174 <threshold+0x54>
	  } else if (horizontal > 750 && lr){
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001164:	4293      	cmp	r3, r2
 8001166:	d904      	bls.n	8001172 <threshold+0x52>
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <threshold+0x52>
		  return 2;
 800116e:	2302      	movs	r3, #2
 8001170:	e000      	b.n	8001174 <threshold+0x54>
	  }
	  return 0;
 8001172:	2300      	movs	r3, #0
  }
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <RowChecker>:
#include "keypad.h"
#include "stm32l4xx_hal.h"
#include "lcd.h"

// Checks every row while a single column is pulled down
int RowChecker() {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
    int val = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET ? 1 : val;
 8001186:	2120      	movs	r1, #32
 8001188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118c:	f006 fdc4 	bl	8007d18 <HAL_GPIO_ReadPin>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <RowChecker+0x1e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e000      	b.n	800119c <RowChecker+0x20>
 800119a:	2301      	movs	r3, #1
 800119c:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET ? 2 : val;
 800119e:	2140      	movs	r1, #64	; 0x40
 80011a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a4:	f006 fdb8 	bl	8007d18 <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <RowChecker+0x36>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	e000      	b.n	80011b4 <RowChecker+0x38>
 80011b2:	2302      	movs	r3, #2
 80011b4:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET ? 3 : val;
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011bc:	f006 fdac 	bl	8007d18 <HAL_GPIO_ReadPin>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <RowChecker+0x4e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	e000      	b.n	80011cc <RowChecker+0x50>
 80011ca:	2303      	movs	r3, #3
 80011cc:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET ? 4 : val;
 80011ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d2:	4807      	ldr	r0, [pc, #28]	; (80011f0 <RowChecker+0x74>)
 80011d4:	f006 fda0 	bl	8007d18 <HAL_GPIO_ReadPin>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <RowChecker+0x66>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	e000      	b.n	80011e4 <RowChecker+0x68>
 80011e2:	2304      	movs	r3, #4
 80011e4:	607b      	str	r3, [r7, #4]
    //	  	return row_return;
    return val;
 80011e6:	687b      	ldr	r3, [r7, #4]
  }
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	48000c00 	.word	0x48000c00

080011f4 <keypad_init>:
//		}
//		return 0;
//	}


void keypad_init(){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	// Setting all the pins to high impedence
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011fe:	480b      	ldr	r0, [pc, #44]	; (800122c <keypad_init+0x38>)
 8001200:	f006 fda2 	bl	8007d48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120a:	4809      	ldr	r0, [pc, #36]	; (8001230 <keypad_init+0x3c>)
 800120c:	f006 fd9c 	bl	8007d48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <keypad_init+0x38>)
 8001218:	f006 fd96 	bl	8007d48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001222:	4803      	ldr	r0, [pc, #12]	; (8001230 <keypad_init+0x3c>)
 8001224:	f006 fd90 	bl	8007d48 <HAL_GPIO_WritePin>
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	48001000 	.word	0x48001000
 8001230:	48001400 	.word	0x48001400

08001234 <KeyPadReturn>:


	//Processes the row (val) and col values to get the number associated with that row and col
	//weightSel is used to determine if Weight (1) or Age (0) is being input
  uint8_t KeyPadReturn(int row, int col, int weightSel) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af02      	add	r7, sp, #8
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
	  // Count of currently input characters
	static uint8_t weightCounter = 0;
    if (row == 0) {
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <KeyPadReturn+0x16>
      return 0;
 8001246:	2300      	movs	r3, #0
 8001248:	e09c      	b.n	8001384 <KeyPadReturn+0x150>
    }
    HAL_Delay(10);
 800124a:	200a      	movs	r0, #10
 800124c:	f005 f968 	bl	8006520 <HAL_Delay>
    // After delay, only exits while loop once key is released
    while (row == RowChecker()) {
 8001250:	bf00      	nop
 8001252:	f7ff ff93 	bl	800117c <RowChecker>
 8001256:	4602      	mov	r2, r0
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4293      	cmp	r3, r2
 800125c:	d0f9      	beq.n	8001252 <KeyPadReturn+0x1e>
    }
    HAL_Delay(10);
 800125e:	200a      	movs	r0, #10
 8001260:	f005 f95e 	bl	8006520 <HAL_Delay>
    uint8_t ASCII_Value = ASCII_Keypad_Lookup[row - 1][col - 1];
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	1e5a      	subs	r2, r3, #1
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	3b01      	subs	r3, #1
 800126c:	4947      	ldr	r1, [pc, #284]	; (800138c <KeyPadReturn+0x158>)
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	440a      	add	r2, r1
 8001272:	4413      	add	r3, r2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	75fb      	strb	r3, [r7, #23]
    // Check if '#' is pressed
    if (ASCII_Value == 0x23) {
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	2b23      	cmp	r3, #35	; 0x23
 800127c:	d11a      	bne.n	80012b4 <KeyPadReturn+0x80>
    	// Go to main display
      if (weightCounter == 0) {
 800127e:	4b44      	ldr	r3, [pc, #272]	; (8001390 <KeyPadReturn+0x15c>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <KeyPadReturn+0x56>
        // If there is no value for weight, just return
        return 0;
 8001286:	2300      	movs	r3, #0
 8001288:	e07c      	b.n	8001384 <KeyPadReturn+0x150>
      for (uint8_t i = 0; i < weightCounter; i++) {
        // print the values here
        //printf("%x ", ASCII_Weight[i]);
      }
      printf("\n");*/
      if(weightSel){
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <KeyPadReturn+0x6a>
          	ASCII_Weight[weightCounter] = '\0';
 8001290:	4b3f      	ldr	r3, [pc, #252]	; (8001390 <KeyPadReturn+0x15c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b3f      	ldr	r3, [pc, #252]	; (8001394 <KeyPadReturn+0x160>)
 8001298:	2100      	movs	r1, #0
 800129a:	5499      	strb	r1, [r3, r2]
 800129c:	e005      	b.n	80012aa <KeyPadReturn+0x76>
      }
      else{
    	  ASCII_Age[weightCounter] = '\0';
 800129e:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <KeyPadReturn+0x15c>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b3c      	ldr	r3, [pc, #240]	; (8001398 <KeyPadReturn+0x164>)
 80012a6:	2100      	movs	r1, #0
 80012a8:	5499      	strb	r1, [r3, r2]
      }
      weightCounter = 0;
 80012aa:	4b39      	ldr	r3, [pc, #228]	; (8001390 <KeyPadReturn+0x15c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
      // Wipe screen
      //LCD_Fill(50, 56, 50 + 26*3, 50+28, C_BLACK);
      return 1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e067      	b.n	8001384 <KeyPadReturn+0x150>
    } else if (ASCII_Value == 0x2A || weightCounter == max_digits - 2) {
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	2b2a      	cmp	r3, #42	; 0x2a
 80012b8:	d006      	beq.n	80012c8 <KeyPadReturn+0x94>
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <KeyPadReturn+0x15c>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	2305      	movs	r3, #5
 80012c2:	3b02      	subs	r3, #2
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d118      	bne.n	80012fa <KeyPadReturn+0xc6>
    	// Wipe screen
    	if(weightSel){
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d008      	beq.n	80012e0 <KeyPadReturn+0xac>
    		LCD_Fill(105, 5, 170, 5+28, C_BLACK);
 80012ce:	2300      	movs	r3, #0
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2321      	movs	r3, #33	; 0x21
 80012d4:	22aa      	movs	r2, #170	; 0xaa
 80012d6:	2105      	movs	r1, #5
 80012d8:	2069      	movs	r0, #105	; 0x69
 80012da:	f000 fb2b 	bl	8001934 <LCD_Fill>
 80012de:	e007      	b.n	80012f0 <KeyPadReturn+0xbc>
    	}
    	else{
    		LCD_Fill(80, 5, 170, 5+28, C_BLACK);
 80012e0:	2300      	movs	r3, #0
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2321      	movs	r3, #33	; 0x21
 80012e6:	22aa      	movs	r2, #170	; 0xaa
 80012e8:	2105      	movs	r1, #5
 80012ea:	2050      	movs	r0, #80	; 0x50
 80012ec:	f000 fb22 	bl	8001934 <LCD_Fill>
    	}
      // Reset if '*' is the input
      // Other if statement:
      // -2: there is a ++ at the end, and need a spot for #
      // Reset if max digits have been reached
      weightCounter = 0;
 80012f0:	4b27      	ldr	r3, [pc, #156]	; (8001390 <KeyPadReturn+0x15c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
      return 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e044      	b.n	8001384 <KeyPadReturn+0x150>
    }
    //printf("ASCII value: %x\n", ASCII_Value);


    if(weightSel){
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d01d      	beq.n	800133c <KeyPadReturn+0x108>
    	ASCII_Weight[weightCounter] = ASCII_Value;
 8001300:	4b23      	ldr	r3, [pc, #140]	; (8001390 <KeyPadReturn+0x15c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	4a23      	ldr	r2, [pc, #140]	; (8001394 <KeyPadReturn+0x160>)
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	5453      	strb	r3, [r2, r1]
    	LCD_PutChar(105 + weightCounter*20, 5, ASCII_Value, DEFAULT_FONT, C_GREEN, C_BLACK);
 800130c:	4b20      	ldr	r3, [pc, #128]	; (8001390 <KeyPadReturn+0x15c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b29b      	uxth	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	0092      	lsls	r2, r2, #2
 8001316:	4413      	add	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	b29b      	uxth	r3, r3
 800131c:	3369      	adds	r3, #105	; 0x69
 800131e:	b298      	uxth	r0, r3
 8001320:	7dfa      	ldrb	r2, [r7, #23]
 8001322:	2300      	movs	r3, #0
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <KeyPadReturn+0x168>)
 800132e:	2105      	movs	r1, #5
 8001330:	f000 fbc6 	bl	8001ac0 <LCD_PutChar>
    	UG_FontSetTransparency(1);
 8001334:	2001      	movs	r0, #1
 8001336:	f003 fd9b 	bl	8004e70 <UG_FontSetTransparency>
 800133a:	e01c      	b.n	8001376 <KeyPadReturn+0x142>
    }
    else{
    	ASCII_Age[weightCounter] = ASCII_Value;
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <KeyPadReturn+0x15c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	4a15      	ldr	r2, [pc, #84]	; (8001398 <KeyPadReturn+0x164>)
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	5453      	strb	r3, [r2, r1]
    	LCD_PutChar(80 + weightCounter*20, 5, ASCII_Value, DEFAULT_FONT, C_GREEN, C_BLACK);
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <KeyPadReturn+0x15c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b29b      	uxth	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	0092      	lsls	r2, r2, #2
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	b29b      	uxth	r3, r3
 8001358:	3350      	adds	r3, #80	; 0x50
 800135a:	b298      	uxth	r0, r3
 800135c:	7dfa      	ldrb	r2, [r7, #23]
 800135e:	2300      	movs	r3, #0
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <KeyPadReturn+0x168>)
 800136a:	2105      	movs	r1, #5
 800136c:	f000 fba8 	bl	8001ac0 <LCD_PutChar>
    	UG_FontSetTransparency(1);
 8001370:	2001      	movs	r0, #1
 8001372:	f003 fd7d 	bl	8004e70 <UG_FontSetTransparency>
    }

    weightCounter++;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <KeyPadReturn+0x15c>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <KeyPadReturn+0x15c>)
 8001380:	701a      	strb	r2, [r3, #0]
    return 0;
 8001382:	2300      	movs	r3, #0
  }
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000000 	.word	0x20000000
 8001390:	20000279 	.word	0x20000279
 8001394:	2000026c 	.word	0x2000026c
 8001398:	20000274 	.word	0x20000274
 800139c:	080121e4 	.word	0x080121e4

080013a0 <running>:



  void running(){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af02      	add	r7, sp, #8
	  uint8_t finished = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	71fb      	strb	r3, [r7, #7]
	  int val = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	603b      	str	r3, [r7, #0]
	  //Gathers Weight data
	  LCD_PutStr(5, 5, "Weight: ", DEFAULT_FONT, C_GREEN, C_BLACK);
 80013ae:	2300      	movs	r3, #0
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	4b79      	ldr	r3, [pc, #484]	; (80015a0 <running+0x200>)
 80013ba:	4a7a      	ldr	r2, [pc, #488]	; (80015a4 <running+0x204>)
 80013bc:	2105      	movs	r1, #5
 80013be:	2005      	movs	r0, #5
 80013c0:	f000 fb9b 	bl	8001afa <LCD_PutStr>
  while (!finished) {
 80013c4:	e060      	b.n	8001488 <running+0xe8>
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013cc:	4876      	ldr	r0, [pc, #472]	; (80015a8 <running+0x208>)
 80013ce:	f006 fcbb 	bl	8007d48 <HAL_GPIO_WritePin>
      val = RowChecker();
 80013d2:	f7ff fed3 	bl	800117c <RowChecker>
 80013d6:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 4, 1);
 80013d8:	2201      	movs	r2, #1
 80013da:	2104      	movs	r1, #4
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	f7ff ff29 	bl	8001234 <KeyPadReturn>
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 80013e6:	2201      	movs	r2, #1
 80013e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ec:	486e      	ldr	r0, [pc, #440]	; (80015a8 <running+0x208>)
 80013ee:	f006 fcab 	bl	8007d48 <HAL_GPIO_WritePin>
      if (finished) break;
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d14b      	bne.n	8001490 <running+0xf0>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013fe:	486b      	ldr	r0, [pc, #428]	; (80015ac <running+0x20c>)
 8001400:	f006 fca2 	bl	8007d48 <HAL_GPIO_WritePin>
      val = RowChecker();
 8001404:	f7ff feba 	bl	800117c <RowChecker>
 8001408:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 3, 1);
 800140a:	2201      	movs	r2, #1
 800140c:	2103      	movs	r1, #3
 800140e:	6838      	ldr	r0, [r7, #0]
 8001410:	f7ff ff10 	bl	8001234 <KeyPadReturn>
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8001418:	2201      	movs	r2, #1
 800141a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800141e:	4863      	ldr	r0, [pc, #396]	; (80015ac <running+0x20c>)
 8001420:	f006 fc92 	bl	8007d48 <HAL_GPIO_WritePin>
      if (finished) break;
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d134      	bne.n	8001494 <running+0xf4>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001430:	485e      	ldr	r0, [pc, #376]	; (80015ac <running+0x20c>)
 8001432:	f006 fc89 	bl	8007d48 <HAL_GPIO_WritePin>
      val = RowChecker();
 8001436:	f7ff fea1 	bl	800117c <RowChecker>
 800143a:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 2, 1);
 800143c:	2201      	movs	r2, #1
 800143e:	2102      	movs	r1, #2
 8001440:	6838      	ldr	r0, [r7, #0]
 8001442:	f7ff fef7 	bl	8001234 <KeyPadReturn>
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 800144a:	2201      	movs	r2, #1
 800144c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001450:	4856      	ldr	r0, [pc, #344]	; (80015ac <running+0x20c>)
 8001452:	f006 fc79 	bl	8007d48 <HAL_GPIO_WritePin>
      if (finished) break;
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d11d      	bne.n	8001498 <running+0xf8>

      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001462:	4851      	ldr	r0, [pc, #324]	; (80015a8 <running+0x208>)
 8001464:	f006 fc70 	bl	8007d48 <HAL_GPIO_WritePin>
      val = RowChecker();
 8001468:	f7ff fe88 	bl	800117c <RowChecker>
 800146c:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 1, 1);
 800146e:	2201      	movs	r2, #1
 8001470:	2101      	movs	r1, #1
 8001472:	6838      	ldr	r0, [r7, #0]
 8001474:	f7ff fede 	bl	8001234 <KeyPadReturn>
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001482:	4849      	ldr	r0, [pc, #292]	; (80015a8 <running+0x208>)
 8001484:	f006 fc60 	bl	8007d48 <HAL_GPIO_WritePin>
  while (!finished) {
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d09b      	beq.n	80013c6 <running+0x26>
 800148e:	e004      	b.n	800149a <running+0xfa>
      if (finished) break;
 8001490:	bf00      	nop
 8001492:	e002      	b.n	800149a <running+0xfa>
      if (finished) break;
 8001494:	bf00      	nop
 8001496:	e000      	b.n	800149a <running+0xfa>
      if (finished) break;
 8001498:	bf00      	nop

      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
    }
  	  finished = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	71fb      	strb	r3, [r7, #7]
  	  LCD_Fill(5, 5, 170, 5+28, C_BLACK);
 800149e:	2300      	movs	r3, #0
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2321      	movs	r3, #33	; 0x21
 80014a4:	22aa      	movs	r2, #170	; 0xaa
 80014a6:	2105      	movs	r1, #5
 80014a8:	2005      	movs	r0, #5
 80014aa:	f000 fa43 	bl	8001934 <LCD_Fill>
  	  //Gathers Age data
  	  LCD_PutStr(5, 5, "Age: ", DEFAULT_FONT, C_GREEN, C_BLACK);
 80014ae:	2300      	movs	r3, #0
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <running+0x200>)
 80014ba:	4a3d      	ldr	r2, [pc, #244]	; (80015b0 <running+0x210>)
 80014bc:	2105      	movs	r1, #5
 80014be:	2005      	movs	r0, #5
 80014c0:	f000 fb1b 	bl	8001afa <LCD_PutStr>
  	while (!finished) {
 80014c4:	e060      	b.n	8001588 <running+0x1e8>
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014cc:	4836      	ldr	r0, [pc, #216]	; (80015a8 <running+0x208>)
 80014ce:	f006 fc3b 	bl	8007d48 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 80014d2:	f7ff fe53 	bl	800117c <RowChecker>
 80014d6:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 4, 0);
 80014d8:	2200      	movs	r2, #0
 80014da:	2104      	movs	r1, #4
 80014dc:	6838      	ldr	r0, [r7, #0]
 80014de:	f7ff fea9 	bl	8001234 <KeyPadReturn>
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 80014e6:	2201      	movs	r2, #1
 80014e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ec:	482e      	ldr	r0, [pc, #184]	; (80015a8 <running+0x208>)
 80014ee:	f006 fc2b 	bl	8007d48 <HAL_GPIO_WritePin>
  	      if (finished) return;
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d14b      	bne.n	8001590 <running+0x1f0>

  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014fe:	482b      	ldr	r0, [pc, #172]	; (80015ac <running+0x20c>)
 8001500:	f006 fc22 	bl	8007d48 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 8001504:	f7ff fe3a 	bl	800117c <RowChecker>
 8001508:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 3, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2103      	movs	r1, #3
 800150e:	6838      	ldr	r0, [r7, #0]
 8001510:	f7ff fe90 	bl	8001234 <KeyPadReturn>
 8001514:	4603      	mov	r3, r0
 8001516:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8001518:	2201      	movs	r2, #1
 800151a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151e:	4823      	ldr	r0, [pc, #140]	; (80015ac <running+0x20c>)
 8001520:	f006 fc12 	bl	8007d48 <HAL_GPIO_WritePin>
  	      if (finished) return;
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d134      	bne.n	8001594 <running+0x1f4>

  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001530:	481e      	ldr	r0, [pc, #120]	; (80015ac <running+0x20c>)
 8001532:	f006 fc09 	bl	8007d48 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 8001536:	f7ff fe21 	bl	800117c <RowChecker>
 800153a:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 2, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2102      	movs	r1, #2
 8001540:	6838      	ldr	r0, [r7, #0]
 8001542:	f7ff fe77 	bl	8001234 <KeyPadReturn>
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 800154a:	2201      	movs	r2, #1
 800154c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001550:	4816      	ldr	r0, [pc, #88]	; (80015ac <running+0x20c>)
 8001552:	f006 fbf9 	bl	8007d48 <HAL_GPIO_WritePin>
  	      if (finished) return;
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d11d      	bne.n	8001598 <running+0x1f8>

  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001562:	4811      	ldr	r0, [pc, #68]	; (80015a8 <running+0x208>)
 8001564:	f006 fbf0 	bl	8007d48 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 8001568:	f7ff fe08 	bl	800117c <RowChecker>
 800156c:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 1, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2101      	movs	r1, #1
 8001572:	6838      	ldr	r0, [r7, #0]
 8001574:	f7ff fe5e 	bl	8001234 <KeyPadReturn>
 8001578:	4603      	mov	r3, r0
 800157a:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 800157c:	2201      	movs	r2, #1
 800157e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001582:	4809      	ldr	r0, [pc, #36]	; (80015a8 <running+0x208>)
 8001584:	f006 fbe0 	bl	8007d48 <HAL_GPIO_WritePin>
  	while (!finished) {
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d09b      	beq.n	80014c6 <running+0x126>
 800158e:	e004      	b.n	800159a <running+0x1fa>
  	      if (finished) return;
 8001590:	bf00      	nop
 8001592:	e002      	b.n	800159a <running+0x1fa>
  	      if (finished) return;
 8001594:	bf00      	nop
 8001596:	e000      	b.n	800159a <running+0x1fa>
  	      if (finished) return;
 8001598:	bf00      	nop
  	}
  }
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	080121e4 	.word	0x080121e4
 80015a4:	08012178 	.word	0x08012178
 80015a8:	48001400 	.word	0x48001400
 80015ac:	48001000 	.word	0x48001000
 80015b0:	08012184 	.word	0x08012184

080015b4 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 80015be:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <setSPI_Size+0x74>)
 80015c0:	f993 3000 	ldrsb.w	r3, [r3]
 80015c4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d027      	beq.n	800161c <setSPI_Size+0x68>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <setSPI_Size+0x78>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <setSPI_Size+0x78>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015da:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 80015dc:	4a12      	ldr	r2, [pc, #72]	; (8001628 <setSPI_Size+0x74>)
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d10c      	bne.n	8001604 <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <setSPI_Size+0x78>)
 80015ec:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80015f0:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_CRCL;//BR was DFF
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <setSPI_Size+0x78>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <setSPI_Size+0x78>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001600:	601a      	str	r2, [r3, #0]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
    }
  }
}
 8001602:	e00b      	b.n	800161c <setSPI_Size+0x68>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <setSPI_Size+0x78>)
 8001606:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800160a:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <setSPI_Size+0x78>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <setSPI_Size+0x78>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800161a:	601a      	str	r2, [r3, #0]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	20000010 	.word	0x20000010
 800162c:	20000834 	.word	0x20000834

08001630 <LCD_WriteCommand>:
/**
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	70fb      	strb	r3, [r7, #3]
	      setSPI_Size(mode_8bit);
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff ffb9 	bl	80015b4 <setSPI_Size>
//	      LCD_PIN(LCD_DC,RESET);
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);   // DC
 8001642:	2200      	movs	r2, #0
 8001644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001648:	4815      	ldr	r0, [pc, #84]	; (80016a0 <LCD_WriteCommand+0x70>)
 800164a:	f006 fb7d 	bl	8007d48 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);  // CS
 800164e:	2200      	movs	r2, #0
 8001650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001654:	4812      	ldr	r0, [pc, #72]	; (80016a0 <LCD_WriteCommand+0x70>)
 8001656:	f006 fb77 	bl	8007d48 <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi3, cmd, 1, HAL_MAX_DELAY);
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
 800165e:	2201      	movs	r2, #1
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	4810      	ldr	r0, [pc, #64]	; (80016a4 <LCD_WriteCommand+0x74>)
 8001664:	f00a fab7 	bl	800bbd6 <HAL_SPI_Transmit>
	  if (argc) {
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00e      	beq.n	800168c <LCD_WriteCommand+0x5c>
	    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 800166e:	2201      	movs	r2, #1
 8001670:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001674:	480a      	ldr	r0, [pc, #40]	; (80016a0 <LCD_WriteCommand+0x70>)
 8001676:	f006 fb67 	bl	8007d48 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&hspi3, (cmd + 1), argc, HAL_MAX_DELAY);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	1c59      	adds	r1, r3, #1
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	b29a      	uxth	r2, r3
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	4807      	ldr	r0, [pc, #28]	; (80016a4 <LCD_WriteCommand+0x74>)
 8001688:	f00a faa5 	bl	800bbd6 <HAL_SPI_Transmit>
	  }
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);  // CS
 800168c:	2201      	movs	r2, #1
 800168e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <LCD_WriteCommand+0x70>)
 8001694:	f006 fb58 	bl	8007d48 <HAL_GPIO_WritePin>
	}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	48001000 	.word	0x48001000
 80016a4:	20000834 	.word	0x20000834

080016a8 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80016b2:	2201      	movs	r2, #1
 80016b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b8:	4814      	ldr	r0, [pc, #80]	; (800170c <LCD_WriteData+0x64>)
 80016ba:	f006 fb45 	bl	8007d48 <HAL_GPIO_WritePin>
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c4:	4811      	ldr	r0, [pc, #68]	; (800170c <LCD_WriteData+0x64>)
 80016c6:	f006 fb3f 	bl	8007d48 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 80016ca:	e011      	b.n	80016f0 <LCD_WriteData+0x48>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d2:	4293      	cmp	r3, r2
 80016d4:	bf28      	it	cs
 80016d6:	4613      	movcs	r3, r2
 80016d8:	81fb      	strh	r3, [r7, #14]
        buff += chunk_size;
      else
        buff += chunk_size*2;
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 80016da:	89fa      	ldrh	r2, [r7, #14]
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	480b      	ldr	r0, [pc, #44]	; (8001710 <LCD_WriteData+0x68>)
 80016e4:	f00a fa77 	bl	800bbd6 <HAL_SPI_Transmit>
#endif
    buff_size -= chunk_size;
 80016e8:	89fb      	ldrh	r3, [r7, #14]
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1ea      	bne.n	80016cc <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 80016f6:	2201      	movs	r2, #1
 80016f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016fc:	4803      	ldr	r0, [pc, #12]	; (800170c <LCD_WriteData+0x64>)
 80016fe:	f006 fb23 	bl	8007d48 <HAL_GPIO_WritePin>
#endif
}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	48001000 	.word	0x48001000
 8001710:	20000834 	.word	0x20000834

08001714 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b08b      	sub	sp, #44	; 0x2c
 8001718:	af00      	add	r7, sp, #0
 800171a:	4604      	mov	r4, r0
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4623      	mov	r3, r4
 8001724:	80fb      	strh	r3, [r7, #6]
 8001726:	4603      	mov	r3, r0
 8001728:	80bb      	strh	r3, [r7, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	807b      	strh	r3, [r7, #2]
 800172e:	4613      	mov	r3, r2
 8001730:	803b      	strh	r3, [r7, #0]
//  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
//  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
	int16_t x_start = x0 /*+ LCD_X_SHIFT*/, x_end = x1 /*+ LCD_X_SHIFT*/;
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001736:	887b      	ldrh	r3, [r7, #2]
 8001738:	84bb      	strh	r3, [r7, #36]	; 0x24
	 int16_t y_start = y0 /*+ LCD_Y_SHIFT*/, y_end = y1 /*+ LCD_Y_SHIFT*/;
 800173a:	88bb      	ldrh	r3, [r7, #4]
 800173c:	847b      	strh	r3, [r7, #34]	; 0x22
 800173e:	883b      	ldrh	r3, [r7, #0]
 8001740:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8001742:	232a      	movs	r3, #42	; 0x2a
 8001744:	763b      	strb	r3, [r7, #24]
 8001746:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800174a:	121b      	asrs	r3, r3, #8
 800174c:	b21b      	sxth	r3, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	767b      	strb	r3, [r7, #25]
 8001752:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001754:	b2db      	uxtb	r3, r3
 8001756:	76bb      	strb	r3, [r7, #26]
 8001758:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800175c:	121b      	asrs	r3, r3, #8
 800175e:	b21b      	sxth	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	76fb      	strb	r3, [r7, #27]
 8001764:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001766:	b2db      	uxtb	r3, r3
 8001768:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800176a:	f107 0318 	add.w	r3, r7, #24
 800176e:	2104      	movs	r1, #4
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5d 	bl	8001630 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8001776:	232b      	movs	r3, #43	; 0x2b
 8001778:	743b      	strb	r3, [r7, #16]
 800177a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800177e:	121b      	asrs	r3, r3, #8
 8001780:	b21b      	sxth	r3, r3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	747b      	strb	r3, [r7, #17]
 8001786:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001788:	b2db      	uxtb	r3, r3
 800178a:	74bb      	strb	r3, [r7, #18]
 800178c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001790:	121b      	asrs	r3, r3, #8
 8001792:	b21b      	sxth	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	74fb      	strb	r3, [r7, #19]
 8001798:	8c3b      	ldrh	r3, [r7, #32]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	2104      	movs	r1, #4
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff43 	bl	8001630 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 80017aa:	232c      	movs	r3, #44	; 0x2c
 80017ac:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff3b 	bl	8001630 <LCD_WriteCommand>
  }
}
 80017ba:	bf00      	nop
 80017bc:	372c      	adds	r7, #44	; 0x2c
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd90      	pop	{r4, r7, pc}
	...

080017c4 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	80fb      	strh	r3, [r7, #6]
 80017ce:	460b      	mov	r3, r1
 80017d0:	80bb      	strh	r3, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 80017d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db39      	blt.n	8001852 <LCD_DrawPixel+0x8e>
 80017de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e2:	2bef      	cmp	r3, #239	; 0xef
 80017e4:	dc35      	bgt.n	8001852 <LCD_DrawPixel+0x8e>
 80017e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db31      	blt.n	8001852 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 80017ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017f2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80017f6:	da2c      	bge.n	8001852 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 80017f8:	887b      	ldrh	r3, [r7, #2]
 80017fa:	0a1b      	lsrs	r3, r3, #8
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	733b      	strb	r3, [r7, #12]
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8001808:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800180c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001810:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001814:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001818:	f7ff ff7c 	bl	8001714 <LCD_SetAddressWindow>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001822:	480e      	ldr	r0, [pc, #56]	; (800185c <LCD_DrawPixel+0x98>)
 8001824:	f006 fa90 	bl	8007d48 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800182e:	480b      	ldr	r0, [pc, #44]	; (800185c <LCD_DrawPixel+0x98>)
 8001830:	f006 fa8a 	bl	8007d48 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8001834:	f107 010c 	add.w	r1, r7, #12
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
 800183c:	2202      	movs	r2, #2
 800183e:	4808      	ldr	r0, [pc, #32]	; (8001860 <LCD_DrawPixel+0x9c>)
 8001840:	f00a f9c9 	bl	800bbd6 <HAL_SPI_Transmit>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001844:	2201      	movs	r2, #1
 8001846:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800184a:	4804      	ldr	r0, [pc, #16]	; (800185c <LCD_DrawPixel+0x98>)
 800184c:	f006 fa7c 	bl	8007d48 <HAL_GPIO_WritePin>
 8001850:	e000      	b.n	8001854 <LCD_DrawPixel+0x90>
    return;
 8001852:	bf00      	nop
#endif
}
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	48001000 	.word	0x48001000
 8001860:	20000834 	.word	0x20000834

08001864 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8001864:	b580      	push	{r7, lr}
 8001866:	b094      	sub	sp, #80	; 0x50
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
    LCD_WriteData((uint8_t*)&color, pixels);
  else{
#endif
	  // JACOB IF DMA ENABLE OR SOMETHING WEIRD WITH PIXEL WRITING, GO HERE AND JUST DO PIXEL
    uint16_t fill[DMA_Min_Pixels];                                                                // Use a pixel buffer for faster filling, removes overhead.
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8001870:	2300      	movs	r3, #0
 8001872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001874:	e009      	b.n	800188a <LCD_FillPixels+0x26>
      fill[t]=color;
 8001876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	3350      	adds	r3, #80	; 0x50
 800187c:	443b      	add	r3, r7
 800187e:	887a      	ldrh	r2, [r7, #2]
 8001880:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8001884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001886:	3301      	adds	r3, #1
 8001888:	64fb      	str	r3, [r7, #76]	; 0x4c
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b20      	cmp	r3, #32
 800188e:	bf28      	it	cs
 8001890:	2320      	movcs	r3, #32
 8001892:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001894:	429a      	cmp	r2, r3
 8001896:	d3ee      	bcc.n	8001876 <LCD_FillPixels+0x12>
    }
    while(pixels){                                                                                // Send 64 pixel blocks
 8001898:	e00e      	b.n	80018b8 <LCD_FillPixels+0x54>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b20      	cmp	r3, #32
 800189e:	bf28      	it	cs
 80018a0:	2320      	movcs	r3, #32
 80018a2:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 80018a4:	f107 0308 	add.w	r3, r7, #8
 80018a8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fefc 	bl	80016a8 <LCD_WriteData>
      pixels-=sz;
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ed      	bne.n	800189a <LCD_FillPixels+0x36>
    }
#ifdef USE_DMA
  }
#endif
}
 80018be:	bf00      	nop
 80018c0:	bf00      	nop
 80018c2:	3750      	adds	r7, #80	; 0x50
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4604      	mov	r4, r0
 80018d0:	4608      	mov	r0, r1
 80018d2:	4611      	mov	r1, r2
 80018d4:	461a      	mov	r2, r3
 80018d6:	4623      	mov	r3, r4
 80018d8:	80fb      	strh	r3, [r7, #6]
 80018da:	4603      	mov	r3, r0
 80018dc:	80bb      	strh	r3, [r7, #4]
 80018de:	460b      	mov	r3, r1
 80018e0:	807b      	strh	r3, [r7, #2]
 80018e2:	4613      	mov	r3, r2
 80018e4:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 80018e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ee:	d104      	bne.n	80018fa <LCD_FillArea+0x32>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
 80018f0:	2000      	movs	r0, #0
 80018f2:	f7ff fe5f 	bl	80015b4 <setSPI_Size>
#endif
    return NULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e013      	b.n	8001922 <LCD_FillArea+0x5a>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 80018fa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001902:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001906:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800190a:	f7ff ff03 	bl	8001714 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
 800190e:	2001      	movs	r0, #1
 8001910:	f7ff fe50 	bl	80015b4 <setSPI_Size>
#endif
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	f44f 7180 	mov.w	r1, #256	; 0x100
 800191a:	4804      	ldr	r0, [pc, #16]	; (800192c <LCD_FillArea+0x64>)
 800191c:	f006 fa14 	bl	8007d48 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <LCD_FillArea+0x68>)
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	48001000 	.word	0x48001000
 8001930:	08001865 	.word	0x08001865

08001934 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8001934:	b590      	push	{r4, r7, lr}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	4604      	mov	r4, r0
 800193c:	4608      	mov	r0, r1
 800193e:	4611      	mov	r1, r2
 8001940:	461a      	mov	r2, r3
 8001942:	4623      	mov	r3, r4
 8001944:	80fb      	strh	r3, [r7, #6]
 8001946:	4603      	mov	r3, r0
 8001948:	80bb      	strh	r3, [r7, #4]
 800194a:	460b      	mov	r3, r1
 800194c:	807b      	strh	r3, [r7, #2]
 800194e:	4613      	mov	r3, r2
 8001950:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8001952:	887a      	ldrh	r2, [r7, #2]
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	3301      	adds	r3, #1
 800195a:	4619      	mov	r1, r3
 800195c:	883a      	ldrh	r2, [r7, #0]
 800195e:	88bb      	ldrh	r3, [r7, #4]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	3301      	adds	r3, #1
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 800196a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800196e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001972:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001976:	f9b7 3000 	ldrsh.w	r3, [r7]
 800197a:	f7ff fecb 	bl	8001714 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);
 800197e:	2001      	movs	r0, #1
 8001980:	f7ff fe18 	bl	80015b4 <setSPI_Size>
#endif
  LCD_FillPixels(pixels, color);
 8001984:	8c3b      	ldrh	r3, [r7, #32]
 8001986:	4619      	mov	r1, r3
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f7ff ff6b 	bl	8001864 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
#else
  setSPI_Size(mode_8bit);
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff fe10 	bl	80015b4 <setSPI_Size>
#endif
  return UG_RESULT_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bd90      	pop	{r4, r7, pc}

0800199e <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 800199e:	b590      	push	{r4, r7, lr}
 80019a0:	b085      	sub	sp, #20
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	603a      	str	r2, [r7, #0]
 80019a8:	80fb      	strh	r3, [r7, #6]
 80019aa:	460b      	mov	r3, r1
 80019ac:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	889b      	ldrh	r3, [r3, #4]
 80019b2:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	88db      	ldrh	r3, [r3, #6]
 80019b8:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	2bef      	cmp	r3, #239	; 0xef
 80019be:	d837      	bhi.n	8001a30 <LCD_DrawImage+0x92>
 80019c0:	88bb      	ldrh	r3, [r7, #4]
 80019c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80019c6:	d233      	bcs.n	8001a30 <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 80019c8:	88fa      	ldrh	r2, [r7, #6]
 80019ca:	89fb      	ldrh	r3, [r7, #14]
 80019cc:	4413      	add	r3, r2
 80019ce:	2bf0      	cmp	r3, #240	; 0xf0
 80019d0:	dc30      	bgt.n	8001a34 <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 80019d2:	88ba      	ldrh	r2, [r7, #4]
 80019d4:	89bb      	ldrh	r3, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80019dc:	dc2c      	bgt.n	8001a38 <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	7a1b      	ldrb	r3, [r3, #8]
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d12a      	bne.n	8001a3c <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80019e6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80019ea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80019ee:	88fa      	ldrh	r2, [r7, #6]
 80019f0:	89fb      	ldrh	r3, [r7, #14]
 80019f2:	4413      	add	r3, r2
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	b21c      	sxth	r4, r3
 80019fc:	88ba      	ldrh	r2, [r7, #4]
 80019fe:	89bb      	ldrh	r3, [r7, #12]
 8001a00:	4413      	add	r3, r2
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	3b01      	subs	r3, #1
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	b21b      	sxth	r3, r3
 8001a0a:	4622      	mov	r2, r4
 8001a0c:	f7ff fe82 	bl	8001714 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
 8001a10:	2001      	movs	r0, #1
 8001a12:	f7ff fdcf 	bl	80015b4 <setSPI_Size>
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	89fb      	ldrh	r3, [r7, #14]
 8001a1c:	89ba      	ldrh	r2, [r7, #12]
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	4619      	mov	r1, r3
 8001a24:	f7ff fe40 	bl	80016a8 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f7ff fdc3 	bl	80015b4 <setSPI_Size>
 8001a2e:	e006      	b.n	8001a3e <LCD_DrawImage+0xa0>
    return;
 8001a30:	bf00      	nop
 8001a32:	e004      	b.n	8001a3e <LCD_DrawImage+0xa0>
    return;
 8001a34:	bf00      	nop
 8001a36:	e002      	b.n	8001a3e <LCD_DrawImage+0xa0>
    return;
 8001a38:	bf00      	nop
 8001a3a:	e000      	b.n	8001a3e <LCD_DrawImage+0xa0>
    return;
 8001a3c:	bf00      	nop
#endif
  }
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd90      	pop	{r4, r7, pc}

08001a44 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	4611      	mov	r1, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	4623      	mov	r3, r4
 8001a54:	80fb      	strh	r3, [r7, #6]
 8001a56:	4603      	mov	r3, r0
 8001a58:	80bb      	strh	r3, [r7, #4]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	807b      	strh	r3, [r7, #2]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8001a62:	88fa      	ldrh	r2, [r7, #6]
 8001a64:	887b      	ldrh	r3, [r7, #2]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d10a      	bne.n	8001a80 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8001a6a:	88ba      	ldrh	r2, [r7, #4]
 8001a6c:	883b      	ldrh	r3, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d918      	bls.n	8001aa4 <LCD_DrawLine+0x60>
 8001a72:	88bb      	ldrh	r3, [r7, #4]
 8001a74:	81bb      	strh	r3, [r7, #12]
 8001a76:	883b      	ldrh	r3, [r7, #0]
 8001a78:	80bb      	strh	r3, [r7, #4]
 8001a7a:	89bb      	ldrh	r3, [r7, #12]
 8001a7c:	803b      	strh	r3, [r7, #0]
 8001a7e:	e011      	b.n	8001aa4 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8001a80:	88ba      	ldrh	r2, [r7, #4]
 8001a82:	883b      	ldrh	r3, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d10a      	bne.n	8001a9e <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8001a88:	88fa      	ldrh	r2, [r7, #6]
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d909      	bls.n	8001aa4 <LCD_DrawLine+0x60>
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	81fb      	strh	r3, [r7, #14]
 8001a94:	887b      	ldrh	r3, [r7, #2]
 8001a96:	80fb      	strh	r3, [r7, #6]
 8001a98:	89fb      	ldrh	r3, [r7, #14]
 8001a9a:	807b      	strh	r3, [r7, #2]
 8001a9c:	e002      	b.n	8001aa4 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa2:	e009      	b.n	8001ab8 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8001aa4:	883c      	ldrh	r4, [r7, #0]
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	88b9      	ldrh	r1, [r7, #4]
 8001aaa:	88f8      	ldrh	r0, [r7, #6]
 8001aac:	8c3b      	ldrh	r3, [r7, #32]
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	4623      	mov	r3, r4
 8001ab2:	f7ff ff3f 	bl	8001934 <LCD_Fill>
  return UG_RESULT_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd90      	pop	{r4, r7, pc}

08001ac0 <LCD_PutChar>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af02      	add	r7, sp, #8
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	4603      	mov	r3, r0
 8001aca:	81fb      	strh	r3, [r7, #14]
 8001acc:	460b      	mov	r3, r1
 8001ace:	81bb      	strh	r3, [r7, #12]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	72fb      	strb	r3, [r7, #11]
  UG_FontSelect(font);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f002 ff41 	bl	800495c <UG_FontSelect>
  UG_PutChar(ch, x, y, color, bgcolor);
 8001ada:	7afb      	ldrb	r3, [r7, #11]
 8001adc:	b298      	uxth	r0, r3
 8001ade:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001ae2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ae6:	8c3c      	ldrh	r4, [r7, #32]
 8001ae8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	4623      	mov	r3, r4
 8001aee:	f003 f937 	bl	8004d60 <UG_PutChar>
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd90      	pop	{r4, r7, pc}

08001afa <LCD_PutStr>:

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b084      	sub	sp, #16
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60ba      	str	r2, [r7, #8]
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	4603      	mov	r3, r0
 8001b06:	81fb      	strh	r3, [r7, #14]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f002 ff25 	bl	800495c <UG_FontSelect>
  UG_SetForecolor(color);
 8001b12:	8b3b      	ldrh	r3, [r7, #24]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f003 f95f 	bl	8004dd8 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8001b1a:	8bbb      	ldrh	r3, [r7, #28]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 f96d 	bl	8004dfc <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8001b22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b26:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f003 f87f 	bl	8004c30 <UG_PutString>
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <LCD_setPower+0x14>
 8001b4a:	2329      	movs	r3, #41	; 0x29
 8001b4c:	e000      	b.n	8001b50 <LCD_setPower+0x16>
 8001b4e:	2328      	movs	r3, #40	; 0x28
 8001b50:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fd69 	bl	8001630 <LCD_WriteCommand>
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <LCD_Update>:

static void LCD_Update(void)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	af00      	add	r7, sp, #0
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f7ff fd22 	bl	80015b4 <setSPI_Size>
  #endif
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b80:	4829      	ldr	r0, [pc, #164]	; (8001c28 <LCD_init+0xb4>)
 8001b82:	f006 f8e1 	bl	8007d48 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2180      	movs	r1, #128	; 0x80
 8001b8a:	4827      	ldr	r0, [pc, #156]	; (8001c28 <LCD_init+0xb4>)
 8001b8c:	f006 f8dc 	bl	8007d48 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f004 fcc5 	bl	8006520 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);
 8001b96:	2201      	movs	r2, #1
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	4823      	ldr	r0, [pc, #140]	; (8001c28 <LCD_init+0xb4>)
 8001b9c:	f006 f8d4 	bl	8007d48 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001ba0:	20c8      	movs	r0, #200	; 0xc8
 8001ba2:	f004 fcbd 	bl	8006520 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8001ba6:	4921      	ldr	r1, [pc, #132]	; (8001c2c <LCD_init+0xb8>)
 8001ba8:	4821      	ldr	r0, [pc, #132]	; (8001c30 <LCD_init+0xbc>)
 8001baa:	f002 fe3d 	bl	8004828 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8001bae:	4921      	ldr	r1, [pc, #132]	; (8001c34 <LCD_init+0xc0>)
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f004 f9cb 	bl	8005f4c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8001bb6:	4920      	ldr	r1, [pc, #128]	; (8001c38 <LCD_init+0xc4>)
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f004 f9c7 	bl	8005f4c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8001bbe:	491f      	ldr	r1, [pc, #124]	; (8001c3c <LCD_init+0xc8>)
 8001bc0:	2002      	movs	r0, #2
 8001bc2:	f004 f9c3 	bl	8005f4c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8001bc6:	491e      	ldr	r1, [pc, #120]	; (8001c40 <LCD_init+0xcc>)
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f004 f9bf 	bl	8005f4c <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f003 f926 	bl	8004e20 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f003 f937 	bl	8004e48 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001bda:	2300      	movs	r3, #0
 8001bdc:	80fb      	strh	r3, [r7, #6]
 8001bde:	e013      	b.n	8001c08 <LCD_init+0x94>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	3301      	adds	r3, #1
 8001be4:	4a17      	ldr	r2, [pc, #92]	; (8001c44 <LCD_init+0xd0>)
 8001be6:	441a      	add	r2, r3
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	4916      	ldr	r1, [pc, #88]	; (8001c44 <LCD_init+0xd0>)
 8001bec:	5ccb      	ldrb	r3, [r1, r3]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	f7ff fd1d 	bl	8001630 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <LCD_init+0xd0>)
 8001bfa:	5cd3      	ldrb	r3, [r2, r3]
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	4413      	add	r3, r2
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3302      	adds	r3, #2
 8001c06:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	2b4b      	cmp	r3, #75	; 0x4b
 8001c0c:	d9e8      	bls.n	8001be0 <LCD_init+0x6c>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f002 feb4 	bl	800497c <UG_FillScreen>
  LCD_setPower(ENABLE);
 8001c14:	2001      	movs	r0, #1
 8001c16:	f7ff ff90 	bl	8001b3a <LCD_setPower>
  UG_Update();
 8001c1a:	f004 f9b9 	bl	8005f90 <UG_Update>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	48001000 	.word	0x48001000
 8001c2c:	20000014 	.word	0x20000014
 8001c30:	2000027c 	.word	0x2000027c
 8001c34:	08001a45 	.word	0x08001a45
 8001c38:	08001935 	.word	0x08001935
 8001c3c:	080018c9 	.word	0x080018c9
 8001c40:	0800199f 	.word	0x0800199f
 8001c44:	080175d4 	.word	0x080175d4

08001c48 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6858      	ldr	r0, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	8adb      	ldrh	r3, [r3, #22]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f006 f86b 	bl	8007d48 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	1cf9      	adds	r1, r7, #3
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f009 ffaa 	bl	800bbd6 <HAL_SPI_Transmit>
 8001c82:	4603      	mov	r3, r0
 8001c84:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f107 010f 	add.w	r1, r7, #15
 8001c92:	2201      	movs	r2, #1
 8001c94:	f00a f914 	bl	800bec0 <HAL_SPI_Receive>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6858      	ldr	r0, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	8adb      	ldrh	r3, [r3, #22]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f006 f84e 	bl	8007d48 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	70fb      	strb	r3, [r7, #3]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ccc:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001cce:	78bb      	ldrb	r3, [r7, #2]
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	b21a      	sxth	r2, r3
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	b21b      	sxth	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b21b      	sxth	r3, r3
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6858      	ldr	r0, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	8adb      	ldrh	r3, [r3, #22]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	4619      	mov	r1, r3
 8001cec:	f006 f82c 	bl	8007d48 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f107 010a 	add.w	r1, r7, #10
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	f009 ff6a 	bl	800bbd6 <HAL_SPI_Transmit>
 8001d02:	4603      	mov	r3, r0
 8001d04:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6858      	ldr	r0, [r3, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	8adb      	ldrh	r3, [r3, #22]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4619      	mov	r1, r3
 8001d12:	f006 f819 	bl	8007d48 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b088      	sub	sp, #32
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	4611      	mov	r1, r2
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	71fb      	strb	r3, [r7, #7]
 8001d30:	4613      	mov	r3, r2
 8001d32:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6858      	ldr	r0, [r3, #4]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8adb      	ldrh	r3, [r3, #22]
 8001d40:	2200      	movs	r2, #0
 8001d42:	4619      	mov	r1, r3
 8001d44:	f006 f800 	bl	8007d48 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f107 0117 	add.w	r1, r7, #23
 8001d54:	2201      	movs	r2, #1
 8001d56:	f009 ff3e 	bl	800bbd6 <HAL_SPI_Transmit>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8001d5e:	79bb      	ldrb	r3, [r7, #6]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d108      	bne.n	8001d76 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	79fa      	ldrb	r2, [r7, #7]
 8001d6a:	b292      	uxth	r2, r2
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f00a fc00 	bl	800c574 <HAL_SPI_Transmit_DMA>
 8001d74:	e012      	b.n	8001d9c <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	68b9      	ldr	r1, [r7, #8]
 8001d84:	f009 ff27 	bl	800bbd6 <HAL_SPI_Transmit>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6858      	ldr	r0, [r3, #4]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8adb      	ldrh	r3, [r3, #22]
 8001d94:	2201      	movs	r2, #1
 8001d96:	4619      	mov	r1, r3
 8001d98:	f005 ffd6 	bl	8007d48 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8001d9c:	3720      	adds	r7, #32
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <read_fifo>:

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b088      	sub	sp, #32
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	4611      	mov	r1, r2
 8001dae:	461a      	mov	r2, r3
 8001db0:	460b      	mov	r3, r1
 8001db2:	71fb      	strb	r3, [r7, #7]
 8001db4:	4613      	mov	r3, r2
 8001db6:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO;
 8001db8:	2300      	movs	r3, #0
 8001dba:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6858      	ldr	r0, [r3, #4]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8adb      	ldrh	r3, [r3, #22]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f005 ffbe 	bl	8007d48 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f107 0117 	add.w	r1, r7, #23
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f009 fefc 	bl	800bbd6 <HAL_SPI_Transmit>
 8001dde:	4603      	mov	r3, r0
 8001de0:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 8001de2:	79bb      	ldrb	r3, [r7, #6]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d10a      	bne.n	8001dfe <read_fifo+0x5c>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	79fa      	ldrb	r2, [r7, #7]
 8001dee:	b292      	uxth	r2, r2
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f00a fcae 	bl	800c754 <HAL_SPI_Receive_DMA>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 8001dfc:	e012      	b.n	8001e24 <read_fifo+0x82>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	f00a f858 	bl	800bec0 <HAL_SPI_Receive>
 8001e10:	4603      	mov	r3, r0
 8001e12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6858      	ldr	r0, [r3, #4]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8adb      	ldrh	r3, [r3, #22]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f005 ff92 	bl	8007d48 <HAL_GPIO_WritePin>
}
 8001e24:	bf00      	nop
 8001e26:	3720      	adds	r7, #32
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	2101      	movs	r1, #1
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff36 	bl	8001cb6 <write_register>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	2b2c      	cmp	r3, #44	; 0x2c
 8001e64:	d801      	bhi.n	8001e6a <set_OCP+0x16>
    imax = 45;
 8001e66:	232d      	movs	r3, #45	; 0x2d
 8001e68:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	2bf0      	cmp	r3, #240	; 0xf0
 8001e6e:	d901      	bls.n	8001e74 <set_OCP+0x20>
    imax = 240;
 8001e70:	23f0      	movs	r3, #240	; 0xf0
 8001e72:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	2b81      	cmp	r3, #129	; 0x81
 8001e78:	d809      	bhi.n	8001e8e <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	3b2d      	subs	r3, #45	; 0x2d
 8001e7e:	4a0f      	ldr	r2, [pc, #60]	; (8001ebc <set_OCP+0x68>)
 8001e80:	fb82 1203 	smull	r1, r2, r2, r3
 8001e84:	1052      	asrs	r2, r2, #1
 8001e86:	17db      	asrs	r3, r3, #31
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	e008      	b.n	8001ea0 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	331e      	adds	r3, #30
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <set_OCP+0x68>)
 8001e94:	fb82 1203 	smull	r1, r2, r2, r3
 8001e98:	1092      	asrs	r2, r2, #2
 8001e9a:	17db      	asrs	r3, r3, #31
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	f043 0320 	orr.w	r3, r3, #32
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	210b      	movs	r1, #11
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff02 	bl	8001cb6 <write_register>
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	66666667 	.word	0x66666667

08001ec0 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001ec0:	b5b0      	push	{r4, r5, r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8001ec8:	211d      	movs	r1, #29
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff febc 	bl	8001c48 <read_register>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	091b      	lsrs	r3, r3, #4
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2200      	movs	r2, #0
 8001eda:	461c      	mov	r4, r3
 8001edc:	4615      	mov	r5, r2
 8001ede:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8001ee2:	211e      	movs	r1, #30
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff feaf 	bl	8001c48 <read_register>
 8001eea:	4603      	mov	r3, r0
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	2b0a      	cmp	r3, #10
 8001ef8:	d908      	bls.n	8001f0c <set_low_data_rate_optimization+0x4c>
 8001efa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001efe:	1fd1      	subs	r1, r2, #7
 8001f00:	430b      	orrs	r3, r1
 8001f02:	d103      	bne.n	8001f0c <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8001f04:	7ffb      	ldrb	r3, [r7, #31]
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001f0c:	7ffb      	ldrb	r3, [r7, #31]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	2126      	movs	r1, #38	; 0x26
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff fecf 	bl	8001cb6 <write_register>
}
 8001f18:	bf00      	nop
 8001f1a:	3720      	adds	r7, #32
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bdb0      	pop	{r4, r5, r7, pc}

08001f20 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8001f28:	2100      	movs	r1, #0
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ff7e 	bl	8001e2c <set_mode>
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <lora_mode_receive_continuous>:

void lora_mode_receive_continuous(lora_sx1276 *lora)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	7d5b      	ldrb	r3, [r3, #21]
 8001f44:	461a      	mov	r2, r3
 8001f46:	210f      	movs	r1, #15
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff feb4 	bl	8001cb6 <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8001f4e:	22f0      	movs	r2, #240	; 0xf0
 8001f50:	2112      	movs	r1, #18
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff feaf 	bl	8001cb6 <write_register>

  set_mode(lora, OPMODE_RX_CONTINUOUS);
 8001f58:	2105      	movs	r1, #5
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ff66 	bl	8001e2c <set_mode>
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8001f70:	2101      	movs	r1, #1
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ff5a 	bl	8001e2c <set_mode>
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8001f88:	211d      	movs	r1, #29
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff fe5c 	bl	8001c48 <read_register>
 8001f90:	4603      	mov	r3, r0
 8001f92:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	211d      	movs	r1, #29
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fe87 	bl	8001cb6 <write_register>
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10e      	bne.n	8001fe2 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	2b0f      	cmp	r3, #15
 8001fc8:	d901      	bls.n	8001fce <lora_set_tx_power+0x1e>
      level = 15;
 8001fca:	230f      	movs	r3, #15
 8001fcc:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	2109      	movs	r1, #9
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff fe6b 	bl	8001cb6 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8001fe0:	e02e      	b.n	8002040 <lora_set_tx_power+0x90>
    if (level > 20) {
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	2b14      	cmp	r3, #20
 8001fe6:	d901      	bls.n	8001fec <lora_set_tx_power+0x3c>
      level = 20;
 8001fe8:	2314      	movs	r3, #20
 8001fea:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d801      	bhi.n	8001ff6 <lora_set_tx_power+0x46>
      level = 2;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	2b11      	cmp	r3, #17
 8001ffa:	d90c      	bls.n	8002016 <lora_set_tx_power+0x66>
      level -= 3;
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	3b03      	subs	r3, #3
 8002000:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8002002:	2287      	movs	r2, #135	; 0x87
 8002004:	214d      	movs	r1, #77	; 0x4d
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff fe55 	bl	8001cb6 <write_register>
      set_OCP(lora, 140);
 800200c:	218c      	movs	r1, #140	; 0x8c
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ff20 	bl	8001e54 <set_OCP>
 8002014:	e008      	b.n	8002028 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8002016:	2284      	movs	r2, #132	; 0x84
 8002018:	214d      	movs	r1, #77	; 0x4d
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fe4b 	bl	8001cb6 <write_register>
      set_OCP(lora, 97);
 8002020:	2161      	movs	r1, #97	; 0x61
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ff16 	bl	8001e54 <set_OCP>
    level -= 2;
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	3b02      	subs	r3, #2
 800202c:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	2109      	movs	r1, #9
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff fe3b 	bl	8001cb6 <write_register>
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8002054:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002058:	f04f 0000 	mov.w	r0, #0
 800205c:	f04f 0100 	mov.w	r1, #0
 8002060:	04d9      	lsls	r1, r3, #19
 8002062:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8002066:	04d0      	lsls	r0, r2, #19
 8002068:	4a19      	ldr	r2, [pc, #100]	; (80020d0 <lora_set_frequency+0x88>)
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	f7fe fdb3 	bl	8000bd8 <__aeabi_uldivmod>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 800207a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	0c02      	lsrs	r2, r0, #16
 8002088:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800208c:	0c0b      	lsrs	r3, r1, #16
 800208e:	b2d3      	uxtb	r3, r2
 8002090:	461a      	mov	r2, r3
 8002092:	2106      	movs	r1, #6
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f7ff fe0e 	bl	8001cb6 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 800209a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	0a02      	lsrs	r2, r0, #8
 80020a8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80020ac:	0a0b      	lsrs	r3, r1, #8
 80020ae:	b2d3      	uxtb	r3, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	2107      	movs	r1, #7
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f7ff fdfe 	bl	8001cb6 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80020ba:	7c3b      	ldrb	r3, [r7, #16]
 80020bc:	461a      	mov	r2, r3
 80020be:	2108      	movs	r1, #8
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f7ff fdf8 	bl	8001cb6 <write_register>
}
 80020c6:	bf00      	nop
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	01e84800 	.word	0x01e84800

080020d4 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d802      	bhi.n	80020ec <lora_set_spreading_factor+0x18>
    sf = 6;
 80020e6:	2306      	movs	r3, #6
 80020e8:	70fb      	strb	r3, [r7, #3]
 80020ea:	e004      	b.n	80020f6 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d901      	bls.n	80020f6 <lora_set_spreading_factor+0x22>
    sf = 12;
 80020f2:	230c      	movs	r3, #12
 80020f4:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	2b06      	cmp	r3, #6
 80020fa:	d10a      	bne.n	8002112 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80020fc:	22c5      	movs	r2, #197	; 0xc5
 80020fe:	2131      	movs	r1, #49	; 0x31
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff fdd8 	bl	8001cb6 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8002106:	220c      	movs	r2, #12
 8002108:	2137      	movs	r1, #55	; 0x37
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff fdd3 	bl	8001cb6 <write_register>
 8002110:	e009      	b.n	8002126 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8002112:	22c3      	movs	r2, #195	; 0xc3
 8002114:	2131      	movs	r1, #49	; 0x31
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fdcd 	bl	8001cb6 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 800211c:	220a      	movs	r2, #10
 800211e:	2137      	movs	r1, #55	; 0x37
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff fdc8 	bl	8001cb6 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8002126:	211e      	movs	r1, #30
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fd8d 	bl	8001c48 <read_register>
 800212e:	4603      	mov	r3, r0
 8002130:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8002132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	b25a      	sxtb	r2, r3
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	b25b      	sxtb	r3, r3
 8002142:	4313      	orrs	r3, r2
 8002144:	b25b      	sxtb	r3, r3
 8002146:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	461a      	mov	r2, r3
 800214c:	211e      	movs	r1, #30
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fdb1 	bl	8001cb6 <write_register>

  set_low_data_rate_optimization(lora);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff feb3 	bl	8001ec0 <set_low_data_rate_optimization>
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	460b      	mov	r3, r1
 800216c:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	b29b      	uxth	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	2120      	movs	r1, #32
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff fd9b 	bl	8001cb6 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8002180:	887b      	ldrh	r3, [r7, #2]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	b2db      	uxtb	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	2121      	movs	r1, #33	; 0x21
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff fd91 	bl	8001cb6 <write_register>
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 80021a4:	2142      	movs	r1, #66	; 0x42
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fd4e 	bl	8001c48 <read_register>
 80021ac:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 80021be:	2101      	movs	r1, #1
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff fd41 	bl	8001c48 <read_register>
 80021c6:	4603      	mov	r3, r0
 80021c8:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d101      	bne.n	80021d8 <lora_is_transmitting+0x22>
 80021d4:	2305      	movs	r3, #5
 80021d6:	e000      	b.n	80021da <lora_is_transmitting+0x24>
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	4611      	mov	r1, r2
 80021ee:	461a      	mov	r2, r3
 80021f0:	460b      	mov	r3, r1
 80021f2:	71fb      	strb	r3, [r7, #7]
 80021f4:	4613      	mov	r3, r2
 80021f6:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f7ff ffdc 	bl	80021b6 <lora_is_transmitting>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8002204:	2305      	movs	r3, #5
 8002206:	e02a      	b.n	800225e <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8002208:	2101      	movs	r1, #1
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f7ff fe0e 	bl	8001e2c <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 f911 	bl	8002438 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	7d1b      	ldrb	r3, [r3, #20]
 800221a:	461a      	mov	r2, r3
 800221c:	210d      	movs	r1, #13
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f7ff fd49 	bl	8001cb6 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	7d1b      	ldrb	r3, [r3, #20]
 8002228:	461a      	mov	r2, r3
 800222a:	210e      	movs	r1, #14
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f7ff fd42 	bl	8001cb6 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	461a      	mov	r2, r3
 8002236:	2122      	movs	r1, #34	; 0x22
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f7ff fd3c 	bl	8001cb6 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 800223e:	79bb      	ldrb	r3, [r7, #6]
 8002240:	79fa      	ldrb	r2, [r7, #7]
 8002242:	68b9      	ldr	r1, [r7, #8]
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f7ff fd6a 	bl	8001d1e <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 800224a:	79bb      	ldrb	r3, [r7, #6]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <lora_send_packet_base+0x72>
    return LORA_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	e004      	b.n	800225e <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8002254:	2103      	movs	r1, #3
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f7ff fde8 	bl	8001e2c <set_mode>
  return LORA_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	4613      	mov	r3, r2
 8002272:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8002274:	79fa      	ldrb	r2, [r7, #7]
 8002276:	2302      	movs	r3, #2
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f7ff ffb1 	bl	80021e2 <lora_send_packet_base>
 8002280:	4603      	mov	r3, r0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b084      	sub	sp, #16
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 8002292:	2112      	movs	r1, #18
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff fcd7 	bl	8001c48 <read_register>
 800229a:	4603      	mov	r3, r0
 800229c:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022a4:	b2db      	uxtb	r3, r3
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <lora_pending_packet_length>:

uint8_t lora_pending_packet_length(lora_sx1276 *lora)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b084      	sub	sp, #16
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  uint8_t len;

  // Query for current header mode - implicit / explicit
  uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 80022b6:	211d      	movs	r1, #29
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff fcc5 	bl	8001c48 <read_register>
 80022be:	4603      	mov	r3, r0
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	73bb      	strb	r3, [r7, #14]
  if (implicit) {
 80022c6:	7bbb      	ldrb	r3, [r7, #14]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d006      	beq.n	80022da <lora_pending_packet_length+0x2c>
    len = read_register(lora, REG_PAYLOAD_LENGTH);
 80022cc:	2122      	movs	r1, #34	; 0x22
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fcba 	bl	8001c48 <read_register>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	e005      	b.n	80022e6 <lora_pending_packet_length+0x38>
  } else {
    len = read_register(lora, REG_RX_NB_BYTES);
 80022da:	2113      	movs	r1, #19
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff fcb3 	bl	8001c48 <read_register>
 80022e2:	4603      	mov	r3, r0
 80022e4:	73fb      	strb	r3, [r7, #15]
  }

  return len;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <lora_receive_packet_base>:


static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	4613      	mov	r3, r2
 80022fe:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 8002300:	2306      	movs	r3, #6
 8002302:	75fb      	strb	r3, [r7, #23]
  uint8_t len = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	75bb      	strb	r3, [r7, #22]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 8002308:	2112      	movs	r1, #18
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f7ff fc9c 	bl	8001c48 <read_register>
 8002310:	4603      	mov	r3, r0
 8002312:	757b      	strb	r3, [r7, #21]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8002314:	22f0      	movs	r2, #240	; 0xf0
 8002316:	2112      	movs	r1, #18
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f7ff fccc 	bl	8001cb6 <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 800231e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002322:	2b00      	cmp	r3, #0
 8002324:	da02      	bge.n	800232c <lora_receive_packet_base+0x3c>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 8002326:	2302      	movs	r3, #2
 8002328:	75fb      	strb	r3, [r7, #23]
    goto done;
 800232a:	e030      	b.n	800238e <lora_receive_packet_base+0x9e>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 800232c:	7d7b      	ldrb	r3, [r7, #21]
 800232e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d02a      	beq.n	800238c <lora_receive_packet_base+0x9c>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 8002336:	7d7b      	ldrb	r3, [r7, #21]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <lora_receive_packet_base+0x56>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 8002340:	2303      	movs	r3, #3
 8002342:	75fb      	strb	r3, [r7, #23]
      goto done;
 8002344:	e023      	b.n	800238e <lora_receive_packet_base+0x9e>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 8002346:	7d7b      	ldrb	r3, [r7, #21]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <lora_receive_packet_base+0x66>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	75fb      	strb	r3, [r7, #23]
      goto done;
 8002354:	e01b      	b.n	800238e <lora_receive_packet_base+0x9e>
    }
    // Query for current header mode - implicit / explicit
    len = lora_pending_packet_length(lora);
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f7ff ffa9 	bl	80022ae <lora_pending_packet_length>
 800235c:	4603      	mov	r3, r0
 800235e:	75bb      	strb	r3, [r7, #22]
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 8002360:	2110      	movs	r1, #16
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f7ff fc70 	bl	8001c48 <read_register>
 8002368:	4603      	mov	r3, r0
 800236a:	753b      	strb	r3, [r7, #20]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 800236c:	7d3b      	ldrb	r3, [r7, #20]
 800236e:	461a      	mov	r2, r3
 8002370:	210d      	movs	r1, #13
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f7ff fc9f 	bl	8001cb6 <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 8002378:	f897 3020 	ldrb.w	r3, [r7, #32]
 800237c:	7dba      	ldrb	r2, [r7, #22]
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f7ff fd0e 	bl	8001da2 <read_fifo>
    res = LORA_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	75fb      	strb	r3, [r7, #23]
 800238a:	e000      	b.n	800238e <lora_receive_packet_base+0x9e>
  }

done:
 800238c:	bf00      	nop
  if (error) {
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <lora_receive_packet_base+0xaa>
    *error = res;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	7dfa      	ldrb	r2, [r7, #23]
 8002398:	701a      	strb	r2, [r3, #0]
  }

  return len;
 800239a:	7dbb      	ldrb	r3, [r7, #22]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	71fb      	strb	r3, [r7, #7]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 80023b4:	79fa      	ldrb	r2, [r7, #7]
 80023b6:	2302      	movs	r3, #2
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f7ff ff96 	bl	80022f0 <lora_receive_packet_base>
 80023c4:	4603      	mov	r3, r0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	603b      	str	r3, [r7, #0]
 80023da:	4613      	mov	r3, r2
 80023dc:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 80023e2:	e00b      	b.n	80023fc <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f7ff ff50 	bl	800228a <lora_is_packet_available>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10a      	bne.n	8002406 <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 80023f0:	2001      	movs	r0, #1
 80023f2:	f004 f895 	bl	8006520 <HAL_Delay>
    elapsed++;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	3301      	adds	r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d3ef      	bcc.n	80023e4 <lora_receive_packet_blocking+0x16>
 8002404:	e000      	b.n	8002408 <lora_receive_packet_blocking+0x3a>
      break;
 8002406:	bf00      	nop
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 8002408:	79fa      	ldrb	r2, [r7, #7]
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f7ff ffc8 	bl	80023a4 <lora_receive_packet>
 8002414:	4603      	mov	r3, r0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <lora_enable_interrupt_rx_done>:

void lora_enable_interrupt_rx_done(lora_sx1276 *lora)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  // Table 63 DIO Mapping LoRaTM Mode:
  // 00 -> (DIO0 rx_done)
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x00);
 8002426:	2200      	movs	r2, #0
 8002428:	2140      	movs	r1, #64	; 0x40
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff fc43 	bl	8001cb6 <write_register>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8002440:	2208      	movs	r2, #8
 8002442:	2112      	movs	r1, #18
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff fc36 	bl	8001cb6 <write_register>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	887a      	ldrh	r2, [r7, #2]
 8002470:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8002472:	6a3a      	ldr	r2, [r7, #32]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2201      	movs	r2, #1
 800247c:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002490:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7ff fe82 	bl	800219c <lora_version>
 8002498:	4603      	mov	r3, r0
 800249a:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 800249c:	7dfb      	ldrb	r3, [r7, #23]
 800249e:	2b12      	cmp	r3, #18
 80024a0:	d001      	beq.n	80024a6 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 80024a2:	2304      	movs	r3, #4
 80024a4:	e031      	b.n	800250a <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f7ff fd3a 	bl	8001f20 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f7ff fd37 	bl	8001f20 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 80024b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f7ff fdc6 	bl	8002048 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 80024bc:	2107      	movs	r1, #7
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f7ff fe08 	bl	80020d4 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 80024c4:	210a      	movs	r1, #10
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f7ff fe4b 	bl	8002162 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f7ff fd57 	bl	8001f80 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 80024d2:	210c      	movs	r1, #12
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f7ff fbb7 	bl	8001c48 <read_register>
 80024da:	4603      	mov	r3, r0
 80024dc:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 80024de:	7dbb      	ldrb	r3, [r7, #22]
 80024e0:	f043 0303 	orr.w	r3, r3, #3
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	461a      	mov	r2, r3
 80024e8:	210c      	movs	r1, #12
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f7ff fbe3 	bl	8001cb6 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 80024f0:	2204      	movs	r2, #4
 80024f2:	2126      	movs	r1, #38	; 0x26
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f7ff fbde 	bl	8001cb6 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 80024fa:	2111      	movs	r1, #17
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f7ff fd57 	bl	8001fb0 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f7ff fd30 	bl	8001f68 <lora_mode_standby>

  return LORA_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	0000      	movs	r0, r0
 8002514:	0000      	movs	r0, r0
	...

08002518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251a:	b0e1      	sub	sp, #388	; 0x184
 800251c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable DWT
 800251e:	4b5c      	ldr	r3, [pc, #368]	; (8002690 <main+0x178>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	4a5b      	ldr	r2, [pc, #364]	; (8002690 <main+0x178>)
 8002524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002528:	60d3      	str	r3, [r2, #12]
	  DWT->CYCCNT = 0;                                // Clear counter
 800252a:	4b5a      	ldr	r3, [pc, #360]	; (8002694 <main+0x17c>)
 800252c:	2200      	movs	r2, #0
 800252e:	605a      	str	r2, [r3, #4]
	  DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;             // Enable counter
 8002530:	4b58      	ldr	r3, [pc, #352]	; (8002694 <main+0x17c>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002536:	f003 ff7e 	bl	8006436 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800253a:	f000 f9e3 	bl	8002904 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800253e:	f000 fa43 	bl	80029c8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002542:	f001 f8f1 	bl	8003728 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002546:	f000 fa73 	bl	8002a30 <MX_ADC1_Init>
  MX_COMP1_Init();
 800254a:	f000 fad5 	bl	8002af8 <MX_COMP1_Init>
  MX_COMP2_Init();
 800254e:	f000 fb01 	bl	8002b54 <MX_COMP2_Init>
  MX_I2C1_Init();
 8002552:	f000 fb2b 	bl	8002bac <MX_I2C1_Init>
  MX_I2C2_Init();
 8002556:	f000 fb69 	bl	8002c2c <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800255a:	f000 fba7 	bl	8002cac <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 800255e:	f000 fbf1 	bl	8002d44 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002562:	f000 fc3b 	bl	8002ddc <MX_USART3_UART_Init>
  MX_SAI1_Init();
 8002566:	f000 fc85 	bl	8002e74 <MX_SAI1_Init>
  MX_SAI2_Init();
 800256a:	f000 fd1b 	bl	8002fa4 <MX_SAI2_Init>
  MX_SPI3_Init();
 800256e:	f000 fdbf 	bl	80030f0 <MX_SPI3_Init>
  MX_TIM1_Init();
 8002572:	f000 fdfb 	bl	800316c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002576:	f000 feb1 	bl	80032dc <MX_TIM2_Init>
  MX_TIM3_Init();
 800257a:	f000 ff13 	bl	80033a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800257e:	f000 ff77 	bl	8003470 <MX_TIM4_Init>
  MX_TIM15_Init();
 8002582:	f000 ffcf 	bl	8003524 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 8002586:	f001 f8c7 	bl	8003718 <MX_USB_OTG_FS_USB_Init>
  MX_TIM17_Init();
 800258a:	f001 f84f 	bl	800362c <MX_TIM17_Init>
  MX_SPI2_Init();
 800258e:	f000 fd71 	bl	8003074 <MX_SPI2_Init>
//  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);


//  ENABLE_LORA_REPEATEDLY(&lora);
  // IDK why, but the function causes a hard fault, while keeping the loop here is safe
  uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 8002592:	a33d      	add	r3, pc, #244	; (adr r3, 8002688 <main+0x170>)
 8002594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002598:	e9cd 2300 	strd	r2, r3, [sp]
 800259c:	2301      	movs	r3, #1
 800259e:	4a3e      	ldr	r2, [pc, #248]	; (8002698 <main+0x180>)
 80025a0:	493e      	ldr	r1, [pc, #248]	; (800269c <main+0x184>)
 80025a2:	483f      	ldr	r0, [pc, #252]	; (80026a0 <main+0x188>)
 80025a4:	f7ff ff55 	bl	8002452 <lora_init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	 while (res != LORA_OK) {
 80025ae:	e010      	b.n	80025d2 <main+0xba>
	   // Initialization failed
		 HAL_Delay(100);
 80025b0:	2064      	movs	r0, #100	; 0x64
 80025b2:	f003 ffb5 	bl	8006520 <HAL_Delay>
		 res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 80025b6:	a334      	add	r3, pc, #208	; (adr r3, 8002688 <main+0x170>)
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	e9cd 2300 	strd	r2, r3, [sp]
 80025c0:	2301      	movs	r3, #1
 80025c2:	4a35      	ldr	r2, [pc, #212]	; (8002698 <main+0x180>)
 80025c4:	4935      	ldr	r1, [pc, #212]	; (800269c <main+0x184>)
 80025c6:	4836      	ldr	r0, [pc, #216]	; (80026a0 <main+0x188>)
 80025c8:	f7ff ff43 	bl	8002452 <lora_init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	 while (res != LORA_OK) {
 80025d2:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1ea      	bne.n	80025b0 <main+0x98>
	 }
//  uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
//  	     if (res != LORA_OK) {
//  	       // Initialization failed
//  	     }
LCD_init();
 80025da:	f7ff facb 	bl	8001b74 <LCD_init>
lora_enable_interrupt_rx_done(&lora);
 80025de:	4830      	ldr	r0, [pc, #192]	; (80026a0 <main+0x188>)
 80025e0:	f7ff ff1d 	bl	800241e <lora_enable_interrupt_rx_done>
lora_mode_receive_continuous(&lora);
 80025e4:	482e      	ldr	r0, [pc, #184]	; (80026a0 <main+0x188>)
 80025e6:	f7ff fca7 	bl	8001f38 <lora_mode_receive_continuous>
JOYSTICK_INIT(hi2c1);
 80025ea:	4c2e      	ldr	r4, [pc, #184]	; (80026a4 <main+0x18c>)
 80025ec:	4668      	mov	r0, sp
 80025ee:	f104 0310 	add.w	r3, r4, #16
 80025f2:	2244      	movs	r2, #68	; 0x44
 80025f4:	4619      	mov	r1, r3
 80025f6:	f00d fdfa 	bl	80101ee <memcpy>
 80025fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025fe:	f7fe fd09 	bl	8001014 <JOYSTICK_INIT>
TempHum_t data;
initTempHumSensor(&hi2c2);
 8002602:	4829      	ldr	r0, [pc, #164]	; (80026a8 <main+0x190>)
 8002604:	f7fe fc66 	bl	8000ed4 <initTempHumSensor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
// 0 = runner view
// 1 = player 1 view
// 2 = weight and age input view
uint8_t current_viewport = 0; //determines what screen state you are on
 8002608:	2300      	movs	r3, #0
 800260a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
DISPLAY_TIMER_TRIGGERED = 0;
 800260e:	4b27      	ldr	r3, [pc, #156]	; (80026ac <main+0x194>)
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
HAL_TIM_Base_Start_IT(&htim17);
 8002614:	4826      	ldr	r0, [pc, #152]	; (80026b0 <main+0x198>)
 8002616:	f00a fed5 	bl	800d3c4 <HAL_TIM_Base_Start_IT>

// TEMP DATA
float exhaustion = 12;
 800261a:	4b26      	ldr	r3, [pc, #152]	; (80026b4 <main+0x19c>)
 800261c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

// Set this pin ('D' on keypad) low for interrupt
 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8002620:	2200      	movs	r2, #0
 8002622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002626:	4824      	ldr	r0, [pc, #144]	; (80026b8 <main+0x1a0>)
 8002628:	f005 fb8e 	bl	8007d48 <HAL_GPIO_WritePin>
   struct base_to_arm buzzer;

//   armband_data.velocity = 12.3;
//   armband_data.heartrate = 98.54;
//   armband_data.steps = 20000;
   uint16_t player_data_fill_height = 140;
 800262c:	238c      	movs	r3, #140	; 0x8c
 800262e:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
    /* USER CODE BEGIN 3 */
	  // STATE MACHINE HERE
	  // STATES SO FAR: INPUT WEIGHT, DISPLAY RUNNER DATA
	  // Joystick allows user to switch between states

	  uint8_t lr = threshold();
 8002632:	f7fe fd75 	bl	8001120 <threshold>
 8002636:	4603      	mov	r3, r0
 8002638:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
	  // Toggle current_viewport when joystick right
	  if (lr == 2) {
 800263c:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8002640:	2b02      	cmp	r3, #2
 8002642:	d115      	bne.n	8002670 <main+0x158>
		  current_viewport = (current_viewport == 2) ? 2 : 1;
 8002644:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002648:	2b02      	cmp	r3, #2
 800264a:	d101      	bne.n	8002650 <main+0x138>
 800264c:	2302      	movs	r3, #2
 800264e:	e000      	b.n	8002652 <main+0x13a>
 8002650:	2301      	movs	r3, #1
 8002652:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
		  // Clear dirty parts of the screen
		  LCD_Fill(0, 5, 240, player_data_fill_height, C_BLACK);
 8002656:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800265a:	2200      	movs	r2, #0
 800265c:	9200      	str	r2, [sp, #0]
 800265e:	22f0      	movs	r2, #240	; 0xf0
 8002660:	2105      	movs	r1, #5
 8002662:	2000      	movs	r0, #0
 8002664:	f7ff f966 	bl	8001934 <LCD_Fill>
		  //allows for instant transition
		  DISPLAY_TIMER_TRIGGERED = 1;
 8002668:	4b10      	ldr	r3, [pc, #64]	; (80026ac <main+0x194>)
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]
 800266e:	e034      	b.n	80026da <main+0x1c2>
	  }
	  // Toggle current_viewport when joystick left
	  else if(lr == 1){
 8002670:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8002674:	2b01      	cmp	r3, #1
 8002676:	d130      	bne.n	80026da <main+0x1c2>
		  current_viewport = (current_viewport == 2) ? 2 : 0;
 8002678:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800267c:	2b02      	cmp	r3, #2
 800267e:	d11d      	bne.n	80026bc <main+0x1a4>
 8002680:	2302      	movs	r3, #2
 8002682:	e01c      	b.n	80026be <main+0x1a6>
 8002684:	f3af 8000 	nop.w
 8002688:	36e55840 	.word	0x36e55840
 800268c:	00000000 	.word	0x00000000
 8002690:	e000edf0 	.word	0xe000edf0
 8002694:	e0001000 	.word	0xe0001000
 8002698:	48000c00 	.word	0x48000c00
 800269c:	200007d0 	.word	0x200007d0
 80026a0:	20000a60 	.word	0x20000a60
 80026a4:	200003b0 	.word	0x200003b0
 80026a8:	20000404 	.word	0x20000404
 80026ac:	20000a78 	.word	0x20000a78
 80026b0:	20000a14 	.word	0x20000a14
 80026b4:	41400000 	.word	0x41400000
 80026b8:	48001400 	.word	0x48001400
 80026bc:	2300      	movs	r3, #0
 80026be:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
		  // Clear dirty parts of the screen
		  LCD_Fill(0, 5, 240, player_data_fill_height, C_BLACK);
 80026c2:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 80026c6:	2200      	movs	r2, #0
 80026c8:	9200      	str	r2, [sp, #0]
 80026ca:	22f0      	movs	r2, #240	; 0xf0
 80026cc:	2105      	movs	r1, #5
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7ff f930 	bl	8001934 <LCD_Fill>
		  //allows for instant transition
		  DISPLAY_TIMER_TRIGGERED = 1;
 80026d4:	4b82      	ldr	r3, [pc, #520]	; (80028e0 <main+0x3c8>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
	  }

	  if(LoRaRecieve == 1){
 80026da:	4b82      	ldr	r3, [pc, #520]	; (80028e4 <main+0x3cc>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d126      	bne.n	8002730 <main+0x218>
		  //Get data
//		  	  lora_mode_receive_continuous(&lora);
		  	  lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 10000, &res);
 80026e2:	1d39      	adds	r1, r7, #4
 80026e4:	f207 1323 	addw	r3, r7, #291	; 0x123
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80026ee:	2280      	movs	r2, #128	; 0x80
 80026f0:	487d      	ldr	r0, [pc, #500]	; (80028e8 <main+0x3d0>)
 80026f2:	f7ff fe6c 	bl	80023ce <lora_receive_packet_blocking>
		  	  memcpy(&armband_data, &buffer, sizeof(armband_data));
 80026f6:	1d39      	adds	r1, r7, #4
 80026f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80026fc:	2210      	movs	r2, #16
 80026fe:	4618      	mov	r0, r3
 8002700:	f00d fd75 	bl	80101ee <memcpy>
//		  	  if (res != LORA_OK) {
//		  		  // Receive failed
//		  	  }
		  	  res = lora_send_packet(&lora, &buzzer, sizeof(buzzer));
 8002704:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002708:	2201      	movs	r2, #1
 800270a:	4619      	mov	r1, r3
 800270c:	4876      	ldr	r0, [pc, #472]	; (80028e8 <main+0x3d0>)
 800270e:	f7ff fdaa 	bl	8002266 <lora_send_packet>
 8002712:	4603      	mov	r3, r0
 8002714:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
		  	lora_mode_receive_continuous(&lora);
 8002718:	4873      	ldr	r0, [pc, #460]	; (80028e8 <main+0x3d0>)
 800271a:	f7ff fc0d 	bl	8001f38 <lora_mode_receive_continuous>



		  	if (!lora_is_packet_available(&lora))
 800271e:	4872      	ldr	r0, [pc, #456]	; (80028e8 <main+0x3d0>)
 8002720:	f7ff fdb3 	bl	800228a <lora_is_packet_available>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d102      	bne.n	8002730 <main+0x218>
		  		LoRaRecieve = 0;
 800272a:	4b6e      	ldr	r3, [pc, #440]	; (80028e4 <main+0x3cc>)
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
	  }

	  // HOME SCREEN / RUNNER VIEW
	  if (current_viewport == 0 && DISPLAY_TIMER_TRIGGERED == 1) {
 8002730:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002734:	2b00      	cmp	r3, #0
 8002736:	d140      	bne.n	80027ba <main+0x2a2>
 8002738:	4b69      	ldr	r3, [pc, #420]	; (80028e0 <main+0x3c8>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d13c      	bne.n	80027ba <main+0x2a2>
		  UG_FontSetTransparency(1);
 8002740:	2001      	movs	r0, #1
 8002742:	f002 fb95 	bl	8004e70 <UG_FontSetTransparency>
		  data = get_temp_hum();
 8002746:	f7fe fc19 	bl	8000f7c <get_temp_hum>
 800274a:	eeb0 7a40 	vmov.f32	s14, s0
 800274e:	eef0 7a60 	vmov.f32	s15, s1
 8002752:	ed87 7a46 	vstr	s14, [r7, #280]	; 0x118
 8002756:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c

		  // DO THE BELOW ONLY ON TIME INTERVAL
		  LCD_Fill(80, 5, 240, 120, C_BLACK);
 800275a:	2300      	movs	r3, #0
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	2378      	movs	r3, #120	; 0x78
 8002760:	22f0      	movs	r2, #240	; 0xf0
 8002762:	2105      	movs	r1, #5
 8002764:	2050      	movs	r0, #80	; 0x50
 8002766:	f7ff f8e5 	bl	8001934 <LCD_Fill>
		  snprintf(buffer, sizeof(buffer), "Temp: %.3f\nHumid: %.3f", data.temp, data.hum);
 800276a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd ff02 	bl	8000578 <__aeabi_f2d>
 8002774:	4604      	mov	r4, r0
 8002776:	460d      	mov	r5, r1
 8002778:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800277c:	4618      	mov	r0, r3
 800277e:	f7fd fefb 	bl	8000578 <__aeabi_f2d>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	1d38      	adds	r0, r7, #4
 8002788:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800278c:	e9cd 4500 	strd	r4, r5, [sp]
 8002790:	4a56      	ldr	r2, [pc, #344]	; (80028ec <main+0x3d4>)
 8002792:	2180      	movs	r1, #128	; 0x80
 8002794:	f00d fc24 	bl	800ffe0 <sniprintf>
		  LCD_PutStr(5, 5, buffer, DEFAULT_FONT, C_GREEN, C_BLACK);
 8002798:	1d3a      	adds	r2, r7, #4
 800279a:	2300      	movs	r3, #0
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	4b52      	ldr	r3, [pc, #328]	; (80028f0 <main+0x3d8>)
 80027a6:	2105      	movs	r1, #5
 80027a8:	2005      	movs	r0, #5
 80027aa:	f7ff f9a6 	bl	8001afa <LCD_PutStr>
//		  LCD_PutStr(50, 56, "Temp: " + data.temp + "\nHumid: " + data.hum, DEFAULT_FONT, C_GREEN, C_BLACK);
		  // Why the HAL_Delays? don't these only trigger on a timer anyway?
		  HAL_Delay(100);
 80027ae:	2064      	movs	r0, #100	; 0x64
 80027b0:	f003 feb6 	bl	8006520 <HAL_Delay>
		  DISPLAY_TIMER_TRIGGERED = 0;
 80027b4:	4b4a      	ldr	r3, [pc, #296]	; (80028e0 <main+0x3c8>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
	  }
	  // We need an actual interrupt, otherwise can't listen for LoRa
	  if(current_viewport == 1 && KeyPadSelect){
 80027ba:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d106      	bne.n	80027d0 <main+0x2b8>
 80027c2:	4b4c      	ldr	r3, [pc, #304]	; (80028f4 <main+0x3dc>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <main+0x2b8>
		  current_viewport = 2;
 80027ca:	2302      	movs	r3, #2
 80027cc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
//		  while(KeyPadSelect == 1){}
	  }

	  if (current_viewport == 1 && DISPLAY_TIMER_TRIGGERED == 1) {
 80027d0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d148      	bne.n	800286a <main+0x352>
 80027d8:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <main+0x3c8>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d144      	bne.n	800286a <main+0x352>
		  UG_FontSetTransparency(1);
 80027e0:	2001      	movs	r0, #1
 80027e2:	f002 fb45 	bl	8004e70 <UG_FontSetTransparency>
		  //Get the data that will be displayed by each player

//		  LCD_Fill(100, 5, 240, player_data_fill_height, C_BLACK);
		  LCD_PutStr(5, 5, player_write_buffer, DEFAULT_FONT, C_BLACK, C_BLACK);
 80027e6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80027ea:	2300      	movs	r3, #0
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	2300      	movs	r3, #0
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <main+0x3d8>)
 80027f4:	2105      	movs	r1, #5
 80027f6:	2005      	movs	r0, #5
 80027f8:	f7ff f97f 	bl	8001afa <LCD_PutStr>
		  snprintf(player_write_buffer, sizeof(player_write_buffer), "Velocity: %.3f\nHeart Rate: %d\nExhaustion: %.3f\nStep Count: %d",
				  armband_data.velocity, armband_data.heartrate, exhaustion, armband_data.steps);
 80027fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		  snprintf(player_write_buffer, sizeof(player_write_buffer), "Velocity: %.3f\nHeart Rate: %d\nExhaustion: %.3f\nStep Count: %d",
 8002800:	4618      	mov	r0, r3
 8002802:	f7fd feb9 	bl	8000578 <__aeabi_f2d>
 8002806:	4604      	mov	r4, r0
 8002808:	460d      	mov	r5, r1
 800280a:	f8d7 6110 	ldr.w	r6, [r7, #272]	; 0x110
 800280e:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8002812:	f7fd feb1 	bl	8000578 <__aeabi_f2d>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800281e:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8002822:	9106      	str	r1, [sp, #24]
 8002824:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002828:	9602      	str	r6, [sp, #8]
 800282a:	e9cd 4500 	strd	r4, r5, [sp]
 800282e:	4a32      	ldr	r2, [pc, #200]	; (80028f8 <main+0x3e0>)
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	f00d fbd5 	bl	800ffe0 <sniprintf>
		  LCD_PutStr(5, 5, player_write_buffer, DEFAULT_FONT, C_GREEN, C_BLACK);
 8002836:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800283a:	2300      	movs	r3, #0
 800283c:	9301      	str	r3, [sp, #4]
 800283e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	4b2a      	ldr	r3, [pc, #168]	; (80028f0 <main+0x3d8>)
 8002846:	2105      	movs	r1, #5
 8002848:	2005      	movs	r0, #5
 800284a:	f7ff f956 	bl	8001afa <LCD_PutStr>
		  HAL_Delay(100);
 800284e:	2064      	movs	r0, #100	; 0x64
 8002850:	f003 fe66 	bl	8006520 <HAL_Delay>
		  DISPLAY_TIMER_TRIGGERED = 0;
 8002854:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <main+0x3c8>)
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
		  // TESTING BELOW
		  ++exhaustion;
 800285a:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 800285e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002862:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002866:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
	  }


	  // WEIGHT AND AGE INPUT
	  if (current_viewport == 2) {
 800286a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800286e:	2b02      	cmp	r3, #2
 8002870:	d12c      	bne.n	80028cc <main+0x3b4>
		  LCD_Fill(5, 5, 240, player_data_fill_height, C_BLACK);
 8002872:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8002876:	2200      	movs	r2, #0
 8002878:	9200      	str	r2, [sp, #0]
 800287a:	22f0      	movs	r2, #240	; 0xf0
 800287c:	2105      	movs	r1, #5
 800287e:	2005      	movs	r0, #5
 8002880:	f7ff f858 	bl	8001934 <LCD_Fill>
		  while ( HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 8002884:	bf00      	nop
 8002886:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800288a:	481c      	ldr	r0, [pc, #112]	; (80028fc <main+0x3e4>)
 800288c:	f005 fa44 	bl	8007d18 <HAL_GPIO_ReadPin>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f7      	beq.n	8002886 <main+0x36e>
		     }
		  keypad_init();
 8002896:	f7fe fcad 	bl	80011f4 <keypad_init>
		  running();
 800289a:	f7fe fd81 	bl	80013a0 <running>
		  KeyPadSelect = 0;
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <main+0x3dc>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
		  // Go back to runner screen
		  current_viewport = 1;
 80028a4:	2301      	movs	r3, #1
 80028a6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
		  LCD_Fill(5, 5, 160, 40, C_BLACK);
 80028aa:	2300      	movs	r3, #0
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	2328      	movs	r3, #40	; 0x28
 80028b0:	22a0      	movs	r2, #160	; 0xa0
 80028b2:	2105      	movs	r1, #5
 80028b4:	2005      	movs	r0, #5
 80028b6:	f7ff f83d 	bl	8001934 <LCD_Fill>
		  DISPLAY_TIMER_TRIGGERED = 1;
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <main+0x3c8>)
 80028bc:	2201      	movs	r2, #1
 80028be:	701a      	strb	r2, [r3, #0]
		  // Listen to 'D' again
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 80028c0:	2200      	movs	r2, #0
 80028c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028c6:	480e      	ldr	r0, [pc, #56]	; (8002900 <main+0x3e8>)
 80028c8:	f005 fa3e 	bl	8007d48 <HAL_GPIO_WritePin>
//	  //	  UG_Update();
//	  	  LCD_PutStr(50,56, "TESTING", DEFAULT_FONT, C_GREEN, C_BLACK);
//	  	  HAL_Delay(500);


	  heartrate = armband_data.heartrate;
 80028cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80028d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  stepcount = armband_data.steps;
 80028d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  {
 80028dc:	e6a9      	b.n	8002632 <main+0x11a>
 80028de:	bf00      	nop
 80028e0:	20000a78 	.word	0x20000a78
 80028e4:	20000a7a 	.word	0x20000a7a
 80028e8:	20000a60 	.word	0x20000a60
 80028ec:	0801218c 	.word	0x0801218c
 80028f0:	080121e4 	.word	0x080121e4
 80028f4:	20000a79 	.word	0x20000a79
 80028f8:	080121a4 	.word	0x080121a4
 80028fc:	48000c00 	.word	0x48000c00
 8002900:	48001400 	.word	0x48001400

08002904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b096      	sub	sp, #88	; 0x58
 8002908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	2244      	movs	r2, #68	; 0x44
 8002910:	2100      	movs	r1, #0
 8002912:	4618      	mov	r0, r3
 8002914:	f00d fbdb 	bl	80100ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002918:	463b      	mov	r3, r7
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	60da      	str	r2, [r3, #12]
 8002924:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002926:	f44f 7000 	mov.w	r0, #512	; 0x200
 800292a:	f006 f84b 	bl	80089c4 <HAL_PWREx_ControlVoltageScaling>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002934:	f001 f872 	bl	8003a1c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002938:	f006 f814 	bl	8008964 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800293c:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <SystemClock_Config+0xc0>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002942:	4a20      	ldr	r2, [pc, #128]	; (80029c4 <SystemClock_Config+0xc0>)
 8002944:	f023 0318 	bic.w	r3, r3, #24
 8002948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800294c:	2314      	movs	r3, #20
 800294e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002950:	2301      	movs	r3, #1
 8002952:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002954:	2301      	movs	r3, #1
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002958:	2300      	movs	r3, #0
 800295a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800295c:	2360      	movs	r3, #96	; 0x60
 800295e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002960:	2302      	movs	r3, #2
 8002962:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002964:	2301      	movs	r3, #1
 8002966:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002968:	2301      	movs	r3, #1
 800296a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800296c:	2310      	movs	r3, #16
 800296e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002970:	2302      	movs	r3, #2
 8002972:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002974:	2302      	movs	r3, #2
 8002976:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002978:	2302      	movs	r3, #2
 800297a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	4618      	mov	r0, r3
 8002982:	f006 f8d3 	bl	8008b2c <HAL_RCC_OscConfig>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800298c:	f001 f846 	bl	8003a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002990:	230f      	movs	r3, #15
 8002992:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002994:	2303      	movs	r3, #3
 8002996:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002998:	2300      	movs	r3, #0
 800299a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029a0:	2300      	movs	r3, #0
 80029a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029a4:	463b      	mov	r3, r7
 80029a6:	2101      	movs	r1, #1
 80029a8:	4618      	mov	r0, r3
 80029aa:	f006 fcd9 	bl	8009360 <HAL_RCC_ClockConfig>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80029b4:	f001 f832 	bl	8003a1c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80029b8:	f008 f9e2 	bl	800ad80 <HAL_RCCEx_EnableMSIPLLMode>
}
 80029bc:	bf00      	nop
 80029be:	3758      	adds	r7, #88	; 0x58
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000

080029c8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b0a6      	sub	sp, #152	; 0x98
 80029cc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	2294      	movs	r2, #148	; 0x94
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f00d fb7a 	bl	80100ce <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 80029da:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80029de:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80029e0:	2300      	movs	r3, #0
 80029e2:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 80029e4:	2300      	movs	r3, #0
 80029e6:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80029e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80029ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80029f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029f4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80029f6:	2301      	movs	r3, #1
 80029f8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80029fa:	2301      	movs	r3, #1
 80029fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80029fe:	2318      	movs	r3, #24
 8002a00:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002a02:	2302      	movs	r3, #2
 8002a04:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002a06:	2302      	movs	r3, #2
 8002a08:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8002a0e:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <PeriphCommonClock_Config+0x64>)
 8002a10:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	4618      	mov	r0, r3
 8002a16:	f006 ff61 	bl	80098dc <HAL_RCCEx_PeriphCLKConfig>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8002a20:	f000 fffc 	bl	8003a1c <Error_Handler>
  }
}
 8002a24:	bf00      	nop
 8002a26:	3798      	adds	r7, #152	; 0x98
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	01110000 	.word	0x01110000

08002a30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a36:	463b      	mov	r3, r7
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
 8002a44:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002a46:	4b29      	ldr	r3, [pc, #164]	; (8002aec <MX_ADC1_Init+0xbc>)
 8002a48:	4a29      	ldr	r2, [pc, #164]	; (8002af0 <MX_ADC1_Init+0xc0>)
 8002a4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002a4c:	4b27      	ldr	r3, [pc, #156]	; (8002aec <MX_ADC1_Init+0xbc>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a52:	4b26      	ldr	r3, [pc, #152]	; (8002aec <MX_ADC1_Init+0xbc>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a58:	4b24      	ldr	r3, [pc, #144]	; (8002aec <MX_ADC1_Init+0xbc>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a5e:	4b23      	ldr	r3, [pc, #140]	; (8002aec <MX_ADC1_Init+0xbc>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a64:	4b21      	ldr	r3, [pc, #132]	; (8002aec <MX_ADC1_Init+0xbc>)
 8002a66:	2204      	movs	r2, #4
 8002a68:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <MX_ADC1_Init+0xbc>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a70:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <MX_ADC1_Init+0xbc>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <MX_ADC1_Init+0xbc>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <MX_ADC1_Init+0xbc>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <MX_ADC1_Init+0xbc>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <MX_ADC1_Init+0xbc>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a90:	4b16      	ldr	r3, [pc, #88]	; (8002aec <MX_ADC1_Init+0xbc>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002a98:	4b14      	ldr	r3, [pc, #80]	; (8002aec <MX_ADC1_Init+0xbc>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002a9e:	4b13      	ldr	r3, [pc, #76]	; (8002aec <MX_ADC1_Init+0xbc>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002aa6:	4811      	ldr	r0, [pc, #68]	; (8002aec <MX_ADC1_Init+0xbc>)
 8002aa8:	f003 fefe 	bl	80068a8 <HAL_ADC_Init>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002ab2:	f000 ffb3 	bl	8003a1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <MX_ADC1_Init+0xc4>)
 8002ab8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002aba:	2306      	movs	r3, #6
 8002abc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ac2:	237f      	movs	r3, #127	; 0x7f
 8002ac4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ac6:	2304      	movs	r3, #4
 8002ac8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ace:	463b      	mov	r3, r7
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4806      	ldr	r0, [pc, #24]	; (8002aec <MX_ADC1_Init+0xbc>)
 8002ad4:	f004 f82e 	bl	8006b34 <HAL_ADC_ConfigChannel>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002ade:	f000 ff9d 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ae2:	bf00      	nop
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200002f0 	.word	0x200002f0
 8002af0:	50040000 	.word	0x50040000
 8002af4:	04300002 	.word	0x04300002

08002af8 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8002afc:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <MX_COMP1_Init+0x50>)
 8002afe:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <MX_COMP1_Init+0x54>)
 8002b00:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <MX_COMP1_Init+0x50>)
 8002b04:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <MX_COMP1_Init+0x58>)
 8002b06:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002b08:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <MX_COMP1_Init+0x50>)
 8002b0a:	2280      	movs	r2, #128	; 0x80
 8002b0c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <MX_COMP1_Init+0x50>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <MX_COMP1_Init+0x50>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <MX_COMP1_Init+0x50>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <MX_COMP1_Init+0x50>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002b26:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <MX_COMP1_Init+0x50>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <MX_COMP1_Init+0x50>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8002b32:	4805      	ldr	r0, [pc, #20]	; (8002b48 <MX_COMP1_Init+0x50>)
 8002b34:	f004 fca2 	bl	800747c <HAL_COMP_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8002b3e:	f000 ff6d 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000358 	.word	0x20000358
 8002b4c:	40010200 	.word	0x40010200
 8002b50:	00800030 	.word	0x00800030

08002b54 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8002b58:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <MX_COMP2_Init+0x50>)
 8002b5a:	4a13      	ldr	r2, [pc, #76]	; (8002ba8 <MX_COMP2_Init+0x54>)
 8002b5c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8002b5e:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <MX_COMP2_Init+0x50>)
 8002b60:	2270      	movs	r2, #112	; 0x70
 8002b62:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <MX_COMP2_Init+0x50>)
 8002b66:	2280      	movs	r2, #128	; 0x80
 8002b68:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <MX_COMP2_Init+0x50>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <MX_COMP2_Init+0x50>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <MX_COMP2_Init+0x50>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <MX_COMP2_Init+0x50>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <MX_COMP2_Init+0x50>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <MX_COMP2_Init+0x50>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002b8e:	4805      	ldr	r0, [pc, #20]	; (8002ba4 <MX_COMP2_Init+0x50>)
 8002b90:	f004 fc74 	bl	800747c <HAL_COMP_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8002b9a:	f000 ff3f 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000384 	.word	0x20000384
 8002ba8:	40010204 	.word	0x40010204

08002bac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <MX_I2C1_Init+0x74>)
 8002bb2:	4a1c      	ldr	r2, [pc, #112]	; (8002c24 <MX_I2C1_Init+0x78>)
 8002bb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002bb6:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <MX_I2C1_Init+0x74>)
 8002bb8:	4a1b      	ldr	r2, [pc, #108]	; (8002c28 <MX_I2C1_Init+0x7c>)
 8002bba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002bbc:	4b18      	ldr	r3, [pc, #96]	; (8002c20 <MX_I2C1_Init+0x74>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bc2:	4b17      	ldr	r3, [pc, #92]	; (8002c20 <MX_I2C1_Init+0x74>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bc8:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <MX_I2C1_Init+0x74>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002bce:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <MX_I2C1_Init+0x74>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bd4:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <MX_I2C1_Init+0x74>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <MX_I2C1_Init+0x74>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <MX_I2C1_Init+0x74>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002be6:	480e      	ldr	r0, [pc, #56]	; (8002c20 <MX_I2C1_Init+0x74>)
 8002be8:	f005 f8e9 	bl	8007dbe <HAL_I2C_Init>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002bf2:	f000 ff13 	bl	8003a1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4809      	ldr	r0, [pc, #36]	; (8002c20 <MX_I2C1_Init+0x74>)
 8002bfa:	f005 fe1b 	bl	8008834 <HAL_I2CEx_ConfigAnalogFilter>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002c04:	f000 ff0a 	bl	8003a1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4805      	ldr	r0, [pc, #20]	; (8002c20 <MX_I2C1_Init+0x74>)
 8002c0c:	f005 fe5d 	bl	80088ca <HAL_I2CEx_ConfigDigitalFilter>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c16:	f000 ff01 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200003b0 	.word	0x200003b0
 8002c24:	40005400 	.word	0x40005400
 8002c28:	00707cbb 	.word	0x00707cbb

08002c2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <MX_I2C2_Init+0x74>)
 8002c32:	4a1c      	ldr	r2, [pc, #112]	; (8002ca4 <MX_I2C2_Init+0x78>)
 8002c34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8002c36:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <MX_I2C2_Init+0x74>)
 8002c38:	4a1b      	ldr	r2, [pc, #108]	; (8002ca8 <MX_I2C2_Init+0x7c>)
 8002c3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002c3c:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <MX_I2C2_Init+0x74>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c42:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <MX_I2C2_Init+0x74>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c48:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <MX_I2C2_Init+0x74>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <MX_I2C2_Init+0x74>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c54:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <MX_I2C2_Init+0x74>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c5a:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <MX_I2C2_Init+0x74>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <MX_I2C2_Init+0x74>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c66:	480e      	ldr	r0, [pc, #56]	; (8002ca0 <MX_I2C2_Init+0x74>)
 8002c68:	f005 f8a9 	bl	8007dbe <HAL_I2C_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002c72:	f000 fed3 	bl	8003a1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c76:	2100      	movs	r1, #0
 8002c78:	4809      	ldr	r0, [pc, #36]	; (8002ca0 <MX_I2C2_Init+0x74>)
 8002c7a:	f005 fddb 	bl	8008834 <HAL_I2CEx_ConfigAnalogFilter>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002c84:	f000 feca 	bl	8003a1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4805      	ldr	r0, [pc, #20]	; (8002ca0 <MX_I2C2_Init+0x74>)
 8002c8c:	f005 fe1d 	bl	80088ca <HAL_I2CEx_ConfigDigitalFilter>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002c96:	f000 fec1 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000404 	.word	0x20000404
 8002ca4:	40005800 	.word	0x40005800
 8002ca8:	00707cbb 	.word	0x00707cbb

08002cac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002cb0:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cb2:	4a23      	ldr	r2, [pc, #140]	; (8002d40 <MX_LPUART1_UART_Init+0x94>)
 8002cb4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002cb6:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cbc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cbe:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002cca:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cd2:	220c      	movs	r2, #12
 8002cd4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cd6:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cdc:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ce2:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002cee:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002cf4:	4811      	ldr	r0, [pc, #68]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002cf6:	f00b fc9f 	bl	800e638 <HAL_UART_Init>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d00:	f000 fe8c 	bl	8003a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d04:	2100      	movs	r1, #0
 8002d06:	480d      	ldr	r0, [pc, #52]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002d08:	f00c fac4 	bl	800f294 <HAL_UARTEx_SetTxFifoThreshold>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d12:	f000 fe83 	bl	8003a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d16:	2100      	movs	r1, #0
 8002d18:	4808      	ldr	r0, [pc, #32]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002d1a:	f00c faf9 	bl	800f310 <HAL_UARTEx_SetRxFifoThreshold>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d24:	f000 fe7a 	bl	8003a1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002d28:	4804      	ldr	r0, [pc, #16]	; (8002d3c <MX_LPUART1_UART_Init+0x90>)
 8002d2a:	f00c fa7a 	bl	800f222 <HAL_UARTEx_DisableFifoMode>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d34:	f000 fe72 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000458 	.word	0x20000458
 8002d40:	40008000 	.word	0x40008000

08002d44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d48:	4b22      	ldr	r3, [pc, #136]	; (8002dd4 <MX_USART2_UART_Init+0x90>)
 8002d4a:	4a23      	ldr	r2, [pc, #140]	; (8002dd8 <MX_USART2_UART_Init+0x94>)
 8002d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d4e:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <MX_USART2_UART_Init+0x90>)
 8002d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d56:	4b1f      	ldr	r3, [pc, #124]	; (8002dd4 <MX_USART2_UART_Init+0x90>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <MX_USART2_UART_Init+0x90>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d62:	4b1c      	ldr	r3, [pc, #112]	; (8002dd4 <MX_USART2_UART_Init+0x90>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d68:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <MX_USART2_UART_Init+0x90>)
 8002d6a:	220c      	movs	r2, #12
 8002d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6e:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <MX_USART2_UART_Init+0x90>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d74:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <MX_USART2_UART_Init+0x90>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d7a:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <MX_USART2_UART_Init+0x90>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d80:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <MX_USART2_UART_Init+0x90>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <MX_USART2_UART_Init+0x90>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d8c:	4811      	ldr	r0, [pc, #68]	; (8002dd4 <MX_USART2_UART_Init+0x90>)
 8002d8e:	f00b fc53 	bl	800e638 <HAL_UART_Init>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002d98:	f000 fe40 	bl	8003a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	480d      	ldr	r0, [pc, #52]	; (8002dd4 <MX_USART2_UART_Init+0x90>)
 8002da0:	f00c fa78 	bl	800f294 <HAL_UARTEx_SetTxFifoThreshold>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002daa:	f000 fe37 	bl	8003a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dae:	2100      	movs	r1, #0
 8002db0:	4808      	ldr	r0, [pc, #32]	; (8002dd4 <MX_USART2_UART_Init+0x90>)
 8002db2:	f00c faad 	bl	800f310 <HAL_UARTEx_SetRxFifoThreshold>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002dbc:	f000 fe2e 	bl	8003a1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002dc0:	4804      	ldr	r0, [pc, #16]	; (8002dd4 <MX_USART2_UART_Init+0x90>)
 8002dc2:	f00c fa2e 	bl	800f222 <HAL_UARTEx_DisableFifoMode>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002dcc:	f000 fe26 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dd0:	bf00      	nop
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	200004ec 	.word	0x200004ec
 8002dd8:	40004400 	.word	0x40004400

08002ddc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002de0:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <MX_USART3_UART_Init+0x90>)
 8002de2:	4a23      	ldr	r2, [pc, #140]	; (8002e70 <MX_USART3_UART_Init+0x94>)
 8002de4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002de6:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <MX_USART3_UART_Init+0x90>)
 8002de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dee:	4b1f      	ldr	r3, [pc, #124]	; (8002e6c <MX_USART3_UART_Init+0x90>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002df4:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <MX_USART3_UART_Init+0x90>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002dfa:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <MX_USART3_UART_Init+0x90>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e00:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e02:	220c      	movs	r2, #12
 8002e04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e06:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e0c:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e12:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e18:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e1e:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e24:	4811      	ldr	r0, [pc, #68]	; (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e26:	f00b fc07 	bl	800e638 <HAL_UART_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e30:	f000 fdf4 	bl	8003a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e34:	2100      	movs	r1, #0
 8002e36:	480d      	ldr	r0, [pc, #52]	; (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e38:	f00c fa2c 	bl	800f294 <HAL_UARTEx_SetTxFifoThreshold>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e42:	f000 fdeb 	bl	8003a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e46:	2100      	movs	r1, #0
 8002e48:	4808      	ldr	r0, [pc, #32]	; (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e4a:	f00c fa61 	bl	800f310 <HAL_UARTEx_SetRxFifoThreshold>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002e54:	f000 fde2 	bl	8003a1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e58:	4804      	ldr	r0, [pc, #16]	; (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e5a:	f00c f9e2 	bl	800f222 <HAL_UARTEx_DisableFifoMode>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002e64:	f000 fdda 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20000580 	.word	0x20000580
 8002e70:	40004800 	.word	0x40004800

08002e74 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002e78:	4b45      	ldr	r3, [pc, #276]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002e7a:	4a46      	ldr	r2, [pc, #280]	; (8002f94 <MX_SAI1_Init+0x120>)
 8002e7c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002e7e:	4b44      	ldr	r3, [pc, #272]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002e84:	4b42      	ldr	r3, [pc, #264]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8002e8a:	4b41      	ldr	r3, [pc, #260]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002e8c:	2240      	movs	r2, #64	; 0x40
 8002e8e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002e90:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002e96:	4b3e      	ldr	r3, [pc, #248]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002e9c:	4b3c      	ldr	r3, [pc, #240]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002ea2:	4b3b      	ldr	r3, [pc, #236]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002ea8:	4b39      	ldr	r3, [pc, #228]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8002eae:	4b38      	ldr	r3, [pc, #224]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002eb4:	4b36      	ldr	r3, [pc, #216]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002eba:	4b35      	ldr	r3, [pc, #212]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002ebc:	4a36      	ldr	r2, [pc, #216]	; (8002f98 <MX_SAI1_Init+0x124>)
 8002ebe:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002ec0:	4b33      	ldr	r3, [pc, #204]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002ec6:	4b32      	ldr	r3, [pc, #200]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002ecc:	4b30      	ldr	r3, [pc, #192]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002ed2:	4b2f      	ldr	r3, [pc, #188]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8002ed8:	4b2d      	ldr	r3, [pc, #180]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8002ee0:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8002ee6:	4b2a      	ldr	r3, [pc, #168]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eec:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8002eee:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002ef0:	2208      	movs	r2, #8
 8002ef2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8002ef4:	4b26      	ldr	r3, [pc, #152]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002efa:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002f00:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002f06:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8002f0c:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002f12:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8002f18:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8002f1e:	4b1c      	ldr	r3, [pc, #112]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8002f24:	481a      	ldr	r0, [pc, #104]	; (8002f90 <MX_SAI1_Init+0x11c>)
 8002f26:	f008 fa67 	bl	800b3f8 <HAL_SAI_Init>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8002f30:	f000 fd74 	bl	8003a1c <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002f34:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <MX_SAI1_Init+0x128>)
 8002f36:	4a1a      	ldr	r2, [pc, #104]	; (8002fa0 <MX_SAI1_Init+0x12c>)
 8002f38:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002f3a:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <MX_SAI1_Init+0x128>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002f40:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <MX_SAI1_Init+0x128>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002f46:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <MX_SAI1_Init+0x128>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002f4c:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <MX_SAI1_Init+0x128>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002f52:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <MX_SAI1_Init+0x128>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002f58:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <MX_SAI1_Init+0x128>)
 8002f5a:	4a0f      	ldr	r2, [pc, #60]	; (8002f98 <MX_SAI1_Init+0x124>)
 8002f5c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002f5e:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <MX_SAI1_Init+0x128>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002f64:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <MX_SAI1_Init+0x128>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <MX_SAI1_Init+0x128>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002f70:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <MX_SAI1_Init+0x128>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002f76:	2302      	movs	r3, #2
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4807      	ldr	r0, [pc, #28]	; (8002f9c <MX_SAI1_Init+0x128>)
 8002f7e:	f008 fa09 	bl	800b394 <HAL_SAI_InitProtocol>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8002f88:	f000 fd48 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002f8c:	bf00      	nop
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000614 	.word	0x20000614
 8002f94:	40015424 	.word	0x40015424
 8002f98:	0002ee00 	.word	0x0002ee00
 8002f9c:	200006a8 	.word	0x200006a8
 8002fa0:	40015404 	.word	0x40015404

08002fa4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002fa8:	4b2f      	ldr	r3, [pc, #188]	; (8003068 <MX_SAI2_Init+0xc4>)
 8002faa:	4a30      	ldr	r2, [pc, #192]	; (800306c <MX_SAI2_Init+0xc8>)
 8002fac:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002fae:	4b2e      	ldr	r3, [pc, #184]	; (8003068 <MX_SAI2_Init+0xc4>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002fb4:	4b2c      	ldr	r3, [pc, #176]	; (8003068 <MX_SAI2_Init+0xc4>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8002fba:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <MX_SAI2_Init+0xc4>)
 8002fbc:	2240      	movs	r2, #64	; 0x40
 8002fbe:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002fc0:	4b29      	ldr	r3, [pc, #164]	; (8003068 <MX_SAI2_Init+0xc4>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002fc6:	4b28      	ldr	r3, [pc, #160]	; (8003068 <MX_SAI2_Init+0xc4>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002fcc:	4b26      	ldr	r3, [pc, #152]	; (8003068 <MX_SAI2_Init+0xc4>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002fd2:	4b25      	ldr	r3, [pc, #148]	; (8003068 <MX_SAI2_Init+0xc4>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002fd8:	4b23      	ldr	r3, [pc, #140]	; (8003068 <MX_SAI2_Init+0xc4>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <MX_SAI2_Init+0xc4>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002fe4:	4b20      	ldr	r3, [pc, #128]	; (8003068 <MX_SAI2_Init+0xc4>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002fea:	4b1f      	ldr	r3, [pc, #124]	; (8003068 <MX_SAI2_Init+0xc4>)
 8002fec:	4a20      	ldr	r2, [pc, #128]	; (8003070 <MX_SAI2_Init+0xcc>)
 8002fee:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <MX_SAI2_Init+0xc4>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <MX_SAI2_Init+0xc4>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <MX_SAI2_Init+0xc4>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003002:	4b19      	ldr	r3, [pc, #100]	; (8003068 <MX_SAI2_Init+0xc4>)
 8003004:	2200      	movs	r2, #0
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8003008:	4b17      	ldr	r3, [pc, #92]	; (8003068 <MX_SAI2_Init+0xc4>)
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8003010:	4b15      	ldr	r3, [pc, #84]	; (8003068 <MX_SAI2_Init+0xc4>)
 8003012:	2200      	movs	r2, #0
 8003014:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8003016:	4b14      	ldr	r3, [pc, #80]	; (8003068 <MX_SAI2_Init+0xc4>)
 8003018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800301c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <MX_SAI2_Init+0xc4>)
 8003020:	2208      	movs	r2, #8
 8003022:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8003024:	4b10      	ldr	r3, [pc, #64]	; (8003068 <MX_SAI2_Init+0xc4>)
 8003026:	2201      	movs	r2, #1
 8003028:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800302a:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <MX_SAI2_Init+0xc4>)
 800302c:	2200      	movs	r2, #0
 800302e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003030:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <MX_SAI2_Init+0xc4>)
 8003032:	2200      	movs	r2, #0
 8003034:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <MX_SAI2_Init+0xc4>)
 8003038:	2200      	movs	r2, #0
 800303a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800303c:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <MX_SAI2_Init+0xc4>)
 800303e:	2200      	movs	r2, #0
 8003040:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003042:	4b09      	ldr	r3, [pc, #36]	; (8003068 <MX_SAI2_Init+0xc4>)
 8003044:	2200      	movs	r2, #0
 8003046:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8003048:	4b07      	ldr	r3, [pc, #28]	; (8003068 <MX_SAI2_Init+0xc4>)
 800304a:	2201      	movs	r2, #1
 800304c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <MX_SAI2_Init+0xc4>)
 8003050:	2200      	movs	r2, #0
 8003052:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8003054:	4804      	ldr	r0, [pc, #16]	; (8003068 <MX_SAI2_Init+0xc4>)
 8003056:	f008 f9cf 	bl	800b3f8 <HAL_SAI_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8003060:	f000 fcdc 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8003064:	bf00      	nop
 8003066:	bd80      	pop	{r7, pc}
 8003068:	2000073c 	.word	0x2000073c
 800306c:	40015804 	.word	0x40015804
 8003070:	0002ee00 	.word	0x0002ee00

08003074 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003078:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <MX_SPI2_Init+0x74>)
 800307a:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <MX_SPI2_Init+0x78>)
 800307c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800307e:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <MX_SPI2_Init+0x74>)
 8003080:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003084:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003086:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <MX_SPI2_Init+0x74>)
 8003088:	2200      	movs	r2, #0
 800308a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800308c:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <MX_SPI2_Init+0x74>)
 800308e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003092:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003094:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <MX_SPI2_Init+0x74>)
 8003096:	2200      	movs	r2, #0
 8003098:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800309a:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <MX_SPI2_Init+0x74>)
 800309c:	2200      	movs	r2, #0
 800309e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80030a0:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <MX_SPI2_Init+0x74>)
 80030a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80030a8:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <MX_SPI2_Init+0x74>)
 80030aa:	2218      	movs	r2, #24
 80030ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030ae:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <MX_SPI2_Init+0x74>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <MX_SPI2_Init+0x74>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <MX_SPI2_Init+0x74>)
 80030bc:	2200      	movs	r2, #0
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80030c0:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <MX_SPI2_Init+0x74>)
 80030c2:	2207      	movs	r2, #7
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030c6:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <MX_SPI2_Init+0x74>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80030cc:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <MX_SPI2_Init+0x74>)
 80030ce:	2208      	movs	r2, #8
 80030d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80030d2:	4805      	ldr	r0, [pc, #20]	; (80030e8 <MX_SPI2_Init+0x74>)
 80030d4:	f008 fcdc 	bl	800ba90 <HAL_SPI_Init>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80030de:	f000 fc9d 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80030e2:	bf00      	nop
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	200007d0 	.word	0x200007d0
 80030ec:	40003800 	.word	0x40003800

080030f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80030f4:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <MX_SPI3_Init+0x74>)
 80030f6:	4a1c      	ldr	r2, [pc, #112]	; (8003168 <MX_SPI3_Init+0x78>)
 80030f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80030fa:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <MX_SPI3_Init+0x74>)
 80030fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003100:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003102:	4b18      	ldr	r3, [pc, #96]	; (8003164 <MX_SPI3_Init+0x74>)
 8003104:	2200      	movs	r2, #0
 8003106:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003108:	4b16      	ldr	r3, [pc, #88]	; (8003164 <MX_SPI3_Init+0x74>)
 800310a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800310e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003110:	4b14      	ldr	r3, [pc, #80]	; (8003164 <MX_SPI3_Init+0x74>)
 8003112:	2200      	movs	r2, #0
 8003114:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003116:	4b13      	ldr	r3, [pc, #76]	; (8003164 <MX_SPI3_Init+0x74>)
 8003118:	2200      	movs	r2, #0
 800311a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <MX_SPI3_Init+0x74>)
 800311e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003122:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <MX_SPI3_Init+0x74>)
 8003126:	2200      	movs	r2, #0
 8003128:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800312a:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <MX_SPI3_Init+0x74>)
 800312c:	2200      	movs	r2, #0
 800312e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <MX_SPI3_Init+0x74>)
 8003132:	2200      	movs	r2, #0
 8003134:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003136:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <MX_SPI3_Init+0x74>)
 8003138:	2200      	movs	r2, #0
 800313a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <MX_SPI3_Init+0x74>)
 800313e:	2207      	movs	r2, #7
 8003140:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003142:	4b08      	ldr	r3, [pc, #32]	; (8003164 <MX_SPI3_Init+0x74>)
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003148:	4b06      	ldr	r3, [pc, #24]	; (8003164 <MX_SPI3_Init+0x74>)
 800314a:	2208      	movs	r2, #8
 800314c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800314e:	4805      	ldr	r0, [pc, #20]	; (8003164 <MX_SPI3_Init+0x74>)
 8003150:	f008 fc9e 	bl	800ba90 <HAL_SPI_Init>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800315a:	f000 fc5f 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000834 	.word	0x20000834
 8003168:	40003c00 	.word	0x40003c00

0800316c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b098      	sub	sp, #96	; 0x60
 8003170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003172:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800317e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	605a      	str	r2, [r3, #4]
 8003188:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800318a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	605a      	str	r2, [r3, #4]
 8003194:	609a      	str	r2, [r3, #8]
 8003196:	60da      	str	r2, [r3, #12]
 8003198:	611a      	str	r2, [r3, #16]
 800319a:	615a      	str	r2, [r3, #20]
 800319c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800319e:	463b      	mov	r3, r7
 80031a0:	222c      	movs	r2, #44	; 0x2c
 80031a2:	2100      	movs	r1, #0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f00c ff92 	bl	80100ce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031aa:	4b4a      	ldr	r3, [pc, #296]	; (80032d4 <MX_TIM1_Init+0x168>)
 80031ac:	4a4a      	ldr	r2, [pc, #296]	; (80032d8 <MX_TIM1_Init+0x16c>)
 80031ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80031b0:	4b48      	ldr	r3, [pc, #288]	; (80032d4 <MX_TIM1_Init+0x168>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <MX_TIM1_Init+0x168>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80031bc:	4b45      	ldr	r3, [pc, #276]	; (80032d4 <MX_TIM1_Init+0x168>)
 80031be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031c4:	4b43      	ldr	r3, [pc, #268]	; (80032d4 <MX_TIM1_Init+0x168>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031ca:	4b42      	ldr	r3, [pc, #264]	; (80032d4 <MX_TIM1_Init+0x168>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d0:	4b40      	ldr	r3, [pc, #256]	; (80032d4 <MX_TIM1_Init+0x168>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80031d6:	483f      	ldr	r0, [pc, #252]	; (80032d4 <MX_TIM1_Init+0x168>)
 80031d8:	f00a f9c5 	bl	800d566 <HAL_TIM_PWM_Init>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80031e2:	f000 fc1b 	bl	8003a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031e6:	2300      	movs	r3, #0
 80031e8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80031ea:	2300      	movs	r3, #0
 80031ec:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ee:	2300      	movs	r3, #0
 80031f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031f6:	4619      	mov	r1, r3
 80031f8:	4836      	ldr	r0, [pc, #216]	; (80032d4 <MX_TIM1_Init+0x168>)
 80031fa:	f00b f833 	bl	800e264 <HAL_TIMEx_MasterConfigSynchronization>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8003204:	f000 fc0a 	bl	8003a1c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8003208:	2301      	movs	r3, #1
 800320a:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800320c:	2301      	movs	r3, #1
 800320e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8003210:	2300      	movs	r3, #0
 8003212:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8003214:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003218:	461a      	mov	r2, r3
 800321a:	2101      	movs	r1, #1
 800321c:	482d      	ldr	r0, [pc, #180]	; (80032d4 <MX_TIM1_Init+0x168>)
 800321e:	f00b f927 	bl	800e470 <HAL_TIMEx_ConfigBreakInput>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8003228:	f000 fbf8 	bl	8003a1c <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 800322c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003230:	461a      	mov	r2, r3
 8003232:	2102      	movs	r1, #2
 8003234:	4827      	ldr	r0, [pc, #156]	; (80032d4 <MX_TIM1_Init+0x168>)
 8003236:	f00b f91b 	bl	800e470 <HAL_TIMEx_ConfigBreakInput>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8003240:	f000 fbec 	bl	8003a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003244:	2360      	movs	r3, #96	; 0x60
 8003246:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800324c:	2300      	movs	r3, #0
 800324e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003250:	2300      	movs	r3, #0
 8003252:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003254:	2300      	movs	r3, #0
 8003256:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003258:	2300      	movs	r3, #0
 800325a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800325c:	2300      	movs	r3, #0
 800325e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003260:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003264:	2208      	movs	r2, #8
 8003266:	4619      	mov	r1, r3
 8003268:	481a      	ldr	r0, [pc, #104]	; (80032d4 <MX_TIM1_Init+0x168>)
 800326a:	f00a fb4f 	bl	800d90c <HAL_TIM_PWM_ConfigChannel>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8003274:	f000 fbd2 	bl	8003a1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8003278:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800327c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800327e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003282:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003284:	2300      	movs	r3, #0
 8003286:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800328c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003290:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003296:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 800329c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80032a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80032b0:	463b      	mov	r3, r7
 80032b2:	4619      	mov	r1, r3
 80032b4:	4807      	ldr	r0, [pc, #28]	; (80032d4 <MX_TIM1_Init+0x168>)
 80032b6:	f00b f85d 	bl	800e374 <HAL_TIMEx_ConfigBreakDeadTime>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80032c0:	f000 fbac 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80032c4:	4803      	ldr	r0, [pc, #12]	; (80032d4 <MX_TIM1_Init+0x168>)
 80032c6:	f000 ffa9 	bl	800421c <HAL_TIM_MspPostInit>

}
 80032ca:	bf00      	nop
 80032cc:	3760      	adds	r7, #96	; 0x60
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000898 	.word	0x20000898
 80032d8:	40012c00 	.word	0x40012c00

080032dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08a      	sub	sp, #40	; 0x28
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032e2:	f107 031c 	add.w	r3, r7, #28
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	605a      	str	r2, [r3, #4]
 80032ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032ee:	463b      	mov	r3, r7
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
 80032fc:	615a      	str	r2, [r3, #20]
 80032fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003300:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <MX_TIM2_Init+0xc4>)
 8003302:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003306:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003308:	4b25      	ldr	r3, [pc, #148]	; (80033a0 <MX_TIM2_Init+0xc4>)
 800330a:	2200      	movs	r2, #0
 800330c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800330e:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <MX_TIM2_Init+0xc4>)
 8003310:	2200      	movs	r2, #0
 8003312:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003314:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <MX_TIM2_Init+0xc4>)
 8003316:	f04f 32ff 	mov.w	r2, #4294967295
 800331a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800331c:	4b20      	ldr	r3, [pc, #128]	; (80033a0 <MX_TIM2_Init+0xc4>)
 800331e:	2200      	movs	r2, #0
 8003320:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003322:	4b1f      	ldr	r3, [pc, #124]	; (80033a0 <MX_TIM2_Init+0xc4>)
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003328:	481d      	ldr	r0, [pc, #116]	; (80033a0 <MX_TIM2_Init+0xc4>)
 800332a:	f00a f91c 	bl	800d566 <HAL_TIM_PWM_Init>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003334:	f000 fb72 	bl	8003a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003338:	2300      	movs	r3, #0
 800333a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800333c:	2300      	movs	r3, #0
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003340:	f107 031c 	add.w	r3, r7, #28
 8003344:	4619      	mov	r1, r3
 8003346:	4816      	ldr	r0, [pc, #88]	; (80033a0 <MX_TIM2_Init+0xc4>)
 8003348:	f00a ff8c 	bl	800e264 <HAL_TIMEx_MasterConfigSynchronization>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003352:	f000 fb63 	bl	8003a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003356:	2360      	movs	r3, #96	; 0x60
 8003358:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800335e:	2300      	movs	r3, #0
 8003360:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003366:	463b      	mov	r3, r7
 8003368:	2200      	movs	r2, #0
 800336a:	4619      	mov	r1, r3
 800336c:	480c      	ldr	r0, [pc, #48]	; (80033a0 <MX_TIM2_Init+0xc4>)
 800336e:	f00a facd 	bl	800d90c <HAL_TIM_PWM_ConfigChannel>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003378:	f000 fb50 	bl	8003a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800337c:	463b      	mov	r3, r7
 800337e:	2208      	movs	r2, #8
 8003380:	4619      	mov	r1, r3
 8003382:	4807      	ldr	r0, [pc, #28]	; (80033a0 <MX_TIM2_Init+0xc4>)
 8003384:	f00a fac2 	bl	800d90c <HAL_TIM_PWM_ConfigChannel>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800338e:	f000 fb45 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003392:	4803      	ldr	r0, [pc, #12]	; (80033a0 <MX_TIM2_Init+0xc4>)
 8003394:	f000 ff42 	bl	800421c <HAL_TIM_MspPostInit>

}
 8003398:	bf00      	nop
 800339a:	3728      	adds	r7, #40	; 0x28
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	200008e4 	.word	0x200008e4

080033a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	; 0x28
 80033a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033aa:	f107 031c 	add.w	r3, r7, #28
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	605a      	str	r2, [r3, #4]
 80033b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033b6:	463b      	mov	r3, r7
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	611a      	str	r2, [r3, #16]
 80033c4:	615a      	str	r2, [r3, #20]
 80033c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033c8:	4b27      	ldr	r3, [pc, #156]	; (8003468 <MX_TIM3_Init+0xc4>)
 80033ca:	4a28      	ldr	r2, [pc, #160]	; (800346c <MX_TIM3_Init+0xc8>)
 80033cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80033ce:	4b26      	ldr	r3, [pc, #152]	; (8003468 <MX_TIM3_Init+0xc4>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033d4:	4b24      	ldr	r3, [pc, #144]	; (8003468 <MX_TIM3_Init+0xc4>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80033da:	4b23      	ldr	r3, [pc, #140]	; (8003468 <MX_TIM3_Init+0xc4>)
 80033dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033e2:	4b21      	ldr	r3, [pc, #132]	; (8003468 <MX_TIM3_Init+0xc4>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033e8:	4b1f      	ldr	r3, [pc, #124]	; (8003468 <MX_TIM3_Init+0xc4>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80033ee:	481e      	ldr	r0, [pc, #120]	; (8003468 <MX_TIM3_Init+0xc4>)
 80033f0:	f00a f8b9 	bl	800d566 <HAL_TIM_PWM_Init>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80033fa:	f000 fb0f 	bl	8003a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003402:	2300      	movs	r3, #0
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003406:	f107 031c 	add.w	r3, r7, #28
 800340a:	4619      	mov	r1, r3
 800340c:	4816      	ldr	r0, [pc, #88]	; (8003468 <MX_TIM3_Init+0xc4>)
 800340e:	f00a ff29 	bl	800e264 <HAL_TIMEx_MasterConfigSynchronization>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003418:	f000 fb00 	bl	8003a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800341c:	2360      	movs	r3, #96	; 0x60
 800341e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003424:	2300      	movs	r3, #0
 8003426:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003428:	2300      	movs	r3, #0
 800342a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800342c:	463b      	mov	r3, r7
 800342e:	2204      	movs	r2, #4
 8003430:	4619      	mov	r1, r3
 8003432:	480d      	ldr	r0, [pc, #52]	; (8003468 <MX_TIM3_Init+0xc4>)
 8003434:	f00a fa6a 	bl	800d90c <HAL_TIM_PWM_ConfigChannel>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800343e:	f000 faed 	bl	8003a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003442:	463b      	mov	r3, r7
 8003444:	2208      	movs	r2, #8
 8003446:	4619      	mov	r1, r3
 8003448:	4807      	ldr	r0, [pc, #28]	; (8003468 <MX_TIM3_Init+0xc4>)
 800344a:	f00a fa5f 	bl	800d90c <HAL_TIM_PWM_ConfigChannel>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003454:	f000 fae2 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003458:	4803      	ldr	r0, [pc, #12]	; (8003468 <MX_TIM3_Init+0xc4>)
 800345a:	f000 fedf 	bl	800421c <HAL_TIM_MspPostInit>

}
 800345e:	bf00      	nop
 8003460:	3728      	adds	r7, #40	; 0x28
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000930 	.word	0x20000930
 800346c:	40000400 	.word	0x40000400

08003470 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	; 0x28
 8003474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003476:	f107 031c 	add.w	r3, r7, #28
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003482:	463b      	mov	r3, r7
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	60da      	str	r2, [r3, #12]
 800348e:	611a      	str	r2, [r3, #16]
 8003490:	615a      	str	r2, [r3, #20]
 8003492:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003494:	4b21      	ldr	r3, [pc, #132]	; (800351c <MX_TIM4_Init+0xac>)
 8003496:	4a22      	ldr	r2, [pc, #136]	; (8003520 <MX_TIM4_Init+0xb0>)
 8003498:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800349a:	4b20      	ldr	r3, [pc, #128]	; (800351c <MX_TIM4_Init+0xac>)
 800349c:	2200      	movs	r2, #0
 800349e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a0:	4b1e      	ldr	r3, [pc, #120]	; (800351c <MX_TIM4_Init+0xac>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80034a6:	4b1d      	ldr	r3, [pc, #116]	; (800351c <MX_TIM4_Init+0xac>)
 80034a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034ac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ae:	4b1b      	ldr	r3, [pc, #108]	; (800351c <MX_TIM4_Init+0xac>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <MX_TIM4_Init+0xac>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80034ba:	4818      	ldr	r0, [pc, #96]	; (800351c <MX_TIM4_Init+0xac>)
 80034bc:	f00a f853 	bl	800d566 <HAL_TIM_PWM_Init>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80034c6:	f000 faa9 	bl	8003a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80034d2:	f107 031c 	add.w	r3, r7, #28
 80034d6:	4619      	mov	r1, r3
 80034d8:	4810      	ldr	r0, [pc, #64]	; (800351c <MX_TIM4_Init+0xac>)
 80034da:	f00a fec3 	bl	800e264 <HAL_TIMEx_MasterConfigSynchronization>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80034e4:	f000 fa9a 	bl	8003a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034e8:	2360      	movs	r3, #96	; 0x60
 80034ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034f8:	463b      	mov	r3, r7
 80034fa:	220c      	movs	r2, #12
 80034fc:	4619      	mov	r1, r3
 80034fe:	4807      	ldr	r0, [pc, #28]	; (800351c <MX_TIM4_Init+0xac>)
 8003500:	f00a fa04 	bl	800d90c <HAL_TIM_PWM_ConfigChannel>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800350a:	f000 fa87 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800350e:	4803      	ldr	r0, [pc, #12]	; (800351c <MX_TIM4_Init+0xac>)
 8003510:	f000 fe84 	bl	800421c <HAL_TIM_MspPostInit>

}
 8003514:	bf00      	nop
 8003516:	3728      	adds	r7, #40	; 0x28
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	2000097c 	.word	0x2000097c
 8003520:	40000800 	.word	0x40000800

08003524 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b096      	sub	sp, #88	; 0x58
 8003528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800352a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	605a      	str	r2, [r3, #4]
 8003534:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003536:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	609a      	str	r2, [r3, #8]
 8003542:	60da      	str	r2, [r3, #12]
 8003544:	611a      	str	r2, [r3, #16]
 8003546:	615a      	str	r2, [r3, #20]
 8003548:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800354a:	1d3b      	adds	r3, r7, #4
 800354c:	222c      	movs	r2, #44	; 0x2c
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f00c fdbc 	bl	80100ce <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003556:	4b33      	ldr	r3, [pc, #204]	; (8003624 <MX_TIM15_Init+0x100>)
 8003558:	4a33      	ldr	r2, [pc, #204]	; (8003628 <MX_TIM15_Init+0x104>)
 800355a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800355c:	4b31      	ldr	r3, [pc, #196]	; (8003624 <MX_TIM15_Init+0x100>)
 800355e:	2200      	movs	r2, #0
 8003560:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003562:	4b30      	ldr	r3, [pc, #192]	; (8003624 <MX_TIM15_Init+0x100>)
 8003564:	2200      	movs	r2, #0
 8003566:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8003568:	4b2e      	ldr	r3, [pc, #184]	; (8003624 <MX_TIM15_Init+0x100>)
 800356a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800356e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003570:	4b2c      	ldr	r3, [pc, #176]	; (8003624 <MX_TIM15_Init+0x100>)
 8003572:	2200      	movs	r2, #0
 8003574:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003576:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <MX_TIM15_Init+0x100>)
 8003578:	2200      	movs	r2, #0
 800357a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800357c:	4b29      	ldr	r3, [pc, #164]	; (8003624 <MX_TIM15_Init+0x100>)
 800357e:	2200      	movs	r2, #0
 8003580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003582:	4828      	ldr	r0, [pc, #160]	; (8003624 <MX_TIM15_Init+0x100>)
 8003584:	f009 ffef 	bl	800d566 <HAL_TIM_PWM_Init>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800358e:	f000 fa45 	bl	8003a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003592:	2300      	movs	r3, #0
 8003594:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003596:	2300      	movs	r3, #0
 8003598:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800359a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800359e:	4619      	mov	r1, r3
 80035a0:	4820      	ldr	r0, [pc, #128]	; (8003624 <MX_TIM15_Init+0x100>)
 80035a2:	f00a fe5f 	bl	800e264 <HAL_TIMEx_MasterConfigSynchronization>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80035ac:	f000 fa36 	bl	8003a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035b0:	2360      	movs	r3, #96	; 0x60
 80035b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035b8:	2300      	movs	r3, #0
 80035ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035bc:	2300      	movs	r3, #0
 80035be:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035c4:	2300      	movs	r3, #0
 80035c6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035c8:	2300      	movs	r3, #0
 80035ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035d0:	2200      	movs	r2, #0
 80035d2:	4619      	mov	r1, r3
 80035d4:	4813      	ldr	r0, [pc, #76]	; (8003624 <MX_TIM15_Init+0x100>)
 80035d6:	f00a f999 	bl	800d90c <HAL_TIM_PWM_ConfigChannel>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80035e0:	f000 fa1c 	bl	8003a1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80035e4:	2300      	movs	r3, #0
 80035e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80035f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80035fe:	2300      	movs	r3, #0
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003602:	1d3b      	adds	r3, r7, #4
 8003604:	4619      	mov	r1, r3
 8003606:	4807      	ldr	r0, [pc, #28]	; (8003624 <MX_TIM15_Init+0x100>)
 8003608:	f00a feb4 	bl	800e374 <HAL_TIMEx_ConfigBreakDeadTime>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8003612:	f000 fa03 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003616:	4803      	ldr	r0, [pc, #12]	; (8003624 <MX_TIM15_Init+0x100>)
 8003618:	f000 fe00 	bl	800421c <HAL_TIM_MspPostInit>

}
 800361c:	bf00      	nop
 800361e:	3758      	adds	r7, #88	; 0x58
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	200009c8 	.word	0x200009c8
 8003628:	40014000 	.word	0x40014000

0800362c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b092      	sub	sp, #72	; 0x48
 8003630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	605a      	str	r2, [r3, #4]
 800363c:	609a      	str	r2, [r3, #8]
 800363e:	60da      	str	r2, [r3, #12]
 8003640:	611a      	str	r2, [r3, #16]
 8003642:	615a      	str	r2, [r3, #20]
 8003644:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003646:	463b      	mov	r3, r7
 8003648:	222c      	movs	r2, #44	; 0x2c
 800364a:	2100      	movs	r1, #0
 800364c:	4618      	mov	r0, r3
 800364e:	f00c fd3e 	bl	80100ce <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003652:	4b2f      	ldr	r3, [pc, #188]	; (8003710 <MX_TIM17_Init+0xe4>)
 8003654:	4a2f      	ldr	r2, [pc, #188]	; (8003714 <MX_TIM17_Init+0xe8>)
 8003656:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2441;
 8003658:	4b2d      	ldr	r3, [pc, #180]	; (8003710 <MX_TIM17_Init+0xe4>)
 800365a:	f640 1289 	movw	r2, #2441	; 0x989
 800365e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003660:	4b2b      	ldr	r3, [pc, #172]	; (8003710 <MX_TIM17_Init+0xe4>)
 8003662:	2200      	movs	r2, #0
 8003664:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8003666:	4b2a      	ldr	r3, [pc, #168]	; (8003710 <MX_TIM17_Init+0xe4>)
 8003668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800366c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800366e:	4b28      	ldr	r3, [pc, #160]	; (8003710 <MX_TIM17_Init+0xe4>)
 8003670:	2200      	movs	r2, #0
 8003672:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003674:	4b26      	ldr	r3, [pc, #152]	; (8003710 <MX_TIM17_Init+0xe4>)
 8003676:	2200      	movs	r2, #0
 8003678:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800367a:	4b25      	ldr	r3, [pc, #148]	; (8003710 <MX_TIM17_Init+0xe4>)
 800367c:	2200      	movs	r2, #0
 800367e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003680:	4823      	ldr	r0, [pc, #140]	; (8003710 <MX_TIM17_Init+0xe4>)
 8003682:	f009 fe47 	bl	800d314 <HAL_TIM_Base_Init>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 800368c:	f000 f9c6 	bl	8003a1c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8003690:	481f      	ldr	r0, [pc, #124]	; (8003710 <MX_TIM17_Init+0xe4>)
 8003692:	f009 ff07 	bl	800d4a4 <HAL_TIM_OC_Init>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 800369c:	f000 f9be 	bl	8003a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80036a0:	2300      	movs	r3, #0
 80036a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036a8:	2300      	movs	r3, #0
 80036aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80036ac:	2300      	movs	r3, #0
 80036ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80036b4:	2300      	movs	r3, #0
 80036b6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80036b8:	2300      	movs	r3, #0
 80036ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036c0:	2200      	movs	r2, #0
 80036c2:	4619      	mov	r1, r3
 80036c4:	4812      	ldr	r0, [pc, #72]	; (8003710 <MX_TIM17_Init+0xe4>)
 80036c6:	f00a f8a7 	bl	800d818 <HAL_TIM_OC_ConfigChannel>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 80036d0:	f000 f9a4 	bl	8003a1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80036d8:	2300      	movs	r3, #0
 80036da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80036dc:	2300      	movs	r3, #0
 80036de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036e4:	2300      	movs	r3, #0
 80036e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80036f2:	463b      	mov	r3, r7
 80036f4:	4619      	mov	r1, r3
 80036f6:	4806      	ldr	r0, [pc, #24]	; (8003710 <MX_TIM17_Init+0xe4>)
 80036f8:	f00a fe3c 	bl	800e374 <HAL_TIMEx_ConfigBreakDeadTime>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8003702:	f000 f98b 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003706:	bf00      	nop
 8003708:	3748      	adds	r7, #72	; 0x48
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000a14 	.word	0x20000a14
 8003714:	40014800 	.word	0x40014800

08003718 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08e      	sub	sp, #56	; 0x38
 800372c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800372e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	609a      	str	r2, [r3, #8]
 800373a:	60da      	str	r2, [r3, #12]
 800373c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800373e:	4b9e      	ldr	r3, [pc, #632]	; (80039b8 <MX_GPIO_Init+0x290>)
 8003740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003742:	4a9d      	ldr	r2, [pc, #628]	; (80039b8 <MX_GPIO_Init+0x290>)
 8003744:	f043 0310 	orr.w	r3, r3, #16
 8003748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800374a:	4b9b      	ldr	r3, [pc, #620]	; (80039b8 <MX_GPIO_Init+0x290>)
 800374c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	623b      	str	r3, [r7, #32]
 8003754:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003756:	4b98      	ldr	r3, [pc, #608]	; (80039b8 <MX_GPIO_Init+0x290>)
 8003758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375a:	4a97      	ldr	r2, [pc, #604]	; (80039b8 <MX_GPIO_Init+0x290>)
 800375c:	f043 0304 	orr.w	r3, r3, #4
 8003760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003762:	4b95      	ldr	r3, [pc, #596]	; (80039b8 <MX_GPIO_Init+0x290>)
 8003764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	61fb      	str	r3, [r7, #28]
 800376c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800376e:	4b92      	ldr	r3, [pc, #584]	; (80039b8 <MX_GPIO_Init+0x290>)
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	4a91      	ldr	r2, [pc, #580]	; (80039b8 <MX_GPIO_Init+0x290>)
 8003774:	f043 0320 	orr.w	r3, r3, #32
 8003778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800377a:	4b8f      	ldr	r3, [pc, #572]	; (80039b8 <MX_GPIO_Init+0x290>)
 800377c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	61bb      	str	r3, [r7, #24]
 8003784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003786:	4b8c      	ldr	r3, [pc, #560]	; (80039b8 <MX_GPIO_Init+0x290>)
 8003788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378a:	4a8b      	ldr	r2, [pc, #556]	; (80039b8 <MX_GPIO_Init+0x290>)
 800378c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003792:	4b89      	ldr	r3, [pc, #548]	; (80039b8 <MX_GPIO_Init+0x290>)
 8003794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800379e:	4b86      	ldr	r3, [pc, #536]	; (80039b8 <MX_GPIO_Init+0x290>)
 80037a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a2:	4a85      	ldr	r2, [pc, #532]	; (80039b8 <MX_GPIO_Init+0x290>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037aa:	4b83      	ldr	r3, [pc, #524]	; (80039b8 <MX_GPIO_Init+0x290>)
 80037ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b6:	4b80      	ldr	r3, [pc, #512]	; (80039b8 <MX_GPIO_Init+0x290>)
 80037b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ba:	4a7f      	ldr	r2, [pc, #508]	; (80039b8 <MX_GPIO_Init+0x290>)
 80037bc:	f043 0302 	orr.w	r3, r3, #2
 80037c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037c2:	4b7d      	ldr	r3, [pc, #500]	; (80039b8 <MX_GPIO_Init+0x290>)
 80037c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037ce:	4b7a      	ldr	r3, [pc, #488]	; (80039b8 <MX_GPIO_Init+0x290>)
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	4a79      	ldr	r2, [pc, #484]	; (80039b8 <MX_GPIO_Init+0x290>)
 80037d4:	f043 0308 	orr.w	r3, r3, #8
 80037d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037da:	4b77      	ldr	r3, [pc, #476]	; (80039b8 <MX_GPIO_Init+0x290>)
 80037dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80037e6:	4b74      	ldr	r3, [pc, #464]	; (80039b8 <MX_GPIO_Init+0x290>)
 80037e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ea:	4a73      	ldr	r2, [pc, #460]	; (80039b8 <MX_GPIO_Init+0x290>)
 80037ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037f2:	4b71      	ldr	r3, [pc, #452]	; (80039b8 <MX_GPIO_Init+0x290>)
 80037f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fa:	607b      	str	r3, [r7, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80037fe:	f005 f985 	bl	8008b0c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8003802:	2200      	movs	r2, #0
 8003804:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003808:	486c      	ldr	r0, [pc, #432]	; (80039bc <MX_GPIO_Init+0x294>)
 800380a:	f004 fa9d 	bl	8007d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800380e:	2200      	movs	r2, #0
 8003810:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8003814:	486a      	ldr	r0, [pc, #424]	; (80039c0 <MX_GPIO_Init+0x298>)
 8003816:	f004 fa97 	bl	8007d48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 800381a:	2201      	movs	r2, #1
 800381c:	2101      	movs	r1, #1
 800381e:	4869      	ldr	r0, [pc, #420]	; (80039c4 <MX_GPIO_Init+0x29c>)
 8003820:	f004 fa92 	bl	8007d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003824:	2320      	movs	r3, #32
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003828:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	2300      	movs	r3, #0
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003836:	4619      	mov	r1, r3
 8003838:	4860      	ldr	r0, [pc, #384]	; (80039bc <MX_GPIO_Init+0x294>)
 800383a:	f004 f8db 	bl	80079f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800383e:	2310      	movs	r3, #16
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003842:	2302      	movs	r3, #2
 8003844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	2300      	movs	r3, #0
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800384a:	2303      	movs	r3, #3
 800384c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800384e:	2305      	movs	r3, #5
 8003850:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003856:	4619      	mov	r1, r3
 8003858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800385c:	f004 f8ca 	bl	80079f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003860:	23e0      	movs	r3, #224	; 0xe0
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003864:	2300      	movs	r3, #0
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003868:	2301      	movs	r3, #1
 800386a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800386c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003870:	4619      	mov	r1, r3
 8003872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003876:	f004 f8bd 	bl	80079f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800387a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003880:	2311      	movs	r3, #17
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003884:	2300      	movs	r3, #0
 8003886:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003888:	2300      	movs	r3, #0
 800388a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800388c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003890:	4619      	mov	r1, r3
 8003892:	484a      	ldr	r0, [pc, #296]	; (80039bc <MX_GPIO_Init+0x294>)
 8003894:	f004 f8ae 	bl	80079f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8003898:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800389e:	2301      	movs	r3, #1
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038a2:	2301      	movs	r3, #1
 80038a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a6:	2300      	movs	r3, #0
 80038a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ae:	4619      	mov	r1, r3
 80038b0:	4843      	ldr	r0, [pc, #268]	; (80039c0 <MX_GPIO_Init+0x298>)
 80038b2:	f004 f89f 	bl	80079f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80038b6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80038bc:	2311      	movs	r3, #17
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c4:	2300      	movs	r3, #0
 80038c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038cc:	4619      	mov	r1, r3
 80038ce:	483c      	ldr	r0, [pc, #240]	; (80039c0 <MX_GPIO_Init+0x298>)
 80038d0:	f004 f890 	bl	80079f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80038d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80038da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80038de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038e0:	2301      	movs	r3, #1
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038e8:	4619      	mov	r1, r3
 80038ea:	4836      	ldr	r0, [pc, #216]	; (80039c4 <MX_GPIO_Init+0x29c>)
 80038ec:	f004 f882 	bl	80079f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f6:	2302      	movs	r3, #2
 80038f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038fe:	2303      	movs	r3, #3
 8003900:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003902:	230c      	movs	r3, #12
 8003904:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800390a:	4619      	mov	r1, r3
 800390c:	482e      	ldr	r0, [pc, #184]	; (80039c8 <MX_GPIO_Init+0x2a0>)
 800390e:	f004 f871 	bl	80079f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003912:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003918:	2302      	movs	r3, #2
 800391a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391c:	2300      	movs	r3, #0
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003920:	2303      	movs	r3, #3
 8003922:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003924:	230a      	movs	r3, #10
 8003926:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800392c:	4619      	mov	r1, r3
 800392e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003932:	f004 f85f 	bl	80079f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800393c:	2300      	movs	r3, #0
 800393e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003940:	2300      	movs	r3, #0
 8003942:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003948:	4619      	mov	r1, r3
 800394a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800394e:	f004 f851 	bl	80079f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003952:	2301      	movs	r3, #1
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003956:	2301      	movs	r3, #1
 8003958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395a:	2300      	movs	r3, #0
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395e:	2300      	movs	r3, #0
 8003960:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003966:	4619      	mov	r1, r3
 8003968:	4816      	ldr	r0, [pc, #88]	; (80039c4 <MX_GPIO_Init+0x29c>)
 800396a:	f004 f843 	bl	80079f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800396e:	2304      	movs	r3, #4
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003972:	2302      	movs	r3, #2
 8003974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003976:	2300      	movs	r3, #0
 8003978:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800397a:	2303      	movs	r3, #3
 800397c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800397e:	230c      	movs	r3, #12
 8003980:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003986:	4619      	mov	r1, r3
 8003988:	480e      	ldr	r0, [pc, #56]	; (80039c4 <MX_GPIO_Init+0x29c>)
 800398a:	f004 f833 	bl	80079f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800398e:	2200      	movs	r2, #0
 8003990:	2100      	movs	r1, #0
 8003992:	2017      	movs	r0, #23
 8003994:	f003 ff3f 	bl	8007816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003998:	2017      	movs	r0, #23
 800399a:	f003 ff58 	bl	800784e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800399e:	2200      	movs	r2, #0
 80039a0:	2100      	movs	r1, #0
 80039a2:	2028      	movs	r0, #40	; 0x28
 80039a4:	f003 ff37 	bl	8007816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80039a8:	2028      	movs	r0, #40	; 0x28
 80039aa:	f003 ff50 	bl	800784e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80039ae:	bf00      	nop
 80039b0:	3738      	adds	r7, #56	; 0x38
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000
 80039bc:	48001400 	.word	0x48001400
 80039c0:	48001000 	.word	0x48001000
 80039c4:	48000c00 	.word	0x48000c00
 80039c8:	48000800 	.word	0x48000800

080039cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	//check which version of the timer triggered this callback and toggle LED
	if(htim == &htim17){
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a06      	ldr	r2, [pc, #24]	; (80039f0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d102      	bne.n	80039e2 <HAL_TIM_PeriodElapsedCallback+0x16>
		DISPLAY_TIMER_TRIGGERED = 1;
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]
	}
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	20000a14 	.word	0x20000a14
 80039f4:	20000a78 	.word	0x20000a78

080039f8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8003a00:	1d39      	adds	r1, r7, #4
 8003a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a06:	2201      	movs	r2, #1
 8003a08:	4803      	ldr	r0, [pc, #12]	; (8003a18 <__io_putchar+0x20>)
 8003a0a:	f00a fe65 	bl	800e6d8 <HAL_UART_Transmit>
  return ch;
 8003a0e:	687b      	ldr	r3, [r7, #4]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20000458 	.word	0x20000458

08003a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a20:	b672      	cpsid	i
}
 8003a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a24:	e7fe      	b.n	8003a24 <Error_Handler+0x8>
	...

08003a28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2e:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <HAL_MspInit+0x44>)
 8003a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a32:	4a0e      	ldr	r2, [pc, #56]	; (8003a6c <HAL_MspInit+0x44>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	6613      	str	r3, [r2, #96]	; 0x60
 8003a3a:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <HAL_MspInit+0x44>)
 8003a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	607b      	str	r3, [r7, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_MspInit+0x44>)
 8003a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4a:	4a08      	ldr	r2, [pc, #32]	; (8003a6c <HAL_MspInit+0x44>)
 8003a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a50:	6593      	str	r3, [r2, #88]	; 0x58
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <HAL_MspInit+0x44>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40021000 	.word	0x40021000

08003a70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08c      	sub	sp, #48	; 0x30
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a78:	f107 031c 	add.w	r3, r7, #28
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	60da      	str	r2, [r3, #12]
 8003a86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a2d      	ldr	r2, [pc, #180]	; (8003b44 <HAL_ADC_MspInit+0xd4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d154      	bne.n	8003b3c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003a92:	4b2d      	ldr	r3, [pc, #180]	; (8003b48 <HAL_ADC_MspInit+0xd8>)
 8003a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a96:	4a2c      	ldr	r2, [pc, #176]	; (8003b48 <HAL_ADC_MspInit+0xd8>)
 8003a98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a9e:	4b2a      	ldr	r3, [pc, #168]	; (8003b48 <HAL_ADC_MspInit+0xd8>)
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aa6:	61bb      	str	r3, [r7, #24]
 8003aa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aaa:	4b27      	ldr	r3, [pc, #156]	; (8003b48 <HAL_ADC_MspInit+0xd8>)
 8003aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aae:	4a26      	ldr	r2, [pc, #152]	; (8003b48 <HAL_ADC_MspInit+0xd8>)
 8003ab0:	f043 0304 	orr.w	r3, r3, #4
 8003ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ab6:	4b24      	ldr	r3, [pc, #144]	; (8003b48 <HAL_ADC_MspInit+0xd8>)
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac2:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <HAL_ADC_MspInit+0xd8>)
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac6:	4a20      	ldr	r2, [pc, #128]	; (8003b48 <HAL_ADC_MspInit+0xd8>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ace:	4b1e      	ldr	r3, [pc, #120]	; (8003b48 <HAL_ADC_MspInit+0xd8>)
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ada:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <HAL_ADC_MspInit+0xd8>)
 8003adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ade:	4a1a      	ldr	r2, [pc, #104]	; (8003b48 <HAL_ADC_MspInit+0xd8>)
 8003ae0:	f043 0302 	orr.w	r3, r3, #2
 8003ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ae6:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <HAL_ADC_MspInit+0xd8>)
 8003ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8003af2:	233b      	movs	r3, #59	; 0x3b
 8003af4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003af6:	230b      	movs	r3, #11
 8003af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003afe:	f107 031c 	add.w	r3, r7, #28
 8003b02:	4619      	mov	r1, r3
 8003b04:	4811      	ldr	r0, [pc, #68]	; (8003b4c <HAL_ADC_MspInit+0xdc>)
 8003b06:	f003 ff75 	bl	80079f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8003b0a:	230a      	movs	r3, #10
 8003b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003b0e:	230b      	movs	r3, #11
 8003b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b16:	f107 031c 	add.w	r3, r7, #28
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b20:	f003 ff68 	bl	80079f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b24:	2302      	movs	r3, #2
 8003b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003b28:	230b      	movs	r3, #11
 8003b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b30:	f107 031c 	add.w	r3, r7, #28
 8003b34:	4619      	mov	r1, r3
 8003b36:	4806      	ldr	r0, [pc, #24]	; (8003b50 <HAL_ADC_MspInit+0xe0>)
 8003b38:	f003 ff5c 	bl	80079f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b3c:	bf00      	nop
 8003b3e:	3730      	adds	r7, #48	; 0x30
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	50040000 	.word	0x50040000
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	48000800 	.word	0x48000800
 8003b50:	48000400 	.word	0x48000400

08003b54 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	; 0x28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b5c:	f107 0314 	add.w	r3, r7, #20
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	605a      	str	r2, [r3, #4]
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	60da      	str	r2, [r3, #12]
 8003b6a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1e      	ldr	r2, [pc, #120]	; (8003bec <HAL_COMP_MspInit+0x98>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d118      	bne.n	8003ba8 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b76:	4b1e      	ldr	r3, [pc, #120]	; (8003bf0 <HAL_COMP_MspInit+0x9c>)
 8003b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7a:	4a1d      	ldr	r2, [pc, #116]	; (8003bf0 <HAL_COMP_MspInit+0x9c>)
 8003b7c:	f043 0302 	orr.w	r3, r3, #2
 8003b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b82:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <HAL_COMP_MspInit+0x9c>)
 8003b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b8e:	2304      	movs	r3, #4
 8003b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b92:	2303      	movs	r3, #3
 8003b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b9a:	f107 0314 	add.w	r3, r7, #20
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4814      	ldr	r0, [pc, #80]	; (8003bf4 <HAL_COMP_MspInit+0xa0>)
 8003ba2:	f003 ff27 	bl	80079f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8003ba6:	e01c      	b.n	8003be2 <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a12      	ldr	r2, [pc, #72]	; (8003bf8 <HAL_COMP_MspInit+0xa4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d117      	bne.n	8003be2 <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bb2:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <HAL_COMP_MspInit+0x9c>)
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb6:	4a0e      	ldr	r2, [pc, #56]	; (8003bf0 <HAL_COMP_MspInit+0x9c>)
 8003bb8:	f043 0302 	orr.w	r3, r3, #2
 8003bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <HAL_COMP_MspInit+0x9c>)
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bca:	23c0      	movs	r3, #192	; 0xc0
 8003bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd6:	f107 0314 	add.w	r3, r7, #20
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4805      	ldr	r0, [pc, #20]	; (8003bf4 <HAL_COMP_MspInit+0xa0>)
 8003bde:	f003 ff09 	bl	80079f4 <HAL_GPIO_Init>
}
 8003be2:	bf00      	nop
 8003be4:	3728      	adds	r7, #40	; 0x28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40010200 	.word	0x40010200
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	48000400 	.word	0x48000400
 8003bf8:	40010204 	.word	0x40010204

08003bfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b0b0      	sub	sp, #192	; 0xc0
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c04:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	609a      	str	r2, [r3, #8]
 8003c10:	60da      	str	r2, [r3, #12]
 8003c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c14:	f107 0318 	add.w	r3, r7, #24
 8003c18:	2294      	movs	r2, #148	; 0x94
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f00c fa56 	bl	80100ce <memset>
  if(hi2c->Instance==I2C1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a4c      	ldr	r2, [pc, #304]	; (8003d58 <HAL_I2C_MspInit+0x15c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d13c      	bne.n	8003ca6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003c2c:	2340      	movs	r3, #64	; 0x40
 8003c2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003c30:	2300      	movs	r3, #0
 8003c32:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c34:	f107 0318 	add.w	r3, r7, #24
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f005 fe4f 	bl	80098dc <HAL_RCCEx_PeriphCLKConfig>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003c44:	f7ff feea 	bl	8003a1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c48:	4b44      	ldr	r3, [pc, #272]	; (8003d5c <HAL_I2C_MspInit+0x160>)
 8003c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4c:	4a43      	ldr	r2, [pc, #268]	; (8003d5c <HAL_I2C_MspInit+0x160>)
 8003c4e:	f043 0302 	orr.w	r3, r3, #2
 8003c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c54:	4b41      	ldr	r3, [pc, #260]	; (8003d5c <HAL_I2C_MspInit+0x160>)
 8003c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c68:	2312      	movs	r3, #18
 8003c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c74:	2303      	movs	r3, #3
 8003c76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c7a:	2304      	movs	r3, #4
 8003c7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c80:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003c84:	4619      	mov	r1, r3
 8003c86:	4836      	ldr	r0, [pc, #216]	; (8003d60 <HAL_I2C_MspInit+0x164>)
 8003c88:	f003 feb4 	bl	80079f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c8c:	4b33      	ldr	r3, [pc, #204]	; (8003d5c <HAL_I2C_MspInit+0x160>)
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c90:	4a32      	ldr	r2, [pc, #200]	; (8003d5c <HAL_I2C_MspInit+0x160>)
 8003c92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c96:	6593      	str	r3, [r2, #88]	; 0x58
 8003c98:	4b30      	ldr	r3, [pc, #192]	; (8003d5c <HAL_I2C_MspInit+0x160>)
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003ca4:	e054      	b.n	8003d50 <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C2)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2e      	ldr	r2, [pc, #184]	; (8003d64 <HAL_I2C_MspInit+0x168>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d14f      	bne.n	8003d50 <HAL_I2C_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003cb0:	2380      	movs	r3, #128	; 0x80
 8003cb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cb8:	f107 0318 	add.w	r3, r7, #24
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f005 fe0d 	bl	80098dc <HAL_RCCEx_PeriphCLKConfig>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8003cc8:	f7ff fea8 	bl	8003a1c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ccc:	4b23      	ldr	r3, [pc, #140]	; (8003d5c <HAL_I2C_MspInit+0x160>)
 8003cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd0:	4a22      	ldr	r2, [pc, #136]	; (8003d5c <HAL_I2C_MspInit+0x160>)
 8003cd2:	f043 0320 	orr.w	r3, r3, #32
 8003cd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cd8:	4b20      	ldr	r3, [pc, #128]	; (8003d5c <HAL_I2C_MspInit+0x160>)
 8003cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cea:	2312      	movs	r3, #18
 8003cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003cfc:	2304      	movs	r3, #4
 8003cfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003d06:	4619      	mov	r1, r3
 8003d08:	4817      	ldr	r0, [pc, #92]	; (8003d68 <HAL_I2C_MspInit+0x16c>)
 8003d0a:	f003 fe73 	bl	80079f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d0e:	2304      	movs	r3, #4
 8003d10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d14:	2312      	movs	r3, #18
 8003d16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d20:	2303      	movs	r3, #3
 8003d22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d26:	2304      	movs	r3, #4
 8003d28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d2c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003d30:	4619      	mov	r1, r3
 8003d32:	480d      	ldr	r0, [pc, #52]	; (8003d68 <HAL_I2C_MspInit+0x16c>)
 8003d34:	f003 fe5e 	bl	80079f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003d38:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <HAL_I2C_MspInit+0x160>)
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3c:	4a07      	ldr	r2, [pc, #28]	; (8003d5c <HAL_I2C_MspInit+0x160>)
 8003d3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d42:	6593      	str	r3, [r2, #88]	; 0x58
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_I2C_MspInit+0x160>)
 8003d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4c:	60bb      	str	r3, [r7, #8]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
}
 8003d50:	bf00      	nop
 8003d52:	37c0      	adds	r7, #192	; 0xc0
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40005400 	.word	0x40005400
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	48000400 	.word	0x48000400
 8003d64:	40005800 	.word	0x40005800
 8003d68:	48001400 	.word	0x48001400

08003d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b0b2      	sub	sp, #200	; 0xc8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d84:	f107 0320 	add.w	r3, r7, #32
 8003d88:	2294      	movs	r2, #148	; 0x94
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f00c f99e 	bl	80100ce <memset>
  if(huart->Instance==LPUART1)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a64      	ldr	r2, [pc, #400]	; (8003f28 <HAL_UART_MspInit+0x1bc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d13e      	bne.n	8003e1a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003d9c:	2320      	movs	r3, #32
 8003d9e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003da0:	2300      	movs	r3, #0
 8003da2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003da4:	f107 0320 	add.w	r3, r7, #32
 8003da8:	4618      	mov	r0, r3
 8003daa:	f005 fd97 	bl	80098dc <HAL_RCCEx_PeriphCLKConfig>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003db4:	f7ff fe32 	bl	8003a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003db8:	4b5c      	ldr	r3, [pc, #368]	; (8003f2c <HAL_UART_MspInit+0x1c0>)
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	4a5b      	ldr	r2, [pc, #364]	; (8003f2c <HAL_UART_MspInit+0x1c0>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003dc4:	4b59      	ldr	r3, [pc, #356]	; (8003f2c <HAL_UART_MspInit+0x1c0>)
 8003dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	61fb      	str	r3, [r7, #28]
 8003dce:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003dd0:	4b56      	ldr	r3, [pc, #344]	; (8003f2c <HAL_UART_MspInit+0x1c0>)
 8003dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd4:	4a55      	ldr	r2, [pc, #340]	; (8003f2c <HAL_UART_MspInit+0x1c0>)
 8003dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ddc:	4b53      	ldr	r3, [pc, #332]	; (8003f2c <HAL_UART_MspInit+0x1c0>)
 8003dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8003de8:	f004 fe90 	bl	8008b0c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003dec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df4:	2302      	movs	r3, #2
 8003df6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e00:	2303      	movs	r3, #3
 8003e02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003e06:	2308      	movs	r3, #8
 8003e08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e0c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003e10:	4619      	mov	r1, r3
 8003e12:	4847      	ldr	r0, [pc, #284]	; (8003f30 <HAL_UART_MspInit+0x1c4>)
 8003e14:	f003 fdee 	bl	80079f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003e18:	e081      	b.n	8003f1e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a45      	ldr	r2, [pc, #276]	; (8003f34 <HAL_UART_MspInit+0x1c8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d13b      	bne.n	8003e9c <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003e24:	2302      	movs	r3, #2
 8003e26:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e2c:	f107 0320 	add.w	r3, r7, #32
 8003e30:	4618      	mov	r0, r3
 8003e32:	f005 fd53 	bl	80098dc <HAL_RCCEx_PeriphCLKConfig>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8003e3c:	f7ff fdee 	bl	8003a1c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e40:	4b3a      	ldr	r3, [pc, #232]	; (8003f2c <HAL_UART_MspInit+0x1c0>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	4a39      	ldr	r2, [pc, #228]	; (8003f2c <HAL_UART_MspInit+0x1c0>)
 8003e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e4a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e4c:	4b37      	ldr	r3, [pc, #220]	; (8003f2c <HAL_UART_MspInit+0x1c0>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e58:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <HAL_UART_MspInit+0x1c0>)
 8003e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5c:	4a33      	ldr	r2, [pc, #204]	; (8003f2c <HAL_UART_MspInit+0x1c0>)
 8003e5e:	f043 0308 	orr.w	r3, r3, #8
 8003e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e64:	4b31      	ldr	r3, [pc, #196]	; (8003f2c <HAL_UART_MspInit+0x1c0>)
 8003e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003e70:	2360      	movs	r3, #96	; 0x60
 8003e72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e76:	2302      	movs	r3, #2
 8003e78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e82:	2303      	movs	r3, #3
 8003e84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e88:	2307      	movs	r3, #7
 8003e8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e8e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003e92:	4619      	mov	r1, r3
 8003e94:	4828      	ldr	r0, [pc, #160]	; (8003f38 <HAL_UART_MspInit+0x1cc>)
 8003e96:	f003 fdad 	bl	80079f4 <HAL_GPIO_Init>
}
 8003e9a:	e040      	b.n	8003f1e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a26      	ldr	r2, [pc, #152]	; (8003f3c <HAL_UART_MspInit+0x1d0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d13b      	bne.n	8003f1e <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003eae:	f107 0320 	add.w	r3, r7, #32
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f005 fd12 	bl	80098dc <HAL_RCCEx_PeriphCLKConfig>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_UART_MspInit+0x156>
      Error_Handler();
 8003ebe:	f7ff fdad 	bl	8003a1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ec2:	4b1a      	ldr	r3, [pc, #104]	; (8003f2c <HAL_UART_MspInit+0x1c0>)
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	4a19      	ldr	r2, [pc, #100]	; (8003f2c <HAL_UART_MspInit+0x1c0>)
 8003ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8003ece:	4b17      	ldr	r3, [pc, #92]	; (8003f2c <HAL_UART_MspInit+0x1c0>)
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003eda:	4b14      	ldr	r3, [pc, #80]	; (8003f2c <HAL_UART_MspInit+0x1c0>)
 8003edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ede:	4a13      	ldr	r2, [pc, #76]	; (8003f2c <HAL_UART_MspInit+0x1c0>)
 8003ee0:	f043 0308 	orr.w	r3, r3, #8
 8003ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ee6:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <HAL_UART_MspInit+0x1c0>)
 8003ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	60bb      	str	r3, [r7, #8]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003ef2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ef6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003efa:	2302      	movs	r3, #2
 8003efc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f06:	2303      	movs	r3, #3
 8003f08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f0c:	2307      	movs	r3, #7
 8003f0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f12:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f16:	4619      	mov	r1, r3
 8003f18:	4807      	ldr	r0, [pc, #28]	; (8003f38 <HAL_UART_MspInit+0x1cc>)
 8003f1a:	f003 fd6b 	bl	80079f4 <HAL_GPIO_Init>
}
 8003f1e:	bf00      	nop
 8003f20:	37c8      	adds	r7, #200	; 0xc8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40008000 	.word	0x40008000
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	48001800 	.word	0x48001800
 8003f34:	40004400 	.word	0x40004400
 8003f38:	48000c00 	.word	0x48000c00
 8003f3c:	40004800 	.word	0x40004800

08003f40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08c      	sub	sp, #48	; 0x30
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f48:	f107 031c 	add.w	r3, r7, #28
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	60da      	str	r2, [r3, #12]
 8003f56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a3c      	ldr	r2, [pc, #240]	; (8004050 <HAL_SPI_MspInit+0x110>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d144      	bne.n	8003fec <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003f62:	4b3c      	ldr	r3, [pc, #240]	; (8004054 <HAL_SPI_MspInit+0x114>)
 8003f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f66:	4a3b      	ldr	r2, [pc, #236]	; (8004054 <HAL_SPI_MspInit+0x114>)
 8003f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f6e:	4b39      	ldr	r3, [pc, #228]	; (8004054 <HAL_SPI_MspInit+0x114>)
 8003f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f76:	61bb      	str	r3, [r7, #24]
 8003f78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f7a:	4b36      	ldr	r3, [pc, #216]	; (8004054 <HAL_SPI_MspInit+0x114>)
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7e:	4a35      	ldr	r2, [pc, #212]	; (8004054 <HAL_SPI_MspInit+0x114>)
 8003f80:	f043 0304 	orr.w	r3, r3, #4
 8003f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f86:	4b33      	ldr	r3, [pc, #204]	; (8004054 <HAL_SPI_MspInit+0x114>)
 8003f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f92:	4b30      	ldr	r3, [pc, #192]	; (8004054 <HAL_SPI_MspInit+0x114>)
 8003f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f96:	4a2f      	ldr	r2, [pc, #188]	; (8004054 <HAL_SPI_MspInit+0x114>)
 8003f98:	f043 0308 	orr.w	r3, r3, #8
 8003f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f9e:	4b2d      	ldr	r3, [pc, #180]	; (8004054 <HAL_SPI_MspInit+0x114>)
 8003fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003faa:	2304      	movs	r3, #4
 8003fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003fba:	2305      	movs	r3, #5
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fbe:	f107 031c 	add.w	r3, r7, #28
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4824      	ldr	r0, [pc, #144]	; (8004058 <HAL_SPI_MspInit+0x118>)
 8003fc6:	f003 fd15 	bl	80079f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8003fca:	2312      	movs	r3, #18
 8003fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003fda:	2305      	movs	r3, #5
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fde:	f107 031c 	add.w	r3, r7, #28
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	481d      	ldr	r0, [pc, #116]	; (800405c <HAL_SPI_MspInit+0x11c>)
 8003fe6:	f003 fd05 	bl	80079f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003fea:	e02d      	b.n	8004048 <HAL_SPI_MspInit+0x108>
  else if(hspi->Instance==SPI3)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a1b      	ldr	r2, [pc, #108]	; (8004060 <HAL_SPI_MspInit+0x120>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d128      	bne.n	8004048 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003ff6:	4b17      	ldr	r3, [pc, #92]	; (8004054 <HAL_SPI_MspInit+0x114>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	4a16      	ldr	r2, [pc, #88]	; (8004054 <HAL_SPI_MspInit+0x114>)
 8003ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004000:	6593      	str	r3, [r2, #88]	; 0x58
 8004002:	4b14      	ldr	r3, [pc, #80]	; (8004054 <HAL_SPI_MspInit+0x114>)
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800400e:	4b11      	ldr	r3, [pc, #68]	; (8004054 <HAL_SPI_MspInit+0x114>)
 8004010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004012:	4a10      	ldr	r2, [pc, #64]	; (8004054 <HAL_SPI_MspInit+0x114>)
 8004014:	f043 0304 	orr.w	r3, r3, #4
 8004018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800401a:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <HAL_SPI_MspInit+0x114>)
 800401c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004026:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800402a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402c:	2302      	movs	r3, #2
 800402e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004030:	2300      	movs	r3, #0
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004034:	2303      	movs	r3, #3
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004038:	2306      	movs	r3, #6
 800403a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800403c:	f107 031c 	add.w	r3, r7, #28
 8004040:	4619      	mov	r1, r3
 8004042:	4805      	ldr	r0, [pc, #20]	; (8004058 <HAL_SPI_MspInit+0x118>)
 8004044:	f003 fcd6 	bl	80079f4 <HAL_GPIO_Init>
}
 8004048:	bf00      	nop
 800404a:	3730      	adds	r7, #48	; 0x30
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40003800 	.word	0x40003800
 8004054:	40021000 	.word	0x40021000
 8004058:	48000800 	.word	0x48000800
 800405c:	48000c00 	.word	0x48000c00
 8004060:	40003c00 	.word	0x40003c00

08004064 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08e      	sub	sp, #56	; 0x38
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a4d      	ldr	r2, [pc, #308]	; (80041b8 <HAL_TIM_PWM_MspInit+0x154>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d131      	bne.n	80040ea <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004086:	4b4d      	ldr	r3, [pc, #308]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 8004088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408a:	4a4c      	ldr	r2, [pc, #304]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 800408c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004090:	6613      	str	r3, [r2, #96]	; 0x60
 8004092:	4b4a      	ldr	r3, [pc, #296]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 8004094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800409a:	623b      	str	r3, [r7, #32]
 800409c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800409e:	4b47      	ldr	r3, [pc, #284]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 80040a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a2:	4a46      	ldr	r2, [pc, #280]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 80040a4:	f043 0310 	orr.w	r3, r3, #16
 80040a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040aa:	4b44      	ldr	r3, [pc, #272]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 80040ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	61fb      	str	r3, [r7, #28]
 80040b4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80040b6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040bc:	2302      	movs	r3, #2
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c4:	2300      	movs	r3, #0
 80040c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80040c8:	2303      	movs	r3, #3
 80040ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040d0:	4619      	mov	r1, r3
 80040d2:	483b      	ldr	r0, [pc, #236]	; (80041c0 <HAL_TIM_PWM_MspInit+0x15c>)
 80040d4:	f003 fc8e 	bl	80079f4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80040d8:	2200      	movs	r2, #0
 80040da:	2100      	movs	r1, #0
 80040dc:	201a      	movs	r0, #26
 80040de:	f003 fb9a 	bl	8007816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80040e2:	201a      	movs	r0, #26
 80040e4:	f003 fbb3 	bl	800784e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80040e8:	e062      	b.n	80041b0 <HAL_TIM_PWM_MspInit+0x14c>
  else if(htim_pwm->Instance==TIM2)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f2:	d10c      	bne.n	800410e <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040f4:	4b31      	ldr	r3, [pc, #196]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	4a30      	ldr	r2, [pc, #192]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004100:	4b2e      	ldr	r3, [pc, #184]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	61bb      	str	r3, [r7, #24]
 800410a:	69bb      	ldr	r3, [r7, #24]
}
 800410c:	e050      	b.n	80041b0 <HAL_TIM_PWM_MspInit+0x14c>
  else if(htim_pwm->Instance==TIM3)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a2c      	ldr	r2, [pc, #176]	; (80041c4 <HAL_TIM_PWM_MspInit+0x160>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d10c      	bne.n	8004132 <HAL_TIM_PWM_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004118:	4b28      	ldr	r3, [pc, #160]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 800411a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411c:	4a27      	ldr	r2, [pc, #156]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 800411e:	f043 0302 	orr.w	r3, r3, #2
 8004122:	6593      	str	r3, [r2, #88]	; 0x58
 8004124:	4b25      	ldr	r3, [pc, #148]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 8004126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	697b      	ldr	r3, [r7, #20]
}
 8004130:	e03e      	b.n	80041b0 <HAL_TIM_PWM_MspInit+0x14c>
  else if(htim_pwm->Instance==TIM4)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a24      	ldr	r2, [pc, #144]	; (80041c8 <HAL_TIM_PWM_MspInit+0x164>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d128      	bne.n	800418e <HAL_TIM_PWM_MspInit+0x12a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800413c:	4b1f      	ldr	r3, [pc, #124]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 800413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004140:	4a1e      	ldr	r2, [pc, #120]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 8004142:	f043 0304 	orr.w	r3, r3, #4
 8004146:	6593      	str	r3, [r2, #88]	; 0x58
 8004148:	4b1c      	ldr	r3, [pc, #112]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 800414a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004154:	4b19      	ldr	r3, [pc, #100]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 8004156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004158:	4a18      	ldr	r2, [pc, #96]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 800415a:	f043 0310 	orr.w	r3, r3, #16
 800415e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004160:	4b16      	ldr	r3, [pc, #88]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 8004162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800416c:	2301      	movs	r3, #1
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004170:	2302      	movs	r3, #2
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004174:	2300      	movs	r3, #0
 8004176:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004178:	2300      	movs	r3, #0
 800417a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800417c:	2302      	movs	r3, #2
 800417e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004184:	4619      	mov	r1, r3
 8004186:	480e      	ldr	r0, [pc, #56]	; (80041c0 <HAL_TIM_PWM_MspInit+0x15c>)
 8004188:	f003 fc34 	bl	80079f4 <HAL_GPIO_Init>
}
 800418c:	e010      	b.n	80041b0 <HAL_TIM_PWM_MspInit+0x14c>
  else if(htim_pwm->Instance==TIM15)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a0e      	ldr	r2, [pc, #56]	; (80041cc <HAL_TIM_PWM_MspInit+0x168>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d10b      	bne.n	80041b0 <HAL_TIM_PWM_MspInit+0x14c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004198:	4b08      	ldr	r3, [pc, #32]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 800419a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419c:	4a07      	ldr	r2, [pc, #28]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 800419e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a2:	6613      	str	r3, [r2, #96]	; 0x60
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_TIM_PWM_MspInit+0x158>)
 80041a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	68bb      	ldr	r3, [r7, #8]
}
 80041b0:	bf00      	nop
 80041b2:	3738      	adds	r7, #56	; 0x38
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40012c00 	.word	0x40012c00
 80041bc:	40021000 	.word	0x40021000
 80041c0:	48001000 	.word	0x48001000
 80041c4:	40000400 	.word	0x40000400
 80041c8:	40000800 	.word	0x40000800
 80041cc:	40014000 	.word	0x40014000

080041d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a0d      	ldr	r2, [pc, #52]	; (8004214 <HAL_TIM_Base_MspInit+0x44>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d113      	bne.n	800420a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80041e2:	4b0d      	ldr	r3, [pc, #52]	; (8004218 <HAL_TIM_Base_MspInit+0x48>)
 80041e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e6:	4a0c      	ldr	r2, [pc, #48]	; (8004218 <HAL_TIM_Base_MspInit+0x48>)
 80041e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ec:	6613      	str	r3, [r2, #96]	; 0x60
 80041ee:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <HAL_TIM_Base_MspInit+0x48>)
 80041f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80041fa:	2200      	movs	r2, #0
 80041fc:	2100      	movs	r1, #0
 80041fe:	201a      	movs	r0, #26
 8004200:	f003 fb09 	bl	8007816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004204:	201a      	movs	r0, #26
 8004206:	f003 fb22 	bl	800784e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40014800 	.word	0x40014800
 8004218:	40021000 	.word	0x40021000

0800421c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08e      	sub	sp, #56	; 0x38
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	605a      	str	r2, [r3, #4]
 800422e:	609a      	str	r2, [r3, #8]
 8004230:	60da      	str	r2, [r3, #12]
 8004232:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a73      	ldr	r2, [pc, #460]	; (8004408 <HAL_TIM_MspPostInit+0x1ec>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d11d      	bne.n	800427a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800423e:	4b73      	ldr	r3, [pc, #460]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 8004240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004242:	4a72      	ldr	r2, [pc, #456]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 8004244:	f043 0310 	orr.w	r3, r3, #16
 8004248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800424a:	4b70      	ldr	r3, [pc, #448]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 800424c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	623b      	str	r3, [r7, #32]
 8004254:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004256:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425c:	2302      	movs	r3, #2
 800425e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004260:	2300      	movs	r3, #0
 8004262:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004264:	2300      	movs	r3, #0
 8004266:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004268:	2301      	movs	r3, #1
 800426a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800426c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004270:	4619      	mov	r1, r3
 8004272:	4867      	ldr	r0, [pc, #412]	; (8004410 <HAL_TIM_MspPostInit+0x1f4>)
 8004274:	f003 fbbe 	bl	80079f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004278:	e0c2      	b.n	8004400 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004282:	d13a      	bne.n	80042fa <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004284:	4b61      	ldr	r3, [pc, #388]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 8004286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004288:	4a60      	ldr	r2, [pc, #384]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004290:	4b5e      	ldr	r3, [pc, #376]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 8004292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800429c:	4b5b      	ldr	r3, [pc, #364]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 800429e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a0:	4a5a      	ldr	r2, [pc, #360]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 80042a2:	f043 0302 	orr.w	r3, r3, #2
 80042a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042a8:	4b58      	ldr	r3, [pc, #352]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 80042aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80042b4:	2301      	movs	r3, #1
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b8:	2302      	movs	r3, #2
 80042ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042bc:	2300      	movs	r3, #0
 80042be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c0:	2300      	movs	r3, #0
 80042c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042c4:	2301      	movs	r3, #1
 80042c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042cc:	4619      	mov	r1, r3
 80042ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042d2:	f003 fb8f 	bl	80079f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80042d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042dc:	2302      	movs	r3, #2
 80042de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e4:	2300      	movs	r3, #0
 80042e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042e8:	2301      	movs	r3, #1
 80042ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042f0:	4619      	mov	r1, r3
 80042f2:	4848      	ldr	r0, [pc, #288]	; (8004414 <HAL_TIM_MspPostInit+0x1f8>)
 80042f4:	f003 fb7e 	bl	80079f4 <HAL_GPIO_Init>
}
 80042f8:	e082      	b.n	8004400 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a46      	ldr	r2, [pc, #280]	; (8004418 <HAL_TIM_MspPostInit+0x1fc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d138      	bne.n	8004376 <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004304:	4b41      	ldr	r3, [pc, #260]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 8004306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004308:	4a40      	ldr	r2, [pc, #256]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 800430a:	f043 0302 	orr.w	r3, r3, #2
 800430e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004310:	4b3e      	ldr	r3, [pc, #248]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 8004312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800431c:	4b3b      	ldr	r3, [pc, #236]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 800431e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004320:	4a3a      	ldr	r2, [pc, #232]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 8004322:	f043 0304 	orr.w	r3, r3, #4
 8004326:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004328:	4b38      	ldr	r3, [pc, #224]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 800432a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004334:	2301      	movs	r3, #1
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004338:	2302      	movs	r3, #2
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433c:	2300      	movs	r3, #0
 800433e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004340:	2300      	movs	r3, #0
 8004342:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004344:	2302      	movs	r3, #2
 8004346:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800434c:	4619      	mov	r1, r3
 800434e:	4831      	ldr	r0, [pc, #196]	; (8004414 <HAL_TIM_MspPostInit+0x1f8>)
 8004350:	f003 fb50 	bl	80079f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004358:	2302      	movs	r3, #2
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435c:	2300      	movs	r3, #0
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004360:	2300      	movs	r3, #0
 8004362:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004364:	2302      	movs	r3, #2
 8004366:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800436c:	4619      	mov	r1, r3
 800436e:	482b      	ldr	r0, [pc, #172]	; (800441c <HAL_TIM_MspPostInit+0x200>)
 8004370:	f003 fb40 	bl	80079f4 <HAL_GPIO_Init>
}
 8004374:	e044      	b.n	8004400 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a29      	ldr	r2, [pc, #164]	; (8004420 <HAL_TIM_MspPostInit+0x204>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d11d      	bne.n	80043bc <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004380:	4b22      	ldr	r3, [pc, #136]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 8004382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004384:	4a21      	ldr	r2, [pc, #132]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 8004386:	f043 0308 	orr.w	r3, r3, #8
 800438a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800438c:	4b1f      	ldr	r3, [pc, #124]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 800438e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800439e:	2302      	movs	r3, #2
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a6:	2300      	movs	r3, #0
 80043a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80043aa:	2302      	movs	r3, #2
 80043ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043b2:	4619      	mov	r1, r3
 80043b4:	481b      	ldr	r0, [pc, #108]	; (8004424 <HAL_TIM_MspPostInit+0x208>)
 80043b6:	f003 fb1d 	bl	80079f4 <HAL_GPIO_Init>
}
 80043ba:	e021      	b.n	8004400 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a19      	ldr	r2, [pc, #100]	; (8004428 <HAL_TIM_MspPostInit+0x20c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d11c      	bne.n	8004400 <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043c6:	4b11      	ldr	r3, [pc, #68]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 80043c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ca:	4a10      	ldr	r2, [pc, #64]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 80043cc:	f043 0302 	orr.w	r3, r3, #2
 80043d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043d2:	4b0e      	ldr	r3, [pc, #56]	; (800440c <HAL_TIM_MspPostInit+0x1f0>)
 80043d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	60bb      	str	r3, [r7, #8]
 80043dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80043de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e4:	2302      	movs	r3, #2
 80043e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ec:	2300      	movs	r3, #0
 80043ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80043f0:	230e      	movs	r3, #14
 80043f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043f8:	4619      	mov	r1, r3
 80043fa:	4806      	ldr	r0, [pc, #24]	; (8004414 <HAL_TIM_MspPostInit+0x1f8>)
 80043fc:	f003 fafa 	bl	80079f4 <HAL_GPIO_Init>
}
 8004400:	bf00      	nop
 8004402:	3738      	adds	r7, #56	; 0x38
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40012c00 	.word	0x40012c00
 800440c:	40021000 	.word	0x40021000
 8004410:	48001000 	.word	0x48001000
 8004414:	48000400 	.word	0x48000400
 8004418:	40000400 	.word	0x40000400
 800441c:	48000800 	.word	0x48000800
 8004420:	40000800 	.word	0x40000800
 8004424:	48000c00 	.word	0x48000c00
 8004428:	40014000 	.word	0x40014000

0800442c <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a50      	ldr	r2, [pc, #320]	; (800457c <HAL_SAI_MspInit+0x150>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d124      	bne.n	8004488 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800443e:	4b50      	ldr	r3, [pc, #320]	; (8004580 <HAL_SAI_MspInit+0x154>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10b      	bne.n	800445e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8004446:	4b4f      	ldr	r3, [pc, #316]	; (8004584 <HAL_SAI_MspInit+0x158>)
 8004448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444a:	4a4e      	ldr	r2, [pc, #312]	; (8004584 <HAL_SAI_MspInit+0x158>)
 800444c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004450:	6613      	str	r3, [r2, #96]	; 0x60
 8004452:	4b4c      	ldr	r3, [pc, #304]	; (8004584 <HAL_SAI_MspInit+0x158>)
 8004454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004456:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800445e:	4b48      	ldr	r3, [pc, #288]	; (8004580 <HAL_SAI_MspInit+0x154>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3301      	adds	r3, #1
 8004464:	4a46      	ldr	r2, [pc, #280]	; (8004580 <HAL_SAI_MspInit+0x154>)
 8004466:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004468:	2374      	movs	r3, #116	; 0x74
 800446a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446c:	2302      	movs	r3, #2
 800446e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004470:	2300      	movs	r3, #0
 8004472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004474:	2300      	movs	r3, #0
 8004476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004478:	230d      	movs	r3, #13
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800447c:	f107 0314 	add.w	r3, r7, #20
 8004480:	4619      	mov	r1, r3
 8004482:	4841      	ldr	r0, [pc, #260]	; (8004588 <HAL_SAI_MspInit+0x15c>)
 8004484:	f003 fab6 	bl	80079f4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a3f      	ldr	r2, [pc, #252]	; (800458c <HAL_SAI_MspInit+0x160>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d135      	bne.n	80044fe <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8004492:	4b3b      	ldr	r3, [pc, #236]	; (8004580 <HAL_SAI_MspInit+0x154>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10b      	bne.n	80044b2 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800449a:	4b3a      	ldr	r3, [pc, #232]	; (8004584 <HAL_SAI_MspInit+0x158>)
 800449c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800449e:	4a39      	ldr	r2, [pc, #228]	; (8004584 <HAL_SAI_MspInit+0x158>)
 80044a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044a4:	6613      	str	r3, [r2, #96]	; 0x60
 80044a6:	4b37      	ldr	r3, [pc, #220]	; (8004584 <HAL_SAI_MspInit+0x158>)
 80044a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80044b2:	4b33      	ldr	r3, [pc, #204]	; (8004580 <HAL_SAI_MspInit+0x154>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3301      	adds	r3, #1
 80044b8:	4a31      	ldr	r2, [pc, #196]	; (8004580 <HAL_SAI_MspInit+0x154>)
 80044ba:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044bc:	2308      	movs	r3, #8
 80044be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c0:	2302      	movs	r3, #2
 80044c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c8:	2300      	movs	r3, #0
 80044ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80044cc:	230d      	movs	r3, #13
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044d0:	f107 0314 	add.w	r3, r7, #20
 80044d4:	4619      	mov	r1, r3
 80044d6:	482c      	ldr	r0, [pc, #176]	; (8004588 <HAL_SAI_MspInit+0x15c>)
 80044d8:	f003 fa8c 	bl	80079f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80044dc:	f44f 7360 	mov.w	r3, #896	; 0x380
 80044e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e2:	2302      	movs	r3, #2
 80044e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ea:	2300      	movs	r3, #0
 80044ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80044ee:	230d      	movs	r3, #13
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044f2:	f107 0314 	add.w	r3, r7, #20
 80044f6:	4619      	mov	r1, r3
 80044f8:	4825      	ldr	r0, [pc, #148]	; (8004590 <HAL_SAI_MspInit+0x164>)
 80044fa:	f003 fa7b 	bl	80079f4 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a24      	ldr	r2, [pc, #144]	; (8004594 <HAL_SAI_MspInit+0x168>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d135      	bne.n	8004574 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8004508:	4b23      	ldr	r3, [pc, #140]	; (8004598 <HAL_SAI_MspInit+0x16c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10b      	bne.n	8004528 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004510:	4b1c      	ldr	r3, [pc, #112]	; (8004584 <HAL_SAI_MspInit+0x158>)
 8004512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004514:	4a1b      	ldr	r2, [pc, #108]	; (8004584 <HAL_SAI_MspInit+0x158>)
 8004516:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800451a:	6613      	str	r3, [r2, #96]	; 0x60
 800451c:	4b19      	ldr	r3, [pc, #100]	; (8004584 <HAL_SAI_MspInit+0x158>)
 800451e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004524:	60bb      	str	r3, [r7, #8]
 8004526:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8004528:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <HAL_SAI_MspInit+0x16c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	4a1a      	ldr	r2, [pc, #104]	; (8004598 <HAL_SAI_MspInit+0x16c>)
 8004530:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8004532:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8004536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004538:	2302      	movs	r3, #2
 800453a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453c:	2300      	movs	r3, #0
 800453e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004540:	2300      	movs	r3, #0
 8004542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8004544:	230d      	movs	r3, #13
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004548:	f107 0314 	add.w	r3, r7, #20
 800454c:	4619      	mov	r1, r3
 800454e:	4813      	ldr	r0, [pc, #76]	; (800459c <HAL_SAI_MspInit+0x170>)
 8004550:	f003 fa50 	bl	80079f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004554:	2340      	movs	r3, #64	; 0x40
 8004556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004558:	2302      	movs	r3, #2
 800455a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455c:	2300      	movs	r3, #0
 800455e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004560:	2300      	movs	r3, #0
 8004562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8004564:	230d      	movs	r3, #13
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004568:	f107 0314 	add.w	r3, r7, #20
 800456c:	4619      	mov	r1, r3
 800456e:	480c      	ldr	r0, [pc, #48]	; (80045a0 <HAL_SAI_MspInit+0x174>)
 8004570:	f003 fa40 	bl	80079f4 <HAL_GPIO_Init>

    }
}
 8004574:	bf00      	nop
 8004576:	3728      	adds	r7, #40	; 0x28
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40015404 	.word	0x40015404
 8004580:	20000a7c 	.word	0x20000a7c
 8004584:	40021000 	.word	0x40021000
 8004588:	48001000 	.word	0x48001000
 800458c:	40015424 	.word	0x40015424
 8004590:	48001400 	.word	0x48001400
 8004594:	40015804 	.word	0x40015804
 8004598:	20000a80 	.word	0x20000a80
 800459c:	48000400 	.word	0x48000400
 80045a0:	48000800 	.word	0x48000800

080045a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80045a8:	e7fe      	b.n	80045a8 <NMI_Handler+0x4>

080045aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045aa:	b480      	push	{r7}
 80045ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045ae:	e7fe      	b.n	80045ae <HardFault_Handler+0x4>

080045b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045b4:	e7fe      	b.n	80045b4 <MemManage_Handler+0x4>

080045b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045b6:	b480      	push	{r7}
 80045b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045ba:	e7fe      	b.n	80045ba <BusFault_Handler+0x4>

080045bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045c0:	e7fe      	b.n	80045c0 <UsageFault_Handler+0x4>

080045c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045c2:	b480      	push	{r7}
 80045c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045c6:	bf00      	nop
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045d4:	bf00      	nop
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045de:	b480      	push	{r7}
 80045e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045e2:	bf00      	nop
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045f0:	f001 ff76 	bl	80064e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045f4:	bf00      	nop
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80045fc:	2020      	movs	r0, #32
 80045fe:	f003 fbbb 	bl	8007d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  LoRaRecieve = 1;
 8004602:	4b02      	ldr	r3, [pc, #8]	; (800460c <EXTI9_5_IRQHandler+0x14>)
 8004604:	2201      	movs	r2, #1
 8004606:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004608:	bf00      	nop
 800460a:	bd80      	pop	{r7, pc}
 800460c:	20000a7a 	.word	0x20000a7a

08004610 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004614:	4803      	ldr	r0, [pc, #12]	; (8004624 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8004616:	f008 fffd 	bl	800d614 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800461a:	4803      	ldr	r0, [pc, #12]	; (8004628 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 800461c:	f008 fffa 	bl	800d614 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8004620:	bf00      	nop
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20000898 	.word	0x20000898
 8004628:	20000a14 	.word	0x20000a14

0800462c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004630:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004634:	f003 fba0 	bl	8007d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  KeyPadSelect = 1;
 8004638:	4b02      	ldr	r3, [pc, #8]	; (8004644 <EXTI15_10_IRQHandler+0x18>)
 800463a:	2201      	movs	r2, #1
 800463c:	701a      	strb	r2, [r3, #0]


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800463e:	bf00      	nop
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000a79 	.word	0x20000a79

08004648 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return 1;
 800464c:	2301      	movs	r3, #1
}
 800464e:	4618      	mov	r0, r3
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <_kill>:

int _kill(int pid, int sig)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004662:	f00b fd97 	bl	8010194 <__errno>
 8004666:	4603      	mov	r3, r0
 8004668:	2216      	movs	r2, #22
 800466a:	601a      	str	r2, [r3, #0]
  return -1;
 800466c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <_exit>:

void _exit (int status)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004680:	f04f 31ff 	mov.w	r1, #4294967295
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff ffe7 	bl	8004658 <_kill>
  while (1) {}    /* Make sure we hang here */
 800468a:	e7fe      	b.n	800468a <_exit+0x12>

0800468c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	e00a      	b.n	80046b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800469e:	f3af 8000 	nop.w
 80046a2:	4601      	mov	r1, r0
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	60ba      	str	r2, [r7, #8]
 80046aa:	b2ca      	uxtb	r2, r1
 80046ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	3301      	adds	r3, #1
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	dbf0      	blt.n	800469e <_read+0x12>
  }

  return len;
 80046bc:	687b      	ldr	r3, [r7, #4]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b086      	sub	sp, #24
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	60f8      	str	r0, [r7, #12]
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e009      	b.n	80046ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	60ba      	str	r2, [r7, #8]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff f989 	bl	80039f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	3301      	adds	r3, #1
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	dbf1      	blt.n	80046d8 <_write+0x12>
  }
  return len;
 80046f4:	687b      	ldr	r3, [r7, #4]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <_close>:

int _close(int file)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004706:	f04f 33ff 	mov.w	r3, #4294967295
}
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004726:	605a      	str	r2, [r3, #4]
  return 0;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <_isatty>:

int _isatty(int file)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800473e:	2301      	movs	r3, #1
}
 8004740:	4618      	mov	r0, r3
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004770:	4a14      	ldr	r2, [pc, #80]	; (80047c4 <_sbrk+0x5c>)
 8004772:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <_sbrk+0x60>)
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800477c:	4b13      	ldr	r3, [pc, #76]	; (80047cc <_sbrk+0x64>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d102      	bne.n	800478a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004784:	4b11      	ldr	r3, [pc, #68]	; (80047cc <_sbrk+0x64>)
 8004786:	4a12      	ldr	r2, [pc, #72]	; (80047d0 <_sbrk+0x68>)
 8004788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800478a:	4b10      	ldr	r3, [pc, #64]	; (80047cc <_sbrk+0x64>)
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4413      	add	r3, r2
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	429a      	cmp	r2, r3
 8004796:	d207      	bcs.n	80047a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004798:	f00b fcfc 	bl	8010194 <__errno>
 800479c:	4603      	mov	r3, r0
 800479e:	220c      	movs	r2, #12
 80047a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047a2:	f04f 33ff 	mov.w	r3, #4294967295
 80047a6:	e009      	b.n	80047bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047a8:	4b08      	ldr	r3, [pc, #32]	; (80047cc <_sbrk+0x64>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047ae:	4b07      	ldr	r3, [pc, #28]	; (80047cc <_sbrk+0x64>)
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4413      	add	r3, r2
 80047b6:	4a05      	ldr	r2, [pc, #20]	; (80047cc <_sbrk+0x64>)
 80047b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047ba:	68fb      	ldr	r3, [r7, #12]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	200a0000 	.word	0x200a0000
 80047c8:	00000400 	.word	0x00000400
 80047cc:	20000a84 	.word	0x20000a84
 80047d0:	20000bf8 	.word	0x20000bf8

080047d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <SystemInit+0x20>)
 80047da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047de:	4a05      	ldr	r2, [pc, #20]	; (80047f4 <SystemInit+0x20>)
 80047e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80047e8:	bf00      	nop
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	e000ed00 	.word	0xe000ed00

080047f8 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	607a      	str	r2, [r7, #4]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 800480a:	89fb      	ldrh	r3, [r7, #14]
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	b21a      	sxth	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	b21b      	sxth	r3, r3
 8004816:	4313      	orrs	r3, r2
 8004818:	b21b      	sxth	r3, r3
 800481a:	b29b      	uxth	r3, r3
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2204      	movs	r2, #4
 800483c:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2204      	movs	r2, #4
 8004842:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800484c:	b29a      	uxth	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004854:	b29b      	uxth	r3, r3
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	b29b      	uxth	r3, r3
 800485e:	b21a      	sxth	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800486c:	b29a      	uxth	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004874:	b29b      	uxth	r3, r3
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	b29b      	uxth	r3, r3
 800487a:	3b01      	subs	r3, #1
 800487c:	b29b      	uxth	r3, r3
 800487e:	b21a      	sxth	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f645 425d 	movw	r2, #23645	; 0x5c5d
 80048ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004916:	2300      	movs	r3, #0
 8004918:	73fb      	strb	r3, [r7, #15]
 800491a:	e010      	b.n	800493e <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	330a      	adds	r3, #10
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	4413      	add	r3, r2
 8004926:	2200      	movs	r2, #0
 8004928:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	330a      	adds	r3, #10
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4413      	add	r3, r2
 8004934:	2200      	movs	r2, #0
 8004936:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	3301      	adds	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	2b03      	cmp	r3, #3
 8004942:	d9eb      	bls.n	800491c <UG_Init+0xf4>
   }

   gui = g;
 8004944:	4a04      	ldr	r2, [pc, #16]	; (8004958 <UG_Init+0x130>)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6013      	str	r3, [r2, #0]
   return 1;
 800494a:	2301      	movs	r3, #1
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	20000a88 	.word	0x20000a88

0800495c <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8004964:	4b04      	ldr	r3, [pc, #16]	; (8004978 <UG_FontSelect+0x1c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	20000a88 	.word	0x20000a88

0800497c <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af02      	add	r7, sp, #8
 8004982:	4603      	mov	r3, r0
 8004984:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8004986:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <UG_FillScreen+0x44>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29b      	uxth	r3, r3
 8004996:	b21a      	sxth	r2, r3
 8004998:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <UG_FillScreen+0x44>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	b219      	sxth	r1, r3
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	460b      	mov	r3, r1
 80049b0:	2100      	movs	r1, #0
 80049b2:	2000      	movs	r0, #0
 80049b4:	f000 f806 	bl	80049c4 <UG_FillFrame>
}
 80049b8:	bf00      	nop
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20000a88 	.word	0x20000a88

080049c4 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80049c4:	b590      	push	{r4, r7, lr}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4604      	mov	r4, r0
 80049cc:	4608      	mov	r0, r1
 80049ce:	4611      	mov	r1, r2
 80049d0:	461a      	mov	r2, r3
 80049d2:	4623      	mov	r3, r4
 80049d4:	80fb      	strh	r3, [r7, #6]
 80049d6:	4603      	mov	r3, r0
 80049d8:	80bb      	strh	r3, [r7, #4]
 80049da:	460b      	mov	r3, r1
 80049dc:	807b      	strh	r3, [r7, #2]
 80049de:	4613      	mov	r3, r2
 80049e0:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 80049e2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80049e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	da05      	bge.n	80049fa <UG_FillFrame+0x36>
     swap(x1,x2);
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	817b      	strh	r3, [r7, #10]
 80049f2:	887b      	ldrh	r3, [r7, #2]
 80049f4:	80fb      	strh	r3, [r7, #6]
 80049f6:	897b      	ldrh	r3, [r7, #10]
 80049f8:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 80049fa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80049fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	da05      	bge.n	8004a12 <UG_FillFrame+0x4e>
     swap(y1,y2);
 8004a06:	88bb      	ldrh	r3, [r7, #4]
 8004a08:	813b      	strh	r3, [r7, #8]
 8004a0a:	883b      	ldrh	r3, [r7, #0]
 8004a0c:	80bb      	strh	r3, [r7, #4]
 8004a0e:	893b      	ldrh	r3, [r7, #8]
 8004a10:	803b      	strh	r3, [r7, #0]
//   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
//   {
//      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
//   }

   for( m=y1; m<=y2; m++ )
 8004a12:	88bb      	ldrh	r3, [r7, #4]
 8004a14:	81bb      	strh	r3, [r7, #12]
 8004a16:	e01e      	b.n	8004a56 <UG_FillFrame+0x92>
   {
      for( n=x1; n<=x2; n++ )
 8004a18:	88fb      	ldrh	r3, [r7, #6]
 8004a1a:	81fb      	strh	r3, [r7, #14]
 8004a1c:	e00f      	b.n	8004a3e <UG_FillFrame+0x7a>
      {
         gui->device->pset(n,m,c);
 8004a1e:	4b13      	ldr	r3, [pc, #76]	; (8004a6c <UG_FillFrame+0xa8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	8c3a      	ldrh	r2, [r7, #32]
 8004a28:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004a2c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8004a30:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8004a32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3301      	adds	r3, #1
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	81fb      	strh	r3, [r7, #14]
 8004a3e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004a42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	dde9      	ble.n	8004a1e <UG_FillFrame+0x5a>
   for( m=y1; m<=y2; m++ )
 8004a4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3301      	adds	r3, #1
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	81bb      	strh	r3, [r7, #12]
 8004a56:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004a5a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	ddda      	ble.n	8004a18 <UG_FillFrame+0x54>
      }
   }
}
 8004a62:	bf00      	nop
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd90      	pop	{r4, r7, pc}
 8004a6c:	20000a88 	.word	0x20000a88

08004a70 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8004a70:	b5b0      	push	{r4, r5, r7, lr}
 8004a72:	b08a      	sub	sp, #40	; 0x28
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	4604      	mov	r4, r0
 8004a78:	4608      	mov	r0, r1
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4623      	mov	r3, r4
 8004a80:	80fb      	strh	r3, [r7, #6]
 8004a82:	4603      	mov	r3, r0
 8004a84:	80bb      	strh	r3, [r7, #4]
 8004a86:	460b      	mov	r3, r1
 8004a88:	807b      	strh	r3, [r7, #2]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8004a8e:	4b67      	ldr	r3, [pc, #412]	; (8004c2c <UG_DrawLine+0x1bc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d013      	beq.n	8004ac6 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8004a9e:	4b63      	ldr	r3, [pc, #396]	; (8004c2c <UG_DrawLine+0x1bc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa4:	461d      	mov	r5, r3
 8004aa6:	f9b7 4000 	ldrsh.w	r4, [r7]
 8004aaa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004aae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004ab2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004ab6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	4623      	mov	r3, r4
 8004abc:	47a8      	blx	r5
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80ae 	beq.w	8004c22 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8004ac6:	887a      	ldrh	r2, [r7, #2]
 8004ac8:	88fb      	ldrh	r3, [r7, #6]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8004ad0:	883a      	ldrh	r2, [r7, #0]
 8004ad2:	88bb      	ldrh	r3, [r7, #4]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8004ada:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bfb8      	it	lt
 8004ae2:	425b      	neglt	r3, r3
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8004ae8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	bfb8      	it	lt
 8004af0:	425b      	neglt	r3, r3
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8004af6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	dd01      	ble.n	8004b02 <UG_DrawLine+0x92>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e001      	b.n	8004b06 <UG_DrawLine+0x96>
 8004b02:	f04f 33ff 	mov.w	r3, #4294967295
 8004b06:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8004b08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	dd01      	ble.n	8004b14 <UG_DrawLine+0xa4>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e001      	b.n	8004b18 <UG_DrawLine+0xa8>
 8004b14:	f04f 33ff 	mov.w	r3, #4294967295
 8004b18:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8004b1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b1e:	105b      	asrs	r3, r3, #1
 8004b20:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8004b22:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004b26:	105b      	asrs	r3, r3, #1
 8004b28:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8004b2a:	88fb      	ldrh	r3, [r7, #6]
 8004b2c:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8004b2e:	88bb      	ldrh	r3, [r7, #4]
 8004b30:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8004b32:	4b3e      	ldr	r3, [pc, #248]	; (8004c2c <UG_DrawLine+0x1bc>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004b3c:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8004b40:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8004b44:	4798      	blx	r3

   if( dxabs >= dyabs )
 8004b46:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004b4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	db33      	blt.n	8004bba <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8004b52:	2300      	movs	r3, #0
 8004b54:	83fb      	strh	r3, [r7, #30]
 8004b56:	e029      	b.n	8004bac <UG_DrawLine+0x13c>
      {
         y += dyabs;
 8004b58:	8b7a      	ldrh	r2, [r7, #26]
 8004b5a:	89fb      	ldrh	r3, [r7, #14]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8004b62:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004b66:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	db09      	blt.n	8004b82 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8004b6e:	8b7a      	ldrh	r2, [r7, #26]
 8004b70:	8a3b      	ldrh	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8004b78:	8afa      	ldrh	r2, [r7, #22]
 8004b7a:	897b      	ldrh	r3, [r7, #10]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8004b82:	8b3a      	ldrh	r2, [r7, #24]
 8004b84:	89bb      	ldrh	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8004b8c:	4b27      	ldr	r3, [pc, #156]	; (8004c2c <UG_DrawLine+0x1bc>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004b96:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8004b9a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8004b9e:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8004ba0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	83fb      	strh	r3, [r7, #30]
 8004bac:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004bb0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	dbcf      	blt.n	8004b58 <UG_DrawLine+0xe8>
 8004bb8:	e034      	b.n	8004c24 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8004bba:	2300      	movs	r3, #0
 8004bbc:	83fb      	strh	r3, [r7, #30]
 8004bbe:	e029      	b.n	8004c14 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8004bc0:	8bba      	ldrh	r2, [r7, #28]
 8004bc2:	8a3b      	ldrh	r3, [r7, #16]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8004bca:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004bce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	db09      	blt.n	8004bea <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8004bd6:	8bba      	ldrh	r2, [r7, #28]
 8004bd8:	89fb      	ldrh	r3, [r7, #14]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8004be0:	8b3a      	ldrh	r2, [r7, #24]
 8004be2:	89bb      	ldrh	r3, [r7, #12]
 8004be4:	4413      	add	r3, r2
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8004bea:	8afa      	ldrh	r2, [r7, #22]
 8004bec:	897b      	ldrh	r3, [r7, #10]
 8004bee:	4413      	add	r3, r2
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8004bf4:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <UG_DrawLine+0x1bc>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004bfe:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8004c02:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8004c06:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8004c08:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	83fb      	strh	r3, [r7, #30]
 8004c14:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004c18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	dbcf      	blt.n	8004bc0 <UG_DrawLine+0x150>
 8004c20:	e000      	b.n	8004c24 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8004c22:	bf00      	nop
      }
   }  
}
 8004c24:	3720      	adds	r7, #32
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bdb0      	pop	{r4, r5, r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000a88 	.word	0x20000a88

08004c30 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8004c30:	b590      	push	{r4, r7, lr}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	4603      	mov	r3, r0
 8004c38:	603a      	str	r2, [r7, #0]
 8004c3a:	80fb      	strh	r3, [r7, #6]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8004c44:	88bb      	ldrh	r3, [r7, #4]
 8004c46:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 8004c48:	4b44      	ldr	r3, [pc, #272]	; (8004d5c <UG_PutString+0x12c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fae4 	bl	800521c <_UG_FontSelect>
   while ( *str != 0 )
 8004c54:	e064      	b.n	8004d20 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8004c56:	4b41      	ldr	r3, [pc, #260]	; (8004d5c <UG_PutString+0x12c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 8004c62:	463b      	mov	r3, r7
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 f915 	bl	8004e94 <_UG_DecodeUTF8>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	817b      	strh	r3, [r7, #10]
 8004c6e:	e004      	b.n	8004c7a <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	603a      	str	r2, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 8004c7a:	897b      	ldrh	r3, [r7, #10]
 8004c7c:	2b0a      	cmp	r3, #10
 8004c7e:	d105      	bne.n	8004c8c <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 8004c80:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <UG_PutString+0x12c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	81fb      	strh	r3, [r7, #14]
         continue;
 8004c8a:	e049      	b.n	8004d20 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 8004c8c:	897b      	ldrh	r3, [r7, #10]
 8004c8e:	2100      	movs	r1, #0
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 f977 	bl	8004f84 <_UG_GetCharData>
 8004c96:	4603      	mov	r3, r0
 8004c98:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 8004c9a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	d100      	bne.n	8004ca6 <UG_PutString+0x76>
 8004ca4:	e03c      	b.n	8004d20 <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 8004ca6:	4b2d      	ldr	r3, [pc, #180]	; (8004d5c <UG_PutString+0x12c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004cb6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004cba:	4413      	add	r3, r2
 8004cbc:	4299      	cmp	r1, r3
 8004cbe:	dc12      	bgt.n	8004ce6 <UG_PutString+0xb6>
      {
         xp = x;
 8004cc0:	88fb      	ldrh	r3, [r7, #6]
 8004cc2:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8004cc4:	4b25      	ldr	r3, [pc, #148]	; (8004d5c <UG_PutString+0x12c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004ccc:	b21a      	sxth	r2, r3
 8004cce:	4b23      	ldr	r3, [pc, #140]	; (8004d5c <UG_PutString+0x12c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 8004cd6:	b21b      	sxth	r3, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	b21b      	sxth	r3, r3
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	89bb      	ldrh	r3, [r7, #12]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8004ce6:	4b1d      	ldr	r3, [pc, #116]	; (8004d5c <UG_PutString+0x12c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 8004cee:	4b1b      	ldr	r3, [pc, #108]	; (8004d5c <UG_PutString+0x12c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8004cf6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004cfa:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8004cfe:	8978      	ldrh	r0, [r7, #10]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	4623      	mov	r3, r4
 8004d04:	f000 fb0c 	bl	8005320 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8004d08:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <UG_PutString+0x12c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	893b      	ldrh	r3, [r7, #8]
 8004d14:	4413      	add	r3, r2
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	89fb      	ldrh	r3, [r7, #14]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d196      	bne.n	8004c56 <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8004d28:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <UG_PutString+0x12c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00c      	beq.n	8004d52 <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8004d38:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <UG_PutString+0x12c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d3e:	461c      	mov	r4, r3
 8004d40:	f04f 33ff 	mov.w	r3, #4294967295
 8004d44:	f04f 32ff 	mov.w	r2, #4294967295
 8004d48:	f04f 31ff 	mov.w	r1, #4294967295
 8004d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d50:	47a0      	blx	r4
}
 8004d52:	bf00      	nop
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd90      	pop	{r4, r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000a88 	.word	0x20000a88

08004d60 <UG_PutChar>:

void UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 8004d60:	b590      	push	{r4, r7, lr}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	4604      	mov	r4, r0
 8004d68:	4608      	mov	r0, r1
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4623      	mov	r3, r4
 8004d70:	80fb      	strh	r3, [r7, #6]
 8004d72:	4603      	mov	r3, r0
 8004d74:	80bb      	strh	r3, [r7, #4]
 8004d76:	460b      	mov	r3, r1
 8004d78:	807b      	strh	r3, [r7, #2]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	803b      	strh	r3, [r7, #0]
    _UG_FontSelect(gui->font);
 8004d7e:	4b15      	ldr	r3, [pc, #84]	; (8004dd4 <UG_PutChar+0x74>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fa49 	bl	800521c <_UG_FontSelect>
    _UG_PutChar(chr,x,y,fc,bc);
 8004d8a:	883c      	ldrh	r4, [r7, #0]
 8004d8c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004d90:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004d94:	88f8      	ldrh	r0, [r7, #6]
 8004d96:	8b3b      	ldrh	r3, [r7, #24]
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	4623      	mov	r3, r4
 8004d9c:	f000 fac0 	bl	8005320 <_UG_PutChar>
    if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8004da0:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <UG_PutChar+0x74>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00c      	beq.n	8004dca <UG_PutChar+0x6a>
      ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8004db0:	4b08      	ldr	r3, [pc, #32]	; (8004dd4 <UG_PutChar+0x74>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004db6:	461c      	mov	r4, r3
 8004db8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8004dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc8:	47a0      	blx	r4
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd90      	pop	{r4, r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000a88 	.word	0x20000a88

08004dd8 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8004de2:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <UG_SetForecolor+0x20>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	88fa      	ldrh	r2, [r7, #6]
 8004de8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	20000a88 	.word	0x20000a88

08004dfc <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8004e06:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <UG_SetBackcolor+0x20>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	88fa      	ldrh	r2, [r7, #6]
 8004e0c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	20000a88 	.word	0x20000a88

08004e20 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8004e2a:	4b06      	ldr	r3, [pc, #24]	; (8004e44 <UG_FontSetHSpace+0x24>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	88fa      	ldrh	r2, [r7, #6]
 8004e30:	b252      	sxtb	r2, r2
 8004e32:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	20000a88 	.word	0x20000a88

08004e48 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8004e52:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <UG_FontSetVSpace+0x24>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	88fa      	ldrh	r2, [r7, #6]
 8004e58:	b252      	sxtb	r2, r2
 8004e5a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	20000a88 	.word	0x20000a88

08004e70 <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	4603      	mov	r3, r0
 8004e78:	71fb      	strb	r3, [r7, #7]
  gui->transparent_font=t;
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <UG_FontSetTransparency+0x20>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	79fa      	ldrb	r2, [r7, #7]
 8004e80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	20000a88 	.word	0x20000a88

08004e94 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]

  char c=**str;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 8004ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	db07      	blt.n	8004ebc <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	601a      	str	r2, [r3, #0]
    return c;
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	e05c      	b.n	8004f76 <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	81bb      	strh	r3, [r7, #12]

  while(**str)
 8004ec4:	e04f      	b.n	8004f66 <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8004ed8:	7bbb      	ldrb	r3, [r7, #14]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d130      	bne.n	8004f40 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	2bdf      	cmp	r3, #223	; 0xdf
 8004ee2:	d806      	bhi.n	8004ef2 <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	f003 031f 	and.w	r3, r3, #31
 8004eee:	73fb      	strb	r3, [r7, #15]
 8004ef0:	e023      	b.n	8004f3a <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	2bef      	cmp	r3, #239	; 0xef
 8004ef6:	d806      	bhi.n	8004f06 <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	73fb      	strb	r3, [r7, #15]
 8004f04:	e019      	b.n	8004f3a <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	2bf7      	cmp	r3, #247	; 0xf7
 8004f0a:	d806      	bhi.n	8004f1a <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	73fb      	strb	r3, [r7, #15]
 8004f18:	e00f      	b.n	8004f3a <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	2bfb      	cmp	r3, #251	; 0xfb
 8004f1e:	d806      	bhi.n	8004f2e <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 8004f20:	2304      	movs	r3, #4
 8004f22:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	73fb      	strb	r3, [r7, #15]
 8004f2c:	e005      	b.n	8004f3a <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 8004f2e:	2305      	movs	r3, #5
 8004f30:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	81bb      	strh	r3, [r7, #12]
 8004f3e:	e012      	b.n	8004f66 <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 8004f40:	89bb      	ldrh	r3, [r7, #12]
 8004f42:	019b      	lsls	r3, r3, #6
 8004f44:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	b21b      	sxth	r3, r3
 8004f4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f4e:	b21a      	sxth	r2, r3
 8004f50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	b21b      	sxth	r3, r3
 8004f58:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 8004f5a:	7bbb      	ldrb	r3, [r7, #14]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	73bb      	strb	r3, [r7, #14]
 8004f60:	7bbb      	ldrb	r3, [r7, #14]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d005      	beq.n	8004f72 <_UG_DecodeUTF8+0xde>
  while(**str)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1aa      	bne.n	8004ec6 <_UG_DecodeUTF8+0x32>
 8004f70:	e000      	b.n	8004f74 <_UG_DecodeUTF8+0xe0>
        break;
 8004f72:	bf00      	nop
    }
  }
  return encoding;
 8004f74:	89bb      	ldrh	r3, [r7, #12]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
	...

08004f84 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	6039      	str	r1, [r7, #0]
 8004f8e:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8004fa4:	4b98      	ldr	r3, [pc, #608]	; (8005208 <_UG_GetCharData+0x284>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004faa:	4b98      	ldr	r3, [pc, #608]	; (800520c <_UG_GetCharData+0x288>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d10f      	bne.n	8004fd2 <_UG_GetCharData+0x4e>
 8004fb2:	4b97      	ldr	r3, [pc, #604]	; (8005210 <_UG_GetCharData+0x28c>)
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	88fa      	ldrh	r2, [r7, #6]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d10a      	bne.n	8004fd2 <_UG_GetCharData+0x4e>
    if(p){
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 8004fc2:	4b94      	ldr	r3, [pc, #592]	; (8005214 <_UG_GetCharData+0x290>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8004fca:	4b93      	ldr	r3, [pc, #588]	; (8005218 <_UG_GetCharData+0x294>)
 8004fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fd0:	e116      	b.n	8005200 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 8004fd2:	4b8d      	ldr	r3, [pc, #564]	; (8005208 <_UG_GetCharData+0x284>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 80cc 	beq.w	8005178 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 8004fe0:	88fb      	ldrh	r3, [r7, #6]
 8004fe2:	2bfc      	cmp	r3, #252	; 0xfc
 8004fe4:	f300 80c8 	bgt.w	8005178 <_UG_GetCharData+0x1f4>
 8004fe8:	2bd6      	cmp	r3, #214	; 0xd6
 8004fea:	da09      	bge.n	8005000 <_UG_GetCharData+0x7c>
 8004fec:	2bc4      	cmp	r3, #196	; 0xc4
 8004fee:	d06c      	beq.n	80050ca <_UG_GetCharData+0x146>
 8004ff0:	2bc4      	cmp	r3, #196	; 0xc4
 8004ff2:	f300 80c1 	bgt.w	8005178 <_UG_GetCharData+0x1f4>
 8004ff6:	2bb0      	cmp	r3, #176	; 0xb0
 8004ff8:	d06d      	beq.n	80050d6 <_UG_GetCharData+0x152>
 8004ffa:	2bb5      	cmp	r3, #181	; 0xb5
 8004ffc:	d068      	beq.n	80050d0 <_UG_GetCharData+0x14c>
 8004ffe:	e06e      	b.n	80050de <_UG_GetCharData+0x15a>
 8005000:	3bd6      	subs	r3, #214	; 0xd6
 8005002:	2b26      	cmp	r3, #38	; 0x26
 8005004:	f200 80b8 	bhi.w	8005178 <_UG_GetCharData+0x1f4>
 8005008:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <_UG_GetCharData+0x8c>)
 800500a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500e:	bf00      	nop
 8005010:	080050b3 	.word	0x080050b3
 8005014:	08005179 	.word	0x08005179
 8005018:	08005179 	.word	0x08005179
 800501c:	08005179 	.word	0x08005179
 8005020:	08005179 	.word	0x08005179
 8005024:	08005179 	.word	0x08005179
 8005028:	080050bf 	.word	0x080050bf
 800502c:	08005179 	.word	0x08005179
 8005030:	08005179 	.word	0x08005179
 8005034:	08005179 	.word	0x08005179
 8005038:	08005179 	.word	0x08005179
 800503c:	08005179 	.word	0x08005179
 8005040:	08005179 	.word	0x08005179
 8005044:	08005179 	.word	0x08005179
 8005048:	080050c5 	.word	0x080050c5
 800504c:	08005179 	.word	0x08005179
 8005050:	08005179 	.word	0x08005179
 8005054:	08005179 	.word	0x08005179
 8005058:	08005179 	.word	0x08005179
 800505c:	08005179 	.word	0x08005179
 8005060:	08005179 	.word	0x08005179
 8005064:	08005179 	.word	0x08005179
 8005068:	08005179 	.word	0x08005179
 800506c:	08005179 	.word	0x08005179
 8005070:	08005179 	.word	0x08005179
 8005074:	08005179 	.word	0x08005179
 8005078:	08005179 	.word	0x08005179
 800507c:	08005179 	.word	0x08005179
 8005080:	08005179 	.word	0x08005179
 8005084:	08005179 	.word	0x08005179
 8005088:	08005179 	.word	0x08005179
 800508c:	08005179 	.word	0x08005179
 8005090:	080050ad 	.word	0x080050ad
 8005094:	08005179 	.word	0x08005179
 8005098:	08005179 	.word	0x08005179
 800509c:	08005179 	.word	0x08005179
 80050a0:	08005179 	.word	0x08005179
 80050a4:	08005179 	.word	0x08005179
 80050a8:	080050b9 	.word	0x080050b9
    {
       case 0xF6: encoding = 0x94; break; // ö
 80050ac:	2394      	movs	r3, #148	; 0x94
 80050ae:	80fb      	strh	r3, [r7, #6]
 80050b0:	e015      	b.n	80050de <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 80050b2:	2399      	movs	r3, #153	; 0x99
 80050b4:	80fb      	strh	r3, [r7, #6]
 80050b6:	e012      	b.n	80050de <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 80050b8:	2381      	movs	r3, #129	; 0x81
 80050ba:	80fb      	strh	r3, [r7, #6]
 80050bc:	e00f      	b.n	80050de <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 80050be:	239a      	movs	r3, #154	; 0x9a
 80050c0:	80fb      	strh	r3, [r7, #6]
 80050c2:	e00c      	b.n	80050de <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 80050c4:	2384      	movs	r3, #132	; 0x84
 80050c6:	80fb      	strh	r3, [r7, #6]
 80050c8:	e009      	b.n	80050de <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 80050ca:	238e      	movs	r3, #142	; 0x8e
 80050cc:	80fb      	strh	r3, [r7, #6]
 80050ce:	e006      	b.n	80050de <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 80050d0:	23e6      	movs	r3, #230	; 0xe6
 80050d2:	80fb      	strh	r3, [r7, #6]
 80050d4:	e003      	b.n	80050de <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 80050d6:	23f8      	movs	r3, #248	; 0xf8
 80050d8:	80fb      	strh	r3, [r7, #6]
 80050da:	bf00      	nop
 80050dc:	e04c      	b.n	8005178 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80050de:	e04b      	b.n	8005178 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 80050e0:	4b49      	ldr	r3, [pc, #292]	; (8005208 <_UG_GetCharData+0x284>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e6:	8a7a      	ldrh	r2, [r7, #18]
 80050e8:	0052      	lsls	r2, r2, #1
 80050ea:	4413      	add	r3, r2
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff fb83 	bl	80047f8 <ptr_8to16>
 80050f2:	4603      	mov	r3, r0
 80050f4:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 80050f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	da06      	bge.n	800510c <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 80050fe:	89fb      	ldrh	r3, [r7, #14]
 8005100:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005104:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 8005106:	2301      	movs	r3, #1
 8005108:	747b      	strb	r3, [r7, #17]
 800510a:	e032      	b.n	8005172 <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 800510c:	7c7b      	ldrb	r3, [r7, #17]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d021      	beq.n	8005156 <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8005112:	88fa      	ldrh	r2, [r7, #6]
 8005114:	8afb      	ldrh	r3, [r7, #22]
 8005116:	429a      	cmp	r2, r3
 8005118:	d30d      	bcc.n	8005136 <_UG_GetCharData+0x1b2>
 800511a:	88fa      	ldrh	r2, [r7, #6]
 800511c:	89fb      	ldrh	r3, [r7, #14]
 800511e:	429a      	cmp	r2, r3
 8005120:	d809      	bhi.n	8005136 <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8005122:	88fa      	ldrh	r2, [r7, #6]
 8005124:	8afb      	ldrh	r3, [r7, #22]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	b29a      	uxth	r2, r3
 800512a:	8abb      	ldrh	r3, [r7, #20]
 800512c:	4413      	add	r3, r2
 800512e:	82bb      	strh	r3, [r7, #20]
        found=1;
 8005130:	2301      	movs	r3, #1
 8005132:	743b      	strb	r3, [r7, #16]
        break;
 8005134:	e02a      	b.n	800518c <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8005136:	88fa      	ldrh	r2, [r7, #6]
 8005138:	8afb      	ldrh	r3, [r7, #22]
 800513a:	429a      	cmp	r2, r3
 800513c:	d323      	bcc.n	8005186 <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 800513e:	89fa      	ldrh	r2, [r7, #14]
 8005140:	8afb      	ldrh	r3, [r7, #22]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	b29a      	uxth	r2, r3
 8005146:	8abb      	ldrh	r3, [r7, #20]
 8005148:	4413      	add	r3, r2
 800514a:	b29b      	uxth	r3, r3
 800514c:	3301      	adds	r3, #1
 800514e:	82bb      	strh	r3, [r7, #20]
      range=0;
 8005150:	2300      	movs	r3, #0
 8005152:	747b      	strb	r3, [r7, #17]
 8005154:	e00d      	b.n	8005172 <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8005156:	88fa      	ldrh	r2, [r7, #6]
 8005158:	89fb      	ldrh	r3, [r7, #14]
 800515a:	429a      	cmp	r2, r3
 800515c:	d102      	bne.n	8005164 <_UG_GetCharData+0x1e0>
      {
        found=1;
 800515e:	2301      	movs	r3, #1
 8005160:	743b      	strb	r3, [r7, #16]
        break;
 8005162:	e013      	b.n	800518c <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8005164:	88fa      	ldrh	r2, [r7, #6]
 8005166:	89fb      	ldrh	r3, [r7, #14]
 8005168:	429a      	cmp	r2, r3
 800516a:	d30e      	bcc.n	800518a <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 800516c:	8abb      	ldrh	r3, [r7, #20]
 800516e:	3301      	adds	r3, #1
 8005170:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8005172:	8a7b      	ldrh	r3, [r7, #18]
 8005174:	3301      	adds	r3, #1
 8005176:	827b      	strh	r3, [r7, #18]
 8005178:	4b23      	ldr	r3, [pc, #140]	; (8005208 <_UG_GetCharData+0x284>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800517e:	8a7a      	ldrh	r2, [r7, #18]
 8005180:	429a      	cmp	r2, r3
 8005182:	d3ad      	bcc.n	80050e0 <_UG_GetCharData+0x15c>
 8005184:	e002      	b.n	800518c <_UG_GetCharData+0x208>
        break;
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <_UG_GetCharData+0x208>
        break;
 800518a:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 800518c:	7c3b      	ldrb	r3, [r7, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d034      	beq.n	80051fc <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8005192:	4b1d      	ldr	r3, [pc, #116]	; (8005208 <_UG_GetCharData+0x284>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005198:	4a1c      	ldr	r2, [pc, #112]	; (800520c <_UG_GetCharData+0x288>)
 800519a:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 800519c:	4a1c      	ldr	r2, [pc, #112]	; (8005210 <_UG_GetCharData+0x28c>)
 800519e:	88fb      	ldrh	r3, [r7, #6]
 80051a0:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 80051a2:	4b19      	ldr	r3, [pc, #100]	; (8005208 <_UG_GetCharData+0x284>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	8aba      	ldrh	r2, [r7, #20]
 80051aa:	4917      	ldr	r1, [pc, #92]	; (8005208 <_UG_GetCharData+0x284>)
 80051ac:	6809      	ldr	r1, [r1, #0]
 80051ae:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 80051b0:	fb01 f202 	mul.w	r2, r1, r2
 80051b4:	4413      	add	r3, r2
 80051b6:	4a17      	ldr	r2, [pc, #92]	; (8005214 <_UG_GetCharData+0x290>)
 80051b8:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 80051ba:	4b13      	ldr	r3, [pc, #76]	; (8005208 <_UG_GetCharData+0x284>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d009      	beq.n	80051d8 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 80051c4:	4b10      	ldr	r3, [pc, #64]	; (8005208 <_UG_GetCharData+0x284>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ca:	8abb      	ldrh	r3, [r7, #20]
 80051cc:	4413      	add	r3, r2
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	b21a      	sxth	r2, r3
 80051d2:	4b11      	ldr	r3, [pc, #68]	; (8005218 <_UG_GetCharData+0x294>)
 80051d4:	801a      	strh	r2, [r3, #0]
 80051d6:	e006      	b.n	80051e6 <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 80051d8:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <_UG_GetCharData+0x284>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80051e0:	b21a      	sxth	r2, r3
 80051e2:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <_UG_GetCharData+0x294>)
 80051e4:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 80051ec:	4b09      	ldr	r3, [pc, #36]	; (8005214 <_UG_GetCharData+0x290>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 80051f4:	4b08      	ldr	r3, [pc, #32]	; (8005218 <_UG_GetCharData+0x294>)
 80051f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051fa:	e001      	b.n	8005200 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 80051fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	20000a88 	.word	0x20000a88
 800520c:	20000a8c 	.word	0x20000a8c
 8005210:	20000a90 	.word	0x20000a90
 8005214:	20000a94 	.word	0x20000a94
 8005218:	20000a98 	.word	0x20000a98

0800521c <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8005224:	4b3d      	ldr	r3, [pc, #244]	; (800531c <_UG_FontSelect+0x100>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	429a      	cmp	r2, r3
 800522e:	d070      	beq.n	8005312 <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8005230:	4b3a      	ldr	r3, [pc, #232]	; (800531c <_UG_FontSelect+0x100>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	781a      	ldrb	r2, [r3, #0]
 800523c:	4b37      	ldr	r3, [pc, #220]	; (800531c <_UG_FontSelect+0x100>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	b25b      	sxtb	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	da01      	bge.n	800525c <_UG_FontSelect+0x40>
 8005258:	2201      	movs	r2, #1
 800525a:	e000      	b.n	800525e <_UG_FontSelect+0x42>
 800525c:	2200      	movs	r2, #0
 800525e:	4b2f      	ldr	r3, [pc, #188]	; (800531c <_UG_FontSelect+0x100>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	607a      	str	r2, [r7, #4]
 800526e:	4a2b      	ldr	r2, [pc, #172]	; (800531c <_UG_FontSelect+0x100>)
 8005270:	6812      	ldr	r2, [r2, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	607a      	str	r2, [r7, #4]
 800527e:	4a27      	ldr	r2, [pc, #156]	; (800531c <_UG_FontSelect+0x100>)
 8005280:	6812      	ldr	r2, [r2, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8005288:	4b24      	ldr	r3, [pc, #144]	; (800531c <_UG_FontSelect+0x100>)
 800528a:	681c      	ldr	r4, [r3, #0]
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff fab3 	bl	80047f8 <ptr_8to16>
 8005292:	4603      	mov	r3, r0
 8005294:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3302      	adds	r3, #2
 800529a:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 800529c:	4b1f      	ldr	r3, [pc, #124]	; (800531c <_UG_FontSelect+0x100>)
 800529e:	681c      	ldr	r4, [r3, #0]
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff faa9 	bl	80047f8 <ptr_8to16>
 80052a6:	4603      	mov	r3, r0
 80052a8:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3302      	adds	r3, #2
 80052ae:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 80052b0:	4b1a      	ldr	r3, [pc, #104]	; (800531c <_UG_FontSelect+0x100>)
 80052b2:	681c      	ldr	r4, [r3, #0]
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff fa9f 	bl	80047f8 <ptr_8to16>
 80052ba:	4603      	mov	r3, r0
 80052bc:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3302      	adds	r3, #2
 80052c2:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	607a      	str	r2, [r7, #4]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00b      	beq.n	80052e8 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 80052d0:	4b12      	ldr	r3, [pc, #72]	; (800531c <_UG_FontSelect+0x100>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 80052d8:	4b10      	ldr	r3, [pc, #64]	; (800531c <_UG_FontSelect+0x100>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052de:	461a      	mov	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4413      	add	r3, r2
 80052e4:	607b      	str	r3, [r7, #4]
 80052e6:	e003      	b.n	80052f0 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 80052e8:	4b0c      	ldr	r3, [pc, #48]	; (800531c <_UG_FontSelect+0x100>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2200      	movs	r2, #0
 80052ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 80052f0:	4b0a      	ldr	r3, [pc, #40]	; (800531c <_UG_FontSelect+0x100>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 80052f8:	4b08      	ldr	r3, [pc, #32]	; (800531c <_UG_FontSelect+0x100>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	461a      	mov	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4413      	add	r3, r2
 8005306:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8005308:	4b04      	ldr	r3, [pc, #16]	; (800531c <_UG_FontSelect+0x100>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	641a      	str	r2, [r3, #64]	; 0x40
 8005310:	e000      	b.n	8005314 <_UG_FontSelect+0xf8>
    return;
 8005312:	bf00      	nop
}
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	bd90      	pop	{r4, r7, pc}
 800531a:	bf00      	nop
 800531c:	20000a88 	.word	0x20000a88

08005320 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8005320:	b5b0      	push	{r4, r5, r7, lr}
 8005322:	b08c      	sub	sp, #48	; 0x30
 8005324:	af00      	add	r7, sp, #0
 8005326:	4604      	mov	r4, r0
 8005328:	4608      	mov	r0, r1
 800532a:	4611      	mov	r1, r2
 800532c:	461a      	mov	r2, r3
 800532e:	4623      	mov	r3, r4
 8005330:	80fb      	strh	r3, [r7, #6]
 8005332:	4603      	mov	r3, r0
 8005334:	80bb      	strh	r3, [r7, #4]
 8005336:	460b      	mov	r3, r1
 8005338:	807b      	strh	r3, [r7, #2]
 800533a:	4613      	mov	r3, r2
 800533c:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 800533e:	2300      	movs	r3, #0
 8005340:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005342:	2300      	movs	r3, #0
 8005344:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005346:	2300      	movs	r3, #0
 8005348:	847b      	strh	r3, [r7, #34]	; 0x22
 800534a:	2300      	movs	r3, #0
 800534c:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 800534e:	4b8c      	ldr	r3, [pc, #560]	; (8005580 <_UG_PutChar+0x260>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005356:	75fb      	strb	r3, [r7, #23]
 8005358:	4b89      	ldr	r3, [pc, #548]	; (8005580 <_UG_PutChar+0x260>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 8005366:	2300      	movs	r3, #0
 8005368:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 800536a:	f107 0208 	add.w	r2, r7, #8
 800536e:	88fb      	ldrh	r3, [r7, #6]
 8005370:	4611      	mov	r1, r2
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff fe06 	bl	8004f84 <_UG_GetCharData>
 8005378:	4603      	mov	r3, r0
 800537a:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 800537c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005384:	d102      	bne.n	800538c <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8005386:	f04f 33ff 	mov.w	r3, #4294967295
 800538a:	e226      	b.n	80057da <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 800538c:	4b7c      	ldr	r3, [pc, #496]	; (8005580 <_UG_PutChar+0x260>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005394:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 8005396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <_UG_PutChar+0x80>
     return 0;
 800539c:	2300      	movs	r3, #0
 800539e:	e21c      	b.n	80057da <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 80053a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053a2:	08db      	lsrs	r3, r3, #3
 80053a4:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 80053a6:	4b76      	ldr	r3, [pc, #472]	; (8005580 <_UG_PutChar+0x260>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <_UG_PutChar+0x9e>
 80053b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053ba:	3301      	adds	r3, #1
 80053bc:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 80053be:	7dbb      	ldrb	r3, [r7, #22]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01d      	beq.n	8005400 <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 80053c4:	4b6e      	ldr	r3, [pc, #440]	; (8005580 <_UG_PutChar+0x260>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ca:	461d      	mov	r5, r3
 80053cc:	88ba      	ldrh	r2, [r7, #4]
 80053ce:	8abb      	ldrh	r3, [r7, #20]
 80053d0:	4413      	add	r3, r2
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	b21c      	sxth	r4, r3
 80053da:	4b69      	ldr	r3, [pc, #420]	; (8005580 <_UG_PutChar+0x260>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	887b      	ldrh	r3, [r7, #2]
 80053e6:	4413      	add	r3, r2
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	b21b      	sxth	r3, r3
 80053f0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80053f4:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80053f8:	4622      	mov	r2, r4
 80053fa:	47a8      	blx	r5
 80053fc:	4603      	mov	r3, r0
 80053fe:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8005400:	4b5f      	ldr	r3, [pc, #380]	; (8005580 <_UG_PutChar+0x260>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005408:	2b00      	cmp	r3, #0
 800540a:	f040 8172 	bne.w	80056f2 <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 800540e:	2300      	movs	r3, #0
 8005410:	853b      	strh	r3, [r7, #40]	; 0x28
 8005412:	e0ec      	b.n	80055ee <_UG_PutChar+0x2ce>
     {
       c=0;
 8005414:	2300      	movs	r3, #0
 8005416:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8005418:	2300      	movs	r3, #0
 800541a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800541c:	e0df      	b.n	80055de <_UG_PutChar+0x2be>
       {
         b = *data++;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	60ba      	str	r2, [r7, #8]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8005428:	2300      	movs	r3, #0
 800542a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800542c:	e0ca      	b.n	80055c4 <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 800542e:	7f7b      	ldrb	r3, [r7, #29]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	d033      	beq.n	80054a0 <_UG_PutChar+0x180>
           {
             if(driver)
 8005438:	7dbb      	ldrb	r3, [r7, #22]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01f      	beq.n	800547e <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 800543e:	8c3b      	ldrh	r3, [r7, #32]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <_UG_PutChar+0x13a>
 8005444:	7dfb      	ldrb	r3, [r7, #23]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d107      	bne.n	800545a <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 800544a:	8c3a      	ldrh	r2, [r7, #32]
 800544c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	4610      	mov	r0, r2
 8005454:	4798      	blx	r3
                 bpixels=0;
 8005456:	2300      	movs	r3, #0
 8005458:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 800545a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <_UG_PutChar+0x156>
 8005460:	7dfb      	ldrb	r3, [r7, #23]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <_UG_PutChar+0x156>
               {
                 x0=x+c;
 8005466:	88ba      	ldrh	r2, [r7, #4]
 8005468:	8bfb      	ldrh	r3, [r7, #30]
 800546a:	4413      	add	r3, r2
 800546c:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 800546e:	887a      	ldrh	r2, [r7, #2]
 8005470:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005472:	4413      	add	r3, r2
 8005474:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8005476:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005478:	3301      	adds	r3, #1
 800547a:	847b      	strh	r3, [r7, #34]	; 0x22
 800547c:	e096      	b.n	80055ac <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 800547e:	4b40      	ldr	r3, [pc, #256]	; (8005580 <_UG_PutChar+0x260>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	88b9      	ldrh	r1, [r7, #4]
 8005488:	8bfa      	ldrh	r2, [r7, #30]
 800548a:	440a      	add	r2, r1
 800548c:	b292      	uxth	r2, r2
 800548e:	b210      	sxth	r0, r2
 8005490:	8879      	ldrh	r1, [r7, #2]
 8005492:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005494:	440a      	add	r2, r1
 8005496:	b292      	uxth	r2, r2
 8005498:	b211      	sxth	r1, r2
 800549a:	883a      	ldrh	r2, [r7, #0]
 800549c:	4798      	blx	r3
 800549e:	e085      	b.n	80055ac <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 80054a0:	7dbb      	ldrb	r3, [r7, #22]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d06e      	beq.n	8005584 <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 80054a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d064      	beq.n	8005576 <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 80054ac:	7dfb      	ldrb	r3, [r7, #23]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d15e      	bne.n	8005570 <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 80054b2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80054b4:	8839      	ldrh	r1, [r7, #0]
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	4610      	mov	r0, r2
 80054ba:	4798      	blx	r3
                   fpixels=0;
 80054bc:	2300      	movs	r3, #0
 80054be:	847b      	strh	r3, [r7, #34]	; 0x22
 80054c0:	e059      	b.n	8005576 <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 80054c2:	88ba      	ldrh	r2, [r7, #4]
 80054c4:	8abb      	ldrh	r3, [r7, #20]
 80054c6:	4413      	add	r3, r2
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 80054d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80054d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d003      	beq.n	80054e2 <_UG_PutChar+0x1c2>
 80054da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80054dc:	89fb      	ldrh	r3, [r7, #14]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d224      	bcs.n	800552c <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80054e2:	4b27      	ldr	r3, [pc, #156]	; (8005580 <_UG_PutChar+0x260>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054e8:	461d      	mov	r5, r3
 80054ea:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80054ee:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80054f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80054f4:	89fb      	ldrh	r3, [r7, #14]
 80054f6:	4413      	add	r3, r2
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	b21c      	sxth	r4, r3
 8005500:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005502:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005506:	fb92 f3f3 	sdiv	r3, r2, r3
 800550a:	b29a      	uxth	r2, r3
 800550c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800550e:	4413      	add	r3, r2
 8005510:	b29b      	uxth	r3, r3
 8005512:	b21b      	sxth	r3, r3
 8005514:	4622      	mov	r2, r4
 8005516:	47a8      	blx	r5
 8005518:	4603      	mov	r3, r0
 800551a:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 800551c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800551e:	8839      	ldrh	r1, [r7, #0]
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	4610      	mov	r0, r2
 8005524:	4798      	blx	r3
                       fpixels=0;
 8005526:	2300      	movs	r3, #0
 8005528:	847b      	strh	r3, [r7, #34]	; 0x22
 800552a:	e021      	b.n	8005570 <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 800552c:	4b14      	ldr	r3, [pc, #80]	; (8005580 <_UG_PutChar+0x260>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005532:	461c      	mov	r4, r3
 8005534:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8005538:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800553c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800553e:	89fb      	ldrh	r3, [r7, #14]
 8005540:	4413      	add	r3, r2
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	b29b      	uxth	r3, r3
 8005548:	b21a      	sxth	r2, r3
 800554a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800554e:	47a0      	blx	r4
 8005550:	4603      	mov	r3, r0
 8005552:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8005554:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005556:	8839      	ldrh	r1, [r7, #0]
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	4610      	mov	r0, r2
 800555c:	4798      	blx	r3
                       fpixels -= width;
 800555e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005560:	89fb      	ldrh	r3, [r7, #14]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 8005566:	88bb      	ldrh	r3, [r7, #4]
 8005568:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 800556a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800556c:	3301      	adds	r3, #1
 800556e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 8005570:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1a5      	bne.n	80054c2 <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 8005576:	8c3b      	ldrh	r3, [r7, #32]
 8005578:	3301      	adds	r3, #1
 800557a:	843b      	strh	r3, [r7, #32]
 800557c:	e016      	b.n	80055ac <_UG_PutChar+0x28c>
 800557e:	bf00      	nop
 8005580:	20000a88 	.word	0x20000a88
             }
             else if(!trans)                           // Not accelerated output
 8005584:	7dfb      	ldrb	r3, [r7, #23]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d110      	bne.n	80055ac <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 800558a:	4b96      	ldr	r3, [pc, #600]	; (80057e4 <_UG_PutChar+0x4c4>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	88b9      	ldrh	r1, [r7, #4]
 8005594:	8bfa      	ldrh	r2, [r7, #30]
 8005596:	440a      	add	r2, r1
 8005598:	b292      	uxth	r2, r2
 800559a:	b210      	sxth	r0, r2
 800559c:	8879      	ldrh	r1, [r7, #2]
 800559e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80055a0:	440a      	add	r2, r1
 80055a2:	b292      	uxth	r2, r2
 80055a4:	b211      	sxth	r1, r2
 80055a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80055aa:	4798      	blx	r3
             }
           }
           b >>= 1;
 80055ac:	7f7b      	ldrb	r3, [r7, #29]
 80055ae:	085b      	lsrs	r3, r3, #1
 80055b0:	777b      	strb	r3, [r7, #29]
           c++;
 80055b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3301      	adds	r3, #1
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 80055be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055c0:	3301      	adds	r3, #1
 80055c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80055c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055c6:	2b07      	cmp	r3, #7
 80055c8:	d806      	bhi.n	80055d8 <_UG_PutChar+0x2b8>
 80055ca:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80055ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	f6ff af2b 	blt.w	800542e <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 80055d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055da:	3301      	adds	r3, #1
 80055dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80055de:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80055e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055e2:	429a      	cmp	r2, r3
 80055e4:	f4ff af1b 	bcc.w	800541e <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 80055e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055ea:	3301      	adds	r3, #1
 80055ec:	853b      	strh	r3, [r7, #40]	; 0x28
 80055ee:	4b7d      	ldr	r3, [pc, #500]	; (80057e4 <_UG_PutChar+0x4c4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80055fa:	429a      	cmp	r2, r3
 80055fc:	f4ff af0a 	bcc.w	8005414 <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8005600:	7dbb      	ldrb	r3, [r7, #22]
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 80e7 	beq.w	80057d6 <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 8005608:	8c3b      	ldrh	r3, [r7, #32]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <_UG_PutChar+0x302>
 800560e:	7dfb      	ldrb	r3, [r7, #23]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d106      	bne.n	8005622 <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 8005614:	8c3a      	ldrh	r2, [r7, #32]
 8005616:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	4610      	mov	r0, r2
 800561e:	4798      	blx	r3
 8005620:	e0d9      	b.n	80057d6 <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 8005622:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80d6 	beq.w	80057d6 <_UG_PutChar+0x4b6>
       {
         if(!trans)
 800562a:	7dfb      	ldrb	r3, [r7, #23]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d15c      	bne.n	80056ea <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 8005630:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005632:	8839      	ldrh	r1, [r7, #0]
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	4610      	mov	r0, r2
 8005638:	4798      	blx	r3
 800563a:	e0cc      	b.n	80057d6 <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 800563c:	88ba      	ldrh	r2, [r7, #4]
 800563e:	8abb      	ldrh	r3, [r7, #20]
 8005640:	4413      	add	r3, r2
 8005642:	b29a      	uxth	r2, r3
 8005644:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 800564a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800564c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005650:	429a      	cmp	r2, r3
 8005652:	d003      	beq.n	800565c <_UG_PutChar+0x33c>
 8005654:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005656:	8a3b      	ldrh	r3, [r7, #16]
 8005658:	429a      	cmp	r2, r3
 800565a:	d224      	bcs.n	80056a6 <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 800565c:	4b61      	ldr	r3, [pc, #388]	; (80057e4 <_UG_PutChar+0x4c4>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005662:	461d      	mov	r5, r3
 8005664:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8005668:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800566c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800566e:	8a3b      	ldrh	r3, [r7, #16]
 8005670:	4413      	add	r3, r2
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29b      	uxth	r3, r3
 8005678:	b21c      	sxth	r4, r3
 800567a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800567c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005680:	fb92 f3f3 	sdiv	r3, r2, r3
 8005684:	b29a      	uxth	r2, r3
 8005686:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005688:	4413      	add	r3, r2
 800568a:	b29b      	uxth	r3, r3
 800568c:	b21b      	sxth	r3, r3
 800568e:	4622      	mov	r2, r4
 8005690:	47a8      	blx	r5
 8005692:	4603      	mov	r3, r0
 8005694:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8005696:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005698:	8839      	ldrh	r1, [r7, #0]
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	4610      	mov	r0, r2
 800569e:	4798      	blx	r3
               fpixels=0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80056a4:	e021      	b.n	80056ea <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80056a6:	4b4f      	ldr	r3, [pc, #316]	; (80057e4 <_UG_PutChar+0x4c4>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ac:	461c      	mov	r4, r3
 80056ae:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80056b2:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80056b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80056b8:	8a3b      	ldrh	r3, [r7, #16]
 80056ba:	4413      	add	r3, r2
 80056bc:	b29b      	uxth	r3, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	b21a      	sxth	r2, r3
 80056c4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80056c8:	47a0      	blx	r4
 80056ca:	4603      	mov	r3, r0
 80056cc:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 80056ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80056d0:	8839      	ldrh	r1, [r7, #0]
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	4610      	mov	r0, r2
 80056d6:	4798      	blx	r3
               fpixels -= width;
 80056d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80056da:	8a3b      	ldrh	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 80056e0:	88bb      	ldrh	r3, [r7, #4]
 80056e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 80056e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80056e6:	3301      	adds	r3, #1
 80056e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 80056ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1a5      	bne.n	800563c <_UG_PutChar+0x31c>
 80056f0:	e071      	b.n	80057d6 <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 80056f2:	4b3c      	ldr	r3, [pc, #240]	; (80057e4 <_UG_PutChar+0x4c4>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d16b      	bne.n	80057d6 <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 80056fe:	2300      	movs	r3, #0
 8005700:	853b      	strh	r3, [r7, #40]	; 0x28
 8005702:	e060      	b.n	80057c6 <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 8005704:	2300      	movs	r3, #0
 8005706:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005708:	e04a      	b.n	80057a0 <_UG_PutChar+0x480>
       {
         b = *data++;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	60ba      	str	r2, [r7, #8]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8005714:	883b      	ldrh	r3, [r7, #0]
 8005716:	b2db      	uxtb	r3, r3
 8005718:	7f7a      	ldrb	r2, [r7, #29]
 800571a:	fb03 f202 	mul.w	r2, r3, r2
 800571e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005722:	b2db      	uxtb	r3, r3
 8005724:	7f79      	ldrb	r1, [r7, #29]
 8005726:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 800572a:	fb01 f303 	mul.w	r3, r1, r3
 800572e:	4413      	add	r3, r2
 8005730:	121b      	asrs	r3, r3, #8
 8005732:	b21b      	sxth	r3, r3
 8005734:	b2db      	uxtb	r3, r3
 8005736:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8005738:	883b      	ldrh	r3, [r7, #0]
 800573a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800573e:	7f79      	ldrb	r1, [r7, #29]
 8005740:	fb03 f101 	mul.w	r1, r3, r1
 8005744:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005748:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800574c:	7f78      	ldrb	r0, [r7, #29]
 800574e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8005752:	fb00 f303 	mul.w	r3, r0, r3
 8005756:	440b      	add	r3, r1
 8005758:	121b      	asrs	r3, r3, #8
 800575a:	b21b      	sxth	r3, r3
 800575c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005760:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8005762:	4313      	orrs	r3, r2
 8005764:	b21b      	sxth	r3, r3
 8005766:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8005768:	7dbb      	ldrb	r3, [r7, #22]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 800576e:	8a7a      	ldrh	r2, [r7, #18]
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	4611      	mov	r1, r2
 8005774:	2001      	movs	r0, #1
 8005776:	4798      	blx	r3
 8005778:	e00f      	b.n	800579a <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 800577a:	4b1a      	ldr	r3, [pc, #104]	; (80057e4 <_UG_PutChar+0x4c4>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	88b9      	ldrh	r1, [r7, #4]
 8005784:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005786:	440a      	add	r2, r1
 8005788:	b292      	uxth	r2, r2
 800578a:	b210      	sxth	r0, r2
 800578c:	8879      	ldrh	r1, [r7, #2]
 800578e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005790:	440a      	add	r2, r1
 8005792:	b292      	uxth	r2, r2
 8005794:	b211      	sxth	r1, r2
 8005796:	8a7a      	ldrh	r2, [r7, #18]
 8005798:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 800579a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800579c:	3301      	adds	r3, #1
 800579e:	857b      	strh	r3, [r7, #42]	; 0x2a
 80057a0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80057a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	dbaf      	blt.n	800570a <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4a0d      	ldr	r2, [pc, #52]	; (80057e4 <_UG_PutChar+0x4c4>)
 80057ae:	6812      	ldr	r2, [r2, #0]
 80057b0:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 80057b4:	4611      	mov	r1, r2
 80057b6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80057ba:	1a8a      	subs	r2, r1, r2
 80057bc:	4413      	add	r3, r2
 80057be:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 80057c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057c2:	3301      	adds	r3, #1
 80057c4:	853b      	strh	r3, [r7, #40]	; 0x28
 80057c6:	4b07      	ldr	r3, [pc, #28]	; (80057e4 <_UG_PutChar+0x4c4>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d396      	bcc.n	8005704 <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 80057d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3730      	adds	r7, #48	; 0x30
 80057de:	46bd      	mov	sp, r7
 80057e0:	bdb0      	pop	{r4, r5, r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000a88 	.word	0x20000a88

080057e8 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 80057e8:	b480      	push	{r7}
 80057ea:	b089      	sub	sp, #36	; 0x24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 80057f0:	4b57      	ldr	r3, [pc, #348]	; (8005950 <_UG_ProcessTouchData+0x168>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	88db      	ldrh	r3, [r3, #6]
 80057f6:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 80057f8:	4b55      	ldr	r3, [pc, #340]	; (8005950 <_UG_ProcessTouchData+0x168>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	891b      	ldrh	r3, [r3, #8]
 80057fe:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8005800:	4b53      	ldr	r3, [pc, #332]	; (8005950 <_UG_ProcessTouchData+0x168>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	791b      	ldrb	r3, [r3, #4]
 8005806:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 800580e:	2300      	movs	r3, #0
 8005810:	83fb      	strh	r3, [r7, #30]
 8005812:	e090      	b.n	8005936 <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	8bfb      	ldrh	r3, [r7, #30]
 800581a:	015b      	lsls	r3, r3, #5
 800581c:	4413      	add	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	785b      	ldrb	r3, [r3, #1]
 800582a:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d179      	bne.n	800592a <_UG_ProcessTouchData+0x142>
 8005836:	7bfb      	ldrb	r3, [r7, #15]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d074      	beq.n	800592a <_UG_ProcessTouchData+0x142>
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d06f      	beq.n	800592a <_UG_ProcessTouchData+0x142>
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d16a      	bne.n	800592a <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8005854:	7dfb      	ldrb	r3, [r7, #23]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d047      	beq.n	80058ea <_UG_ProcessTouchData+0x102>
 800585a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800585e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005862:	d042      	beq.n	80058ea <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8005864:	7f7b      	ldrb	r3, [r7, #29]
 8005866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d107      	bne.n	800587e <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 800586e:	7f7b      	ldrb	r3, [r7, #29]
 8005870:	f043 0305 	orr.w	r3, r3, #5
 8005874:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8005876:	7f7b      	ldrb	r3, [r7, #29]
 8005878:	f023 0318 	bic.w	r3, r3, #24
 800587c:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 800587e:	7f7b      	ldrb	r3, [r7, #29]
 8005880:	f023 0320 	bic.w	r3, r3, #32
 8005884:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800588c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005890:	429a      	cmp	r2, r3
 8005892:	db25      	blt.n	80058e0 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800589a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800589e:	429a      	cmp	r2, r3
 80058a0:	dc1e      	bgt.n	80058e0 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80058a8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	db17      	blt.n	80058e0 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80058b6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	dc10      	bgt.n	80058e0 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 80058be:	7f7b      	ldrb	r3, [r7, #29]
 80058c0:	f043 0320 	orr.w	r3, r3, #32
 80058c4:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 80058c6:	7f7b      	ldrb	r3, [r7, #29]
 80058c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d107      	bne.n	80058e0 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 80058d0:	7f7b      	ldrb	r3, [r7, #29]
 80058d2:	f023 0304 	bic.w	r3, r3, #4
 80058d6:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 80058d8:	7f7b      	ldrb	r3, [r7, #29]
 80058da:	f043 0302 	orr.w	r3, r3, #2
 80058de:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 80058e0:	7f7b      	ldrb	r3, [r7, #29]
 80058e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e6:	777b      	strb	r3, [r7, #29]
 80058e8:	e01f      	b.n	800592a <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 80058ea:	7f7b      	ldrb	r3, [r7, #29]
 80058ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01a      	beq.n	800592a <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 80058f4:	7f7b      	ldrb	r3, [r7, #29]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d004      	beq.n	8005908 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 80058fe:	7f7b      	ldrb	r3, [r7, #29]
 8005900:	f043 0308 	orr.w	r3, r3, #8
 8005904:	777b      	strb	r3, [r7, #29]
 8005906:	e003      	b.n	8005910 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8005908:	7f7b      	ldrb	r3, [r7, #29]
 800590a:	f043 0310 	orr.w	r3, r3, #16
 800590e:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8005910:	7f7b      	ldrb	r3, [r7, #29]
 8005912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 800591a:	7f7b      	ldrb	r3, [r7, #29]
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8005922:	7f7b      	ldrb	r3, [r7, #29]
 8005924:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 8005928:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	7f7a      	ldrb	r2, [r7, #29]
 800592e:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8005930:	8bfb      	ldrh	r3, [r7, #30]
 8005932:	3301      	adds	r3, #1
 8005934:	83fb      	strh	r3, [r7, #30]
 8005936:	8bfa      	ldrh	r2, [r7, #30]
 8005938:	8abb      	ldrh	r3, [r7, #20]
 800593a:	429a      	cmp	r2, r3
 800593c:	f4ff af6a 	bcc.w	8005814 <_UG_ProcessTouchData+0x2c>
   }
}
 8005940:	bf00      	nop
 8005942:	bf00      	nop
 8005944:	3724      	adds	r7, #36	; 0x24
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20000a88 	.word	0x20000a88

08005954 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8005962:	2300      	movs	r3, #0
 8005964:	82fb      	strh	r3, [r7, #22]
 8005966:	e035      	b.n	80059d4 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	8afb      	ldrh	r3, [r7, #22]
 800596e:	015b      	lsls	r3, r3, #5
 8005970:	4413      	add	r3, r2
 8005972:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	785b      	ldrb	r3, [r3, #1]
 800597e:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8005980:	7bfb      	ldrb	r3, [r7, #15]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d121      	bne.n	80059ce <_UG_UpdateObjects+0x7a>
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d01c      	beq.n	80059ce <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8005994:	7bfb      	ldrb	r3, [r7, #15]
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d004      	beq.n	80059a8 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	6939      	ldr	r1, [r7, #16]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00d      	beq.n	80059ce <_UG_UpdateObjects+0x7a>
 80059b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	da09      	bge.n	80059ce <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 80059ba:	7bbb      	ldrb	r3, [r7, #14]
 80059bc:	f003 0341 	and.w	r3, r3, #65	; 0x41
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	6939      	ldr	r1, [r7, #16]
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 80059ce:	8afb      	ldrh	r3, [r7, #22]
 80059d0:	3301      	adds	r3, #1
 80059d2:	82fb      	strh	r3, [r7, #22]
 80059d4:	8afa      	ldrh	r2, [r7, #22]
 80059d6:	8abb      	ldrh	r3, [r7, #20]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d3c5      	bcc.n	8005968 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 80059f0:	4b22      	ldr	r3, [pc, #136]	; (8005a7c <_UG_HandleEvents+0x94>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 80059f6:	4b21      	ldr	r3, [pc, #132]	; (8005a7c <_UG_HandleEvents+0x94>)
 80059f8:	2202      	movs	r2, #2
 80059fa:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8005a02:	2300      	movs	r3, #0
 8005a04:	82fb      	strh	r3, [r7, #22]
 8005a06:	e02f      	b.n	8005a68 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	8afb      	ldrh	r3, [r7, #22]
 8005a0e:	015b      	lsls	r3, r3, #5
 8005a10:	4413      	add	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d11e      	bne.n	8005a62 <_UG_HandleEvents+0x7a>
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d019      	beq.n	8005a62 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	7e9b      	ldrb	r3, [r3, #26]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d015      	beq.n	8005a62 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8005a36:	4a11      	ldr	r2, [pc, #68]	; (8005a7c <_UG_HandleEvents+0x94>)
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	7e1a      	ldrb	r2, [r3, #24]
 8005a40:	4b0e      	ldr	r3, [pc, #56]	; (8005a7c <_UG_HandleEvents+0x94>)
 8005a42:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	7e5a      	ldrb	r2, [r3, #25]
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <_UG_HandleEvents+0x94>)
 8005a4a:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	7e9a      	ldrb	r2, [r3, #26]
 8005a50:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <_UG_HandleEvents+0x94>)
 8005a52:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a58:	4808      	ldr	r0, [pc, #32]	; (8005a7c <_UG_HandleEvents+0x94>)
 8005a5a:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8005a62:	8afb      	ldrh	r3, [r7, #22]
 8005a64:	3301      	adds	r3, #1
 8005a66:	82fb      	strh	r3, [r7, #22]
 8005a68:	8afa      	ldrh	r2, [r7, #22]
 8005a6a:	8abb      	ldrh	r3, [r7, #20]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d3cb      	bcc.n	8005a08 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8005a70:	bf00      	nop
 8005a72:	bf00      	nop
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000a9c 	.word	0x20000a9c

08005a80 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8005a80:	b590      	push	{r4, r7, lr}
 8005a82:	b08f      	sub	sp, #60	; 0x3c
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 812c 	beq.w	8005cea <_UG_PutText+0x26a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 8127 	beq.w	8005cea <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	89db      	ldrh	r3, [r3, #14]
 8005aa0:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	895b      	ldrh	r3, [r3, #10]
 8005aa6:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	3302      	adds	r3, #2
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 8005ab2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8005ab6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005aba:	1ad2      	subs	r2, r2, r3
 8005abc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	f2c0 8114 	blt.w	8005cee <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	891b      	ldrh	r3, [r3, #8]
 8005aca:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	899b      	ldrh	r3, [r3, #12]
 8005ad0:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	7d1b      	ldrb	r3, [r3, #20]
 8005ad6:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	8adb      	ldrh	r3, [r3, #22]
 8005adc:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	8b1b      	ldrh	r3, [r3, #24]
 8005ae2:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff fb92 	bl	800521c <_UG_FontSelect>

   rc=1;
 8005af8:	2301      	movs	r3, #1
 8005afa:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005b00:	4b80      	ldr	r3, [pc, #512]	; (8005d04 <_UG_PutText+0x284>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d107      	bne.n	8005b1c <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8005b0c:	f107 0308 	add.w	r3, r7, #8
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff f9bf 	bl	8004e94 <_UG_DecodeUTF8>
 8005b16:	4603      	mov	r3, r0
 8005b18:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005b1a:	e004      	b.n	8005b26 <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	60ba      	str	r2, [r7, #8]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8005b26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d006      	beq.n	8005b3a <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8005b2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b2e:	2b0a      	cmp	r3, #10
 8005b30:	d1e6      	bne.n	8005b00 <_UG_PutText+0x80>
 8005b32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b34:	3301      	adds	r3, #1
 8005b36:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005b38:	e7e2      	b.n	8005b00 <_UG_PutText+0x80>
     if(!chr) break;
 8005b3a:	bf00      	nop
   }

   yp = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8005b40:	7e7b      	ldrb	r3, [r7, #25]
 8005b42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d01f      	beq.n	8005b8a <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8005b4a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005b4c:	8c3b      	ldrh	r3, [r7, #32]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3301      	adds	r3, #1
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8005b58:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005b5a:	8bfb      	ldrh	r3, [r7, #30]
 8005b5c:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8005b5e:	fb11 f303 	smulbb	r3, r1, r3
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8005b6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005b6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b299      	uxth	r1, r3
 8005b72:	8abb      	ldrh	r3, [r7, #20]
 8005b74:	fb11 f303 	smulbb	r3, r1, r3
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8005b80:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f2c0 80b4 	blt.w	8005cf2 <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8005b8a:	7e7b      	ldrb	r3, [r7, #25]
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <_UG_PutText+0x11c>
 8005b94:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005b98:	105b      	asrs	r3, r3, #1
 8005b9a:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8005b9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005b9e:	8c3b      	ldrh	r3, [r7, #32]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005bb2:	4b54      	ldr	r3, [pc, #336]	; (8005d04 <_UG_PutText+0x284>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d107      	bne.n	8005bce <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 8005bbe:	f107 0308 	add.w	r3, r7, #8
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff f966 	bl	8004e94 <_UG_DecodeUTF8>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005bcc:	e004      	b.n	8005bd8 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	60ba      	str	r2, [r7, #8]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8005bd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d01b      	beq.n	8005c16 <_UG_PutText+0x196>
 8005bde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005be0:	2b0a      	cmp	r3, #10
 8005be2:	d018      	beq.n	8005c16 <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8005be4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005be6:	2100      	movs	r1, #0
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff f9cb 	bl	8004f84 <_UG_GetCharData>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 8005bf2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfa:	d00a      	beq.n	8005c12 <_UG_PutText+0x192>
         sl++;
 8005bfc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005bfe:	3301      	adds	r3, #1
 8005c00:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 8005c02:	8a7a      	ldrh	r2, [r7, #18]
 8005c04:	8afb      	ldrh	r3, [r7, #22]
 8005c06:	4413      	add	r3, r2
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c0c:	4413      	add	r3, r2
 8005c0e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005c10:	e7cf      	b.n	8005bb2 <_UG_PutText+0x132>
         if (w == -1){continue;}
 8005c12:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005c14:	e7cd      	b.n	8005bb2 <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 8005c16:	8afb      	ldrh	r3, [r7, #22]
 8005c18:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8005c1e:	8b7a      	ldrh	r2, [r7, #26]
 8005c20:	8bbb      	ldrh	r3, [r7, #28]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3301      	adds	r3, #1
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8005c2c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005c2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 8005c36:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	db5b      	blt.n	8005cf6 <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8005c3e:	7e7b      	ldrb	r3, [r7, #25]
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <_UG_PutText+0x1ce>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	853b      	strh	r3, [r7, #40]	; 0x28
 8005c4c:	e008      	b.n	8005c60 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8005c4e:	7e7b      	ldrb	r3, [r7, #25]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d003      	beq.n	8005c60 <_UG_PutText+0x1e0>
 8005c58:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8005c5c:	105b      	asrs	r3, r3, #1
 8005c5e:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8005c60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005c62:	8bbb      	ldrh	r3, [r7, #28]
 8005c64:	4413      	add	r3, r2
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005c6a:	4b26      	ldr	r3, [pc, #152]	; (8005d04 <_UG_PutText+0x284>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d107      	bne.n	8005c86 <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 8005c76:	f107 030c 	add.w	r3, r7, #12
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff f90a 	bl	8004e94 <_UG_DecodeUTF8>
 8005c80:	4603      	mov	r3, r0
 8005c82:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005c84:	e004      	b.n	8005c90 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	60fa      	str	r2, [r7, #12]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8005c90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d031      	beq.n	8005cfa <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 8005c96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c98:	2b0a      	cmp	r3, #10
 8005c9a:	d01c      	beq.n	8005cd6 <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	8a1c      	ldrh	r4, [r3, #16]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	8a5b      	ldrh	r3, [r3, #18]
 8005ca4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8005ca8:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8005cac:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	4623      	mov	r3, r4
 8005cb2:	f7ff fb35 	bl	8005320 <_UG_PutChar>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8005cba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc2:	d0d2      	beq.n	8005c6a <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8005cc4:	8a7a      	ldrh	r2, [r7, #18]
 8005cc6:	8afb      	ldrh	r3, [r7, #22]
 8005cc8:	4413      	add	r3, r2
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cce:	4413      	add	r3, r2
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005cd4:	e7c9      	b.n	8005c6a <_UG_PutText+0x1ea>
           break;
 8005cd6:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8005cd8:	8bfa      	ldrh	r2, [r7, #30]
 8005cda:	8abb      	ldrh	r3, [r7, #20]
 8005cdc:	4413      	add	r3, r2
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ce2:	4413      	add	r3, r2
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8005ce8:	e75d      	b.n	8005ba6 <_UG_PutText+0x126>
     return;
 8005cea:	bf00      	nop
 8005cec:	e006      	b.n	8005cfc <_UG_PutText+0x27c>
     return;
 8005cee:	bf00      	nop
 8005cf0:	e004      	b.n	8005cfc <_UG_PutText+0x27c>
        return;
 8005cf2:	bf00      	nop
 8005cf4:	e002      	b.n	8005cfc <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 8005cf6:	bf00      	nop
 8005cf8:	e000      	b.n	8005cfc <_UG_PutText+0x27c>
           return;
 8005cfa:	bf00      	nop
   }
}
 8005cfc:	3734      	adds	r7, #52	; 0x34
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd90      	pop	{r4, r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20000a88 	.word	0x20000a88

08005d08 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8005d08:	b5b0      	push	{r4, r5, r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	4604      	mov	r4, r0
 8005d10:	4608      	mov	r0, r1
 8005d12:	4611      	mov	r1, r2
 8005d14:	461a      	mov	r2, r3
 8005d16:	4623      	mov	r3, r4
 8005d18:	80fb      	strh	r3, [r7, #6]
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	80bb      	strh	r3, [r7, #4]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	807b      	strh	r3, [r7, #2]
 8005d22:	4613      	mov	r3, r2
 8005d24:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8005d26:	887b      	ldrh	r3, [r7, #2]
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	b21c      	sxth	r4, r3
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	1c9a      	adds	r2, r3, #2
 8005d32:	61ba      	str	r2, [r7, #24]
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005d3a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005d3e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	4613      	mov	r3, r2
 8005d46:	4622      	mov	r2, r4
 8005d48:	f7fe fe92 	bl	8004a70 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8005d4c:	88bb      	ldrh	r3, [r7, #4]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	b219      	sxth	r1, r3
 8005d54:	883b      	ldrh	r3, [r7, #0]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	b21c      	sxth	r4, r3
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	1c9a      	adds	r2, r3, #2
 8005d60:	61ba      	str	r2, [r7, #24]
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d68:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	4623      	mov	r3, r4
 8005d70:	f7fe fe7e 	bl	8004a70 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	1c9a      	adds	r2, r3, #2
 8005d78:	61ba      	str	r2, [r7, #24]
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005d80:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005d84:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005d88:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	4623      	mov	r3, r4
 8005d90:	f7fe fe6e 	bl	8004a70 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8005d94:	883b      	ldrh	r3, [r7, #0]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	b21c      	sxth	r4, r3
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	1c9a      	adds	r2, r3, #2
 8005da0:	61ba      	str	r2, [r7, #24]
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005da8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005dac:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	4623      	mov	r3, r4
 8005db4:	f7fe fe5c 	bl	8004a70 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	b218      	sxth	r0, r3
 8005dc0:	88bb      	ldrh	r3, [r7, #4]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	b219      	sxth	r1, r3
 8005dc8:	887b      	ldrh	r3, [r7, #2]
 8005dca:	3b02      	subs	r3, #2
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	b21c      	sxth	r4, r3
 8005dd0:	88bb      	ldrh	r3, [r7, #4]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	b21d      	sxth	r5, r3
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	1c9a      	adds	r2, r3, #2
 8005ddc:	61ba      	str	r2, [r7, #24]
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	462b      	mov	r3, r5
 8005de4:	4622      	mov	r2, r4
 8005de6:	f7fe fe43 	bl	8004a70 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8005dea:	88fb      	ldrh	r3, [r7, #6]
 8005dec:	3301      	adds	r3, #1
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	b218      	sxth	r0, r3
 8005df2:	88bb      	ldrh	r3, [r7, #4]
 8005df4:	3302      	adds	r3, #2
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	b219      	sxth	r1, r3
 8005dfa:	88fb      	ldrh	r3, [r7, #6]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	b21c      	sxth	r4, r3
 8005e02:	883b      	ldrh	r3, [r7, #0]
 8005e04:	3b02      	subs	r3, #2
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	b21d      	sxth	r5, r3
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	1c9a      	adds	r2, r3, #2
 8005e0e:	61ba      	str	r2, [r7, #24]
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	462b      	mov	r3, r5
 8005e16:	4622      	mov	r2, r4
 8005e18:	f7fe fe2a 	bl	8004a70 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8005e1c:	88fb      	ldrh	r3, [r7, #6]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	b218      	sxth	r0, r3
 8005e24:	883b      	ldrh	r3, [r7, #0]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	b219      	sxth	r1, r3
 8005e2c:	887b      	ldrh	r3, [r7, #2]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	b21c      	sxth	r4, r3
 8005e34:	883b      	ldrh	r3, [r7, #0]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	b21d      	sxth	r5, r3
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	1c9a      	adds	r2, r3, #2
 8005e40:	61ba      	str	r2, [r7, #24]
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	462b      	mov	r3, r5
 8005e48:	4622      	mov	r2, r4
 8005e4a:	f7fe fe11 	bl	8004a70 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8005e4e:	887b      	ldrh	r3, [r7, #2]
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	b218      	sxth	r0, r3
 8005e56:	88bb      	ldrh	r3, [r7, #4]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	b219      	sxth	r1, r3
 8005e5e:	887b      	ldrh	r3, [r7, #2]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	b21c      	sxth	r4, r3
 8005e66:	883b      	ldrh	r3, [r7, #0]
 8005e68:	3b02      	subs	r3, #2
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	b21d      	sxth	r5, r3
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	1c9a      	adds	r2, r3, #2
 8005e72:	61ba      	str	r2, [r7, #24]
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	462b      	mov	r3, r5
 8005e7a:	4622      	mov	r2, r4
 8005e7c:	f7fe fdf8 	bl	8004a70 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8005e80:	88fb      	ldrh	r3, [r7, #6]
 8005e82:	3302      	adds	r3, #2
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	b218      	sxth	r0, r3
 8005e88:	88bb      	ldrh	r3, [r7, #4]
 8005e8a:	3302      	adds	r3, #2
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	b219      	sxth	r1, r3
 8005e90:	887b      	ldrh	r3, [r7, #2]
 8005e92:	3b03      	subs	r3, #3
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	b21c      	sxth	r4, r3
 8005e98:	88bb      	ldrh	r3, [r7, #4]
 8005e9a:	3302      	adds	r3, #2
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	b21d      	sxth	r5, r3
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	1c9a      	adds	r2, r3, #2
 8005ea4:	61ba      	str	r2, [r7, #24]
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	462b      	mov	r3, r5
 8005eac:	4622      	mov	r2, r4
 8005eae:	f7fe fddf 	bl	8004a70 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8005eb2:	88fb      	ldrh	r3, [r7, #6]
 8005eb4:	3302      	adds	r3, #2
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	b218      	sxth	r0, r3
 8005eba:	88bb      	ldrh	r3, [r7, #4]
 8005ebc:	3303      	adds	r3, #3
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	b219      	sxth	r1, r3
 8005ec2:	88fb      	ldrh	r3, [r7, #6]
 8005ec4:	3302      	adds	r3, #2
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	b21c      	sxth	r4, r3
 8005eca:	883b      	ldrh	r3, [r7, #0]
 8005ecc:	3b03      	subs	r3, #3
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	b21d      	sxth	r5, r3
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	1c9a      	adds	r2, r3, #2
 8005ed6:	61ba      	str	r2, [r7, #24]
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	462b      	mov	r3, r5
 8005ede:	4622      	mov	r2, r4
 8005ee0:	f7fe fdc6 	bl	8004a70 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8005ee4:	88fb      	ldrh	r3, [r7, #6]
 8005ee6:	3302      	adds	r3, #2
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	b218      	sxth	r0, r3
 8005eec:	883b      	ldrh	r3, [r7, #0]
 8005eee:	3b02      	subs	r3, #2
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	b219      	sxth	r1, r3
 8005ef4:	887b      	ldrh	r3, [r7, #2]
 8005ef6:	3b02      	subs	r3, #2
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	b21c      	sxth	r4, r3
 8005efc:	883b      	ldrh	r3, [r7, #0]
 8005efe:	3b02      	subs	r3, #2
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	b21d      	sxth	r5, r3
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	1c9a      	adds	r2, r3, #2
 8005f08:	61ba      	str	r2, [r7, #24]
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	462b      	mov	r3, r5
 8005f10:	4622      	mov	r2, r4
 8005f12:	f7fe fdad 	bl	8004a70 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8005f16:	887b      	ldrh	r3, [r7, #2]
 8005f18:	3b02      	subs	r3, #2
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	b218      	sxth	r0, r3
 8005f1e:	88bb      	ldrh	r3, [r7, #4]
 8005f20:	3302      	adds	r3, #2
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	b219      	sxth	r1, r3
 8005f26:	887b      	ldrh	r3, [r7, #2]
 8005f28:	3b02      	subs	r3, #2
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	b21a      	sxth	r2, r3
 8005f2e:	883b      	ldrh	r3, [r7, #0]
 8005f30:	3b03      	subs	r3, #3
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	b21c      	sxth	r4, r3
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	4623      	mov	r3, r4
 8005f3e:	f7fe fd97 	bl	8004a70 <UG_DrawLine>
}
 8005f42:	bf00      	nop
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005f4c <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4603      	mov	r3, r0
 8005f54:	6039      	str	r1, [r7, #0]
 8005f56:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d810      	bhi.n	8005f80 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8005f5e:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <UG_DriverRegister+0x40>)
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	79fb      	ldrb	r3, [r7, #7]
 8005f64:	330a      	adds	r3, #10
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	4413      	add	r3, r2
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8005f6e:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <UG_DriverRegister+0x40>)
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	79fb      	ldrb	r3, [r7, #7]
 8005f74:	330a      	adds	r3, #10
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	4413      	add	r3, r2
 8005f7a:	2203      	movs	r2, #3
 8005f7c:	721a      	strb	r2, [r3, #8]
 8005f7e:	e000      	b.n	8005f82 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8005f80:	bf00      	nop
}
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	20000a88 	.word	0x20000a88

08005f90 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8005f96:	4b5e      	ldr	r3, [pc, #376]	; (8006110 <UG_Update+0x180>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <UG_Update+0x2c>
 8005fa6:	4b5a      	ldr	r3, [pc, #360]	; (8006110 <UG_Update+0x180>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8005fae:	4b58      	ldr	r3, [pc, #352]	; (8006110 <UG_Update+0x180>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0201 	bic.w	r2, r2, #1
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8005fbc:	4b54      	ldr	r3, [pc, #336]	; (8006110 <UG_Update+0x180>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	4b53      	ldr	r3, [pc, #332]	; (8006110 <UG_Update+0x180>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d071      	beq.n	80060b0 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8005fcc:	4b50      	ldr	r3, [pc, #320]	; (8006110 <UG_Update+0x180>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d06c      	beq.n	80060b0 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8005fd6:	4b4e      	ldr	r3, [pc, #312]	; (8006110 <UG_Update+0x180>)
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	4b4d      	ldr	r3, [pc, #308]	; (8006110 <UG_Update+0x180>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6912      	ldr	r2, [r2, #16]
 8005fe0:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8005fe2:	4b4b      	ldr	r3, [pc, #300]	; (8006110 <UG_Update+0x180>)
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4b4a      	ldr	r3, [pc, #296]	; (8006110 <UG_Update+0x180>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68d2      	ldr	r2, [r2, #12]
 8005fec:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8005fee:	4b48      	ldr	r3, [pc, #288]	; (8006110 <UG_Update+0x180>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d045      	beq.n	8006084 <UG_Update+0xf4>
 8005ff8:	4b45      	ldr	r3, [pc, #276]	; (8006110 <UG_Update+0x180>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	7d9b      	ldrb	r3, [r3, #22]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d03d      	beq.n	8006084 <UG_Update+0xf4>
 8006008:	4b41      	ldr	r3, [pc, #260]	; (8006110 <UG_Update+0x180>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	7a1b      	ldrb	r3, [r3, #8]
 8006010:	f003 0308 	and.w	r3, r3, #8
 8006014:	2b00      	cmp	r3, #0
 8006016:	d035      	beq.n	8006084 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8006018:	4b3d      	ldr	r3, [pc, #244]	; (8006110 <UG_Update+0x180>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8006022:	4b3b      	ldr	r3, [pc, #236]	; (8006110 <UG_Update+0x180>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800602c:	429a      	cmp	r2, r3
 800602e:	d123      	bne.n	8006078 <UG_Update+0xe8>
 8006030:	4b37      	ldr	r3, [pc, #220]	; (8006110 <UG_Update+0x180>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800603a:	4b35      	ldr	r3, [pc, #212]	; (8006110 <UG_Update+0x180>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006044:	429a      	cmp	r2, r3
 8006046:	d117      	bne.n	8006078 <UG_Update+0xe8>
 8006048:	4b31      	ldr	r3, [pc, #196]	; (8006110 <UG_Update+0x180>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8006052:	4b2f      	ldr	r3, [pc, #188]	; (8006110 <UG_Update+0x180>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800605c:	429a      	cmp	r2, r3
 800605e:	d10b      	bne.n	8006078 <UG_Update+0xe8>
 8006060:	4b2b      	ldr	r3, [pc, #172]	; (8006110 <UG_Update+0x180>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800606a:	4b29      	ldr	r3, [pc, #164]	; (8006110 <UG_Update+0x180>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006074:	429a      	cmp	r2, r3
 8006076:	d005      	beq.n	8006084 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8006078:	4b25      	ldr	r3, [pc, #148]	; (8006110 <UG_Update+0x180>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	4618      	mov	r0, r3
 8006080:	f000 f848 	bl	8006114 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8006084:	4b22      	ldr	r3, [pc, #136]	; (8006110 <UG_Update+0x180>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	7a1a      	ldrb	r2, [r3, #8]
 800608c:	4b20      	ldr	r3, [pc, #128]	; (8006110 <UG_Update+0x180>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 800609a:	4b1d      	ldr	r3, [pc, #116]	; (8006110 <UG_Update+0x180>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	7a1a      	ldrb	r2, [r3, #8]
 80060a2:	4b1b      	ldr	r3, [pc, #108]	; (8006110 <UG_Update+0x180>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 80060b0:	4b17      	ldr	r3, [pc, #92]	; (8006110 <UG_Update+0x180>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d01b      	beq.n	80060f2 <UG_Update+0x162>
   {
      wnd = gui->active_window;
 80060ba:	4b15      	ldr	r3, [pc, #84]	; (8006110 <UG_Update+0x180>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	7a1b      	ldrb	r3, [r3, #8]
 80060c6:	f003 0320 	and.w	r3, r3, #32
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f8ca 	bl	8006268 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	7a1b      	ldrb	r3, [r3, #8]
 80060d8:	f003 0308 	and.w	r3, r3, #8
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d008      	beq.n	80060f2 <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff fb81 	bl	80057e8 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7ff fc34 	bl	8005954 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff fc7b 	bl	80059e8 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 80060f2:	4b07      	ldr	r3, [pc, #28]	; (8006110 <UG_Update+0x180>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d004      	beq.n	8006108 <UG_Update+0x178>
     gui->device->flush();
 80060fe:	4b04      	ldr	r3, [pc, #16]	; (8006110 <UG_Update+0x180>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	4798      	blx	r3
   }
}
 8006108:	bf00      	nop
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	20000a88 	.word	0x20000a88

08006114 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8006114:	b590      	push	{r4, r7, lr}
 8006116:	b08f      	sub	sp, #60	; 0x3c
 8006118:	af02      	add	r7, sp, #8
 800611a:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 809a 	beq.w	8006258 <_UG_WindowDrawTitle+0x144>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	7a1b      	ldrb	r3, [r3, #8]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 8093 	beq.w	8006258 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	89db      	ldrh	r3, [r3, #14]
 8006136:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	8a1b      	ldrh	r3, [r3, #16]
 800613c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	8a5b      	ldrh	r3, [r3, #18]
 8006142:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	8a9b      	ldrh	r3, [r3, #20]
 8006148:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	7d9b      	ldrb	r3, [r3, #22]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00f      	beq.n	8006176 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8006156:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006158:	3303      	adds	r3, #3
 800615a:	b29b      	uxth	r3, r3
 800615c:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 800615e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006160:	3303      	adds	r3, #3
 8006162:	b29b      	uxth	r3, r3
 8006164:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 8006166:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006168:	3b03      	subs	r3, #3
 800616a:	b29b      	uxth	r3, r3
 800616c:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 800616e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006170:	3b03      	subs	r3, #3
 8006172:	b29b      	uxth	r3, r3
 8006174:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8006176:	4b3b      	ldr	r3, [pc, #236]	; (8006264 <_UG_WindowDrawTitle+0x150>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	429a      	cmp	r2, r3
 8006180:	d106      	bne.n	8006190 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006186:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800618c:	83bb      	strh	r3, [r7, #28]
 800618e:	e005      	b.n	800619c <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006194:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619a:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061a6:	4413      	add	r3, r2
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	b21c      	sxth	r4, r3
 80061b0:	8bfb      	ldrh	r3, [r7, #30]
 80061b2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80061b6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80061ba:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	4623      	mov	r3, r4
 80061c2:	f7fe fbff 	bl	80049c4 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 80061d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061d4:	3303      	adds	r3, #3
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	b21b      	sxth	r3, r3
 80061da:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 80061dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061de:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 80061e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80061e2:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061ee:	4413      	add	r3, r2
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	b21b      	sxth	r3, r3
 80061f8:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006200:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800620a:	b21b      	sxth	r3, r3
 800620c:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8006214:	b21b      	sxth	r3, r3
 8006216:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 8006218:	f107 030c 	add.w	r3, r7, #12
 800621c:	4618      	mov	r0, r3
 800621e:	f7ff fc2f 	bl	8005a80 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006228:	b29a      	uxth	r2, r3
 800622a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800622c:	4413      	add	r3, r2
 800622e:	b29b      	uxth	r3, r3
 8006230:	b219      	sxth	r1, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006238:	b29a      	uxth	r2, r3
 800623a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800623c:	4413      	add	r3, r2
 800623e:	b29b      	uxth	r3, r3
 8006240:	b21b      	sxth	r3, r3
 8006242:	f649 5413 	movw	r4, #40211	; 0x9d13
 8006246:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800624a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800624e:	9400      	str	r4, [sp, #0]
 8006250:	f7fe fc0e 	bl	8004a70 <UG_DrawLine>
      return UG_RESULT_OK;
 8006254:	2300      	movs	r3, #0
 8006256:	e001      	b.n	800625c <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8006258:	f04f 33ff 	mov.w	r3, #4294967295
}
 800625c:	4618      	mov	r0, r3
 800625e:	3734      	adds	r7, #52	; 0x34
 8006260:	46bd      	mov	sp, r7
 8006262:	bd90      	pop	{r4, r7, pc}
 8006264:	20000a88 	.word	0x20000a88

08006268 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8006268:	b590      	push	{r4, r7, lr}
 800626a:	b089      	sub	sp, #36	; 0x24
 800626c:	af02      	add	r7, sp, #8
 800626e:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	89db      	ldrh	r3, [r3, #14]
 8006274:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	8a1b      	ldrh	r3, [r3, #16]
 800627a:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	8a5b      	ldrh	r3, [r3, #18]
 8006280:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	8a9b      	ldrh	r3, [r3, #20]
 8006286:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	7a1b      	ldrb	r3, [r3, #8]
 800628c:	f023 0320 	bic.w	r3, r3, #32
 8006290:	b2da      	uxtb	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	7a1b      	ldrb	r3, [r3, #8]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 8084 	beq.w	80063ac <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	7d9b      	ldrb	r3, [r3, #22]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d021      	beq.n	80062f4 <_UG_WindowUpdate+0x8c>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	7a1b      	ldrb	r3, [r3, #8]
 80062b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d11b      	bne.n	80062f4 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 80062bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80062c0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80062c4:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80062c8:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80062cc:	4c43      	ldr	r4, [pc, #268]	; (80063dc <_UG_WindowUpdate+0x174>)
 80062ce:	9400      	str	r4, [sp, #0]
 80062d0:	f7ff fd1a 	bl	8005d08 <_UG_DrawObjectFrame>
         xs+=3;
 80062d4:	8abb      	ldrh	r3, [r7, #20]
 80062d6:	3303      	adds	r3, #3
 80062d8:	b29b      	uxth	r3, r3
 80062da:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 80062dc:	8a7b      	ldrh	r3, [r7, #18]
 80062de:	3303      	adds	r3, #3
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	827b      	strh	r3, [r7, #18]
         xe-=3;
 80062e4:	8a3b      	ldrh	r3, [r7, #16]
 80062e6:	3b03      	subs	r3, #3
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	823b      	strh	r3, [r7, #16]
         ye-=3;
 80062ec:	89fb      	ldrh	r3, [r7, #14]
 80062ee:	3b03      	subs	r3, #3
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	7d9b      	ldrb	r3, [r3, #22]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01a      	beq.n	8006336 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff ff07 	bl	8006114 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800630c:	b29a      	uxth	r2, r3
 800630e:	8a7b      	ldrh	r3, [r7, #18]
 8006310:	4413      	add	r3, r2
 8006312:	b29b      	uxth	r3, r3
 8006314:	3301      	adds	r3, #1
 8006316:	b29b      	uxth	r3, r3
 8006318:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	7a1b      	ldrb	r3, [r3, #8]
 800631e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	d007      	beq.n	8006336 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	7a1b      	ldrb	r3, [r3, #8]
 800632a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800632e:	b2da      	uxtb	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	721a      	strb	r2, [r3, #8]
            return;
 8006334:	e04e      	b.n	80063d4 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	899b      	ldrh	r3, [r3, #12]
 800633a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800633e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006342:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8006346:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	4623      	mov	r3, r4
 800634e:	f7fe fb39 	bl	80049c4 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8006358:	2300      	movs	r3, #0
 800635a:	82fb      	strh	r3, [r7, #22]
 800635c:	e021      	b.n	80063a2 <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	8afb      	ldrh	r3, [r7, #22]
 8006364:	015b      	lsls	r3, r3, #5
 8006366:	4413      	add	r3, r2
 8006368:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d112      	bne.n	800639c <_UG_WindowUpdate+0x134>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00c      	beq.n	800639c <_UG_WindowUpdate+0x134>
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	f003 0308 	and.w	r3, r3, #8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d006      	beq.n	800639c <_UG_WindowUpdate+0x134>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006396:	b2da      	uxtb	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 800639c:	8afb      	ldrh	r3, [r7, #22]
 800639e:	3301      	adds	r3, #1
 80063a0:	82fb      	strh	r3, [r7, #22]
 80063a2:	8afa      	ldrh	r2, [r7, #22]
 80063a4:	89bb      	ldrh	r3, [r7, #12]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d3d9      	bcc.n	800635e <_UG_WindowUpdate+0xf6>
 80063aa:	e013      	b.n	80063d4 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 80063c4:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <_UG_WindowUpdate+0x178>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	4623      	mov	r3, r4
 80063d0:	f7fe faf8 	bl	80049c4 <UG_FillFrame>
   }
}
 80063d4:	371c      	adds	r7, #28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd90      	pop	{r4, r7, pc}
 80063da:	bf00      	nop
 80063dc:	08017668 	.word	0x08017668
 80063e0:	20000a88 	.word	0x20000a88

080063e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80063e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800641c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80063e8:	f7fe f9f4 	bl	80047d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80063ec:	480c      	ldr	r0, [pc, #48]	; (8006420 <LoopForever+0x6>)
  ldr r1, =_edata
 80063ee:	490d      	ldr	r1, [pc, #52]	; (8006424 <LoopForever+0xa>)
  ldr r2, =_sidata
 80063f0:	4a0d      	ldr	r2, [pc, #52]	; (8006428 <LoopForever+0xe>)
  movs r3, #0
 80063f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80063f4:	e002      	b.n	80063fc <LoopCopyDataInit>

080063f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80063f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80063f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80063fa:	3304      	adds	r3, #4

080063fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80063fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80063fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006400:	d3f9      	bcc.n	80063f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006402:	4a0a      	ldr	r2, [pc, #40]	; (800642c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006404:	4c0a      	ldr	r4, [pc, #40]	; (8006430 <LoopForever+0x16>)
  movs r3, #0
 8006406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006408:	e001      	b.n	800640e <LoopFillZerobss>

0800640a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800640a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800640c:	3204      	adds	r2, #4

0800640e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800640e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006410:	d3fb      	bcc.n	800640a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006412:	f009 fec5 	bl	80101a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006416:	f7fc f87f 	bl	8002518 <main>

0800641a <LoopForever>:

LoopForever:
    b LoopForever
 800641a:	e7fe      	b.n	800641a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800641c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8006420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006424:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8006428:	08017a2c 	.word	0x08017a2c
  ldr r2, =_sbss
 800642c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8006430:	20000bf4 	.word	0x20000bf4

08006434 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006434:	e7fe      	b.n	8006434 <ADC1_IRQHandler>

08006436 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b082      	sub	sp, #8
 800643a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800643c:	2300      	movs	r3, #0
 800643e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006440:	2003      	movs	r0, #3
 8006442:	f001 f9dd 	bl	8007800 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006446:	2000      	movs	r0, #0
 8006448:	f000 f80e 	bl	8006468 <HAL_InitTick>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	71fb      	strb	r3, [r7, #7]
 8006456:	e001      	b.n	800645c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006458:	f7fd fae6 	bl	8003a28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800645c:	79fb      	ldrb	r3, [r7, #7]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006474:	4b17      	ldr	r3, [pc, #92]	; (80064d4 <HAL_InitTick+0x6c>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d023      	beq.n	80064c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800647c:	4b16      	ldr	r3, [pc, #88]	; (80064d8 <HAL_InitTick+0x70>)
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	4b14      	ldr	r3, [pc, #80]	; (80064d4 <HAL_InitTick+0x6c>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	4619      	mov	r1, r3
 8006486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800648a:	fbb3 f3f1 	udiv	r3, r3, r1
 800648e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006492:	4618      	mov	r0, r3
 8006494:	f001 f9e9 	bl	800786a <HAL_SYSTICK_Config>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10f      	bne.n	80064be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b0f      	cmp	r3, #15
 80064a2:	d809      	bhi.n	80064b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064a4:	2200      	movs	r2, #0
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	f001 f9b3 	bl	8007816 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80064b0:	4a0a      	ldr	r2, [pc, #40]	; (80064dc <HAL_InitTick+0x74>)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	e007      	b.n	80064c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	73fb      	strb	r3, [r7, #15]
 80064bc:	e004      	b.n	80064c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	73fb      	strb	r3, [r7, #15]
 80064c2:	e001      	b.n	80064c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000028 	.word	0x20000028
 80064d8:	20000020 	.word	0x20000020
 80064dc:	20000024 	.word	0x20000024

080064e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80064e4:	4b06      	ldr	r3, [pc, #24]	; (8006500 <HAL_IncTick+0x20>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	4b06      	ldr	r3, [pc, #24]	; (8006504 <HAL_IncTick+0x24>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4413      	add	r3, r2
 80064f0:	4a04      	ldr	r2, [pc, #16]	; (8006504 <HAL_IncTick+0x24>)
 80064f2:	6013      	str	r3, [r2, #0]
}
 80064f4:	bf00      	nop
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	20000028 	.word	0x20000028
 8006504:	20000aa4 	.word	0x20000aa4

08006508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006508:	b480      	push	{r7}
 800650a:	af00      	add	r7, sp, #0
  return uwTick;
 800650c:	4b03      	ldr	r3, [pc, #12]	; (800651c <HAL_GetTick+0x14>)
 800650e:	681b      	ldr	r3, [r3, #0]
}
 8006510:	4618      	mov	r0, r3
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	20000aa4 	.word	0x20000aa4

08006520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006528:	f7ff ffee 	bl	8006508 <HAL_GetTick>
 800652c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006538:	d005      	beq.n	8006546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800653a:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <HAL_Delay+0x44>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006546:	bf00      	nop
 8006548:	f7ff ffde 	bl	8006508 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	429a      	cmp	r2, r3
 8006556:	d8f7      	bhi.n	8006548 <HAL_Delay+0x28>
  {
  }
}
 8006558:	bf00      	nop
 800655a:	bf00      	nop
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000028 	.word	0x20000028

08006568 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	431a      	orrs	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	609a      	str	r2, [r3, #8]
}
 8006582:	bf00      	nop
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	431a      	orrs	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	609a      	str	r2, [r3, #8]
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	3360      	adds	r3, #96	; 0x60
 80065e2:	461a      	mov	r2, r3
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	4b08      	ldr	r3, [pc, #32]	; (8006614 <LL_ADC_SetOffset+0x44>)
 80065f2:	4013      	ands	r3, r2
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	430a      	orrs	r2, r1
 80065fe:	4313      	orrs	r3, r2
 8006600:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006608:	bf00      	nop
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	03fff000 	.word	0x03fff000

08006618 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	3360      	adds	r3, #96	; 0x60
 8006626:	461a      	mov	r2, r3
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006638:	4618      	mov	r0, r3
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	3360      	adds	r3, #96	; 0x60
 8006654:	461a      	mov	r2, r3
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	431a      	orrs	r2, r3
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800666e:	bf00      	nop
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	615a      	str	r2, [r3, #20]
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3330      	adds	r3, #48	; 0x30
 80066b0:	461a      	mov	r2, r3
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	0a1b      	lsrs	r3, r3, #8
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	f003 030c 	and.w	r3, r3, #12
 80066bc:	4413      	add	r3, r2
 80066be:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f003 031f 	and.w	r3, r3, #31
 80066ca:	211f      	movs	r1, #31
 80066cc:	fa01 f303 	lsl.w	r3, r1, r3
 80066d0:	43db      	mvns	r3, r3
 80066d2:	401a      	ands	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	0e9b      	lsrs	r3, r3, #26
 80066d8:	f003 011f 	and.w	r1, r3, #31
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f003 031f 	and.w	r3, r3, #31
 80066e2:	fa01 f303 	lsl.w	r3, r1, r3
 80066e6:	431a      	orrs	r2, r3
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80066ec:	bf00      	nop
 80066ee:	371c      	adds	r7, #28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	3314      	adds	r3, #20
 8006708:	461a      	mov	r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	0e5b      	lsrs	r3, r3, #25
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	4413      	add	r3, r2
 8006716:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	0d1b      	lsrs	r3, r3, #20
 8006720:	f003 031f 	and.w	r3, r3, #31
 8006724:	2107      	movs	r1, #7
 8006726:	fa01 f303 	lsl.w	r3, r1, r3
 800672a:	43db      	mvns	r3, r3
 800672c:	401a      	ands	r2, r3
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	0d1b      	lsrs	r3, r3, #20
 8006732:	f003 031f 	and.w	r3, r3, #31
 8006736:	6879      	ldr	r1, [r7, #4]
 8006738:	fa01 f303 	lsl.w	r3, r1, r3
 800673c:	431a      	orrs	r2, r3
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006742:	bf00      	nop
 8006744:	371c      	adds	r7, #28
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
	...

08006750 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006768:	43db      	mvns	r3, r3
 800676a:	401a      	ands	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f003 0318 	and.w	r3, r3, #24
 8006772:	4908      	ldr	r1, [pc, #32]	; (8006794 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006774:	40d9      	lsrs	r1, r3
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	400b      	ands	r3, r1
 800677a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800677e:	431a      	orrs	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006786:	bf00      	nop
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	0007ffff 	.word	0x0007ffff

08006798 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80067a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6093      	str	r3, [r2, #8]
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067d0:	d101      	bne.n	80067d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e000      	b.n	80067d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80067f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80067f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800681c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006820:	d101      	bne.n	8006826 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b01      	cmp	r3, #1
 8006846:	d101      	bne.n	800684c <LL_ADC_IsEnabled+0x18>
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <LL_ADC_IsEnabled+0x1a>
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b04      	cmp	r3, #4
 800686c:	d101      	bne.n	8006872 <LL_ADC_REG_IsConversionOngoing+0x18>
 800686e:	2301      	movs	r3, #1
 8006870:	e000      	b.n	8006874 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f003 0308 	and.w	r3, r3, #8
 8006890:	2b08      	cmp	r3, #8
 8006892:	d101      	bne.n	8006898 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006894:	2301      	movs	r3, #1
 8006896:	e000      	b.n	800689a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
	...

080068a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068b0:	2300      	movs	r3, #0
 80068b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e129      	b.n	8006b16 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d109      	bne.n	80068e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7fd f8cd 	bl	8003a70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7ff ff67 	bl	80067bc <LL_ADC_IsDeepPowerDownEnabled>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d004      	beq.n	80068fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7ff ff4d 	bl	8006798 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f7ff ff82 	bl	800680c <LL_ADC_IsInternalRegulatorEnabled>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d115      	bne.n	800693a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4618      	mov	r0, r3
 8006914:	f7ff ff66 	bl	80067e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006918:	4b81      	ldr	r3, [pc, #516]	; (8006b20 <HAL_ADC_Init+0x278>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	099b      	lsrs	r3, r3, #6
 800691e:	4a81      	ldr	r2, [pc, #516]	; (8006b24 <HAL_ADC_Init+0x27c>)
 8006920:	fba2 2303 	umull	r2, r3, r2, r3
 8006924:	099b      	lsrs	r3, r3, #6
 8006926:	3301      	adds	r3, #1
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800692c:	e002      	b.n	8006934 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3b01      	subs	r3, #1
 8006932:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1f9      	bne.n	800692e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff ff64 	bl	800680c <LL_ADC_IsInternalRegulatorEnabled>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10d      	bne.n	8006966 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800694e:	f043 0210 	orr.w	r2, r3, #16
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695a:	f043 0201 	orr.w	r2, r3, #1
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4618      	mov	r0, r3
 800696c:	f7ff ff75 	bl	800685a <LL_ADC_REG_IsConversionOngoing>
 8006970:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006976:	f003 0310 	and.w	r3, r3, #16
 800697a:	2b00      	cmp	r3, #0
 800697c:	f040 80c2 	bne.w	8006b04 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	2b00      	cmp	r3, #0
 8006984:	f040 80be 	bne.w	8006b04 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800698c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006990:	f043 0202 	orr.w	r2, r3, #2
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff ff49 	bl	8006834 <LL_ADC_IsEnabled>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10b      	bne.n	80069c0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80069a8:	485f      	ldr	r0, [pc, #380]	; (8006b28 <HAL_ADC_Init+0x280>)
 80069aa:	f7ff ff43 	bl	8006834 <LL_ADC_IsEnabled>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d105      	bne.n	80069c0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	4619      	mov	r1, r3
 80069ba:	485c      	ldr	r0, [pc, #368]	; (8006b2c <HAL_ADC_Init+0x284>)
 80069bc:	f7ff fdd4 	bl	8006568 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	7e5b      	ldrb	r3, [r3, #25]
 80069c4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80069ca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80069d0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80069d6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069de:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80069e0:	4313      	orrs	r3, r2
 80069e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d106      	bne.n	80069fc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f2:	3b01      	subs	r3, #1
 80069f4:	045b      	lsls	r3, r3, #17
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d009      	beq.n	8006a18 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a08:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a10:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	4b44      	ldr	r3, [pc, #272]	; (8006b30 <HAL_ADC_Init+0x288>)
 8006a20:	4013      	ands	r3, r2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	69b9      	ldr	r1, [r7, #24]
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff ff25 	bl	8006880 <LL_ADC_INJ_IsConversionOngoing>
 8006a36:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d140      	bne.n	8006ac0 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d13d      	bne.n	8006ac0 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	7e1b      	ldrb	r3, [r3, #24]
 8006a4c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006a4e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a56:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a66:	f023 0306 	bic.w	r3, r3, #6
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	6812      	ldr	r2, [r2, #0]
 8006a6e:	69b9      	ldr	r1, [r7, #24]
 8006a70:	430b      	orrs	r3, r1
 8006a72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d118      	bne.n	8006ab0 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a88:	f023 0304 	bic.w	r3, r3, #4
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006a94:	4311      	orrs	r1, r2
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a9a:	4311      	orrs	r1, r2
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f042 0201 	orr.w	r2, r2, #1
 8006aac:	611a      	str	r2, [r3, #16]
 8006aae:	e007      	b.n	8006ac0 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	691a      	ldr	r2, [r3, #16]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 0201 	bic.w	r2, r2, #1
 8006abe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d10c      	bne.n	8006ae2 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ace:	f023 010f 	bic.w	r1, r3, #15
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	1e5a      	subs	r2, r3, #1
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	631a      	str	r2, [r3, #48]	; 0x30
 8006ae0:	e007      	b.n	8006af2 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 020f 	bic.w	r2, r2, #15
 8006af0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af6:	f023 0303 	bic.w	r3, r3, #3
 8006afa:	f043 0201 	orr.w	r2, r3, #1
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	659a      	str	r2, [r3, #88]	; 0x58
 8006b02:	e007      	b.n	8006b14 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b08:	f043 0210 	orr.w	r2, r3, #16
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006b14:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3720      	adds	r7, #32
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000020 	.word	0x20000020
 8006b24:	053e2d63 	.word	0x053e2d63
 8006b28:	50040000 	.word	0x50040000
 8006b2c:	50040300 	.word	0x50040300
 8006b30:	fff0c007 	.word	0xfff0c007

08006b34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b0b6      	sub	sp, #216	; 0xd8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <HAL_ADC_ConfigChannel+0x22>
 8006b52:	2302      	movs	r3, #2
 8006b54:	e3d5      	b.n	8007302 <HAL_ADC_ConfigChannel+0x7ce>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff fe79 	bl	800685a <LL_ADC_REG_IsConversionOngoing>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f040 83ba 	bne.w	80072e4 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b05      	cmp	r3, #5
 8006b7e:	d824      	bhi.n	8006bca <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	3b02      	subs	r3, #2
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d81b      	bhi.n	8006bc2 <HAL_ADC_ConfigChannel+0x8e>
 8006b8a:	a201      	add	r2, pc, #4	; (adr r2, 8006b90 <HAL_ADC_ConfigChannel+0x5c>)
 8006b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b90:	08006ba1 	.word	0x08006ba1
 8006b94:	08006ba9 	.word	0x08006ba9
 8006b98:	08006bb1 	.word	0x08006bb1
 8006b9c:	08006bb9 	.word	0x08006bb9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8006ba0:	230c      	movs	r3, #12
 8006ba2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006ba6:	e010      	b.n	8006bca <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8006ba8:	2312      	movs	r3, #18
 8006baa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006bae:	e00c      	b.n	8006bca <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8006bb0:	2318      	movs	r3, #24
 8006bb2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006bb6:	e008      	b.n	8006bca <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8006bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006bc0:	e003      	b.n	8006bca <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8006bc2:	2306      	movs	r3, #6
 8006bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006bc8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6818      	ldr	r0, [r3, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006bd8:	f7ff fd62 	bl	80066a0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7ff fe3a 	bl	800685a <LL_ADC_REG_IsConversionOngoing>
 8006be6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7ff fe46 	bl	8006880 <LL_ADC_INJ_IsConversionOngoing>
 8006bf4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006bf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f040 81bf 	bne.w	8006f80 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006c02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f040 81ba 	bne.w	8006f80 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c14:	d10f      	bne.n	8006c36 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	4619      	mov	r1, r3
 8006c22:	f7ff fd69 	bl	80066f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff fd23 	bl	800667a <LL_ADC_SetSamplingTimeCommonConfig>
 8006c34:	e00e      	b.n	8006c54 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	6819      	ldr	r1, [r3, #0]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	461a      	mov	r2, r3
 8006c44:	f7ff fd58 	bl	80066f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff fd13 	bl	800667a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	695a      	ldr	r2, [r3, #20]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	08db      	lsrs	r3, r3, #3
 8006c60:	f003 0303 	and.w	r3, r3, #3
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	2b04      	cmp	r3, #4
 8006c74:	d00a      	beq.n	8006c8c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6818      	ldr	r0, [r3, #0]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	6919      	ldr	r1, [r3, #16]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c86:	f7ff fca3 	bl	80065d0 <LL_ADC_SetOffset>
 8006c8a:	e179      	b.n	8006f80 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2100      	movs	r1, #0
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff fcc0 	bl	8006618 <LL_ADC_GetOffsetChannel>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10a      	bne.n	8006cb8 <HAL_ADC_ConfigChannel+0x184>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7ff fcb5 	bl	8006618 <LL_ADC_GetOffsetChannel>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	0e9b      	lsrs	r3, r3, #26
 8006cb2:	f003 021f 	and.w	r2, r3, #31
 8006cb6:	e01e      	b.n	8006cf6 <HAL_ADC_ConfigChannel+0x1c2>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff fcaa 	bl	8006618 <LL_ADC_GetOffsetChannel>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cce:	fa93 f3a3 	rbit	r3, r3
 8006cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006cd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006cde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8006ce6:	2320      	movs	r3, #32
 8006ce8:	e004      	b.n	8006cf4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8006cea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006cee:	fab3 f383 	clz	r3, r3
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d105      	bne.n	8006d0e <HAL_ADC_ConfigChannel+0x1da>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	0e9b      	lsrs	r3, r3, #26
 8006d08:	f003 031f 	and.w	r3, r3, #31
 8006d0c:	e018      	b.n	8006d40 <HAL_ADC_ConfigChannel+0x20c>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d1a:	fa93 f3a3 	rbit	r3, r3
 8006d1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8006d22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8006d2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8006d32:	2320      	movs	r3, #32
 8006d34:	e004      	b.n	8006d40 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8006d36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d3a:	fab3 f383 	clz	r3, r3
 8006d3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d106      	bne.n	8006d52 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7ff fc79 	bl	8006644 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2101      	movs	r1, #1
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff fc5d 	bl	8006618 <LL_ADC_GetOffsetChannel>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <HAL_ADC_ConfigChannel+0x24a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7ff fc52 	bl	8006618 <LL_ADC_GetOffsetChannel>
 8006d74:	4603      	mov	r3, r0
 8006d76:	0e9b      	lsrs	r3, r3, #26
 8006d78:	f003 021f 	and.w	r2, r3, #31
 8006d7c:	e01e      	b.n	8006dbc <HAL_ADC_ConfigChannel+0x288>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2101      	movs	r1, #1
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff fc47 	bl	8006618 <LL_ADC_GetOffsetChannel>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d94:	fa93 f3a3 	rbit	r3, r3
 8006d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8006d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006da0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8006da4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8006dac:	2320      	movs	r3, #32
 8006dae:	e004      	b.n	8006dba <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8006db0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006db4:	fab3 f383 	clz	r3, r3
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d105      	bne.n	8006dd4 <HAL_ADC_ConfigChannel+0x2a0>
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	0e9b      	lsrs	r3, r3, #26
 8006dce:	f003 031f 	and.w	r3, r3, #31
 8006dd2:	e018      	b.n	8006e06 <HAL_ADC_ConfigChannel+0x2d2>
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ddc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006de0:	fa93 f3a3 	rbit	r3, r3
 8006de4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8006de8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8006df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8006df8:	2320      	movs	r3, #32
 8006dfa:	e004      	b.n	8006e06 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8006dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e00:	fab3 f383 	clz	r3, r3
 8006e04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d106      	bne.n	8006e18 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2101      	movs	r1, #1
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff fc16 	bl	8006644 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2102      	movs	r1, #2
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7ff fbfa 	bl	8006618 <LL_ADC_GetOffsetChannel>
 8006e24:	4603      	mov	r3, r0
 8006e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10a      	bne.n	8006e44 <HAL_ADC_ConfigChannel+0x310>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2102      	movs	r1, #2
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7ff fbef 	bl	8006618 <LL_ADC_GetOffsetChannel>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	0e9b      	lsrs	r3, r3, #26
 8006e3e:	f003 021f 	and.w	r2, r3, #31
 8006e42:	e01e      	b.n	8006e82 <HAL_ADC_ConfigChannel+0x34e>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2102      	movs	r1, #2
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff fbe4 	bl	8006618 <LL_ADC_GetOffsetChannel>
 8006e50:	4603      	mov	r3, r0
 8006e52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e5a:	fa93 f3a3 	rbit	r3, r3
 8006e5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8006e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8006e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8006e72:	2320      	movs	r3, #32
 8006e74:	e004      	b.n	8006e80 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8006e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e7a:	fab3 f383 	clz	r3, r3
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d105      	bne.n	8006e9a <HAL_ADC_ConfigChannel+0x366>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	0e9b      	lsrs	r3, r3, #26
 8006e94:	f003 031f 	and.w	r3, r3, #31
 8006e98:	e014      	b.n	8006ec4 <HAL_ADC_ConfigChannel+0x390>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ea0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ea2:	fa93 f3a3 	rbit	r3, r3
 8006ea6:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8006ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8006eae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8006eb6:	2320      	movs	r3, #32
 8006eb8:	e004      	b.n	8006ec4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8006eba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ebe:	fab3 f383 	clz	r3, r3
 8006ec2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d106      	bne.n	8006ed6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2102      	movs	r1, #2
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff fbb7 	bl	8006644 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2103      	movs	r1, #3
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7ff fb9b 	bl	8006618 <LL_ADC_GetOffsetChannel>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10a      	bne.n	8006f02 <HAL_ADC_ConfigChannel+0x3ce>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2103      	movs	r1, #3
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff fb90 	bl	8006618 <LL_ADC_GetOffsetChannel>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	0e9b      	lsrs	r3, r3, #26
 8006efc:	f003 021f 	and.w	r2, r3, #31
 8006f00:	e017      	b.n	8006f32 <HAL_ADC_ConfigChannel+0x3fe>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2103      	movs	r1, #3
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff fb85 	bl	8006618 <LL_ADC_GetOffsetChannel>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f14:	fa93 f3a3 	rbit	r3, r3
 8006f18:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f1c:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8006f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8006f24:	2320      	movs	r3, #32
 8006f26:	e003      	b.n	8006f30 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8006f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f2a:	fab3 f383 	clz	r3, r3
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d105      	bne.n	8006f4a <HAL_ADC_ConfigChannel+0x416>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	0e9b      	lsrs	r3, r3, #26
 8006f44:	f003 031f 	and.w	r3, r3, #31
 8006f48:	e011      	b.n	8006f6e <HAL_ADC_ConfigChannel+0x43a>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f52:	fa93 f3a3 	rbit	r3, r3
 8006f56:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8006f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f5a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8006f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8006f62:	2320      	movs	r3, #32
 8006f64:	e003      	b.n	8006f6e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8006f66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f68:	fab3 f383 	clz	r3, r3
 8006f6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d106      	bne.n	8006f80 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2200      	movs	r2, #0
 8006f78:	2103      	movs	r1, #3
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7ff fb62 	bl	8006644 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7ff fc55 	bl	8006834 <LL_ADC_IsEnabled>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f040 813f 	bne.w	8007210 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6818      	ldr	r0, [r3, #0]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	6819      	ldr	r1, [r3, #0]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f7ff fbd6 	bl	8006750 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	4a8e      	ldr	r2, [pc, #568]	; (80071e4 <HAL_ADC_ConfigChannel+0x6b0>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	f040 8130 	bne.w	8007210 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10b      	bne.n	8006fd8 <HAL_ADC_ConfigChannel+0x4a4>
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	0e9b      	lsrs	r3, r3, #26
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	f003 031f 	and.w	r3, r3, #31
 8006fcc:	2b09      	cmp	r3, #9
 8006fce:	bf94      	ite	ls
 8006fd0:	2301      	movls	r3, #1
 8006fd2:	2300      	movhi	r3, #0
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	e019      	b.n	800700c <HAL_ADC_ConfigChannel+0x4d8>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fe0:	fa93 f3a3 	rbit	r3, r3
 8006fe4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8006ff0:	2320      	movs	r3, #32
 8006ff2:	e003      	b.n	8006ffc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8006ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ff6:	fab3 f383 	clz	r3, r3
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	f003 031f 	and.w	r3, r3, #31
 8007002:	2b09      	cmp	r3, #9
 8007004:	bf94      	ite	ls
 8007006:	2301      	movls	r3, #1
 8007008:	2300      	movhi	r3, #0
 800700a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800700c:	2b00      	cmp	r3, #0
 800700e:	d079      	beq.n	8007104 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007018:	2b00      	cmp	r3, #0
 800701a:	d107      	bne.n	800702c <HAL_ADC_ConfigChannel+0x4f8>
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	0e9b      	lsrs	r3, r3, #26
 8007022:	3301      	adds	r3, #1
 8007024:	069b      	lsls	r3, r3, #26
 8007026:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800702a:	e015      	b.n	8007058 <HAL_ADC_ConfigChannel+0x524>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007034:	fa93 f3a3 	rbit	r3, r3
 8007038:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800703a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800703c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800703e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8007044:	2320      	movs	r3, #32
 8007046:	e003      	b.n	8007050 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8007048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800704a:	fab3 f383 	clz	r3, r3
 800704e:	b2db      	uxtb	r3, r3
 8007050:	3301      	adds	r3, #1
 8007052:	069b      	lsls	r3, r3, #26
 8007054:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007060:	2b00      	cmp	r3, #0
 8007062:	d109      	bne.n	8007078 <HAL_ADC_ConfigChannel+0x544>
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	0e9b      	lsrs	r3, r3, #26
 800706a:	3301      	adds	r3, #1
 800706c:	f003 031f 	and.w	r3, r3, #31
 8007070:	2101      	movs	r1, #1
 8007072:	fa01 f303 	lsl.w	r3, r1, r3
 8007076:	e017      	b.n	80070a8 <HAL_ADC_ConfigChannel+0x574>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800707e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007080:	fa93 f3a3 	rbit	r3, r3
 8007084:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8007086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007088:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800708a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800708c:	2b00      	cmp	r3, #0
 800708e:	d101      	bne.n	8007094 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8007090:	2320      	movs	r3, #32
 8007092:	e003      	b.n	800709c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8007094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007096:	fab3 f383 	clz	r3, r3
 800709a:	b2db      	uxtb	r3, r3
 800709c:	3301      	adds	r3, #1
 800709e:	f003 031f 	and.w	r3, r3, #31
 80070a2:	2101      	movs	r1, #1
 80070a4:	fa01 f303 	lsl.w	r3, r1, r3
 80070a8:	ea42 0103 	orr.w	r1, r2, r3
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10a      	bne.n	80070ce <HAL_ADC_ConfigChannel+0x59a>
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	0e9b      	lsrs	r3, r3, #26
 80070be:	3301      	adds	r3, #1
 80070c0:	f003 021f 	and.w	r2, r3, #31
 80070c4:	4613      	mov	r3, r2
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	4413      	add	r3, r2
 80070ca:	051b      	lsls	r3, r3, #20
 80070cc:	e018      	b.n	8007100 <HAL_ADC_ConfigChannel+0x5cc>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d6:	fa93 f3a3 	rbit	r3, r3
 80070da:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80070e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80070e6:	2320      	movs	r3, #32
 80070e8:	e003      	b.n	80070f2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80070ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ec:	fab3 f383 	clz	r3, r3
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	3301      	adds	r3, #1
 80070f4:	f003 021f 	and.w	r2, r3, #31
 80070f8:	4613      	mov	r3, r2
 80070fa:	005b      	lsls	r3, r3, #1
 80070fc:	4413      	add	r3, r2
 80070fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007100:	430b      	orrs	r3, r1
 8007102:	e080      	b.n	8007206 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800710c:	2b00      	cmp	r3, #0
 800710e:	d107      	bne.n	8007120 <HAL_ADC_ConfigChannel+0x5ec>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	0e9b      	lsrs	r3, r3, #26
 8007116:	3301      	adds	r3, #1
 8007118:	069b      	lsls	r3, r3, #26
 800711a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800711e:	e015      	b.n	800714c <HAL_ADC_ConfigChannel+0x618>
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007128:	fa93 f3a3 	rbit	r3, r3
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8007132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8007138:	2320      	movs	r3, #32
 800713a:	e003      	b.n	8007144 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800713c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713e:	fab3 f383 	clz	r3, r3
 8007142:	b2db      	uxtb	r3, r3
 8007144:	3301      	adds	r3, #1
 8007146:	069b      	lsls	r3, r3, #26
 8007148:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007154:	2b00      	cmp	r3, #0
 8007156:	d109      	bne.n	800716c <HAL_ADC_ConfigChannel+0x638>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	0e9b      	lsrs	r3, r3, #26
 800715e:	3301      	adds	r3, #1
 8007160:	f003 031f 	and.w	r3, r3, #31
 8007164:	2101      	movs	r1, #1
 8007166:	fa01 f303 	lsl.w	r3, r1, r3
 800716a:	e017      	b.n	800719c <HAL_ADC_ConfigChannel+0x668>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	fa93 f3a3 	rbit	r3, r3
 8007178:	61bb      	str	r3, [r7, #24]
  return result;
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8007184:	2320      	movs	r3, #32
 8007186:	e003      	b.n	8007190 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	fab3 f383 	clz	r3, r3
 800718e:	b2db      	uxtb	r3, r3
 8007190:	3301      	adds	r3, #1
 8007192:	f003 031f 	and.w	r3, r3, #31
 8007196:	2101      	movs	r1, #1
 8007198:	fa01 f303 	lsl.w	r3, r1, r3
 800719c:	ea42 0103 	orr.w	r1, r2, r3
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10d      	bne.n	80071c8 <HAL_ADC_ConfigChannel+0x694>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	0e9b      	lsrs	r3, r3, #26
 80071b2:	3301      	adds	r3, #1
 80071b4:	f003 021f 	and.w	r2, r3, #31
 80071b8:	4613      	mov	r3, r2
 80071ba:	005b      	lsls	r3, r3, #1
 80071bc:	4413      	add	r3, r2
 80071be:	3b1e      	subs	r3, #30
 80071c0:	051b      	lsls	r3, r3, #20
 80071c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80071c6:	e01d      	b.n	8007204 <HAL_ADC_ConfigChannel+0x6d0>
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	fa93 f3a3 	rbit	r3, r3
 80071d4:	60fb      	str	r3, [r7, #12]
  return result;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d103      	bne.n	80071e8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80071e0:	2320      	movs	r3, #32
 80071e2:	e005      	b.n	80071f0 <HAL_ADC_ConfigChannel+0x6bc>
 80071e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	fab3 f383 	clz	r3, r3
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	3301      	adds	r3, #1
 80071f2:	f003 021f 	and.w	r2, r3, #31
 80071f6:	4613      	mov	r3, r2
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	4413      	add	r3, r2
 80071fc:	3b1e      	subs	r3, #30
 80071fe:	051b      	lsls	r3, r3, #20
 8007200:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007204:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800720a:	4619      	mov	r1, r3
 800720c:	f7ff fa74 	bl	80066f8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	4b3d      	ldr	r3, [pc, #244]	; (800730c <HAL_ADC_ConfigChannel+0x7d8>)
 8007216:	4013      	ands	r3, r2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d06c      	beq.n	80072f6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800721c:	483c      	ldr	r0, [pc, #240]	; (8007310 <HAL_ADC_ConfigChannel+0x7dc>)
 800721e:	f7ff f9c9 	bl	80065b4 <LL_ADC_GetCommonPathInternalCh>
 8007222:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a3a      	ldr	r2, [pc, #232]	; (8007314 <HAL_ADC_ConfigChannel+0x7e0>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d127      	bne.n	8007280 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007230:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007234:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d121      	bne.n	8007280 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a35      	ldr	r2, [pc, #212]	; (8007318 <HAL_ADC_ConfigChannel+0x7e4>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d157      	bne.n	80072f6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007246:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800724a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800724e:	4619      	mov	r1, r3
 8007250:	482f      	ldr	r0, [pc, #188]	; (8007310 <HAL_ADC_ConfigChannel+0x7dc>)
 8007252:	f7ff f99c 	bl	800658e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007256:	4b31      	ldr	r3, [pc, #196]	; (800731c <HAL_ADC_ConfigChannel+0x7e8>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	099b      	lsrs	r3, r3, #6
 800725c:	4a30      	ldr	r2, [pc, #192]	; (8007320 <HAL_ADC_ConfigChannel+0x7ec>)
 800725e:	fba2 2303 	umull	r2, r3, r2, r3
 8007262:	099b      	lsrs	r3, r3, #6
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	4613      	mov	r3, r2
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007270:	e002      	b.n	8007278 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	3b01      	subs	r3, #1
 8007276:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1f9      	bne.n	8007272 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800727e:	e03a      	b.n	80072f6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a27      	ldr	r2, [pc, #156]	; (8007324 <HAL_ADC_ConfigChannel+0x7f0>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d113      	bne.n	80072b2 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800728a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800728e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10d      	bne.n	80072b2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a1f      	ldr	r2, [pc, #124]	; (8007318 <HAL_ADC_ConfigChannel+0x7e4>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d12a      	bne.n	80072f6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80072a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072a8:	4619      	mov	r1, r3
 80072aa:	4819      	ldr	r0, [pc, #100]	; (8007310 <HAL_ADC_ConfigChannel+0x7dc>)
 80072ac:	f7ff f96f 	bl	800658e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80072b0:	e021      	b.n	80072f6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a1c      	ldr	r2, [pc, #112]	; (8007328 <HAL_ADC_ConfigChannel+0x7f4>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d11c      	bne.n	80072f6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80072bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d116      	bne.n	80072f6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a12      	ldr	r2, [pc, #72]	; (8007318 <HAL_ADC_ConfigChannel+0x7e4>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d111      	bne.n	80072f6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80072d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80072da:	4619      	mov	r1, r3
 80072dc:	480c      	ldr	r0, [pc, #48]	; (8007310 <HAL_ADC_ConfigChannel+0x7dc>)
 80072de:	f7ff f956 	bl	800658e <LL_ADC_SetCommonPathInternalCh>
 80072e2:	e008      	b.n	80072f6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e8:	f043 0220 	orr.w	r2, r3, #32
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80072fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007302:	4618      	mov	r0, r3
 8007304:	37d8      	adds	r7, #216	; 0xd8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	80080000 	.word	0x80080000
 8007310:	50040300 	.word	0x50040300
 8007314:	c7520000 	.word	0xc7520000
 8007318:	50040000 	.word	0x50040000
 800731c:	20000020 	.word	0x20000020
 8007320:	053e2d63 	.word	0x053e2d63
 8007324:	cb840000 	.word	0xcb840000
 8007328:	80000001 	.word	0x80000001

0800732c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007334:	4b05      	ldr	r3, [pc, #20]	; (800734c <LL_EXTI_EnableIT_0_31+0x20>)
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	4904      	ldr	r1, [pc, #16]	; (800734c <LL_EXTI_EnableIT_0_31+0x20>)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4313      	orrs	r3, r2
 800733e:	600b      	str	r3, [r1, #0]
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	40010400 	.word	0x40010400

08007350 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007358:	4b06      	ldr	r3, [pc, #24]	; (8007374 <LL_EXTI_DisableIT_0_31+0x24>)
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	43db      	mvns	r3, r3
 8007360:	4904      	ldr	r1, [pc, #16]	; (8007374 <LL_EXTI_DisableIT_0_31+0x24>)
 8007362:	4013      	ands	r3, r2
 8007364:	600b      	str	r3, [r1, #0]
}
 8007366:	bf00      	nop
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	40010400 	.word	0x40010400

08007378 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007380:	4b05      	ldr	r3, [pc, #20]	; (8007398 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	4904      	ldr	r1, [pc, #16]	; (8007398 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4313      	orrs	r3, r2
 800738a:	604b      	str	r3, [r1, #4]

}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	40010400 	.word	0x40010400

0800739c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80073a4:	4b06      	ldr	r3, [pc, #24]	; (80073c0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	43db      	mvns	r3, r3
 80073ac:	4904      	ldr	r1, [pc, #16]	; (80073c0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80073ae:	4013      	ands	r3, r2
 80073b0:	604b      	str	r3, [r1, #4]
}
 80073b2:	bf00      	nop
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	40010400 	.word	0x40010400

080073c4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80073cc:	4b05      	ldr	r3, [pc, #20]	; (80073e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	4904      	ldr	r1, [pc, #16]	; (80073e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	608b      	str	r3, [r1, #8]

}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	40010400 	.word	0x40010400

080073e8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80073f0:	4b06      	ldr	r3, [pc, #24]	; (800740c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80073f2:	689a      	ldr	r2, [r3, #8]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	43db      	mvns	r3, r3
 80073f8:	4904      	ldr	r1, [pc, #16]	; (800740c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80073fa:	4013      	ands	r3, r2
 80073fc:	608b      	str	r3, [r1, #8]

}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	40010400 	.word	0x40010400

08007410 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007418:	4b05      	ldr	r3, [pc, #20]	; (8007430 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800741a:	68da      	ldr	r2, [r3, #12]
 800741c:	4904      	ldr	r1, [pc, #16]	; (8007430 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4313      	orrs	r3, r2
 8007422:	60cb      	str	r3, [r1, #12]
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	40010400 	.word	0x40010400

08007434 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800743c:	4b06      	ldr	r3, [pc, #24]	; (8007458 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800743e:	68da      	ldr	r2, [r3, #12]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	43db      	mvns	r3, r3
 8007444:	4904      	ldr	r1, [pc, #16]	; (8007458 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007446:	4013      	ands	r3, r2
 8007448:	60cb      	str	r3, [r1, #12]
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	40010400 	.word	0x40010400

0800745c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007464:	4a04      	ldr	r2, [pc, #16]	; (8007478 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6153      	str	r3, [r2, #20]
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	40010400 	.word	0x40010400

0800747c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b088      	sub	sp, #32
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007484:	2300      	movs	r3, #0
 8007486:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d102      	bne.n	8007498 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	77fb      	strb	r3, [r7, #31]
 8007496:	e0d1      	b.n	800763c <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074a6:	d102      	bne.n	80074ae <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	77fb      	strb	r3, [r7, #31]
 80074ac:	e0c6      	b.n	800763c <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d115      	bne.n	80074e6 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074c8:	4b5f      	ldr	r3, [pc, #380]	; (8007648 <HAL_COMP_Init+0x1cc>)
 80074ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074cc:	4a5e      	ldr	r2, [pc, #376]	; (8007648 <HAL_COMP_Init+0x1cc>)
 80074ce:	f043 0301 	orr.w	r3, r3, #1
 80074d2:	6613      	str	r3, [r2, #96]	; 0x60
 80074d4:	4b5c      	ldr	r3, [pc, #368]	; (8007648 <HAL_COMP_Init+0x1cc>)
 80074d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	60bb      	str	r3, [r7, #8]
 80074de:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7fc fb37 	bl	8003b54 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074f0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	69db      	ldr	r3, [r3, #28]
 8007500:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 8007512:	4313      	orrs	r3, r2
 8007514:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	4b4b      	ldr	r3, [pc, #300]	; (800764c <HAL_COMP_Init+0x1d0>)
 800751e:	4013      	ands	r3, r2
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6812      	ldr	r2, [r2, #0]
 8007524:	6979      	ldr	r1, [r7, #20]
 8007526:	430b      	orrs	r3, r1
 8007528:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007532:	d106      	bne.n	8007542 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007534:	4b46      	ldr	r3, [pc, #280]	; (8007650 <HAL_COMP_Init+0x1d4>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a45      	ldr	r2, [pc, #276]	; (8007650 <HAL_COMP_Init+0x1d4>)
 800753a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800753e:	6013      	str	r3, [r2, #0]
 8007540:	e005      	b.n	800754e <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007542:	4b43      	ldr	r3, [pc, #268]	; (8007650 <HAL_COMP_Init+0x1d4>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a42      	ldr	r2, [pc, #264]	; (8007650 <HAL_COMP_Init+0x1d4>)
 8007548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800754c:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d016      	beq.n	800758a <HAL_COMP_Init+0x10e>
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d113      	bne.n	800758a <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007562:	4b3c      	ldr	r3, [pc, #240]	; (8007654 <HAL_COMP_Init+0x1d8>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	099b      	lsrs	r3, r3, #6
 8007568:	4a3b      	ldr	r2, [pc, #236]	; (8007658 <HAL_COMP_Init+0x1dc>)
 800756a:	fba2 2303 	umull	r2, r3, r2, r3
 800756e:	099b      	lsrs	r3, r3, #6
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800757c:	e002      	b.n	8007584 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3b01      	subs	r3, #1
 8007582:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1f9      	bne.n	800757e <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a33      	ldr	r2, [pc, #204]	; (800765c <HAL_COMP_Init+0x1e0>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d102      	bne.n	800759a <HAL_COMP_Init+0x11e>
 8007594:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007598:	e001      	b.n	800759e <HAL_COMP_Init+0x122>
 800759a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800759e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a1b      	ldr	r3, [r3, #32]
 80075a4:	f003 0303 	and.w	r3, r3, #3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d037      	beq.n	800761c <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	f003 0310 	and.w	r3, r3, #16
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80075b8:	6938      	ldr	r0, [r7, #16]
 80075ba:	f7ff ff03 	bl	80073c4 <LL_EXTI_EnableRisingTrig_0_31>
 80075be:	e002      	b.n	80075c6 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80075c0:	6938      	ldr	r0, [r7, #16]
 80075c2:	f7ff ff11 	bl	80073e8 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80075d2:	6938      	ldr	r0, [r7, #16]
 80075d4:	f7ff ff1c 	bl	8007410 <LL_EXTI_EnableFallingTrig_0_31>
 80075d8:	e002      	b.n	80075e0 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80075da:	6938      	ldr	r0, [r7, #16]
 80075dc:	f7ff ff2a 	bl	8007434 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80075e0:	6938      	ldr	r0, [r7, #16]
 80075e2:	f7ff ff3b 	bl	800745c <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80075f2:	6938      	ldr	r0, [r7, #16]
 80075f4:	f7ff fec0 	bl	8007378 <LL_EXTI_EnableEvent_0_31>
 80075f8:	e002      	b.n	8007600 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80075fa:	6938      	ldr	r0, [r7, #16]
 80075fc:	f7ff fece 	bl	800739c <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 800760c:	6938      	ldr	r0, [r7, #16]
 800760e:	f7ff fe8d 	bl	800732c <LL_EXTI_EnableIT_0_31>
 8007612:	e009      	b.n	8007628 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007614:	6938      	ldr	r0, [r7, #16]
 8007616:	f7ff fe9b 	bl	8007350 <LL_EXTI_DisableIT_0_31>
 800761a:	e005      	b.n	8007628 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 800761c:	6938      	ldr	r0, [r7, #16]
 800761e:	f7ff febd 	bl	800739c <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8007622:	6938      	ldr	r0, [r7, #16]
 8007624:	f7ff fe94 	bl	8007350 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b00      	cmp	r3, #0
 8007632:	d103      	bne.n	800763c <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800763c:	7ffb      	ldrb	r3, [r7, #31]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3720      	adds	r7, #32
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	40021000 	.word	0x40021000
 800764c:	ff207d03 	.word	0xff207d03
 8007650:	40010204 	.word	0x40010204
 8007654:	20000020 	.word	0x20000020
 8007658:	053e2d63 	.word	0x053e2d63
 800765c:	40010200 	.word	0x40010200

08007660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f003 0307 	and.w	r3, r3, #7
 800766e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007670:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <__NVIC_SetPriorityGrouping+0x44>)
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800767c:	4013      	ands	r3, r2
 800767e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800768c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007692:	4a04      	ldr	r2, [pc, #16]	; (80076a4 <__NVIC_SetPriorityGrouping+0x44>)
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	60d3      	str	r3, [r2, #12]
}
 8007698:	bf00      	nop
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	e000ed00 	.word	0xe000ed00

080076a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076ac:	4b04      	ldr	r3, [pc, #16]	; (80076c0 <__NVIC_GetPriorityGrouping+0x18>)
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	0a1b      	lsrs	r3, r3, #8
 80076b2:	f003 0307 	and.w	r3, r3, #7
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	e000ed00 	.word	0xe000ed00

080076c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	4603      	mov	r3, r0
 80076cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	db0b      	blt.n	80076ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	f003 021f 	and.w	r2, r3, #31
 80076dc:	4907      	ldr	r1, [pc, #28]	; (80076fc <__NVIC_EnableIRQ+0x38>)
 80076de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076e2:	095b      	lsrs	r3, r3, #5
 80076e4:	2001      	movs	r0, #1
 80076e6:	fa00 f202 	lsl.w	r2, r0, r2
 80076ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	e000e100 	.word	0xe000e100

08007700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	4603      	mov	r3, r0
 8007708:	6039      	str	r1, [r7, #0]
 800770a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800770c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007710:	2b00      	cmp	r3, #0
 8007712:	db0a      	blt.n	800772a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	b2da      	uxtb	r2, r3
 8007718:	490c      	ldr	r1, [pc, #48]	; (800774c <__NVIC_SetPriority+0x4c>)
 800771a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800771e:	0112      	lsls	r2, r2, #4
 8007720:	b2d2      	uxtb	r2, r2
 8007722:	440b      	add	r3, r1
 8007724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007728:	e00a      	b.n	8007740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	b2da      	uxtb	r2, r3
 800772e:	4908      	ldr	r1, [pc, #32]	; (8007750 <__NVIC_SetPriority+0x50>)
 8007730:	79fb      	ldrb	r3, [r7, #7]
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	3b04      	subs	r3, #4
 8007738:	0112      	lsls	r2, r2, #4
 800773a:	b2d2      	uxtb	r2, r2
 800773c:	440b      	add	r3, r1
 800773e:	761a      	strb	r2, [r3, #24]
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	e000e100 	.word	0xe000e100
 8007750:	e000ed00 	.word	0xe000ed00

08007754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007754:	b480      	push	{r7}
 8007756:	b089      	sub	sp, #36	; 0x24
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f003 0307 	and.w	r3, r3, #7
 8007766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	f1c3 0307 	rsb	r3, r3, #7
 800776e:	2b04      	cmp	r3, #4
 8007770:	bf28      	it	cs
 8007772:	2304      	movcs	r3, #4
 8007774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	3304      	adds	r3, #4
 800777a:	2b06      	cmp	r3, #6
 800777c:	d902      	bls.n	8007784 <NVIC_EncodePriority+0x30>
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	3b03      	subs	r3, #3
 8007782:	e000      	b.n	8007786 <NVIC_EncodePriority+0x32>
 8007784:	2300      	movs	r3, #0
 8007786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007788:	f04f 32ff 	mov.w	r2, #4294967295
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	fa02 f303 	lsl.w	r3, r2, r3
 8007792:	43da      	mvns	r2, r3
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	401a      	ands	r2, r3
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800779c:	f04f 31ff 	mov.w	r1, #4294967295
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	fa01 f303 	lsl.w	r3, r1, r3
 80077a6:	43d9      	mvns	r1, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077ac:	4313      	orrs	r3, r2
         );
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3724      	adds	r7, #36	; 0x24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
	...

080077bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	3b01      	subs	r3, #1
 80077c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077cc:	d301      	bcc.n	80077d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80077ce:	2301      	movs	r3, #1
 80077d0:	e00f      	b.n	80077f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80077d2:	4a0a      	ldr	r2, [pc, #40]	; (80077fc <SysTick_Config+0x40>)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80077da:	210f      	movs	r1, #15
 80077dc:	f04f 30ff 	mov.w	r0, #4294967295
 80077e0:	f7ff ff8e 	bl	8007700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80077e4:	4b05      	ldr	r3, [pc, #20]	; (80077fc <SysTick_Config+0x40>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80077ea:	4b04      	ldr	r3, [pc, #16]	; (80077fc <SysTick_Config+0x40>)
 80077ec:	2207      	movs	r2, #7
 80077ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	e000e010 	.word	0xe000e010

08007800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7ff ff29 	bl	8007660 <__NVIC_SetPriorityGrouping>
}
 800780e:	bf00      	nop
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b086      	sub	sp, #24
 800781a:	af00      	add	r7, sp, #0
 800781c:	4603      	mov	r3, r0
 800781e:	60b9      	str	r1, [r7, #8]
 8007820:	607a      	str	r2, [r7, #4]
 8007822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007824:	2300      	movs	r3, #0
 8007826:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007828:	f7ff ff3e 	bl	80076a8 <__NVIC_GetPriorityGrouping>
 800782c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	68b9      	ldr	r1, [r7, #8]
 8007832:	6978      	ldr	r0, [r7, #20]
 8007834:	f7ff ff8e 	bl	8007754 <NVIC_EncodePriority>
 8007838:	4602      	mov	r2, r0
 800783a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800783e:	4611      	mov	r1, r2
 8007840:	4618      	mov	r0, r3
 8007842:	f7ff ff5d 	bl	8007700 <__NVIC_SetPriority>
}
 8007846:	bf00      	nop
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b082      	sub	sp, #8
 8007852:	af00      	add	r7, sp, #0
 8007854:	4603      	mov	r3, r0
 8007856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff ff31 	bl	80076c4 <__NVIC_EnableIRQ>
}
 8007862:	bf00      	nop
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b082      	sub	sp, #8
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7ff ffa2 	bl	80077bc <SysTick_Config>
 8007878:	4603      	mov	r3, r0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b086      	sub	sp, #24
 8007886:	af00      	add	r7, sp, #0
 8007888:	60f8      	str	r0, [r7, #12]
 800788a:	60b9      	str	r1, [r7, #8]
 800788c:	607a      	str	r2, [r7, #4]
 800788e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007890:	2300      	movs	r3, #0
 8007892:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800789a:	2b01      	cmp	r3, #1
 800789c:	d101      	bne.n	80078a2 <HAL_DMA_Start_IT+0x20>
 800789e:	2302      	movs	r3, #2
 80078a0:	e066      	b.n	8007970 <HAL_DMA_Start_IT+0xee>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d155      	bne.n	8007962 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2202      	movs	r2, #2
 80078ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 0201 	bic.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	68b9      	ldr	r1, [r7, #8]
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 f84c 	bl	8007978 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d008      	beq.n	80078fa <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f042 020e 	orr.w	r2, r2, #14
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	e00f      	b.n	800791a <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 0204 	bic.w	r2, r2, #4
 8007908:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f042 020a 	orr.w	r2, r2, #10
 8007918:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007936:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800794e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f042 0201 	orr.w	r2, r2, #1
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	e005      	b.n	800796e <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800796a:	2302      	movs	r3, #2
 800796c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800796e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3718      	adds	r7, #24
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
 8007984:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800798e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007994:	2b00      	cmp	r3, #0
 8007996:	d004      	beq.n	80079a2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80079a0:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a6:	f003 021c 	and.w	r2, r3, #28
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	2101      	movs	r1, #1
 80079b0:	fa01 f202 	lsl.w	r2, r1, r2
 80079b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	2b10      	cmp	r3, #16
 80079c4:	d108      	bne.n	80079d8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80079d6:	e007      	b.n	80079e8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	60da      	str	r2, [r3, #12]
}
 80079e8:	bf00      	nop
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80079fe:	2300      	movs	r3, #0
 8007a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007a02:	e166      	b.n	8007cd2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	2101      	movs	r1, #1
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a10:	4013      	ands	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 8158 	beq.w	8007ccc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f003 0303 	and.w	r3, r3, #3
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d005      	beq.n	8007a34 <HAL_GPIO_Init+0x40>
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f003 0303 	and.w	r3, r3, #3
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d130      	bne.n	8007a96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	005b      	lsls	r3, r3, #1
 8007a3e:	2203      	movs	r2, #3
 8007a40:	fa02 f303 	lsl.w	r3, r2, r3
 8007a44:	43db      	mvns	r3, r3
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	4013      	ands	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	fa02 f303 	lsl.w	r3, r2, r3
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a72:	43db      	mvns	r3, r3
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	4013      	ands	r3, r2
 8007a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	091b      	lsrs	r3, r3, #4
 8007a80:	f003 0201 	and.w	r2, r3, #1
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f003 0303 	and.w	r3, r3, #3
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d017      	beq.n	8007ad2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	005b      	lsls	r3, r3, #1
 8007aac:	2203      	movs	r2, #3
 8007aae:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab2:	43db      	mvns	r3, r3
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	689a      	ldr	r2, [r3, #8]
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	005b      	lsls	r3, r3, #1
 8007ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d123      	bne.n	8007b26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	08da      	lsrs	r2, r3, #3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	3208      	adds	r2, #8
 8007ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f003 0307 	and.w	r3, r3, #7
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	220f      	movs	r2, #15
 8007af6:	fa02 f303 	lsl.w	r3, r2, r3
 8007afa:	43db      	mvns	r3, r3
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	4013      	ands	r3, r2
 8007b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	691a      	ldr	r2, [r3, #16]
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f003 0307 	and.w	r3, r3, #7
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	08da      	lsrs	r2, r3, #3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3208      	adds	r2, #8
 8007b20:	6939      	ldr	r1, [r7, #16]
 8007b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	005b      	lsls	r3, r3, #1
 8007b30:	2203      	movs	r2, #3
 8007b32:	fa02 f303 	lsl.w	r3, r2, r3
 8007b36:	43db      	mvns	r3, r3
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f003 0203 	and.w	r2, r3, #3
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 80b2 	beq.w	8007ccc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b68:	4b61      	ldr	r3, [pc, #388]	; (8007cf0 <HAL_GPIO_Init+0x2fc>)
 8007b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b6c:	4a60      	ldr	r2, [pc, #384]	; (8007cf0 <HAL_GPIO_Init+0x2fc>)
 8007b6e:	f043 0301 	orr.w	r3, r3, #1
 8007b72:	6613      	str	r3, [r2, #96]	; 0x60
 8007b74:	4b5e      	ldr	r3, [pc, #376]	; (8007cf0 <HAL_GPIO_Init+0x2fc>)
 8007b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	60bb      	str	r3, [r7, #8]
 8007b7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007b80:	4a5c      	ldr	r2, [pc, #368]	; (8007cf4 <HAL_GPIO_Init+0x300>)
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	089b      	lsrs	r3, r3, #2
 8007b86:	3302      	adds	r3, #2
 8007b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f003 0303 	and.w	r3, r3, #3
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	220f      	movs	r2, #15
 8007b98:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9c:	43db      	mvns	r3, r3
 8007b9e:	693a      	ldr	r2, [r7, #16]
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007baa:	d02b      	beq.n	8007c04 <HAL_GPIO_Init+0x210>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a52      	ldr	r2, [pc, #328]	; (8007cf8 <HAL_GPIO_Init+0x304>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d025      	beq.n	8007c00 <HAL_GPIO_Init+0x20c>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a51      	ldr	r2, [pc, #324]	; (8007cfc <HAL_GPIO_Init+0x308>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d01f      	beq.n	8007bfc <HAL_GPIO_Init+0x208>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a50      	ldr	r2, [pc, #320]	; (8007d00 <HAL_GPIO_Init+0x30c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d019      	beq.n	8007bf8 <HAL_GPIO_Init+0x204>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a4f      	ldr	r2, [pc, #316]	; (8007d04 <HAL_GPIO_Init+0x310>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d013      	beq.n	8007bf4 <HAL_GPIO_Init+0x200>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a4e      	ldr	r2, [pc, #312]	; (8007d08 <HAL_GPIO_Init+0x314>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d00d      	beq.n	8007bf0 <HAL_GPIO_Init+0x1fc>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a4d      	ldr	r2, [pc, #308]	; (8007d0c <HAL_GPIO_Init+0x318>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d007      	beq.n	8007bec <HAL_GPIO_Init+0x1f8>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a4c      	ldr	r2, [pc, #304]	; (8007d10 <HAL_GPIO_Init+0x31c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d101      	bne.n	8007be8 <HAL_GPIO_Init+0x1f4>
 8007be4:	2307      	movs	r3, #7
 8007be6:	e00e      	b.n	8007c06 <HAL_GPIO_Init+0x212>
 8007be8:	2308      	movs	r3, #8
 8007bea:	e00c      	b.n	8007c06 <HAL_GPIO_Init+0x212>
 8007bec:	2306      	movs	r3, #6
 8007bee:	e00a      	b.n	8007c06 <HAL_GPIO_Init+0x212>
 8007bf0:	2305      	movs	r3, #5
 8007bf2:	e008      	b.n	8007c06 <HAL_GPIO_Init+0x212>
 8007bf4:	2304      	movs	r3, #4
 8007bf6:	e006      	b.n	8007c06 <HAL_GPIO_Init+0x212>
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e004      	b.n	8007c06 <HAL_GPIO_Init+0x212>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e002      	b.n	8007c06 <HAL_GPIO_Init+0x212>
 8007c00:	2301      	movs	r3, #1
 8007c02:	e000      	b.n	8007c06 <HAL_GPIO_Init+0x212>
 8007c04:	2300      	movs	r3, #0
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	f002 0203 	and.w	r2, r2, #3
 8007c0c:	0092      	lsls	r2, r2, #2
 8007c0e:	4093      	lsls	r3, r2
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007c16:	4937      	ldr	r1, [pc, #220]	; (8007cf4 <HAL_GPIO_Init+0x300>)
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	089b      	lsrs	r3, r3, #2
 8007c1c:	3302      	adds	r3, #2
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c24:	4b3b      	ldr	r3, [pc, #236]	; (8007d14 <HAL_GPIO_Init+0x320>)
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	4013      	ands	r3, r2
 8007c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007c48:	4a32      	ldr	r2, [pc, #200]	; (8007d14 <HAL_GPIO_Init+0x320>)
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007c4e:	4b31      	ldr	r3, [pc, #196]	; (8007d14 <HAL_GPIO_Init+0x320>)
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	43db      	mvns	r3, r3
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007c72:	4a28      	ldr	r2, [pc, #160]	; (8007d14 <HAL_GPIO_Init+0x320>)
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007c78:	4b26      	ldr	r3, [pc, #152]	; (8007d14 <HAL_GPIO_Init+0x320>)
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	43db      	mvns	r3, r3
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	4013      	ands	r3, r2
 8007c86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007c9c:	4a1d      	ldr	r2, [pc, #116]	; (8007d14 <HAL_GPIO_Init+0x320>)
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007ca2:	4b1c      	ldr	r3, [pc, #112]	; (8007d14 <HAL_GPIO_Init+0x320>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	43db      	mvns	r3, r3
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	4013      	ands	r3, r2
 8007cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d003      	beq.n	8007cc6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007cc6:	4a13      	ldr	r2, [pc, #76]	; (8007d14 <HAL_GPIO_Init+0x320>)
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f47f ae91 	bne.w	8007a04 <HAL_GPIO_Init+0x10>
  }
}
 8007ce2:	bf00      	nop
 8007ce4:	bf00      	nop
 8007ce6:	371c      	adds	r7, #28
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	40021000 	.word	0x40021000
 8007cf4:	40010000 	.word	0x40010000
 8007cf8:	48000400 	.word	0x48000400
 8007cfc:	48000800 	.word	0x48000800
 8007d00:	48000c00 	.word	0x48000c00
 8007d04:	48001000 	.word	0x48001000
 8007d08:	48001400 	.word	0x48001400
 8007d0c:	48001800 	.word	0x48001800
 8007d10:	48001c00 	.word	0x48001c00
 8007d14:	40010400 	.word	0x40010400

08007d18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	460b      	mov	r3, r1
 8007d22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	691a      	ldr	r2, [r3, #16]
 8007d28:	887b      	ldrh	r3, [r7, #2]
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d30:	2301      	movs	r3, #1
 8007d32:	73fb      	strb	r3, [r7, #15]
 8007d34:	e001      	b.n	8007d3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	807b      	strh	r3, [r7, #2]
 8007d54:	4613      	mov	r3, r2
 8007d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007d58:	787b      	ldrb	r3, [r7, #1]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007d5e:	887a      	ldrh	r2, [r7, #2]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007d64:	e002      	b.n	8007d6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007d66:	887a      	ldrh	r2, [r7, #2]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007d82:	4b08      	ldr	r3, [pc, #32]	; (8007da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007d84:	695a      	ldr	r2, [r3, #20]
 8007d86:	88fb      	ldrh	r3, [r7, #6]
 8007d88:	4013      	ands	r3, r2
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d006      	beq.n	8007d9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007d8e:	4a05      	ldr	r2, [pc, #20]	; (8007da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007d90:	88fb      	ldrh	r3, [r7, #6]
 8007d92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007d94:	88fb      	ldrh	r3, [r7, #6]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 f806 	bl	8007da8 <HAL_GPIO_EXTI_Callback>
  }
}
 8007d9c:	bf00      	nop
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	40010400 	.word	0x40010400

08007da8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	4603      	mov	r3, r0
 8007db0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007db2:	bf00      	nop
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b082      	sub	sp, #8
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e08d      	b.n	8007eec <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d106      	bne.n	8007dea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7fb ff09 	bl	8003bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2224      	movs	r2, #36	; 0x24
 8007dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f022 0201 	bic.w	r2, r2, #1
 8007e00:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007e0e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689a      	ldr	r2, [r3, #8]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e1e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d107      	bne.n	8007e38 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689a      	ldr	r2, [r3, #8]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e34:	609a      	str	r2, [r3, #8]
 8007e36:	e006      	b.n	8007e46 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	689a      	ldr	r2, [r3, #8]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007e44:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d108      	bne.n	8007e60 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e5c:	605a      	str	r2, [r3, #4]
 8007e5e:	e007      	b.n	8007e70 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e6e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	6812      	ldr	r2, [r2, #0]
 8007e7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e82:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68da      	ldr	r2, [r3, #12]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e92:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	691a      	ldr	r2, [r3, #16]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	69d9      	ldr	r1, [r3, #28]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1a      	ldr	r2, [r3, #32]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f042 0201 	orr.w	r2, r2, #1
 8007ecc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2220      	movs	r2, #32
 8007ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b088      	sub	sp, #32
 8007ef8:	af02      	add	r7, sp, #8
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	607a      	str	r2, [r7, #4]
 8007efe:	461a      	mov	r2, r3
 8007f00:	460b      	mov	r3, r1
 8007f02:	817b      	strh	r3, [r7, #10]
 8007f04:	4613      	mov	r3, r2
 8007f06:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	f040 80fd 	bne.w	8008110 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d101      	bne.n	8007f24 <HAL_I2C_Master_Transmit+0x30>
 8007f20:	2302      	movs	r3, #2
 8007f22:	e0f6      	b.n	8008112 <HAL_I2C_Master_Transmit+0x21e>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007f2c:	f7fe faec 	bl	8006508 <HAL_GetTick>
 8007f30:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	2319      	movs	r3, #25
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f000 fa0a 	bl	8008358 <I2C_WaitOnFlagUntilTimeout>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e0e1      	b.n	8008112 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2221      	movs	r2, #33	; 0x21
 8007f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2210      	movs	r2, #16
 8007f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	893a      	ldrh	r2, [r7, #8]
 8007f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	2bff      	cmp	r3, #255	; 0xff
 8007f7e:	d906      	bls.n	8007f8e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	22ff      	movs	r2, #255	; 0xff
 8007f84:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007f86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f8a:	617b      	str	r3, [r7, #20]
 8007f8c:	e007      	b.n	8007f9e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007f98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f9c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d024      	beq.n	8007ff0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	781a      	ldrb	r2, [r3, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	3301      	adds	r3, #1
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	8979      	ldrh	r1, [r7, #10]
 8007fe2:	4b4e      	ldr	r3, [pc, #312]	; (800811c <HAL_I2C_Master_Transmit+0x228>)
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 fbf1 	bl	80087d0 <I2C_TransferConfig>
 8007fee:	e066      	b.n	80080be <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	8979      	ldrh	r1, [r7, #10]
 8007ff8:	4b48      	ldr	r3, [pc, #288]	; (800811c <HAL_I2C_Master_Transmit+0x228>)
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f000 fbe6 	bl	80087d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008004:	e05b      	b.n	80080be <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	6a39      	ldr	r1, [r7, #32]
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 f9f3 	bl	80083f6 <I2C_WaitOnTXISFlagUntilTimeout>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e07b      	b.n	8008112 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801e:	781a      	ldrb	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802a:	1c5a      	adds	r2, r3, #1
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008034:	b29b      	uxth	r3, r3
 8008036:	3b01      	subs	r3, #1
 8008038:	b29a      	uxth	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008042:	3b01      	subs	r3, #1
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800804e:	b29b      	uxth	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	d034      	beq.n	80080be <HAL_I2C_Master_Transmit+0x1ca>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008058:	2b00      	cmp	r3, #0
 800805a:	d130      	bne.n	80080be <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	2200      	movs	r2, #0
 8008064:	2180      	movs	r1, #128	; 0x80
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 f976 	bl	8008358 <I2C_WaitOnFlagUntilTimeout>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e04d      	b.n	8008112 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800807a:	b29b      	uxth	r3, r3
 800807c:	2bff      	cmp	r3, #255	; 0xff
 800807e:	d90e      	bls.n	800809e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	22ff      	movs	r2, #255	; 0xff
 8008084:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800808a:	b2da      	uxtb	r2, r3
 800808c:	8979      	ldrh	r1, [r7, #10]
 800808e:	2300      	movs	r3, #0
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f000 fb9a 	bl	80087d0 <I2C_TransferConfig>
 800809c:	e00f      	b.n	80080be <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	8979      	ldrh	r1, [r7, #10]
 80080b0:	2300      	movs	r3, #0
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 fb89 	bl	80087d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d19e      	bne.n	8008006 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	6a39      	ldr	r1, [r7, #32]
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f000 f9d9 	bl	8008484 <I2C_WaitOnSTOPFlagUntilTimeout>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e01a      	b.n	8008112 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2220      	movs	r2, #32
 80080e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6859      	ldr	r1, [r3, #4]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	4b0c      	ldr	r3, [pc, #48]	; (8008120 <HAL_I2C_Master_Transmit+0x22c>)
 80080f0:	400b      	ands	r3, r1
 80080f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	e000      	b.n	8008112 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008110:	2302      	movs	r3, #2
  }
}
 8008112:	4618      	mov	r0, r3
 8008114:	3718      	adds	r7, #24
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	80002000 	.word	0x80002000
 8008120:	fe00e800 	.word	0xfe00e800

08008124 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b088      	sub	sp, #32
 8008128:	af02      	add	r7, sp, #8
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	607a      	str	r2, [r7, #4]
 800812e:	461a      	mov	r2, r3
 8008130:	460b      	mov	r3, r1
 8008132:	817b      	strh	r3, [r7, #10]
 8008134:	4613      	mov	r3, r2
 8008136:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b20      	cmp	r3, #32
 8008142:	f040 80db 	bne.w	80082fc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800814c:	2b01      	cmp	r3, #1
 800814e:	d101      	bne.n	8008154 <HAL_I2C_Master_Receive+0x30>
 8008150:	2302      	movs	r3, #2
 8008152:	e0d4      	b.n	80082fe <HAL_I2C_Master_Receive+0x1da>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800815c:	f7fe f9d4 	bl	8006508 <HAL_GetTick>
 8008160:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	2319      	movs	r3, #25
 8008168:	2201      	movs	r2, #1
 800816a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 f8f2 	bl	8008358 <I2C_WaitOnFlagUntilTimeout>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e0bf      	b.n	80082fe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2222      	movs	r2, #34	; 0x22
 8008182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2210      	movs	r2, #16
 800818a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	893a      	ldrh	r2, [r7, #8]
 800819e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	2bff      	cmp	r3, #255	; 0xff
 80081ae:	d90e      	bls.n	80081ce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	22ff      	movs	r2, #255	; 0xff
 80081b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	8979      	ldrh	r1, [r7, #10]
 80081be:	4b52      	ldr	r3, [pc, #328]	; (8008308 <HAL_I2C_Master_Receive+0x1e4>)
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f000 fb02 	bl	80087d0 <I2C_TransferConfig>
 80081cc:	e06d      	b.n	80082aa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	8979      	ldrh	r1, [r7, #10]
 80081e0:	4b49      	ldr	r3, [pc, #292]	; (8008308 <HAL_I2C_Master_Receive+0x1e4>)
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 faf1 	bl	80087d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80081ee:	e05c      	b.n	80082aa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	6a39      	ldr	r1, [r7, #32]
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 f989 	bl	800850c <I2C_WaitOnRXNEFlagUntilTimeout>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e07c      	b.n	80082fe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820e:	b2d2      	uxtb	r2, r2
 8008210:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008220:	3b01      	subs	r3, #1
 8008222:	b29a      	uxth	r2, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800822c:	b29b      	uxth	r3, r3
 800822e:	3b01      	subs	r3, #1
 8008230:	b29a      	uxth	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800823a:	b29b      	uxth	r3, r3
 800823c:	2b00      	cmp	r3, #0
 800823e:	d034      	beq.n	80082aa <HAL_I2C_Master_Receive+0x186>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008244:	2b00      	cmp	r3, #0
 8008246:	d130      	bne.n	80082aa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	2200      	movs	r2, #0
 8008250:	2180      	movs	r1, #128	; 0x80
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 f880 	bl	8008358 <I2C_WaitOnFlagUntilTimeout>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e04d      	b.n	80082fe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008266:	b29b      	uxth	r3, r3
 8008268:	2bff      	cmp	r3, #255	; 0xff
 800826a:	d90e      	bls.n	800828a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	22ff      	movs	r2, #255	; 0xff
 8008270:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008276:	b2da      	uxtb	r2, r3
 8008278:	8979      	ldrh	r1, [r7, #10]
 800827a:	2300      	movs	r3, #0
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f000 faa4 	bl	80087d0 <I2C_TransferConfig>
 8008288:	e00f      	b.n	80082aa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800828e:	b29a      	uxth	r2, r3
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008298:	b2da      	uxtb	r2, r3
 800829a:	8979      	ldrh	r1, [r7, #10]
 800829c:	2300      	movs	r3, #0
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f000 fa93 	bl	80087d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d19d      	bne.n	80081f0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	6a39      	ldr	r1, [r7, #32]
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 f8e3 	bl	8008484 <I2C_WaitOnSTOPFlagUntilTimeout>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e01a      	b.n	80082fe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2220      	movs	r2, #32
 80082ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6859      	ldr	r1, [r3, #4]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	4b0c      	ldr	r3, [pc, #48]	; (800830c <HAL_I2C_Master_Receive+0x1e8>)
 80082dc:	400b      	ands	r3, r1
 80082de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2220      	movs	r2, #32
 80082e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	e000      	b.n	80082fe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80082fc:	2302      	movs	r3, #2
  }
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	80002400 	.word	0x80002400
 800830c:	fe00e800 	.word	0xfe00e800

08008310 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b02      	cmp	r3, #2
 8008324:	d103      	bne.n	800832e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2200      	movs	r2, #0
 800832c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	2b01      	cmp	r3, #1
 800833a:	d007      	beq.n	800834c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	699a      	ldr	r2, [r3, #24]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f042 0201 	orr.w	r2, r2, #1
 800834a:	619a      	str	r2, [r3, #24]
  }
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	603b      	str	r3, [r7, #0]
 8008364:	4613      	mov	r3, r2
 8008366:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008368:	e031      	b.n	80083ce <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008370:	d02d      	beq.n	80083ce <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008372:	f7fe f8c9 	bl	8006508 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	429a      	cmp	r2, r3
 8008380:	d302      	bcc.n	8008388 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d122      	bne.n	80083ce <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	699a      	ldr	r2, [r3, #24]
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	4013      	ands	r3, r2
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	429a      	cmp	r2, r3
 8008396:	bf0c      	ite	eq
 8008398:	2301      	moveq	r3, #1
 800839a:	2300      	movne	r3, #0
 800839c:	b2db      	uxtb	r3, r3
 800839e:	461a      	mov	r2, r3
 80083a0:	79fb      	ldrb	r3, [r7, #7]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d113      	bne.n	80083ce <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083aa:	f043 0220 	orr.w	r2, r3, #32
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2220      	movs	r2, #32
 80083b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e00f      	b.n	80083ee <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	699a      	ldr	r2, [r3, #24]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	4013      	ands	r3, r2
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	429a      	cmp	r2, r3
 80083dc:	bf0c      	ite	eq
 80083de:	2301      	moveq	r3, #1
 80083e0:	2300      	movne	r3, #0
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	461a      	mov	r2, r3
 80083e6:	79fb      	ldrb	r3, [r7, #7]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d0be      	beq.n	800836a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b084      	sub	sp, #16
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	60f8      	str	r0, [r7, #12]
 80083fe:	60b9      	str	r1, [r7, #8]
 8008400:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008402:	e033      	b.n	800846c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 f901 	bl	8008610 <I2C_IsErrorOccurred>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e031      	b.n	800847c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841e:	d025      	beq.n	800846c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008420:	f7fe f872 	bl	8006508 <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	429a      	cmp	r2, r3
 800842e:	d302      	bcc.n	8008436 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d11a      	bne.n	800846c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	f003 0302 	and.w	r3, r3, #2
 8008440:	2b02      	cmp	r3, #2
 8008442:	d013      	beq.n	800846c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008448:	f043 0220 	orr.w	r2, r3, #32
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2220      	movs	r2, #32
 8008454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e007      	b.n	800847c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	f003 0302 	and.w	r3, r3, #2
 8008476:	2b02      	cmp	r3, #2
 8008478:	d1c4      	bne.n	8008404 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008490:	e02f      	b.n	80084f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	68b9      	ldr	r1, [r7, #8]
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 f8ba 	bl	8008610 <I2C_IsErrorOccurred>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e02d      	b.n	8008502 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084a6:	f7fe f82f 	bl	8006508 <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d302      	bcc.n	80084bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d11a      	bne.n	80084f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	f003 0320 	and.w	r3, r3, #32
 80084c6:	2b20      	cmp	r3, #32
 80084c8:	d013      	beq.n	80084f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ce:	f043 0220 	orr.w	r2, r3, #32
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2220      	movs	r2, #32
 80084da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e007      	b.n	8008502 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	f003 0320 	and.w	r3, r3, #32
 80084fc:	2b20      	cmp	r3, #32
 80084fe:	d1c8      	bne.n	8008492 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
	...

0800850c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008518:	e06b      	b.n	80085f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	68b9      	ldr	r1, [r7, #8]
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f000 f876 	bl	8008610 <I2C_IsErrorOccurred>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e069      	b.n	8008602 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	f003 0320 	and.w	r3, r3, #32
 8008538:	2b20      	cmp	r3, #32
 800853a:	d138      	bne.n	80085ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	f003 0304 	and.w	r3, r3, #4
 8008546:	2b04      	cmp	r3, #4
 8008548:	d105      	bne.n	8008556 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	e055      	b.n	8008602 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	f003 0310 	and.w	r3, r3, #16
 8008560:	2b10      	cmp	r3, #16
 8008562:	d107      	bne.n	8008574 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2210      	movs	r2, #16
 800856a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2204      	movs	r2, #4
 8008570:	645a      	str	r2, [r3, #68]	; 0x44
 8008572:	e002      	b.n	800857a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2220      	movs	r2, #32
 8008580:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	6859      	ldr	r1, [r3, #4]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	4b1f      	ldr	r3, [pc, #124]	; (800860c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800858e:	400b      	ands	r3, r1
 8008590:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2220      	movs	r2, #32
 8008596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e029      	b.n	8008602 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ae:	f7fd ffab 	bl	8006508 <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d302      	bcc.n	80085c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d116      	bne.n	80085f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	f003 0304 	and.w	r3, r3, #4
 80085ce:	2b04      	cmp	r3, #4
 80085d0:	d00f      	beq.n	80085f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d6:	f043 0220 	orr.w	r2, r3, #32
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2220      	movs	r2, #32
 80085e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e007      	b.n	8008602 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	f003 0304 	and.w	r3, r3, #4
 80085fc:	2b04      	cmp	r3, #4
 80085fe:	d18c      	bne.n	800851a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	fe00e800 	.word	0xfe00e800

08008610 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b08a      	sub	sp, #40	; 0x28
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800862a:	2300      	movs	r3, #0
 800862c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	f003 0310 	and.w	r3, r3, #16
 8008638:	2b00      	cmp	r3, #0
 800863a:	d068      	beq.n	800870e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2210      	movs	r2, #16
 8008642:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008644:	e049      	b.n	80086da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864c:	d045      	beq.n	80086da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800864e:	f7fd ff5b 	bl	8006508 <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	429a      	cmp	r2, r3
 800865c:	d302      	bcc.n	8008664 <I2C_IsErrorOccurred+0x54>
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d13a      	bne.n	80086da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800866e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008676:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008686:	d121      	bne.n	80086cc <I2C_IsErrorOccurred+0xbc>
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800868e:	d01d      	beq.n	80086cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008690:	7cfb      	ldrb	r3, [r7, #19]
 8008692:	2b20      	cmp	r3, #32
 8008694:	d01a      	beq.n	80086cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80086a6:	f7fd ff2f 	bl	8006508 <HAL_GetTick>
 80086aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086ac:	e00e      	b.n	80086cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80086ae:	f7fd ff2b 	bl	8006508 <HAL_GetTick>
 80086b2:	4602      	mov	r2, r0
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	2b19      	cmp	r3, #25
 80086ba:	d907      	bls.n	80086cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80086bc:	6a3b      	ldr	r3, [r7, #32]
 80086be:	f043 0320 	orr.w	r3, r3, #32
 80086c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80086ca:	e006      	b.n	80086da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	f003 0320 	and.w	r3, r3, #32
 80086d6:	2b20      	cmp	r3, #32
 80086d8:	d1e9      	bne.n	80086ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	f003 0320 	and.w	r3, r3, #32
 80086e4:	2b20      	cmp	r3, #32
 80086e6:	d003      	beq.n	80086f0 <I2C_IsErrorOccurred+0xe0>
 80086e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d0aa      	beq.n	8008646 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80086f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d103      	bne.n	8008700 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2220      	movs	r2, #32
 80086fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	f043 0304 	orr.w	r3, r3, #4
 8008706:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00b      	beq.n	8008738 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008720:	6a3b      	ldr	r3, [r7, #32]
 8008722:	f043 0301 	orr.w	r3, r3, #1
 8008726:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008730:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00b      	beq.n	800875a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008742:	6a3b      	ldr	r3, [r7, #32]
 8008744:	f043 0308 	orr.w	r3, r3, #8
 8008748:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008752:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00b      	beq.n	800877c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	f043 0302 	orr.w	r3, r3, #2
 800876a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008774:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800877c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008780:	2b00      	cmp	r3, #0
 8008782:	d01c      	beq.n	80087be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f7ff fdc3 	bl	8008310 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6859      	ldr	r1, [r3, #4]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	4b0d      	ldr	r3, [pc, #52]	; (80087cc <I2C_IsErrorOccurred+0x1bc>)
 8008796:	400b      	ands	r3, r1
 8008798:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	431a      	orrs	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2220      	movs	r2, #32
 80087aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80087be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3728      	adds	r7, #40	; 0x28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	fe00e800 	.word	0xfe00e800

080087d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	607b      	str	r3, [r7, #4]
 80087da:	460b      	mov	r3, r1
 80087dc:	817b      	strh	r3, [r7, #10]
 80087de:	4613      	mov	r3, r2
 80087e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087e2:	897b      	ldrh	r3, [r7, #10]
 80087e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80087e8:	7a7b      	ldrb	r3, [r7, #9]
 80087ea:	041b      	lsls	r3, r3, #16
 80087ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087f6:	6a3b      	ldr	r3, [r7, #32]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	6a3b      	ldr	r3, [r7, #32]
 8008808:	0d5b      	lsrs	r3, r3, #21
 800880a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800880e:	4b08      	ldr	r3, [pc, #32]	; (8008830 <I2C_TransferConfig+0x60>)
 8008810:	430b      	orrs	r3, r1
 8008812:	43db      	mvns	r3, r3
 8008814:	ea02 0103 	and.w	r1, r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	430a      	orrs	r2, r1
 8008820:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008822:	bf00      	nop
 8008824:	371c      	adds	r7, #28
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	03ff63ff 	.word	0x03ff63ff

08008834 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b20      	cmp	r3, #32
 8008848:	d138      	bne.n	80088bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008850:	2b01      	cmp	r3, #1
 8008852:	d101      	bne.n	8008858 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008854:	2302      	movs	r3, #2
 8008856:	e032      	b.n	80088be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2224      	movs	r2, #36	; 0x24
 8008864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f022 0201 	bic.w	r2, r2, #1
 8008876:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008886:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6819      	ldr	r1, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	430a      	orrs	r2, r1
 8008896:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f042 0201 	orr.w	r2, r2, #1
 80088a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2220      	movs	r2, #32
 80088ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80088b8:	2300      	movs	r3, #0
 80088ba:	e000      	b.n	80088be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80088bc:	2302      	movs	r3, #2
  }
}
 80088be:	4618      	mov	r0, r3
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b085      	sub	sp, #20
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b20      	cmp	r3, #32
 80088de:	d139      	bne.n	8008954 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d101      	bne.n	80088ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80088ea:	2302      	movs	r3, #2
 80088ec:	e033      	b.n	8008956 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2224      	movs	r2, #36	; 0x24
 80088fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f022 0201 	bic.w	r2, r2, #1
 800890c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800891c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	021b      	lsls	r3, r3, #8
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	4313      	orrs	r3, r2
 8008926:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f042 0201 	orr.w	r2, r2, #1
 800893e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2220      	movs	r2, #32
 8008944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008950:	2300      	movs	r3, #0
 8008952:	e000      	b.n	8008956 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008954:	2302      	movs	r3, #2
  }
}
 8008956:	4618      	mov	r0, r3
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
	...

08008964 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008964:	b480      	push	{r7}
 8008966:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008968:	4b05      	ldr	r3, [pc, #20]	; (8008980 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a04      	ldr	r2, [pc, #16]	; (8008980 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800896e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008972:	6013      	str	r3, [r2, #0]
}
 8008974:	bf00      	nop
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	40007000 	.word	0x40007000

08008984 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008984:	b480      	push	{r7}
 8008986:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008988:	4b0d      	ldr	r3, [pc, #52]	; (80089c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008994:	d102      	bne.n	800899c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8008996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800899a:	e00b      	b.n	80089b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800899c:	4b08      	ldr	r3, [pc, #32]	; (80089c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800899e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089aa:	d102      	bne.n	80089b2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80089ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089b0:	e000      	b.n	80089b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80089b2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	40007000 	.word	0x40007000

080089c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d141      	bne.n	8008a56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80089d2:	4b4b      	ldr	r3, [pc, #300]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80089da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089de:	d131      	bne.n	8008a44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80089e0:	4b47      	ldr	r3, [pc, #284]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089e6:	4a46      	ldr	r2, [pc, #280]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80089f0:	4b43      	ldr	r3, [pc, #268]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80089f8:	4a41      	ldr	r2, [pc, #260]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80089fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008a00:	4b40      	ldr	r3, [pc, #256]	; (8008b04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2232      	movs	r2, #50	; 0x32
 8008a06:	fb02 f303 	mul.w	r3, r2, r3
 8008a0a:	4a3f      	ldr	r2, [pc, #252]	; (8008b08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a10:	0c9b      	lsrs	r3, r3, #18
 8008a12:	3301      	adds	r3, #1
 8008a14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a16:	e002      	b.n	8008a1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a1e:	4b38      	ldr	r3, [pc, #224]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a2a:	d102      	bne.n	8008a32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1f2      	bne.n	8008a18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008a32:	4b33      	ldr	r3, [pc, #204]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a3e:	d158      	bne.n	8008af2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e057      	b.n	8008af4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a44:	4b2e      	ldr	r3, [pc, #184]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a4a:	4a2d      	ldr	r2, [pc, #180]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008a54:	e04d      	b.n	8008af2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a5c:	d141      	bne.n	8008ae2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008a5e:	4b28      	ldr	r3, [pc, #160]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a6a:	d131      	bne.n	8008ad0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a6c:	4b24      	ldr	r3, [pc, #144]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a72:	4a23      	ldr	r2, [pc, #140]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a7c:	4b20      	ldr	r3, [pc, #128]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008a84:	4a1e      	ldr	r2, [pc, #120]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008a8c:	4b1d      	ldr	r3, [pc, #116]	; (8008b04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2232      	movs	r2, #50	; 0x32
 8008a92:	fb02 f303 	mul.w	r3, r2, r3
 8008a96:	4a1c      	ldr	r2, [pc, #112]	; (8008b08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008a98:	fba2 2303 	umull	r2, r3, r2, r3
 8008a9c:	0c9b      	lsrs	r3, r3, #18
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008aa2:	e002      	b.n	8008aaa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008aaa:	4b15      	ldr	r3, [pc, #84]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ab6:	d102      	bne.n	8008abe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1f2      	bne.n	8008aa4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008abe:	4b10      	ldr	r3, [pc, #64]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aca:	d112      	bne.n	8008af2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e011      	b.n	8008af4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ad0:	4b0b      	ldr	r3, [pc, #44]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ad6:	4a0a      	ldr	r2, [pc, #40]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008adc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008ae0:	e007      	b.n	8008af2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008ae2:	4b07      	ldr	r3, [pc, #28]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008aea:	4a05      	ldr	r2, [pc, #20]	; (8008b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008af0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	40007000 	.word	0x40007000
 8008b04:	20000020 	.word	0x20000020
 8008b08:	431bde83 	.word	0x431bde83

08008b0c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8008b10:	4b05      	ldr	r3, [pc, #20]	; (8008b28 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	4a04      	ldr	r2, [pc, #16]	; (8008b28 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b1a:	6053      	str	r3, [r2, #4]
}
 8008b1c:	bf00      	nop
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	40007000 	.word	0x40007000

08008b2c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b088      	sub	sp, #32
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d102      	bne.n	8008b40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f000 bc08 	b.w	8009350 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b40:	4b96      	ldr	r3, [pc, #600]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f003 030c 	and.w	r3, r3, #12
 8008b48:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b4a:	4b94      	ldr	r3, [pc, #592]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	f003 0303 	and.w	r3, r3, #3
 8008b52:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0310 	and.w	r3, r3, #16
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 80e4 	beq.w	8008d2a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d007      	beq.n	8008b78 <HAL_RCC_OscConfig+0x4c>
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	2b0c      	cmp	r3, #12
 8008b6c:	f040 808b 	bne.w	8008c86 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	f040 8087 	bne.w	8008c86 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008b78:	4b88      	ldr	r3, [pc, #544]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0302 	and.w	r3, r3, #2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d005      	beq.n	8008b90 <HAL_RCC_OscConfig+0x64>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e3df      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a1a      	ldr	r2, [r3, #32]
 8008b94:	4b81      	ldr	r3, [pc, #516]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0308 	and.w	r3, r3, #8
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d004      	beq.n	8008baa <HAL_RCC_OscConfig+0x7e>
 8008ba0:	4b7e      	ldr	r3, [pc, #504]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ba8:	e005      	b.n	8008bb6 <HAL_RCC_OscConfig+0x8a>
 8008baa:	4b7c      	ldr	r3, [pc, #496]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bb0:	091b      	lsrs	r3, r3, #4
 8008bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d223      	bcs.n	8008c02 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 fdcc 	bl	800975c <RCC_SetFlashLatencyFromMSIRange>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d001      	beq.n	8008bce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e3c0      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008bce:	4b73      	ldr	r3, [pc, #460]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a72      	ldr	r2, [pc, #456]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008bd4:	f043 0308 	orr.w	r3, r3, #8
 8008bd8:	6013      	str	r3, [r2, #0]
 8008bda:	4b70      	ldr	r3, [pc, #448]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	496d      	ldr	r1, [pc, #436]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008be8:	4313      	orrs	r3, r2
 8008bea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008bec:	4b6b      	ldr	r3, [pc, #428]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	69db      	ldr	r3, [r3, #28]
 8008bf8:	021b      	lsls	r3, r3, #8
 8008bfa:	4968      	ldr	r1, [pc, #416]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	604b      	str	r3, [r1, #4]
 8008c00:	e025      	b.n	8008c4e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008c02:	4b66      	ldr	r3, [pc, #408]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a65      	ldr	r2, [pc, #404]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008c08:	f043 0308 	orr.w	r3, r3, #8
 8008c0c:	6013      	str	r3, [r2, #0]
 8008c0e:	4b63      	ldr	r3, [pc, #396]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	4960      	ldr	r1, [pc, #384]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008c20:	4b5e      	ldr	r3, [pc, #376]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	69db      	ldr	r3, [r3, #28]
 8008c2c:	021b      	lsls	r3, r3, #8
 8008c2e:	495b      	ldr	r1, [pc, #364]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008c30:	4313      	orrs	r3, r2
 8008c32:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d109      	bne.n	8008c4e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 fd8c 	bl	800975c <RCC_SetFlashLatencyFromMSIRange>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e380      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008c4e:	f000 fcc1 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 8008c52:	4602      	mov	r2, r0
 8008c54:	4b51      	ldr	r3, [pc, #324]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	091b      	lsrs	r3, r3, #4
 8008c5a:	f003 030f 	and.w	r3, r3, #15
 8008c5e:	4950      	ldr	r1, [pc, #320]	; (8008da0 <HAL_RCC_OscConfig+0x274>)
 8008c60:	5ccb      	ldrb	r3, [r1, r3]
 8008c62:	f003 031f 	and.w	r3, r3, #31
 8008c66:	fa22 f303 	lsr.w	r3, r2, r3
 8008c6a:	4a4e      	ldr	r2, [pc, #312]	; (8008da4 <HAL_RCC_OscConfig+0x278>)
 8008c6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008c6e:	4b4e      	ldr	r3, [pc, #312]	; (8008da8 <HAL_RCC_OscConfig+0x27c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fd fbf8 	bl	8006468 <HAL_InitTick>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d052      	beq.n	8008d28 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	e364      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d032      	beq.n	8008cf4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008c8e:	4b43      	ldr	r3, [pc, #268]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a42      	ldr	r2, [pc, #264]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008c94:	f043 0301 	orr.w	r3, r3, #1
 8008c98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008c9a:	f7fd fc35 	bl	8006508 <HAL_GetTick>
 8008c9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008ca0:	e008      	b.n	8008cb4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008ca2:	f7fd fc31 	bl	8006508 <HAL_GetTick>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d901      	bls.n	8008cb4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	e34d      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008cb4:	4b39      	ldr	r3, [pc, #228]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 0302 	and.w	r3, r3, #2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d0f0      	beq.n	8008ca2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008cc0:	4b36      	ldr	r3, [pc, #216]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a35      	ldr	r2, [pc, #212]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008cc6:	f043 0308 	orr.w	r3, r3, #8
 8008cca:	6013      	str	r3, [r2, #0]
 8008ccc:	4b33      	ldr	r3, [pc, #204]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	4930      	ldr	r1, [pc, #192]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008cde:	4b2f      	ldr	r3, [pc, #188]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	021b      	lsls	r3, r3, #8
 8008cec:	492b      	ldr	r1, [pc, #172]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	604b      	str	r3, [r1, #4]
 8008cf2:	e01a      	b.n	8008d2a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008cf4:	4b29      	ldr	r3, [pc, #164]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a28      	ldr	r2, [pc, #160]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008cfa:	f023 0301 	bic.w	r3, r3, #1
 8008cfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008d00:	f7fd fc02 	bl	8006508 <HAL_GetTick>
 8008d04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008d06:	e008      	b.n	8008d1a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008d08:	f7fd fbfe 	bl	8006508 <HAL_GetTick>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d901      	bls.n	8008d1a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e31a      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008d1a:	4b20      	ldr	r3, [pc, #128]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0302 	and.w	r3, r3, #2
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1f0      	bne.n	8008d08 <HAL_RCC_OscConfig+0x1dc>
 8008d26:	e000      	b.n	8008d2a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008d28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d073      	beq.n	8008e1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	2b08      	cmp	r3, #8
 8008d3a:	d005      	beq.n	8008d48 <HAL_RCC_OscConfig+0x21c>
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	2b0c      	cmp	r3, #12
 8008d40:	d10e      	bne.n	8008d60 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d10b      	bne.n	8008d60 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d48:	4b14      	ldr	r3, [pc, #80]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d063      	beq.n	8008e1c <HAL_RCC_OscConfig+0x2f0>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d15f      	bne.n	8008e1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e2f7      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d68:	d106      	bne.n	8008d78 <HAL_RCC_OscConfig+0x24c>
 8008d6a:	4b0c      	ldr	r3, [pc, #48]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a0b      	ldr	r2, [pc, #44]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d74:	6013      	str	r3, [r2, #0]
 8008d76:	e025      	b.n	8008dc4 <HAL_RCC_OscConfig+0x298>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d80:	d114      	bne.n	8008dac <HAL_RCC_OscConfig+0x280>
 8008d82:	4b06      	ldr	r3, [pc, #24]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a05      	ldr	r2, [pc, #20]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d8c:	6013      	str	r3, [r2, #0]
 8008d8e:	4b03      	ldr	r3, [pc, #12]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a02      	ldr	r2, [pc, #8]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d98:	6013      	str	r3, [r2, #0]
 8008d9a:	e013      	b.n	8008dc4 <HAL_RCC_OscConfig+0x298>
 8008d9c:	40021000 	.word	0x40021000
 8008da0:	08017620 	.word	0x08017620
 8008da4:	20000020 	.word	0x20000020
 8008da8:	20000024 	.word	0x20000024
 8008dac:	4ba0      	ldr	r3, [pc, #640]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a9f      	ldr	r2, [pc, #636]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	4b9d      	ldr	r3, [pc, #628]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a9c      	ldr	r2, [pc, #624]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d013      	beq.n	8008df4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dcc:	f7fd fb9c 	bl	8006508 <HAL_GetTick>
 8008dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008dd2:	e008      	b.n	8008de6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008dd4:	f7fd fb98 	bl	8006508 <HAL_GetTick>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	2b64      	cmp	r3, #100	; 0x64
 8008de0:	d901      	bls.n	8008de6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008de2:	2303      	movs	r3, #3
 8008de4:	e2b4      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008de6:	4b92      	ldr	r3, [pc, #584]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0f0      	beq.n	8008dd4 <HAL_RCC_OscConfig+0x2a8>
 8008df2:	e014      	b.n	8008e1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008df4:	f7fd fb88 	bl	8006508 <HAL_GetTick>
 8008df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008dfa:	e008      	b.n	8008e0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008dfc:	f7fd fb84 	bl	8006508 <HAL_GetTick>
 8008e00:	4602      	mov	r2, r0
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	2b64      	cmp	r3, #100	; 0x64
 8008e08:	d901      	bls.n	8008e0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e2a0      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e0e:	4b88      	ldr	r3, [pc, #544]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1f0      	bne.n	8008dfc <HAL_RCC_OscConfig+0x2d0>
 8008e1a:	e000      	b.n	8008e1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0302 	and.w	r3, r3, #2
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d060      	beq.n	8008eec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	2b04      	cmp	r3, #4
 8008e2e:	d005      	beq.n	8008e3c <HAL_RCC_OscConfig+0x310>
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	2b0c      	cmp	r3, #12
 8008e34:	d119      	bne.n	8008e6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d116      	bne.n	8008e6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e3c:	4b7c      	ldr	r3, [pc, #496]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d005      	beq.n	8008e54 <HAL_RCC_OscConfig+0x328>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e27d      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e54:	4b76      	ldr	r3, [pc, #472]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	061b      	lsls	r3, r3, #24
 8008e62:	4973      	ldr	r1, [pc, #460]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008e64:	4313      	orrs	r3, r2
 8008e66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e68:	e040      	b.n	8008eec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d023      	beq.n	8008eba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e72:	4b6f      	ldr	r3, [pc, #444]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a6e      	ldr	r2, [pc, #440]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e7e:	f7fd fb43 	bl	8006508 <HAL_GetTick>
 8008e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e84:	e008      	b.n	8008e98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e86:	f7fd fb3f 	bl	8006508 <HAL_GetTick>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d901      	bls.n	8008e98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e25b      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e98:	4b65      	ldr	r3, [pc, #404]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d0f0      	beq.n	8008e86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ea4:	4b62      	ldr	r3, [pc, #392]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	061b      	lsls	r3, r3, #24
 8008eb2:	495f      	ldr	r1, [pc, #380]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	604b      	str	r3, [r1, #4]
 8008eb8:	e018      	b.n	8008eec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008eba:	4b5d      	ldr	r3, [pc, #372]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a5c      	ldr	r2, [pc, #368]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec6:	f7fd fb1f 	bl	8006508 <HAL_GetTick>
 8008eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008ecc:	e008      	b.n	8008ee0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ece:	f7fd fb1b 	bl	8006508 <HAL_GetTick>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d901      	bls.n	8008ee0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008edc:	2303      	movs	r3, #3
 8008ede:	e237      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008ee0:	4b53      	ldr	r3, [pc, #332]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1f0      	bne.n	8008ece <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0308 	and.w	r3, r3, #8
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d03c      	beq.n	8008f72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	695b      	ldr	r3, [r3, #20]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d01c      	beq.n	8008f3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f00:	4b4b      	ldr	r3, [pc, #300]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f06:	4a4a      	ldr	r2, [pc, #296]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008f08:	f043 0301 	orr.w	r3, r3, #1
 8008f0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f10:	f7fd fafa 	bl	8006508 <HAL_GetTick>
 8008f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008f16:	e008      	b.n	8008f2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f18:	f7fd faf6 	bl	8006508 <HAL_GetTick>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d901      	bls.n	8008f2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008f26:	2303      	movs	r3, #3
 8008f28:	e212      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008f2a:	4b41      	ldr	r3, [pc, #260]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f30:	f003 0302 	and.w	r3, r3, #2
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d0ef      	beq.n	8008f18 <HAL_RCC_OscConfig+0x3ec>
 8008f38:	e01b      	b.n	8008f72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f3a:	4b3d      	ldr	r3, [pc, #244]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f40:	4a3b      	ldr	r2, [pc, #236]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008f42:	f023 0301 	bic.w	r3, r3, #1
 8008f46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f4a:	f7fd fadd 	bl	8006508 <HAL_GetTick>
 8008f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008f50:	e008      	b.n	8008f64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f52:	f7fd fad9 	bl	8006508 <HAL_GetTick>
 8008f56:	4602      	mov	r2, r0
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d901      	bls.n	8008f64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008f60:	2303      	movs	r3, #3
 8008f62:	e1f5      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008f64:	4b32      	ldr	r3, [pc, #200]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f6a:	f003 0302 	and.w	r3, r3, #2
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1ef      	bne.n	8008f52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0304 	and.w	r3, r3, #4
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 80a6 	beq.w	80090cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f80:	2300      	movs	r3, #0
 8008f82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008f84:	4b2a      	ldr	r3, [pc, #168]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10d      	bne.n	8008fac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f90:	4b27      	ldr	r3, [pc, #156]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f94:	4a26      	ldr	r2, [pc, #152]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8008f9c:	4b24      	ldr	r3, [pc, #144]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fa4:	60bb      	str	r3, [r7, #8]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fac:	4b21      	ldr	r3, [pc, #132]	; (8009034 <HAL_RCC_OscConfig+0x508>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d118      	bne.n	8008fea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fb8:	4b1e      	ldr	r3, [pc, #120]	; (8009034 <HAL_RCC_OscConfig+0x508>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a1d      	ldr	r2, [pc, #116]	; (8009034 <HAL_RCC_OscConfig+0x508>)
 8008fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fc4:	f7fd faa0 	bl	8006508 <HAL_GetTick>
 8008fc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fca:	e008      	b.n	8008fde <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fcc:	f7fd fa9c 	bl	8006508 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d901      	bls.n	8008fde <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e1b8      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fde:	4b15      	ldr	r3, [pc, #84]	; (8009034 <HAL_RCC_OscConfig+0x508>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0f0      	beq.n	8008fcc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d108      	bne.n	8009004 <HAL_RCC_OscConfig+0x4d8>
 8008ff2:	4b0f      	ldr	r3, [pc, #60]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff8:	4a0d      	ldr	r2, [pc, #52]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8008ffa:	f043 0301 	orr.w	r3, r3, #1
 8008ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009002:	e029      	b.n	8009058 <HAL_RCC_OscConfig+0x52c>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	2b05      	cmp	r3, #5
 800900a:	d115      	bne.n	8009038 <HAL_RCC_OscConfig+0x50c>
 800900c:	4b08      	ldr	r3, [pc, #32]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 800900e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009012:	4a07      	ldr	r2, [pc, #28]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8009014:	f043 0304 	orr.w	r3, r3, #4
 8009018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800901c:	4b04      	ldr	r3, [pc, #16]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 800901e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009022:	4a03      	ldr	r2, [pc, #12]	; (8009030 <HAL_RCC_OscConfig+0x504>)
 8009024:	f043 0301 	orr.w	r3, r3, #1
 8009028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800902c:	e014      	b.n	8009058 <HAL_RCC_OscConfig+0x52c>
 800902e:	bf00      	nop
 8009030:	40021000 	.word	0x40021000
 8009034:	40007000 	.word	0x40007000
 8009038:	4b9d      	ldr	r3, [pc, #628]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 800903a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800903e:	4a9c      	ldr	r2, [pc, #624]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 8009040:	f023 0301 	bic.w	r3, r3, #1
 8009044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009048:	4b99      	ldr	r3, [pc, #612]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 800904a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800904e:	4a98      	ldr	r2, [pc, #608]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 8009050:	f023 0304 	bic.w	r3, r3, #4
 8009054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d016      	beq.n	800908e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009060:	f7fd fa52 	bl	8006508 <HAL_GetTick>
 8009064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009066:	e00a      	b.n	800907e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009068:	f7fd fa4e 	bl	8006508 <HAL_GetTick>
 800906c:	4602      	mov	r2, r0
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	1ad3      	subs	r3, r2, r3
 8009072:	f241 3288 	movw	r2, #5000	; 0x1388
 8009076:	4293      	cmp	r3, r2
 8009078:	d901      	bls.n	800907e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	e168      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800907e:	4b8c      	ldr	r3, [pc, #560]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 8009080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009084:	f003 0302 	and.w	r3, r3, #2
 8009088:	2b00      	cmp	r3, #0
 800908a:	d0ed      	beq.n	8009068 <HAL_RCC_OscConfig+0x53c>
 800908c:	e015      	b.n	80090ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800908e:	f7fd fa3b 	bl	8006508 <HAL_GetTick>
 8009092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009094:	e00a      	b.n	80090ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009096:	f7fd fa37 	bl	8006508 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d901      	bls.n	80090ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80090a8:	2303      	movs	r3, #3
 80090aa:	e151      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80090ac:	4b80      	ldr	r3, [pc, #512]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 80090ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090b2:	f003 0302 	and.w	r3, r3, #2
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1ed      	bne.n	8009096 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80090ba:	7ffb      	ldrb	r3, [r7, #31]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d105      	bne.n	80090cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090c0:	4b7b      	ldr	r3, [pc, #492]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 80090c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090c4:	4a7a      	ldr	r2, [pc, #488]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 80090c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 0320 	and.w	r3, r3, #32
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d03c      	beq.n	8009152 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d01c      	beq.n	800911a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80090e0:	4b73      	ldr	r3, [pc, #460]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 80090e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80090e6:	4a72      	ldr	r2, [pc, #456]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 80090e8:	f043 0301 	orr.w	r3, r3, #1
 80090ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090f0:	f7fd fa0a 	bl	8006508 <HAL_GetTick>
 80090f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80090f6:	e008      	b.n	800910a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80090f8:	f7fd fa06 	bl	8006508 <HAL_GetTick>
 80090fc:	4602      	mov	r2, r0
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	2b02      	cmp	r3, #2
 8009104:	d901      	bls.n	800910a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e122      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800910a:	4b69      	ldr	r3, [pc, #420]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 800910c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009110:	f003 0302 	and.w	r3, r3, #2
 8009114:	2b00      	cmp	r3, #0
 8009116:	d0ef      	beq.n	80090f8 <HAL_RCC_OscConfig+0x5cc>
 8009118:	e01b      	b.n	8009152 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800911a:	4b65      	ldr	r3, [pc, #404]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 800911c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009120:	4a63      	ldr	r2, [pc, #396]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 8009122:	f023 0301 	bic.w	r3, r3, #1
 8009126:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800912a:	f7fd f9ed 	bl	8006508 <HAL_GetTick>
 800912e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009130:	e008      	b.n	8009144 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009132:	f7fd f9e9 	bl	8006508 <HAL_GetTick>
 8009136:	4602      	mov	r2, r0
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	1ad3      	subs	r3, r2, r3
 800913c:	2b02      	cmp	r3, #2
 800913e:	d901      	bls.n	8009144 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8009140:	2303      	movs	r3, #3
 8009142:	e105      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009144:	4b5a      	ldr	r3, [pc, #360]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 8009146:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800914a:	f003 0302 	and.w	r3, r3, #2
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1ef      	bne.n	8009132 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 80f9 	beq.w	800934e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009160:	2b02      	cmp	r3, #2
 8009162:	f040 80cf 	bne.w	8009304 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009166:	4b52      	ldr	r3, [pc, #328]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	f003 0203 	and.w	r2, r3, #3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009176:	429a      	cmp	r2, r3
 8009178:	d12c      	bne.n	80091d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009184:	3b01      	subs	r3, #1
 8009186:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009188:	429a      	cmp	r2, r3
 800918a:	d123      	bne.n	80091d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009196:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009198:	429a      	cmp	r2, r3
 800919a:	d11b      	bne.n	80091d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d113      	bne.n	80091d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b6:	085b      	lsrs	r3, r3, #1
 80091b8:	3b01      	subs	r3, #1
 80091ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80091bc:	429a      	cmp	r2, r3
 80091be:	d109      	bne.n	80091d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ca:	085b      	lsrs	r3, r3, #1
 80091cc:	3b01      	subs	r3, #1
 80091ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d071      	beq.n	80092b8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	2b0c      	cmp	r3, #12
 80091d8:	d068      	beq.n	80092ac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80091da:	4b35      	ldr	r3, [pc, #212]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d105      	bne.n	80091f2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80091e6:	4b32      	ldr	r3, [pc, #200]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e0ac      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80091f6:	4b2e      	ldr	r3, [pc, #184]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a2d      	ldr	r2, [pc, #180]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 80091fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009200:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009202:	f7fd f981 	bl	8006508 <HAL_GetTick>
 8009206:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009208:	e008      	b.n	800921c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800920a:	f7fd f97d 	bl	8006508 <HAL_GetTick>
 800920e:	4602      	mov	r2, r0
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	2b02      	cmp	r3, #2
 8009216:	d901      	bls.n	800921c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e099      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800921c:	4b24      	ldr	r3, [pc, #144]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1f0      	bne.n	800920a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009228:	4b21      	ldr	r3, [pc, #132]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 800922a:	68da      	ldr	r2, [r3, #12]
 800922c:	4b21      	ldr	r3, [pc, #132]	; (80092b4 <HAL_RCC_OscConfig+0x788>)
 800922e:	4013      	ands	r3, r2
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009238:	3a01      	subs	r2, #1
 800923a:	0112      	lsls	r2, r2, #4
 800923c:	4311      	orrs	r1, r2
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009242:	0212      	lsls	r2, r2, #8
 8009244:	4311      	orrs	r1, r2
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800924a:	0852      	lsrs	r2, r2, #1
 800924c:	3a01      	subs	r2, #1
 800924e:	0552      	lsls	r2, r2, #21
 8009250:	4311      	orrs	r1, r2
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009256:	0852      	lsrs	r2, r2, #1
 8009258:	3a01      	subs	r2, #1
 800925a:	0652      	lsls	r2, r2, #25
 800925c:	4311      	orrs	r1, r2
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009262:	06d2      	lsls	r2, r2, #27
 8009264:	430a      	orrs	r2, r1
 8009266:	4912      	ldr	r1, [pc, #72]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 8009268:	4313      	orrs	r3, r2
 800926a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800926c:	4b10      	ldr	r3, [pc, #64]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a0f      	ldr	r2, [pc, #60]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 8009272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009276:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009278:	4b0d      	ldr	r3, [pc, #52]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	4a0c      	ldr	r2, [pc, #48]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 800927e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009282:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009284:	f7fd f940 	bl	8006508 <HAL_GetTick>
 8009288:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800928a:	e008      	b.n	800929e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800928c:	f7fd f93c 	bl	8006508 <HAL_GetTick>
 8009290:	4602      	mov	r2, r0
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	1ad3      	subs	r3, r2, r3
 8009296:	2b02      	cmp	r3, #2
 8009298:	d901      	bls.n	800929e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800929a:	2303      	movs	r3, #3
 800929c:	e058      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800929e:	4b04      	ldr	r3, [pc, #16]	; (80092b0 <HAL_RCC_OscConfig+0x784>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d0f0      	beq.n	800928c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80092aa:	e050      	b.n	800934e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e04f      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
 80092b0:	40021000 	.word	0x40021000
 80092b4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092b8:	4b27      	ldr	r3, [pc, #156]	; (8009358 <HAL_RCC_OscConfig+0x82c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d144      	bne.n	800934e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80092c4:	4b24      	ldr	r3, [pc, #144]	; (8009358 <HAL_RCC_OscConfig+0x82c>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a23      	ldr	r2, [pc, #140]	; (8009358 <HAL_RCC_OscConfig+0x82c>)
 80092ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80092d0:	4b21      	ldr	r3, [pc, #132]	; (8009358 <HAL_RCC_OscConfig+0x82c>)
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	4a20      	ldr	r2, [pc, #128]	; (8009358 <HAL_RCC_OscConfig+0x82c>)
 80092d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80092dc:	f7fd f914 	bl	8006508 <HAL_GetTick>
 80092e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092e2:	e008      	b.n	80092f6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092e4:	f7fd f910 	bl	8006508 <HAL_GetTick>
 80092e8:	4602      	mov	r2, r0
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d901      	bls.n	80092f6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80092f2:	2303      	movs	r3, #3
 80092f4:	e02c      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092f6:	4b18      	ldr	r3, [pc, #96]	; (8009358 <HAL_RCC_OscConfig+0x82c>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d0f0      	beq.n	80092e4 <HAL_RCC_OscConfig+0x7b8>
 8009302:	e024      	b.n	800934e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	2b0c      	cmp	r3, #12
 8009308:	d01f      	beq.n	800934a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800930a:	4b13      	ldr	r3, [pc, #76]	; (8009358 <HAL_RCC_OscConfig+0x82c>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a12      	ldr	r2, [pc, #72]	; (8009358 <HAL_RCC_OscConfig+0x82c>)
 8009310:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009316:	f7fd f8f7 	bl	8006508 <HAL_GetTick>
 800931a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800931c:	e008      	b.n	8009330 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800931e:	f7fd f8f3 	bl	8006508 <HAL_GetTick>
 8009322:	4602      	mov	r2, r0
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	2b02      	cmp	r3, #2
 800932a:	d901      	bls.n	8009330 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800932c:	2303      	movs	r3, #3
 800932e:	e00f      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009330:	4b09      	ldr	r3, [pc, #36]	; (8009358 <HAL_RCC_OscConfig+0x82c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1f0      	bne.n	800931e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800933c:	4b06      	ldr	r3, [pc, #24]	; (8009358 <HAL_RCC_OscConfig+0x82c>)
 800933e:	68da      	ldr	r2, [r3, #12]
 8009340:	4905      	ldr	r1, [pc, #20]	; (8009358 <HAL_RCC_OscConfig+0x82c>)
 8009342:	4b06      	ldr	r3, [pc, #24]	; (800935c <HAL_RCC_OscConfig+0x830>)
 8009344:	4013      	ands	r3, r2
 8009346:	60cb      	str	r3, [r1, #12]
 8009348:	e001      	b.n	800934e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e000      	b.n	8009350 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3720      	adds	r7, #32
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	40021000 	.word	0x40021000
 800935c:	feeefffc 	.word	0xfeeefffc

08009360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800936a:	2300      	movs	r3, #0
 800936c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d101      	bne.n	8009378 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e11d      	b.n	80095b4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009378:	4b90      	ldr	r3, [pc, #576]	; (80095bc <HAL_RCC_ClockConfig+0x25c>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 030f 	and.w	r3, r3, #15
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	429a      	cmp	r2, r3
 8009384:	d910      	bls.n	80093a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009386:	4b8d      	ldr	r3, [pc, #564]	; (80095bc <HAL_RCC_ClockConfig+0x25c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f023 020f 	bic.w	r2, r3, #15
 800938e:	498b      	ldr	r1, [pc, #556]	; (80095bc <HAL_RCC_ClockConfig+0x25c>)
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	4313      	orrs	r3, r2
 8009394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009396:	4b89      	ldr	r3, [pc, #548]	; (80095bc <HAL_RCC_ClockConfig+0x25c>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 030f 	and.w	r3, r3, #15
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d001      	beq.n	80093a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e105      	b.n	80095b4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0302 	and.w	r3, r3, #2
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d010      	beq.n	80093d6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	689a      	ldr	r2, [r3, #8]
 80093b8:	4b81      	ldr	r3, [pc, #516]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d908      	bls.n	80093d6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093c4:	4b7e      	ldr	r3, [pc, #504]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	497b      	ldr	r1, [pc, #492]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 80093d2:	4313      	orrs	r3, r2
 80093d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d079      	beq.n	80094d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	d11e      	bne.n	8009428 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093ea:	4b75      	ldr	r3, [pc, #468]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d101      	bne.n	80093fa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e0dc      	b.n	80095b4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80093fa:	f000 fa09 	bl	8009810 <RCC_GetSysClockFreqFromPLLSource>
 80093fe:	4603      	mov	r3, r0
 8009400:	4a70      	ldr	r2, [pc, #448]	; (80095c4 <HAL_RCC_ClockConfig+0x264>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d946      	bls.n	8009494 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009406:	4b6e      	ldr	r3, [pc, #440]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d140      	bne.n	8009494 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009412:	4b6b      	ldr	r3, [pc, #428]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800941a:	4a69      	ldr	r2, [pc, #420]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 800941c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009420:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009422:	2380      	movs	r3, #128	; 0x80
 8009424:	617b      	str	r3, [r7, #20]
 8009426:	e035      	b.n	8009494 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	2b02      	cmp	r3, #2
 800942e:	d107      	bne.n	8009440 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009430:	4b63      	ldr	r3, [pc, #396]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009438:	2b00      	cmp	r3, #0
 800943a:	d115      	bne.n	8009468 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e0b9      	b.n	80095b4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d107      	bne.n	8009458 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009448:	4b5d      	ldr	r3, [pc, #372]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 0302 	and.w	r3, r3, #2
 8009450:	2b00      	cmp	r3, #0
 8009452:	d109      	bne.n	8009468 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	e0ad      	b.n	80095b4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009458:	4b59      	ldr	r3, [pc, #356]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009460:	2b00      	cmp	r3, #0
 8009462:	d101      	bne.n	8009468 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e0a5      	b.n	80095b4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8009468:	f000 f8b4 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 800946c:	4603      	mov	r3, r0
 800946e:	4a55      	ldr	r2, [pc, #340]	; (80095c4 <HAL_RCC_ClockConfig+0x264>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d90f      	bls.n	8009494 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009474:	4b52      	ldr	r3, [pc, #328]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d109      	bne.n	8009494 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009480:	4b4f      	ldr	r3, [pc, #316]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009488:	4a4d      	ldr	r2, [pc, #308]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 800948a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800948e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009490:	2380      	movs	r3, #128	; 0x80
 8009492:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009494:	4b4a      	ldr	r3, [pc, #296]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	f023 0203 	bic.w	r2, r3, #3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	4947      	ldr	r1, [pc, #284]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 80094a2:	4313      	orrs	r3, r2
 80094a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094a6:	f7fd f82f 	bl	8006508 <HAL_GetTick>
 80094aa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094ac:	e00a      	b.n	80094c4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094ae:	f7fd f82b 	bl	8006508 <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80094bc:	4293      	cmp	r3, r2
 80094be:	d901      	bls.n	80094c4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80094c0:	2303      	movs	r3, #3
 80094c2:	e077      	b.n	80095b4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094c4:	4b3e      	ldr	r3, [pc, #248]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f003 020c 	and.w	r2, r3, #12
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d1eb      	bne.n	80094ae <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	2b80      	cmp	r3, #128	; 0x80
 80094da:	d105      	bne.n	80094e8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80094dc:	4b38      	ldr	r3, [pc, #224]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	4a37      	ldr	r2, [pc, #220]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 80094e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094e6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 0302 	and.w	r3, r3, #2
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d010      	beq.n	8009516 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	689a      	ldr	r2, [r3, #8]
 80094f8:	4b31      	ldr	r3, [pc, #196]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009500:	429a      	cmp	r2, r3
 8009502:	d208      	bcs.n	8009516 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009504:	4b2e      	ldr	r3, [pc, #184]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	492b      	ldr	r1, [pc, #172]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 8009512:	4313      	orrs	r3, r2
 8009514:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009516:	4b29      	ldr	r3, [pc, #164]	; (80095bc <HAL_RCC_ClockConfig+0x25c>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 030f 	and.w	r3, r3, #15
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	429a      	cmp	r2, r3
 8009522:	d210      	bcs.n	8009546 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009524:	4b25      	ldr	r3, [pc, #148]	; (80095bc <HAL_RCC_ClockConfig+0x25c>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f023 020f 	bic.w	r2, r3, #15
 800952c:	4923      	ldr	r1, [pc, #140]	; (80095bc <HAL_RCC_ClockConfig+0x25c>)
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	4313      	orrs	r3, r2
 8009532:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009534:	4b21      	ldr	r3, [pc, #132]	; (80095bc <HAL_RCC_ClockConfig+0x25c>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 030f 	and.w	r3, r3, #15
 800953c:	683a      	ldr	r2, [r7, #0]
 800953e:	429a      	cmp	r2, r3
 8009540:	d001      	beq.n	8009546 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	e036      	b.n	80095b4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 0304 	and.w	r3, r3, #4
 800954e:	2b00      	cmp	r3, #0
 8009550:	d008      	beq.n	8009564 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009552:	4b1b      	ldr	r3, [pc, #108]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	4918      	ldr	r1, [pc, #96]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 8009560:	4313      	orrs	r3, r2
 8009562:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0308 	and.w	r3, r3, #8
 800956c:	2b00      	cmp	r3, #0
 800956e:	d009      	beq.n	8009584 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009570:	4b13      	ldr	r3, [pc, #76]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	00db      	lsls	r3, r3, #3
 800957e:	4910      	ldr	r1, [pc, #64]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 8009580:	4313      	orrs	r3, r2
 8009582:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009584:	f000 f826 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 8009588:	4602      	mov	r2, r0
 800958a:	4b0d      	ldr	r3, [pc, #52]	; (80095c0 <HAL_RCC_ClockConfig+0x260>)
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	091b      	lsrs	r3, r3, #4
 8009590:	f003 030f 	and.w	r3, r3, #15
 8009594:	490c      	ldr	r1, [pc, #48]	; (80095c8 <HAL_RCC_ClockConfig+0x268>)
 8009596:	5ccb      	ldrb	r3, [r1, r3]
 8009598:	f003 031f 	and.w	r3, r3, #31
 800959c:	fa22 f303 	lsr.w	r3, r2, r3
 80095a0:	4a0a      	ldr	r2, [pc, #40]	; (80095cc <HAL_RCC_ClockConfig+0x26c>)
 80095a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80095a4:	4b0a      	ldr	r3, [pc, #40]	; (80095d0 <HAL_RCC_ClockConfig+0x270>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7fc ff5d 	bl	8006468 <HAL_InitTick>
 80095ae:	4603      	mov	r3, r0
 80095b0:	73fb      	strb	r3, [r7, #15]

  return status;
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3718      	adds	r7, #24
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	40022000 	.word	0x40022000
 80095c0:	40021000 	.word	0x40021000
 80095c4:	04c4b400 	.word	0x04c4b400
 80095c8:	08017620 	.word	0x08017620
 80095cc:	20000020 	.word	0x20000020
 80095d0:	20000024 	.word	0x20000024

080095d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b089      	sub	sp, #36	; 0x24
 80095d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80095da:	2300      	movs	r3, #0
 80095dc:	61fb      	str	r3, [r7, #28]
 80095de:	2300      	movs	r3, #0
 80095e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095e2:	4b3e      	ldr	r3, [pc, #248]	; (80096dc <HAL_RCC_GetSysClockFreq+0x108>)
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	f003 030c 	and.w	r3, r3, #12
 80095ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80095ec:	4b3b      	ldr	r3, [pc, #236]	; (80096dc <HAL_RCC_GetSysClockFreq+0x108>)
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	f003 0303 	and.w	r3, r3, #3
 80095f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d005      	beq.n	8009608 <HAL_RCC_GetSysClockFreq+0x34>
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	2b0c      	cmp	r3, #12
 8009600:	d121      	bne.n	8009646 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d11e      	bne.n	8009646 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009608:	4b34      	ldr	r3, [pc, #208]	; (80096dc <HAL_RCC_GetSysClockFreq+0x108>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 0308 	and.w	r3, r3, #8
 8009610:	2b00      	cmp	r3, #0
 8009612:	d107      	bne.n	8009624 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009614:	4b31      	ldr	r3, [pc, #196]	; (80096dc <HAL_RCC_GetSysClockFreq+0x108>)
 8009616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800961a:	0a1b      	lsrs	r3, r3, #8
 800961c:	f003 030f 	and.w	r3, r3, #15
 8009620:	61fb      	str	r3, [r7, #28]
 8009622:	e005      	b.n	8009630 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009624:	4b2d      	ldr	r3, [pc, #180]	; (80096dc <HAL_RCC_GetSysClockFreq+0x108>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	091b      	lsrs	r3, r3, #4
 800962a:	f003 030f 	and.w	r3, r3, #15
 800962e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009630:	4a2b      	ldr	r2, [pc, #172]	; (80096e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009638:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10d      	bne.n	800965c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009644:	e00a      	b.n	800965c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	2b04      	cmp	r3, #4
 800964a:	d102      	bne.n	8009652 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800964c:	4b25      	ldr	r3, [pc, #148]	; (80096e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800964e:	61bb      	str	r3, [r7, #24]
 8009650:	e004      	b.n	800965c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2b08      	cmp	r3, #8
 8009656:	d101      	bne.n	800965c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009658:	4b23      	ldr	r3, [pc, #140]	; (80096e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800965a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	2b0c      	cmp	r3, #12
 8009660:	d134      	bne.n	80096cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009662:	4b1e      	ldr	r3, [pc, #120]	; (80096dc <HAL_RCC_GetSysClockFreq+0x108>)
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	f003 0303 	and.w	r3, r3, #3
 800966a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	2b02      	cmp	r3, #2
 8009670:	d003      	beq.n	800967a <HAL_RCC_GetSysClockFreq+0xa6>
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	2b03      	cmp	r3, #3
 8009676:	d003      	beq.n	8009680 <HAL_RCC_GetSysClockFreq+0xac>
 8009678:	e005      	b.n	8009686 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800967a:	4b1a      	ldr	r3, [pc, #104]	; (80096e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800967c:	617b      	str	r3, [r7, #20]
      break;
 800967e:	e005      	b.n	800968c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009680:	4b19      	ldr	r3, [pc, #100]	; (80096e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8009682:	617b      	str	r3, [r7, #20]
      break;
 8009684:	e002      	b.n	800968c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	617b      	str	r3, [r7, #20]
      break;
 800968a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800968c:	4b13      	ldr	r3, [pc, #76]	; (80096dc <HAL_RCC_GetSysClockFreq+0x108>)
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	091b      	lsrs	r3, r3, #4
 8009692:	f003 030f 	and.w	r3, r3, #15
 8009696:	3301      	adds	r3, #1
 8009698:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800969a:	4b10      	ldr	r3, [pc, #64]	; (80096dc <HAL_RCC_GetSysClockFreq+0x108>)
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	0a1b      	lsrs	r3, r3, #8
 80096a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	fb03 f202 	mul.w	r2, r3, r2
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80096b2:	4b0a      	ldr	r3, [pc, #40]	; (80096dc <HAL_RCC_GetSysClockFreq+0x108>)
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	0e5b      	lsrs	r3, r3, #25
 80096b8:	f003 0303 	and.w	r3, r3, #3
 80096bc:	3301      	adds	r3, #1
 80096be:	005b      	lsls	r3, r3, #1
 80096c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80096cc:	69bb      	ldr	r3, [r7, #24]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3724      	adds	r7, #36	; 0x24
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	40021000 	.word	0x40021000
 80096e0:	08017638 	.word	0x08017638
 80096e4:	00f42400 	.word	0x00f42400
 80096e8:	007a1200 	.word	0x007a1200

080096ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096ec:	b480      	push	{r7}
 80096ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80096f0:	4b03      	ldr	r3, [pc, #12]	; (8009700 <HAL_RCC_GetHCLKFreq+0x14>)
 80096f2:	681b      	ldr	r3, [r3, #0]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	20000020 	.word	0x20000020

08009704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009708:	f7ff fff0 	bl	80096ec <HAL_RCC_GetHCLKFreq>
 800970c:	4602      	mov	r2, r0
 800970e:	4b06      	ldr	r3, [pc, #24]	; (8009728 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	0a1b      	lsrs	r3, r3, #8
 8009714:	f003 0307 	and.w	r3, r3, #7
 8009718:	4904      	ldr	r1, [pc, #16]	; (800972c <HAL_RCC_GetPCLK1Freq+0x28>)
 800971a:	5ccb      	ldrb	r3, [r1, r3]
 800971c:	f003 031f 	and.w	r3, r3, #31
 8009720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009724:	4618      	mov	r0, r3
 8009726:	bd80      	pop	{r7, pc}
 8009728:	40021000 	.word	0x40021000
 800972c:	08017630 	.word	0x08017630

08009730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009734:	f7ff ffda 	bl	80096ec <HAL_RCC_GetHCLKFreq>
 8009738:	4602      	mov	r2, r0
 800973a:	4b06      	ldr	r3, [pc, #24]	; (8009754 <HAL_RCC_GetPCLK2Freq+0x24>)
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	0adb      	lsrs	r3, r3, #11
 8009740:	f003 0307 	and.w	r3, r3, #7
 8009744:	4904      	ldr	r1, [pc, #16]	; (8009758 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009746:	5ccb      	ldrb	r3, [r1, r3]
 8009748:	f003 031f 	and.w	r3, r3, #31
 800974c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009750:	4618      	mov	r0, r3
 8009752:	bd80      	pop	{r7, pc}
 8009754:	40021000 	.word	0x40021000
 8009758:	08017630 	.word	0x08017630

0800975c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009764:	2300      	movs	r3, #0
 8009766:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009768:	4b27      	ldr	r3, [pc, #156]	; (8009808 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800976a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800976c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d003      	beq.n	800977c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009774:	f7ff f906 	bl	8008984 <HAL_PWREx_GetVoltageRange>
 8009778:	6178      	str	r0, [r7, #20]
 800977a:	e014      	b.n	80097a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800977c:	4b22      	ldr	r3, [pc, #136]	; (8009808 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800977e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009780:	4a21      	ldr	r2, [pc, #132]	; (8009808 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009786:	6593      	str	r3, [r2, #88]	; 0x58
 8009788:	4b1f      	ldr	r3, [pc, #124]	; (8009808 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800978a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800978c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009790:	60fb      	str	r3, [r7, #12]
 8009792:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009794:	f7ff f8f6 	bl	8008984 <HAL_PWREx_GetVoltageRange>
 8009798:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800979a:	4b1b      	ldr	r3, [pc, #108]	; (8009808 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800979c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800979e:	4a1a      	ldr	r2, [pc, #104]	; (8009808 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80097a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097ac:	d10b      	bne.n	80097c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b80      	cmp	r3, #128	; 0x80
 80097b2:	d913      	bls.n	80097dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2ba0      	cmp	r3, #160	; 0xa0
 80097b8:	d902      	bls.n	80097c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80097ba:	2302      	movs	r3, #2
 80097bc:	613b      	str	r3, [r7, #16]
 80097be:	e00d      	b.n	80097dc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80097c0:	2301      	movs	r3, #1
 80097c2:	613b      	str	r3, [r7, #16]
 80097c4:	e00a      	b.n	80097dc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b7f      	cmp	r3, #127	; 0x7f
 80097ca:	d902      	bls.n	80097d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80097cc:	2302      	movs	r3, #2
 80097ce:	613b      	str	r3, [r7, #16]
 80097d0:	e004      	b.n	80097dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b70      	cmp	r3, #112	; 0x70
 80097d6:	d101      	bne.n	80097dc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80097d8:	2301      	movs	r3, #1
 80097da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80097dc:	4b0b      	ldr	r3, [pc, #44]	; (800980c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f023 020f 	bic.w	r2, r3, #15
 80097e4:	4909      	ldr	r1, [pc, #36]	; (800980c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80097ec:	4b07      	ldr	r3, [pc, #28]	; (800980c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 030f 	and.w	r3, r3, #15
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d001      	beq.n	80097fe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e000      	b.n	8009800 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3718      	adds	r7, #24
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	40021000 	.word	0x40021000
 800980c:	40022000 	.word	0x40022000

08009810 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009810:	b480      	push	{r7}
 8009812:	b087      	sub	sp, #28
 8009814:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009816:	4b2d      	ldr	r3, [pc, #180]	; (80098cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	f003 0303 	and.w	r3, r3, #3
 800981e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2b03      	cmp	r3, #3
 8009824:	d00b      	beq.n	800983e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2b03      	cmp	r3, #3
 800982a:	d825      	bhi.n	8009878 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2b01      	cmp	r3, #1
 8009830:	d008      	beq.n	8009844 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2b02      	cmp	r3, #2
 8009836:	d11f      	bne.n	8009878 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8009838:	4b25      	ldr	r3, [pc, #148]	; (80098d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800983a:	613b      	str	r3, [r7, #16]
    break;
 800983c:	e01f      	b.n	800987e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800983e:	4b25      	ldr	r3, [pc, #148]	; (80098d4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8009840:	613b      	str	r3, [r7, #16]
    break;
 8009842:	e01c      	b.n	800987e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009844:	4b21      	ldr	r3, [pc, #132]	; (80098cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 0308 	and.w	r3, r3, #8
 800984c:	2b00      	cmp	r3, #0
 800984e:	d107      	bne.n	8009860 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009850:	4b1e      	ldr	r3, [pc, #120]	; (80098cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009856:	0a1b      	lsrs	r3, r3, #8
 8009858:	f003 030f 	and.w	r3, r3, #15
 800985c:	617b      	str	r3, [r7, #20]
 800985e:	e005      	b.n	800986c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009860:	4b1a      	ldr	r3, [pc, #104]	; (80098cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	091b      	lsrs	r3, r3, #4
 8009866:	f003 030f 	and.w	r3, r3, #15
 800986a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800986c:	4a1a      	ldr	r2, [pc, #104]	; (80098d8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009874:	613b      	str	r3, [r7, #16]
    break;
 8009876:	e002      	b.n	800987e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8009878:	2300      	movs	r3, #0
 800987a:	613b      	str	r3, [r7, #16]
    break;
 800987c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800987e:	4b13      	ldr	r3, [pc, #76]	; (80098cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	091b      	lsrs	r3, r3, #4
 8009884:	f003 030f 	and.w	r3, r3, #15
 8009888:	3301      	adds	r3, #1
 800988a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800988c:	4b0f      	ldr	r3, [pc, #60]	; (80098cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	0a1b      	lsrs	r3, r3, #8
 8009892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	fb03 f202 	mul.w	r2, r3, r2
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	fbb2 f3f3 	udiv	r3, r2, r3
 80098a2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80098a4:	4b09      	ldr	r3, [pc, #36]	; (80098cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	0e5b      	lsrs	r3, r3, #25
 80098aa:	f003 0303 	and.w	r3, r3, #3
 80098ae:	3301      	adds	r3, #1
 80098b0:	005b      	lsls	r3, r3, #1
 80098b2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098bc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80098be:	683b      	ldr	r3, [r7, #0]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	371c      	adds	r7, #28
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	40021000 	.word	0x40021000
 80098d0:	00f42400 	.word	0x00f42400
 80098d4:	007a1200 	.word	0x007a1200
 80098d8:	08017638 	.word	0x08017638

080098dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80098e4:	2300      	movs	r3, #0
 80098e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80098e8:	2300      	movs	r3, #0
 80098ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d040      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098fc:	2b80      	cmp	r3, #128	; 0x80
 80098fe:	d02a      	beq.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009900:	2b80      	cmp	r3, #128	; 0x80
 8009902:	d825      	bhi.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009904:	2b60      	cmp	r3, #96	; 0x60
 8009906:	d026      	beq.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009908:	2b60      	cmp	r3, #96	; 0x60
 800990a:	d821      	bhi.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800990c:	2b40      	cmp	r3, #64	; 0x40
 800990e:	d006      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8009910:	2b40      	cmp	r3, #64	; 0x40
 8009912:	d81d      	bhi.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009914:	2b00      	cmp	r3, #0
 8009916:	d009      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8009918:	2b20      	cmp	r3, #32
 800991a:	d010      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800991c:	e018      	b.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800991e:	4b89      	ldr	r3, [pc, #548]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	4a88      	ldr	r2, [pc, #544]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009928:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800992a:	e015      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3304      	adds	r3, #4
 8009930:	2100      	movs	r1, #0
 8009932:	4618      	mov	r0, r3
 8009934:	f001 fa34 	bl	800ada0 <RCCEx_PLLSAI1_Config>
 8009938:	4603      	mov	r3, r0
 800993a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800993c:	e00c      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	3320      	adds	r3, #32
 8009942:	2100      	movs	r1, #0
 8009944:	4618      	mov	r0, r3
 8009946:	f001 fb1f 	bl	800af88 <RCCEx_PLLSAI2_Config>
 800994a:	4603      	mov	r3, r0
 800994c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800994e:	e003      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	74fb      	strb	r3, [r7, #19]
      break;
 8009954:	e000      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8009956:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009958:	7cfb      	ldrb	r3, [r7, #19]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10b      	bne.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800995e:	4b79      	ldr	r3, [pc, #484]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009960:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009964:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800996c:	4975      	ldr	r1, [pc, #468]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800996e:	4313      	orrs	r3, r2
 8009970:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009974:	e001      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009976:	7cfb      	ldrb	r3, [r7, #19]
 8009978:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009982:	2b00      	cmp	r3, #0
 8009984:	d047      	beq.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800998e:	d030      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009994:	d82a      	bhi.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800999a:	d02a      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800999c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099a0:	d824      	bhi.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80099a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099a6:	d008      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0xde>
 80099a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099ac:	d81e      	bhi.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00a      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80099b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099b6:	d010      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80099b8:	e018      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80099ba:	4b62      	ldr	r3, [pc, #392]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	4a61      	ldr	r2, [pc, #388]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80099c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099c4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80099c6:	e015      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3304      	adds	r3, #4
 80099cc:	2100      	movs	r1, #0
 80099ce:	4618      	mov	r0, r3
 80099d0:	f001 f9e6 	bl	800ada0 <RCCEx_PLLSAI1_Config>
 80099d4:	4603      	mov	r3, r0
 80099d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80099d8:	e00c      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	3320      	adds	r3, #32
 80099de:	2100      	movs	r1, #0
 80099e0:	4618      	mov	r0, r3
 80099e2:	f001 fad1 	bl	800af88 <RCCEx_PLLSAI2_Config>
 80099e6:	4603      	mov	r3, r0
 80099e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80099ea:	e003      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	74fb      	strb	r3, [r7, #19]
      break;
 80099f0:	e000      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80099f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099f4:	7cfb      	ldrb	r3, [r7, #19]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10b      	bne.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80099fa:	4b52      	ldr	r3, [pc, #328]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80099fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a08:	494e      	ldr	r1, [pc, #312]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009a10:	e001      	b.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a12:	7cfb      	ldrb	r3, [r7, #19]
 8009a14:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f000 809f 	beq.w	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a24:	2300      	movs	r3, #0
 8009a26:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009a28:	4b46      	ldr	r3, [pc, #280]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d101      	bne.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8009a34:	2301      	movs	r3, #1
 8009a36:	e000      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00d      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a3e:	4b41      	ldr	r3, [pc, #260]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a42:	4a40      	ldr	r2, [pc, #256]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a48:	6593      	str	r3, [r2, #88]	; 0x58
 8009a4a:	4b3e      	ldr	r3, [pc, #248]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a52:	60bb      	str	r3, [r7, #8]
 8009a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a56:	2301      	movs	r3, #1
 8009a58:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a5a:	4b3b      	ldr	r3, [pc, #236]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a3a      	ldr	r2, [pc, #232]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a66:	f7fc fd4f 	bl	8006508 <HAL_GetTick>
 8009a6a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009a6c:	e009      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a6e:	f7fc fd4b 	bl	8006508 <HAL_GetTick>
 8009a72:	4602      	mov	r2, r0
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d902      	bls.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	74fb      	strb	r3, [r7, #19]
        break;
 8009a80:	e005      	b.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009a82:	4b31      	ldr	r3, [pc, #196]	; (8009b48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d0ef      	beq.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8009a8e:	7cfb      	ldrb	r3, [r7, #19]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d15b      	bne.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009a94:	4b2b      	ldr	r3, [pc, #172]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a9e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d01f      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d019      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009ab2:	4b24      	ldr	r3, [pc, #144]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009abc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009abe:	4b21      	ldr	r3, [pc, #132]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ac4:	4a1f      	ldr	r2, [pc, #124]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ace:	4b1d      	ldr	r3, [pc, #116]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ad4:	4a1b      	ldr	r2, [pc, #108]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009ade:	4a19      	ldr	r2, [pc, #100]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f003 0301 	and.w	r3, r3, #1
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d016      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009af0:	f7fc fd0a 	bl	8006508 <HAL_GetTick>
 8009af4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009af6:	e00b      	b.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009af8:	f7fc fd06 	bl	8006508 <HAL_GetTick>
 8009afc:	4602      	mov	r2, r0
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d902      	bls.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	74fb      	strb	r3, [r7, #19]
            break;
 8009b0e:	e006      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b10:	4b0c      	ldr	r3, [pc, #48]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b16:	f003 0302 	and.w	r3, r3, #2
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d0ec      	beq.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8009b1e:	7cfb      	ldrb	r3, [r7, #19]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10c      	bne.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b24:	4b07      	ldr	r3, [pc, #28]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b34:	4903      	ldr	r1, [pc, #12]	; (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009b36:	4313      	orrs	r3, r2
 8009b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009b3c:	e008      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b3e:	7cfb      	ldrb	r3, [r7, #19]
 8009b40:	74bb      	strb	r3, [r7, #18]
 8009b42:	e005      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8009b44:	40021000 	.word	0x40021000
 8009b48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b4c:	7cfb      	ldrb	r3, [r7, #19]
 8009b4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b50:	7c7b      	ldrb	r3, [r7, #17]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d105      	bne.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b56:	4ba0      	ldr	r3, [pc, #640]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b5a:	4a9f      	ldr	r2, [pc, #636]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00a      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009b6e:	4b9a      	ldr	r3, [pc, #616]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b74:	f023 0203 	bic.w	r2, r3, #3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b7c:	4996      	ldr	r1, [pc, #600]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 0302 	and.w	r3, r3, #2
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00a      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009b90:	4b91      	ldr	r3, [pc, #580]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b96:	f023 020c 	bic.w	r2, r3, #12
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9e:	498e      	ldr	r1, [pc, #568]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f003 0304 	and.w	r3, r3, #4
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00a      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009bb2:	4b89      	ldr	r3, [pc, #548]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc0:	4985      	ldr	r1, [pc, #532]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0308 	and.w	r3, r3, #8
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00a      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009bd4:	4b80      	ldr	r3, [pc, #512]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009be2:	497d      	ldr	r1, [pc, #500]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009be4:	4313      	orrs	r3, r2
 8009be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0310 	and.w	r3, r3, #16
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00a      	beq.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009bf6:	4b78      	ldr	r3, [pc, #480]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c04:	4974      	ldr	r1, [pc, #464]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c06:	4313      	orrs	r3, r2
 8009c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 0320 	and.w	r3, r3, #32
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00a      	beq.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c18:	4b6f      	ldr	r3, [pc, #444]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c26:	496c      	ldr	r1, [pc, #432]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00a      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c3a:	4b67      	ldr	r3, [pc, #412]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c48:	4963      	ldr	r1, [pc, #396]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00a      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c5c:	4b5e      	ldr	r3, [pc, #376]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c6a:	495b      	ldr	r1, [pc, #364]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00a      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009c7e:	4b56      	ldr	r3, [pc, #344]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c8c:	4952      	ldr	r1, [pc, #328]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00a      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009ca0:	4b4d      	ldr	r3, [pc, #308]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ca6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cae:	494a      	ldr	r1, [pc, #296]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00a      	beq.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009cc2:	4b45      	ldr	r3, [pc, #276]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cd0:	4941      	ldr	r1, [pc, #260]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00a      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ce4:	4b3c      	ldr	r3, [pc, #240]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009ce6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009cea:	f023 0203 	bic.w	r2, r3, #3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cf2:	4939      	ldr	r1, [pc, #228]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d028      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d06:	4b34      	ldr	r3, [pc, #208]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d14:	4930      	ldr	r1, [pc, #192]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d16:	4313      	orrs	r3, r2
 8009d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d24:	d106      	bne.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d26:	4b2c      	ldr	r3, [pc, #176]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	4a2b      	ldr	r2, [pc, #172]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d30:	60d3      	str	r3, [r2, #12]
 8009d32:	e011      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d3c:	d10c      	bne.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	3304      	adds	r3, #4
 8009d42:	2101      	movs	r1, #1
 8009d44:	4618      	mov	r0, r3
 8009d46:	f001 f82b 	bl	800ada0 <RCCEx_PLLSAI1_Config>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009d4e:	7cfb      	ldrb	r3, [r7, #19]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d001      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8009d54:	7cfb      	ldrb	r3, [r7, #19]
 8009d56:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d04d      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d6c:	d108      	bne.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8009d6e:	4b1a      	ldr	r3, [pc, #104]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d74:	4a18      	ldr	r2, [pc, #96]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d7a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8009d7e:	e012      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8009d80:	4b15      	ldr	r3, [pc, #84]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d86:	4a14      	ldr	r2, [pc, #80]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d8c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8009d90:	4b11      	ldr	r3, [pc, #68]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d9e:	490e      	ldr	r1, [pc, #56]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009da0:	4313      	orrs	r3, r2
 8009da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009daa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dae:	d106      	bne.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009db0:	4b09      	ldr	r3, [pc, #36]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	4a08      	ldr	r2, [pc, #32]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dba:	60d3      	str	r3, [r2, #12]
 8009dbc:	e020      	b.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dc6:	d109      	bne.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009dc8:	4b03      	ldr	r3, [pc, #12]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	4a02      	ldr	r2, [pc, #8]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dd2:	60d3      	str	r3, [r2, #12]
 8009dd4:	e014      	b.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009dd6:	bf00      	nop
 8009dd8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009de0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009de4:	d10c      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	3304      	adds	r3, #4
 8009dea:	2101      	movs	r1, #1
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 ffd7 	bl	800ada0 <RCCEx_PLLSAI1_Config>
 8009df2:	4603      	mov	r3, r0
 8009df4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009df6:	7cfb      	ldrb	r3, [r7, #19]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8009dfc:	7cfb      	ldrb	r3, [r7, #19]
 8009dfe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d028      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e0c:	4b4a      	ldr	r3, [pc, #296]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e1a:	4947      	ldr	r1, [pc, #284]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e2a:	d106      	bne.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e2c:	4b42      	ldr	r3, [pc, #264]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	4a41      	ldr	r2, [pc, #260]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e36:	60d3      	str	r3, [r2, #12]
 8009e38:	e011      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e42:	d10c      	bne.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	3304      	adds	r3, #4
 8009e48:	2101      	movs	r1, #1
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f000 ffa8 	bl	800ada0 <RCCEx_PLLSAI1_Config>
 8009e50:	4603      	mov	r3, r0
 8009e52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009e54:	7cfb      	ldrb	r3, [r7, #19]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8009e5a:	7cfb      	ldrb	r3, [r7, #19]
 8009e5c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d01e      	beq.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009e6a:	4b33      	ldr	r3, [pc, #204]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e70:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e7a:	492f      	ldr	r1, [pc, #188]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e8c:	d10c      	bne.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	3304      	adds	r3, #4
 8009e92:	2102      	movs	r1, #2
 8009e94:	4618      	mov	r0, r3
 8009e96:	f000 ff83 	bl	800ada0 <RCCEx_PLLSAI1_Config>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009e9e:	7cfb      	ldrb	r3, [r7, #19]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8009ea4:	7cfb      	ldrb	r3, [r7, #19]
 8009ea6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00b      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009eb4:	4b20      	ldr	r3, [pc, #128]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009eba:	f023 0204 	bic.w	r2, r3, #4
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ec4:	491c      	ldr	r1, [pc, #112]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00b      	beq.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009ed8:	4b17      	ldr	r3, [pc, #92]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ede:	f023 0218 	bic.w	r2, r3, #24
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee8:	4913      	ldr	r1, [pc, #76]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009eea:	4313      	orrs	r3, r2
 8009eec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d017      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009efc:	4b0e      	ldr	r3, [pc, #56]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009efe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f0c:	490a      	ldr	r1, [pc, #40]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f1e:	d105      	bne.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f20:	4b05      	ldr	r3, [pc, #20]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	4a04      	ldr	r2, [pc, #16]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009f2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3718      	adds	r7, #24
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	40021000 	.word	0x40021000

08009f3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b088      	sub	sp, #32
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8009f44:	2300      	movs	r3, #0
 8009f46:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f4e:	d13e      	bne.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009f50:	4bb6      	ldr	r3, [pc, #728]	; (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f5a:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f62:	d028      	beq.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f6a:	f200 86f4 	bhi.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f74:	d005      	beq.n	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f7c:	d00e      	beq.n	8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8009f7e:	f000 beea 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009f82:	4baa      	ldr	r3, [pc, #680]	; (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f88:	f003 0302 	and.w	r3, r3, #2
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	f040 86e4 	bne.w	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8009f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f96:	61fb      	str	r3, [r7, #28]
      break;
 8009f98:	f000 bedf 	b.w	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009f9c:	4ba3      	ldr	r3, [pc, #652]	; (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009fa2:	f003 0302 	and.w	r3, r3, #2
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	f040 86d9 	bne.w	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8009fac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009fb0:	61fb      	str	r3, [r7, #28]
      break;
 8009fb2:	f000 bed4 	b.w	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009fb6:	4b9d      	ldr	r3, [pc, #628]	; (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fc2:	f040 86ce 	bne.w	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8009fc6:	4b9a      	ldr	r3, [pc, #616]	; (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8009fc8:	61fb      	str	r3, [r7, #28]
      break;
 8009fca:	f000 beca 	b.w	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009fce:	4b97      	ldr	r3, [pc, #604]	; (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	f003 0303 	and.w	r3, r3, #3
 8009fd6:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	2b03      	cmp	r3, #3
 8009fdc:	d036      	beq.n	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	2b03      	cmp	r3, #3
 8009fe2:	d840      	bhi.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d003      	beq.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d020      	beq.n	800a032 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8009ff0:	e039      	b.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009ff2:	4b8e      	ldr	r3, [pc, #568]	; (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f003 0302 	and.w	r3, r3, #2
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d116      	bne.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009ffe:	4b8b      	ldr	r3, [pc, #556]	; (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0308 	and.w	r3, r3, #8
 800a006:	2b00      	cmp	r3, #0
 800a008:	d005      	beq.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800a00a:	4b88      	ldr	r3, [pc, #544]	; (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	091b      	lsrs	r3, r3, #4
 800a010:	f003 030f 	and.w	r3, r3, #15
 800a014:	e005      	b.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800a016:	4b85      	ldr	r3, [pc, #532]	; (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a01c:	0a1b      	lsrs	r3, r3, #8
 800a01e:	f003 030f 	and.w	r3, r3, #15
 800a022:	4a84      	ldr	r2, [pc, #528]	; (800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a028:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a02a:	e01f      	b.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a02c:	2300      	movs	r3, #0
 800a02e:	61bb      	str	r3, [r7, #24]
      break;
 800a030:	e01c      	b.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a032:	4b7e      	ldr	r3, [pc, #504]	; (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a03a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a03e:	d102      	bne.n	800a046 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800a040:	4b7d      	ldr	r3, [pc, #500]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800a042:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a044:	e012      	b.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a046:	2300      	movs	r3, #0
 800a048:	61bb      	str	r3, [r7, #24]
      break;
 800a04a:	e00f      	b.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a04c:	4b77      	ldr	r3, [pc, #476]	; (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a054:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a058:	d102      	bne.n	800a060 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800a05a:	4b78      	ldr	r3, [pc, #480]	; (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800a05c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a05e:	e005      	b.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	61bb      	str	r3, [r7, #24]
      break;
 800a064:	e002      	b.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800a066:	2300      	movs	r3, #0
 800a068:	61bb      	str	r3, [r7, #24]
      break;
 800a06a:	bf00      	nop
    }

    switch(PeriphClk)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a072:	f000 8606 	beq.w	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a07c:	f200 8673 	bhi.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a086:	f000 8469 	beq.w	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a090:	f200 8669 	bhi.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a09a:	f000 8531 	beq.w	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0a4:	f200 865f 	bhi.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a0ae:	f000 8187 	beq.w	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a0b8:	f200 8655 	bhi.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a0c2:	f000 80cd 	beq.w	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a0cc:	f200 864b 	bhi.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0d6:	f000 8430 	beq.w	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0e0:	f200 8641 	bhi.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0ea:	f000 83e4 	beq.w	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0f4:	f200 8637 	bhi.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0fe:	f000 80af 	beq.w	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a108:	f200 862d 	bhi.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a112:	f000 809d 	beq.w	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a11c:	f200 8623 	bhi.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a126:	f000 808b 	beq.w	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a130:	f200 8619 	bhi.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a13a:	f000 8554 	beq.w	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a144:	f200 860f 	bhi.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a14e:	f000 8500 	beq.w	800ab52 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a158:	f200 8605 	bhi.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a162:	f000 84a1 	beq.w	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a16c:	f200 85fb 	bhi.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b80      	cmp	r3, #128	; 0x80
 800a174:	f000 846c 	beq.w	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b80      	cmp	r3, #128	; 0x80
 800a17c:	f200 85f3 	bhi.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b20      	cmp	r3, #32
 800a184:	d84c      	bhi.n	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 85ec 	beq.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	3b01      	subs	r3, #1
 800a192:	2b1f      	cmp	r3, #31
 800a194:	f200 85e7 	bhi.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a198:	a201      	add	r2, pc, #4	; (adr r2, 800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800a19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19e:	bf00      	nop
 800a1a0:	0800a5b5 	.word	0x0800a5b5
 800a1a4:	0800a623 	.word	0x0800a623
 800a1a8:	0800ad67 	.word	0x0800ad67
 800a1ac:	0800a6b7 	.word	0x0800a6b7
 800a1b0:	0800ad67 	.word	0x0800ad67
 800a1b4:	0800ad67 	.word	0x0800ad67
 800a1b8:	0800ad67 	.word	0x0800ad67
 800a1bc:	0800a72f 	.word	0x0800a72f
 800a1c0:	0800ad67 	.word	0x0800ad67
 800a1c4:	0800ad67 	.word	0x0800ad67
 800a1c8:	0800ad67 	.word	0x0800ad67
 800a1cc:	0800ad67 	.word	0x0800ad67
 800a1d0:	0800ad67 	.word	0x0800ad67
 800a1d4:	0800ad67 	.word	0x0800ad67
 800a1d8:	0800ad67 	.word	0x0800ad67
 800a1dc:	0800a7b3 	.word	0x0800a7b3
 800a1e0:	0800ad67 	.word	0x0800ad67
 800a1e4:	0800ad67 	.word	0x0800ad67
 800a1e8:	0800ad67 	.word	0x0800ad67
 800a1ec:	0800ad67 	.word	0x0800ad67
 800a1f0:	0800ad67 	.word	0x0800ad67
 800a1f4:	0800ad67 	.word	0x0800ad67
 800a1f8:	0800ad67 	.word	0x0800ad67
 800a1fc:	0800ad67 	.word	0x0800ad67
 800a200:	0800ad67 	.word	0x0800ad67
 800a204:	0800ad67 	.word	0x0800ad67
 800a208:	0800ad67 	.word	0x0800ad67
 800a20c:	0800ad67 	.word	0x0800ad67
 800a210:	0800ad67 	.word	0x0800ad67
 800a214:	0800ad67 	.word	0x0800ad67
 800a218:	0800ad67 	.word	0x0800ad67
 800a21c:	0800a835 	.word	0x0800a835
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2b40      	cmp	r3, #64	; 0x40
 800a224:	f000 83e8 	beq.w	800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800a228:	f000 bd9d 	b.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a22c:	40021000 	.word	0x40021000
 800a230:	0003d090 	.word	0x0003d090
 800a234:	08017638 	.word	0x08017638
 800a238:	00f42400 	.word	0x00f42400
 800a23c:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800a240:	69b9      	ldr	r1, [r7, #24]
 800a242:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a246:	f000 ff93 	bl	800b170 <RCCEx_GetSAIxPeriphCLKFreq>
 800a24a:	61f8      	str	r0, [r7, #28]
      break;
 800a24c:	f000 bd8e 	b.w	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800a250:	69b9      	ldr	r1, [r7, #24]
 800a252:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a256:	f000 ff8b 	bl	800b170 <RCCEx_GetSAIxPeriphCLKFreq>
 800a25a:	61f8      	str	r0, [r7, #28]
      break;
 800a25c:	f000 bd86 	b.w	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800a260:	4b9a      	ldr	r3, [pc, #616]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a266:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a26a:	60fb      	str	r3, [r7, #12]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a272:	d015      	beq.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a27a:	f200 8092 	bhi.w	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a284:	d029      	beq.n	800a2da <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a28c:	f200 8089 	bhi.w	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d07b      	beq.n	800a38e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a29c:	d04a      	beq.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800a29e:	e080      	b.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a2a0:	4b8a      	ldr	r3, [pc, #552]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 0302 	and.w	r3, r3, #2
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	d17d      	bne.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a2ac:	4b87      	ldr	r3, [pc, #540]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0308 	and.w	r3, r3, #8
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d005      	beq.n	800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800a2b8:	4b84      	ldr	r3, [pc, #528]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	091b      	lsrs	r3, r3, #4
 800a2be:	f003 030f 	and.w	r3, r3, #15
 800a2c2:	e005      	b.n	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800a2c4:	4b81      	ldr	r3, [pc, #516]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a2c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2ca:	0a1b      	lsrs	r3, r3, #8
 800a2cc:	f003 030f 	and.w	r3, r3, #15
 800a2d0:	4a7f      	ldr	r2, [pc, #508]	; (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a2d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2d6:	61fb      	str	r3, [r7, #28]
          break;
 800a2d8:	e066      	b.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a2da:	4b7c      	ldr	r3, [pc, #496]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2e6:	d162      	bne.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800a2e8:	4b78      	ldr	r3, [pc, #480]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2f4:	d15b      	bne.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a2f6:	4b75      	ldr	r3, [pc, #468]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	0a1b      	lsrs	r3, r3, #8
 800a2fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a300:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	fb03 f202 	mul.w	r2, r3, r2
 800a30a:	4b70      	ldr	r3, [pc, #448]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	091b      	lsrs	r3, r3, #4
 800a310:	f003 030f 	and.w	r3, r3, #15
 800a314:	3301      	adds	r3, #1
 800a316:	fbb2 f3f3 	udiv	r3, r2, r3
 800a31a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800a31c:	4b6b      	ldr	r3, [pc, #428]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	0d5b      	lsrs	r3, r3, #21
 800a322:	f003 0303 	and.w	r3, r3, #3
 800a326:	3301      	adds	r3, #1
 800a328:	005b      	lsls	r3, r3, #1
 800a32a:	69ba      	ldr	r2, [r7, #24]
 800a32c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a330:	61fb      	str	r3, [r7, #28]
          break;
 800a332:	e03c      	b.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800a334:	4b65      	ldr	r3, [pc, #404]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a33c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a340:	d138      	bne.n	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800a342:	4b62      	ldr	r3, [pc, #392]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a34a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a34e:	d131      	bne.n	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a350:	4b5e      	ldr	r3, [pc, #376]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	0a1b      	lsrs	r3, r3, #8
 800a356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a35a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	fb03 f202 	mul.w	r2, r3, r2
 800a364:	4b59      	ldr	r3, [pc, #356]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	091b      	lsrs	r3, r3, #4
 800a36a:	f003 030f 	and.w	r3, r3, #15
 800a36e:	3301      	adds	r3, #1
 800a370:	fbb2 f3f3 	udiv	r3, r2, r3
 800a374:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800a376:	4b55      	ldr	r3, [pc, #340]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	0d5b      	lsrs	r3, r3, #21
 800a37c:	f003 0303 	and.w	r3, r3, #3
 800a380:	3301      	adds	r3, #1
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	69ba      	ldr	r2, [r7, #24]
 800a386:	fbb2 f3f3 	udiv	r3, r2, r3
 800a38a:	61fb      	str	r3, [r7, #28]
          break;
 800a38c:	e012      	b.n	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800a38e:	4b4f      	ldr	r3, [pc, #316]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a394:	f003 0302 	and.w	r3, r3, #2
 800a398:	2b02      	cmp	r3, #2
 800a39a:	d10e      	bne.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 800a39c:	4b4d      	ldr	r3, [pc, #308]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a39e:	61fb      	str	r3, [r7, #28]
          break;
 800a3a0:	e00b      	b.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800a3a2:	bf00      	nop
 800a3a4:	f000 bce2 	b.w	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a3a8:	bf00      	nop
 800a3aa:	f000 bcdf 	b.w	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a3ae:	bf00      	nop
 800a3b0:	f000 bcdc 	b.w	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a3b4:	bf00      	nop
 800a3b6:	f000 bcd9 	b.w	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a3ba:	bf00      	nop
        break;
 800a3bc:	f000 bcd6 	b.w	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800a3c0:	4b42      	ldr	r3, [pc, #264]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a3c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a3c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3ce:	d13d      	bne.n	800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a3d0:	4b3e      	ldr	r3, [pc, #248]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3dc:	f040 84c5 	bne.w	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800a3e0:	4b3a      	ldr	r3, [pc, #232]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3ec:	f040 84bd 	bne.w	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a3f0:	4b36      	ldr	r3, [pc, #216]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	0a1b      	lsrs	r3, r3, #8
 800a3f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3fa:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	fb03 f202 	mul.w	r2, r3, r2
 800a404:	4b31      	ldr	r3, [pc, #196]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	091b      	lsrs	r3, r3, #4
 800a40a:	f003 030f 	and.w	r3, r3, #15
 800a40e:	3301      	adds	r3, #1
 800a410:	fbb2 f3f3 	udiv	r3, r2, r3
 800a414:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800a416:	4b2d      	ldr	r3, [pc, #180]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	0edb      	lsrs	r3, r3, #27
 800a41c:	f003 031f 	and.w	r3, r3, #31
 800a420:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10a      	bne.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800a428:	4b28      	ldr	r3, [pc, #160]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a430:	2b00      	cmp	r3, #0
 800a432:	d002      	beq.n	800a43a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800a434:	2311      	movs	r3, #17
 800a436:	617b      	str	r3, [r7, #20]
 800a438:	e001      	b.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800a43a:	2307      	movs	r3, #7
 800a43c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800a43e:	69ba      	ldr	r2, [r7, #24]
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	fbb2 f3f3 	udiv	r3, r2, r3
 800a446:	61fb      	str	r3, [r7, #28]
      break;
 800a448:	f000 bc8f 	b.w	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800a44c:	4b1f      	ldr	r3, [pc, #124]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a44e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a452:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a456:	60fb      	str	r3, [r7, #12]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a45e:	d016      	beq.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a466:	f200 809b 	bhi.w	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a470:	d032      	beq.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a478:	f200 8092 	bhi.w	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f000 8084 	beq.w	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a48a:	d052      	beq.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800a48c:	e088      	b.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a48e:	4b0f      	ldr	r3, [pc, #60]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 0302 	and.w	r3, r3, #2
 800a496:	2b02      	cmp	r3, #2
 800a498:	f040 8084 	bne.w	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a49c:	4b0b      	ldr	r3, [pc, #44]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 0308 	and.w	r3, r3, #8
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d005      	beq.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a4a8:	4b08      	ldr	r3, [pc, #32]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	091b      	lsrs	r3, r3, #4
 800a4ae:	f003 030f 	and.w	r3, r3, #15
 800a4b2:	e005      	b.n	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800a4b4:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a4b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4ba:	0a1b      	lsrs	r3, r3, #8
 800a4bc:	f003 030f 	and.w	r3, r3, #15
 800a4c0:	4a03      	ldr	r2, [pc, #12]	; (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a4c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4c6:	61fb      	str	r3, [r7, #28]
          break;
 800a4c8:	e06c      	b.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800a4ca:	bf00      	nop
 800a4cc:	40021000 	.word	0x40021000
 800a4d0:	08017638 	.word	0x08017638
 800a4d4:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a4d8:	4ba5      	ldr	r3, [pc, #660]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4e4:	d160      	bne.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800a4e6:	4ba2      	ldr	r3, [pc, #648]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4f2:	d159      	bne.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a4f4:	4b9e      	ldr	r3, [pc, #632]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	0a1b      	lsrs	r3, r3, #8
 800a4fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4fe:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	68ba      	ldr	r2, [r7, #8]
 800a504:	fb03 f202 	mul.w	r2, r3, r2
 800a508:	4b99      	ldr	r3, [pc, #612]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	091b      	lsrs	r3, r3, #4
 800a50e:	f003 030f 	and.w	r3, r3, #15
 800a512:	3301      	adds	r3, #1
 800a514:	fbb2 f3f3 	udiv	r3, r2, r3
 800a518:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800a51a:	4b95      	ldr	r3, [pc, #596]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	0d5b      	lsrs	r3, r3, #21
 800a520:	f003 0303 	and.w	r3, r3, #3
 800a524:	3301      	adds	r3, #1
 800a526:	005b      	lsls	r3, r3, #1
 800a528:	69ba      	ldr	r2, [r7, #24]
 800a52a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a52e:	61fb      	str	r3, [r7, #28]
          break;
 800a530:	e03a      	b.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800a532:	4b8f      	ldr	r3, [pc, #572]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a53a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a53e:	d135      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800a540:	4b8b      	ldr	r3, [pc, #556]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a54c:	d12e      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a54e:	4b88      	ldr	r3, [pc, #544]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	0a1b      	lsrs	r3, r3, #8
 800a554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a558:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	fb03 f202 	mul.w	r2, r3, r2
 800a562:	4b83      	ldr	r3, [pc, #524]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	091b      	lsrs	r3, r3, #4
 800a568:	f003 030f 	and.w	r3, r3, #15
 800a56c:	3301      	adds	r3, #1
 800a56e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a572:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800a574:	4b7e      	ldr	r3, [pc, #504]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	0d5b      	lsrs	r3, r3, #21
 800a57a:	f003 0303 	and.w	r3, r3, #3
 800a57e:	3301      	adds	r3, #1
 800a580:	005b      	lsls	r3, r3, #1
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	fbb2 f3f3 	udiv	r3, r2, r3
 800a588:	61fb      	str	r3, [r7, #28]
          break;
 800a58a:	e00f      	b.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800a58c:	4b78      	ldr	r3, [pc, #480]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a58e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a592:	f003 0302 	and.w	r3, r3, #2
 800a596:	2b02      	cmp	r3, #2
 800a598:	d10a      	bne.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800a59a:	4b76      	ldr	r3, [pc, #472]	; (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800a59c:	61fb      	str	r3, [r7, #28]
          break;
 800a59e:	e007      	b.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800a5a0:	bf00      	nop
 800a5a2:	e3e2      	b.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800a5a4:	bf00      	nop
 800a5a6:	e3e0      	b.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800a5a8:	bf00      	nop
 800a5aa:	e3de      	b.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800a5ac:	bf00      	nop
 800a5ae:	e3dc      	b.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800a5b0:	bf00      	nop
      break;
 800a5b2:	e3da      	b.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a5b4:	4b6e      	ldr	r3, [pc, #440]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a5b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ba:	f003 0303 	and.w	r3, r3, #3
 800a5be:	60fb      	str	r3, [r7, #12]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	d827      	bhi.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800a5c6:	a201      	add	r2, pc, #4	; (adr r2, 800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800a5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5cc:	0800a5dd 	.word	0x0800a5dd
 800a5d0:	0800a5e5 	.word	0x0800a5e5
 800a5d4:	0800a5ed 	.word	0x0800a5ed
 800a5d8:	0800a601 	.word	0x0800a601
          frequency = HAL_RCC_GetPCLK2Freq();
 800a5dc:	f7ff f8a8 	bl	8009730 <HAL_RCC_GetPCLK2Freq>
 800a5e0:	61f8      	str	r0, [r7, #28]
          break;
 800a5e2:	e01d      	b.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800a5e4:	f7fe fff6 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 800a5e8:	61f8      	str	r0, [r7, #28]
          break;
 800a5ea:	e019      	b.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5ec:	4b60      	ldr	r3, [pc, #384]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5f8:	d10f      	bne.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800a5fa:	4b5f      	ldr	r3, [pc, #380]	; (800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a5fc:	61fb      	str	r3, [r7, #28]
          break;
 800a5fe:	e00c      	b.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a600:	4b5b      	ldr	r3, [pc, #364]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a606:	f003 0302 	and.w	r3, r3, #2
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d107      	bne.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800a60e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a612:	61fb      	str	r3, [r7, #28]
          break;
 800a614:	e003      	b.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800a616:	bf00      	nop
 800a618:	e3a8      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a61a:	bf00      	nop
 800a61c:	e3a6      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a61e:	bf00      	nop
        break;
 800a620:	e3a4      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a622:	4b53      	ldr	r3, [pc, #332]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a628:	f003 030c 	and.w	r3, r3, #12
 800a62c:	60fb      	str	r3, [r7, #12]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2b0c      	cmp	r3, #12
 800a632:	d83a      	bhi.n	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a634:	a201      	add	r2, pc, #4	; (adr r2, 800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800a636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a63a:	bf00      	nop
 800a63c:	0800a671 	.word	0x0800a671
 800a640:	0800a6ab 	.word	0x0800a6ab
 800a644:	0800a6ab 	.word	0x0800a6ab
 800a648:	0800a6ab 	.word	0x0800a6ab
 800a64c:	0800a679 	.word	0x0800a679
 800a650:	0800a6ab 	.word	0x0800a6ab
 800a654:	0800a6ab 	.word	0x0800a6ab
 800a658:	0800a6ab 	.word	0x0800a6ab
 800a65c:	0800a681 	.word	0x0800a681
 800a660:	0800a6ab 	.word	0x0800a6ab
 800a664:	0800a6ab 	.word	0x0800a6ab
 800a668:	0800a6ab 	.word	0x0800a6ab
 800a66c:	0800a695 	.word	0x0800a695
          frequency = HAL_RCC_GetPCLK1Freq();
 800a670:	f7ff f848 	bl	8009704 <HAL_RCC_GetPCLK1Freq>
 800a674:	61f8      	str	r0, [r7, #28]
          break;
 800a676:	e01d      	b.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800a678:	f7fe ffac 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 800a67c:	61f8      	str	r0, [r7, #28]
          break;
 800a67e:	e019      	b.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a680:	4b3b      	ldr	r3, [pc, #236]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a68c:	d10f      	bne.n	800a6ae <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800a68e:	4b3a      	ldr	r3, [pc, #232]	; (800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a690:	61fb      	str	r3, [r7, #28]
          break;
 800a692:	e00c      	b.n	800a6ae <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a694:	4b36      	ldr	r3, [pc, #216]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a69a:	f003 0302 	and.w	r3, r3, #2
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d107      	bne.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800a6a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6a6:	61fb      	str	r3, [r7, #28]
          break;
 800a6a8:	e003      	b.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800a6aa:	bf00      	nop
 800a6ac:	e35e      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a6ae:	bf00      	nop
 800a6b0:	e35c      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a6b2:	bf00      	nop
        break;
 800a6b4:	e35a      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a6b6:	4b2e      	ldr	r3, [pc, #184]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a6c0:	60fb      	str	r3, [r7, #12]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2b30      	cmp	r3, #48	; 0x30
 800a6c6:	d021      	beq.n	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2b30      	cmp	r3, #48	; 0x30
 800a6cc:	d829      	bhi.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2b20      	cmp	r3, #32
 800a6d2:	d011      	beq.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2b20      	cmp	r3, #32
 800a6d8:	d823      	bhi.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d003      	beq.n	800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2b10      	cmp	r3, #16
 800a6e4:	d004      	beq.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800a6e6:	e01c      	b.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a6e8:	f7ff f80c 	bl	8009704 <HAL_RCC_GetPCLK1Freq>
 800a6ec:	61f8      	str	r0, [r7, #28]
          break;
 800a6ee:	e01d      	b.n	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800a6f0:	f7fe ff70 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 800a6f4:	61f8      	str	r0, [r7, #28]
          break;
 800a6f6:	e019      	b.n	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a6f8:	4b1d      	ldr	r3, [pc, #116]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a704:	d10f      	bne.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800a706:	4b1c      	ldr	r3, [pc, #112]	; (800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a708:	61fb      	str	r3, [r7, #28]
          break;
 800a70a:	e00c      	b.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a70c:	4b18      	ldr	r3, [pc, #96]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a70e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a712:	f003 0302 	and.w	r3, r3, #2
 800a716:	2b02      	cmp	r3, #2
 800a718:	d107      	bne.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 800a71a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a71e:	61fb      	str	r3, [r7, #28]
          break;
 800a720:	e003      	b.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800a722:	bf00      	nop
 800a724:	e322      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a726:	bf00      	nop
 800a728:	e320      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a72a:	bf00      	nop
        break;
 800a72c:	e31e      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a72e:	4b10      	ldr	r3, [pc, #64]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a734:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a738:	60fb      	str	r3, [r7, #12]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2bc0      	cmp	r3, #192	; 0xc0
 800a73e:	d027      	beq.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2bc0      	cmp	r3, #192	; 0xc0
 800a744:	d82f      	bhi.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2b80      	cmp	r3, #128	; 0x80
 800a74a:	d017      	beq.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2b80      	cmp	r3, #128	; 0x80
 800a750:	d829      	bhi.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d003      	beq.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2b40      	cmp	r3, #64	; 0x40
 800a75c:	d004      	beq.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800a75e:	e022      	b.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a760:	f7fe ffd0 	bl	8009704 <HAL_RCC_GetPCLK1Freq>
 800a764:	61f8      	str	r0, [r7, #28]
          break;
 800a766:	e023      	b.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 800a768:	f7fe ff34 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 800a76c:	61f8      	str	r0, [r7, #28]
          break;
 800a76e:	e01f      	b.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800a770:	40021000 	.word	0x40021000
 800a774:	02dc6c00 	.word	0x02dc6c00
 800a778:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a77c:	4b9b      	ldr	r3, [pc, #620]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a788:	d10f      	bne.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800a78a:	4b99      	ldr	r3, [pc, #612]	; (800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800a78c:	61fb      	str	r3, [r7, #28]
          break;
 800a78e:	e00c      	b.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a790:	4b96      	ldr	r3, [pc, #600]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a796:	f003 0302 	and.w	r3, r3, #2
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d107      	bne.n	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800a79e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7a2:	61fb      	str	r3, [r7, #28]
          break;
 800a7a4:	e003      	b.n	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800a7a6:	bf00      	nop
 800a7a8:	e2e0      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a7aa:	bf00      	nop
 800a7ac:	e2de      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a7ae:	bf00      	nop
        break;
 800a7b0:	e2dc      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a7b2:	4b8e      	ldr	r3, [pc, #568]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a7b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7bc:	60fb      	str	r3, [r7, #12]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7c4:	d025      	beq.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7cc:	d82c      	bhi.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7d4:	d013      	beq.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7dc:	d824      	bhi.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d004      	beq.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7ea:	d004      	beq.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800a7ec:	e01c      	b.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a7ee:	f7fe ff89 	bl	8009704 <HAL_RCC_GetPCLK1Freq>
 800a7f2:	61f8      	str	r0, [r7, #28]
          break;
 800a7f4:	e01d      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800a7f6:	f7fe feed 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 800a7fa:	61f8      	str	r0, [r7, #28]
          break;
 800a7fc:	e019      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a7fe:	4b7b      	ldr	r3, [pc, #492]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a80a:	d10f      	bne.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800a80c:	4b78      	ldr	r3, [pc, #480]	; (800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800a80e:	61fb      	str	r3, [r7, #28]
          break;
 800a810:	e00c      	b.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a812:	4b76      	ldr	r3, [pc, #472]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a818:	f003 0302 	and.w	r3, r3, #2
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d107      	bne.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 800a820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a824:	61fb      	str	r3, [r7, #28]
          break;
 800a826:	e003      	b.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 800a828:	bf00      	nop
 800a82a:	e29f      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a82c:	bf00      	nop
 800a82e:	e29d      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a830:	bf00      	nop
        break;
 800a832:	e29b      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a834:	4b6d      	ldr	r3, [pc, #436]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a83a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a83e:	60fb      	str	r3, [r7, #12]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a846:	d025      	beq.n	800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a84e:	d82c      	bhi.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a856:	d013      	beq.n	800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a85e:	d824      	bhi.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d004      	beq.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a86c:	d004      	beq.n	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800a86e:	e01c      	b.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a870:	f7fe ff48 	bl	8009704 <HAL_RCC_GetPCLK1Freq>
 800a874:	61f8      	str	r0, [r7, #28]
          break;
 800a876:	e01d      	b.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800a878:	f7fe feac 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 800a87c:	61f8      	str	r0, [r7, #28]
          break;
 800a87e:	e019      	b.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a880:	4b5a      	ldr	r3, [pc, #360]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a88c:	d10f      	bne.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800a88e:	4b58      	ldr	r3, [pc, #352]	; (800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800a890:	61fb      	str	r3, [r7, #28]
          break;
 800a892:	e00c      	b.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a894:	4b55      	ldr	r3, [pc, #340]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a89a:	f003 0302 	and.w	r3, r3, #2
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	d107      	bne.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800a8a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8a6:	61fb      	str	r3, [r7, #28]
          break;
 800a8a8:	e003      	b.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800a8aa:	bf00      	nop
 800a8ac:	e25e      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a8ae:	bf00      	nop
 800a8b0:	e25c      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a8b2:	bf00      	nop
        break;
 800a8b4:	e25a      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a8b6:	4b4d      	ldr	r3, [pc, #308]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a8b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a8c0:	60fb      	str	r3, [r7, #12]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8c8:	d007      	beq.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a8d0:	d12f      	bne.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800a8d2:	f7fe fe7f 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 800a8d6:	61f8      	str	r0, [r7, #28]
          break;
 800a8d8:	e02e      	b.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800a8da:	4b44      	ldr	r3, [pc, #272]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8e6:	d126      	bne.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800a8e8:	4b40      	ldr	r3, [pc, #256]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d020      	beq.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a8f4:	4b3d      	ldr	r3, [pc, #244]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	0a1b      	lsrs	r3, r3, #8
 800a8fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8fe:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	fb03 f202 	mul.w	r2, r3, r2
 800a908:	4b38      	ldr	r3, [pc, #224]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	091b      	lsrs	r3, r3, #4
 800a90e:	f003 030f 	and.w	r3, r3, #15
 800a912:	3301      	adds	r3, #1
 800a914:	fbb2 f3f3 	udiv	r3, r2, r3
 800a918:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800a91a:	4b34      	ldr	r3, [pc, #208]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	0e5b      	lsrs	r3, r3, #25
 800a920:	f003 0303 	and.w	r3, r3, #3
 800a924:	3301      	adds	r3, #1
 800a926:	005b      	lsls	r3, r3, #1
 800a928:	69ba      	ldr	r2, [r7, #24]
 800a92a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a92e:	61fb      	str	r3, [r7, #28]
          break;
 800a930:	e001      	b.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800a932:	bf00      	nop
 800a934:	e21a      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a936:	bf00      	nop
        break;
 800a938:	e218      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800a93a:	4b2c      	ldr	r3, [pc, #176]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a93c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a940:	f003 0304 	and.w	r3, r3, #4
 800a944:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d103      	bne.n	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800a94c:	f7fe fef0 	bl	8009730 <HAL_RCC_GetPCLK2Freq>
 800a950:	61f8      	str	r0, [r7, #28]
        break;
 800a952:	e20b      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 800a954:	f7fe fe3e 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 800a958:	61f8      	str	r0, [r7, #28]
        break;
 800a95a:	e207      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800a95c:	4b23      	ldr	r3, [pc, #140]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a95e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a962:	f003 0318 	and.w	r3, r3, #24
 800a966:	60fb      	str	r3, [r7, #12]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2b10      	cmp	r3, #16
 800a96c:	d010      	beq.n	800a990 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2b10      	cmp	r3, #16
 800a972:	d834      	bhi.n	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d003      	beq.n	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2b08      	cmp	r3, #8
 800a97e:	d024      	beq.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800a980:	e02d      	b.n	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800a982:	69b9      	ldr	r1, [r7, #24]
 800a984:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a988:	f000 fbf2 	bl	800b170 <RCCEx_GetSAIxPeriphCLKFreq>
 800a98c:	61f8      	str	r0, [r7, #28]
          break;
 800a98e:	e02b      	b.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a990:	4b16      	ldr	r3, [pc, #88]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 0302 	and.w	r3, r3, #2
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d122      	bne.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a99c:	4b13      	ldr	r3, [pc, #76]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f003 0308 	and.w	r3, r3, #8
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d005      	beq.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800a9a8:	4b10      	ldr	r3, [pc, #64]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	091b      	lsrs	r3, r3, #4
 800a9ae:	f003 030f 	and.w	r3, r3, #15
 800a9b2:	e005      	b.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800a9b4:	4b0d      	ldr	r3, [pc, #52]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a9b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9ba:	0a1b      	lsrs	r3, r3, #8
 800a9bc:	f003 030f 	and.w	r3, r3, #15
 800a9c0:	4a0c      	ldr	r2, [pc, #48]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800a9c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9c6:	61fb      	str	r3, [r7, #28]
          break;
 800a9c8:	e00b      	b.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a9ca:	4b08      	ldr	r3, [pc, #32]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9d6:	d106      	bne.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800a9d8:	4b05      	ldr	r3, [pc, #20]	; (800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800a9da:	61fb      	str	r3, [r7, #28]
          break;
 800a9dc:	e003      	b.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800a9de:	bf00      	nop
 800a9e0:	e1c4      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a9e2:	bf00      	nop
 800a9e4:	e1c2      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a9e6:	bf00      	nop
        break;
 800a9e8:	e1c0      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800a9ea:	bf00      	nop
 800a9ec:	40021000 	.word	0x40021000
 800a9f0:	00f42400 	.word	0x00f42400
 800a9f4:	08017638 	.word	0x08017638
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a9f8:	4b96      	ldr	r3, [pc, #600]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a9fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800aa02:	60fb      	str	r3, [r7, #12]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa0a:	d013      	beq.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa12:	d819      	bhi.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d004      	beq.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa20:	d004      	beq.n	800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800aa22:	e011      	b.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800aa24:	f7fe fe6e 	bl	8009704 <HAL_RCC_GetPCLK1Freq>
 800aa28:	61f8      	str	r0, [r7, #28]
          break;
 800aa2a:	e010      	b.n	800aa4e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 800aa2c:	f7fe fdd2 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 800aa30:	61f8      	str	r0, [r7, #28]
          break;
 800aa32:	e00c      	b.n	800aa4e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa34:	4b87      	ldr	r3, [pc, #540]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa40:	d104      	bne.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800aa42:	4b85      	ldr	r3, [pc, #532]	; (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800aa44:	61fb      	str	r3, [r7, #28]
          break;
 800aa46:	e001      	b.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 800aa48:	bf00      	nop
 800aa4a:	e18f      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800aa4c:	bf00      	nop
        break;
 800aa4e:	e18d      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800aa50:	4b80      	ldr	r3, [pc, #512]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800aa52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aa5a:	60fb      	str	r3, [r7, #12]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa62:	d013      	beq.n	800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa6a:	d819      	bhi.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d004      	beq.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa78:	d004      	beq.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800aa7a:	e011      	b.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800aa7c:	f7fe fe42 	bl	8009704 <HAL_RCC_GetPCLK1Freq>
 800aa80:	61f8      	str	r0, [r7, #28]
          break;
 800aa82:	e010      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800aa84:	f7fe fda6 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 800aa88:	61f8      	str	r0, [r7, #28]
          break;
 800aa8a:	e00c      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa8c:	4b71      	ldr	r3, [pc, #452]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa98:	d104      	bne.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800aa9a:	4b6f      	ldr	r3, [pc, #444]	; (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800aa9c:	61fb      	str	r3, [r7, #28]
          break;
 800aa9e:	e001      	b.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800aaa0:	bf00      	nop
 800aaa2:	e163      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800aaa4:	bf00      	nop
        break;
 800aaa6:	e161      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800aaa8:	4b6a      	ldr	r3, [pc, #424]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800aaaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aab2:	60fb      	str	r3, [r7, #12]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaba:	d013      	beq.n	800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aac2:	d819      	bhi.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d004      	beq.n	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aad0:	d004      	beq.n	800aadc <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800aad2:	e011      	b.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800aad4:	f7fe fe16 	bl	8009704 <HAL_RCC_GetPCLK1Freq>
 800aad8:	61f8      	str	r0, [r7, #28]
          break;
 800aada:	e010      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800aadc:	f7fe fd7a 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 800aae0:	61f8      	str	r0, [r7, #28]
          break;
 800aae2:	e00c      	b.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aae4:	4b5b      	ldr	r3, [pc, #364]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aaec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aaf0:	d104      	bne.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800aaf2:	4b59      	ldr	r3, [pc, #356]	; (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800aaf4:	61fb      	str	r3, [r7, #28]
          break;
 800aaf6:	e001      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800aaf8:	bf00      	nop
 800aafa:	e137      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800aafc:	bf00      	nop
        break;
 800aafe:	e135      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800ab00:	4b54      	ldr	r3, [pc, #336]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800ab02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab06:	f003 0303 	and.w	r3, r3, #3
 800ab0a:	60fb      	str	r3, [r7, #12]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d011      	beq.n	800ab36 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d818      	bhi.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d003      	beq.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d004      	beq.n	800ab2e <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800ab24:	e011      	b.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ab26:	f7fe fded 	bl	8009704 <HAL_RCC_GetPCLK1Freq>
 800ab2a:	61f8      	str	r0, [r7, #28]
          break;
 800ab2c:	e010      	b.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800ab2e:	f7fe fd51 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 800ab32:	61f8      	str	r0, [r7, #28]
          break;
 800ab34:	e00c      	b.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab36:	4b47      	ldr	r3, [pc, #284]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab42:	d104      	bne.n	800ab4e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800ab44:	4b44      	ldr	r3, [pc, #272]	; (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800ab46:	61fb      	str	r3, [r7, #28]
          break;
 800ab48:	e001      	b.n	800ab4e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800ab4a:	bf00      	nop
 800ab4c:	e10e      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ab4e:	bf00      	nop
        break;
 800ab50:	e10c      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800ab52:	4b40      	ldr	r3, [pc, #256]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800ab54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab58:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800ab5c:	60fb      	str	r3, [r7, #12]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ab64:	d02c      	beq.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ab6c:	d833      	bhi.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ab74:	d01a      	beq.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ab7c:	d82b      	bhi.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d004      	beq.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ab8a:	d004      	beq.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800ab8c:	e023      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ab8e:	f7fe fdb9 	bl	8009704 <HAL_RCC_GetPCLK1Freq>
 800ab92:	61f8      	str	r0, [r7, #28]
          break;
 800ab94:	e026      	b.n	800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800ab96:	4b2f      	ldr	r3, [pc, #188]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800ab98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab9c:	f003 0302 	and.w	r3, r3, #2
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d11a      	bne.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800aba4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800aba8:	61fb      	str	r3, [r7, #28]
          break;
 800abaa:	e016      	b.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800abac:	4b29      	ldr	r3, [pc, #164]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abb8:	d111      	bne.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800abba:	4b27      	ldr	r3, [pc, #156]	; (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800abbc:	61fb      	str	r3, [r7, #28]
          break;
 800abbe:	e00e      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800abc0:	4b24      	ldr	r3, [pc, #144]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800abc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abc6:	f003 0302 	and.w	r3, r3, #2
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d109      	bne.n	800abe2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800abce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abd2:	61fb      	str	r3, [r7, #28]
          break;
 800abd4:	e005      	b.n	800abe2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800abd6:	bf00      	nop
 800abd8:	e0c8      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800abda:	bf00      	nop
 800abdc:	e0c6      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800abde:	bf00      	nop
 800abe0:	e0c4      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800abe2:	bf00      	nop
        break;
 800abe4:	e0c2      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800abe6:	4b1b      	ldr	r3, [pc, #108]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800abe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800abf0:	60fb      	str	r3, [r7, #12]
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800abf8:	d030      	beq.n	800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac00:	d837      	bhi.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac08:	d01a      	beq.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac10:	d82f      	bhi.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d004      	beq.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac1e:	d004      	beq.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800ac20:	e027      	b.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ac22:	f7fe fd6f 	bl	8009704 <HAL_RCC_GetPCLK1Freq>
 800ac26:	61f8      	str	r0, [r7, #28]
          break;
 800ac28:	e02a      	b.n	800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800ac2a:	4b0a      	ldr	r3, [pc, #40]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800ac2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac30:	f003 0302 	and.w	r3, r3, #2
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d11e      	bne.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 800ac38:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ac3c:	61fb      	str	r3, [r7, #28]
          break;
 800ac3e:	e01a      	b.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac40:	4b04      	ldr	r3, [pc, #16]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac4c:	d115      	bne.n	800ac7a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800ac4e:	4b02      	ldr	r3, [pc, #8]	; (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800ac50:	61fb      	str	r3, [r7, #28]
          break;
 800ac52:	e012      	b.n	800ac7a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800ac54:	40021000 	.word	0x40021000
 800ac58:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ac5c:	4b46      	ldr	r3, [pc, #280]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ac5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac62:	f003 0302 	and.w	r3, r3, #2
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d109      	bne.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800ac6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac6e:	61fb      	str	r3, [r7, #28]
          break;
 800ac70:	e005      	b.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800ac72:	bf00      	nop
 800ac74:	e07a      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ac76:	bf00      	nop
 800ac78:	e078      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ac7a:	bf00      	nop
 800ac7c:	e076      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ac7e:	bf00      	nop
        break;
 800ac80:	e074      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800ac82:	4b3d      	ldr	r3, [pc, #244]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ac84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ac8c:	60fb      	str	r3, [r7, #12]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac94:	d02c      	beq.n	800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac9c:	d855      	bhi.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d004      	beq.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acaa:	d004      	beq.n	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800acac:	e04d      	b.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800acae:	f7fe fc91 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 800acb2:	61f8      	str	r0, [r7, #28]
          break;
 800acb4:	e04e      	b.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800acb6:	4b30      	ldr	r3, [pc, #192]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 0302 	and.w	r3, r3, #2
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d145      	bne.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800acc2:	4b2d      	ldr	r3, [pc, #180]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f003 0308 	and.w	r3, r3, #8
 800acca:	2b00      	cmp	r3, #0
 800accc:	d005      	beq.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800acce:	4b2a      	ldr	r3, [pc, #168]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	091b      	lsrs	r3, r3, #4
 800acd4:	f003 030f 	and.w	r3, r3, #15
 800acd8:	e005      	b.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800acda:	4b27      	ldr	r3, [pc, #156]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800acdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ace0:	0a1b      	lsrs	r3, r3, #8
 800ace2:	f003 030f 	and.w	r3, r3, #15
 800ace6:	4a25      	ldr	r2, [pc, #148]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800ace8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acec:	61fb      	str	r3, [r7, #28]
          break;
 800acee:	e02e      	b.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800acf0:	4b21      	ldr	r3, [pc, #132]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acfc:	d129      	bne.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800acfe:	4b1e      	ldr	r3, [pc, #120]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad0a:	d122      	bne.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ad0c:	4b1a      	ldr	r3, [pc, #104]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	0a1b      	lsrs	r3, r3, #8
 800ad12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad16:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	68ba      	ldr	r2, [r7, #8]
 800ad1c:	fb03 f202 	mul.w	r2, r3, r2
 800ad20:	4b15      	ldr	r3, [pc, #84]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	091b      	lsrs	r3, r3, #4
 800ad26:	f003 030f 	and.w	r3, r3, #15
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad30:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800ad32:	4b11      	ldr	r3, [pc, #68]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	0d5b      	lsrs	r3, r3, #21
 800ad38:	f003 0303 	and.w	r3, r3, #3
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	005b      	lsls	r3, r3, #1
 800ad40:	69ba      	ldr	r2, [r7, #24]
 800ad42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad46:	61fb      	str	r3, [r7, #28]
          break;
 800ad48:	e003      	b.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800ad4a:	bf00      	nop
 800ad4c:	e00e      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ad4e:	bf00      	nop
 800ad50:	e00c      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ad52:	bf00      	nop
        break;
 800ad54:	e00a      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800ad56:	bf00      	nop
 800ad58:	e008      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800ad5a:	bf00      	nop
 800ad5c:	e006      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800ad5e:	bf00      	nop
 800ad60:	e004      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800ad62:	bf00      	nop
 800ad64:	e002      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800ad66:	bf00      	nop
 800ad68:	e000      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800ad6a:	bf00      	nop
    }
  }

  return(frequency);
 800ad6c:	69fb      	ldr	r3, [r7, #28]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3720      	adds	r7, #32
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	40021000 	.word	0x40021000
 800ad7c:	08017638 	.word	0x08017638

0800ad80 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800ad80:	b480      	push	{r7}
 800ad82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800ad84:	4b05      	ldr	r3, [pc, #20]	; (800ad9c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a04      	ldr	r2, [pc, #16]	; (800ad9c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800ad8a:	f043 0304 	orr.w	r3, r3, #4
 800ad8e:	6013      	str	r3, [r2, #0]
}
 800ad90:	bf00      	nop
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	40021000 	.word	0x40021000

0800ada0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800adaa:	2300      	movs	r3, #0
 800adac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800adae:	4b72      	ldr	r3, [pc, #456]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	f003 0303 	and.w	r3, r3, #3
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00e      	beq.n	800add8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800adba:	4b6f      	ldr	r3, [pc, #444]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	f003 0203 	and.w	r2, r3, #3
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d103      	bne.n	800add2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
       ||
 800adce:	2b00      	cmp	r3, #0
 800add0:	d142      	bne.n	800ae58 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	73fb      	strb	r3, [r7, #15]
 800add6:	e03f      	b.n	800ae58 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2b03      	cmp	r3, #3
 800adde:	d018      	beq.n	800ae12 <RCCEx_PLLSAI1_Config+0x72>
 800ade0:	2b03      	cmp	r3, #3
 800ade2:	d825      	bhi.n	800ae30 <RCCEx_PLLSAI1_Config+0x90>
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d002      	beq.n	800adee <RCCEx_PLLSAI1_Config+0x4e>
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d009      	beq.n	800ae00 <RCCEx_PLLSAI1_Config+0x60>
 800adec:	e020      	b.n	800ae30 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800adee:	4b62      	ldr	r3, [pc, #392]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 0302 	and.w	r3, r3, #2
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d11d      	bne.n	800ae36 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800adfe:	e01a      	b.n	800ae36 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ae00:	4b5d      	ldr	r3, [pc, #372]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d116      	bne.n	800ae3a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae10:	e013      	b.n	800ae3a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ae12:	4b59      	ldr	r3, [pc, #356]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10f      	bne.n	800ae3e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ae1e:	4b56      	ldr	r3, [pc, #344]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d109      	bne.n	800ae3e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ae2e:	e006      	b.n	800ae3e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	73fb      	strb	r3, [r7, #15]
      break;
 800ae34:	e004      	b.n	800ae40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800ae36:	bf00      	nop
 800ae38:	e002      	b.n	800ae40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800ae3a:	bf00      	nop
 800ae3c:	e000      	b.n	800ae40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800ae3e:	bf00      	nop
    }

    if(status == HAL_OK)
 800ae40:	7bfb      	ldrb	r3, [r7, #15]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d108      	bne.n	800ae58 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800ae46:	4b4c      	ldr	r3, [pc, #304]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	f023 0203 	bic.w	r2, r3, #3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4949      	ldr	r1, [pc, #292]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae54:	4313      	orrs	r3, r2
 800ae56:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800ae58:	7bfb      	ldrb	r3, [r7, #15]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	f040 8086 	bne.w	800af6c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ae60:	4b45      	ldr	r3, [pc, #276]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a44      	ldr	r2, [pc, #272]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ae6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae6c:	f7fb fb4c 	bl	8006508 <HAL_GetTick>
 800ae70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ae72:	e009      	b.n	800ae88 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ae74:	f7fb fb48 	bl	8006508 <HAL_GetTick>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	1ad3      	subs	r3, r2, r3
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d902      	bls.n	800ae88 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800ae82:	2303      	movs	r3, #3
 800ae84:	73fb      	strb	r3, [r7, #15]
        break;
 800ae86:	e005      	b.n	800ae94 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ae88:	4b3b      	ldr	r3, [pc, #236]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d1ef      	bne.n	800ae74 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800ae94:	7bfb      	ldrb	r3, [r7, #15]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d168      	bne.n	800af6c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d113      	bne.n	800aec8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aea0:	4b35      	ldr	r3, [pc, #212]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800aea2:	691a      	ldr	r2, [r3, #16]
 800aea4:	4b35      	ldr	r3, [pc, #212]	; (800af7c <RCCEx_PLLSAI1_Config+0x1dc>)
 800aea6:	4013      	ands	r3, r2
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	6892      	ldr	r2, [r2, #8]
 800aeac:	0211      	lsls	r1, r2, #8
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	68d2      	ldr	r2, [r2, #12]
 800aeb2:	06d2      	lsls	r2, r2, #27
 800aeb4:	4311      	orrs	r1, r2
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	6852      	ldr	r2, [r2, #4]
 800aeba:	3a01      	subs	r2, #1
 800aebc:	0112      	lsls	r2, r2, #4
 800aebe:	430a      	orrs	r2, r1
 800aec0:	492d      	ldr	r1, [pc, #180]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800aec2:	4313      	orrs	r3, r2
 800aec4:	610b      	str	r3, [r1, #16]
 800aec6:	e02d      	b.n	800af24 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d115      	bne.n	800aefa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aece:	4b2a      	ldr	r3, [pc, #168]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800aed0:	691a      	ldr	r2, [r3, #16]
 800aed2:	4b2b      	ldr	r3, [pc, #172]	; (800af80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aed4:	4013      	ands	r3, r2
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	6892      	ldr	r2, [r2, #8]
 800aeda:	0211      	lsls	r1, r2, #8
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	6912      	ldr	r2, [r2, #16]
 800aee0:	0852      	lsrs	r2, r2, #1
 800aee2:	3a01      	subs	r2, #1
 800aee4:	0552      	lsls	r2, r2, #21
 800aee6:	4311      	orrs	r1, r2
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	6852      	ldr	r2, [r2, #4]
 800aeec:	3a01      	subs	r2, #1
 800aeee:	0112      	lsls	r2, r2, #4
 800aef0:	430a      	orrs	r2, r1
 800aef2:	4921      	ldr	r1, [pc, #132]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800aef4:	4313      	orrs	r3, r2
 800aef6:	610b      	str	r3, [r1, #16]
 800aef8:	e014      	b.n	800af24 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aefa:	4b1f      	ldr	r3, [pc, #124]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800aefc:	691a      	ldr	r2, [r3, #16]
 800aefe:	4b21      	ldr	r3, [pc, #132]	; (800af84 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af00:	4013      	ands	r3, r2
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	6892      	ldr	r2, [r2, #8]
 800af06:	0211      	lsls	r1, r2, #8
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	6952      	ldr	r2, [r2, #20]
 800af0c:	0852      	lsrs	r2, r2, #1
 800af0e:	3a01      	subs	r2, #1
 800af10:	0652      	lsls	r2, r2, #25
 800af12:	4311      	orrs	r1, r2
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	6852      	ldr	r2, [r2, #4]
 800af18:	3a01      	subs	r2, #1
 800af1a:	0112      	lsls	r2, r2, #4
 800af1c:	430a      	orrs	r2, r1
 800af1e:	4916      	ldr	r1, [pc, #88]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af20:	4313      	orrs	r3, r2
 800af22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800af24:	4b14      	ldr	r3, [pc, #80]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a13      	ldr	r2, [pc, #76]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af30:	f7fb faea 	bl	8006508 <HAL_GetTick>
 800af34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800af36:	e009      	b.n	800af4c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800af38:	f7fb fae6 	bl	8006508 <HAL_GetTick>
 800af3c:	4602      	mov	r2, r0
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	1ad3      	subs	r3, r2, r3
 800af42:	2b02      	cmp	r3, #2
 800af44:	d902      	bls.n	800af4c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800af46:	2303      	movs	r3, #3
 800af48:	73fb      	strb	r3, [r7, #15]
          break;
 800af4a:	e005      	b.n	800af58 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800af4c:	4b0a      	ldr	r3, [pc, #40]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af54:	2b00      	cmp	r3, #0
 800af56:	d0ef      	beq.n	800af38 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800af58:	7bfb      	ldrb	r3, [r7, #15]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d106      	bne.n	800af6c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800af5e:	4b06      	ldr	r3, [pc, #24]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af60:	691a      	ldr	r2, [r3, #16]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	699b      	ldr	r3, [r3, #24]
 800af66:	4904      	ldr	r1, [pc, #16]	; (800af78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800af68:	4313      	orrs	r3, r2
 800af6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800af6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	40021000 	.word	0x40021000
 800af7c:	07ff800f 	.word	0x07ff800f
 800af80:	ff9f800f 	.word	0xff9f800f
 800af84:	f9ff800f 	.word	0xf9ff800f

0800af88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af92:	2300      	movs	r3, #0
 800af94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800af96:	4b72      	ldr	r3, [pc, #456]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	f003 0303 	and.w	r3, r3, #3
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00e      	beq.n	800afc0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800afa2:	4b6f      	ldr	r3, [pc, #444]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	f003 0203 	and.w	r2, r3, #3
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d103      	bne.n	800afba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
       ||
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d142      	bne.n	800b040 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	73fb      	strb	r3, [r7, #15]
 800afbe:	e03f      	b.n	800b040 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b03      	cmp	r3, #3
 800afc6:	d018      	beq.n	800affa <RCCEx_PLLSAI2_Config+0x72>
 800afc8:	2b03      	cmp	r3, #3
 800afca:	d825      	bhi.n	800b018 <RCCEx_PLLSAI2_Config+0x90>
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d002      	beq.n	800afd6 <RCCEx_PLLSAI2_Config+0x4e>
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d009      	beq.n	800afe8 <RCCEx_PLLSAI2_Config+0x60>
 800afd4:	e020      	b.n	800b018 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800afd6:	4b62      	ldr	r3, [pc, #392]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 0302 	and.w	r3, r3, #2
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d11d      	bne.n	800b01e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800afe6:	e01a      	b.n	800b01e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800afe8:	4b5d      	ldr	r3, [pc, #372]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d116      	bne.n	800b022 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aff8:	e013      	b.n	800b022 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800affa:	4b59      	ldr	r3, [pc, #356]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b002:	2b00      	cmp	r3, #0
 800b004:	d10f      	bne.n	800b026 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b006:	4b56      	ldr	r3, [pc, #344]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d109      	bne.n	800b026 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b016:	e006      	b.n	800b026 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	73fb      	strb	r3, [r7, #15]
      break;
 800b01c:	e004      	b.n	800b028 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b01e:	bf00      	nop
 800b020:	e002      	b.n	800b028 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b022:	bf00      	nop
 800b024:	e000      	b.n	800b028 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b026:	bf00      	nop
    }

    if(status == HAL_OK)
 800b028:	7bfb      	ldrb	r3, [r7, #15]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d108      	bne.n	800b040 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800b02e:	4b4c      	ldr	r3, [pc, #304]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	f023 0203 	bic.w	r2, r3, #3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4949      	ldr	r1, [pc, #292]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b03c:	4313      	orrs	r3, r2
 800b03e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b040:	7bfb      	ldrb	r3, [r7, #15]
 800b042:	2b00      	cmp	r3, #0
 800b044:	f040 8086 	bne.w	800b154 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b048:	4b45      	ldr	r3, [pc, #276]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a44      	ldr	r2, [pc, #272]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b04e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b054:	f7fb fa58 	bl	8006508 <HAL_GetTick>
 800b058:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b05a:	e009      	b.n	800b070 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b05c:	f7fb fa54 	bl	8006508 <HAL_GetTick>
 800b060:	4602      	mov	r2, r0
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	2b02      	cmp	r3, #2
 800b068:	d902      	bls.n	800b070 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b06a:	2303      	movs	r3, #3
 800b06c:	73fb      	strb	r3, [r7, #15]
        break;
 800b06e:	e005      	b.n	800b07c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b070:	4b3b      	ldr	r3, [pc, #236]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1ef      	bne.n	800b05c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d168      	bne.n	800b154 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d113      	bne.n	800b0b0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b088:	4b35      	ldr	r3, [pc, #212]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b08a:	695a      	ldr	r2, [r3, #20]
 800b08c:	4b35      	ldr	r3, [pc, #212]	; (800b164 <RCCEx_PLLSAI2_Config+0x1dc>)
 800b08e:	4013      	ands	r3, r2
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	6892      	ldr	r2, [r2, #8]
 800b094:	0211      	lsls	r1, r2, #8
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	68d2      	ldr	r2, [r2, #12]
 800b09a:	06d2      	lsls	r2, r2, #27
 800b09c:	4311      	orrs	r1, r2
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	6852      	ldr	r2, [r2, #4]
 800b0a2:	3a01      	subs	r2, #1
 800b0a4:	0112      	lsls	r2, r2, #4
 800b0a6:	430a      	orrs	r2, r1
 800b0a8:	492d      	ldr	r1, [pc, #180]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	614b      	str	r3, [r1, #20]
 800b0ae:	e02d      	b.n	800b10c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d115      	bne.n	800b0e2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b0b6:	4b2a      	ldr	r3, [pc, #168]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b0b8:	695a      	ldr	r2, [r3, #20]
 800b0ba:	4b2b      	ldr	r3, [pc, #172]	; (800b168 <RCCEx_PLLSAI2_Config+0x1e0>)
 800b0bc:	4013      	ands	r3, r2
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	6892      	ldr	r2, [r2, #8]
 800b0c2:	0211      	lsls	r1, r2, #8
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	6912      	ldr	r2, [r2, #16]
 800b0c8:	0852      	lsrs	r2, r2, #1
 800b0ca:	3a01      	subs	r2, #1
 800b0cc:	0552      	lsls	r2, r2, #21
 800b0ce:	4311      	orrs	r1, r2
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	6852      	ldr	r2, [r2, #4]
 800b0d4:	3a01      	subs	r2, #1
 800b0d6:	0112      	lsls	r2, r2, #4
 800b0d8:	430a      	orrs	r2, r1
 800b0da:	4921      	ldr	r1, [pc, #132]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	614b      	str	r3, [r1, #20]
 800b0e0:	e014      	b.n	800b10c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b0e2:	4b1f      	ldr	r3, [pc, #124]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b0e4:	695a      	ldr	r2, [r3, #20]
 800b0e6:	4b21      	ldr	r3, [pc, #132]	; (800b16c <RCCEx_PLLSAI2_Config+0x1e4>)
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	6892      	ldr	r2, [r2, #8]
 800b0ee:	0211      	lsls	r1, r2, #8
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	6952      	ldr	r2, [r2, #20]
 800b0f4:	0852      	lsrs	r2, r2, #1
 800b0f6:	3a01      	subs	r2, #1
 800b0f8:	0652      	lsls	r2, r2, #25
 800b0fa:	4311      	orrs	r1, r2
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	6852      	ldr	r2, [r2, #4]
 800b100:	3a01      	subs	r2, #1
 800b102:	0112      	lsls	r2, r2, #4
 800b104:	430a      	orrs	r2, r1
 800b106:	4916      	ldr	r1, [pc, #88]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b108:	4313      	orrs	r3, r2
 800b10a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b10c:	4b14      	ldr	r3, [pc, #80]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a13      	ldr	r2, [pc, #76]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b116:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b118:	f7fb f9f6 	bl	8006508 <HAL_GetTick>
 800b11c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b11e:	e009      	b.n	800b134 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b120:	f7fb f9f2 	bl	8006508 <HAL_GetTick>
 800b124:	4602      	mov	r2, r0
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d902      	bls.n	800b134 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b12e:	2303      	movs	r3, #3
 800b130:	73fb      	strb	r3, [r7, #15]
          break;
 800b132:	e005      	b.n	800b140 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b134:	4b0a      	ldr	r3, [pc, #40]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d0ef      	beq.n	800b120 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b140:	7bfb      	ldrb	r3, [r7, #15]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d106      	bne.n	800b154 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b146:	4b06      	ldr	r3, [pc, #24]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b148:	695a      	ldr	r2, [r3, #20]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	699b      	ldr	r3, [r3, #24]
 800b14e:	4904      	ldr	r1, [pc, #16]	; (800b160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b150:	4313      	orrs	r3, r2
 800b152:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b154:	7bfb      	ldrb	r3, [r7, #15]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	40021000 	.word	0x40021000
 800b164:	07ff800f 	.word	0x07ff800f
 800b168:	ff9f800f 	.word	0xff9f800f
 800b16c:	f9ff800f 	.word	0xf9ff800f

0800b170 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800b170:	b480      	push	{r7}
 800b172:	b089      	sub	sp, #36	; 0x24
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800b17a:	2300      	movs	r3, #0
 800b17c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800b17e:	2300      	movs	r3, #0
 800b180:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800b182:	2300      	movs	r3, #0
 800b184:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b18c:	d10b      	bne.n	800b1a6 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b18e:	4b7e      	ldr	r3, [pc, #504]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b190:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b194:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800b198:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	2b60      	cmp	r3, #96	; 0x60
 800b19e:	d112      	bne.n	800b1c6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b1a0:	4b7a      	ldr	r3, [pc, #488]	; (800b38c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800b1a2:	61fb      	str	r3, [r7, #28]
 800b1a4:	e00f      	b.n	800b1c6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1ac:	d10b      	bne.n	800b1c6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b1ae:	4b76      	ldr	r3, [pc, #472]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b1b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b1b8:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1c0:	d101      	bne.n	800b1c6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800b1c2:	4b72      	ldr	r3, [pc, #456]	; (800b38c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800b1c4:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f040 80d6 	bne.w	800b37a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	2b40      	cmp	r3, #64	; 0x40
 800b1d6:	d003      	beq.n	800b1e0 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1de:	d13b      	bne.n	800b258 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b1e0:	4b69      	ldr	r3, [pc, #420]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1ec:	f040 80c4 	bne.w	800b378 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800b1f0:	4b65      	ldr	r3, [pc, #404]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f000 80bd 	beq.w	800b378 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b1fe:	4b62      	ldr	r3, [pc, #392]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	091b      	lsrs	r3, r3, #4
 800b204:	f003 030f 	and.w	r3, r3, #15
 800b208:	3301      	adds	r3, #1
 800b20a:	693a      	ldr	r2, [r7, #16]
 800b20c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b210:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b212:	4b5d      	ldr	r3, [pc, #372]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b214:	68db      	ldr	r3, [r3, #12]
 800b216:	0a1b      	lsrs	r3, r3, #8
 800b218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b21c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800b21e:	4b5a      	ldr	r3, [pc, #360]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	0edb      	lsrs	r3, r3, #27
 800b224:	f003 031f 	and.w	r3, r3, #31
 800b228:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10a      	bne.n	800b246 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800b230:	4b55      	ldr	r3, [pc, #340]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d002      	beq.n	800b242 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800b23c:	2311      	movs	r3, #17
 800b23e:	617b      	str	r3, [r7, #20]
 800b240:	e001      	b.n	800b246 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800b242:	2307      	movs	r3, #7
 800b244:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	fb03 f202 	mul.w	r2, r3, r2
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	fbb2 f3f3 	udiv	r3, r2, r3
 800b254:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b256:	e08f      	b.n	800b378 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d13a      	bne.n	800b2d4 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800b25e:	4b4a      	ldr	r3, [pc, #296]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b266:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b26a:	f040 8086 	bne.w	800b37a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800b26e:	4b46      	ldr	r3, [pc, #280]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b276:	2b00      	cmp	r3, #0
 800b278:	d07f      	beq.n	800b37a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800b27a:	4b43      	ldr	r3, [pc, #268]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b27c:	691b      	ldr	r3, [r3, #16]
 800b27e:	091b      	lsrs	r3, r3, #4
 800b280:	f003 030f 	and.w	r3, r3, #15
 800b284:	3301      	adds	r3, #1
 800b286:	693a      	ldr	r2, [r7, #16]
 800b288:	fbb2 f3f3 	udiv	r3, r2, r3
 800b28c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b28e:	4b3e      	ldr	r3, [pc, #248]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	0a1b      	lsrs	r3, r3, #8
 800b294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b298:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800b29a:	4b3b      	ldr	r3, [pc, #236]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	0edb      	lsrs	r3, r3, #27
 800b2a0:	f003 031f 	and.w	r3, r3, #31
 800b2a4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d10a      	bne.n	800b2c2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800b2ac:	4b36      	ldr	r3, [pc, #216]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b2ae:	691b      	ldr	r3, [r3, #16]
 800b2b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800b2b8:	2311      	movs	r3, #17
 800b2ba:	617b      	str	r3, [r7, #20]
 800b2bc:	e001      	b.n	800b2c2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800b2be:	2307      	movs	r3, #7
 800b2c0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	68fa      	ldr	r2, [r7, #12]
 800b2c6:	fb03 f202 	mul.w	r2, r3, r2
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2d0:	61fb      	str	r3, [r7, #28]
 800b2d2:	e052      	b.n	800b37a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	2b80      	cmp	r3, #128	; 0x80
 800b2d8:	d003      	beq.n	800b2e2 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2e0:	d109      	bne.n	800b2f6 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b2e2:	4b29      	ldr	r3, [pc, #164]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2ee:	d144      	bne.n	800b37a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800b2f0:	4b27      	ldr	r3, [pc, #156]	; (800b390 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800b2f2:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b2f4:	e041      	b.n	800b37a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	2b20      	cmp	r3, #32
 800b2fa:	d003      	beq.n	800b304 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b302:	d13a      	bne.n	800b37a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800b304:	4b20      	ldr	r3, [pc, #128]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b30c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b310:	d133      	bne.n	800b37a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800b312:	4b1d      	ldr	r3, [pc, #116]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b314:	695b      	ldr	r3, [r3, #20]
 800b316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d02d      	beq.n	800b37a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800b31e:	4b1a      	ldr	r3, [pc, #104]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b320:	695b      	ldr	r3, [r3, #20]
 800b322:	091b      	lsrs	r3, r3, #4
 800b324:	f003 030f 	and.w	r3, r3, #15
 800b328:	3301      	adds	r3, #1
 800b32a:	693a      	ldr	r2, [r7, #16]
 800b32c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b330:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800b332:	4b15      	ldr	r3, [pc, #84]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b334:	695b      	ldr	r3, [r3, #20]
 800b336:	0a1b      	lsrs	r3, r3, #8
 800b338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b33c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800b33e:	4b12      	ldr	r3, [pc, #72]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b340:	695b      	ldr	r3, [r3, #20]
 800b342:	0edb      	lsrs	r3, r3, #27
 800b344:	f003 031f 	and.w	r3, r3, #31
 800b348:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d10a      	bne.n	800b366 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800b350:	4b0d      	ldr	r3, [pc, #52]	; (800b388 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b352:	695b      	ldr	r3, [r3, #20]
 800b354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800b35c:	2311      	movs	r3, #17
 800b35e:	617b      	str	r3, [r7, #20]
 800b360:	e001      	b.n	800b366 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800b362:	2307      	movs	r3, #7
 800b364:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	fb03 f202 	mul.w	r2, r3, r2
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	fbb2 f3f3 	udiv	r3, r2, r3
 800b374:	61fb      	str	r3, [r7, #28]
 800b376:	e000      	b.n	800b37a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b378:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800b37a:	69fb      	ldr	r3, [r7, #28]
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3724      	adds	r7, #36	; 0x24
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr
 800b388:	40021000 	.word	0x40021000
 800b38c:	001fff68 	.word	0x001fff68
 800b390:	00f42400 	.word	0x00f42400

0800b394 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
 800b3a0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	d904      	bls.n	800b3b2 <HAL_SAI_InitProtocol+0x1e>
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	3b03      	subs	r3, #3
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d812      	bhi.n	800b3d6 <HAL_SAI_InitProtocol+0x42>
 800b3b0:	e008      	b.n	800b3c4 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	68b9      	ldr	r1, [r7, #8]
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f000 f9fb 	bl	800b7b4 <SAI_InitI2S>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	75fb      	strb	r3, [r7, #23]
      break;
 800b3c2:	e00b      	b.n	800b3dc <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	68b9      	ldr	r1, [r7, #8]
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f000 faa4 	bl	800b918 <SAI_InitPCM>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	75fb      	strb	r3, [r7, #23]
      break;
 800b3d4:	e002      	b.n	800b3dc <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	75fb      	strb	r3, [r7, #23]
      break;
 800b3da:	bf00      	nop
  }

  if (status == HAL_OK)
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d104      	bne.n	800b3ec <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f000 f808 	bl	800b3f8 <HAL_SAI_Init>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b3ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3718      	adds	r7, #24
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
	...

0800b3f8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b08a      	sub	sp, #40	; 0x28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d101      	bne.n	800b40a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800b406:	2301      	movs	r3, #1
 800b408:	e1c7      	b.n	800b79a <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b410:	2b01      	cmp	r3, #1
 800b412:	d10e      	bne.n	800b432 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a81      	ldr	r2, [pc, #516]	; (800b620 <HAL_SAI_Init+0x228>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d107      	bne.n	800b42e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800b422:	2b01      	cmp	r3, #1
 800b424:	d103      	bne.n	800b42e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d001      	beq.n	800b432 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	e1b3      	b.n	800b79a <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d106      	bne.n	800b44c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2200      	movs	r2, #0
 800b442:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f7f8 fff0 	bl	800442c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 fae5 	bl	800ba1c <SAI_Disable>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d001      	beq.n	800b45c <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e19e      	b.n	800b79a <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2202      	movs	r2, #2
 800b460:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	2b02      	cmp	r3, #2
 800b46a:	d00c      	beq.n	800b486 <HAL_SAI_Init+0x8e>
 800b46c:	2b02      	cmp	r3, #2
 800b46e:	d80d      	bhi.n	800b48c <HAL_SAI_Init+0x94>
 800b470:	2b00      	cmp	r3, #0
 800b472:	d002      	beq.n	800b47a <HAL_SAI_Init+0x82>
 800b474:	2b01      	cmp	r3, #1
 800b476:	d003      	beq.n	800b480 <HAL_SAI_Init+0x88>
 800b478:	e008      	b.n	800b48c <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800b47a:	2300      	movs	r3, #0
 800b47c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b47e:	e008      	b.n	800b492 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b480:	2310      	movs	r3, #16
 800b482:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b484:	e005      	b.n	800b492 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b486:	2320      	movs	r3, #32
 800b488:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b48a:	e002      	b.n	800b492 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800b48c:	2300      	movs	r3, #0
 800b48e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b490:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	2b03      	cmp	r3, #3
 800b498:	d81d      	bhi.n	800b4d6 <HAL_SAI_Init+0xde>
 800b49a:	a201      	add	r2, pc, #4	; (adr r2, 800b4a0 <HAL_SAI_Init+0xa8>)
 800b49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a0:	0800b4b1 	.word	0x0800b4b1
 800b4a4:	0800b4b7 	.word	0x0800b4b7
 800b4a8:	0800b4bf 	.word	0x0800b4bf
 800b4ac:	0800b4c7 	.word	0x0800b4c7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	61fb      	str	r3, [r7, #28]
      break;
 800b4b4:	e012      	b.n	800b4dc <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b4b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4ba:	61fb      	str	r3, [r7, #28]
      break;
 800b4bc:	e00e      	b.n	800b4dc <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b4be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b4c2:	61fb      	str	r3, [r7, #28]
      break;
 800b4c4:	e00a      	b.n	800b4dc <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b4c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b4ca:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ce:	f043 0301 	orr.w	r3, r3, #1
 800b4d2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b4d4:	e002      	b.n	800b4dc <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	61fb      	str	r3, [r7, #28]
      break;
 800b4da:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a4f      	ldr	r2, [pc, #316]	; (800b620 <HAL_SAI_Init+0x228>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d004      	beq.n	800b4f0 <HAL_SAI_Init+0xf8>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a4e      	ldr	r2, [pc, #312]	; (800b624 <HAL_SAI_Init+0x22c>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d103      	bne.n	800b4f8 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800b4f0:	4a4d      	ldr	r2, [pc, #308]	; (800b628 <HAL_SAI_Init+0x230>)
 800b4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f4:	6013      	str	r3, [r2, #0]
 800b4f6:	e002      	b.n	800b4fe <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800b4f8:	4a4c      	ldr	r2, [pc, #304]	; (800b62c <HAL_SAI_Init+0x234>)
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fc:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	69db      	ldr	r3, [r3, #28]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d073      	beq.n	800b5ee <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a45      	ldr	r2, [pc, #276]	; (800b620 <HAL_SAI_Init+0x228>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d004      	beq.n	800b51a <HAL_SAI_Init+0x122>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a43      	ldr	r2, [pc, #268]	; (800b624 <HAL_SAI_Init+0x22c>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d105      	bne.n	800b526 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b51a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b51e:	f7fe fd0d 	bl	8009f3c <HAL_RCCEx_GetPeriphCLKFreq>
 800b522:	61b8      	str	r0, [r7, #24]
 800b524:	e004      	b.n	800b530 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800b526:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b52a:	f7fe fd07 	bl	8009f3c <HAL_RCCEx_GetPeriphCLKFreq>
 800b52e:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	695b      	ldr	r3, [r3, #20]
 800b534:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b538:	d120      	bne.n	800b57c <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b53e:	2b04      	cmp	r3, #4
 800b540:	d102      	bne.n	800b548 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800b542:	2340      	movs	r3, #64	; 0x40
 800b544:	613b      	str	r3, [r7, #16]
 800b546:	e00a      	b.n	800b55e <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b54c:	2b08      	cmp	r3, #8
 800b54e:	d103      	bne.n	800b558 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800b550:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b554:	613b      	str	r3, [r7, #16]
 800b556:	e002      	b.n	800b55e <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b55c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800b55e:	69ba      	ldr	r2, [r7, #24]
 800b560:	4613      	mov	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	4413      	add	r3, r2
 800b566:	005b      	lsls	r3, r3, #1
 800b568:	4619      	mov	r1, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	69db      	ldr	r3, [r3, #28]
 800b56e:	693a      	ldr	r2, [r7, #16]
 800b570:	fb02 f303 	mul.w	r3, r2, r3
 800b574:	fbb1 f3f3 	udiv	r3, r1, r3
 800b578:	617b      	str	r3, [r7, #20]
 800b57a:	e017      	b.n	800b5ac <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b580:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b584:	d101      	bne.n	800b58a <HAL_SAI_Init+0x192>
 800b586:	2302      	movs	r3, #2
 800b588:	e000      	b.n	800b58c <HAL_SAI_Init+0x194>
 800b58a:	2301      	movs	r3, #1
 800b58c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800b58e:	69ba      	ldr	r2, [r7, #24]
 800b590:	4613      	mov	r3, r2
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	4413      	add	r3, r2
 800b596:	005b      	lsls	r3, r3, #1
 800b598:	4619      	mov	r1, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	69db      	ldr	r3, [r3, #28]
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	fb02 f303 	mul.w	r3, r2, r3
 800b5a4:	021b      	lsls	r3, r3, #8
 800b5a6:	fbb1 f3f3 	udiv	r3, r1, r3
 800b5aa:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	4a20      	ldr	r2, [pc, #128]	; (800b630 <HAL_SAI_Init+0x238>)
 800b5b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b5b4:	08da      	lsrs	r2, r3, #3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800b5ba:	6979      	ldr	r1, [r7, #20]
 800b5bc:	4b1c      	ldr	r3, [pc, #112]	; (800b630 <HAL_SAI_Init+0x238>)
 800b5be:	fba3 2301 	umull	r2, r3, r3, r1
 800b5c2:	08da      	lsrs	r2, r3, #3
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	4413      	add	r3, r2
 800b5ca:	005b      	lsls	r3, r3, #1
 800b5cc:	1aca      	subs	r2, r1, r3
 800b5ce:	2a08      	cmp	r2, #8
 800b5d0:	d904      	bls.n	800b5dc <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a1b      	ldr	r3, [r3, #32]
 800b5d6:	1c5a      	adds	r2, r3, #1
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e0:	2b04      	cmp	r3, #4
 800b5e2:	d104      	bne.n	800b5ee <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a1b      	ldr	r3, [r3, #32]
 800b5e8:	085a      	lsrs	r2, r3, #1
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d003      	beq.n	800b5fe <HAL_SAI_Init+0x206>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	2b02      	cmp	r3, #2
 800b5fc:	d109      	bne.n	800b612 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b602:	2b01      	cmp	r3, #1
 800b604:	d101      	bne.n	800b60a <HAL_SAI_Init+0x212>
 800b606:	2300      	movs	r3, #0
 800b608:	e001      	b.n	800b60e <HAL_SAI_Init+0x216>
 800b60a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b60e:	623b      	str	r3, [r7, #32]
 800b610:	e012      	b.n	800b638 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b616:	2b01      	cmp	r3, #1
 800b618:	d10c      	bne.n	800b634 <HAL_SAI_Init+0x23c>
 800b61a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b61e:	e00a      	b.n	800b636 <HAL_SAI_Init+0x23e>
 800b620:	40015404 	.word	0x40015404
 800b624:	40015424 	.word	0x40015424
 800b628:	40015400 	.word	0x40015400
 800b62c:	40015800 	.word	0x40015800
 800b630:	cccccccd 	.word	0xcccccccd
 800b634:	2300      	movs	r3, #0
 800b636:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	6819      	ldr	r1, [r3, #0]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	4b58      	ldr	r3, [pc, #352]	; (800b7a4 <HAL_SAI_Init+0x3ac>)
 800b644:	400b      	ands	r3, r1
 800b646:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	6819      	ldr	r1, [r3, #0]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685a      	ldr	r2, [r3, #4]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b656:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b65c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b662:	431a      	orrs	r2, r3
 800b664:	6a3b      	ldr	r3, [r7, #32]
 800b666:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800b670:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b67c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6a1b      	ldr	r3, [r3, #32]
 800b682:	051b      	lsls	r3, r3, #20
 800b684:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b68a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	430a      	orrs	r2, r1
 800b692:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	6812      	ldr	r2, [r2, #0]
 800b69e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800b6a2:	f023 030f 	bic.w	r3, r3, #15
 800b6a6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	6859      	ldr	r1, [r3, #4]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	699a      	ldr	r2, [r3, #24]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b6:	431a      	orrs	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6bc:	431a      	orrs	r2, r3
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	430a      	orrs	r2, r1
 800b6c4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	6899      	ldr	r1, [r3, #8]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	4b35      	ldr	r3, [pc, #212]	; (800b7a8 <HAL_SAI_Init+0x3b0>)
 800b6d2:	400b      	ands	r3, r1
 800b6d4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	6899      	ldr	r1, [r3, #8]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6e0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b6e6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 800b6ec:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 800b6f2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b6fc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	430a      	orrs	r2, r1
 800b704:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68d9      	ldr	r1, [r3, #12]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	f24f 0320 	movw	r3, #61472	; 0xf020
 800b714:	400b      	ands	r3, r1
 800b716:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	68d9      	ldr	r1, [r3, #12]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b726:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b72c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b72e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b734:	3b01      	subs	r3, #1
 800b736:	021b      	lsls	r3, r3, #8
 800b738:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	430a      	orrs	r2, r1
 800b740:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a19      	ldr	r2, [pc, #100]	; (800b7ac <HAL_SAI_Init+0x3b4>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d119      	bne.n	800b780 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800b74c:	4b18      	ldr	r3, [pc, #96]	; (800b7b0 <HAL_SAI_Init+0x3b8>)
 800b74e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b750:	4a17      	ldr	r2, [pc, #92]	; (800b7b0 <HAL_SAI_Init+0x3b8>)
 800b752:	f023 0301 	bic.w	r3, r3, #1
 800b756:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d10e      	bne.n	800b780 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76a:	3b01      	subs	r3, #1
 800b76c:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b76e:	4910      	ldr	r1, [pc, #64]	; (800b7b0 <HAL_SAI_Init+0x3b8>)
 800b770:	4313      	orrs	r3, r2
 800b772:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800b774:	4b0e      	ldr	r3, [pc, #56]	; (800b7b0 <HAL_SAI_Init+0x3b8>)
 800b776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b778:	4a0d      	ldr	r2, [pc, #52]	; (800b7b0 <HAL_SAI_Init+0x3b8>)
 800b77a:	f043 0301 	orr.w	r3, r3, #1
 800b77e:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 800b798:	2300      	movs	r3, #0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3728      	adds	r7, #40	; 0x28
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	f805c010 	.word	0xf805c010
 800b7a8:	fff88000 	.word	0xfff88000
 800b7ac:	40015404 	.word	0x40015404
 800b7b0:	40015400 	.word	0x40015400

0800b7b4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b087      	sub	sp, #28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
 800b7c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d003      	beq.n	800b7e2 <SAI_InitI2S+0x2e>
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d103      	bne.n	800b7ea <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	64da      	str	r2, [r3, #76]	; 0x4c
 800b7e8:	e002      	b.n	800b7f0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b7f6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7fe:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2200      	movs	r2, #0
 800b804:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	683a      	ldr	r2, [r7, #0]
 800b80a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	f003 0301 	and.w	r3, r3, #1
 800b812:	2b00      	cmp	r3, #0
 800b814:	d001      	beq.n	800b81a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800b816:	2301      	movs	r3, #1
 800b818:	e077      	b.n	800b90a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d107      	bne.n	800b830 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2200      	movs	r2, #0
 800b824:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b82c:	661a      	str	r2, [r3, #96]	; 0x60
 800b82e:	e006      	b.n	800b83e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b836:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2b03      	cmp	r3, #3
 800b842:	d84f      	bhi.n	800b8e4 <SAI_InitI2S+0x130>
 800b844:	a201      	add	r2, pc, #4	; (adr r2, 800b84c <SAI_InitI2S+0x98>)
 800b846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b84a:	bf00      	nop
 800b84c:	0800b85d 	.word	0x0800b85d
 800b850:	0800b87f 	.word	0x0800b87f
 800b854:	0800b8a1 	.word	0x0800b8a1
 800b858:	0800b8c3 	.word	0x0800b8c3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2280      	movs	r2, #128	; 0x80
 800b860:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	085b      	lsrs	r3, r3, #1
 800b866:	015a      	lsls	r2, r3, #5
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	085b      	lsrs	r3, r3, #1
 800b870:	011a      	lsls	r2, r3, #4
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2240      	movs	r2, #64	; 0x40
 800b87a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800b87c:	e035      	b.n	800b8ea <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2280      	movs	r2, #128	; 0x80
 800b882:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	085b      	lsrs	r3, r3, #1
 800b888:	019a      	lsls	r2, r3, #6
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	085b      	lsrs	r3, r3, #1
 800b892:	015a      	lsls	r2, r3, #5
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2280      	movs	r2, #128	; 0x80
 800b89c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800b89e:	e024      	b.n	800b8ea <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	22c0      	movs	r2, #192	; 0xc0
 800b8a4:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	085b      	lsrs	r3, r3, #1
 800b8aa:	019a      	lsls	r2, r3, #6
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	085b      	lsrs	r3, r3, #1
 800b8b4:	015a      	lsls	r2, r3, #5
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2280      	movs	r2, #128	; 0x80
 800b8be:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800b8c0:	e013      	b.n	800b8ea <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	22e0      	movs	r2, #224	; 0xe0
 800b8c6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	085b      	lsrs	r3, r3, #1
 800b8cc:	019a      	lsls	r2, r3, #6
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	085b      	lsrs	r3, r3, #1
 800b8d6:	015a      	lsls	r2, r3, #5
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2280      	movs	r2, #128	; 0x80
 800b8e0:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800b8e2:	e002      	b.n	800b8ea <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	75fb      	strb	r3, [r7, #23]
      break;
 800b8e8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d10b      	bne.n	800b908 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d102      	bne.n	800b8fc <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2210      	movs	r2, #16
 800b8fa:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	d102      	bne.n	800b908 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2208      	movs	r2, #8
 800b906:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 800b908:	7dfb      	ldrb	r3, [r7, #23]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	371c      	adds	r7, #28
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop

0800b918 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b918:	b480      	push	{r7}
 800b91a:	b087      	sub	sp, #28
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
 800b924:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b926:	2300      	movs	r3, #0
 800b928:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2200      	movs	r2, #0
 800b92e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2200      	movs	r2, #0
 800b934:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d003      	beq.n	800b946 <SAI_InitPCM+0x2e>
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	2b02      	cmp	r3, #2
 800b944:	d103      	bne.n	800b94e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2201      	movs	r2, #1
 800b94a:	64da      	str	r2, [r3, #76]	; 0x4c
 800b94c:	e002      	b.n	800b954 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2200      	movs	r2, #0
 800b952:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b960:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b968:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2200      	movs	r2, #0
 800b96e:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	683a      	ldr	r2, [r7, #0]
 800b974:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b97c:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	2b04      	cmp	r3, #4
 800b982:	d103      	bne.n	800b98c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2201      	movs	r2, #1
 800b988:	655a      	str	r2, [r3, #84]	; 0x54
 800b98a:	e002      	b.n	800b992 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	220d      	movs	r2, #13
 800b990:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2b03      	cmp	r3, #3
 800b996:	d837      	bhi.n	800ba08 <SAI_InitPCM+0xf0>
 800b998:	a201      	add	r2, pc, #4	; (adr r2, 800b9a0 <SAI_InitPCM+0x88>)
 800b99a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b99e:	bf00      	nop
 800b9a0:	0800b9b1 	.word	0x0800b9b1
 800b9a4:	0800b9c7 	.word	0x0800b9c7
 800b9a8:	0800b9dd 	.word	0x0800b9dd
 800b9ac:	0800b9f3 	.word	0x0800b9f3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2280      	movs	r2, #128	; 0x80
 800b9b4:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	011a      	lsls	r2, r3, #4
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2240      	movs	r2, #64	; 0x40
 800b9c2:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800b9c4:	e023      	b.n	800ba0e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2280      	movs	r2, #128	; 0x80
 800b9ca:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	015a      	lsls	r2, r3, #5
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2280      	movs	r2, #128	; 0x80
 800b9d8:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800b9da:	e018      	b.n	800ba0e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	22c0      	movs	r2, #192	; 0xc0
 800b9e0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	015a      	lsls	r2, r3, #5
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2280      	movs	r2, #128	; 0x80
 800b9ee:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800b9f0:	e00d      	b.n	800ba0e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	22e0      	movs	r2, #224	; 0xe0
 800b9f6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	015a      	lsls	r2, r3, #5
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2280      	movs	r2, #128	; 0x80
 800ba04:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800ba06:	e002      	b.n	800ba0e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	75fb      	strb	r3, [r7, #23]
      break;
 800ba0c:	bf00      	nop
  }

  return status;
 800ba0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	371c      	adds	r7, #28
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ba24:	4b18      	ldr	r3, [pc, #96]	; (800ba88 <SAI_Disable+0x6c>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a18      	ldr	r2, [pc, #96]	; (800ba8c <SAI_Disable+0x70>)
 800ba2a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba2e:	0b1b      	lsrs	r3, r3, #12
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ba34:	2300      	movs	r3, #0
 800ba36:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ba46:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d10a      	bne.n	800ba64 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 800ba5e:	2303      	movs	r3, #3
 800ba60:	72fb      	strb	r3, [r7, #11]
      break;
 800ba62:	e009      	b.n	800ba78 <SAI_Disable+0x5c>
    }
    count--;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	3b01      	subs	r3, #1
 800ba68:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d1e7      	bne.n	800ba48 <SAI_Disable+0x2c>

  return status;
 800ba78:	7afb      	ldrb	r3, [r7, #11]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3714      	adds	r7, #20
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	20000020 	.word	0x20000020
 800ba8c:	95cbec1b 	.word	0x95cbec1b

0800ba90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d101      	bne.n	800baa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e095      	b.n	800bbce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d108      	bne.n	800babc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bab2:	d009      	beq.n	800bac8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	61da      	str	r2, [r3, #28]
 800baba:	e005      	b.n	800bac8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d106      	bne.n	800bae8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f7f8 fa2c 	bl	8003f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2202      	movs	r2, #2
 800baec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bafe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb08:	d902      	bls.n	800bb10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	60fb      	str	r3, [r7, #12]
 800bb0e:	e002      	b.n	800bb16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bb10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bb1e:	d007      	beq.n	800bb30 <HAL_SPI_Init+0xa0>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb28:	d002      	beq.n	800bb30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bb40:	431a      	orrs	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	691b      	ldr	r3, [r3, #16]
 800bb46:	f003 0302 	and.w	r3, r3, #2
 800bb4a:	431a      	orrs	r2, r3
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	695b      	ldr	r3, [r3, #20]
 800bb50:	f003 0301 	and.w	r3, r3, #1
 800bb54:	431a      	orrs	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	699b      	ldr	r3, [r3, #24]
 800bb5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb5e:	431a      	orrs	r2, r3
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	69db      	ldr	r3, [r3, #28]
 800bb64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb68:	431a      	orrs	r2, r3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a1b      	ldr	r3, [r3, #32]
 800bb6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb72:	ea42 0103 	orr.w	r1, r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	430a      	orrs	r2, r1
 800bb84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	699b      	ldr	r3, [r3, #24]
 800bb8a:	0c1b      	lsrs	r3, r3, #16
 800bb8c:	f003 0204 	and.w	r2, r3, #4
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb94:	f003 0310 	and.w	r3, r3, #16
 800bb98:	431a      	orrs	r2, r3
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb9e:	f003 0308 	and.w	r3, r3, #8
 800bba2:	431a      	orrs	r2, r3
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bbac:	ea42 0103 	orr.w	r1, r2, r3
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	430a      	orrs	r2, r1
 800bbbc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b088      	sub	sp, #32
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	60f8      	str	r0, [r7, #12]
 800bbde:	60b9      	str	r1, [r7, #8]
 800bbe0:	603b      	str	r3, [r7, #0]
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d101      	bne.n	800bbf8 <HAL_SPI_Transmit+0x22>
 800bbf4:	2302      	movs	r3, #2
 800bbf6:	e15f      	b.n	800beb8 <HAL_SPI_Transmit+0x2e2>
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc00:	f7fa fc82 	bl	8006508 <HAL_GetTick>
 800bc04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bc06:	88fb      	ldrh	r3, [r7, #6]
 800bc08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d002      	beq.n	800bc1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bc16:	2302      	movs	r3, #2
 800bc18:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bc1a:	e148      	b.n	800beae <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d002      	beq.n	800bc28 <HAL_SPI_Transmit+0x52>
 800bc22:	88fb      	ldrh	r3, [r7, #6]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d102      	bne.n	800bc2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bc2c:	e13f      	b.n	800beae <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2203      	movs	r2, #3
 800bc32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	88fa      	ldrh	r2, [r7, #6]
 800bc46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	88fa      	ldrh	r2, [r7, #6]
 800bc4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2200      	movs	r2, #0
 800bc52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc78:	d10f      	bne.n	800bc9a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bca4:	2b40      	cmp	r3, #64	; 0x40
 800bca6:	d007      	beq.n	800bcb8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bcc0:	d94f      	bls.n	800bd62 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d002      	beq.n	800bcd0 <HAL_SPI_Transmit+0xfa>
 800bcca:	8afb      	ldrh	r3, [r7, #22]
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d142      	bne.n	800bd56 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcd4:	881a      	ldrh	r2, [r3, #0]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce0:	1c9a      	adds	r2, r3, #2
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	3b01      	subs	r3, #1
 800bcee:	b29a      	uxth	r2, r3
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bcf4:	e02f      	b.n	800bd56 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	f003 0302 	and.w	r3, r3, #2
 800bd00:	2b02      	cmp	r3, #2
 800bd02:	d112      	bne.n	800bd2a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd08:	881a      	ldrh	r2, [r3, #0]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd14:	1c9a      	adds	r2, r3, #2
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	3b01      	subs	r3, #1
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd28:	e015      	b.n	800bd56 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd2a:	f7fa fbed 	bl	8006508 <HAL_GetTick>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	1ad3      	subs	r3, r2, r3
 800bd34:	683a      	ldr	r2, [r7, #0]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d803      	bhi.n	800bd42 <HAL_SPI_Transmit+0x16c>
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd40:	d102      	bne.n	800bd48 <HAL_SPI_Transmit+0x172>
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d106      	bne.n	800bd56 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800bd48:	2303      	movs	r3, #3
 800bd4a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2201      	movs	r2, #1
 800bd50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800bd54:	e0ab      	b.n	800beae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1ca      	bne.n	800bcf6 <HAL_SPI_Transmit+0x120>
 800bd60:	e080      	b.n	800be64 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d002      	beq.n	800bd70 <HAL_SPI_Transmit+0x19a>
 800bd6a:	8afb      	ldrh	r3, [r7, #22]
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d174      	bne.n	800be5a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d912      	bls.n	800bda0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd7e:	881a      	ldrh	r2, [r3, #0]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd8a:	1c9a      	adds	r2, r3, #2
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	3b02      	subs	r3, #2
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd9e:	e05c      	b.n	800be5a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	330c      	adds	r3, #12
 800bdaa:	7812      	ldrb	r2, [r2, #0]
 800bdac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb2:	1c5a      	adds	r2, r3, #1
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	3b01      	subs	r3, #1
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800bdc6:	e048      	b.n	800be5a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	f003 0302 	and.w	r3, r3, #2
 800bdd2:	2b02      	cmp	r3, #2
 800bdd4:	d12b      	bne.n	800be2e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d912      	bls.n	800be06 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde4:	881a      	ldrh	r2, [r3, #0]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf0:	1c9a      	adds	r2, r3, #2
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	3b02      	subs	r3, #2
 800bdfe:	b29a      	uxth	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	87da      	strh	r2, [r3, #62]	; 0x3e
 800be04:	e029      	b.n	800be5a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	330c      	adds	r3, #12
 800be10:	7812      	ldrb	r2, [r2, #0]
 800be12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be18:	1c5a      	adds	r2, r3, #1
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be22:	b29b      	uxth	r3, r3
 800be24:	3b01      	subs	r3, #1
 800be26:	b29a      	uxth	r2, r3
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800be2c:	e015      	b.n	800be5a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be2e:	f7fa fb6b 	bl	8006508 <HAL_GetTick>
 800be32:	4602      	mov	r2, r0
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	1ad3      	subs	r3, r2, r3
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d803      	bhi.n	800be46 <HAL_SPI_Transmit+0x270>
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be44:	d102      	bne.n	800be4c <HAL_SPI_Transmit+0x276>
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d106      	bne.n	800be5a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800be4c:	2303      	movs	r3, #3
 800be4e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2201      	movs	r2, #1
 800be54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800be58:	e029      	b.n	800beae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be5e:	b29b      	uxth	r3, r3
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1b1      	bne.n	800bdc8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800be64:	69ba      	ldr	r2, [r7, #24]
 800be66:	6839      	ldr	r1, [r7, #0]
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f001 fa0d 	bl	800d288 <SPI_EndRxTxTransaction>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d002      	beq.n	800be7a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2220      	movs	r2, #32
 800be78:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10a      	bne.n	800be98 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800be82:	2300      	movs	r3, #0
 800be84:	613b      	str	r3, [r7, #16]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	613b      	str	r3, [r7, #16]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	613b      	str	r3, [r7, #16]
 800be96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800bea0:	2301      	movs	r3, #1
 800bea2:	77fb      	strb	r3, [r7, #31]
 800bea4:	e003      	b.n	800beae <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2201      	movs	r2, #1
 800beaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2200      	movs	r2, #0
 800beb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800beb6:	7ffb      	ldrb	r3, [r7, #31]
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3720      	adds	r7, #32
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b088      	sub	sp, #32
 800bec4:	af02      	add	r7, sp, #8
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	603b      	str	r3, [r7, #0]
 800becc:	4613      	mov	r3, r2
 800bece:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bed0:	2300      	movs	r3, #0
 800bed2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d002      	beq.n	800bee6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800bee0:	2302      	movs	r3, #2
 800bee2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bee4:	e11a      	b.n	800c11c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800beee:	d112      	bne.n	800bf16 <HAL_SPI_Receive+0x56>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10e      	bne.n	800bf16 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2204      	movs	r2, #4
 800befc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bf00:	88fa      	ldrh	r2, [r7, #6]
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	9300      	str	r3, [sp, #0]
 800bf06:	4613      	mov	r3, r2
 800bf08:	68ba      	ldr	r2, [r7, #8]
 800bf0a:	68b9      	ldr	r1, [r7, #8]
 800bf0c:	68f8      	ldr	r0, [r7, #12]
 800bf0e:	f000 f90e 	bl	800c12e <HAL_SPI_TransmitReceive>
 800bf12:	4603      	mov	r3, r0
 800bf14:	e107      	b.n	800c126 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d101      	bne.n	800bf24 <HAL_SPI_Receive+0x64>
 800bf20:	2302      	movs	r3, #2
 800bf22:	e100      	b.n	800c126 <HAL_SPI_Receive+0x266>
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2201      	movs	r2, #1
 800bf28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf2c:	f7fa faec 	bl	8006508 <HAL_GetTick>
 800bf30:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d002      	beq.n	800bf3e <HAL_SPI_Receive+0x7e>
 800bf38:	88fb      	ldrh	r3, [r7, #6]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d102      	bne.n	800bf44 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bf42:	e0eb      	b.n	800c11c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2204      	movs	r2, #4
 800bf48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	88fa      	ldrh	r2, [r7, #6]
 800bf5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	88fa      	ldrh	r2, [r7, #6]
 800bf64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2200      	movs	r2, #0
 800bf72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2200      	movs	r2, #0
 800bf78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2200      	movs	r2, #0
 800bf84:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf8e:	d908      	bls.n	800bfa2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	685a      	ldr	r2, [r3, #4]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bf9e:	605a      	str	r2, [r3, #4]
 800bfa0:	e007      	b.n	800bfb2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	685a      	ldr	r2, [r3, #4]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bfb0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfba:	d10f      	bne.n	800bfdc <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bfca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bfda:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfe6:	2b40      	cmp	r3, #64	; 0x40
 800bfe8:	d007      	beq.n	800bffa <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bff8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c002:	d86f      	bhi.n	800c0e4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c004:	e034      	b.n	800c070 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	f003 0301 	and.w	r3, r3, #1
 800c010:	2b01      	cmp	r3, #1
 800c012:	d117      	bne.n	800c044 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f103 020c 	add.w	r2, r3, #12
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c020:	7812      	ldrb	r2, [r2, #0]
 800c022:	b2d2      	uxtb	r2, r2
 800c024:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02a:	1c5a      	adds	r2, r3, #1
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c036:	b29b      	uxth	r3, r3
 800c038:	3b01      	subs	r3, #1
 800c03a:	b29a      	uxth	r2, r3
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c042:	e015      	b.n	800c070 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c044:	f7fa fa60 	bl	8006508 <HAL_GetTick>
 800c048:	4602      	mov	r2, r0
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	1ad3      	subs	r3, r2, r3
 800c04e:	683a      	ldr	r2, [r7, #0]
 800c050:	429a      	cmp	r2, r3
 800c052:	d803      	bhi.n	800c05c <HAL_SPI_Receive+0x19c>
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c05a:	d102      	bne.n	800c062 <HAL_SPI_Receive+0x1a2>
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d106      	bne.n	800c070 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800c062:	2303      	movs	r3, #3
 800c064:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2201      	movs	r2, #1
 800c06a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c06e:	e055      	b.n	800c11c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c076:	b29b      	uxth	r3, r3
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d1c4      	bne.n	800c006 <HAL_SPI_Receive+0x146>
 800c07c:	e038      	b.n	800c0f0 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	f003 0301 	and.w	r3, r3, #1
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d115      	bne.n	800c0b8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	68da      	ldr	r2, [r3, #12]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c096:	b292      	uxth	r2, r2
 800c098:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c09e:	1c9a      	adds	r2, r3, #2
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c0b6:	e015      	b.n	800c0e4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0b8:	f7fa fa26 	bl	8006508 <HAL_GetTick>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	683a      	ldr	r2, [r7, #0]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d803      	bhi.n	800c0d0 <HAL_SPI_Receive+0x210>
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ce:	d102      	bne.n	800c0d6 <HAL_SPI_Receive+0x216>
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d106      	bne.n	800c0e4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800c0d6:	2303      	movs	r3, #3
 800c0d8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2201      	movs	r2, #1
 800c0de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c0e2:	e01b      	b.n	800c11c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d1c6      	bne.n	800c07e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c0f0:	693a      	ldr	r2, [r7, #16]
 800c0f2:	6839      	ldr	r1, [r7, #0]
 800c0f4:	68f8      	ldr	r0, [r7, #12]
 800c0f6:	f001 f86f 	bl	800d1d8 <SPI_EndRxTransaction>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d002      	beq.n	800c106 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2220      	movs	r2, #32
 800c104:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d002      	beq.n	800c114 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800c10e:	2301      	movs	r3, #1
 800c110:	75fb      	strb	r3, [r7, #23]
 800c112:	e003      	b.n	800c11c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2201      	movs	r2, #1
 800c118:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2200      	movs	r2, #0
 800c120:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c124:	7dfb      	ldrb	r3, [r7, #23]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3718      	adds	r7, #24
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b08a      	sub	sp, #40	; 0x28
 800c132:	af00      	add	r7, sp, #0
 800c134:	60f8      	str	r0, [r7, #12]
 800c136:	60b9      	str	r1, [r7, #8]
 800c138:	607a      	str	r2, [r7, #4]
 800c13a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c13c:	2301      	movs	r3, #1
 800c13e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c140:	2300      	movs	r3, #0
 800c142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d101      	bne.n	800c154 <HAL_SPI_TransmitReceive+0x26>
 800c150:	2302      	movs	r3, #2
 800c152:	e20a      	b.n	800c56a <HAL_SPI_TransmitReceive+0x43c>
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2201      	movs	r2, #1
 800c158:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c15c:	f7fa f9d4 	bl	8006508 <HAL_GetTick>
 800c160:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c168:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c170:	887b      	ldrh	r3, [r7, #2]
 800c172:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800c174:	887b      	ldrh	r3, [r7, #2]
 800c176:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c178:	7efb      	ldrb	r3, [r7, #27]
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d00e      	beq.n	800c19c <HAL_SPI_TransmitReceive+0x6e>
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c184:	d106      	bne.n	800c194 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d102      	bne.n	800c194 <HAL_SPI_TransmitReceive+0x66>
 800c18e:	7efb      	ldrb	r3, [r7, #27]
 800c190:	2b04      	cmp	r3, #4
 800c192:	d003      	beq.n	800c19c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800c194:	2302      	movs	r3, #2
 800c196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c19a:	e1e0      	b.n	800c55e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d005      	beq.n	800c1ae <HAL_SPI_TransmitReceive+0x80>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d002      	beq.n	800c1ae <HAL_SPI_TransmitReceive+0x80>
 800c1a8:	887b      	ldrh	r3, [r7, #2]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d103      	bne.n	800c1b6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c1b4:	e1d3      	b.n	800c55e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	2b04      	cmp	r3, #4
 800c1c0:	d003      	beq.n	800c1ca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2205      	movs	r2, #5
 800c1c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	887a      	ldrh	r2, [r7, #2]
 800c1da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	887a      	ldrh	r2, [r7, #2]
 800c1e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	887a      	ldrh	r2, [r7, #2]
 800c1f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	887a      	ldrh	r2, [r7, #2]
 800c1f6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2200      	movs	r2, #0
 800c202:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c20c:	d802      	bhi.n	800c214 <HAL_SPI_TransmitReceive+0xe6>
 800c20e:	8a3b      	ldrh	r3, [r7, #16]
 800c210:	2b01      	cmp	r3, #1
 800c212:	d908      	bls.n	800c226 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	685a      	ldr	r2, [r3, #4]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c222:	605a      	str	r2, [r3, #4]
 800c224:	e007      	b.n	800c236 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	685a      	ldr	r2, [r3, #4]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c234:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c240:	2b40      	cmp	r3, #64	; 0x40
 800c242:	d007      	beq.n	800c254 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c252:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c25c:	f240 8081 	bls.w	800c362 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d002      	beq.n	800c26e <HAL_SPI_TransmitReceive+0x140>
 800c268:	8a7b      	ldrh	r3, [r7, #18]
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d16d      	bne.n	800c34a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c272:	881a      	ldrh	r2, [r3, #0]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c27e:	1c9a      	adds	r2, r3, #2
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c288:	b29b      	uxth	r3, r3
 800c28a:	3b01      	subs	r3, #1
 800c28c:	b29a      	uxth	r2, r3
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c292:	e05a      	b.n	800c34a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	f003 0302 	and.w	r3, r3, #2
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d11b      	bne.n	800c2da <HAL_SPI_TransmitReceive+0x1ac>
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d016      	beq.n	800c2da <HAL_SPI_TransmitReceive+0x1ac>
 800c2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d113      	bne.n	800c2da <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b6:	881a      	ldrh	r2, [r3, #0]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c2:	1c9a      	adds	r2, r3, #2
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	3b01      	subs	r3, #1
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	f003 0301 	and.w	r3, r3, #1
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d11c      	bne.n	800c322 <HAL_SPI_TransmitReceive+0x1f4>
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d016      	beq.n	800c322 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	68da      	ldr	r2, [r3, #12]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2fe:	b292      	uxth	r2, r2
 800c300:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c306:	1c9a      	adds	r2, r3, #2
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c312:	b29b      	uxth	r3, r3
 800c314:	3b01      	subs	r3, #1
 800c316:	b29a      	uxth	r2, r3
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c31e:	2301      	movs	r3, #1
 800c320:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c322:	f7fa f8f1 	bl	8006508 <HAL_GetTick>
 800c326:	4602      	mov	r2, r0
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	1ad3      	subs	r3, r2, r3
 800c32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c32e:	429a      	cmp	r2, r3
 800c330:	d80b      	bhi.n	800c34a <HAL_SPI_TransmitReceive+0x21c>
 800c332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c338:	d007      	beq.n	800c34a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800c33a:	2303      	movs	r3, #3
 800c33c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2201      	movs	r2, #1
 800c344:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800c348:	e109      	b.n	800c55e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c34e:	b29b      	uxth	r3, r3
 800c350:	2b00      	cmp	r3, #0
 800c352:	d19f      	bne.n	800c294 <HAL_SPI_TransmitReceive+0x166>
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d199      	bne.n	800c294 <HAL_SPI_TransmitReceive+0x166>
 800c360:	e0e3      	b.n	800c52a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d003      	beq.n	800c372 <HAL_SPI_TransmitReceive+0x244>
 800c36a:	8a7b      	ldrh	r3, [r7, #18]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	f040 80cf 	bne.w	800c510 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c376:	b29b      	uxth	r3, r3
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d912      	bls.n	800c3a2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c380:	881a      	ldrh	r2, [r3, #0]
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c38c:	1c9a      	adds	r2, r3, #2
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c396:	b29b      	uxth	r3, r3
 800c398:	3b02      	subs	r3, #2
 800c39a:	b29a      	uxth	r2, r3
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c3a0:	e0b6      	b.n	800c510 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	330c      	adds	r3, #12
 800c3ac:	7812      	ldrb	r2, [r2, #0]
 800c3ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b4:	1c5a      	adds	r2, r3, #1
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	b29a      	uxth	r2, r3
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c3c8:	e0a2      	b.n	800c510 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	689b      	ldr	r3, [r3, #8]
 800c3d0:	f003 0302 	and.w	r3, r3, #2
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	d134      	bne.n	800c442 <HAL_SPI_TransmitReceive+0x314>
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d02f      	beq.n	800c442 <HAL_SPI_TransmitReceive+0x314>
 800c3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d12c      	bne.n	800c442 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d912      	bls.n	800c418 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f6:	881a      	ldrh	r2, [r3, #0]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c402:	1c9a      	adds	r2, r3, #2
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	3b02      	subs	r3, #2
 800c410:	b29a      	uxth	r2, r3
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c416:	e012      	b.n	800c43e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	330c      	adds	r3, #12
 800c422:	7812      	ldrb	r2, [r2, #0]
 800c424:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42a:	1c5a      	adds	r2, r3, #1
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c434:	b29b      	uxth	r3, r3
 800c436:	3b01      	subs	r3, #1
 800c438:	b29a      	uxth	r2, r3
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c43e:	2300      	movs	r3, #0
 800c440:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	f003 0301 	and.w	r3, r3, #1
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d148      	bne.n	800c4e2 <HAL_SPI_TransmitReceive+0x3b4>
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c456:	b29b      	uxth	r3, r3
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d042      	beq.n	800c4e2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c462:	b29b      	uxth	r3, r3
 800c464:	2b01      	cmp	r3, #1
 800c466:	d923      	bls.n	800c4b0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	68da      	ldr	r2, [r3, #12]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c472:	b292      	uxth	r2, r2
 800c474:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c47a:	1c9a      	adds	r2, r3, #2
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c486:	b29b      	uxth	r3, r3
 800c488:	3b02      	subs	r3, #2
 800c48a:	b29a      	uxth	r2, r3
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c498:	b29b      	uxth	r3, r3
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d81f      	bhi.n	800c4de <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	685a      	ldr	r2, [r3, #4]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c4ac:	605a      	str	r2, [r3, #4]
 800c4ae:	e016      	b.n	800c4de <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f103 020c 	add.w	r2, r3, #12
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4bc:	7812      	ldrb	r2, [r2, #0]
 800c4be:	b2d2      	uxtb	r2, r2
 800c4c0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4c6:	1c5a      	adds	r2, r3, #1
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c4e2:	f7fa f811 	bl	8006508 <HAL_GetTick>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	69fb      	ldr	r3, [r7, #28]
 800c4ea:	1ad3      	subs	r3, r2, r3
 800c4ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d803      	bhi.n	800c4fa <HAL_SPI_TransmitReceive+0x3cc>
 800c4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f8:	d102      	bne.n	800c500 <HAL_SPI_TransmitReceive+0x3d2>
 800c4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d107      	bne.n	800c510 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800c500:	2303      	movs	r3, #3
 800c502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2201      	movs	r2, #1
 800c50a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800c50e:	e026      	b.n	800c55e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c514:	b29b      	uxth	r3, r3
 800c516:	2b00      	cmp	r3, #0
 800c518:	f47f af57 	bne.w	800c3ca <HAL_SPI_TransmitReceive+0x29c>
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c522:	b29b      	uxth	r3, r3
 800c524:	2b00      	cmp	r3, #0
 800c526:	f47f af50 	bne.w	800c3ca <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c52a:	69fa      	ldr	r2, [r7, #28]
 800c52c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f000 feaa 	bl	800d288 <SPI_EndRxTxTransaction>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d005      	beq.n	800c546 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2220      	movs	r2, #32
 800c544:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d003      	beq.n	800c556 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800c54e:	2301      	movs	r3, #1
 800c550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c554:	e003      	b.n	800c55e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2201      	movs	r2, #1
 800c55a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2200      	movs	r2, #0
 800c562:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c566:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3728      	adds	r7, #40	; 0x28
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
	...

0800c574 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b086      	sub	sp, #24
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	4613      	mov	r3, r2
 800c580:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c582:	2300      	movs	r3, #0
 800c584:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d101      	bne.n	800c594 <HAL_SPI_Transmit_DMA+0x20>
 800c590:	2302      	movs	r3, #2
 800c592:	e0d4      	b.n	800c73e <HAL_SPI_Transmit_DMA+0x1ca>
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2201      	movs	r2, #1
 800c598:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d002      	beq.n	800c5ae <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c5ac:	e0c2      	b.n	800c734 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d002      	beq.n	800c5ba <HAL_SPI_Transmit_DMA+0x46>
 800c5b4:	88fb      	ldrh	r3, [r7, #6]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d102      	bne.n	800c5c0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c5be:	e0b9      	b.n	800c734 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2203      	movs	r2, #3
 800c5c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	68ba      	ldr	r2, [r7, #8]
 800c5d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	88fa      	ldrh	r2, [r7, #6]
 800c5d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	88fa      	ldrh	r2, [r7, #6]
 800c5de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	689b      	ldr	r3, [r3, #8]
 800c606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c60a:	d10f      	bne.n	800c62c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c61a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c62a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c630:	4a45      	ldr	r2, [pc, #276]	; (800c748 <HAL_SPI_Transmit_DMA+0x1d4>)
 800c632:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c638:	4a44      	ldr	r2, [pc, #272]	; (800c74c <HAL_SPI_Transmit_DMA+0x1d8>)
 800c63a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c640:	4a43      	ldr	r2, [pc, #268]	; (800c750 <HAL_SPI_Transmit_DMA+0x1dc>)
 800c642:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c648:	2200      	movs	r2, #0
 800c64a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	685a      	ldr	r2, [r3, #4]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c65a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	68db      	ldr	r3, [r3, #12]
 800c660:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c664:	d82d      	bhi.n	800c6c2 <HAL_SPI_Transmit_DMA+0x14e>
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c66a:	699b      	ldr	r3, [r3, #24]
 800c66c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c670:	d127      	bne.n	800c6c2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c676:	b29b      	uxth	r3, r3
 800c678:	f003 0301 	and.w	r3, r3, #1
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10f      	bne.n	800c6a0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	685a      	ldr	r2, [r3, #4]
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c68e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c694:	b29b      	uxth	r3, r3
 800c696:	085b      	lsrs	r3, r3, #1
 800c698:	b29a      	uxth	r2, r3
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c69e:	e010      	b.n	800c6c2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	685a      	ldr	r2, [r3, #4]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c6ae:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	085b      	lsrs	r3, r3, #1
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	b29a      	uxth	r2, r3
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	330c      	adds	r3, #12
 800c6d2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6d8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c6da:	f7fb f8d2 	bl	8007882 <HAL_DMA_Start_IT>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d008      	beq.n	800c6f6 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6e8:	f043 0210 	orr.w	r2, r3, #16
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	75fb      	strb	r3, [r7, #23]

    goto error;
 800c6f4:	e01e      	b.n	800c734 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c700:	2b40      	cmp	r3, #64	; 0x40
 800c702:	d007      	beq.n	800c714 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c712:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	685a      	ldr	r2, [r3, #4]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f042 0220 	orr.w	r2, r2, #32
 800c722:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	685a      	ldr	r2, [r3, #4]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f042 0202 	orr.w	r2, r2, #2
 800c732:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2200      	movs	r2, #0
 800c738:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c73c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3718      	adds	r7, #24
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	0800cf07 	.word	0x0800cf07
 800c74c:	0800cd29 	.word	0x0800cd29
 800c750:	0800cf5b 	.word	0x0800cf5b

0800c754 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b086      	sub	sp, #24
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	4613      	mov	r3, r2
 800c760:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c762:	2300      	movs	r3, #0
 800c764:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d002      	beq.n	800c778 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800c772:	2302      	movs	r3, #2
 800c774:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c776:	e0fe      	b.n	800c976 <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	689b      	ldr	r3, [r3, #8]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d110      	bne.n	800c7a2 <HAL_SPI_Receive_DMA+0x4e>
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c788:	d10b      	bne.n	800c7a2 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2204      	movs	r2, #4
 800c78e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800c792:	88fb      	ldrh	r3, [r7, #6]
 800c794:	68ba      	ldr	r2, [r7, #8]
 800c796:	68b9      	ldr	r1, [r7, #8]
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f000 f8fb 	bl	800c994 <HAL_SPI_TransmitReceive_DMA>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	e0ee      	b.n	800c980 <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d101      	bne.n	800c7b0 <HAL_SPI_Receive_DMA+0x5c>
 800c7ac:	2302      	movs	r3, #2
 800c7ae:	e0e7      	b.n	800c980 <HAL_SPI_Receive_DMA+0x22c>
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d002      	beq.n	800c7c4 <HAL_SPI_Receive_DMA+0x70>
 800c7be:	88fb      	ldrh	r3, [r7, #6]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d102      	bne.n	800c7ca <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c7c8:	e0d5      	b.n	800c976 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2204      	movs	r2, #4
 800c7ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	88fa      	ldrh	r2, [r7, #6]
 800c7e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	88fa      	ldrh	r2, [r7, #6]
 800c7ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2200      	movs	r2, #0
 800c804:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	689b      	ldr	r3, [r3, #8]
 800c80a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c80e:	d10f      	bne.n	800c830 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	681a      	ldr	r2, [r3, #0]
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c81e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	681a      	ldr	r2, [r3, #0]
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c82e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	685a      	ldr	r2, [r3, #4]
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c83e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c848:	d908      	bls.n	800c85c <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	685a      	ldr	r2, [r3, #4]
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c858:	605a      	str	r2, [r3, #4]
 800c85a:	e042      	b.n	800c8e2 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	685a      	ldr	r2, [r3, #4]
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c86a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c870:	699b      	ldr	r3, [r3, #24]
 800c872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c876:	d134      	bne.n	800c8e2 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	685a      	ldr	r2, [r3, #4]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c886:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c88e:	b29b      	uxth	r3, r3
 800c890:	f003 0301 	and.w	r3, r3, #1
 800c894:	2b00      	cmp	r3, #0
 800c896:	d111      	bne.n	800c8bc <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	685a      	ldr	r2, [r3, #4]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c8a6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	085b      	lsrs	r3, r3, #1
 800c8b2:	b29a      	uxth	r2, r3
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c8ba:	e012      	b.n	800c8e2 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	685a      	ldr	r2, [r3, #4]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c8ca:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	085b      	lsrs	r3, r3, #1
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	3301      	adds	r3, #1
 800c8da:	b29a      	uxth	r2, r3
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8e6:	4a28      	ldr	r2, [pc, #160]	; (800c988 <HAL_SPI_Receive_DMA+0x234>)
 800c8e8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8ee:	4a27      	ldr	r2, [pc, #156]	; (800c98c <HAL_SPI_Receive_DMA+0x238>)
 800c8f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8f6:	4a26      	ldr	r2, [pc, #152]	; (800c990 <HAL_SPI_Receive_DMA+0x23c>)
 800c8f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8fe:	2200      	movs	r2, #0
 800c900:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	330c      	adds	r3, #12
 800c90c:	4619      	mov	r1, r3
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c912:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c91a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c91c:	f7fa ffb1 	bl	8007882 <HAL_DMA_Start_IT>
 800c920:	4603      	mov	r3, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	d008      	beq.n	800c938 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c92a:	f043 0210 	orr.w	r2, r3, #16
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c932:	2301      	movs	r3, #1
 800c934:	75fb      	strb	r3, [r7, #23]

    goto error;
 800c936:	e01e      	b.n	800c976 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c942:	2b40      	cmp	r3, #64	; 0x40
 800c944:	d007      	beq.n	800c956 <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c954:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f042 0220 	orr.w	r2, r2, #32
 800c964:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	685a      	ldr	r2, [r3, #4]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f042 0201 	orr.w	r2, r2, #1
 800c974:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2200      	movs	r2, #0
 800c97a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c97e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c980:	4618      	mov	r0, r3
 800c982:	3718      	adds	r7, #24
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	0800cf23 	.word	0x0800cf23
 800c98c:	0800cdcf 	.word	0x0800cdcf
 800c990:	0800cf5b 	.word	0x0800cf5b

0800c994 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b086      	sub	sp, #24
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	607a      	str	r2, [r7, #4]
 800c9a0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d101      	bne.n	800c9b4 <HAL_SPI_TransmitReceive_DMA+0x20>
 800c9b0:	2302      	movs	r3, #2
 800c9b2:	e164      	b.n	800cc7e <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c9c2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800c9ca:	7dbb      	ldrb	r3, [r7, #22]
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d00d      	beq.n	800c9ec <HAL_SPI_TransmitReceive_DMA+0x58>
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c9d6:	d106      	bne.n	800c9e6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	689b      	ldr	r3, [r3, #8]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d102      	bne.n	800c9e6 <HAL_SPI_TransmitReceive_DMA+0x52>
 800c9e0:	7dbb      	ldrb	r3, [r7, #22]
 800c9e2:	2b04      	cmp	r3, #4
 800c9e4:	d002      	beq.n	800c9ec <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800c9e6:	2302      	movs	r3, #2
 800c9e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c9ea:	e143      	b.n	800cc74 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d005      	beq.n	800c9fe <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d002      	beq.n	800c9fe <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c9f8:	887b      	ldrh	r3, [r7, #2]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d102      	bne.n	800ca04 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ca02:	e137      	b.n	800cc74 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	2b04      	cmp	r3, #4
 800ca0e:	d003      	beq.n	800ca18 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2205      	movs	r2, #5
 800ca14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	68ba      	ldr	r2, [r7, #8]
 800ca22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	887a      	ldrh	r2, [r7, #2]
 800ca28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	887a      	ldrh	r2, [r7, #2]
 800ca2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	887a      	ldrh	r2, [r7, #2]
 800ca3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	887a      	ldrh	r2, [r7, #2]
 800ca42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	685a      	ldr	r2, [r3, #4]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800ca60:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	68db      	ldr	r3, [r3, #12]
 800ca66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ca6a:	d908      	bls.n	800ca7e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	685a      	ldr	r2, [r3, #4]
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ca7a:	605a      	str	r2, [r3, #4]
 800ca7c:	e06f      	b.n	800cb5e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	685a      	ldr	r2, [r3, #4]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ca8c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca92:	699b      	ldr	r3, [r3, #24]
 800ca94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca98:	d126      	bne.n	800cae8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ca9e:	f003 0301 	and.w	r3, r3, #1
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d10f      	bne.n	800cac6 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	685a      	ldr	r2, [r3, #4]
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cab4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800caba:	b29b      	uxth	r3, r3
 800cabc:	085b      	lsrs	r3, r3, #1
 800cabe:	b29a      	uxth	r2, r3
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cac4:	e010      	b.n	800cae8 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	685a      	ldr	r2, [r3, #4]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cad4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cada:	b29b      	uxth	r3, r3
 800cadc:	085b      	lsrs	r3, r3, #1
 800cade:	b29b      	uxth	r3, r3
 800cae0:	3301      	adds	r3, #1
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caec:	699b      	ldr	r3, [r3, #24]
 800caee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800caf2:	d134      	bne.n	800cb5e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	685a      	ldr	r2, [r3, #4]
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cb02:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	f003 0301 	and.w	r3, r3, #1
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d111      	bne.n	800cb38 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	685a      	ldr	r2, [r3, #4]
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cb22:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	085b      	lsrs	r3, r3, #1
 800cb2e:	b29a      	uxth	r2, r3
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800cb36:	e012      	b.n	800cb5e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	685a      	ldr	r2, [r3, #4]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cb46:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	085b      	lsrs	r3, r3, #1
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	3301      	adds	r3, #1
 800cb56:	b29a      	uxth	r2, r3
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	2b04      	cmp	r3, #4
 800cb68:	d108      	bne.n	800cb7c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb6e:	4a46      	ldr	r2, [pc, #280]	; (800cc88 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 800cb70:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb76:	4a45      	ldr	r2, [pc, #276]	; (800cc8c <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800cb78:	62da      	str	r2, [r3, #44]	; 0x2c
 800cb7a:	e007      	b.n	800cb8c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb80:	4a43      	ldr	r2, [pc, #268]	; (800cc90 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800cb82:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb88:	4a42      	ldr	r2, [pc, #264]	; (800cc94 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800cb8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb90:	4a41      	ldr	r2, [pc, #260]	; (800cc98 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800cb92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb98:	2200      	movs	r2, #0
 800cb9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	330c      	adds	r3, #12
 800cba6:	4619      	mov	r1, r3
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbac:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cbb4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cbb6:	f7fa fe64 	bl	8007882 <HAL_DMA_Start_IT>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d008      	beq.n	800cbd2 <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbc4:	f043 0210 	orr.w	r2, r3, #16
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	75fb      	strb	r3, [r7, #23]

    goto error;
 800cbd0:	e050      	b.n	800cc74 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	685a      	ldr	r2, [r3, #4]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f042 0201 	orr.w	r2, r2, #1
 800cbe0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbee:	2200      	movs	r2, #0
 800cbf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbfe:	2200      	movs	r2, #0
 800cc00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	330c      	adds	r3, #12
 800cc12:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc18:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cc1a:	f7fa fe32 	bl	8007882 <HAL_DMA_Start_IT>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d008      	beq.n	800cc36 <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc28:	f043 0210 	orr.w	r2, r3, #16
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cc30:	2301      	movs	r3, #1
 800cc32:	75fb      	strb	r3, [r7, #23]

    goto error;
 800cc34:	e01e      	b.n	800cc74 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc40:	2b40      	cmp	r3, #64	; 0x40
 800cc42:	d007      	beq.n	800cc54 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	681a      	ldr	r2, [r3, #0]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc52:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	685a      	ldr	r2, [r3, #4]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f042 0220 	orr.w	r2, r2, #32
 800cc62:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	685a      	ldr	r2, [r3, #4]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f042 0202 	orr.w	r2, r2, #2
 800cc72:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2200      	movs	r2, #0
 800cc78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cc7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3718      	adds	r7, #24
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	0800cf23 	.word	0x0800cf23
 800cc8c:	0800cdcf 	.word	0x0800cdcf
 800cc90:	0800cf3f 	.word	0x0800cf3f
 800cc94:	0800ce77 	.word	0x0800ce77
 800cc98:	0800cf5b 	.word	0x0800cf5b

0800cc9c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cca4:	bf00      	nop
 800cca6:	370c      	adds	r7, #12
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b083      	sub	sp, #12
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ccb8:	bf00      	nop
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800cccc:	bf00      	nop
 800ccce:	370c      	adds	r7, #12
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr

0800ccd8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b083      	sub	sp, #12
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800cce0:	bf00      	nop
 800cce2:	370c      	adds	r7, #12
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ccf4:	bf00      	nop
 800ccf6:	370c      	adds	r7, #12
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr

0800cd00 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b083      	sub	sp, #12
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800cd08:	bf00      	nop
 800cd0a:	370c      	adds	r7, #12
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cd14:	b480      	push	{r7}
 800cd16:	b083      	sub	sp, #12
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cd1c:	bf00      	nop
 800cd1e:	370c      	adds	r7, #12
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b086      	sub	sp, #24
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd34:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cd36:	f7f9 fbe7 	bl	8006508 <HAL_GetTick>
 800cd3a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f003 0320 	and.w	r3, r3, #32
 800cd46:	2b20      	cmp	r3, #32
 800cd48:	d03b      	beq.n	800cdc2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	685a      	ldr	r2, [r3, #4]
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f022 0220 	bic.w	r2, r2, #32
 800cd58:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	685a      	ldr	r2, [r3, #4]
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f022 0202 	bic.w	r2, r2, #2
 800cd68:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cd6a:	693a      	ldr	r2, [r7, #16]
 800cd6c:	2164      	movs	r1, #100	; 0x64
 800cd6e:	6978      	ldr	r0, [r7, #20]
 800cd70:	f000 fa8a 	bl	800d288 <SPI_EndRxTxTransaction>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d005      	beq.n	800cd86 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd7e:	f043 0220 	orr.w	r2, r3, #32
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d10a      	bne.n	800cda4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cd8e:	2300      	movs	r3, #0
 800cd90:	60fb      	str	r3, [r7, #12]
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	68db      	ldr	r3, [r3, #12]
 800cd98:	60fb      	str	r3, [r7, #12]
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	689b      	ldr	r3, [r3, #8]
 800cda0:	60fb      	str	r3, [r7, #12]
 800cda2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	2200      	movs	r2, #0
 800cda8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	2201      	movs	r2, #1
 800cdae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d003      	beq.n	800cdc2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cdba:	6978      	ldr	r0, [r7, #20]
 800cdbc:	f7ff ffaa 	bl	800cd14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cdc0:	e002      	b.n	800cdc8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800cdc2:	6978      	ldr	r0, [r7, #20]
 800cdc4:	f7ff ff6a 	bl	800cc9c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cdc8:	3718      	adds	r7, #24
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b084      	sub	sp, #16
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdda:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cddc:	f7f9 fb94 	bl	8006508 <HAL_GetTick>
 800cde0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f003 0320 	and.w	r3, r3, #32
 800cdec:	2b20      	cmp	r3, #32
 800cdee:	d03c      	beq.n	800ce6a <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	685a      	ldr	r2, [r3, #4]
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f022 0220 	bic.w	r2, r2, #32
 800cdfe:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d10d      	bne.n	800ce24 <SPI_DMAReceiveCplt+0x56>
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ce10:	d108      	bne.n	800ce24 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	685a      	ldr	r2, [r3, #4]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f022 0203 	bic.w	r2, r2, #3
 800ce20:	605a      	str	r2, [r3, #4]
 800ce22:	e007      	b.n	800ce34 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	685a      	ldr	r2, [r3, #4]
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f022 0201 	bic.w	r2, r2, #1
 800ce32:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ce34:	68ba      	ldr	r2, [r7, #8]
 800ce36:	2164      	movs	r1, #100	; 0x64
 800ce38:	68f8      	ldr	r0, [r7, #12]
 800ce3a:	f000 f9cd 	bl	800d1d8 <SPI_EndRxTransaction>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d002      	beq.n	800ce4a <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2220      	movs	r2, #32
 800ce48:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2201      	movs	r2, #1
 800ce56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d003      	beq.n	800ce6a <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	f7ff ff56 	bl	800cd14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ce68:	e002      	b.n	800ce70 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	f7ff ff20 	bl	800ccb0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b084      	sub	sp, #16
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce82:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ce84:	f7f9 fb40 	bl	8006508 <HAL_GetTick>
 800ce88:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f003 0320 	and.w	r3, r3, #32
 800ce94:	2b20      	cmp	r3, #32
 800ce96:	d030      	beq.n	800cefa <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	685a      	ldr	r2, [r3, #4]
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f022 0220 	bic.w	r2, r2, #32
 800cea6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cea8:	68ba      	ldr	r2, [r7, #8]
 800ceaa:	2164      	movs	r1, #100	; 0x64
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f000 f9eb 	bl	800d288 <SPI_EndRxTxTransaction>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d005      	beq.n	800cec4 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cebc:	f043 0220 	orr.w	r2, r3, #32
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	685a      	ldr	r2, [r3, #4]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f022 0203 	bic.w	r2, r2, #3
 800ced2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2200      	movs	r2, #0
 800ced8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2200      	movs	r2, #0
 800cede:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2201      	movs	r2, #1
 800cee6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d003      	beq.n	800cefa <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cef2:	68f8      	ldr	r0, [r7, #12]
 800cef4:	f7ff ff0e 	bl	800cd14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cef8:	e002      	b.n	800cf00 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800cefa:	68f8      	ldr	r0, [r7, #12]
 800cefc:	f7ff fee2 	bl	800ccc4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cf00:	3710      	adds	r7, #16
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cf06:	b580      	push	{r7, lr}
 800cf08:	b084      	sub	sp, #16
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf12:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f7ff fedf 	bl	800ccd8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cf1a:	bf00      	nop
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}

0800cf22 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b084      	sub	sp, #16
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf2e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800cf30:	68f8      	ldr	r0, [r7, #12]
 800cf32:	f7ff fedb 	bl	800ccec <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cf36:	bf00      	nop
 800cf38:	3710      	adds	r7, #16
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}

0800cf3e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b084      	sub	sp, #16
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf4a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f7ff fed7 	bl	800cd00 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cf52:	bf00      	nop
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b084      	sub	sp, #16
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf66:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	685a      	ldr	r2, [r3, #4]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f022 0203 	bic.w	r2, r2, #3
 800cf76:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf7c:	f043 0210 	orr.w	r2, r3, #16
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2201      	movs	r2, #1
 800cf88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cf8c:	68f8      	ldr	r0, [r7, #12]
 800cf8e:	f7ff fec1 	bl	800cd14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cf92:	bf00      	nop
 800cf94:	3710      	adds	r7, #16
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
	...

0800cf9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b088      	sub	sp, #32
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	60b9      	str	r1, [r7, #8]
 800cfa6:	603b      	str	r3, [r7, #0]
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cfac:	f7f9 faac 	bl	8006508 <HAL_GetTick>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb4:	1a9b      	subs	r3, r3, r2
 800cfb6:	683a      	ldr	r2, [r7, #0]
 800cfb8:	4413      	add	r3, r2
 800cfba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cfbc:	f7f9 faa4 	bl	8006508 <HAL_GetTick>
 800cfc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cfc2:	4b39      	ldr	r3, [pc, #228]	; (800d0a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	015b      	lsls	r3, r3, #5
 800cfc8:	0d1b      	lsrs	r3, r3, #20
 800cfca:	69fa      	ldr	r2, [r7, #28]
 800cfcc:	fb02 f303 	mul.w	r3, r2, r3
 800cfd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cfd2:	e054      	b.n	800d07e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfda:	d050      	beq.n	800d07e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cfdc:	f7f9 fa94 	bl	8006508 <HAL_GetTick>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	69bb      	ldr	r3, [r7, #24]
 800cfe4:	1ad3      	subs	r3, r2, r3
 800cfe6:	69fa      	ldr	r2, [r7, #28]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d902      	bls.n	800cff2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d13d      	bne.n	800d06e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	685a      	ldr	r2, [r3, #4]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d00a:	d111      	bne.n	800d030 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d014:	d004      	beq.n	800d020 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	689b      	ldr	r3, [r3, #8]
 800d01a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d01e:	d107      	bne.n	800d030 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d02e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d038:	d10f      	bne.n	800d05a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	681a      	ldr	r2, [r3, #0]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d048:	601a      	str	r2, [r3, #0]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	681a      	ldr	r2, [r3, #0]
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d058:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2201      	movs	r2, #1
 800d05e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2200      	movs	r2, #0
 800d066:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d06a:	2303      	movs	r3, #3
 800d06c:	e017      	b.n	800d09e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d101      	bne.n	800d078 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d074:	2300      	movs	r3, #0
 800d076:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	3b01      	subs	r3, #1
 800d07c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	689a      	ldr	r2, [r3, #8]
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	4013      	ands	r3, r2
 800d088:	68ba      	ldr	r2, [r7, #8]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	bf0c      	ite	eq
 800d08e:	2301      	moveq	r3, #1
 800d090:	2300      	movne	r3, #0
 800d092:	b2db      	uxtb	r3, r3
 800d094:	461a      	mov	r2, r3
 800d096:	79fb      	ldrb	r3, [r7, #7]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d19b      	bne.n	800cfd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d09c:	2300      	movs	r3, #0
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3720      	adds	r7, #32
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	20000020 	.word	0x20000020

0800d0ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b08a      	sub	sp, #40	; 0x28
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	60b9      	str	r1, [r7, #8]
 800d0b6:	607a      	str	r2, [r7, #4]
 800d0b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d0be:	f7f9 fa23 	bl	8006508 <HAL_GetTick>
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c6:	1a9b      	subs	r3, r3, r2
 800d0c8:	683a      	ldr	r2, [r7, #0]
 800d0ca:	4413      	add	r3, r2
 800d0cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800d0ce:	f7f9 fa1b 	bl	8006508 <HAL_GetTick>
 800d0d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	330c      	adds	r3, #12
 800d0da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d0dc:	4b3d      	ldr	r3, [pc, #244]	; (800d1d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	009b      	lsls	r3, r3, #2
 800d0e4:	4413      	add	r3, r2
 800d0e6:	00da      	lsls	r2, r3, #3
 800d0e8:	1ad3      	subs	r3, r2, r3
 800d0ea:	0d1b      	lsrs	r3, r3, #20
 800d0ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ee:	fb02 f303 	mul.w	r3, r2, r3
 800d0f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d0f4:	e060      	b.n	800d1b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d0fc:	d107      	bne.n	800d10e <SPI_WaitFifoStateUntilTimeout+0x62>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d104      	bne.n	800d10e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	b2db      	uxtb	r3, r3
 800d10a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d10c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d114:	d050      	beq.n	800d1b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d116:	f7f9 f9f7 	bl	8006508 <HAL_GetTick>
 800d11a:	4602      	mov	r2, r0
 800d11c:	6a3b      	ldr	r3, [r7, #32]
 800d11e:	1ad3      	subs	r3, r2, r3
 800d120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d122:	429a      	cmp	r2, r3
 800d124:	d902      	bls.n	800d12c <SPI_WaitFifoStateUntilTimeout+0x80>
 800d126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d13d      	bne.n	800d1a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	685a      	ldr	r2, [r3, #4]
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d13a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d144:	d111      	bne.n	800d16a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	689b      	ldr	r3, [r3, #8]
 800d14a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d14e:	d004      	beq.n	800d15a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	689b      	ldr	r3, [r3, #8]
 800d154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d158:	d107      	bne.n	800d16a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d168:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d16e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d172:	d10f      	bne.n	800d194 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d182:	601a      	str	r2, [r3, #0]
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d192:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d1a4:	2303      	movs	r3, #3
 800d1a6:	e010      	b.n	800d1ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d101      	bne.n	800d1b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800d1b2:	69bb      	ldr	r3, [r7, #24]
 800d1b4:	3b01      	subs	r3, #1
 800d1b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	689a      	ldr	r2, [r3, #8]
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	4013      	ands	r3, r2
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d196      	bne.n	800d0f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d1c8:	2300      	movs	r3, #0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3728      	adds	r7, #40	; 0x28
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	20000020 	.word	0x20000020

0800d1d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b086      	sub	sp, #24
 800d1dc:	af02      	add	r7, sp, #8
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d1ec:	d111      	bne.n	800d212 <SPI_EndRxTransaction+0x3a>
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1f6:	d004      	beq.n	800d202 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d200:	d107      	bne.n	800d212 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	681a      	ldr	r2, [r3, #0]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d210:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	9300      	str	r3, [sp, #0]
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	2200      	movs	r2, #0
 800d21a:	2180      	movs	r1, #128	; 0x80
 800d21c:	68f8      	ldr	r0, [r7, #12]
 800d21e:	f7ff febd 	bl	800cf9c <SPI_WaitFlagStateUntilTimeout>
 800d222:	4603      	mov	r3, r0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d007      	beq.n	800d238 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d22c:	f043 0220 	orr.w	r2, r3, #32
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d234:	2303      	movs	r3, #3
 800d236:	e023      	b.n	800d280 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d240:	d11d      	bne.n	800d27e <SPI_EndRxTransaction+0xa6>
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	689b      	ldr	r3, [r3, #8]
 800d246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d24a:	d004      	beq.n	800d256 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d254:	d113      	bne.n	800d27e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	9300      	str	r3, [sp, #0]
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	2200      	movs	r2, #0
 800d25e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d262:	68f8      	ldr	r0, [r7, #12]
 800d264:	f7ff ff22 	bl	800d0ac <SPI_WaitFifoStateUntilTimeout>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d007      	beq.n	800d27e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d272:	f043 0220 	orr.w	r2, r3, #32
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800d27a:	2303      	movs	r3, #3
 800d27c:	e000      	b.n	800d280 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800d27e:	2300      	movs	r3, #0
}
 800d280:	4618      	mov	r0, r3
 800d282:	3710      	adds	r7, #16
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b086      	sub	sp, #24
 800d28c:	af02      	add	r7, sp, #8
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	9300      	str	r3, [sp, #0]
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	2200      	movs	r2, #0
 800d29c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d2a0:	68f8      	ldr	r0, [r7, #12]
 800d2a2:	f7ff ff03 	bl	800d0ac <SPI_WaitFifoStateUntilTimeout>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d007      	beq.n	800d2bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2b0:	f043 0220 	orr.w	r2, r3, #32
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d2b8:	2303      	movs	r3, #3
 800d2ba:	e027      	b.n	800d30c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	9300      	str	r3, [sp, #0]
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	2180      	movs	r1, #128	; 0x80
 800d2c6:	68f8      	ldr	r0, [r7, #12]
 800d2c8:	f7ff fe68 	bl	800cf9c <SPI_WaitFlagStateUntilTimeout>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d007      	beq.n	800d2e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2d6:	f043 0220 	orr.w	r2, r3, #32
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d2de:	2303      	movs	r3, #3
 800d2e0:	e014      	b.n	800d30c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	9300      	str	r3, [sp, #0]
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d2ee:	68f8      	ldr	r0, [r7, #12]
 800d2f0:	f7ff fedc 	bl	800d0ac <SPI_WaitFifoStateUntilTimeout>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d007      	beq.n	800d30a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2fe:	f043 0220 	orr.w	r2, r3, #32
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d306:	2303      	movs	r3, #3
 800d308:	e000      	b.n	800d30c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d30a:	2300      	movs	r3, #0
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3710      	adds	r7, #16
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d101      	bne.n	800d326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d322:	2301      	movs	r3, #1
 800d324:	e049      	b.n	800d3ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d106      	bne.n	800d340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2200      	movs	r2, #0
 800d336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f7f6 ff48 	bl	80041d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2202      	movs	r2, #2
 800d344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	3304      	adds	r3, #4
 800d350:	4619      	mov	r1, r3
 800d352:	4610      	mov	r0, r2
 800d354:	f000 fc16 	bl	800db84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2201      	movs	r2, #1
 800d35c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2201      	movs	r2, #1
 800d364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2201      	movs	r2, #1
 800d36c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2201      	movs	r2, #1
 800d374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2201      	movs	r2, #1
 800d37c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2201      	movs	r2, #1
 800d384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2201      	movs	r2, #1
 800d38c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2201      	movs	r2, #1
 800d394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2201      	movs	r2, #1
 800d39c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d3b8:	2300      	movs	r3, #0
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3708      	adds	r7, #8
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
	...

0800d3c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b085      	sub	sp, #20
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3d2:	b2db      	uxtb	r3, r3
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	d001      	beq.n	800d3dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	e04f      	b.n	800d47c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2202      	movs	r2, #2
 800d3e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	68da      	ldr	r2, [r3, #12]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f042 0201 	orr.w	r2, r2, #1
 800d3f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4a23      	ldr	r2, [pc, #140]	; (800d488 <HAL_TIM_Base_Start_IT+0xc4>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d01d      	beq.n	800d43a <HAL_TIM_Base_Start_IT+0x76>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d406:	d018      	beq.n	800d43a <HAL_TIM_Base_Start_IT+0x76>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4a1f      	ldr	r2, [pc, #124]	; (800d48c <HAL_TIM_Base_Start_IT+0xc8>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d013      	beq.n	800d43a <HAL_TIM_Base_Start_IT+0x76>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4a1e      	ldr	r2, [pc, #120]	; (800d490 <HAL_TIM_Base_Start_IT+0xcc>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d00e      	beq.n	800d43a <HAL_TIM_Base_Start_IT+0x76>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a1c      	ldr	r2, [pc, #112]	; (800d494 <HAL_TIM_Base_Start_IT+0xd0>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d009      	beq.n	800d43a <HAL_TIM_Base_Start_IT+0x76>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4a1b      	ldr	r2, [pc, #108]	; (800d498 <HAL_TIM_Base_Start_IT+0xd4>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d004      	beq.n	800d43a <HAL_TIM_Base_Start_IT+0x76>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a19      	ldr	r2, [pc, #100]	; (800d49c <HAL_TIM_Base_Start_IT+0xd8>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d115      	bne.n	800d466 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	689a      	ldr	r2, [r3, #8]
 800d440:	4b17      	ldr	r3, [pc, #92]	; (800d4a0 <HAL_TIM_Base_Start_IT+0xdc>)
 800d442:	4013      	ands	r3, r2
 800d444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2b06      	cmp	r3, #6
 800d44a:	d015      	beq.n	800d478 <HAL_TIM_Base_Start_IT+0xb4>
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d452:	d011      	beq.n	800d478 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	681a      	ldr	r2, [r3, #0]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f042 0201 	orr.w	r2, r2, #1
 800d462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d464:	e008      	b.n	800d478 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f042 0201 	orr.w	r2, r2, #1
 800d474:	601a      	str	r2, [r3, #0]
 800d476:	e000      	b.n	800d47a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d478:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d47a:	2300      	movs	r3, #0
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3714      	adds	r7, #20
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr
 800d488:	40012c00 	.word	0x40012c00
 800d48c:	40000400 	.word	0x40000400
 800d490:	40000800 	.word	0x40000800
 800d494:	40000c00 	.word	0x40000c00
 800d498:	40013400 	.word	0x40013400
 800d49c:	40014000 	.word	0x40014000
 800d4a0:	00010007 	.word	0x00010007

0800d4a4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d101      	bne.n	800d4b6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	e049      	b.n	800d54a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d106      	bne.n	800d4d0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 f841 	bl	800d552 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2202      	movs	r2, #2
 800d4d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	3304      	adds	r3, #4
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	4610      	mov	r0, r2
 800d4e4:	f000 fb4e 	bl	800db84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2201      	movs	r2, #1
 800d504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2201      	movs	r2, #1
 800d50c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2201      	movs	r2, #1
 800d514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2201      	movs	r2, #1
 800d51c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2201      	movs	r2, #1
 800d524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2201      	movs	r2, #1
 800d52c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2201      	movs	r2, #1
 800d534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2201      	movs	r2, #1
 800d53c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2201      	movs	r2, #1
 800d544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d548:	2300      	movs	r3, #0
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3708      	adds	r7, #8
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}

0800d552 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800d552:	b480      	push	{r7}
 800d554:	b083      	sub	sp, #12
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800d55a:	bf00      	nop
 800d55c:	370c      	adds	r7, #12
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr

0800d566 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b082      	sub	sp, #8
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d101      	bne.n	800d578 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d574:	2301      	movs	r3, #1
 800d576:	e049      	b.n	800d60c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	2b00      	cmp	r3, #0
 800d582:	d106      	bne.n	800d592 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f7f6 fd69 	bl	8004064 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2202      	movs	r2, #2
 800d596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681a      	ldr	r2, [r3, #0]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	3304      	adds	r3, #4
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	4610      	mov	r0, r2
 800d5a6:	f000 faed 	bl	800db84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2201      	movs	r2, #1
 800d5be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2201      	movs	r2, #1
 800d5de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2201      	movs	r2, #1
 800d606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d60a:	2300      	movs	r3, #0
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3708      	adds	r7, #8
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	691b      	ldr	r3, [r3, #16]
 800d62a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	f003 0302 	and.w	r3, r3, #2
 800d632:	2b00      	cmp	r3, #0
 800d634:	d020      	beq.n	800d678 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	f003 0302 	and.w	r3, r3, #2
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d01b      	beq.n	800d678 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f06f 0202 	mvn.w	r2, #2
 800d648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2201      	movs	r2, #1
 800d64e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	699b      	ldr	r3, [r3, #24]
 800d656:	f003 0303 	and.w	r3, r3, #3
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d003      	beq.n	800d666 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 fa72 	bl	800db48 <HAL_TIM_IC_CaptureCallback>
 800d664:	e005      	b.n	800d672 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 fa64 	bl	800db34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 fa75 	bl	800db5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	f003 0304 	and.w	r3, r3, #4
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d020      	beq.n	800d6c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f003 0304 	and.w	r3, r3, #4
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d01b      	beq.n	800d6c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	f06f 0204 	mvn.w	r2, #4
 800d694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2202      	movs	r2, #2
 800d69a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	699b      	ldr	r3, [r3, #24]
 800d6a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d003      	beq.n	800d6b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 fa4c 	bl	800db48 <HAL_TIM_IC_CaptureCallback>
 800d6b0:	e005      	b.n	800d6be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 fa3e 	bl	800db34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f000 fa4f 	bl	800db5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	f003 0308 	and.w	r3, r3, #8
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d020      	beq.n	800d710 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	f003 0308 	and.w	r3, r3, #8
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d01b      	beq.n	800d710 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f06f 0208 	mvn.w	r2, #8
 800d6e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2204      	movs	r2, #4
 800d6e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	69db      	ldr	r3, [r3, #28]
 800d6ee:	f003 0303 	and.w	r3, r3, #3
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d003      	beq.n	800d6fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 fa26 	bl	800db48 <HAL_TIM_IC_CaptureCallback>
 800d6fc:	e005      	b.n	800d70a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f000 fa18 	bl	800db34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 fa29 	bl	800db5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	f003 0310 	and.w	r3, r3, #16
 800d716:	2b00      	cmp	r3, #0
 800d718:	d020      	beq.n	800d75c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	f003 0310 	and.w	r3, r3, #16
 800d720:	2b00      	cmp	r3, #0
 800d722:	d01b      	beq.n	800d75c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f06f 0210 	mvn.w	r2, #16
 800d72c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2208      	movs	r2, #8
 800d732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	69db      	ldr	r3, [r3, #28]
 800d73a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d003      	beq.n	800d74a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f000 fa00 	bl	800db48 <HAL_TIM_IC_CaptureCallback>
 800d748:	e005      	b.n	800d756 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f000 f9f2 	bl	800db34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 fa03 	bl	800db5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2200      	movs	r2, #0
 800d75a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	f003 0301 	and.w	r3, r3, #1
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00c      	beq.n	800d780 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f003 0301 	and.w	r3, r3, #1
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d007      	beq.n	800d780 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f06f 0201 	mvn.w	r2, #1
 800d778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f7f6 f926 	bl	80039cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00c      	beq.n	800d7a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d790:	2b00      	cmp	r3, #0
 800d792:	d007      	beq.n	800d7a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d79c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f000 ff36 	bl	800e610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d00c      	beq.n	800d7c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d007      	beq.n	800d7c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d7c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 ff2e 	bl	800e624 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d00c      	beq.n	800d7ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d007      	beq.n	800d7ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d7e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 f9c2 	bl	800db70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	f003 0320 	and.w	r3, r3, #32
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d00c      	beq.n	800d810 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f003 0320 	and.w	r3, r3, #32
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d007      	beq.n	800d810 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f06f 0220 	mvn.w	r2, #32
 800d808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f000 fef6 	bl	800e5fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d810:	bf00      	nop
 800d812:	3710      	adds	r7, #16
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d824:	2300      	movs	r3, #0
 800d826:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d101      	bne.n	800d836 <HAL_TIM_OC_ConfigChannel+0x1e>
 800d832:	2302      	movs	r3, #2
 800d834:	e066      	b.n	800d904 <HAL_TIM_OC_ConfigChannel+0xec>
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2201      	movs	r2, #1
 800d83a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2b14      	cmp	r3, #20
 800d842:	d857      	bhi.n	800d8f4 <HAL_TIM_OC_ConfigChannel+0xdc>
 800d844:	a201      	add	r2, pc, #4	; (adr r2, 800d84c <HAL_TIM_OC_ConfigChannel+0x34>)
 800d846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d84a:	bf00      	nop
 800d84c:	0800d8a1 	.word	0x0800d8a1
 800d850:	0800d8f5 	.word	0x0800d8f5
 800d854:	0800d8f5 	.word	0x0800d8f5
 800d858:	0800d8f5 	.word	0x0800d8f5
 800d85c:	0800d8af 	.word	0x0800d8af
 800d860:	0800d8f5 	.word	0x0800d8f5
 800d864:	0800d8f5 	.word	0x0800d8f5
 800d868:	0800d8f5 	.word	0x0800d8f5
 800d86c:	0800d8bd 	.word	0x0800d8bd
 800d870:	0800d8f5 	.word	0x0800d8f5
 800d874:	0800d8f5 	.word	0x0800d8f5
 800d878:	0800d8f5 	.word	0x0800d8f5
 800d87c:	0800d8cb 	.word	0x0800d8cb
 800d880:	0800d8f5 	.word	0x0800d8f5
 800d884:	0800d8f5 	.word	0x0800d8f5
 800d888:	0800d8f5 	.word	0x0800d8f5
 800d88c:	0800d8d9 	.word	0x0800d8d9
 800d890:	0800d8f5 	.word	0x0800d8f5
 800d894:	0800d8f5 	.word	0x0800d8f5
 800d898:	0800d8f5 	.word	0x0800d8f5
 800d89c:	0800d8e7 	.word	0x0800d8e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	68b9      	ldr	r1, [r7, #8]
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f000 fa06 	bl	800dcb8 <TIM_OC1_SetConfig>
      break;
 800d8ac:	e025      	b.n	800d8fa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	68b9      	ldr	r1, [r7, #8]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f000 fa8f 	bl	800ddd8 <TIM_OC2_SetConfig>
      break;
 800d8ba:	e01e      	b.n	800d8fa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	68b9      	ldr	r1, [r7, #8]
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f000 fb12 	bl	800deec <TIM_OC3_SetConfig>
      break;
 800d8c8:	e017      	b.n	800d8fa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	68b9      	ldr	r1, [r7, #8]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f000 fb93 	bl	800dffc <TIM_OC4_SetConfig>
      break;
 800d8d6:	e010      	b.n	800d8fa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	68b9      	ldr	r1, [r7, #8]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f000 fbf6 	bl	800e0d0 <TIM_OC5_SetConfig>
      break;
 800d8e4:	e009      	b.n	800d8fa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	68b9      	ldr	r1, [r7, #8]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f000 fc53 	bl	800e198 <TIM_OC6_SetConfig>
      break;
 800d8f2:	e002      	b.n	800d8fa <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	75fb      	strb	r3, [r7, #23]
      break;
 800d8f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d902:	7dfb      	ldrb	r3, [r7, #23]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3718      	adds	r7, #24
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d918:	2300      	movs	r3, #0
 800d91a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d922:	2b01      	cmp	r3, #1
 800d924:	d101      	bne.n	800d92a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d926:	2302      	movs	r3, #2
 800d928:	e0ff      	b.n	800db2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2201      	movs	r2, #1
 800d92e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2b14      	cmp	r3, #20
 800d936:	f200 80f0 	bhi.w	800db1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d93a:	a201      	add	r2, pc, #4	; (adr r2, 800d940 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d940:	0800d995 	.word	0x0800d995
 800d944:	0800db1b 	.word	0x0800db1b
 800d948:	0800db1b 	.word	0x0800db1b
 800d94c:	0800db1b 	.word	0x0800db1b
 800d950:	0800d9d5 	.word	0x0800d9d5
 800d954:	0800db1b 	.word	0x0800db1b
 800d958:	0800db1b 	.word	0x0800db1b
 800d95c:	0800db1b 	.word	0x0800db1b
 800d960:	0800da17 	.word	0x0800da17
 800d964:	0800db1b 	.word	0x0800db1b
 800d968:	0800db1b 	.word	0x0800db1b
 800d96c:	0800db1b 	.word	0x0800db1b
 800d970:	0800da57 	.word	0x0800da57
 800d974:	0800db1b 	.word	0x0800db1b
 800d978:	0800db1b 	.word	0x0800db1b
 800d97c:	0800db1b 	.word	0x0800db1b
 800d980:	0800da99 	.word	0x0800da99
 800d984:	0800db1b 	.word	0x0800db1b
 800d988:	0800db1b 	.word	0x0800db1b
 800d98c:	0800db1b 	.word	0x0800db1b
 800d990:	0800dad9 	.word	0x0800dad9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	68b9      	ldr	r1, [r7, #8]
 800d99a:	4618      	mov	r0, r3
 800d99c:	f000 f98c 	bl	800dcb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	699a      	ldr	r2, [r3, #24]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f042 0208 	orr.w	r2, r2, #8
 800d9ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	699a      	ldr	r2, [r3, #24]
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f022 0204 	bic.w	r2, r2, #4
 800d9be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	6999      	ldr	r1, [r3, #24]
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	691a      	ldr	r2, [r3, #16]
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	430a      	orrs	r2, r1
 800d9d0:	619a      	str	r2, [r3, #24]
      break;
 800d9d2:	e0a5      	b.n	800db20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	68b9      	ldr	r1, [r7, #8]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f000 f9fc 	bl	800ddd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	699a      	ldr	r2, [r3, #24]
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	699a      	ldr	r2, [r3, #24]
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	6999      	ldr	r1, [r3, #24]
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	691b      	ldr	r3, [r3, #16]
 800da0a:	021a      	lsls	r2, r3, #8
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	430a      	orrs	r2, r1
 800da12:	619a      	str	r2, [r3, #24]
      break;
 800da14:	e084      	b.n	800db20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	68b9      	ldr	r1, [r7, #8]
 800da1c:	4618      	mov	r0, r3
 800da1e:	f000 fa65 	bl	800deec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	69da      	ldr	r2, [r3, #28]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f042 0208 	orr.w	r2, r2, #8
 800da30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	69da      	ldr	r2, [r3, #28]
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f022 0204 	bic.w	r2, r2, #4
 800da40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	69d9      	ldr	r1, [r3, #28]
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	691a      	ldr	r2, [r3, #16]
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	430a      	orrs	r2, r1
 800da52:	61da      	str	r2, [r3, #28]
      break;
 800da54:	e064      	b.n	800db20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	68b9      	ldr	r1, [r7, #8]
 800da5c:	4618      	mov	r0, r3
 800da5e:	f000 facd 	bl	800dffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	69da      	ldr	r2, [r3, #28]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	69da      	ldr	r2, [r3, #28]
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	69d9      	ldr	r1, [r3, #28]
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	691b      	ldr	r3, [r3, #16]
 800da8c:	021a      	lsls	r2, r3, #8
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	430a      	orrs	r2, r1
 800da94:	61da      	str	r2, [r3, #28]
      break;
 800da96:	e043      	b.n	800db20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	68b9      	ldr	r1, [r7, #8]
 800da9e:	4618      	mov	r0, r3
 800daa0:	f000 fb16 	bl	800e0d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	f042 0208 	orr.w	r2, r2, #8
 800dab2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	f022 0204 	bic.w	r2, r2, #4
 800dac2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	691a      	ldr	r2, [r3, #16]
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	430a      	orrs	r2, r1
 800dad4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dad6:	e023      	b.n	800db20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	68b9      	ldr	r1, [r7, #8]
 800dade:	4618      	mov	r0, r3
 800dae0:	f000 fb5a 	bl	800e198 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800daf2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	691b      	ldr	r3, [r3, #16]
 800db0e:	021a      	lsls	r2, r3, #8
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	430a      	orrs	r2, r1
 800db16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800db18:	e002      	b.n	800db20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800db1a:	2301      	movs	r3, #1
 800db1c:	75fb      	strb	r3, [r7, #23]
      break;
 800db1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2200      	movs	r2, #0
 800db24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800db28:	7dfb      	ldrb	r3, [r7, #23]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3718      	adds	r7, #24
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop

0800db34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800db3c:	bf00      	nop
 800db3e:	370c      	adds	r7, #12
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr

0800db48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800db50:	bf00      	nop
 800db52:	370c      	adds	r7, #12
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr

0800db5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b083      	sub	sp, #12
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800db64:	bf00      	nop
 800db66:	370c      	adds	r7, #12
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800db78:	bf00      	nop
 800db7a:	370c      	adds	r7, #12
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr

0800db84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800db84:	b480      	push	{r7}
 800db86:	b085      	sub	sp, #20
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	4a40      	ldr	r2, [pc, #256]	; (800dc98 <TIM_Base_SetConfig+0x114>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d013      	beq.n	800dbc4 <TIM_Base_SetConfig+0x40>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dba2:	d00f      	beq.n	800dbc4 <TIM_Base_SetConfig+0x40>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	4a3d      	ldr	r2, [pc, #244]	; (800dc9c <TIM_Base_SetConfig+0x118>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d00b      	beq.n	800dbc4 <TIM_Base_SetConfig+0x40>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	4a3c      	ldr	r2, [pc, #240]	; (800dca0 <TIM_Base_SetConfig+0x11c>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d007      	beq.n	800dbc4 <TIM_Base_SetConfig+0x40>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	4a3b      	ldr	r2, [pc, #236]	; (800dca4 <TIM_Base_SetConfig+0x120>)
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d003      	beq.n	800dbc4 <TIM_Base_SetConfig+0x40>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	4a3a      	ldr	r2, [pc, #232]	; (800dca8 <TIM_Base_SetConfig+0x124>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d108      	bne.n	800dbd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	68fa      	ldr	r2, [r7, #12]
 800dbd2:	4313      	orrs	r3, r2
 800dbd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	4a2f      	ldr	r2, [pc, #188]	; (800dc98 <TIM_Base_SetConfig+0x114>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d01f      	beq.n	800dc1e <TIM_Base_SetConfig+0x9a>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbe4:	d01b      	beq.n	800dc1e <TIM_Base_SetConfig+0x9a>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	4a2c      	ldr	r2, [pc, #176]	; (800dc9c <TIM_Base_SetConfig+0x118>)
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d017      	beq.n	800dc1e <TIM_Base_SetConfig+0x9a>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	4a2b      	ldr	r2, [pc, #172]	; (800dca0 <TIM_Base_SetConfig+0x11c>)
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d013      	beq.n	800dc1e <TIM_Base_SetConfig+0x9a>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	4a2a      	ldr	r2, [pc, #168]	; (800dca4 <TIM_Base_SetConfig+0x120>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d00f      	beq.n	800dc1e <TIM_Base_SetConfig+0x9a>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	4a29      	ldr	r2, [pc, #164]	; (800dca8 <TIM_Base_SetConfig+0x124>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d00b      	beq.n	800dc1e <TIM_Base_SetConfig+0x9a>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	4a28      	ldr	r2, [pc, #160]	; (800dcac <TIM_Base_SetConfig+0x128>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d007      	beq.n	800dc1e <TIM_Base_SetConfig+0x9a>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	4a27      	ldr	r2, [pc, #156]	; (800dcb0 <TIM_Base_SetConfig+0x12c>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d003      	beq.n	800dc1e <TIM_Base_SetConfig+0x9a>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	4a26      	ldr	r2, [pc, #152]	; (800dcb4 <TIM_Base_SetConfig+0x130>)
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d108      	bne.n	800dc30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	68db      	ldr	r3, [r3, #12]
 800dc2a:	68fa      	ldr	r2, [r7, #12]
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	695b      	ldr	r3, [r3, #20]
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	68fa      	ldr	r2, [r7, #12]
 800dc42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	689a      	ldr	r2, [r3, #8]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	681a      	ldr	r2, [r3, #0]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	4a10      	ldr	r2, [pc, #64]	; (800dc98 <TIM_Base_SetConfig+0x114>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d00f      	beq.n	800dc7c <TIM_Base_SetConfig+0xf8>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	4a12      	ldr	r2, [pc, #72]	; (800dca8 <TIM_Base_SetConfig+0x124>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d00b      	beq.n	800dc7c <TIM_Base_SetConfig+0xf8>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4a11      	ldr	r2, [pc, #68]	; (800dcac <TIM_Base_SetConfig+0x128>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d007      	beq.n	800dc7c <TIM_Base_SetConfig+0xf8>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	4a10      	ldr	r2, [pc, #64]	; (800dcb0 <TIM_Base_SetConfig+0x12c>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d003      	beq.n	800dc7c <TIM_Base_SetConfig+0xf8>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	4a0f      	ldr	r2, [pc, #60]	; (800dcb4 <TIM_Base_SetConfig+0x130>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d103      	bne.n	800dc84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	691a      	ldr	r2, [r3, #16]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2201      	movs	r2, #1
 800dc88:	615a      	str	r2, [r3, #20]
}
 800dc8a:	bf00      	nop
 800dc8c:	3714      	adds	r7, #20
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc94:	4770      	bx	lr
 800dc96:	bf00      	nop
 800dc98:	40012c00 	.word	0x40012c00
 800dc9c:	40000400 	.word	0x40000400
 800dca0:	40000800 	.word	0x40000800
 800dca4:	40000c00 	.word	0x40000c00
 800dca8:	40013400 	.word	0x40013400
 800dcac:	40014000 	.word	0x40014000
 800dcb0:	40014400 	.word	0x40014400
 800dcb4:	40014800 	.word	0x40014800

0800dcb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b087      	sub	sp, #28
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6a1b      	ldr	r3, [r3, #32]
 800dcc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6a1b      	ldr	r3, [r3, #32]
 800dccc:	f023 0201 	bic.w	r2, r3, #1
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	699b      	ldr	r3, [r3, #24]
 800dcde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f023 0303 	bic.w	r3, r3, #3
 800dcf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	68fa      	ldr	r2, [r7, #12]
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	f023 0302 	bic.w	r3, r3, #2
 800dd04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	697a      	ldr	r2, [r7, #20]
 800dd0c:	4313      	orrs	r3, r2
 800dd0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	4a2c      	ldr	r2, [pc, #176]	; (800ddc4 <TIM_OC1_SetConfig+0x10c>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d00f      	beq.n	800dd38 <TIM_OC1_SetConfig+0x80>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	4a2b      	ldr	r2, [pc, #172]	; (800ddc8 <TIM_OC1_SetConfig+0x110>)
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d00b      	beq.n	800dd38 <TIM_OC1_SetConfig+0x80>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	4a2a      	ldr	r2, [pc, #168]	; (800ddcc <TIM_OC1_SetConfig+0x114>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d007      	beq.n	800dd38 <TIM_OC1_SetConfig+0x80>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	4a29      	ldr	r2, [pc, #164]	; (800ddd0 <TIM_OC1_SetConfig+0x118>)
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d003      	beq.n	800dd38 <TIM_OC1_SetConfig+0x80>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	4a28      	ldr	r2, [pc, #160]	; (800ddd4 <TIM_OC1_SetConfig+0x11c>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d10c      	bne.n	800dd52 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	f023 0308 	bic.w	r3, r3, #8
 800dd3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	697a      	ldr	r2, [r7, #20]
 800dd46:	4313      	orrs	r3, r2
 800dd48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	f023 0304 	bic.w	r3, r3, #4
 800dd50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	4a1b      	ldr	r2, [pc, #108]	; (800ddc4 <TIM_OC1_SetConfig+0x10c>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d00f      	beq.n	800dd7a <TIM_OC1_SetConfig+0xc2>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	4a1a      	ldr	r2, [pc, #104]	; (800ddc8 <TIM_OC1_SetConfig+0x110>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d00b      	beq.n	800dd7a <TIM_OC1_SetConfig+0xc2>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	4a19      	ldr	r2, [pc, #100]	; (800ddcc <TIM_OC1_SetConfig+0x114>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d007      	beq.n	800dd7a <TIM_OC1_SetConfig+0xc2>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	4a18      	ldr	r2, [pc, #96]	; (800ddd0 <TIM_OC1_SetConfig+0x118>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d003      	beq.n	800dd7a <TIM_OC1_SetConfig+0xc2>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	4a17      	ldr	r2, [pc, #92]	; (800ddd4 <TIM_OC1_SetConfig+0x11c>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d111      	bne.n	800dd9e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dd88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	695b      	ldr	r3, [r3, #20]
 800dd8e:	693a      	ldr	r2, [r7, #16]
 800dd90:	4313      	orrs	r3, r2
 800dd92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	699b      	ldr	r3, [r3, #24]
 800dd98:	693a      	ldr	r2, [r7, #16]
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	693a      	ldr	r2, [r7, #16]
 800dda2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	68fa      	ldr	r2, [r7, #12]
 800dda8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	685a      	ldr	r2, [r3, #4]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	697a      	ldr	r2, [r7, #20]
 800ddb6:	621a      	str	r2, [r3, #32]
}
 800ddb8:	bf00      	nop
 800ddba:	371c      	adds	r7, #28
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr
 800ddc4:	40012c00 	.word	0x40012c00
 800ddc8:	40013400 	.word	0x40013400
 800ddcc:	40014000 	.word	0x40014000
 800ddd0:	40014400 	.word	0x40014400
 800ddd4:	40014800 	.word	0x40014800

0800ddd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b087      	sub	sp, #28
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6a1b      	ldr	r3, [r3, #32]
 800dde6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6a1b      	ldr	r3, [r3, #32]
 800ddec:	f023 0210 	bic.w	r2, r3, #16
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	685b      	ldr	r3, [r3, #4]
 800ddf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	699b      	ldr	r3, [r3, #24]
 800ddfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800de06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	021b      	lsls	r3, r3, #8
 800de1a:	68fa      	ldr	r2, [r7, #12]
 800de1c:	4313      	orrs	r3, r2
 800de1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	f023 0320 	bic.w	r3, r3, #32
 800de26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	689b      	ldr	r3, [r3, #8]
 800de2c:	011b      	lsls	r3, r3, #4
 800de2e:	697a      	ldr	r2, [r7, #20]
 800de30:	4313      	orrs	r3, r2
 800de32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	4a28      	ldr	r2, [pc, #160]	; (800ded8 <TIM_OC2_SetConfig+0x100>)
 800de38:	4293      	cmp	r3, r2
 800de3a:	d003      	beq.n	800de44 <TIM_OC2_SetConfig+0x6c>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	4a27      	ldr	r2, [pc, #156]	; (800dedc <TIM_OC2_SetConfig+0x104>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d10d      	bne.n	800de60 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	011b      	lsls	r3, r3, #4
 800de52:	697a      	ldr	r2, [r7, #20]
 800de54:	4313      	orrs	r3, r2
 800de56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	4a1d      	ldr	r2, [pc, #116]	; (800ded8 <TIM_OC2_SetConfig+0x100>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d00f      	beq.n	800de88 <TIM_OC2_SetConfig+0xb0>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	4a1c      	ldr	r2, [pc, #112]	; (800dedc <TIM_OC2_SetConfig+0x104>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d00b      	beq.n	800de88 <TIM_OC2_SetConfig+0xb0>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	4a1b      	ldr	r2, [pc, #108]	; (800dee0 <TIM_OC2_SetConfig+0x108>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d007      	beq.n	800de88 <TIM_OC2_SetConfig+0xb0>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	4a1a      	ldr	r2, [pc, #104]	; (800dee4 <TIM_OC2_SetConfig+0x10c>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d003      	beq.n	800de88 <TIM_OC2_SetConfig+0xb0>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	4a19      	ldr	r2, [pc, #100]	; (800dee8 <TIM_OC2_SetConfig+0x110>)
 800de84:	4293      	cmp	r3, r2
 800de86:	d113      	bne.n	800deb0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800de8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800de96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	695b      	ldr	r3, [r3, #20]
 800de9c:	009b      	lsls	r3, r3, #2
 800de9e:	693a      	ldr	r2, [r7, #16]
 800dea0:	4313      	orrs	r3, r2
 800dea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	699b      	ldr	r3, [r3, #24]
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	693a      	ldr	r2, [r7, #16]
 800deac:	4313      	orrs	r3, r2
 800deae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	693a      	ldr	r2, [r7, #16]
 800deb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	68fa      	ldr	r2, [r7, #12]
 800deba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	685a      	ldr	r2, [r3, #4]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	697a      	ldr	r2, [r7, #20]
 800dec8:	621a      	str	r2, [r3, #32]
}
 800deca:	bf00      	nop
 800decc:	371c      	adds	r7, #28
 800dece:	46bd      	mov	sp, r7
 800ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded4:	4770      	bx	lr
 800ded6:	bf00      	nop
 800ded8:	40012c00 	.word	0x40012c00
 800dedc:	40013400 	.word	0x40013400
 800dee0:	40014000 	.word	0x40014000
 800dee4:	40014400 	.word	0x40014400
 800dee8:	40014800 	.word	0x40014800

0800deec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800deec:	b480      	push	{r7}
 800deee:	b087      	sub	sp, #28
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6a1b      	ldr	r3, [r3, #32]
 800defa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6a1b      	ldr	r3, [r3, #32]
 800df00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	685b      	ldr	r3, [r3, #4]
 800df0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	69db      	ldr	r3, [r3, #28]
 800df12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800df1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	f023 0303 	bic.w	r3, r3, #3
 800df26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	4313      	orrs	r3, r2
 800df30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800df38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	689b      	ldr	r3, [r3, #8]
 800df3e:	021b      	lsls	r3, r3, #8
 800df40:	697a      	ldr	r2, [r7, #20]
 800df42:	4313      	orrs	r3, r2
 800df44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	4a27      	ldr	r2, [pc, #156]	; (800dfe8 <TIM_OC3_SetConfig+0xfc>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d003      	beq.n	800df56 <TIM_OC3_SetConfig+0x6a>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	4a26      	ldr	r2, [pc, #152]	; (800dfec <TIM_OC3_SetConfig+0x100>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d10d      	bne.n	800df72 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800df5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	021b      	lsls	r3, r3, #8
 800df64:	697a      	ldr	r2, [r7, #20]
 800df66:	4313      	orrs	r3, r2
 800df68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800df70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	4a1c      	ldr	r2, [pc, #112]	; (800dfe8 <TIM_OC3_SetConfig+0xfc>)
 800df76:	4293      	cmp	r3, r2
 800df78:	d00f      	beq.n	800df9a <TIM_OC3_SetConfig+0xae>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	4a1b      	ldr	r2, [pc, #108]	; (800dfec <TIM_OC3_SetConfig+0x100>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d00b      	beq.n	800df9a <TIM_OC3_SetConfig+0xae>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	4a1a      	ldr	r2, [pc, #104]	; (800dff0 <TIM_OC3_SetConfig+0x104>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d007      	beq.n	800df9a <TIM_OC3_SetConfig+0xae>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	4a19      	ldr	r2, [pc, #100]	; (800dff4 <TIM_OC3_SetConfig+0x108>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d003      	beq.n	800df9a <TIM_OC3_SetConfig+0xae>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	4a18      	ldr	r2, [pc, #96]	; (800dff8 <TIM_OC3_SetConfig+0x10c>)
 800df96:	4293      	cmp	r3, r2
 800df98:	d113      	bne.n	800dfc2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dfa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dfa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	695b      	ldr	r3, [r3, #20]
 800dfae:	011b      	lsls	r3, r3, #4
 800dfb0:	693a      	ldr	r2, [r7, #16]
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	699b      	ldr	r3, [r3, #24]
 800dfba:	011b      	lsls	r3, r3, #4
 800dfbc:	693a      	ldr	r2, [r7, #16]
 800dfbe:	4313      	orrs	r3, r2
 800dfc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	693a      	ldr	r2, [r7, #16]
 800dfc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	68fa      	ldr	r2, [r7, #12]
 800dfcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	685a      	ldr	r2, [r3, #4]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	697a      	ldr	r2, [r7, #20]
 800dfda:	621a      	str	r2, [r3, #32]
}
 800dfdc:	bf00      	nop
 800dfde:	371c      	adds	r7, #28
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr
 800dfe8:	40012c00 	.word	0x40012c00
 800dfec:	40013400 	.word	0x40013400
 800dff0:	40014000 	.word	0x40014000
 800dff4:	40014400 	.word	0x40014400
 800dff8:	40014800 	.word	0x40014800

0800dffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b087      	sub	sp, #28
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6a1b      	ldr	r3, [r3, #32]
 800e00a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6a1b      	ldr	r3, [r3, #32]
 800e010:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	69db      	ldr	r3, [r3, #28]
 800e022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e02a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e02e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	021b      	lsls	r3, r3, #8
 800e03e:	68fa      	ldr	r2, [r7, #12]
 800e040:	4313      	orrs	r3, r2
 800e042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e04a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	689b      	ldr	r3, [r3, #8]
 800e050:	031b      	lsls	r3, r3, #12
 800e052:	693a      	ldr	r2, [r7, #16]
 800e054:	4313      	orrs	r3, r2
 800e056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	4a18      	ldr	r2, [pc, #96]	; (800e0bc <TIM_OC4_SetConfig+0xc0>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d00f      	beq.n	800e080 <TIM_OC4_SetConfig+0x84>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	4a17      	ldr	r2, [pc, #92]	; (800e0c0 <TIM_OC4_SetConfig+0xc4>)
 800e064:	4293      	cmp	r3, r2
 800e066:	d00b      	beq.n	800e080 <TIM_OC4_SetConfig+0x84>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	4a16      	ldr	r2, [pc, #88]	; (800e0c4 <TIM_OC4_SetConfig+0xc8>)
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d007      	beq.n	800e080 <TIM_OC4_SetConfig+0x84>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	4a15      	ldr	r2, [pc, #84]	; (800e0c8 <TIM_OC4_SetConfig+0xcc>)
 800e074:	4293      	cmp	r3, r2
 800e076:	d003      	beq.n	800e080 <TIM_OC4_SetConfig+0x84>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	4a14      	ldr	r2, [pc, #80]	; (800e0cc <TIM_OC4_SetConfig+0xd0>)
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d109      	bne.n	800e094 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	695b      	ldr	r3, [r3, #20]
 800e08c:	019b      	lsls	r3, r3, #6
 800e08e:	697a      	ldr	r2, [r7, #20]
 800e090:	4313      	orrs	r3, r2
 800e092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	697a      	ldr	r2, [r7, #20]
 800e098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	68fa      	ldr	r2, [r7, #12]
 800e09e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	685a      	ldr	r2, [r3, #4]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	693a      	ldr	r2, [r7, #16]
 800e0ac:	621a      	str	r2, [r3, #32]
}
 800e0ae:	bf00      	nop
 800e0b0:	371c      	adds	r7, #28
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr
 800e0ba:	bf00      	nop
 800e0bc:	40012c00 	.word	0x40012c00
 800e0c0:	40013400 	.word	0x40013400
 800e0c4:	40014000 	.word	0x40014000
 800e0c8:	40014400 	.word	0x40014400
 800e0cc:	40014800 	.word	0x40014800

0800e0d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b087      	sub	sp, #28
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6a1b      	ldr	r3, [r3, #32]
 800e0de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6a1b      	ldr	r3, [r3, #32]
 800e0e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	685b      	ldr	r3, [r3, #4]
 800e0f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e0fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	68fa      	ldr	r2, [r7, #12]
 800e10a:	4313      	orrs	r3, r2
 800e10c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e114:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	689b      	ldr	r3, [r3, #8]
 800e11a:	041b      	lsls	r3, r3, #16
 800e11c:	693a      	ldr	r2, [r7, #16]
 800e11e:	4313      	orrs	r3, r2
 800e120:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	4a17      	ldr	r2, [pc, #92]	; (800e184 <TIM_OC5_SetConfig+0xb4>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d00f      	beq.n	800e14a <TIM_OC5_SetConfig+0x7a>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	4a16      	ldr	r2, [pc, #88]	; (800e188 <TIM_OC5_SetConfig+0xb8>)
 800e12e:	4293      	cmp	r3, r2
 800e130:	d00b      	beq.n	800e14a <TIM_OC5_SetConfig+0x7a>
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	4a15      	ldr	r2, [pc, #84]	; (800e18c <TIM_OC5_SetConfig+0xbc>)
 800e136:	4293      	cmp	r3, r2
 800e138:	d007      	beq.n	800e14a <TIM_OC5_SetConfig+0x7a>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	4a14      	ldr	r2, [pc, #80]	; (800e190 <TIM_OC5_SetConfig+0xc0>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d003      	beq.n	800e14a <TIM_OC5_SetConfig+0x7a>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	4a13      	ldr	r2, [pc, #76]	; (800e194 <TIM_OC5_SetConfig+0xc4>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d109      	bne.n	800e15e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e150:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	695b      	ldr	r3, [r3, #20]
 800e156:	021b      	lsls	r3, r3, #8
 800e158:	697a      	ldr	r2, [r7, #20]
 800e15a:	4313      	orrs	r3, r2
 800e15c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	697a      	ldr	r2, [r7, #20]
 800e162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	68fa      	ldr	r2, [r7, #12]
 800e168:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	685a      	ldr	r2, [r3, #4]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	693a      	ldr	r2, [r7, #16]
 800e176:	621a      	str	r2, [r3, #32]
}
 800e178:	bf00      	nop
 800e17a:	371c      	adds	r7, #28
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr
 800e184:	40012c00 	.word	0x40012c00
 800e188:	40013400 	.word	0x40013400
 800e18c:	40014000 	.word	0x40014000
 800e190:	40014400 	.word	0x40014400
 800e194:	40014800 	.word	0x40014800

0800e198 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e198:	b480      	push	{r7}
 800e19a:	b087      	sub	sp, #28
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6a1b      	ldr	r3, [r3, #32]
 800e1a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6a1b      	ldr	r3, [r3, #32]
 800e1ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e1c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e1ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	021b      	lsls	r3, r3, #8
 800e1d2:	68fa      	ldr	r2, [r7, #12]
 800e1d4:	4313      	orrs	r3, r2
 800e1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e1de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	051b      	lsls	r3, r3, #20
 800e1e6:	693a      	ldr	r2, [r7, #16]
 800e1e8:	4313      	orrs	r3, r2
 800e1ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	4a18      	ldr	r2, [pc, #96]	; (800e250 <TIM_OC6_SetConfig+0xb8>)
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d00f      	beq.n	800e214 <TIM_OC6_SetConfig+0x7c>
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	4a17      	ldr	r2, [pc, #92]	; (800e254 <TIM_OC6_SetConfig+0xbc>)
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d00b      	beq.n	800e214 <TIM_OC6_SetConfig+0x7c>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	4a16      	ldr	r2, [pc, #88]	; (800e258 <TIM_OC6_SetConfig+0xc0>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d007      	beq.n	800e214 <TIM_OC6_SetConfig+0x7c>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	4a15      	ldr	r2, [pc, #84]	; (800e25c <TIM_OC6_SetConfig+0xc4>)
 800e208:	4293      	cmp	r3, r2
 800e20a:	d003      	beq.n	800e214 <TIM_OC6_SetConfig+0x7c>
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	4a14      	ldr	r2, [pc, #80]	; (800e260 <TIM_OC6_SetConfig+0xc8>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d109      	bne.n	800e228 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e21a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	695b      	ldr	r3, [r3, #20]
 800e220:	029b      	lsls	r3, r3, #10
 800e222:	697a      	ldr	r2, [r7, #20]
 800e224:	4313      	orrs	r3, r2
 800e226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	697a      	ldr	r2, [r7, #20]
 800e22c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	68fa      	ldr	r2, [r7, #12]
 800e232:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	685a      	ldr	r2, [r3, #4]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	693a      	ldr	r2, [r7, #16]
 800e240:	621a      	str	r2, [r3, #32]
}
 800e242:	bf00      	nop
 800e244:	371c      	adds	r7, #28
 800e246:	46bd      	mov	sp, r7
 800e248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24c:	4770      	bx	lr
 800e24e:	bf00      	nop
 800e250:	40012c00 	.word	0x40012c00
 800e254:	40013400 	.word	0x40013400
 800e258:	40014000 	.word	0x40014000
 800e25c:	40014400 	.word	0x40014400
 800e260:	40014800 	.word	0x40014800

0800e264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e264:	b480      	push	{r7}
 800e266:	b085      	sub	sp, #20
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e274:	2b01      	cmp	r3, #1
 800e276:	d101      	bne.n	800e27c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e278:	2302      	movs	r3, #2
 800e27a:	e068      	b.n	800e34e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2201      	movs	r2, #1
 800e280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2202      	movs	r2, #2
 800e288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	685b      	ldr	r3, [r3, #4]
 800e292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	689b      	ldr	r3, [r3, #8]
 800e29a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4a2e      	ldr	r2, [pc, #184]	; (800e35c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d004      	beq.n	800e2b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4a2d      	ldr	r2, [pc, #180]	; (800e360 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d108      	bne.n	800e2c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e2b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	685b      	ldr	r3, [r3, #4]
 800e2bc:	68fa      	ldr	r2, [r7, #12]
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	68fa      	ldr	r2, [r7, #12]
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	68fa      	ldr	r2, [r7, #12]
 800e2da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a1e      	ldr	r2, [pc, #120]	; (800e35c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d01d      	beq.n	800e322 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2ee:	d018      	beq.n	800e322 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4a1b      	ldr	r2, [pc, #108]	; (800e364 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d013      	beq.n	800e322 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	4a1a      	ldr	r2, [pc, #104]	; (800e368 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e300:	4293      	cmp	r3, r2
 800e302:	d00e      	beq.n	800e322 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4a18      	ldr	r2, [pc, #96]	; (800e36c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d009      	beq.n	800e322 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	4a13      	ldr	r2, [pc, #76]	; (800e360 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e314:	4293      	cmp	r3, r2
 800e316:	d004      	beq.n	800e322 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a14      	ldr	r2, [pc, #80]	; (800e370 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d10c      	bne.n	800e33c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e328:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	689b      	ldr	r3, [r3, #8]
 800e32e:	68ba      	ldr	r2, [r7, #8]
 800e330:	4313      	orrs	r3, r2
 800e332:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	68ba      	ldr	r2, [r7, #8]
 800e33a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2201      	movs	r2, #1
 800e340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2200      	movs	r2, #0
 800e348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e34c:	2300      	movs	r3, #0
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3714      	adds	r7, #20
 800e352:	46bd      	mov	sp, r7
 800e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e358:	4770      	bx	lr
 800e35a:	bf00      	nop
 800e35c:	40012c00 	.word	0x40012c00
 800e360:	40013400 	.word	0x40013400
 800e364:	40000400 	.word	0x40000400
 800e368:	40000800 	.word	0x40000800
 800e36c:	40000c00 	.word	0x40000c00
 800e370:	40014000 	.word	0x40014000

0800e374 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e374:	b480      	push	{r7}
 800e376:	b085      	sub	sp, #20
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e37e:	2300      	movs	r3, #0
 800e380:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d101      	bne.n	800e390 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e38c:	2302      	movs	r3, #2
 800e38e:	e065      	b.n	800e45c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2201      	movs	r2, #1
 800e394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	4313      	orrs	r3, r2
 800e3a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	689b      	ldr	r3, [r3, #8]
 800e3b0:	4313      	orrs	r3, r2
 800e3b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	4313      	orrs	r3, r2
 800e3c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	691b      	ldr	r3, [r3, #16]
 800e3da:	4313      	orrs	r3, r2
 800e3dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	695b      	ldr	r3, [r3, #20]
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3f6:	4313      	orrs	r3, r2
 800e3f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	699b      	ldr	r3, [r3, #24]
 800e404:	041b      	lsls	r3, r3, #16
 800e406:	4313      	orrs	r3, r2
 800e408:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4a16      	ldr	r2, [pc, #88]	; (800e468 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d004      	beq.n	800e41e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4a14      	ldr	r2, [pc, #80]	; (800e46c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d115      	bne.n	800e44a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e428:	051b      	lsls	r3, r3, #20
 800e42a:	4313      	orrs	r3, r2
 800e42c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	69db      	ldr	r3, [r3, #28]
 800e438:	4313      	orrs	r3, r2
 800e43a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	6a1b      	ldr	r3, [r3, #32]
 800e446:	4313      	orrs	r3, r2
 800e448:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	68fa      	ldr	r2, [r7, #12]
 800e450:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2200      	movs	r2, #0
 800e456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e45a:	2300      	movs	r3, #0
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3714      	adds	r7, #20
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr
 800e468:	40012c00 	.word	0x40012c00
 800e46c:	40013400 	.word	0x40013400

0800e470 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800e470:	b480      	push	{r7}
 800e472:	b08b      	sub	sp, #44	; 0x2c
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	60b9      	str	r1, [r7, #8]
 800e47a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e47c:	2300      	movs	r3, #0
 800e47e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e488:	2b01      	cmp	r3, #1
 800e48a:	d101      	bne.n	800e490 <HAL_TIMEx_ConfigBreakInput+0x20>
 800e48c:	2302      	movs	r3, #2
 800e48e:	e0af      	b.n	800e5f0 <HAL_TIMEx_ConfigBreakInput+0x180>
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2201      	movs	r2, #1
 800e494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	3b01      	subs	r3, #1
 800e49e:	2b07      	cmp	r3, #7
 800e4a0:	d83a      	bhi.n	800e518 <HAL_TIMEx_ConfigBreakInput+0xa8>
 800e4a2:	a201      	add	r2, pc, #4	; (adr r2, 800e4a8 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800e4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4a8:	0800e4c9 	.word	0x0800e4c9
 800e4ac:	0800e4dd 	.word	0x0800e4dd
 800e4b0:	0800e519 	.word	0x0800e519
 800e4b4:	0800e4f1 	.word	0x0800e4f1
 800e4b8:	0800e519 	.word	0x0800e519
 800e4bc:	0800e519 	.word	0x0800e519
 800e4c0:	0800e519 	.word	0x0800e519
 800e4c4:	0800e505 	.word	0x0800e505
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 800e4d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4d4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 800e4d6:	2309      	movs	r3, #9
 800e4d8:	613b      	str	r3, [r7, #16]
      break;
 800e4da:	e026      	b.n	800e52a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800e4dc:	2302      	movs	r3, #2
 800e4de:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 800e4e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4e8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800e4ea:	230a      	movs	r3, #10
 800e4ec:	613b      	str	r3, [r7, #16]
      break;
 800e4ee:	e01c      	b.n	800e52a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 800e4f0:	2304      	movs	r3, #4
 800e4f2:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 800e4f4:	2302      	movs	r3, #2
 800e4f6:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 800e4f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4fc:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800e4fe:	230b      	movs	r3, #11
 800e500:	613b      	str	r3, [r7, #16]
      break;
 800e502:	e012      	b.n	800e52a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 800e504:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e508:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 800e50a:	2308      	movs	r3, #8
 800e50c:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800e50e:	2300      	movs	r3, #0
 800e510:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800e512:	2300      	movs	r3, #0
 800e514:	613b      	str	r3, [r7, #16]
      break;
 800e516:	e008      	b.n	800e52a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 800e518:	2300      	movs	r3, #0
 800e51a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800e51c:	2300      	movs	r3, #0
 800e51e:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800e520:	2300      	movs	r3, #0
 800e522:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 800e524:	2300      	movs	r3, #0
 800e526:	613b      	str	r3, [r7, #16]
      break;
 800e528:	bf00      	nop
    }
  }

  switch (BreakInput)
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	d003      	beq.n	800e538 <HAL_TIMEx_ConfigBreakInput+0xc8>
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	2b02      	cmp	r3, #2
 800e534:	d029      	beq.n	800e58a <HAL_TIMEx_ConfigBreakInput+0x11a>
 800e536:	e051      	b.n	800e5dc <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e53e:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800e540:	69fb      	ldr	r3, [r7, #28]
 800e542:	43db      	mvns	r3, r3
 800e544:	6a3a      	ldr	r2, [r7, #32]
 800e546:	4013      	ands	r3, r2
 800e548:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	685a      	ldr	r2, [r3, #4]
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	409a      	lsls	r2, r3
 800e552:	69fb      	ldr	r3, [r7, #28]
 800e554:	4013      	ands	r3, r2
 800e556:	6a3a      	ldr	r2, [r7, #32]
 800e558:	4313      	orrs	r3, r2
 800e55a:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	2b08      	cmp	r3, #8
 800e562:	d00d      	beq.n	800e580 <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800e564:	69bb      	ldr	r3, [r7, #24]
 800e566:	43db      	mvns	r3, r3
 800e568:	6a3a      	ldr	r2, [r7, #32]
 800e56a:	4013      	ands	r3, r2
 800e56c:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	689a      	ldr	r2, [r3, #8]
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	409a      	lsls	r2, r3
 800e576:	69bb      	ldr	r3, [r7, #24]
 800e578:	4013      	ands	r3, r2
 800e57a:	6a3a      	ldr	r2, [r7, #32]
 800e57c:	4313      	orrs	r3, r2
 800e57e:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	6a3a      	ldr	r2, [r7, #32]
 800e586:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800e588:	e02c      	b.n	800e5e4 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e590:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	43db      	mvns	r3, r3
 800e596:	6a3a      	ldr	r2, [r7, #32]
 800e598:	4013      	ands	r3, r2
 800e59a:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	685a      	ldr	r2, [r3, #4]
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	409a      	lsls	r2, r3
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	4013      	ands	r3, r2
 800e5a8:	6a3a      	ldr	r2, [r7, #32]
 800e5aa:	4313      	orrs	r3, r2
 800e5ac:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	2b08      	cmp	r3, #8
 800e5b4:	d00d      	beq.n	800e5d2 <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800e5b6:	69bb      	ldr	r3, [r7, #24]
 800e5b8:	43db      	mvns	r3, r3
 800e5ba:	6a3a      	ldr	r2, [r7, #32]
 800e5bc:	4013      	ands	r3, r2
 800e5be:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	689a      	ldr	r2, [r3, #8]
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	409a      	lsls	r2, r3
 800e5c8:	69bb      	ldr	r3, [r7, #24]
 800e5ca:	4013      	ands	r3, r2
 800e5cc:	6a3a      	ldr	r2, [r7, #32]
 800e5ce:	4313      	orrs	r3, r2
 800e5d0:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	6a3a      	ldr	r2, [r7, #32]
 800e5d8:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800e5da:	e003      	b.n	800e5e4 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800e5e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	372c      	adds	r7, #44	; 0x2c
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr

0800e5fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b083      	sub	sp, #12
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e604:	bf00      	nop
 800e606:	370c      	adds	r7, #12
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr

0800e610 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e610:	b480      	push	{r7}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e618:	bf00      	nop
 800e61a:	370c      	adds	r7, #12
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr

0800e624 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e624:	b480      	push	{r7}
 800e626:	b083      	sub	sp, #12
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e62c:	bf00      	nop
 800e62e:	370c      	adds	r7, #12
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr

0800e638 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b082      	sub	sp, #8
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d101      	bne.n	800e64a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e646:	2301      	movs	r3, #1
 800e648:	e042      	b.n	800e6d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e650:	2b00      	cmp	r3, #0
 800e652:	d106      	bne.n	800e662 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2200      	movs	r2, #0
 800e658:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f7f5 fb85 	bl	8003d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2224      	movs	r2, #36	; 0x24
 800e666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f022 0201 	bic.w	r2, r2, #1
 800e678:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d002      	beq.n	800e688 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 fbb4 	bl	800edf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f000 f8b5 	bl	800e7f8 <UART_SetConfig>
 800e68e:	4603      	mov	r3, r0
 800e690:	2b01      	cmp	r3, #1
 800e692:	d101      	bne.n	800e698 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e694:	2301      	movs	r3, #1
 800e696:	e01b      	b.n	800e6d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	685a      	ldr	r2, [r3, #4]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e6a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	689a      	ldr	r2, [r3, #8]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e6b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	681a      	ldr	r2, [r3, #0]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f042 0201 	orr.w	r2, r2, #1
 800e6c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f000 fc33 	bl	800ef34 <UART_CheckIdleState>
 800e6ce:	4603      	mov	r3, r0
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3708      	adds	r7, #8
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b08a      	sub	sp, #40	; 0x28
 800e6dc:	af02      	add	r7, sp, #8
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	603b      	str	r3, [r7, #0]
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6ee:	2b20      	cmp	r3, #32
 800e6f0:	d17c      	bne.n	800e7ec <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d002      	beq.n	800e6fe <HAL_UART_Transmit+0x26>
 800e6f8:	88fb      	ldrh	r3, [r7, #6]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d101      	bne.n	800e702 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e6fe:	2301      	movs	r3, #1
 800e700:	e075      	b.n	800e7ee <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2200      	movs	r2, #0
 800e706:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2221      	movs	r2, #33	; 0x21
 800e70e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e712:	f7f7 fef9 	bl	8006508 <HAL_GetTick>
 800e716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	88fa      	ldrh	r2, [r7, #6]
 800e71c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	88fa      	ldrh	r2, [r7, #6]
 800e724:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	689b      	ldr	r3, [r3, #8]
 800e72c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e730:	d108      	bne.n	800e744 <HAL_UART_Transmit+0x6c>
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	691b      	ldr	r3, [r3, #16]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d104      	bne.n	800e744 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e73a:	2300      	movs	r3, #0
 800e73c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	61bb      	str	r3, [r7, #24]
 800e742:	e003      	b.n	800e74c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e748:	2300      	movs	r3, #0
 800e74a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e74c:	e031      	b.n	800e7b2 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	9300      	str	r3, [sp, #0]
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	2200      	movs	r2, #0
 800e756:	2180      	movs	r1, #128	; 0x80
 800e758:	68f8      	ldr	r0, [r7, #12]
 800e75a:	f000 fc95 	bl	800f088 <UART_WaitOnFlagUntilTimeout>
 800e75e:	4603      	mov	r3, r0
 800e760:	2b00      	cmp	r3, #0
 800e762:	d005      	beq.n	800e770 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2220      	movs	r2, #32
 800e768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e76c:	2303      	movs	r3, #3
 800e76e:	e03e      	b.n	800e7ee <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d10b      	bne.n	800e78e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e776:	69bb      	ldr	r3, [r7, #24]
 800e778:	881a      	ldrh	r2, [r3, #0]
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e782:	b292      	uxth	r2, r2
 800e784:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	3302      	adds	r3, #2
 800e78a:	61bb      	str	r3, [r7, #24]
 800e78c:	e008      	b.n	800e7a0 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	781a      	ldrb	r2, [r3, #0]
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	b292      	uxth	r2, r2
 800e798:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	3301      	adds	r3, #1
 800e79e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	3b01      	subs	r3, #1
 800e7aa:	b29a      	uxth	r2, r3
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d1c7      	bne.n	800e74e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	9300      	str	r3, [sp, #0]
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	2140      	movs	r1, #64	; 0x40
 800e7c8:	68f8      	ldr	r0, [r7, #12]
 800e7ca:	f000 fc5d 	bl	800f088 <UART_WaitOnFlagUntilTimeout>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d005      	beq.n	800e7e0 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2220      	movs	r2, #32
 800e7d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e7dc:	2303      	movs	r3, #3
 800e7de:	e006      	b.n	800e7ee <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2220      	movs	r2, #32
 800e7e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	e000      	b.n	800e7ee <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800e7ec:	2302      	movs	r3, #2
  }
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3720      	adds	r7, #32
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
	...

0800e7f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e7f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e7fc:	b08c      	sub	sp, #48	; 0x30
 800e7fe:	af00      	add	r7, sp, #0
 800e800:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e802:	2300      	movs	r3, #0
 800e804:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	689a      	ldr	r2, [r3, #8]
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	691b      	ldr	r3, [r3, #16]
 800e810:	431a      	orrs	r2, r3
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	695b      	ldr	r3, [r3, #20]
 800e816:	431a      	orrs	r2, r3
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	69db      	ldr	r3, [r3, #28]
 800e81c:	4313      	orrs	r3, r2
 800e81e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	4baa      	ldr	r3, [pc, #680]	; (800ead0 <UART_SetConfig+0x2d8>)
 800e828:	4013      	ands	r3, r2
 800e82a:	697a      	ldr	r2, [r7, #20]
 800e82c:	6812      	ldr	r2, [r2, #0]
 800e82e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e830:	430b      	orrs	r3, r1
 800e832:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	68da      	ldr	r2, [r3, #12]
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	430a      	orrs	r2, r1
 800e848:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	699b      	ldr	r3, [r3, #24]
 800e84e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4a9f      	ldr	r2, [pc, #636]	; (800ead4 <UART_SetConfig+0x2dc>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d004      	beq.n	800e864 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	6a1b      	ldr	r3, [r3, #32]
 800e85e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e860:	4313      	orrs	r3, r2
 800e862:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800e86e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800e872:	697a      	ldr	r2, [r7, #20]
 800e874:	6812      	ldr	r2, [r2, #0]
 800e876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e878:	430b      	orrs	r3, r1
 800e87a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e882:	f023 010f 	bic.w	r1, r3, #15
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	430a      	orrs	r2, r1
 800e890:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	4a90      	ldr	r2, [pc, #576]	; (800ead8 <UART_SetConfig+0x2e0>)
 800e898:	4293      	cmp	r3, r2
 800e89a:	d125      	bne.n	800e8e8 <UART_SetConfig+0xf0>
 800e89c:	4b8f      	ldr	r3, [pc, #572]	; (800eadc <UART_SetConfig+0x2e4>)
 800e89e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8a2:	f003 0303 	and.w	r3, r3, #3
 800e8a6:	2b03      	cmp	r3, #3
 800e8a8:	d81a      	bhi.n	800e8e0 <UART_SetConfig+0xe8>
 800e8aa:	a201      	add	r2, pc, #4	; (adr r2, 800e8b0 <UART_SetConfig+0xb8>)
 800e8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8b0:	0800e8c1 	.word	0x0800e8c1
 800e8b4:	0800e8d1 	.word	0x0800e8d1
 800e8b8:	0800e8c9 	.word	0x0800e8c9
 800e8bc:	0800e8d9 	.word	0x0800e8d9
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8c6:	e116      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800e8c8:	2302      	movs	r3, #2
 800e8ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8ce:	e112      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800e8d0:	2304      	movs	r3, #4
 800e8d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8d6:	e10e      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800e8d8:	2308      	movs	r3, #8
 800e8da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8de:	e10a      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800e8e0:	2310      	movs	r3, #16
 800e8e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8e6:	e106      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	4a7c      	ldr	r2, [pc, #496]	; (800eae0 <UART_SetConfig+0x2e8>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d138      	bne.n	800e964 <UART_SetConfig+0x16c>
 800e8f2:	4b7a      	ldr	r3, [pc, #488]	; (800eadc <UART_SetConfig+0x2e4>)
 800e8f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8f8:	f003 030c 	and.w	r3, r3, #12
 800e8fc:	2b0c      	cmp	r3, #12
 800e8fe:	d82d      	bhi.n	800e95c <UART_SetConfig+0x164>
 800e900:	a201      	add	r2, pc, #4	; (adr r2, 800e908 <UART_SetConfig+0x110>)
 800e902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e906:	bf00      	nop
 800e908:	0800e93d 	.word	0x0800e93d
 800e90c:	0800e95d 	.word	0x0800e95d
 800e910:	0800e95d 	.word	0x0800e95d
 800e914:	0800e95d 	.word	0x0800e95d
 800e918:	0800e94d 	.word	0x0800e94d
 800e91c:	0800e95d 	.word	0x0800e95d
 800e920:	0800e95d 	.word	0x0800e95d
 800e924:	0800e95d 	.word	0x0800e95d
 800e928:	0800e945 	.word	0x0800e945
 800e92c:	0800e95d 	.word	0x0800e95d
 800e930:	0800e95d 	.word	0x0800e95d
 800e934:	0800e95d 	.word	0x0800e95d
 800e938:	0800e955 	.word	0x0800e955
 800e93c:	2300      	movs	r3, #0
 800e93e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e942:	e0d8      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800e944:	2302      	movs	r3, #2
 800e946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e94a:	e0d4      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800e94c:	2304      	movs	r3, #4
 800e94e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e952:	e0d0      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800e954:	2308      	movs	r3, #8
 800e956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e95a:	e0cc      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800e95c:	2310      	movs	r3, #16
 800e95e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e962:	e0c8      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4a5e      	ldr	r2, [pc, #376]	; (800eae4 <UART_SetConfig+0x2ec>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d125      	bne.n	800e9ba <UART_SetConfig+0x1c2>
 800e96e:	4b5b      	ldr	r3, [pc, #364]	; (800eadc <UART_SetConfig+0x2e4>)
 800e970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e974:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e978:	2b30      	cmp	r3, #48	; 0x30
 800e97a:	d016      	beq.n	800e9aa <UART_SetConfig+0x1b2>
 800e97c:	2b30      	cmp	r3, #48	; 0x30
 800e97e:	d818      	bhi.n	800e9b2 <UART_SetConfig+0x1ba>
 800e980:	2b20      	cmp	r3, #32
 800e982:	d00a      	beq.n	800e99a <UART_SetConfig+0x1a2>
 800e984:	2b20      	cmp	r3, #32
 800e986:	d814      	bhi.n	800e9b2 <UART_SetConfig+0x1ba>
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d002      	beq.n	800e992 <UART_SetConfig+0x19a>
 800e98c:	2b10      	cmp	r3, #16
 800e98e:	d008      	beq.n	800e9a2 <UART_SetConfig+0x1aa>
 800e990:	e00f      	b.n	800e9b2 <UART_SetConfig+0x1ba>
 800e992:	2300      	movs	r3, #0
 800e994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e998:	e0ad      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800e99a:	2302      	movs	r3, #2
 800e99c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9a0:	e0a9      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800e9a2:	2304      	movs	r3, #4
 800e9a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9a8:	e0a5      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800e9aa:	2308      	movs	r3, #8
 800e9ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9b0:	e0a1      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800e9b2:	2310      	movs	r3, #16
 800e9b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9b8:	e09d      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	4a4a      	ldr	r2, [pc, #296]	; (800eae8 <UART_SetConfig+0x2f0>)
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	d125      	bne.n	800ea10 <UART_SetConfig+0x218>
 800e9c4:	4b45      	ldr	r3, [pc, #276]	; (800eadc <UART_SetConfig+0x2e4>)
 800e9c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e9ce:	2bc0      	cmp	r3, #192	; 0xc0
 800e9d0:	d016      	beq.n	800ea00 <UART_SetConfig+0x208>
 800e9d2:	2bc0      	cmp	r3, #192	; 0xc0
 800e9d4:	d818      	bhi.n	800ea08 <UART_SetConfig+0x210>
 800e9d6:	2b80      	cmp	r3, #128	; 0x80
 800e9d8:	d00a      	beq.n	800e9f0 <UART_SetConfig+0x1f8>
 800e9da:	2b80      	cmp	r3, #128	; 0x80
 800e9dc:	d814      	bhi.n	800ea08 <UART_SetConfig+0x210>
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d002      	beq.n	800e9e8 <UART_SetConfig+0x1f0>
 800e9e2:	2b40      	cmp	r3, #64	; 0x40
 800e9e4:	d008      	beq.n	800e9f8 <UART_SetConfig+0x200>
 800e9e6:	e00f      	b.n	800ea08 <UART_SetConfig+0x210>
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9ee:	e082      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800e9f0:	2302      	movs	r3, #2
 800e9f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9f6:	e07e      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800e9f8:	2304      	movs	r3, #4
 800e9fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9fe:	e07a      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800ea00:	2308      	movs	r3, #8
 800ea02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea06:	e076      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800ea08:	2310      	movs	r3, #16
 800ea0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea0e:	e072      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4a35      	ldr	r2, [pc, #212]	; (800eaec <UART_SetConfig+0x2f4>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d12a      	bne.n	800ea70 <UART_SetConfig+0x278>
 800ea1a:	4b30      	ldr	r3, [pc, #192]	; (800eadc <UART_SetConfig+0x2e4>)
 800ea1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ea28:	d01a      	beq.n	800ea60 <UART_SetConfig+0x268>
 800ea2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ea2e:	d81b      	bhi.n	800ea68 <UART_SetConfig+0x270>
 800ea30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea34:	d00c      	beq.n	800ea50 <UART_SetConfig+0x258>
 800ea36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea3a:	d815      	bhi.n	800ea68 <UART_SetConfig+0x270>
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d003      	beq.n	800ea48 <UART_SetConfig+0x250>
 800ea40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea44:	d008      	beq.n	800ea58 <UART_SetConfig+0x260>
 800ea46:	e00f      	b.n	800ea68 <UART_SetConfig+0x270>
 800ea48:	2300      	movs	r3, #0
 800ea4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea4e:	e052      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800ea50:	2302      	movs	r3, #2
 800ea52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea56:	e04e      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800ea58:	2304      	movs	r3, #4
 800ea5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea5e:	e04a      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800ea60:	2308      	movs	r3, #8
 800ea62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea66:	e046      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800ea68:	2310      	movs	r3, #16
 800ea6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea6e:	e042      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	4a17      	ldr	r2, [pc, #92]	; (800ead4 <UART_SetConfig+0x2dc>)
 800ea76:	4293      	cmp	r3, r2
 800ea78:	d13a      	bne.n	800eaf0 <UART_SetConfig+0x2f8>
 800ea7a:	4b18      	ldr	r3, [pc, #96]	; (800eadc <UART_SetConfig+0x2e4>)
 800ea7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ea84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ea88:	d01a      	beq.n	800eac0 <UART_SetConfig+0x2c8>
 800ea8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ea8e:	d81b      	bhi.n	800eac8 <UART_SetConfig+0x2d0>
 800ea90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea94:	d00c      	beq.n	800eab0 <UART_SetConfig+0x2b8>
 800ea96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea9a:	d815      	bhi.n	800eac8 <UART_SetConfig+0x2d0>
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d003      	beq.n	800eaa8 <UART_SetConfig+0x2b0>
 800eaa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eaa4:	d008      	beq.n	800eab8 <UART_SetConfig+0x2c0>
 800eaa6:	e00f      	b.n	800eac8 <UART_SetConfig+0x2d0>
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eaae:	e022      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800eab0:	2302      	movs	r3, #2
 800eab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eab6:	e01e      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800eab8:	2304      	movs	r3, #4
 800eaba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eabe:	e01a      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800eac0:	2308      	movs	r3, #8
 800eac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eac6:	e016      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800eac8:	2310      	movs	r3, #16
 800eaca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eace:	e012      	b.n	800eaf6 <UART_SetConfig+0x2fe>
 800ead0:	cfff69f3 	.word	0xcfff69f3
 800ead4:	40008000 	.word	0x40008000
 800ead8:	40013800 	.word	0x40013800
 800eadc:	40021000 	.word	0x40021000
 800eae0:	40004400 	.word	0x40004400
 800eae4:	40004800 	.word	0x40004800
 800eae8:	40004c00 	.word	0x40004c00
 800eaec:	40005000 	.word	0x40005000
 800eaf0:	2310      	movs	r3, #16
 800eaf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4aae      	ldr	r2, [pc, #696]	; (800edb4 <UART_SetConfig+0x5bc>)
 800eafc:	4293      	cmp	r3, r2
 800eafe:	f040 8097 	bne.w	800ec30 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800eb02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eb06:	2b08      	cmp	r3, #8
 800eb08:	d823      	bhi.n	800eb52 <UART_SetConfig+0x35a>
 800eb0a:	a201      	add	r2, pc, #4	; (adr r2, 800eb10 <UART_SetConfig+0x318>)
 800eb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb10:	0800eb35 	.word	0x0800eb35
 800eb14:	0800eb53 	.word	0x0800eb53
 800eb18:	0800eb3d 	.word	0x0800eb3d
 800eb1c:	0800eb53 	.word	0x0800eb53
 800eb20:	0800eb43 	.word	0x0800eb43
 800eb24:	0800eb53 	.word	0x0800eb53
 800eb28:	0800eb53 	.word	0x0800eb53
 800eb2c:	0800eb53 	.word	0x0800eb53
 800eb30:	0800eb4b 	.word	0x0800eb4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb34:	f7fa fde6 	bl	8009704 <HAL_RCC_GetPCLK1Freq>
 800eb38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800eb3a:	e010      	b.n	800eb5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eb3c:	4b9e      	ldr	r3, [pc, #632]	; (800edb8 <UART_SetConfig+0x5c0>)
 800eb3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800eb40:	e00d      	b.n	800eb5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eb42:	f7fa fd47 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 800eb46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800eb48:	e009      	b.n	800eb5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eb4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800eb50:	e005      	b.n	800eb5e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800eb52:	2300      	movs	r3, #0
 800eb54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800eb56:	2301      	movs	r3, #1
 800eb58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800eb5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	f000 8130 	beq.w	800edc6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb6a:	4a94      	ldr	r2, [pc, #592]	; (800edbc <UART_SetConfig+0x5c4>)
 800eb6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb70:	461a      	mov	r2, r3
 800eb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb74:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb78:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	685a      	ldr	r2, [r3, #4]
 800eb7e:	4613      	mov	r3, r2
 800eb80:	005b      	lsls	r3, r3, #1
 800eb82:	4413      	add	r3, r2
 800eb84:	69ba      	ldr	r2, [r7, #24]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d305      	bcc.n	800eb96 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eb90:	69ba      	ldr	r2, [r7, #24]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d903      	bls.n	800eb9e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800eb96:	2301      	movs	r3, #1
 800eb98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800eb9c:	e113      	b.n	800edc6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba0:	2200      	movs	r2, #0
 800eba2:	60bb      	str	r3, [r7, #8]
 800eba4:	60fa      	str	r2, [r7, #12]
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebaa:	4a84      	ldr	r2, [pc, #528]	; (800edbc <UART_SetConfig+0x5c4>)
 800ebac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebb0:	b29b      	uxth	r3, r3
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	603b      	str	r3, [r7, #0]
 800ebb6:	607a      	str	r2, [r7, #4]
 800ebb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ebc0:	f7f2 f80a 	bl	8000bd8 <__aeabi_uldivmod>
 800ebc4:	4602      	mov	r2, r0
 800ebc6:	460b      	mov	r3, r1
 800ebc8:	4610      	mov	r0, r2
 800ebca:	4619      	mov	r1, r3
 800ebcc:	f04f 0200 	mov.w	r2, #0
 800ebd0:	f04f 0300 	mov.w	r3, #0
 800ebd4:	020b      	lsls	r3, r1, #8
 800ebd6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ebda:	0202      	lsls	r2, r0, #8
 800ebdc:	6979      	ldr	r1, [r7, #20]
 800ebde:	6849      	ldr	r1, [r1, #4]
 800ebe0:	0849      	lsrs	r1, r1, #1
 800ebe2:	2000      	movs	r0, #0
 800ebe4:	460c      	mov	r4, r1
 800ebe6:	4605      	mov	r5, r0
 800ebe8:	eb12 0804 	adds.w	r8, r2, r4
 800ebec:	eb43 0905 	adc.w	r9, r3, r5
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	469a      	mov	sl, r3
 800ebf8:	4693      	mov	fp, r2
 800ebfa:	4652      	mov	r2, sl
 800ebfc:	465b      	mov	r3, fp
 800ebfe:	4640      	mov	r0, r8
 800ec00:	4649      	mov	r1, r9
 800ec02:	f7f1 ffe9 	bl	8000bd8 <__aeabi_uldivmod>
 800ec06:	4602      	mov	r2, r0
 800ec08:	460b      	mov	r3, r1
 800ec0a:	4613      	mov	r3, r2
 800ec0c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ec0e:	6a3b      	ldr	r3, [r7, #32]
 800ec10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ec14:	d308      	bcc.n	800ec28 <UART_SetConfig+0x430>
 800ec16:	6a3b      	ldr	r3, [r7, #32]
 800ec18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec1c:	d204      	bcs.n	800ec28 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	6a3a      	ldr	r2, [r7, #32]
 800ec24:	60da      	str	r2, [r3, #12]
 800ec26:	e0ce      	b.n	800edc6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ec28:	2301      	movs	r3, #1
 800ec2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ec2e:	e0ca      	b.n	800edc6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	69db      	ldr	r3, [r3, #28]
 800ec34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec38:	d166      	bne.n	800ed08 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ec3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ec3e:	2b08      	cmp	r3, #8
 800ec40:	d827      	bhi.n	800ec92 <UART_SetConfig+0x49a>
 800ec42:	a201      	add	r2, pc, #4	; (adr r2, 800ec48 <UART_SetConfig+0x450>)
 800ec44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec48:	0800ec6d 	.word	0x0800ec6d
 800ec4c:	0800ec75 	.word	0x0800ec75
 800ec50:	0800ec7d 	.word	0x0800ec7d
 800ec54:	0800ec93 	.word	0x0800ec93
 800ec58:	0800ec83 	.word	0x0800ec83
 800ec5c:	0800ec93 	.word	0x0800ec93
 800ec60:	0800ec93 	.word	0x0800ec93
 800ec64:	0800ec93 	.word	0x0800ec93
 800ec68:	0800ec8b 	.word	0x0800ec8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec6c:	f7fa fd4a 	bl	8009704 <HAL_RCC_GetPCLK1Freq>
 800ec70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ec72:	e014      	b.n	800ec9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec74:	f7fa fd5c 	bl	8009730 <HAL_RCC_GetPCLK2Freq>
 800ec78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ec7a:	e010      	b.n	800ec9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ec7c:	4b4e      	ldr	r3, [pc, #312]	; (800edb8 <UART_SetConfig+0x5c0>)
 800ec7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ec80:	e00d      	b.n	800ec9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ec82:	f7fa fca7 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 800ec86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ec88:	e009      	b.n	800ec9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ec90:	e005      	b.n	800ec9e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ec92:	2300      	movs	r3, #0
 800ec94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ec96:	2301      	movs	r3, #1
 800ec98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ec9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ec9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	f000 8090 	beq.w	800edc6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecaa:	4a44      	ldr	r2, [pc, #272]	; (800edbc <UART_SetConfig+0x5c4>)
 800ecac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecb8:	005a      	lsls	r2, r3, #1
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	085b      	lsrs	r3, r3, #1
 800ecc0:	441a      	add	r2, r3
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecca:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eccc:	6a3b      	ldr	r3, [r7, #32]
 800ecce:	2b0f      	cmp	r3, #15
 800ecd0:	d916      	bls.n	800ed00 <UART_SetConfig+0x508>
 800ecd2:	6a3b      	ldr	r3, [r7, #32]
 800ecd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecd8:	d212      	bcs.n	800ed00 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ecda:	6a3b      	ldr	r3, [r7, #32]
 800ecdc:	b29b      	uxth	r3, r3
 800ecde:	f023 030f 	bic.w	r3, r3, #15
 800ece2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ece4:	6a3b      	ldr	r3, [r7, #32]
 800ece6:	085b      	lsrs	r3, r3, #1
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	f003 0307 	and.w	r3, r3, #7
 800ecee:	b29a      	uxth	r2, r3
 800ecf0:	8bfb      	ldrh	r3, [r7, #30]
 800ecf2:	4313      	orrs	r3, r2
 800ecf4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	8bfa      	ldrh	r2, [r7, #30]
 800ecfc:	60da      	str	r2, [r3, #12]
 800ecfe:	e062      	b.n	800edc6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ed00:	2301      	movs	r3, #1
 800ed02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ed06:	e05e      	b.n	800edc6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ed08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ed0c:	2b08      	cmp	r3, #8
 800ed0e:	d828      	bhi.n	800ed62 <UART_SetConfig+0x56a>
 800ed10:	a201      	add	r2, pc, #4	; (adr r2, 800ed18 <UART_SetConfig+0x520>)
 800ed12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed16:	bf00      	nop
 800ed18:	0800ed3d 	.word	0x0800ed3d
 800ed1c:	0800ed45 	.word	0x0800ed45
 800ed20:	0800ed4d 	.word	0x0800ed4d
 800ed24:	0800ed63 	.word	0x0800ed63
 800ed28:	0800ed53 	.word	0x0800ed53
 800ed2c:	0800ed63 	.word	0x0800ed63
 800ed30:	0800ed63 	.word	0x0800ed63
 800ed34:	0800ed63 	.word	0x0800ed63
 800ed38:	0800ed5b 	.word	0x0800ed5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed3c:	f7fa fce2 	bl	8009704 <HAL_RCC_GetPCLK1Freq>
 800ed40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ed42:	e014      	b.n	800ed6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed44:	f7fa fcf4 	bl	8009730 <HAL_RCC_GetPCLK2Freq>
 800ed48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ed4a:	e010      	b.n	800ed6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ed4c:	4b1a      	ldr	r3, [pc, #104]	; (800edb8 <UART_SetConfig+0x5c0>)
 800ed4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ed50:	e00d      	b.n	800ed6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ed52:	f7fa fc3f 	bl	80095d4 <HAL_RCC_GetSysClockFreq>
 800ed56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ed58:	e009      	b.n	800ed6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ed60:	e005      	b.n	800ed6e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ed62:	2300      	movs	r3, #0
 800ed64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ed66:	2301      	movs	r3, #1
 800ed68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ed6c:	bf00      	nop
    }

    if (pclk != 0U)
 800ed6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d028      	beq.n	800edc6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed78:	4a10      	ldr	r2, [pc, #64]	; (800edbc <UART_SetConfig+0x5c4>)
 800ed7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed7e:	461a      	mov	r2, r3
 800ed80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed82:	fbb3 f2f2 	udiv	r2, r3, r2
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	085b      	lsrs	r3, r3, #1
 800ed8c:	441a      	add	r2, r3
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed96:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ed98:	6a3b      	ldr	r3, [r7, #32]
 800ed9a:	2b0f      	cmp	r3, #15
 800ed9c:	d910      	bls.n	800edc0 <UART_SetConfig+0x5c8>
 800ed9e:	6a3b      	ldr	r3, [r7, #32]
 800eda0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eda4:	d20c      	bcs.n	800edc0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eda6:	6a3b      	ldr	r3, [r7, #32]
 800eda8:	b29a      	uxth	r2, r3
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	60da      	str	r2, [r3, #12]
 800edb0:	e009      	b.n	800edc6 <UART_SetConfig+0x5ce>
 800edb2:	bf00      	nop
 800edb4:	40008000 	.word	0x40008000
 800edb8:	00f42400 	.word	0x00f42400
 800edbc:	08017680 	.word	0x08017680
      }
      else
      {
        ret = HAL_ERROR;
 800edc0:	2301      	movs	r3, #1
 800edc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	2201      	movs	r2, #1
 800edca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	2201      	movs	r2, #1
 800edd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	2200      	movs	r2, #0
 800edda:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	2200      	movs	r2, #0
 800ede0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ede2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3730      	adds	r7, #48	; 0x30
 800edea:	46bd      	mov	sp, r7
 800edec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800edf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edfc:	f003 0308 	and.w	r3, r3, #8
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d00a      	beq.n	800ee1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	430a      	orrs	r2, r1
 800ee18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee1e:	f003 0301 	and.w	r3, r3, #1
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d00a      	beq.n	800ee3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	430a      	orrs	r2, r1
 800ee3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee40:	f003 0302 	and.w	r3, r3, #2
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d00a      	beq.n	800ee5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	430a      	orrs	r2, r1
 800ee5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee62:	f003 0304 	and.w	r3, r3, #4
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d00a      	beq.n	800ee80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	430a      	orrs	r2, r1
 800ee7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee84:	f003 0310 	and.w	r3, r3, #16
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d00a      	beq.n	800eea2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	430a      	orrs	r2, r1
 800eea0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eea6:	f003 0320 	and.w	r3, r3, #32
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d00a      	beq.n	800eec4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	689b      	ldr	r3, [r3, #8]
 800eeb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	430a      	orrs	r2, r1
 800eec2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d01a      	beq.n	800ef06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	685b      	ldr	r3, [r3, #4]
 800eed6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	430a      	orrs	r2, r1
 800eee4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eeea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eeee:	d10a      	bne.n	800ef06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	430a      	orrs	r2, r1
 800ef04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d00a      	beq.n	800ef28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	430a      	orrs	r2, r1
 800ef26:	605a      	str	r2, [r3, #4]
  }
}
 800ef28:	bf00      	nop
 800ef2a:	370c      	adds	r7, #12
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b098      	sub	sp, #96	; 0x60
 800ef38:	af02      	add	r7, sp, #8
 800ef3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ef44:	f7f7 fae0 	bl	8006508 <HAL_GetTick>
 800ef48:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f003 0308 	and.w	r3, r3, #8
 800ef54:	2b08      	cmp	r3, #8
 800ef56:	d12f      	bne.n	800efb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ef5c:	9300      	str	r3, [sp, #0]
 800ef5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef60:	2200      	movs	r2, #0
 800ef62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 f88e 	bl	800f088 <UART_WaitOnFlagUntilTimeout>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d022      	beq.n	800efb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef7a:	e853 3f00 	ldrex	r3, [r3]
 800ef7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ef80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef86:	653b      	str	r3, [r7, #80]	; 0x50
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef90:	647b      	str	r3, [r7, #68]	; 0x44
 800ef92:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ef96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef98:	e841 2300 	strex	r3, r2, [r1]
 800ef9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ef9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d1e6      	bne.n	800ef72 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2220      	movs	r2, #32
 800efa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2200      	movs	r2, #0
 800efb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800efb4:	2303      	movs	r3, #3
 800efb6:	e063      	b.n	800f080 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f003 0304 	and.w	r3, r3, #4
 800efc2:	2b04      	cmp	r3, #4
 800efc4:	d149      	bne.n	800f05a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800efc6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800efca:	9300      	str	r3, [sp, #0]
 800efcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efce:	2200      	movs	r2, #0
 800efd0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f000 f857 	bl	800f088 <UART_WaitOnFlagUntilTimeout>
 800efda:	4603      	mov	r3, r0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d03c      	beq.n	800f05a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe8:	e853 3f00 	ldrex	r3, [r3]
 800efec:	623b      	str	r3, [r7, #32]
   return(result);
 800efee:	6a3b      	ldr	r3, [r7, #32]
 800eff0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eff4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	461a      	mov	r2, r3
 800effc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800effe:	633b      	str	r3, [r7, #48]	; 0x30
 800f000:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f002:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f006:	e841 2300 	strex	r3, r2, [r1]
 800f00a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d1e6      	bne.n	800efe0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	3308      	adds	r3, #8
 800f018:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	e853 3f00 	ldrex	r3, [r3]
 800f020:	60fb      	str	r3, [r7, #12]
   return(result);
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f023 0301 	bic.w	r3, r3, #1
 800f028:	64bb      	str	r3, [r7, #72]	; 0x48
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	3308      	adds	r3, #8
 800f030:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f032:	61fa      	str	r2, [r7, #28]
 800f034:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f036:	69b9      	ldr	r1, [r7, #24]
 800f038:	69fa      	ldr	r2, [r7, #28]
 800f03a:	e841 2300 	strex	r3, r2, [r1]
 800f03e:	617b      	str	r3, [r7, #20]
   return(result);
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d1e5      	bne.n	800f012 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2220      	movs	r2, #32
 800f04a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2200      	movs	r2, #0
 800f052:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f056:	2303      	movs	r3, #3
 800f058:	e012      	b.n	800f080 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2220      	movs	r2, #32
 800f05e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2220      	movs	r2, #32
 800f066:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2200      	movs	r2, #0
 800f06e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2200      	movs	r2, #0
 800f074:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2200      	movs	r2, #0
 800f07a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f07e:	2300      	movs	r3, #0
}
 800f080:	4618      	mov	r0, r3
 800f082:	3758      	adds	r7, #88	; 0x58
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}

0800f088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	603b      	str	r3, [r7, #0]
 800f094:	4613      	mov	r3, r2
 800f096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f098:	e049      	b.n	800f12e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f09a:	69bb      	ldr	r3, [r7, #24]
 800f09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0a0:	d045      	beq.n	800f12e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f0a2:	f7f7 fa31 	bl	8006508 <HAL_GetTick>
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	1ad3      	subs	r3, r2, r3
 800f0ac:	69ba      	ldr	r2, [r7, #24]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d302      	bcc.n	800f0b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d101      	bne.n	800f0bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f0b8:	2303      	movs	r3, #3
 800f0ba:	e048      	b.n	800f14e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f003 0304 	and.w	r3, r3, #4
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d031      	beq.n	800f12e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	69db      	ldr	r3, [r3, #28]
 800f0d0:	f003 0308 	and.w	r3, r3, #8
 800f0d4:	2b08      	cmp	r3, #8
 800f0d6:	d110      	bne.n	800f0fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	2208      	movs	r2, #8
 800f0de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f0e0:	68f8      	ldr	r0, [r7, #12]
 800f0e2:	f000 f838 	bl	800f156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2208      	movs	r2, #8
 800f0ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	e029      	b.n	800f14e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	69db      	ldr	r3, [r3, #28]
 800f100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f108:	d111      	bne.n	800f12e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f114:	68f8      	ldr	r0, [r7, #12]
 800f116:	f000 f81e 	bl	800f156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	2220      	movs	r2, #32
 800f11e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	2200      	movs	r2, #0
 800f126:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f12a:	2303      	movs	r3, #3
 800f12c:	e00f      	b.n	800f14e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	69da      	ldr	r2, [r3, #28]
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	4013      	ands	r3, r2
 800f138:	68ba      	ldr	r2, [r7, #8]
 800f13a:	429a      	cmp	r2, r3
 800f13c:	bf0c      	ite	eq
 800f13e:	2301      	moveq	r3, #1
 800f140:	2300      	movne	r3, #0
 800f142:	b2db      	uxtb	r3, r3
 800f144:	461a      	mov	r2, r3
 800f146:	79fb      	ldrb	r3, [r7, #7]
 800f148:	429a      	cmp	r2, r3
 800f14a:	d0a6      	beq.n	800f09a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f14c:	2300      	movs	r3, #0
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3710      	adds	r7, #16
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}

0800f156 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f156:	b480      	push	{r7}
 800f158:	b095      	sub	sp, #84	; 0x54
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f166:	e853 3f00 	ldrex	r3, [r3]
 800f16a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f16e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f172:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	461a      	mov	r2, r3
 800f17a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f17c:	643b      	str	r3, [r7, #64]	; 0x40
 800f17e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f180:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f182:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f184:	e841 2300 	strex	r3, r2, [r1]
 800f188:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d1e6      	bne.n	800f15e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	3308      	adds	r3, #8
 800f196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f198:	6a3b      	ldr	r3, [r7, #32]
 800f19a:	e853 3f00 	ldrex	r3, [r3]
 800f19e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f1a6:	f023 0301 	bic.w	r3, r3, #1
 800f1aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	3308      	adds	r3, #8
 800f1b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f1b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1bc:	e841 2300 	strex	r3, r2, [r1]
 800f1c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d1e3      	bne.n	800f190 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1cc:	2b01      	cmp	r3, #1
 800f1ce:	d118      	bne.n	800f202 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	e853 3f00 	ldrex	r3, [r3]
 800f1dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	f023 0310 	bic.w	r3, r3, #16
 800f1e4:	647b      	str	r3, [r7, #68]	; 0x44
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1ee:	61bb      	str	r3, [r7, #24]
 800f1f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1f2:	6979      	ldr	r1, [r7, #20]
 800f1f4:	69ba      	ldr	r2, [r7, #24]
 800f1f6:	e841 2300 	strex	r3, r2, [r1]
 800f1fa:	613b      	str	r3, [r7, #16]
   return(result);
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d1e6      	bne.n	800f1d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2220      	movs	r2, #32
 800f206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2200      	movs	r2, #0
 800f20e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2200      	movs	r2, #0
 800f214:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f216:	bf00      	nop
 800f218:	3754      	adds	r7, #84	; 0x54
 800f21a:	46bd      	mov	sp, r7
 800f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f220:	4770      	bx	lr

0800f222 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f222:	b480      	push	{r7}
 800f224:	b085      	sub	sp, #20
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f230:	2b01      	cmp	r3, #1
 800f232:	d101      	bne.n	800f238 <HAL_UARTEx_DisableFifoMode+0x16>
 800f234:	2302      	movs	r3, #2
 800f236:	e027      	b.n	800f288 <HAL_UARTEx_DisableFifoMode+0x66>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2201      	movs	r2, #1
 800f23c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2224      	movs	r2, #36	; 0x24
 800f244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	681a      	ldr	r2, [r3, #0]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	f022 0201 	bic.w	r2, r2, #1
 800f25e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f266:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	68fa      	ldr	r2, [r7, #12]
 800f274:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2220      	movs	r2, #32
 800f27a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2200      	movs	r2, #0
 800f282:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f286:	2300      	movs	r3, #0
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3714      	adds	r7, #20
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b084      	sub	sp, #16
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f2a4:	2b01      	cmp	r3, #1
 800f2a6:	d101      	bne.n	800f2ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f2a8:	2302      	movs	r3, #2
 800f2aa:	e02d      	b.n	800f308 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2224      	movs	r2, #36	; 0x24
 800f2b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	681a      	ldr	r2, [r3, #0]
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	f022 0201 	bic.w	r2, r2, #1
 800f2d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	689b      	ldr	r3, [r3, #8]
 800f2da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	683a      	ldr	r2, [r7, #0]
 800f2e4:	430a      	orrs	r2, r1
 800f2e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 f84f 	bl	800f38c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	68fa      	ldr	r2, [r7, #12]
 800f2f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2220      	movs	r2, #32
 800f2fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2200      	movs	r2, #0
 800f302:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f306:	2300      	movs	r3, #0
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3710      	adds	r7, #16
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}

0800f310 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b084      	sub	sp, #16
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f320:	2b01      	cmp	r3, #1
 800f322:	d101      	bne.n	800f328 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f324:	2302      	movs	r3, #2
 800f326:	e02d      	b.n	800f384 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2201      	movs	r2, #1
 800f32c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2224      	movs	r2, #36	; 0x24
 800f334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	681a      	ldr	r2, [r3, #0]
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	f022 0201 	bic.w	r2, r2, #1
 800f34e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	689b      	ldr	r3, [r3, #8]
 800f356:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	683a      	ldr	r2, [r7, #0]
 800f360:	430a      	orrs	r2, r1
 800f362:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f000 f811 	bl	800f38c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	68fa      	ldr	r2, [r7, #12]
 800f370:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2220      	movs	r2, #32
 800f376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2200      	movs	r2, #0
 800f37e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f382:	2300      	movs	r3, #0
}
 800f384:	4618      	mov	r0, r3
 800f386:	3710      	adds	r7, #16
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b085      	sub	sp, #20
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d108      	bne.n	800f3ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2201      	movs	r2, #1
 800f3a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f3ac:	e031      	b.n	800f412 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f3ae:	2308      	movs	r3, #8
 800f3b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f3b2:	2308      	movs	r3, #8
 800f3b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	0e5b      	lsrs	r3, r3, #25
 800f3be:	b2db      	uxtb	r3, r3
 800f3c0:	f003 0307 	and.w	r3, r3, #7
 800f3c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	0f5b      	lsrs	r3, r3, #29
 800f3ce:	b2db      	uxtb	r3, r3
 800f3d0:	f003 0307 	and.w	r3, r3, #7
 800f3d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f3d6:	7bbb      	ldrb	r3, [r7, #14]
 800f3d8:	7b3a      	ldrb	r2, [r7, #12]
 800f3da:	4911      	ldr	r1, [pc, #68]	; (800f420 <UARTEx_SetNbDataToProcess+0x94>)
 800f3dc:	5c8a      	ldrb	r2, [r1, r2]
 800f3de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f3e2:	7b3a      	ldrb	r2, [r7, #12]
 800f3e4:	490f      	ldr	r1, [pc, #60]	; (800f424 <UARTEx_SetNbDataToProcess+0x98>)
 800f3e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f3e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f3ec:	b29a      	uxth	r2, r3
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f3f4:	7bfb      	ldrb	r3, [r7, #15]
 800f3f6:	7b7a      	ldrb	r2, [r7, #13]
 800f3f8:	4909      	ldr	r1, [pc, #36]	; (800f420 <UARTEx_SetNbDataToProcess+0x94>)
 800f3fa:	5c8a      	ldrb	r2, [r1, r2]
 800f3fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f400:	7b7a      	ldrb	r2, [r7, #13]
 800f402:	4908      	ldr	r1, [pc, #32]	; (800f424 <UARTEx_SetNbDataToProcess+0x98>)
 800f404:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f406:	fb93 f3f2 	sdiv	r3, r3, r2
 800f40a:	b29a      	uxth	r2, r3
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f412:	bf00      	nop
 800f414:	3714      	adds	r7, #20
 800f416:	46bd      	mov	sp, r7
 800f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41c:	4770      	bx	lr
 800f41e:	bf00      	nop
 800f420:	08017698 	.word	0x08017698
 800f424:	080176a0 	.word	0x080176a0

0800f428 <malloc>:
 800f428:	4b02      	ldr	r3, [pc, #8]	; (800f434 <malloc+0xc>)
 800f42a:	4601      	mov	r1, r0
 800f42c:	6818      	ldr	r0, [r3, #0]
 800f42e:	f000 b823 	b.w	800f478 <_malloc_r>
 800f432:	bf00      	nop
 800f434:	20000084 	.word	0x20000084

0800f438 <sbrk_aligned>:
 800f438:	b570      	push	{r4, r5, r6, lr}
 800f43a:	4e0e      	ldr	r6, [pc, #56]	; (800f474 <sbrk_aligned+0x3c>)
 800f43c:	460c      	mov	r4, r1
 800f43e:	6831      	ldr	r1, [r6, #0]
 800f440:	4605      	mov	r5, r0
 800f442:	b911      	cbnz	r1, 800f44a <sbrk_aligned+0x12>
 800f444:	f000 fe84 	bl	8010150 <_sbrk_r>
 800f448:	6030      	str	r0, [r6, #0]
 800f44a:	4621      	mov	r1, r4
 800f44c:	4628      	mov	r0, r5
 800f44e:	f000 fe7f 	bl	8010150 <_sbrk_r>
 800f452:	1c43      	adds	r3, r0, #1
 800f454:	d00a      	beq.n	800f46c <sbrk_aligned+0x34>
 800f456:	1cc4      	adds	r4, r0, #3
 800f458:	f024 0403 	bic.w	r4, r4, #3
 800f45c:	42a0      	cmp	r0, r4
 800f45e:	d007      	beq.n	800f470 <sbrk_aligned+0x38>
 800f460:	1a21      	subs	r1, r4, r0
 800f462:	4628      	mov	r0, r5
 800f464:	f000 fe74 	bl	8010150 <_sbrk_r>
 800f468:	3001      	adds	r0, #1
 800f46a:	d101      	bne.n	800f470 <sbrk_aligned+0x38>
 800f46c:	f04f 34ff 	mov.w	r4, #4294967295
 800f470:	4620      	mov	r0, r4
 800f472:	bd70      	pop	{r4, r5, r6, pc}
 800f474:	20000aac 	.word	0x20000aac

0800f478 <_malloc_r>:
 800f478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f47c:	1ccd      	adds	r5, r1, #3
 800f47e:	f025 0503 	bic.w	r5, r5, #3
 800f482:	3508      	adds	r5, #8
 800f484:	2d0c      	cmp	r5, #12
 800f486:	bf38      	it	cc
 800f488:	250c      	movcc	r5, #12
 800f48a:	2d00      	cmp	r5, #0
 800f48c:	4607      	mov	r7, r0
 800f48e:	db01      	blt.n	800f494 <_malloc_r+0x1c>
 800f490:	42a9      	cmp	r1, r5
 800f492:	d905      	bls.n	800f4a0 <_malloc_r+0x28>
 800f494:	230c      	movs	r3, #12
 800f496:	603b      	str	r3, [r7, #0]
 800f498:	2600      	movs	r6, #0
 800f49a:	4630      	mov	r0, r6
 800f49c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f574 <_malloc_r+0xfc>
 800f4a4:	f000 f868 	bl	800f578 <__malloc_lock>
 800f4a8:	f8d8 3000 	ldr.w	r3, [r8]
 800f4ac:	461c      	mov	r4, r3
 800f4ae:	bb5c      	cbnz	r4, 800f508 <_malloc_r+0x90>
 800f4b0:	4629      	mov	r1, r5
 800f4b2:	4638      	mov	r0, r7
 800f4b4:	f7ff ffc0 	bl	800f438 <sbrk_aligned>
 800f4b8:	1c43      	adds	r3, r0, #1
 800f4ba:	4604      	mov	r4, r0
 800f4bc:	d155      	bne.n	800f56a <_malloc_r+0xf2>
 800f4be:	f8d8 4000 	ldr.w	r4, [r8]
 800f4c2:	4626      	mov	r6, r4
 800f4c4:	2e00      	cmp	r6, #0
 800f4c6:	d145      	bne.n	800f554 <_malloc_r+0xdc>
 800f4c8:	2c00      	cmp	r4, #0
 800f4ca:	d048      	beq.n	800f55e <_malloc_r+0xe6>
 800f4cc:	6823      	ldr	r3, [r4, #0]
 800f4ce:	4631      	mov	r1, r6
 800f4d0:	4638      	mov	r0, r7
 800f4d2:	eb04 0903 	add.w	r9, r4, r3
 800f4d6:	f000 fe3b 	bl	8010150 <_sbrk_r>
 800f4da:	4581      	cmp	r9, r0
 800f4dc:	d13f      	bne.n	800f55e <_malloc_r+0xe6>
 800f4de:	6821      	ldr	r1, [r4, #0]
 800f4e0:	1a6d      	subs	r5, r5, r1
 800f4e2:	4629      	mov	r1, r5
 800f4e4:	4638      	mov	r0, r7
 800f4e6:	f7ff ffa7 	bl	800f438 <sbrk_aligned>
 800f4ea:	3001      	adds	r0, #1
 800f4ec:	d037      	beq.n	800f55e <_malloc_r+0xe6>
 800f4ee:	6823      	ldr	r3, [r4, #0]
 800f4f0:	442b      	add	r3, r5
 800f4f2:	6023      	str	r3, [r4, #0]
 800f4f4:	f8d8 3000 	ldr.w	r3, [r8]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d038      	beq.n	800f56e <_malloc_r+0xf6>
 800f4fc:	685a      	ldr	r2, [r3, #4]
 800f4fe:	42a2      	cmp	r2, r4
 800f500:	d12b      	bne.n	800f55a <_malloc_r+0xe2>
 800f502:	2200      	movs	r2, #0
 800f504:	605a      	str	r2, [r3, #4]
 800f506:	e00f      	b.n	800f528 <_malloc_r+0xb0>
 800f508:	6822      	ldr	r2, [r4, #0]
 800f50a:	1b52      	subs	r2, r2, r5
 800f50c:	d41f      	bmi.n	800f54e <_malloc_r+0xd6>
 800f50e:	2a0b      	cmp	r2, #11
 800f510:	d917      	bls.n	800f542 <_malloc_r+0xca>
 800f512:	1961      	adds	r1, r4, r5
 800f514:	42a3      	cmp	r3, r4
 800f516:	6025      	str	r5, [r4, #0]
 800f518:	bf18      	it	ne
 800f51a:	6059      	strne	r1, [r3, #4]
 800f51c:	6863      	ldr	r3, [r4, #4]
 800f51e:	bf08      	it	eq
 800f520:	f8c8 1000 	streq.w	r1, [r8]
 800f524:	5162      	str	r2, [r4, r5]
 800f526:	604b      	str	r3, [r1, #4]
 800f528:	4638      	mov	r0, r7
 800f52a:	f104 060b 	add.w	r6, r4, #11
 800f52e:	f000 f829 	bl	800f584 <__malloc_unlock>
 800f532:	f026 0607 	bic.w	r6, r6, #7
 800f536:	1d23      	adds	r3, r4, #4
 800f538:	1af2      	subs	r2, r6, r3
 800f53a:	d0ae      	beq.n	800f49a <_malloc_r+0x22>
 800f53c:	1b9b      	subs	r3, r3, r6
 800f53e:	50a3      	str	r3, [r4, r2]
 800f540:	e7ab      	b.n	800f49a <_malloc_r+0x22>
 800f542:	42a3      	cmp	r3, r4
 800f544:	6862      	ldr	r2, [r4, #4]
 800f546:	d1dd      	bne.n	800f504 <_malloc_r+0x8c>
 800f548:	f8c8 2000 	str.w	r2, [r8]
 800f54c:	e7ec      	b.n	800f528 <_malloc_r+0xb0>
 800f54e:	4623      	mov	r3, r4
 800f550:	6864      	ldr	r4, [r4, #4]
 800f552:	e7ac      	b.n	800f4ae <_malloc_r+0x36>
 800f554:	4634      	mov	r4, r6
 800f556:	6876      	ldr	r6, [r6, #4]
 800f558:	e7b4      	b.n	800f4c4 <_malloc_r+0x4c>
 800f55a:	4613      	mov	r3, r2
 800f55c:	e7cc      	b.n	800f4f8 <_malloc_r+0x80>
 800f55e:	230c      	movs	r3, #12
 800f560:	603b      	str	r3, [r7, #0]
 800f562:	4638      	mov	r0, r7
 800f564:	f000 f80e 	bl	800f584 <__malloc_unlock>
 800f568:	e797      	b.n	800f49a <_malloc_r+0x22>
 800f56a:	6025      	str	r5, [r4, #0]
 800f56c:	e7dc      	b.n	800f528 <_malloc_r+0xb0>
 800f56e:	605b      	str	r3, [r3, #4]
 800f570:	deff      	udf	#255	; 0xff
 800f572:	bf00      	nop
 800f574:	20000aa8 	.word	0x20000aa8

0800f578 <__malloc_lock>:
 800f578:	4801      	ldr	r0, [pc, #4]	; (800f580 <__malloc_lock+0x8>)
 800f57a:	f000 be36 	b.w	80101ea <__retarget_lock_acquire_recursive>
 800f57e:	bf00      	nop
 800f580:	20000bf0 	.word	0x20000bf0

0800f584 <__malloc_unlock>:
 800f584:	4801      	ldr	r0, [pc, #4]	; (800f58c <__malloc_unlock+0x8>)
 800f586:	f000 be31 	b.w	80101ec <__retarget_lock_release_recursive>
 800f58a:	bf00      	nop
 800f58c:	20000bf0 	.word	0x20000bf0

0800f590 <__cvt>:
 800f590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f594:	ec55 4b10 	vmov	r4, r5, d0
 800f598:	2d00      	cmp	r5, #0
 800f59a:	460e      	mov	r6, r1
 800f59c:	4619      	mov	r1, r3
 800f59e:	462b      	mov	r3, r5
 800f5a0:	bfbb      	ittet	lt
 800f5a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f5a6:	461d      	movlt	r5, r3
 800f5a8:	2300      	movge	r3, #0
 800f5aa:	232d      	movlt	r3, #45	; 0x2d
 800f5ac:	700b      	strb	r3, [r1, #0]
 800f5ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f5b4:	4691      	mov	r9, r2
 800f5b6:	f023 0820 	bic.w	r8, r3, #32
 800f5ba:	bfbc      	itt	lt
 800f5bc:	4622      	movlt	r2, r4
 800f5be:	4614      	movlt	r4, r2
 800f5c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f5c4:	d005      	beq.n	800f5d2 <__cvt+0x42>
 800f5c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f5ca:	d100      	bne.n	800f5ce <__cvt+0x3e>
 800f5cc:	3601      	adds	r6, #1
 800f5ce:	2102      	movs	r1, #2
 800f5d0:	e000      	b.n	800f5d4 <__cvt+0x44>
 800f5d2:	2103      	movs	r1, #3
 800f5d4:	ab03      	add	r3, sp, #12
 800f5d6:	9301      	str	r3, [sp, #4]
 800f5d8:	ab02      	add	r3, sp, #8
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	ec45 4b10 	vmov	d0, r4, r5
 800f5e0:	4653      	mov	r3, sl
 800f5e2:	4632      	mov	r2, r6
 800f5e4:	f000 fe9c 	bl	8010320 <_dtoa_r>
 800f5e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f5ec:	4607      	mov	r7, r0
 800f5ee:	d102      	bne.n	800f5f6 <__cvt+0x66>
 800f5f0:	f019 0f01 	tst.w	r9, #1
 800f5f4:	d022      	beq.n	800f63c <__cvt+0xac>
 800f5f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f5fa:	eb07 0906 	add.w	r9, r7, r6
 800f5fe:	d110      	bne.n	800f622 <__cvt+0x92>
 800f600:	783b      	ldrb	r3, [r7, #0]
 800f602:	2b30      	cmp	r3, #48	; 0x30
 800f604:	d10a      	bne.n	800f61c <__cvt+0x8c>
 800f606:	2200      	movs	r2, #0
 800f608:	2300      	movs	r3, #0
 800f60a:	4620      	mov	r0, r4
 800f60c:	4629      	mov	r1, r5
 800f60e:	f7f1 fa73 	bl	8000af8 <__aeabi_dcmpeq>
 800f612:	b918      	cbnz	r0, 800f61c <__cvt+0x8c>
 800f614:	f1c6 0601 	rsb	r6, r6, #1
 800f618:	f8ca 6000 	str.w	r6, [sl]
 800f61c:	f8da 3000 	ldr.w	r3, [sl]
 800f620:	4499      	add	r9, r3
 800f622:	2200      	movs	r2, #0
 800f624:	2300      	movs	r3, #0
 800f626:	4620      	mov	r0, r4
 800f628:	4629      	mov	r1, r5
 800f62a:	f7f1 fa65 	bl	8000af8 <__aeabi_dcmpeq>
 800f62e:	b108      	cbz	r0, 800f634 <__cvt+0xa4>
 800f630:	f8cd 900c 	str.w	r9, [sp, #12]
 800f634:	2230      	movs	r2, #48	; 0x30
 800f636:	9b03      	ldr	r3, [sp, #12]
 800f638:	454b      	cmp	r3, r9
 800f63a:	d307      	bcc.n	800f64c <__cvt+0xbc>
 800f63c:	9b03      	ldr	r3, [sp, #12]
 800f63e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f640:	1bdb      	subs	r3, r3, r7
 800f642:	4638      	mov	r0, r7
 800f644:	6013      	str	r3, [r2, #0]
 800f646:	b004      	add	sp, #16
 800f648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f64c:	1c59      	adds	r1, r3, #1
 800f64e:	9103      	str	r1, [sp, #12]
 800f650:	701a      	strb	r2, [r3, #0]
 800f652:	e7f0      	b.n	800f636 <__cvt+0xa6>

0800f654 <__exponent>:
 800f654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f656:	4603      	mov	r3, r0
 800f658:	2900      	cmp	r1, #0
 800f65a:	bfb8      	it	lt
 800f65c:	4249      	neglt	r1, r1
 800f65e:	f803 2b02 	strb.w	r2, [r3], #2
 800f662:	bfb4      	ite	lt
 800f664:	222d      	movlt	r2, #45	; 0x2d
 800f666:	222b      	movge	r2, #43	; 0x2b
 800f668:	2909      	cmp	r1, #9
 800f66a:	7042      	strb	r2, [r0, #1]
 800f66c:	dd2a      	ble.n	800f6c4 <__exponent+0x70>
 800f66e:	f10d 0207 	add.w	r2, sp, #7
 800f672:	4617      	mov	r7, r2
 800f674:	260a      	movs	r6, #10
 800f676:	4694      	mov	ip, r2
 800f678:	fb91 f5f6 	sdiv	r5, r1, r6
 800f67c:	fb06 1415 	mls	r4, r6, r5, r1
 800f680:	3430      	adds	r4, #48	; 0x30
 800f682:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f686:	460c      	mov	r4, r1
 800f688:	2c63      	cmp	r4, #99	; 0x63
 800f68a:	f102 32ff 	add.w	r2, r2, #4294967295
 800f68e:	4629      	mov	r1, r5
 800f690:	dcf1      	bgt.n	800f676 <__exponent+0x22>
 800f692:	3130      	adds	r1, #48	; 0x30
 800f694:	f1ac 0402 	sub.w	r4, ip, #2
 800f698:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f69c:	1c41      	adds	r1, r0, #1
 800f69e:	4622      	mov	r2, r4
 800f6a0:	42ba      	cmp	r2, r7
 800f6a2:	d30a      	bcc.n	800f6ba <__exponent+0x66>
 800f6a4:	f10d 0209 	add.w	r2, sp, #9
 800f6a8:	eba2 020c 	sub.w	r2, r2, ip
 800f6ac:	42bc      	cmp	r4, r7
 800f6ae:	bf88      	it	hi
 800f6b0:	2200      	movhi	r2, #0
 800f6b2:	4413      	add	r3, r2
 800f6b4:	1a18      	subs	r0, r3, r0
 800f6b6:	b003      	add	sp, #12
 800f6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f6be:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f6c2:	e7ed      	b.n	800f6a0 <__exponent+0x4c>
 800f6c4:	2330      	movs	r3, #48	; 0x30
 800f6c6:	3130      	adds	r1, #48	; 0x30
 800f6c8:	7083      	strb	r3, [r0, #2]
 800f6ca:	70c1      	strb	r1, [r0, #3]
 800f6cc:	1d03      	adds	r3, r0, #4
 800f6ce:	e7f1      	b.n	800f6b4 <__exponent+0x60>

0800f6d0 <_printf_float>:
 800f6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d4:	ed2d 8b02 	vpush	{d8}
 800f6d8:	b08d      	sub	sp, #52	; 0x34
 800f6da:	460c      	mov	r4, r1
 800f6dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f6e0:	4616      	mov	r6, r2
 800f6e2:	461f      	mov	r7, r3
 800f6e4:	4605      	mov	r5, r0
 800f6e6:	f000 fcfb 	bl	80100e0 <_localeconv_r>
 800f6ea:	f8d0 a000 	ldr.w	sl, [r0]
 800f6ee:	4650      	mov	r0, sl
 800f6f0:	f7f0 fdd6 	bl	80002a0 <strlen>
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	930a      	str	r3, [sp, #40]	; 0x28
 800f6f8:	6823      	ldr	r3, [r4, #0]
 800f6fa:	9305      	str	r3, [sp, #20]
 800f6fc:	f8d8 3000 	ldr.w	r3, [r8]
 800f700:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f704:	3307      	adds	r3, #7
 800f706:	f023 0307 	bic.w	r3, r3, #7
 800f70a:	f103 0208 	add.w	r2, r3, #8
 800f70e:	f8c8 2000 	str.w	r2, [r8]
 800f712:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f716:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f71a:	9307      	str	r3, [sp, #28]
 800f71c:	f8cd 8018 	str.w	r8, [sp, #24]
 800f720:	ee08 0a10 	vmov	s16, r0
 800f724:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f728:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f72c:	4b9e      	ldr	r3, [pc, #632]	; (800f9a8 <_printf_float+0x2d8>)
 800f72e:	f04f 32ff 	mov.w	r2, #4294967295
 800f732:	f7f1 fa13 	bl	8000b5c <__aeabi_dcmpun>
 800f736:	bb88      	cbnz	r0, 800f79c <_printf_float+0xcc>
 800f738:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f73c:	4b9a      	ldr	r3, [pc, #616]	; (800f9a8 <_printf_float+0x2d8>)
 800f73e:	f04f 32ff 	mov.w	r2, #4294967295
 800f742:	f7f1 f9ed 	bl	8000b20 <__aeabi_dcmple>
 800f746:	bb48      	cbnz	r0, 800f79c <_printf_float+0xcc>
 800f748:	2200      	movs	r2, #0
 800f74a:	2300      	movs	r3, #0
 800f74c:	4640      	mov	r0, r8
 800f74e:	4649      	mov	r1, r9
 800f750:	f7f1 f9dc 	bl	8000b0c <__aeabi_dcmplt>
 800f754:	b110      	cbz	r0, 800f75c <_printf_float+0x8c>
 800f756:	232d      	movs	r3, #45	; 0x2d
 800f758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f75c:	4a93      	ldr	r2, [pc, #588]	; (800f9ac <_printf_float+0x2dc>)
 800f75e:	4b94      	ldr	r3, [pc, #592]	; (800f9b0 <_printf_float+0x2e0>)
 800f760:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f764:	bf94      	ite	ls
 800f766:	4690      	movls	r8, r2
 800f768:	4698      	movhi	r8, r3
 800f76a:	2303      	movs	r3, #3
 800f76c:	6123      	str	r3, [r4, #16]
 800f76e:	9b05      	ldr	r3, [sp, #20]
 800f770:	f023 0304 	bic.w	r3, r3, #4
 800f774:	6023      	str	r3, [r4, #0]
 800f776:	f04f 0900 	mov.w	r9, #0
 800f77a:	9700      	str	r7, [sp, #0]
 800f77c:	4633      	mov	r3, r6
 800f77e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f780:	4621      	mov	r1, r4
 800f782:	4628      	mov	r0, r5
 800f784:	f000 f9da 	bl	800fb3c <_printf_common>
 800f788:	3001      	adds	r0, #1
 800f78a:	f040 8090 	bne.w	800f8ae <_printf_float+0x1de>
 800f78e:	f04f 30ff 	mov.w	r0, #4294967295
 800f792:	b00d      	add	sp, #52	; 0x34
 800f794:	ecbd 8b02 	vpop	{d8}
 800f798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f79c:	4642      	mov	r2, r8
 800f79e:	464b      	mov	r3, r9
 800f7a0:	4640      	mov	r0, r8
 800f7a2:	4649      	mov	r1, r9
 800f7a4:	f7f1 f9da 	bl	8000b5c <__aeabi_dcmpun>
 800f7a8:	b140      	cbz	r0, 800f7bc <_printf_float+0xec>
 800f7aa:	464b      	mov	r3, r9
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	bfbc      	itt	lt
 800f7b0:	232d      	movlt	r3, #45	; 0x2d
 800f7b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f7b6:	4a7f      	ldr	r2, [pc, #508]	; (800f9b4 <_printf_float+0x2e4>)
 800f7b8:	4b7f      	ldr	r3, [pc, #508]	; (800f9b8 <_printf_float+0x2e8>)
 800f7ba:	e7d1      	b.n	800f760 <_printf_float+0x90>
 800f7bc:	6863      	ldr	r3, [r4, #4]
 800f7be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f7c2:	9206      	str	r2, [sp, #24]
 800f7c4:	1c5a      	adds	r2, r3, #1
 800f7c6:	d13f      	bne.n	800f848 <_printf_float+0x178>
 800f7c8:	2306      	movs	r3, #6
 800f7ca:	6063      	str	r3, [r4, #4]
 800f7cc:	9b05      	ldr	r3, [sp, #20]
 800f7ce:	6861      	ldr	r1, [r4, #4]
 800f7d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	9303      	str	r3, [sp, #12]
 800f7d8:	ab0a      	add	r3, sp, #40	; 0x28
 800f7da:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f7de:	ab09      	add	r3, sp, #36	; 0x24
 800f7e0:	ec49 8b10 	vmov	d0, r8, r9
 800f7e4:	9300      	str	r3, [sp, #0]
 800f7e6:	6022      	str	r2, [r4, #0]
 800f7e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	f7ff fecf 	bl	800f590 <__cvt>
 800f7f2:	9b06      	ldr	r3, [sp, #24]
 800f7f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f7f6:	2b47      	cmp	r3, #71	; 0x47
 800f7f8:	4680      	mov	r8, r0
 800f7fa:	d108      	bne.n	800f80e <_printf_float+0x13e>
 800f7fc:	1cc8      	adds	r0, r1, #3
 800f7fe:	db02      	blt.n	800f806 <_printf_float+0x136>
 800f800:	6863      	ldr	r3, [r4, #4]
 800f802:	4299      	cmp	r1, r3
 800f804:	dd41      	ble.n	800f88a <_printf_float+0x1ba>
 800f806:	f1ab 0302 	sub.w	r3, fp, #2
 800f80a:	fa5f fb83 	uxtb.w	fp, r3
 800f80e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f812:	d820      	bhi.n	800f856 <_printf_float+0x186>
 800f814:	3901      	subs	r1, #1
 800f816:	465a      	mov	r2, fp
 800f818:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f81c:	9109      	str	r1, [sp, #36]	; 0x24
 800f81e:	f7ff ff19 	bl	800f654 <__exponent>
 800f822:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f824:	1813      	adds	r3, r2, r0
 800f826:	2a01      	cmp	r2, #1
 800f828:	4681      	mov	r9, r0
 800f82a:	6123      	str	r3, [r4, #16]
 800f82c:	dc02      	bgt.n	800f834 <_printf_float+0x164>
 800f82e:	6822      	ldr	r2, [r4, #0]
 800f830:	07d2      	lsls	r2, r2, #31
 800f832:	d501      	bpl.n	800f838 <_printf_float+0x168>
 800f834:	3301      	adds	r3, #1
 800f836:	6123      	str	r3, [r4, #16]
 800f838:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d09c      	beq.n	800f77a <_printf_float+0xaa>
 800f840:	232d      	movs	r3, #45	; 0x2d
 800f842:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f846:	e798      	b.n	800f77a <_printf_float+0xaa>
 800f848:	9a06      	ldr	r2, [sp, #24]
 800f84a:	2a47      	cmp	r2, #71	; 0x47
 800f84c:	d1be      	bne.n	800f7cc <_printf_float+0xfc>
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d1bc      	bne.n	800f7cc <_printf_float+0xfc>
 800f852:	2301      	movs	r3, #1
 800f854:	e7b9      	b.n	800f7ca <_printf_float+0xfa>
 800f856:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f85a:	d118      	bne.n	800f88e <_printf_float+0x1be>
 800f85c:	2900      	cmp	r1, #0
 800f85e:	6863      	ldr	r3, [r4, #4]
 800f860:	dd0b      	ble.n	800f87a <_printf_float+0x1aa>
 800f862:	6121      	str	r1, [r4, #16]
 800f864:	b913      	cbnz	r3, 800f86c <_printf_float+0x19c>
 800f866:	6822      	ldr	r2, [r4, #0]
 800f868:	07d0      	lsls	r0, r2, #31
 800f86a:	d502      	bpl.n	800f872 <_printf_float+0x1a2>
 800f86c:	3301      	adds	r3, #1
 800f86e:	440b      	add	r3, r1
 800f870:	6123      	str	r3, [r4, #16]
 800f872:	65a1      	str	r1, [r4, #88]	; 0x58
 800f874:	f04f 0900 	mov.w	r9, #0
 800f878:	e7de      	b.n	800f838 <_printf_float+0x168>
 800f87a:	b913      	cbnz	r3, 800f882 <_printf_float+0x1b2>
 800f87c:	6822      	ldr	r2, [r4, #0]
 800f87e:	07d2      	lsls	r2, r2, #31
 800f880:	d501      	bpl.n	800f886 <_printf_float+0x1b6>
 800f882:	3302      	adds	r3, #2
 800f884:	e7f4      	b.n	800f870 <_printf_float+0x1a0>
 800f886:	2301      	movs	r3, #1
 800f888:	e7f2      	b.n	800f870 <_printf_float+0x1a0>
 800f88a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f88e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f890:	4299      	cmp	r1, r3
 800f892:	db05      	blt.n	800f8a0 <_printf_float+0x1d0>
 800f894:	6823      	ldr	r3, [r4, #0]
 800f896:	6121      	str	r1, [r4, #16]
 800f898:	07d8      	lsls	r0, r3, #31
 800f89a:	d5ea      	bpl.n	800f872 <_printf_float+0x1a2>
 800f89c:	1c4b      	adds	r3, r1, #1
 800f89e:	e7e7      	b.n	800f870 <_printf_float+0x1a0>
 800f8a0:	2900      	cmp	r1, #0
 800f8a2:	bfd4      	ite	le
 800f8a4:	f1c1 0202 	rsble	r2, r1, #2
 800f8a8:	2201      	movgt	r2, #1
 800f8aa:	4413      	add	r3, r2
 800f8ac:	e7e0      	b.n	800f870 <_printf_float+0x1a0>
 800f8ae:	6823      	ldr	r3, [r4, #0]
 800f8b0:	055a      	lsls	r2, r3, #21
 800f8b2:	d407      	bmi.n	800f8c4 <_printf_float+0x1f4>
 800f8b4:	6923      	ldr	r3, [r4, #16]
 800f8b6:	4642      	mov	r2, r8
 800f8b8:	4631      	mov	r1, r6
 800f8ba:	4628      	mov	r0, r5
 800f8bc:	47b8      	blx	r7
 800f8be:	3001      	adds	r0, #1
 800f8c0:	d12c      	bne.n	800f91c <_printf_float+0x24c>
 800f8c2:	e764      	b.n	800f78e <_printf_float+0xbe>
 800f8c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f8c8:	f240 80e0 	bls.w	800fa8c <_printf_float+0x3bc>
 800f8cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	f7f1 f910 	bl	8000af8 <__aeabi_dcmpeq>
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	d034      	beq.n	800f946 <_printf_float+0x276>
 800f8dc:	4a37      	ldr	r2, [pc, #220]	; (800f9bc <_printf_float+0x2ec>)
 800f8de:	2301      	movs	r3, #1
 800f8e0:	4631      	mov	r1, r6
 800f8e2:	4628      	mov	r0, r5
 800f8e4:	47b8      	blx	r7
 800f8e6:	3001      	adds	r0, #1
 800f8e8:	f43f af51 	beq.w	800f78e <_printf_float+0xbe>
 800f8ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	db02      	blt.n	800f8fa <_printf_float+0x22a>
 800f8f4:	6823      	ldr	r3, [r4, #0]
 800f8f6:	07d8      	lsls	r0, r3, #31
 800f8f8:	d510      	bpl.n	800f91c <_printf_float+0x24c>
 800f8fa:	ee18 3a10 	vmov	r3, s16
 800f8fe:	4652      	mov	r2, sl
 800f900:	4631      	mov	r1, r6
 800f902:	4628      	mov	r0, r5
 800f904:	47b8      	blx	r7
 800f906:	3001      	adds	r0, #1
 800f908:	f43f af41 	beq.w	800f78e <_printf_float+0xbe>
 800f90c:	f04f 0800 	mov.w	r8, #0
 800f910:	f104 091a 	add.w	r9, r4, #26
 800f914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f916:	3b01      	subs	r3, #1
 800f918:	4543      	cmp	r3, r8
 800f91a:	dc09      	bgt.n	800f930 <_printf_float+0x260>
 800f91c:	6823      	ldr	r3, [r4, #0]
 800f91e:	079b      	lsls	r3, r3, #30
 800f920:	f100 8107 	bmi.w	800fb32 <_printf_float+0x462>
 800f924:	68e0      	ldr	r0, [r4, #12]
 800f926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f928:	4298      	cmp	r0, r3
 800f92a:	bfb8      	it	lt
 800f92c:	4618      	movlt	r0, r3
 800f92e:	e730      	b.n	800f792 <_printf_float+0xc2>
 800f930:	2301      	movs	r3, #1
 800f932:	464a      	mov	r2, r9
 800f934:	4631      	mov	r1, r6
 800f936:	4628      	mov	r0, r5
 800f938:	47b8      	blx	r7
 800f93a:	3001      	adds	r0, #1
 800f93c:	f43f af27 	beq.w	800f78e <_printf_float+0xbe>
 800f940:	f108 0801 	add.w	r8, r8, #1
 800f944:	e7e6      	b.n	800f914 <_printf_float+0x244>
 800f946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f948:	2b00      	cmp	r3, #0
 800f94a:	dc39      	bgt.n	800f9c0 <_printf_float+0x2f0>
 800f94c:	4a1b      	ldr	r2, [pc, #108]	; (800f9bc <_printf_float+0x2ec>)
 800f94e:	2301      	movs	r3, #1
 800f950:	4631      	mov	r1, r6
 800f952:	4628      	mov	r0, r5
 800f954:	47b8      	blx	r7
 800f956:	3001      	adds	r0, #1
 800f958:	f43f af19 	beq.w	800f78e <_printf_float+0xbe>
 800f95c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f960:	4313      	orrs	r3, r2
 800f962:	d102      	bne.n	800f96a <_printf_float+0x29a>
 800f964:	6823      	ldr	r3, [r4, #0]
 800f966:	07d9      	lsls	r1, r3, #31
 800f968:	d5d8      	bpl.n	800f91c <_printf_float+0x24c>
 800f96a:	ee18 3a10 	vmov	r3, s16
 800f96e:	4652      	mov	r2, sl
 800f970:	4631      	mov	r1, r6
 800f972:	4628      	mov	r0, r5
 800f974:	47b8      	blx	r7
 800f976:	3001      	adds	r0, #1
 800f978:	f43f af09 	beq.w	800f78e <_printf_float+0xbe>
 800f97c:	f04f 0900 	mov.w	r9, #0
 800f980:	f104 0a1a 	add.w	sl, r4, #26
 800f984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f986:	425b      	negs	r3, r3
 800f988:	454b      	cmp	r3, r9
 800f98a:	dc01      	bgt.n	800f990 <_printf_float+0x2c0>
 800f98c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f98e:	e792      	b.n	800f8b6 <_printf_float+0x1e6>
 800f990:	2301      	movs	r3, #1
 800f992:	4652      	mov	r2, sl
 800f994:	4631      	mov	r1, r6
 800f996:	4628      	mov	r0, r5
 800f998:	47b8      	blx	r7
 800f99a:	3001      	adds	r0, #1
 800f99c:	f43f aef7 	beq.w	800f78e <_printf_float+0xbe>
 800f9a0:	f109 0901 	add.w	r9, r9, #1
 800f9a4:	e7ee      	b.n	800f984 <_printf_float+0x2b4>
 800f9a6:	bf00      	nop
 800f9a8:	7fefffff 	.word	0x7fefffff
 800f9ac:	080176a8 	.word	0x080176a8
 800f9b0:	080176ac 	.word	0x080176ac
 800f9b4:	080176b0 	.word	0x080176b0
 800f9b8:	080176b4 	.word	0x080176b4
 800f9bc:	080176b8 	.word	0x080176b8
 800f9c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f9c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	bfa8      	it	ge
 800f9c8:	461a      	movge	r2, r3
 800f9ca:	2a00      	cmp	r2, #0
 800f9cc:	4691      	mov	r9, r2
 800f9ce:	dc37      	bgt.n	800fa40 <_printf_float+0x370>
 800f9d0:	f04f 0b00 	mov.w	fp, #0
 800f9d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f9d8:	f104 021a 	add.w	r2, r4, #26
 800f9dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f9de:	9305      	str	r3, [sp, #20]
 800f9e0:	eba3 0309 	sub.w	r3, r3, r9
 800f9e4:	455b      	cmp	r3, fp
 800f9e6:	dc33      	bgt.n	800fa50 <_printf_float+0x380>
 800f9e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	db3b      	blt.n	800fa68 <_printf_float+0x398>
 800f9f0:	6823      	ldr	r3, [r4, #0]
 800f9f2:	07da      	lsls	r2, r3, #31
 800f9f4:	d438      	bmi.n	800fa68 <_printf_float+0x398>
 800f9f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f9fa:	eba2 0903 	sub.w	r9, r2, r3
 800f9fe:	9b05      	ldr	r3, [sp, #20]
 800fa00:	1ad2      	subs	r2, r2, r3
 800fa02:	4591      	cmp	r9, r2
 800fa04:	bfa8      	it	ge
 800fa06:	4691      	movge	r9, r2
 800fa08:	f1b9 0f00 	cmp.w	r9, #0
 800fa0c:	dc35      	bgt.n	800fa7a <_printf_float+0x3aa>
 800fa0e:	f04f 0800 	mov.w	r8, #0
 800fa12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fa16:	f104 0a1a 	add.w	sl, r4, #26
 800fa1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa1e:	1a9b      	subs	r3, r3, r2
 800fa20:	eba3 0309 	sub.w	r3, r3, r9
 800fa24:	4543      	cmp	r3, r8
 800fa26:	f77f af79 	ble.w	800f91c <_printf_float+0x24c>
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	4652      	mov	r2, sl
 800fa2e:	4631      	mov	r1, r6
 800fa30:	4628      	mov	r0, r5
 800fa32:	47b8      	blx	r7
 800fa34:	3001      	adds	r0, #1
 800fa36:	f43f aeaa 	beq.w	800f78e <_printf_float+0xbe>
 800fa3a:	f108 0801 	add.w	r8, r8, #1
 800fa3e:	e7ec      	b.n	800fa1a <_printf_float+0x34a>
 800fa40:	4613      	mov	r3, r2
 800fa42:	4631      	mov	r1, r6
 800fa44:	4642      	mov	r2, r8
 800fa46:	4628      	mov	r0, r5
 800fa48:	47b8      	blx	r7
 800fa4a:	3001      	adds	r0, #1
 800fa4c:	d1c0      	bne.n	800f9d0 <_printf_float+0x300>
 800fa4e:	e69e      	b.n	800f78e <_printf_float+0xbe>
 800fa50:	2301      	movs	r3, #1
 800fa52:	4631      	mov	r1, r6
 800fa54:	4628      	mov	r0, r5
 800fa56:	9205      	str	r2, [sp, #20]
 800fa58:	47b8      	blx	r7
 800fa5a:	3001      	adds	r0, #1
 800fa5c:	f43f ae97 	beq.w	800f78e <_printf_float+0xbe>
 800fa60:	9a05      	ldr	r2, [sp, #20]
 800fa62:	f10b 0b01 	add.w	fp, fp, #1
 800fa66:	e7b9      	b.n	800f9dc <_printf_float+0x30c>
 800fa68:	ee18 3a10 	vmov	r3, s16
 800fa6c:	4652      	mov	r2, sl
 800fa6e:	4631      	mov	r1, r6
 800fa70:	4628      	mov	r0, r5
 800fa72:	47b8      	blx	r7
 800fa74:	3001      	adds	r0, #1
 800fa76:	d1be      	bne.n	800f9f6 <_printf_float+0x326>
 800fa78:	e689      	b.n	800f78e <_printf_float+0xbe>
 800fa7a:	9a05      	ldr	r2, [sp, #20]
 800fa7c:	464b      	mov	r3, r9
 800fa7e:	4442      	add	r2, r8
 800fa80:	4631      	mov	r1, r6
 800fa82:	4628      	mov	r0, r5
 800fa84:	47b8      	blx	r7
 800fa86:	3001      	adds	r0, #1
 800fa88:	d1c1      	bne.n	800fa0e <_printf_float+0x33e>
 800fa8a:	e680      	b.n	800f78e <_printf_float+0xbe>
 800fa8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa8e:	2a01      	cmp	r2, #1
 800fa90:	dc01      	bgt.n	800fa96 <_printf_float+0x3c6>
 800fa92:	07db      	lsls	r3, r3, #31
 800fa94:	d53a      	bpl.n	800fb0c <_printf_float+0x43c>
 800fa96:	2301      	movs	r3, #1
 800fa98:	4642      	mov	r2, r8
 800fa9a:	4631      	mov	r1, r6
 800fa9c:	4628      	mov	r0, r5
 800fa9e:	47b8      	blx	r7
 800faa0:	3001      	adds	r0, #1
 800faa2:	f43f ae74 	beq.w	800f78e <_printf_float+0xbe>
 800faa6:	ee18 3a10 	vmov	r3, s16
 800faaa:	4652      	mov	r2, sl
 800faac:	4631      	mov	r1, r6
 800faae:	4628      	mov	r0, r5
 800fab0:	47b8      	blx	r7
 800fab2:	3001      	adds	r0, #1
 800fab4:	f43f ae6b 	beq.w	800f78e <_printf_float+0xbe>
 800fab8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fabc:	2200      	movs	r2, #0
 800fabe:	2300      	movs	r3, #0
 800fac0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800fac4:	f7f1 f818 	bl	8000af8 <__aeabi_dcmpeq>
 800fac8:	b9d8      	cbnz	r0, 800fb02 <_printf_float+0x432>
 800faca:	f10a 33ff 	add.w	r3, sl, #4294967295
 800face:	f108 0201 	add.w	r2, r8, #1
 800fad2:	4631      	mov	r1, r6
 800fad4:	4628      	mov	r0, r5
 800fad6:	47b8      	blx	r7
 800fad8:	3001      	adds	r0, #1
 800fada:	d10e      	bne.n	800fafa <_printf_float+0x42a>
 800fadc:	e657      	b.n	800f78e <_printf_float+0xbe>
 800fade:	2301      	movs	r3, #1
 800fae0:	4652      	mov	r2, sl
 800fae2:	4631      	mov	r1, r6
 800fae4:	4628      	mov	r0, r5
 800fae6:	47b8      	blx	r7
 800fae8:	3001      	adds	r0, #1
 800faea:	f43f ae50 	beq.w	800f78e <_printf_float+0xbe>
 800faee:	f108 0801 	add.w	r8, r8, #1
 800faf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faf4:	3b01      	subs	r3, #1
 800faf6:	4543      	cmp	r3, r8
 800faf8:	dcf1      	bgt.n	800fade <_printf_float+0x40e>
 800fafa:	464b      	mov	r3, r9
 800fafc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fb00:	e6da      	b.n	800f8b8 <_printf_float+0x1e8>
 800fb02:	f04f 0800 	mov.w	r8, #0
 800fb06:	f104 0a1a 	add.w	sl, r4, #26
 800fb0a:	e7f2      	b.n	800faf2 <_printf_float+0x422>
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	4642      	mov	r2, r8
 800fb10:	e7df      	b.n	800fad2 <_printf_float+0x402>
 800fb12:	2301      	movs	r3, #1
 800fb14:	464a      	mov	r2, r9
 800fb16:	4631      	mov	r1, r6
 800fb18:	4628      	mov	r0, r5
 800fb1a:	47b8      	blx	r7
 800fb1c:	3001      	adds	r0, #1
 800fb1e:	f43f ae36 	beq.w	800f78e <_printf_float+0xbe>
 800fb22:	f108 0801 	add.w	r8, r8, #1
 800fb26:	68e3      	ldr	r3, [r4, #12]
 800fb28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb2a:	1a5b      	subs	r3, r3, r1
 800fb2c:	4543      	cmp	r3, r8
 800fb2e:	dcf0      	bgt.n	800fb12 <_printf_float+0x442>
 800fb30:	e6f8      	b.n	800f924 <_printf_float+0x254>
 800fb32:	f04f 0800 	mov.w	r8, #0
 800fb36:	f104 0919 	add.w	r9, r4, #25
 800fb3a:	e7f4      	b.n	800fb26 <_printf_float+0x456>

0800fb3c <_printf_common>:
 800fb3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb40:	4616      	mov	r6, r2
 800fb42:	4699      	mov	r9, r3
 800fb44:	688a      	ldr	r2, [r1, #8]
 800fb46:	690b      	ldr	r3, [r1, #16]
 800fb48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	bfb8      	it	lt
 800fb50:	4613      	movlt	r3, r2
 800fb52:	6033      	str	r3, [r6, #0]
 800fb54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb58:	4607      	mov	r7, r0
 800fb5a:	460c      	mov	r4, r1
 800fb5c:	b10a      	cbz	r2, 800fb62 <_printf_common+0x26>
 800fb5e:	3301      	adds	r3, #1
 800fb60:	6033      	str	r3, [r6, #0]
 800fb62:	6823      	ldr	r3, [r4, #0]
 800fb64:	0699      	lsls	r1, r3, #26
 800fb66:	bf42      	ittt	mi
 800fb68:	6833      	ldrmi	r3, [r6, #0]
 800fb6a:	3302      	addmi	r3, #2
 800fb6c:	6033      	strmi	r3, [r6, #0]
 800fb6e:	6825      	ldr	r5, [r4, #0]
 800fb70:	f015 0506 	ands.w	r5, r5, #6
 800fb74:	d106      	bne.n	800fb84 <_printf_common+0x48>
 800fb76:	f104 0a19 	add.w	sl, r4, #25
 800fb7a:	68e3      	ldr	r3, [r4, #12]
 800fb7c:	6832      	ldr	r2, [r6, #0]
 800fb7e:	1a9b      	subs	r3, r3, r2
 800fb80:	42ab      	cmp	r3, r5
 800fb82:	dc26      	bgt.n	800fbd2 <_printf_common+0x96>
 800fb84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb88:	1e13      	subs	r3, r2, #0
 800fb8a:	6822      	ldr	r2, [r4, #0]
 800fb8c:	bf18      	it	ne
 800fb8e:	2301      	movne	r3, #1
 800fb90:	0692      	lsls	r2, r2, #26
 800fb92:	d42b      	bmi.n	800fbec <_printf_common+0xb0>
 800fb94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb98:	4649      	mov	r1, r9
 800fb9a:	4638      	mov	r0, r7
 800fb9c:	47c0      	blx	r8
 800fb9e:	3001      	adds	r0, #1
 800fba0:	d01e      	beq.n	800fbe0 <_printf_common+0xa4>
 800fba2:	6823      	ldr	r3, [r4, #0]
 800fba4:	6922      	ldr	r2, [r4, #16]
 800fba6:	f003 0306 	and.w	r3, r3, #6
 800fbaa:	2b04      	cmp	r3, #4
 800fbac:	bf02      	ittt	eq
 800fbae:	68e5      	ldreq	r5, [r4, #12]
 800fbb0:	6833      	ldreq	r3, [r6, #0]
 800fbb2:	1aed      	subeq	r5, r5, r3
 800fbb4:	68a3      	ldr	r3, [r4, #8]
 800fbb6:	bf0c      	ite	eq
 800fbb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbbc:	2500      	movne	r5, #0
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	bfc4      	itt	gt
 800fbc2:	1a9b      	subgt	r3, r3, r2
 800fbc4:	18ed      	addgt	r5, r5, r3
 800fbc6:	2600      	movs	r6, #0
 800fbc8:	341a      	adds	r4, #26
 800fbca:	42b5      	cmp	r5, r6
 800fbcc:	d11a      	bne.n	800fc04 <_printf_common+0xc8>
 800fbce:	2000      	movs	r0, #0
 800fbd0:	e008      	b.n	800fbe4 <_printf_common+0xa8>
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	4652      	mov	r2, sl
 800fbd6:	4649      	mov	r1, r9
 800fbd8:	4638      	mov	r0, r7
 800fbda:	47c0      	blx	r8
 800fbdc:	3001      	adds	r0, #1
 800fbde:	d103      	bne.n	800fbe8 <_printf_common+0xac>
 800fbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800fbe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbe8:	3501      	adds	r5, #1
 800fbea:	e7c6      	b.n	800fb7a <_printf_common+0x3e>
 800fbec:	18e1      	adds	r1, r4, r3
 800fbee:	1c5a      	adds	r2, r3, #1
 800fbf0:	2030      	movs	r0, #48	; 0x30
 800fbf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fbf6:	4422      	add	r2, r4
 800fbf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fbfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc00:	3302      	adds	r3, #2
 800fc02:	e7c7      	b.n	800fb94 <_printf_common+0x58>
 800fc04:	2301      	movs	r3, #1
 800fc06:	4622      	mov	r2, r4
 800fc08:	4649      	mov	r1, r9
 800fc0a:	4638      	mov	r0, r7
 800fc0c:	47c0      	blx	r8
 800fc0e:	3001      	adds	r0, #1
 800fc10:	d0e6      	beq.n	800fbe0 <_printf_common+0xa4>
 800fc12:	3601      	adds	r6, #1
 800fc14:	e7d9      	b.n	800fbca <_printf_common+0x8e>
	...

0800fc18 <_printf_i>:
 800fc18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc1c:	7e0f      	ldrb	r7, [r1, #24]
 800fc1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc20:	2f78      	cmp	r7, #120	; 0x78
 800fc22:	4691      	mov	r9, r2
 800fc24:	4680      	mov	r8, r0
 800fc26:	460c      	mov	r4, r1
 800fc28:	469a      	mov	sl, r3
 800fc2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc2e:	d807      	bhi.n	800fc40 <_printf_i+0x28>
 800fc30:	2f62      	cmp	r7, #98	; 0x62
 800fc32:	d80a      	bhi.n	800fc4a <_printf_i+0x32>
 800fc34:	2f00      	cmp	r7, #0
 800fc36:	f000 80d4 	beq.w	800fde2 <_printf_i+0x1ca>
 800fc3a:	2f58      	cmp	r7, #88	; 0x58
 800fc3c:	f000 80c0 	beq.w	800fdc0 <_printf_i+0x1a8>
 800fc40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc48:	e03a      	b.n	800fcc0 <_printf_i+0xa8>
 800fc4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc4e:	2b15      	cmp	r3, #21
 800fc50:	d8f6      	bhi.n	800fc40 <_printf_i+0x28>
 800fc52:	a101      	add	r1, pc, #4	; (adr r1, 800fc58 <_printf_i+0x40>)
 800fc54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc58:	0800fcb1 	.word	0x0800fcb1
 800fc5c:	0800fcc5 	.word	0x0800fcc5
 800fc60:	0800fc41 	.word	0x0800fc41
 800fc64:	0800fc41 	.word	0x0800fc41
 800fc68:	0800fc41 	.word	0x0800fc41
 800fc6c:	0800fc41 	.word	0x0800fc41
 800fc70:	0800fcc5 	.word	0x0800fcc5
 800fc74:	0800fc41 	.word	0x0800fc41
 800fc78:	0800fc41 	.word	0x0800fc41
 800fc7c:	0800fc41 	.word	0x0800fc41
 800fc80:	0800fc41 	.word	0x0800fc41
 800fc84:	0800fdc9 	.word	0x0800fdc9
 800fc88:	0800fcf1 	.word	0x0800fcf1
 800fc8c:	0800fd83 	.word	0x0800fd83
 800fc90:	0800fc41 	.word	0x0800fc41
 800fc94:	0800fc41 	.word	0x0800fc41
 800fc98:	0800fdeb 	.word	0x0800fdeb
 800fc9c:	0800fc41 	.word	0x0800fc41
 800fca0:	0800fcf1 	.word	0x0800fcf1
 800fca4:	0800fc41 	.word	0x0800fc41
 800fca8:	0800fc41 	.word	0x0800fc41
 800fcac:	0800fd8b 	.word	0x0800fd8b
 800fcb0:	682b      	ldr	r3, [r5, #0]
 800fcb2:	1d1a      	adds	r2, r3, #4
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	602a      	str	r2, [r5, #0]
 800fcb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	e09f      	b.n	800fe04 <_printf_i+0x1ec>
 800fcc4:	6820      	ldr	r0, [r4, #0]
 800fcc6:	682b      	ldr	r3, [r5, #0]
 800fcc8:	0607      	lsls	r7, r0, #24
 800fcca:	f103 0104 	add.w	r1, r3, #4
 800fcce:	6029      	str	r1, [r5, #0]
 800fcd0:	d501      	bpl.n	800fcd6 <_printf_i+0xbe>
 800fcd2:	681e      	ldr	r6, [r3, #0]
 800fcd4:	e003      	b.n	800fcde <_printf_i+0xc6>
 800fcd6:	0646      	lsls	r6, r0, #25
 800fcd8:	d5fb      	bpl.n	800fcd2 <_printf_i+0xba>
 800fcda:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fcde:	2e00      	cmp	r6, #0
 800fce0:	da03      	bge.n	800fcea <_printf_i+0xd2>
 800fce2:	232d      	movs	r3, #45	; 0x2d
 800fce4:	4276      	negs	r6, r6
 800fce6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcea:	485a      	ldr	r0, [pc, #360]	; (800fe54 <_printf_i+0x23c>)
 800fcec:	230a      	movs	r3, #10
 800fcee:	e012      	b.n	800fd16 <_printf_i+0xfe>
 800fcf0:	682b      	ldr	r3, [r5, #0]
 800fcf2:	6820      	ldr	r0, [r4, #0]
 800fcf4:	1d19      	adds	r1, r3, #4
 800fcf6:	6029      	str	r1, [r5, #0]
 800fcf8:	0605      	lsls	r5, r0, #24
 800fcfa:	d501      	bpl.n	800fd00 <_printf_i+0xe8>
 800fcfc:	681e      	ldr	r6, [r3, #0]
 800fcfe:	e002      	b.n	800fd06 <_printf_i+0xee>
 800fd00:	0641      	lsls	r1, r0, #25
 800fd02:	d5fb      	bpl.n	800fcfc <_printf_i+0xe4>
 800fd04:	881e      	ldrh	r6, [r3, #0]
 800fd06:	4853      	ldr	r0, [pc, #332]	; (800fe54 <_printf_i+0x23c>)
 800fd08:	2f6f      	cmp	r7, #111	; 0x6f
 800fd0a:	bf0c      	ite	eq
 800fd0c:	2308      	moveq	r3, #8
 800fd0e:	230a      	movne	r3, #10
 800fd10:	2100      	movs	r1, #0
 800fd12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd16:	6865      	ldr	r5, [r4, #4]
 800fd18:	60a5      	str	r5, [r4, #8]
 800fd1a:	2d00      	cmp	r5, #0
 800fd1c:	bfa2      	ittt	ge
 800fd1e:	6821      	ldrge	r1, [r4, #0]
 800fd20:	f021 0104 	bicge.w	r1, r1, #4
 800fd24:	6021      	strge	r1, [r4, #0]
 800fd26:	b90e      	cbnz	r6, 800fd2c <_printf_i+0x114>
 800fd28:	2d00      	cmp	r5, #0
 800fd2a:	d04b      	beq.n	800fdc4 <_printf_i+0x1ac>
 800fd2c:	4615      	mov	r5, r2
 800fd2e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fd32:	fb03 6711 	mls	r7, r3, r1, r6
 800fd36:	5dc7      	ldrb	r7, [r0, r7]
 800fd38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fd3c:	4637      	mov	r7, r6
 800fd3e:	42bb      	cmp	r3, r7
 800fd40:	460e      	mov	r6, r1
 800fd42:	d9f4      	bls.n	800fd2e <_printf_i+0x116>
 800fd44:	2b08      	cmp	r3, #8
 800fd46:	d10b      	bne.n	800fd60 <_printf_i+0x148>
 800fd48:	6823      	ldr	r3, [r4, #0]
 800fd4a:	07de      	lsls	r6, r3, #31
 800fd4c:	d508      	bpl.n	800fd60 <_printf_i+0x148>
 800fd4e:	6923      	ldr	r3, [r4, #16]
 800fd50:	6861      	ldr	r1, [r4, #4]
 800fd52:	4299      	cmp	r1, r3
 800fd54:	bfde      	ittt	le
 800fd56:	2330      	movle	r3, #48	; 0x30
 800fd58:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fd60:	1b52      	subs	r2, r2, r5
 800fd62:	6122      	str	r2, [r4, #16]
 800fd64:	f8cd a000 	str.w	sl, [sp]
 800fd68:	464b      	mov	r3, r9
 800fd6a:	aa03      	add	r2, sp, #12
 800fd6c:	4621      	mov	r1, r4
 800fd6e:	4640      	mov	r0, r8
 800fd70:	f7ff fee4 	bl	800fb3c <_printf_common>
 800fd74:	3001      	adds	r0, #1
 800fd76:	d14a      	bne.n	800fe0e <_printf_i+0x1f6>
 800fd78:	f04f 30ff 	mov.w	r0, #4294967295
 800fd7c:	b004      	add	sp, #16
 800fd7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd82:	6823      	ldr	r3, [r4, #0]
 800fd84:	f043 0320 	orr.w	r3, r3, #32
 800fd88:	6023      	str	r3, [r4, #0]
 800fd8a:	4833      	ldr	r0, [pc, #204]	; (800fe58 <_printf_i+0x240>)
 800fd8c:	2778      	movs	r7, #120	; 0x78
 800fd8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fd92:	6823      	ldr	r3, [r4, #0]
 800fd94:	6829      	ldr	r1, [r5, #0]
 800fd96:	061f      	lsls	r7, r3, #24
 800fd98:	f851 6b04 	ldr.w	r6, [r1], #4
 800fd9c:	d402      	bmi.n	800fda4 <_printf_i+0x18c>
 800fd9e:	065f      	lsls	r7, r3, #25
 800fda0:	bf48      	it	mi
 800fda2:	b2b6      	uxthmi	r6, r6
 800fda4:	07df      	lsls	r7, r3, #31
 800fda6:	bf48      	it	mi
 800fda8:	f043 0320 	orrmi.w	r3, r3, #32
 800fdac:	6029      	str	r1, [r5, #0]
 800fdae:	bf48      	it	mi
 800fdb0:	6023      	strmi	r3, [r4, #0]
 800fdb2:	b91e      	cbnz	r6, 800fdbc <_printf_i+0x1a4>
 800fdb4:	6823      	ldr	r3, [r4, #0]
 800fdb6:	f023 0320 	bic.w	r3, r3, #32
 800fdba:	6023      	str	r3, [r4, #0]
 800fdbc:	2310      	movs	r3, #16
 800fdbe:	e7a7      	b.n	800fd10 <_printf_i+0xf8>
 800fdc0:	4824      	ldr	r0, [pc, #144]	; (800fe54 <_printf_i+0x23c>)
 800fdc2:	e7e4      	b.n	800fd8e <_printf_i+0x176>
 800fdc4:	4615      	mov	r5, r2
 800fdc6:	e7bd      	b.n	800fd44 <_printf_i+0x12c>
 800fdc8:	682b      	ldr	r3, [r5, #0]
 800fdca:	6826      	ldr	r6, [r4, #0]
 800fdcc:	6961      	ldr	r1, [r4, #20]
 800fdce:	1d18      	adds	r0, r3, #4
 800fdd0:	6028      	str	r0, [r5, #0]
 800fdd2:	0635      	lsls	r5, r6, #24
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	d501      	bpl.n	800fddc <_printf_i+0x1c4>
 800fdd8:	6019      	str	r1, [r3, #0]
 800fdda:	e002      	b.n	800fde2 <_printf_i+0x1ca>
 800fddc:	0670      	lsls	r0, r6, #25
 800fdde:	d5fb      	bpl.n	800fdd8 <_printf_i+0x1c0>
 800fde0:	8019      	strh	r1, [r3, #0]
 800fde2:	2300      	movs	r3, #0
 800fde4:	6123      	str	r3, [r4, #16]
 800fde6:	4615      	mov	r5, r2
 800fde8:	e7bc      	b.n	800fd64 <_printf_i+0x14c>
 800fdea:	682b      	ldr	r3, [r5, #0]
 800fdec:	1d1a      	adds	r2, r3, #4
 800fdee:	602a      	str	r2, [r5, #0]
 800fdf0:	681d      	ldr	r5, [r3, #0]
 800fdf2:	6862      	ldr	r2, [r4, #4]
 800fdf4:	2100      	movs	r1, #0
 800fdf6:	4628      	mov	r0, r5
 800fdf8:	f7f0 fa02 	bl	8000200 <memchr>
 800fdfc:	b108      	cbz	r0, 800fe02 <_printf_i+0x1ea>
 800fdfe:	1b40      	subs	r0, r0, r5
 800fe00:	6060      	str	r0, [r4, #4]
 800fe02:	6863      	ldr	r3, [r4, #4]
 800fe04:	6123      	str	r3, [r4, #16]
 800fe06:	2300      	movs	r3, #0
 800fe08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe0c:	e7aa      	b.n	800fd64 <_printf_i+0x14c>
 800fe0e:	6923      	ldr	r3, [r4, #16]
 800fe10:	462a      	mov	r2, r5
 800fe12:	4649      	mov	r1, r9
 800fe14:	4640      	mov	r0, r8
 800fe16:	47d0      	blx	sl
 800fe18:	3001      	adds	r0, #1
 800fe1a:	d0ad      	beq.n	800fd78 <_printf_i+0x160>
 800fe1c:	6823      	ldr	r3, [r4, #0]
 800fe1e:	079b      	lsls	r3, r3, #30
 800fe20:	d413      	bmi.n	800fe4a <_printf_i+0x232>
 800fe22:	68e0      	ldr	r0, [r4, #12]
 800fe24:	9b03      	ldr	r3, [sp, #12]
 800fe26:	4298      	cmp	r0, r3
 800fe28:	bfb8      	it	lt
 800fe2a:	4618      	movlt	r0, r3
 800fe2c:	e7a6      	b.n	800fd7c <_printf_i+0x164>
 800fe2e:	2301      	movs	r3, #1
 800fe30:	4632      	mov	r2, r6
 800fe32:	4649      	mov	r1, r9
 800fe34:	4640      	mov	r0, r8
 800fe36:	47d0      	blx	sl
 800fe38:	3001      	adds	r0, #1
 800fe3a:	d09d      	beq.n	800fd78 <_printf_i+0x160>
 800fe3c:	3501      	adds	r5, #1
 800fe3e:	68e3      	ldr	r3, [r4, #12]
 800fe40:	9903      	ldr	r1, [sp, #12]
 800fe42:	1a5b      	subs	r3, r3, r1
 800fe44:	42ab      	cmp	r3, r5
 800fe46:	dcf2      	bgt.n	800fe2e <_printf_i+0x216>
 800fe48:	e7eb      	b.n	800fe22 <_printf_i+0x20a>
 800fe4a:	2500      	movs	r5, #0
 800fe4c:	f104 0619 	add.w	r6, r4, #25
 800fe50:	e7f5      	b.n	800fe3e <_printf_i+0x226>
 800fe52:	bf00      	nop
 800fe54:	080176ba 	.word	0x080176ba
 800fe58:	080176cb 	.word	0x080176cb

0800fe5c <std>:
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	b510      	push	{r4, lr}
 800fe60:	4604      	mov	r4, r0
 800fe62:	e9c0 3300 	strd	r3, r3, [r0]
 800fe66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe6a:	6083      	str	r3, [r0, #8]
 800fe6c:	8181      	strh	r1, [r0, #12]
 800fe6e:	6643      	str	r3, [r0, #100]	; 0x64
 800fe70:	81c2      	strh	r2, [r0, #14]
 800fe72:	6183      	str	r3, [r0, #24]
 800fe74:	4619      	mov	r1, r3
 800fe76:	2208      	movs	r2, #8
 800fe78:	305c      	adds	r0, #92	; 0x5c
 800fe7a:	f000 f928 	bl	80100ce <memset>
 800fe7e:	4b0d      	ldr	r3, [pc, #52]	; (800feb4 <std+0x58>)
 800fe80:	6263      	str	r3, [r4, #36]	; 0x24
 800fe82:	4b0d      	ldr	r3, [pc, #52]	; (800feb8 <std+0x5c>)
 800fe84:	62a3      	str	r3, [r4, #40]	; 0x28
 800fe86:	4b0d      	ldr	r3, [pc, #52]	; (800febc <std+0x60>)
 800fe88:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fe8a:	4b0d      	ldr	r3, [pc, #52]	; (800fec0 <std+0x64>)
 800fe8c:	6323      	str	r3, [r4, #48]	; 0x30
 800fe8e:	4b0d      	ldr	r3, [pc, #52]	; (800fec4 <std+0x68>)
 800fe90:	6224      	str	r4, [r4, #32]
 800fe92:	429c      	cmp	r4, r3
 800fe94:	d006      	beq.n	800fea4 <std+0x48>
 800fe96:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800fe9a:	4294      	cmp	r4, r2
 800fe9c:	d002      	beq.n	800fea4 <std+0x48>
 800fe9e:	33d0      	adds	r3, #208	; 0xd0
 800fea0:	429c      	cmp	r4, r3
 800fea2:	d105      	bne.n	800feb0 <std+0x54>
 800fea4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800feac:	f000 b99c 	b.w	80101e8 <__retarget_lock_init_recursive>
 800feb0:	bd10      	pop	{r4, pc}
 800feb2:	bf00      	nop
 800feb4:	08010049 	.word	0x08010049
 800feb8:	0801006b 	.word	0x0801006b
 800febc:	080100a3 	.word	0x080100a3
 800fec0:	080100c7 	.word	0x080100c7
 800fec4:	20000ab0 	.word	0x20000ab0

0800fec8 <stdio_exit_handler>:
 800fec8:	4a02      	ldr	r2, [pc, #8]	; (800fed4 <stdio_exit_handler+0xc>)
 800feca:	4903      	ldr	r1, [pc, #12]	; (800fed8 <stdio_exit_handler+0x10>)
 800fecc:	4803      	ldr	r0, [pc, #12]	; (800fedc <stdio_exit_handler+0x14>)
 800fece:	f000 b869 	b.w	800ffa4 <_fwalk_sglue>
 800fed2:	bf00      	nop
 800fed4:	2000002c 	.word	0x2000002c
 800fed8:	08011cd9 	.word	0x08011cd9
 800fedc:	20000038 	.word	0x20000038

0800fee0 <cleanup_stdio>:
 800fee0:	6841      	ldr	r1, [r0, #4]
 800fee2:	4b0c      	ldr	r3, [pc, #48]	; (800ff14 <cleanup_stdio+0x34>)
 800fee4:	4299      	cmp	r1, r3
 800fee6:	b510      	push	{r4, lr}
 800fee8:	4604      	mov	r4, r0
 800feea:	d001      	beq.n	800fef0 <cleanup_stdio+0x10>
 800feec:	f001 fef4 	bl	8011cd8 <_fflush_r>
 800fef0:	68a1      	ldr	r1, [r4, #8]
 800fef2:	4b09      	ldr	r3, [pc, #36]	; (800ff18 <cleanup_stdio+0x38>)
 800fef4:	4299      	cmp	r1, r3
 800fef6:	d002      	beq.n	800fefe <cleanup_stdio+0x1e>
 800fef8:	4620      	mov	r0, r4
 800fefa:	f001 feed 	bl	8011cd8 <_fflush_r>
 800fefe:	68e1      	ldr	r1, [r4, #12]
 800ff00:	4b06      	ldr	r3, [pc, #24]	; (800ff1c <cleanup_stdio+0x3c>)
 800ff02:	4299      	cmp	r1, r3
 800ff04:	d004      	beq.n	800ff10 <cleanup_stdio+0x30>
 800ff06:	4620      	mov	r0, r4
 800ff08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff0c:	f001 bee4 	b.w	8011cd8 <_fflush_r>
 800ff10:	bd10      	pop	{r4, pc}
 800ff12:	bf00      	nop
 800ff14:	20000ab0 	.word	0x20000ab0
 800ff18:	20000b18 	.word	0x20000b18
 800ff1c:	20000b80 	.word	0x20000b80

0800ff20 <global_stdio_init.part.0>:
 800ff20:	b510      	push	{r4, lr}
 800ff22:	4b0b      	ldr	r3, [pc, #44]	; (800ff50 <global_stdio_init.part.0+0x30>)
 800ff24:	4c0b      	ldr	r4, [pc, #44]	; (800ff54 <global_stdio_init.part.0+0x34>)
 800ff26:	4a0c      	ldr	r2, [pc, #48]	; (800ff58 <global_stdio_init.part.0+0x38>)
 800ff28:	601a      	str	r2, [r3, #0]
 800ff2a:	4620      	mov	r0, r4
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	2104      	movs	r1, #4
 800ff30:	f7ff ff94 	bl	800fe5c <std>
 800ff34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ff38:	2201      	movs	r2, #1
 800ff3a:	2109      	movs	r1, #9
 800ff3c:	f7ff ff8e 	bl	800fe5c <std>
 800ff40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ff44:	2202      	movs	r2, #2
 800ff46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff4a:	2112      	movs	r1, #18
 800ff4c:	f7ff bf86 	b.w	800fe5c <std>
 800ff50:	20000be8 	.word	0x20000be8
 800ff54:	20000ab0 	.word	0x20000ab0
 800ff58:	0800fec9 	.word	0x0800fec9

0800ff5c <__sfp_lock_acquire>:
 800ff5c:	4801      	ldr	r0, [pc, #4]	; (800ff64 <__sfp_lock_acquire+0x8>)
 800ff5e:	f000 b944 	b.w	80101ea <__retarget_lock_acquire_recursive>
 800ff62:	bf00      	nop
 800ff64:	20000bf1 	.word	0x20000bf1

0800ff68 <__sfp_lock_release>:
 800ff68:	4801      	ldr	r0, [pc, #4]	; (800ff70 <__sfp_lock_release+0x8>)
 800ff6a:	f000 b93f 	b.w	80101ec <__retarget_lock_release_recursive>
 800ff6e:	bf00      	nop
 800ff70:	20000bf1 	.word	0x20000bf1

0800ff74 <__sinit>:
 800ff74:	b510      	push	{r4, lr}
 800ff76:	4604      	mov	r4, r0
 800ff78:	f7ff fff0 	bl	800ff5c <__sfp_lock_acquire>
 800ff7c:	6a23      	ldr	r3, [r4, #32]
 800ff7e:	b11b      	cbz	r3, 800ff88 <__sinit+0x14>
 800ff80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff84:	f7ff bff0 	b.w	800ff68 <__sfp_lock_release>
 800ff88:	4b04      	ldr	r3, [pc, #16]	; (800ff9c <__sinit+0x28>)
 800ff8a:	6223      	str	r3, [r4, #32]
 800ff8c:	4b04      	ldr	r3, [pc, #16]	; (800ffa0 <__sinit+0x2c>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d1f5      	bne.n	800ff80 <__sinit+0xc>
 800ff94:	f7ff ffc4 	bl	800ff20 <global_stdio_init.part.0>
 800ff98:	e7f2      	b.n	800ff80 <__sinit+0xc>
 800ff9a:	bf00      	nop
 800ff9c:	0800fee1 	.word	0x0800fee1
 800ffa0:	20000be8 	.word	0x20000be8

0800ffa4 <_fwalk_sglue>:
 800ffa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffa8:	4607      	mov	r7, r0
 800ffaa:	4688      	mov	r8, r1
 800ffac:	4614      	mov	r4, r2
 800ffae:	2600      	movs	r6, #0
 800ffb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ffb4:	f1b9 0901 	subs.w	r9, r9, #1
 800ffb8:	d505      	bpl.n	800ffc6 <_fwalk_sglue+0x22>
 800ffba:	6824      	ldr	r4, [r4, #0]
 800ffbc:	2c00      	cmp	r4, #0
 800ffbe:	d1f7      	bne.n	800ffb0 <_fwalk_sglue+0xc>
 800ffc0:	4630      	mov	r0, r6
 800ffc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffc6:	89ab      	ldrh	r3, [r5, #12]
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d907      	bls.n	800ffdc <_fwalk_sglue+0x38>
 800ffcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ffd0:	3301      	adds	r3, #1
 800ffd2:	d003      	beq.n	800ffdc <_fwalk_sglue+0x38>
 800ffd4:	4629      	mov	r1, r5
 800ffd6:	4638      	mov	r0, r7
 800ffd8:	47c0      	blx	r8
 800ffda:	4306      	orrs	r6, r0
 800ffdc:	3568      	adds	r5, #104	; 0x68
 800ffde:	e7e9      	b.n	800ffb4 <_fwalk_sglue+0x10>

0800ffe0 <sniprintf>:
 800ffe0:	b40c      	push	{r2, r3}
 800ffe2:	b530      	push	{r4, r5, lr}
 800ffe4:	4b17      	ldr	r3, [pc, #92]	; (8010044 <sniprintf+0x64>)
 800ffe6:	1e0c      	subs	r4, r1, #0
 800ffe8:	681d      	ldr	r5, [r3, #0]
 800ffea:	b09d      	sub	sp, #116	; 0x74
 800ffec:	da08      	bge.n	8010000 <sniprintf+0x20>
 800ffee:	238b      	movs	r3, #139	; 0x8b
 800fff0:	602b      	str	r3, [r5, #0]
 800fff2:	f04f 30ff 	mov.w	r0, #4294967295
 800fff6:	b01d      	add	sp, #116	; 0x74
 800fff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fffc:	b002      	add	sp, #8
 800fffe:	4770      	bx	lr
 8010000:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010004:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010008:	bf14      	ite	ne
 801000a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801000e:	4623      	moveq	r3, r4
 8010010:	9304      	str	r3, [sp, #16]
 8010012:	9307      	str	r3, [sp, #28]
 8010014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010018:	9002      	str	r0, [sp, #8]
 801001a:	9006      	str	r0, [sp, #24]
 801001c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010020:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010022:	ab21      	add	r3, sp, #132	; 0x84
 8010024:	a902      	add	r1, sp, #8
 8010026:	4628      	mov	r0, r5
 8010028:	9301      	str	r3, [sp, #4]
 801002a:	f001 fb8d 	bl	8011748 <_svfiprintf_r>
 801002e:	1c43      	adds	r3, r0, #1
 8010030:	bfbc      	itt	lt
 8010032:	238b      	movlt	r3, #139	; 0x8b
 8010034:	602b      	strlt	r3, [r5, #0]
 8010036:	2c00      	cmp	r4, #0
 8010038:	d0dd      	beq.n	800fff6 <sniprintf+0x16>
 801003a:	9b02      	ldr	r3, [sp, #8]
 801003c:	2200      	movs	r2, #0
 801003e:	701a      	strb	r2, [r3, #0]
 8010040:	e7d9      	b.n	800fff6 <sniprintf+0x16>
 8010042:	bf00      	nop
 8010044:	20000084 	.word	0x20000084

08010048 <__sread>:
 8010048:	b510      	push	{r4, lr}
 801004a:	460c      	mov	r4, r1
 801004c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010050:	f000 f86c 	bl	801012c <_read_r>
 8010054:	2800      	cmp	r0, #0
 8010056:	bfab      	itete	ge
 8010058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801005a:	89a3      	ldrhlt	r3, [r4, #12]
 801005c:	181b      	addge	r3, r3, r0
 801005e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010062:	bfac      	ite	ge
 8010064:	6563      	strge	r3, [r4, #84]	; 0x54
 8010066:	81a3      	strhlt	r3, [r4, #12]
 8010068:	bd10      	pop	{r4, pc}

0801006a <__swrite>:
 801006a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801006e:	461f      	mov	r7, r3
 8010070:	898b      	ldrh	r3, [r1, #12]
 8010072:	05db      	lsls	r3, r3, #23
 8010074:	4605      	mov	r5, r0
 8010076:	460c      	mov	r4, r1
 8010078:	4616      	mov	r6, r2
 801007a:	d505      	bpl.n	8010088 <__swrite+0x1e>
 801007c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010080:	2302      	movs	r3, #2
 8010082:	2200      	movs	r2, #0
 8010084:	f000 f840 	bl	8010108 <_lseek_r>
 8010088:	89a3      	ldrh	r3, [r4, #12]
 801008a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801008e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010092:	81a3      	strh	r3, [r4, #12]
 8010094:	4632      	mov	r2, r6
 8010096:	463b      	mov	r3, r7
 8010098:	4628      	mov	r0, r5
 801009a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801009e:	f000 b867 	b.w	8010170 <_write_r>

080100a2 <__sseek>:
 80100a2:	b510      	push	{r4, lr}
 80100a4:	460c      	mov	r4, r1
 80100a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100aa:	f000 f82d 	bl	8010108 <_lseek_r>
 80100ae:	1c43      	adds	r3, r0, #1
 80100b0:	89a3      	ldrh	r3, [r4, #12]
 80100b2:	bf15      	itete	ne
 80100b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80100b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80100ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80100be:	81a3      	strheq	r3, [r4, #12]
 80100c0:	bf18      	it	ne
 80100c2:	81a3      	strhne	r3, [r4, #12]
 80100c4:	bd10      	pop	{r4, pc}

080100c6 <__sclose>:
 80100c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100ca:	f000 b80d 	b.w	80100e8 <_close_r>

080100ce <memset>:
 80100ce:	4402      	add	r2, r0
 80100d0:	4603      	mov	r3, r0
 80100d2:	4293      	cmp	r3, r2
 80100d4:	d100      	bne.n	80100d8 <memset+0xa>
 80100d6:	4770      	bx	lr
 80100d8:	f803 1b01 	strb.w	r1, [r3], #1
 80100dc:	e7f9      	b.n	80100d2 <memset+0x4>
	...

080100e0 <_localeconv_r>:
 80100e0:	4800      	ldr	r0, [pc, #0]	; (80100e4 <_localeconv_r+0x4>)
 80100e2:	4770      	bx	lr
 80100e4:	20000178 	.word	0x20000178

080100e8 <_close_r>:
 80100e8:	b538      	push	{r3, r4, r5, lr}
 80100ea:	4d06      	ldr	r5, [pc, #24]	; (8010104 <_close_r+0x1c>)
 80100ec:	2300      	movs	r3, #0
 80100ee:	4604      	mov	r4, r0
 80100f0:	4608      	mov	r0, r1
 80100f2:	602b      	str	r3, [r5, #0]
 80100f4:	f7f4 fb03 	bl	80046fe <_close>
 80100f8:	1c43      	adds	r3, r0, #1
 80100fa:	d102      	bne.n	8010102 <_close_r+0x1a>
 80100fc:	682b      	ldr	r3, [r5, #0]
 80100fe:	b103      	cbz	r3, 8010102 <_close_r+0x1a>
 8010100:	6023      	str	r3, [r4, #0]
 8010102:	bd38      	pop	{r3, r4, r5, pc}
 8010104:	20000bec 	.word	0x20000bec

08010108 <_lseek_r>:
 8010108:	b538      	push	{r3, r4, r5, lr}
 801010a:	4d07      	ldr	r5, [pc, #28]	; (8010128 <_lseek_r+0x20>)
 801010c:	4604      	mov	r4, r0
 801010e:	4608      	mov	r0, r1
 8010110:	4611      	mov	r1, r2
 8010112:	2200      	movs	r2, #0
 8010114:	602a      	str	r2, [r5, #0]
 8010116:	461a      	mov	r2, r3
 8010118:	f7f4 fb18 	bl	800474c <_lseek>
 801011c:	1c43      	adds	r3, r0, #1
 801011e:	d102      	bne.n	8010126 <_lseek_r+0x1e>
 8010120:	682b      	ldr	r3, [r5, #0]
 8010122:	b103      	cbz	r3, 8010126 <_lseek_r+0x1e>
 8010124:	6023      	str	r3, [r4, #0]
 8010126:	bd38      	pop	{r3, r4, r5, pc}
 8010128:	20000bec 	.word	0x20000bec

0801012c <_read_r>:
 801012c:	b538      	push	{r3, r4, r5, lr}
 801012e:	4d07      	ldr	r5, [pc, #28]	; (801014c <_read_r+0x20>)
 8010130:	4604      	mov	r4, r0
 8010132:	4608      	mov	r0, r1
 8010134:	4611      	mov	r1, r2
 8010136:	2200      	movs	r2, #0
 8010138:	602a      	str	r2, [r5, #0]
 801013a:	461a      	mov	r2, r3
 801013c:	f7f4 faa6 	bl	800468c <_read>
 8010140:	1c43      	adds	r3, r0, #1
 8010142:	d102      	bne.n	801014a <_read_r+0x1e>
 8010144:	682b      	ldr	r3, [r5, #0]
 8010146:	b103      	cbz	r3, 801014a <_read_r+0x1e>
 8010148:	6023      	str	r3, [r4, #0]
 801014a:	bd38      	pop	{r3, r4, r5, pc}
 801014c:	20000bec 	.word	0x20000bec

08010150 <_sbrk_r>:
 8010150:	b538      	push	{r3, r4, r5, lr}
 8010152:	4d06      	ldr	r5, [pc, #24]	; (801016c <_sbrk_r+0x1c>)
 8010154:	2300      	movs	r3, #0
 8010156:	4604      	mov	r4, r0
 8010158:	4608      	mov	r0, r1
 801015a:	602b      	str	r3, [r5, #0]
 801015c:	f7f4 fb04 	bl	8004768 <_sbrk>
 8010160:	1c43      	adds	r3, r0, #1
 8010162:	d102      	bne.n	801016a <_sbrk_r+0x1a>
 8010164:	682b      	ldr	r3, [r5, #0]
 8010166:	b103      	cbz	r3, 801016a <_sbrk_r+0x1a>
 8010168:	6023      	str	r3, [r4, #0]
 801016a:	bd38      	pop	{r3, r4, r5, pc}
 801016c:	20000bec 	.word	0x20000bec

08010170 <_write_r>:
 8010170:	b538      	push	{r3, r4, r5, lr}
 8010172:	4d07      	ldr	r5, [pc, #28]	; (8010190 <_write_r+0x20>)
 8010174:	4604      	mov	r4, r0
 8010176:	4608      	mov	r0, r1
 8010178:	4611      	mov	r1, r2
 801017a:	2200      	movs	r2, #0
 801017c:	602a      	str	r2, [r5, #0]
 801017e:	461a      	mov	r2, r3
 8010180:	f7f4 faa1 	bl	80046c6 <_write>
 8010184:	1c43      	adds	r3, r0, #1
 8010186:	d102      	bne.n	801018e <_write_r+0x1e>
 8010188:	682b      	ldr	r3, [r5, #0]
 801018a:	b103      	cbz	r3, 801018e <_write_r+0x1e>
 801018c:	6023      	str	r3, [r4, #0]
 801018e:	bd38      	pop	{r3, r4, r5, pc}
 8010190:	20000bec 	.word	0x20000bec

08010194 <__errno>:
 8010194:	4b01      	ldr	r3, [pc, #4]	; (801019c <__errno+0x8>)
 8010196:	6818      	ldr	r0, [r3, #0]
 8010198:	4770      	bx	lr
 801019a:	bf00      	nop
 801019c:	20000084 	.word	0x20000084

080101a0 <__libc_init_array>:
 80101a0:	b570      	push	{r4, r5, r6, lr}
 80101a2:	4d0d      	ldr	r5, [pc, #52]	; (80101d8 <__libc_init_array+0x38>)
 80101a4:	4c0d      	ldr	r4, [pc, #52]	; (80101dc <__libc_init_array+0x3c>)
 80101a6:	1b64      	subs	r4, r4, r5
 80101a8:	10a4      	asrs	r4, r4, #2
 80101aa:	2600      	movs	r6, #0
 80101ac:	42a6      	cmp	r6, r4
 80101ae:	d109      	bne.n	80101c4 <__libc_init_array+0x24>
 80101b0:	4d0b      	ldr	r5, [pc, #44]	; (80101e0 <__libc_init_array+0x40>)
 80101b2:	4c0c      	ldr	r4, [pc, #48]	; (80101e4 <__libc_init_array+0x44>)
 80101b4:	f001 ffd4 	bl	8012160 <_init>
 80101b8:	1b64      	subs	r4, r4, r5
 80101ba:	10a4      	asrs	r4, r4, #2
 80101bc:	2600      	movs	r6, #0
 80101be:	42a6      	cmp	r6, r4
 80101c0:	d105      	bne.n	80101ce <__libc_init_array+0x2e>
 80101c2:	bd70      	pop	{r4, r5, r6, pc}
 80101c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80101c8:	4798      	blx	r3
 80101ca:	3601      	adds	r6, #1
 80101cc:	e7ee      	b.n	80101ac <__libc_init_array+0xc>
 80101ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80101d2:	4798      	blx	r3
 80101d4:	3601      	adds	r6, #1
 80101d6:	e7f2      	b.n	80101be <__libc_init_array+0x1e>
 80101d8:	08017a24 	.word	0x08017a24
 80101dc:	08017a24 	.word	0x08017a24
 80101e0:	08017a24 	.word	0x08017a24
 80101e4:	08017a28 	.word	0x08017a28

080101e8 <__retarget_lock_init_recursive>:
 80101e8:	4770      	bx	lr

080101ea <__retarget_lock_acquire_recursive>:
 80101ea:	4770      	bx	lr

080101ec <__retarget_lock_release_recursive>:
 80101ec:	4770      	bx	lr

080101ee <memcpy>:
 80101ee:	440a      	add	r2, r1
 80101f0:	4291      	cmp	r1, r2
 80101f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80101f6:	d100      	bne.n	80101fa <memcpy+0xc>
 80101f8:	4770      	bx	lr
 80101fa:	b510      	push	{r4, lr}
 80101fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010200:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010204:	4291      	cmp	r1, r2
 8010206:	d1f9      	bne.n	80101fc <memcpy+0xe>
 8010208:	bd10      	pop	{r4, pc}

0801020a <quorem>:
 801020a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801020e:	6903      	ldr	r3, [r0, #16]
 8010210:	690c      	ldr	r4, [r1, #16]
 8010212:	42a3      	cmp	r3, r4
 8010214:	4607      	mov	r7, r0
 8010216:	db7e      	blt.n	8010316 <quorem+0x10c>
 8010218:	3c01      	subs	r4, #1
 801021a:	f101 0814 	add.w	r8, r1, #20
 801021e:	f100 0514 	add.w	r5, r0, #20
 8010222:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010226:	9301      	str	r3, [sp, #4]
 8010228:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801022c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010230:	3301      	adds	r3, #1
 8010232:	429a      	cmp	r2, r3
 8010234:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010238:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801023c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010240:	d331      	bcc.n	80102a6 <quorem+0x9c>
 8010242:	f04f 0e00 	mov.w	lr, #0
 8010246:	4640      	mov	r0, r8
 8010248:	46ac      	mov	ip, r5
 801024a:	46f2      	mov	sl, lr
 801024c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010250:	b293      	uxth	r3, r2
 8010252:	fb06 e303 	mla	r3, r6, r3, lr
 8010256:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801025a:	0c1a      	lsrs	r2, r3, #16
 801025c:	b29b      	uxth	r3, r3
 801025e:	ebaa 0303 	sub.w	r3, sl, r3
 8010262:	f8dc a000 	ldr.w	sl, [ip]
 8010266:	fa13 f38a 	uxtah	r3, r3, sl
 801026a:	fb06 220e 	mla	r2, r6, lr, r2
 801026e:	9300      	str	r3, [sp, #0]
 8010270:	9b00      	ldr	r3, [sp, #0]
 8010272:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010276:	b292      	uxth	r2, r2
 8010278:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801027c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010280:	f8bd 3000 	ldrh.w	r3, [sp]
 8010284:	4581      	cmp	r9, r0
 8010286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801028a:	f84c 3b04 	str.w	r3, [ip], #4
 801028e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010292:	d2db      	bcs.n	801024c <quorem+0x42>
 8010294:	f855 300b 	ldr.w	r3, [r5, fp]
 8010298:	b92b      	cbnz	r3, 80102a6 <quorem+0x9c>
 801029a:	9b01      	ldr	r3, [sp, #4]
 801029c:	3b04      	subs	r3, #4
 801029e:	429d      	cmp	r5, r3
 80102a0:	461a      	mov	r2, r3
 80102a2:	d32c      	bcc.n	80102fe <quorem+0xf4>
 80102a4:	613c      	str	r4, [r7, #16]
 80102a6:	4638      	mov	r0, r7
 80102a8:	f001 f8f4 	bl	8011494 <__mcmp>
 80102ac:	2800      	cmp	r0, #0
 80102ae:	db22      	blt.n	80102f6 <quorem+0xec>
 80102b0:	3601      	adds	r6, #1
 80102b2:	4629      	mov	r1, r5
 80102b4:	2000      	movs	r0, #0
 80102b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80102ba:	f8d1 c000 	ldr.w	ip, [r1]
 80102be:	b293      	uxth	r3, r2
 80102c0:	1ac3      	subs	r3, r0, r3
 80102c2:	0c12      	lsrs	r2, r2, #16
 80102c4:	fa13 f38c 	uxtah	r3, r3, ip
 80102c8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80102cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80102d0:	b29b      	uxth	r3, r3
 80102d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102d6:	45c1      	cmp	r9, r8
 80102d8:	f841 3b04 	str.w	r3, [r1], #4
 80102dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80102e0:	d2e9      	bcs.n	80102b6 <quorem+0xac>
 80102e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80102e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80102ea:	b922      	cbnz	r2, 80102f6 <quorem+0xec>
 80102ec:	3b04      	subs	r3, #4
 80102ee:	429d      	cmp	r5, r3
 80102f0:	461a      	mov	r2, r3
 80102f2:	d30a      	bcc.n	801030a <quorem+0x100>
 80102f4:	613c      	str	r4, [r7, #16]
 80102f6:	4630      	mov	r0, r6
 80102f8:	b003      	add	sp, #12
 80102fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102fe:	6812      	ldr	r2, [r2, #0]
 8010300:	3b04      	subs	r3, #4
 8010302:	2a00      	cmp	r2, #0
 8010304:	d1ce      	bne.n	80102a4 <quorem+0x9a>
 8010306:	3c01      	subs	r4, #1
 8010308:	e7c9      	b.n	801029e <quorem+0x94>
 801030a:	6812      	ldr	r2, [r2, #0]
 801030c:	3b04      	subs	r3, #4
 801030e:	2a00      	cmp	r2, #0
 8010310:	d1f0      	bne.n	80102f4 <quorem+0xea>
 8010312:	3c01      	subs	r4, #1
 8010314:	e7eb      	b.n	80102ee <quorem+0xe4>
 8010316:	2000      	movs	r0, #0
 8010318:	e7ee      	b.n	80102f8 <quorem+0xee>
 801031a:	0000      	movs	r0, r0
 801031c:	0000      	movs	r0, r0
	...

08010320 <_dtoa_r>:
 8010320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010324:	ed2d 8b04 	vpush	{d8-d9}
 8010328:	69c5      	ldr	r5, [r0, #28]
 801032a:	b093      	sub	sp, #76	; 0x4c
 801032c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010330:	ec57 6b10 	vmov	r6, r7, d0
 8010334:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010338:	9107      	str	r1, [sp, #28]
 801033a:	4604      	mov	r4, r0
 801033c:	920a      	str	r2, [sp, #40]	; 0x28
 801033e:	930d      	str	r3, [sp, #52]	; 0x34
 8010340:	b975      	cbnz	r5, 8010360 <_dtoa_r+0x40>
 8010342:	2010      	movs	r0, #16
 8010344:	f7ff f870 	bl	800f428 <malloc>
 8010348:	4602      	mov	r2, r0
 801034a:	61e0      	str	r0, [r4, #28]
 801034c:	b920      	cbnz	r0, 8010358 <_dtoa_r+0x38>
 801034e:	4bae      	ldr	r3, [pc, #696]	; (8010608 <_dtoa_r+0x2e8>)
 8010350:	21ef      	movs	r1, #239	; 0xef
 8010352:	48ae      	ldr	r0, [pc, #696]	; (801060c <_dtoa_r+0x2ec>)
 8010354:	f001 fd98 	bl	8011e88 <__assert_func>
 8010358:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801035c:	6005      	str	r5, [r0, #0]
 801035e:	60c5      	str	r5, [r0, #12]
 8010360:	69e3      	ldr	r3, [r4, #28]
 8010362:	6819      	ldr	r1, [r3, #0]
 8010364:	b151      	cbz	r1, 801037c <_dtoa_r+0x5c>
 8010366:	685a      	ldr	r2, [r3, #4]
 8010368:	604a      	str	r2, [r1, #4]
 801036a:	2301      	movs	r3, #1
 801036c:	4093      	lsls	r3, r2
 801036e:	608b      	str	r3, [r1, #8]
 8010370:	4620      	mov	r0, r4
 8010372:	f000 fe53 	bl	801101c <_Bfree>
 8010376:	69e3      	ldr	r3, [r4, #28]
 8010378:	2200      	movs	r2, #0
 801037a:	601a      	str	r2, [r3, #0]
 801037c:	1e3b      	subs	r3, r7, #0
 801037e:	bfbb      	ittet	lt
 8010380:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010384:	9303      	strlt	r3, [sp, #12]
 8010386:	2300      	movge	r3, #0
 8010388:	2201      	movlt	r2, #1
 801038a:	bfac      	ite	ge
 801038c:	f8c8 3000 	strge.w	r3, [r8]
 8010390:	f8c8 2000 	strlt.w	r2, [r8]
 8010394:	4b9e      	ldr	r3, [pc, #632]	; (8010610 <_dtoa_r+0x2f0>)
 8010396:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801039a:	ea33 0308 	bics.w	r3, r3, r8
 801039e:	d11b      	bne.n	80103d8 <_dtoa_r+0xb8>
 80103a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80103a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80103a6:	6013      	str	r3, [r2, #0]
 80103a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80103ac:	4333      	orrs	r3, r6
 80103ae:	f000 8593 	beq.w	8010ed8 <_dtoa_r+0xbb8>
 80103b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103b4:	b963      	cbnz	r3, 80103d0 <_dtoa_r+0xb0>
 80103b6:	4b97      	ldr	r3, [pc, #604]	; (8010614 <_dtoa_r+0x2f4>)
 80103b8:	e027      	b.n	801040a <_dtoa_r+0xea>
 80103ba:	4b97      	ldr	r3, [pc, #604]	; (8010618 <_dtoa_r+0x2f8>)
 80103bc:	9300      	str	r3, [sp, #0]
 80103be:	3308      	adds	r3, #8
 80103c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80103c2:	6013      	str	r3, [r2, #0]
 80103c4:	9800      	ldr	r0, [sp, #0]
 80103c6:	b013      	add	sp, #76	; 0x4c
 80103c8:	ecbd 8b04 	vpop	{d8-d9}
 80103cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103d0:	4b90      	ldr	r3, [pc, #576]	; (8010614 <_dtoa_r+0x2f4>)
 80103d2:	9300      	str	r3, [sp, #0]
 80103d4:	3303      	adds	r3, #3
 80103d6:	e7f3      	b.n	80103c0 <_dtoa_r+0xa0>
 80103d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80103dc:	2200      	movs	r2, #0
 80103de:	ec51 0b17 	vmov	r0, r1, d7
 80103e2:	eeb0 8a47 	vmov.f32	s16, s14
 80103e6:	eef0 8a67 	vmov.f32	s17, s15
 80103ea:	2300      	movs	r3, #0
 80103ec:	f7f0 fb84 	bl	8000af8 <__aeabi_dcmpeq>
 80103f0:	4681      	mov	r9, r0
 80103f2:	b160      	cbz	r0, 801040e <_dtoa_r+0xee>
 80103f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80103f6:	2301      	movs	r3, #1
 80103f8:	6013      	str	r3, [r2, #0]
 80103fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	f000 8568 	beq.w	8010ed2 <_dtoa_r+0xbb2>
 8010402:	4b86      	ldr	r3, [pc, #536]	; (801061c <_dtoa_r+0x2fc>)
 8010404:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010406:	6013      	str	r3, [r2, #0]
 8010408:	3b01      	subs	r3, #1
 801040a:	9300      	str	r3, [sp, #0]
 801040c:	e7da      	b.n	80103c4 <_dtoa_r+0xa4>
 801040e:	aa10      	add	r2, sp, #64	; 0x40
 8010410:	a911      	add	r1, sp, #68	; 0x44
 8010412:	4620      	mov	r0, r4
 8010414:	eeb0 0a48 	vmov.f32	s0, s16
 8010418:	eef0 0a68 	vmov.f32	s1, s17
 801041c:	f001 f8e0 	bl	80115e0 <__d2b>
 8010420:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010424:	4682      	mov	sl, r0
 8010426:	2d00      	cmp	r5, #0
 8010428:	d07f      	beq.n	801052a <_dtoa_r+0x20a>
 801042a:	ee18 3a90 	vmov	r3, s17
 801042e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010432:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010436:	ec51 0b18 	vmov	r0, r1, d8
 801043a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801043e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010442:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010446:	4619      	mov	r1, r3
 8010448:	2200      	movs	r2, #0
 801044a:	4b75      	ldr	r3, [pc, #468]	; (8010620 <_dtoa_r+0x300>)
 801044c:	f7ef ff34 	bl	80002b8 <__aeabi_dsub>
 8010450:	a367      	add	r3, pc, #412	; (adr r3, 80105f0 <_dtoa_r+0x2d0>)
 8010452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010456:	f7f0 f8e7 	bl	8000628 <__aeabi_dmul>
 801045a:	a367      	add	r3, pc, #412	; (adr r3, 80105f8 <_dtoa_r+0x2d8>)
 801045c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010460:	f7ef ff2c 	bl	80002bc <__adddf3>
 8010464:	4606      	mov	r6, r0
 8010466:	4628      	mov	r0, r5
 8010468:	460f      	mov	r7, r1
 801046a:	f7f0 f873 	bl	8000554 <__aeabi_i2d>
 801046e:	a364      	add	r3, pc, #400	; (adr r3, 8010600 <_dtoa_r+0x2e0>)
 8010470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010474:	f7f0 f8d8 	bl	8000628 <__aeabi_dmul>
 8010478:	4602      	mov	r2, r0
 801047a:	460b      	mov	r3, r1
 801047c:	4630      	mov	r0, r6
 801047e:	4639      	mov	r1, r7
 8010480:	f7ef ff1c 	bl	80002bc <__adddf3>
 8010484:	4606      	mov	r6, r0
 8010486:	460f      	mov	r7, r1
 8010488:	f7f0 fb7e 	bl	8000b88 <__aeabi_d2iz>
 801048c:	2200      	movs	r2, #0
 801048e:	4683      	mov	fp, r0
 8010490:	2300      	movs	r3, #0
 8010492:	4630      	mov	r0, r6
 8010494:	4639      	mov	r1, r7
 8010496:	f7f0 fb39 	bl	8000b0c <__aeabi_dcmplt>
 801049a:	b148      	cbz	r0, 80104b0 <_dtoa_r+0x190>
 801049c:	4658      	mov	r0, fp
 801049e:	f7f0 f859 	bl	8000554 <__aeabi_i2d>
 80104a2:	4632      	mov	r2, r6
 80104a4:	463b      	mov	r3, r7
 80104a6:	f7f0 fb27 	bl	8000af8 <__aeabi_dcmpeq>
 80104aa:	b908      	cbnz	r0, 80104b0 <_dtoa_r+0x190>
 80104ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80104b0:	f1bb 0f16 	cmp.w	fp, #22
 80104b4:	d857      	bhi.n	8010566 <_dtoa_r+0x246>
 80104b6:	4b5b      	ldr	r3, [pc, #364]	; (8010624 <_dtoa_r+0x304>)
 80104b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80104bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c0:	ec51 0b18 	vmov	r0, r1, d8
 80104c4:	f7f0 fb22 	bl	8000b0c <__aeabi_dcmplt>
 80104c8:	2800      	cmp	r0, #0
 80104ca:	d04e      	beq.n	801056a <_dtoa_r+0x24a>
 80104cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80104d0:	2300      	movs	r3, #0
 80104d2:	930c      	str	r3, [sp, #48]	; 0x30
 80104d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104d6:	1b5b      	subs	r3, r3, r5
 80104d8:	1e5a      	subs	r2, r3, #1
 80104da:	bf45      	ittet	mi
 80104dc:	f1c3 0301 	rsbmi	r3, r3, #1
 80104e0:	9305      	strmi	r3, [sp, #20]
 80104e2:	2300      	movpl	r3, #0
 80104e4:	2300      	movmi	r3, #0
 80104e6:	9206      	str	r2, [sp, #24]
 80104e8:	bf54      	ite	pl
 80104ea:	9305      	strpl	r3, [sp, #20]
 80104ec:	9306      	strmi	r3, [sp, #24]
 80104ee:	f1bb 0f00 	cmp.w	fp, #0
 80104f2:	db3c      	blt.n	801056e <_dtoa_r+0x24e>
 80104f4:	9b06      	ldr	r3, [sp, #24]
 80104f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80104fa:	445b      	add	r3, fp
 80104fc:	9306      	str	r3, [sp, #24]
 80104fe:	2300      	movs	r3, #0
 8010500:	9308      	str	r3, [sp, #32]
 8010502:	9b07      	ldr	r3, [sp, #28]
 8010504:	2b09      	cmp	r3, #9
 8010506:	d868      	bhi.n	80105da <_dtoa_r+0x2ba>
 8010508:	2b05      	cmp	r3, #5
 801050a:	bfc4      	itt	gt
 801050c:	3b04      	subgt	r3, #4
 801050e:	9307      	strgt	r3, [sp, #28]
 8010510:	9b07      	ldr	r3, [sp, #28]
 8010512:	f1a3 0302 	sub.w	r3, r3, #2
 8010516:	bfcc      	ite	gt
 8010518:	2500      	movgt	r5, #0
 801051a:	2501      	movle	r5, #1
 801051c:	2b03      	cmp	r3, #3
 801051e:	f200 8085 	bhi.w	801062c <_dtoa_r+0x30c>
 8010522:	e8df f003 	tbb	[pc, r3]
 8010526:	3b2e      	.short	0x3b2e
 8010528:	5839      	.short	0x5839
 801052a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801052e:	441d      	add	r5, r3
 8010530:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010534:	2b20      	cmp	r3, #32
 8010536:	bfc1      	itttt	gt
 8010538:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801053c:	fa08 f803 	lslgt.w	r8, r8, r3
 8010540:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010544:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010548:	bfd6      	itet	le
 801054a:	f1c3 0320 	rsble	r3, r3, #32
 801054e:	ea48 0003 	orrgt.w	r0, r8, r3
 8010552:	fa06 f003 	lslle.w	r0, r6, r3
 8010556:	f7ef ffed 	bl	8000534 <__aeabi_ui2d>
 801055a:	2201      	movs	r2, #1
 801055c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010560:	3d01      	subs	r5, #1
 8010562:	920e      	str	r2, [sp, #56]	; 0x38
 8010564:	e76f      	b.n	8010446 <_dtoa_r+0x126>
 8010566:	2301      	movs	r3, #1
 8010568:	e7b3      	b.n	80104d2 <_dtoa_r+0x1b2>
 801056a:	900c      	str	r0, [sp, #48]	; 0x30
 801056c:	e7b2      	b.n	80104d4 <_dtoa_r+0x1b4>
 801056e:	9b05      	ldr	r3, [sp, #20]
 8010570:	eba3 030b 	sub.w	r3, r3, fp
 8010574:	9305      	str	r3, [sp, #20]
 8010576:	f1cb 0300 	rsb	r3, fp, #0
 801057a:	9308      	str	r3, [sp, #32]
 801057c:	2300      	movs	r3, #0
 801057e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010580:	e7bf      	b.n	8010502 <_dtoa_r+0x1e2>
 8010582:	2300      	movs	r3, #0
 8010584:	9309      	str	r3, [sp, #36]	; 0x24
 8010586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010588:	2b00      	cmp	r3, #0
 801058a:	dc52      	bgt.n	8010632 <_dtoa_r+0x312>
 801058c:	2301      	movs	r3, #1
 801058e:	9301      	str	r3, [sp, #4]
 8010590:	9304      	str	r3, [sp, #16]
 8010592:	461a      	mov	r2, r3
 8010594:	920a      	str	r2, [sp, #40]	; 0x28
 8010596:	e00b      	b.n	80105b0 <_dtoa_r+0x290>
 8010598:	2301      	movs	r3, #1
 801059a:	e7f3      	b.n	8010584 <_dtoa_r+0x264>
 801059c:	2300      	movs	r3, #0
 801059e:	9309      	str	r3, [sp, #36]	; 0x24
 80105a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105a2:	445b      	add	r3, fp
 80105a4:	9301      	str	r3, [sp, #4]
 80105a6:	3301      	adds	r3, #1
 80105a8:	2b01      	cmp	r3, #1
 80105aa:	9304      	str	r3, [sp, #16]
 80105ac:	bfb8      	it	lt
 80105ae:	2301      	movlt	r3, #1
 80105b0:	69e0      	ldr	r0, [r4, #28]
 80105b2:	2100      	movs	r1, #0
 80105b4:	2204      	movs	r2, #4
 80105b6:	f102 0614 	add.w	r6, r2, #20
 80105ba:	429e      	cmp	r6, r3
 80105bc:	d93d      	bls.n	801063a <_dtoa_r+0x31a>
 80105be:	6041      	str	r1, [r0, #4]
 80105c0:	4620      	mov	r0, r4
 80105c2:	f000 fceb 	bl	8010f9c <_Balloc>
 80105c6:	9000      	str	r0, [sp, #0]
 80105c8:	2800      	cmp	r0, #0
 80105ca:	d139      	bne.n	8010640 <_dtoa_r+0x320>
 80105cc:	4b16      	ldr	r3, [pc, #88]	; (8010628 <_dtoa_r+0x308>)
 80105ce:	4602      	mov	r2, r0
 80105d0:	f240 11af 	movw	r1, #431	; 0x1af
 80105d4:	e6bd      	b.n	8010352 <_dtoa_r+0x32>
 80105d6:	2301      	movs	r3, #1
 80105d8:	e7e1      	b.n	801059e <_dtoa_r+0x27e>
 80105da:	2501      	movs	r5, #1
 80105dc:	2300      	movs	r3, #0
 80105de:	9307      	str	r3, [sp, #28]
 80105e0:	9509      	str	r5, [sp, #36]	; 0x24
 80105e2:	f04f 33ff 	mov.w	r3, #4294967295
 80105e6:	9301      	str	r3, [sp, #4]
 80105e8:	9304      	str	r3, [sp, #16]
 80105ea:	2200      	movs	r2, #0
 80105ec:	2312      	movs	r3, #18
 80105ee:	e7d1      	b.n	8010594 <_dtoa_r+0x274>
 80105f0:	636f4361 	.word	0x636f4361
 80105f4:	3fd287a7 	.word	0x3fd287a7
 80105f8:	8b60c8b3 	.word	0x8b60c8b3
 80105fc:	3fc68a28 	.word	0x3fc68a28
 8010600:	509f79fb 	.word	0x509f79fb
 8010604:	3fd34413 	.word	0x3fd34413
 8010608:	080176e9 	.word	0x080176e9
 801060c:	08017700 	.word	0x08017700
 8010610:	7ff00000 	.word	0x7ff00000
 8010614:	080176e5 	.word	0x080176e5
 8010618:	080176dc 	.word	0x080176dc
 801061c:	080176b9 	.word	0x080176b9
 8010620:	3ff80000 	.word	0x3ff80000
 8010624:	080177f0 	.word	0x080177f0
 8010628:	08017758 	.word	0x08017758
 801062c:	2301      	movs	r3, #1
 801062e:	9309      	str	r3, [sp, #36]	; 0x24
 8010630:	e7d7      	b.n	80105e2 <_dtoa_r+0x2c2>
 8010632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010634:	9301      	str	r3, [sp, #4]
 8010636:	9304      	str	r3, [sp, #16]
 8010638:	e7ba      	b.n	80105b0 <_dtoa_r+0x290>
 801063a:	3101      	adds	r1, #1
 801063c:	0052      	lsls	r2, r2, #1
 801063e:	e7ba      	b.n	80105b6 <_dtoa_r+0x296>
 8010640:	69e3      	ldr	r3, [r4, #28]
 8010642:	9a00      	ldr	r2, [sp, #0]
 8010644:	601a      	str	r2, [r3, #0]
 8010646:	9b04      	ldr	r3, [sp, #16]
 8010648:	2b0e      	cmp	r3, #14
 801064a:	f200 80a8 	bhi.w	801079e <_dtoa_r+0x47e>
 801064e:	2d00      	cmp	r5, #0
 8010650:	f000 80a5 	beq.w	801079e <_dtoa_r+0x47e>
 8010654:	f1bb 0f00 	cmp.w	fp, #0
 8010658:	dd38      	ble.n	80106cc <_dtoa_r+0x3ac>
 801065a:	4bc0      	ldr	r3, [pc, #768]	; (801095c <_dtoa_r+0x63c>)
 801065c:	f00b 020f 	and.w	r2, fp, #15
 8010660:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010664:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010668:	e9d3 6700 	ldrd	r6, r7, [r3]
 801066c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010670:	d019      	beq.n	80106a6 <_dtoa_r+0x386>
 8010672:	4bbb      	ldr	r3, [pc, #748]	; (8010960 <_dtoa_r+0x640>)
 8010674:	ec51 0b18 	vmov	r0, r1, d8
 8010678:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801067c:	f7f0 f8fe 	bl	800087c <__aeabi_ddiv>
 8010680:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010684:	f008 080f 	and.w	r8, r8, #15
 8010688:	2503      	movs	r5, #3
 801068a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010960 <_dtoa_r+0x640>
 801068e:	f1b8 0f00 	cmp.w	r8, #0
 8010692:	d10a      	bne.n	80106aa <_dtoa_r+0x38a>
 8010694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010698:	4632      	mov	r2, r6
 801069a:	463b      	mov	r3, r7
 801069c:	f7f0 f8ee 	bl	800087c <__aeabi_ddiv>
 80106a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106a4:	e02b      	b.n	80106fe <_dtoa_r+0x3de>
 80106a6:	2502      	movs	r5, #2
 80106a8:	e7ef      	b.n	801068a <_dtoa_r+0x36a>
 80106aa:	f018 0f01 	tst.w	r8, #1
 80106ae:	d008      	beq.n	80106c2 <_dtoa_r+0x3a2>
 80106b0:	4630      	mov	r0, r6
 80106b2:	4639      	mov	r1, r7
 80106b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80106b8:	f7ef ffb6 	bl	8000628 <__aeabi_dmul>
 80106bc:	3501      	adds	r5, #1
 80106be:	4606      	mov	r6, r0
 80106c0:	460f      	mov	r7, r1
 80106c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80106c6:	f109 0908 	add.w	r9, r9, #8
 80106ca:	e7e0      	b.n	801068e <_dtoa_r+0x36e>
 80106cc:	f000 809f 	beq.w	801080e <_dtoa_r+0x4ee>
 80106d0:	f1cb 0600 	rsb	r6, fp, #0
 80106d4:	4ba1      	ldr	r3, [pc, #644]	; (801095c <_dtoa_r+0x63c>)
 80106d6:	4fa2      	ldr	r7, [pc, #648]	; (8010960 <_dtoa_r+0x640>)
 80106d8:	f006 020f 	and.w	r2, r6, #15
 80106dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80106e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e4:	ec51 0b18 	vmov	r0, r1, d8
 80106e8:	f7ef ff9e 	bl	8000628 <__aeabi_dmul>
 80106ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106f0:	1136      	asrs	r6, r6, #4
 80106f2:	2300      	movs	r3, #0
 80106f4:	2502      	movs	r5, #2
 80106f6:	2e00      	cmp	r6, #0
 80106f8:	d17e      	bne.n	80107f8 <_dtoa_r+0x4d8>
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d1d0      	bne.n	80106a0 <_dtoa_r+0x380>
 80106fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010700:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010704:	2b00      	cmp	r3, #0
 8010706:	f000 8084 	beq.w	8010812 <_dtoa_r+0x4f2>
 801070a:	4b96      	ldr	r3, [pc, #600]	; (8010964 <_dtoa_r+0x644>)
 801070c:	2200      	movs	r2, #0
 801070e:	4640      	mov	r0, r8
 8010710:	4649      	mov	r1, r9
 8010712:	f7f0 f9fb 	bl	8000b0c <__aeabi_dcmplt>
 8010716:	2800      	cmp	r0, #0
 8010718:	d07b      	beq.n	8010812 <_dtoa_r+0x4f2>
 801071a:	9b04      	ldr	r3, [sp, #16]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d078      	beq.n	8010812 <_dtoa_r+0x4f2>
 8010720:	9b01      	ldr	r3, [sp, #4]
 8010722:	2b00      	cmp	r3, #0
 8010724:	dd39      	ble.n	801079a <_dtoa_r+0x47a>
 8010726:	4b90      	ldr	r3, [pc, #576]	; (8010968 <_dtoa_r+0x648>)
 8010728:	2200      	movs	r2, #0
 801072a:	4640      	mov	r0, r8
 801072c:	4649      	mov	r1, r9
 801072e:	f7ef ff7b 	bl	8000628 <__aeabi_dmul>
 8010732:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010736:	9e01      	ldr	r6, [sp, #4]
 8010738:	f10b 37ff 	add.w	r7, fp, #4294967295
 801073c:	3501      	adds	r5, #1
 801073e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010742:	4628      	mov	r0, r5
 8010744:	f7ef ff06 	bl	8000554 <__aeabi_i2d>
 8010748:	4642      	mov	r2, r8
 801074a:	464b      	mov	r3, r9
 801074c:	f7ef ff6c 	bl	8000628 <__aeabi_dmul>
 8010750:	4b86      	ldr	r3, [pc, #536]	; (801096c <_dtoa_r+0x64c>)
 8010752:	2200      	movs	r2, #0
 8010754:	f7ef fdb2 	bl	80002bc <__adddf3>
 8010758:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801075c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010760:	9303      	str	r3, [sp, #12]
 8010762:	2e00      	cmp	r6, #0
 8010764:	d158      	bne.n	8010818 <_dtoa_r+0x4f8>
 8010766:	4b82      	ldr	r3, [pc, #520]	; (8010970 <_dtoa_r+0x650>)
 8010768:	2200      	movs	r2, #0
 801076a:	4640      	mov	r0, r8
 801076c:	4649      	mov	r1, r9
 801076e:	f7ef fda3 	bl	80002b8 <__aeabi_dsub>
 8010772:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010776:	4680      	mov	r8, r0
 8010778:	4689      	mov	r9, r1
 801077a:	f7f0 f9e5 	bl	8000b48 <__aeabi_dcmpgt>
 801077e:	2800      	cmp	r0, #0
 8010780:	f040 8296 	bne.w	8010cb0 <_dtoa_r+0x990>
 8010784:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010788:	4640      	mov	r0, r8
 801078a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801078e:	4649      	mov	r1, r9
 8010790:	f7f0 f9bc 	bl	8000b0c <__aeabi_dcmplt>
 8010794:	2800      	cmp	r0, #0
 8010796:	f040 8289 	bne.w	8010cac <_dtoa_r+0x98c>
 801079a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801079e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	f2c0 814e 	blt.w	8010a42 <_dtoa_r+0x722>
 80107a6:	f1bb 0f0e 	cmp.w	fp, #14
 80107aa:	f300 814a 	bgt.w	8010a42 <_dtoa_r+0x722>
 80107ae:	4b6b      	ldr	r3, [pc, #428]	; (801095c <_dtoa_r+0x63c>)
 80107b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80107b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80107b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	f280 80dc 	bge.w	8010978 <_dtoa_r+0x658>
 80107c0:	9b04      	ldr	r3, [sp, #16]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	f300 80d8 	bgt.w	8010978 <_dtoa_r+0x658>
 80107c8:	f040 826f 	bne.w	8010caa <_dtoa_r+0x98a>
 80107cc:	4b68      	ldr	r3, [pc, #416]	; (8010970 <_dtoa_r+0x650>)
 80107ce:	2200      	movs	r2, #0
 80107d0:	4640      	mov	r0, r8
 80107d2:	4649      	mov	r1, r9
 80107d4:	f7ef ff28 	bl	8000628 <__aeabi_dmul>
 80107d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80107dc:	f7f0 f9aa 	bl	8000b34 <__aeabi_dcmpge>
 80107e0:	9e04      	ldr	r6, [sp, #16]
 80107e2:	4637      	mov	r7, r6
 80107e4:	2800      	cmp	r0, #0
 80107e6:	f040 8245 	bne.w	8010c74 <_dtoa_r+0x954>
 80107ea:	9d00      	ldr	r5, [sp, #0]
 80107ec:	2331      	movs	r3, #49	; 0x31
 80107ee:	f805 3b01 	strb.w	r3, [r5], #1
 80107f2:	f10b 0b01 	add.w	fp, fp, #1
 80107f6:	e241      	b.n	8010c7c <_dtoa_r+0x95c>
 80107f8:	07f2      	lsls	r2, r6, #31
 80107fa:	d505      	bpl.n	8010808 <_dtoa_r+0x4e8>
 80107fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010800:	f7ef ff12 	bl	8000628 <__aeabi_dmul>
 8010804:	3501      	adds	r5, #1
 8010806:	2301      	movs	r3, #1
 8010808:	1076      	asrs	r6, r6, #1
 801080a:	3708      	adds	r7, #8
 801080c:	e773      	b.n	80106f6 <_dtoa_r+0x3d6>
 801080e:	2502      	movs	r5, #2
 8010810:	e775      	b.n	80106fe <_dtoa_r+0x3de>
 8010812:	9e04      	ldr	r6, [sp, #16]
 8010814:	465f      	mov	r7, fp
 8010816:	e792      	b.n	801073e <_dtoa_r+0x41e>
 8010818:	9900      	ldr	r1, [sp, #0]
 801081a:	4b50      	ldr	r3, [pc, #320]	; (801095c <_dtoa_r+0x63c>)
 801081c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010820:	4431      	add	r1, r6
 8010822:	9102      	str	r1, [sp, #8]
 8010824:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010826:	eeb0 9a47 	vmov.f32	s18, s14
 801082a:	eef0 9a67 	vmov.f32	s19, s15
 801082e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010832:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010836:	2900      	cmp	r1, #0
 8010838:	d044      	beq.n	80108c4 <_dtoa_r+0x5a4>
 801083a:	494e      	ldr	r1, [pc, #312]	; (8010974 <_dtoa_r+0x654>)
 801083c:	2000      	movs	r0, #0
 801083e:	f7f0 f81d 	bl	800087c <__aeabi_ddiv>
 8010842:	ec53 2b19 	vmov	r2, r3, d9
 8010846:	f7ef fd37 	bl	80002b8 <__aeabi_dsub>
 801084a:	9d00      	ldr	r5, [sp, #0]
 801084c:	ec41 0b19 	vmov	d9, r0, r1
 8010850:	4649      	mov	r1, r9
 8010852:	4640      	mov	r0, r8
 8010854:	f7f0 f998 	bl	8000b88 <__aeabi_d2iz>
 8010858:	4606      	mov	r6, r0
 801085a:	f7ef fe7b 	bl	8000554 <__aeabi_i2d>
 801085e:	4602      	mov	r2, r0
 8010860:	460b      	mov	r3, r1
 8010862:	4640      	mov	r0, r8
 8010864:	4649      	mov	r1, r9
 8010866:	f7ef fd27 	bl	80002b8 <__aeabi_dsub>
 801086a:	3630      	adds	r6, #48	; 0x30
 801086c:	f805 6b01 	strb.w	r6, [r5], #1
 8010870:	ec53 2b19 	vmov	r2, r3, d9
 8010874:	4680      	mov	r8, r0
 8010876:	4689      	mov	r9, r1
 8010878:	f7f0 f948 	bl	8000b0c <__aeabi_dcmplt>
 801087c:	2800      	cmp	r0, #0
 801087e:	d164      	bne.n	801094a <_dtoa_r+0x62a>
 8010880:	4642      	mov	r2, r8
 8010882:	464b      	mov	r3, r9
 8010884:	4937      	ldr	r1, [pc, #220]	; (8010964 <_dtoa_r+0x644>)
 8010886:	2000      	movs	r0, #0
 8010888:	f7ef fd16 	bl	80002b8 <__aeabi_dsub>
 801088c:	ec53 2b19 	vmov	r2, r3, d9
 8010890:	f7f0 f93c 	bl	8000b0c <__aeabi_dcmplt>
 8010894:	2800      	cmp	r0, #0
 8010896:	f040 80b6 	bne.w	8010a06 <_dtoa_r+0x6e6>
 801089a:	9b02      	ldr	r3, [sp, #8]
 801089c:	429d      	cmp	r5, r3
 801089e:	f43f af7c 	beq.w	801079a <_dtoa_r+0x47a>
 80108a2:	4b31      	ldr	r3, [pc, #196]	; (8010968 <_dtoa_r+0x648>)
 80108a4:	ec51 0b19 	vmov	r0, r1, d9
 80108a8:	2200      	movs	r2, #0
 80108aa:	f7ef febd 	bl	8000628 <__aeabi_dmul>
 80108ae:	4b2e      	ldr	r3, [pc, #184]	; (8010968 <_dtoa_r+0x648>)
 80108b0:	ec41 0b19 	vmov	d9, r0, r1
 80108b4:	2200      	movs	r2, #0
 80108b6:	4640      	mov	r0, r8
 80108b8:	4649      	mov	r1, r9
 80108ba:	f7ef feb5 	bl	8000628 <__aeabi_dmul>
 80108be:	4680      	mov	r8, r0
 80108c0:	4689      	mov	r9, r1
 80108c2:	e7c5      	b.n	8010850 <_dtoa_r+0x530>
 80108c4:	ec51 0b17 	vmov	r0, r1, d7
 80108c8:	f7ef feae 	bl	8000628 <__aeabi_dmul>
 80108cc:	9b02      	ldr	r3, [sp, #8]
 80108ce:	9d00      	ldr	r5, [sp, #0]
 80108d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80108d2:	ec41 0b19 	vmov	d9, r0, r1
 80108d6:	4649      	mov	r1, r9
 80108d8:	4640      	mov	r0, r8
 80108da:	f7f0 f955 	bl	8000b88 <__aeabi_d2iz>
 80108de:	4606      	mov	r6, r0
 80108e0:	f7ef fe38 	bl	8000554 <__aeabi_i2d>
 80108e4:	3630      	adds	r6, #48	; 0x30
 80108e6:	4602      	mov	r2, r0
 80108e8:	460b      	mov	r3, r1
 80108ea:	4640      	mov	r0, r8
 80108ec:	4649      	mov	r1, r9
 80108ee:	f7ef fce3 	bl	80002b8 <__aeabi_dsub>
 80108f2:	f805 6b01 	strb.w	r6, [r5], #1
 80108f6:	9b02      	ldr	r3, [sp, #8]
 80108f8:	429d      	cmp	r5, r3
 80108fa:	4680      	mov	r8, r0
 80108fc:	4689      	mov	r9, r1
 80108fe:	f04f 0200 	mov.w	r2, #0
 8010902:	d124      	bne.n	801094e <_dtoa_r+0x62e>
 8010904:	4b1b      	ldr	r3, [pc, #108]	; (8010974 <_dtoa_r+0x654>)
 8010906:	ec51 0b19 	vmov	r0, r1, d9
 801090a:	f7ef fcd7 	bl	80002bc <__adddf3>
 801090e:	4602      	mov	r2, r0
 8010910:	460b      	mov	r3, r1
 8010912:	4640      	mov	r0, r8
 8010914:	4649      	mov	r1, r9
 8010916:	f7f0 f917 	bl	8000b48 <__aeabi_dcmpgt>
 801091a:	2800      	cmp	r0, #0
 801091c:	d173      	bne.n	8010a06 <_dtoa_r+0x6e6>
 801091e:	ec53 2b19 	vmov	r2, r3, d9
 8010922:	4914      	ldr	r1, [pc, #80]	; (8010974 <_dtoa_r+0x654>)
 8010924:	2000      	movs	r0, #0
 8010926:	f7ef fcc7 	bl	80002b8 <__aeabi_dsub>
 801092a:	4602      	mov	r2, r0
 801092c:	460b      	mov	r3, r1
 801092e:	4640      	mov	r0, r8
 8010930:	4649      	mov	r1, r9
 8010932:	f7f0 f8eb 	bl	8000b0c <__aeabi_dcmplt>
 8010936:	2800      	cmp	r0, #0
 8010938:	f43f af2f 	beq.w	801079a <_dtoa_r+0x47a>
 801093c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801093e:	1e6b      	subs	r3, r5, #1
 8010940:	930f      	str	r3, [sp, #60]	; 0x3c
 8010942:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010946:	2b30      	cmp	r3, #48	; 0x30
 8010948:	d0f8      	beq.n	801093c <_dtoa_r+0x61c>
 801094a:	46bb      	mov	fp, r7
 801094c:	e04a      	b.n	80109e4 <_dtoa_r+0x6c4>
 801094e:	4b06      	ldr	r3, [pc, #24]	; (8010968 <_dtoa_r+0x648>)
 8010950:	f7ef fe6a 	bl	8000628 <__aeabi_dmul>
 8010954:	4680      	mov	r8, r0
 8010956:	4689      	mov	r9, r1
 8010958:	e7bd      	b.n	80108d6 <_dtoa_r+0x5b6>
 801095a:	bf00      	nop
 801095c:	080177f0 	.word	0x080177f0
 8010960:	080177c8 	.word	0x080177c8
 8010964:	3ff00000 	.word	0x3ff00000
 8010968:	40240000 	.word	0x40240000
 801096c:	401c0000 	.word	0x401c0000
 8010970:	40140000 	.word	0x40140000
 8010974:	3fe00000 	.word	0x3fe00000
 8010978:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801097c:	9d00      	ldr	r5, [sp, #0]
 801097e:	4642      	mov	r2, r8
 8010980:	464b      	mov	r3, r9
 8010982:	4630      	mov	r0, r6
 8010984:	4639      	mov	r1, r7
 8010986:	f7ef ff79 	bl	800087c <__aeabi_ddiv>
 801098a:	f7f0 f8fd 	bl	8000b88 <__aeabi_d2iz>
 801098e:	9001      	str	r0, [sp, #4]
 8010990:	f7ef fde0 	bl	8000554 <__aeabi_i2d>
 8010994:	4642      	mov	r2, r8
 8010996:	464b      	mov	r3, r9
 8010998:	f7ef fe46 	bl	8000628 <__aeabi_dmul>
 801099c:	4602      	mov	r2, r0
 801099e:	460b      	mov	r3, r1
 80109a0:	4630      	mov	r0, r6
 80109a2:	4639      	mov	r1, r7
 80109a4:	f7ef fc88 	bl	80002b8 <__aeabi_dsub>
 80109a8:	9e01      	ldr	r6, [sp, #4]
 80109aa:	9f04      	ldr	r7, [sp, #16]
 80109ac:	3630      	adds	r6, #48	; 0x30
 80109ae:	f805 6b01 	strb.w	r6, [r5], #1
 80109b2:	9e00      	ldr	r6, [sp, #0]
 80109b4:	1bae      	subs	r6, r5, r6
 80109b6:	42b7      	cmp	r7, r6
 80109b8:	4602      	mov	r2, r0
 80109ba:	460b      	mov	r3, r1
 80109bc:	d134      	bne.n	8010a28 <_dtoa_r+0x708>
 80109be:	f7ef fc7d 	bl	80002bc <__adddf3>
 80109c2:	4642      	mov	r2, r8
 80109c4:	464b      	mov	r3, r9
 80109c6:	4606      	mov	r6, r0
 80109c8:	460f      	mov	r7, r1
 80109ca:	f7f0 f8bd 	bl	8000b48 <__aeabi_dcmpgt>
 80109ce:	b9c8      	cbnz	r0, 8010a04 <_dtoa_r+0x6e4>
 80109d0:	4642      	mov	r2, r8
 80109d2:	464b      	mov	r3, r9
 80109d4:	4630      	mov	r0, r6
 80109d6:	4639      	mov	r1, r7
 80109d8:	f7f0 f88e 	bl	8000af8 <__aeabi_dcmpeq>
 80109dc:	b110      	cbz	r0, 80109e4 <_dtoa_r+0x6c4>
 80109de:	9b01      	ldr	r3, [sp, #4]
 80109e0:	07db      	lsls	r3, r3, #31
 80109e2:	d40f      	bmi.n	8010a04 <_dtoa_r+0x6e4>
 80109e4:	4651      	mov	r1, sl
 80109e6:	4620      	mov	r0, r4
 80109e8:	f000 fb18 	bl	801101c <_Bfree>
 80109ec:	2300      	movs	r3, #0
 80109ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80109f0:	702b      	strb	r3, [r5, #0]
 80109f2:	f10b 0301 	add.w	r3, fp, #1
 80109f6:	6013      	str	r3, [r2, #0]
 80109f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	f43f ace2 	beq.w	80103c4 <_dtoa_r+0xa4>
 8010a00:	601d      	str	r5, [r3, #0]
 8010a02:	e4df      	b.n	80103c4 <_dtoa_r+0xa4>
 8010a04:	465f      	mov	r7, fp
 8010a06:	462b      	mov	r3, r5
 8010a08:	461d      	mov	r5, r3
 8010a0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a0e:	2a39      	cmp	r2, #57	; 0x39
 8010a10:	d106      	bne.n	8010a20 <_dtoa_r+0x700>
 8010a12:	9a00      	ldr	r2, [sp, #0]
 8010a14:	429a      	cmp	r2, r3
 8010a16:	d1f7      	bne.n	8010a08 <_dtoa_r+0x6e8>
 8010a18:	9900      	ldr	r1, [sp, #0]
 8010a1a:	2230      	movs	r2, #48	; 0x30
 8010a1c:	3701      	adds	r7, #1
 8010a1e:	700a      	strb	r2, [r1, #0]
 8010a20:	781a      	ldrb	r2, [r3, #0]
 8010a22:	3201      	adds	r2, #1
 8010a24:	701a      	strb	r2, [r3, #0]
 8010a26:	e790      	b.n	801094a <_dtoa_r+0x62a>
 8010a28:	4ba3      	ldr	r3, [pc, #652]	; (8010cb8 <_dtoa_r+0x998>)
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	f7ef fdfc 	bl	8000628 <__aeabi_dmul>
 8010a30:	2200      	movs	r2, #0
 8010a32:	2300      	movs	r3, #0
 8010a34:	4606      	mov	r6, r0
 8010a36:	460f      	mov	r7, r1
 8010a38:	f7f0 f85e 	bl	8000af8 <__aeabi_dcmpeq>
 8010a3c:	2800      	cmp	r0, #0
 8010a3e:	d09e      	beq.n	801097e <_dtoa_r+0x65e>
 8010a40:	e7d0      	b.n	80109e4 <_dtoa_r+0x6c4>
 8010a42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a44:	2a00      	cmp	r2, #0
 8010a46:	f000 80ca 	beq.w	8010bde <_dtoa_r+0x8be>
 8010a4a:	9a07      	ldr	r2, [sp, #28]
 8010a4c:	2a01      	cmp	r2, #1
 8010a4e:	f300 80ad 	bgt.w	8010bac <_dtoa_r+0x88c>
 8010a52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a54:	2a00      	cmp	r2, #0
 8010a56:	f000 80a5 	beq.w	8010ba4 <_dtoa_r+0x884>
 8010a5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010a5e:	9e08      	ldr	r6, [sp, #32]
 8010a60:	9d05      	ldr	r5, [sp, #20]
 8010a62:	9a05      	ldr	r2, [sp, #20]
 8010a64:	441a      	add	r2, r3
 8010a66:	9205      	str	r2, [sp, #20]
 8010a68:	9a06      	ldr	r2, [sp, #24]
 8010a6a:	2101      	movs	r1, #1
 8010a6c:	441a      	add	r2, r3
 8010a6e:	4620      	mov	r0, r4
 8010a70:	9206      	str	r2, [sp, #24]
 8010a72:	f000 fb89 	bl	8011188 <__i2b>
 8010a76:	4607      	mov	r7, r0
 8010a78:	b165      	cbz	r5, 8010a94 <_dtoa_r+0x774>
 8010a7a:	9b06      	ldr	r3, [sp, #24]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	dd09      	ble.n	8010a94 <_dtoa_r+0x774>
 8010a80:	42ab      	cmp	r3, r5
 8010a82:	9a05      	ldr	r2, [sp, #20]
 8010a84:	bfa8      	it	ge
 8010a86:	462b      	movge	r3, r5
 8010a88:	1ad2      	subs	r2, r2, r3
 8010a8a:	9205      	str	r2, [sp, #20]
 8010a8c:	9a06      	ldr	r2, [sp, #24]
 8010a8e:	1aed      	subs	r5, r5, r3
 8010a90:	1ad3      	subs	r3, r2, r3
 8010a92:	9306      	str	r3, [sp, #24]
 8010a94:	9b08      	ldr	r3, [sp, #32]
 8010a96:	b1f3      	cbz	r3, 8010ad6 <_dtoa_r+0x7b6>
 8010a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	f000 80a3 	beq.w	8010be6 <_dtoa_r+0x8c6>
 8010aa0:	2e00      	cmp	r6, #0
 8010aa2:	dd10      	ble.n	8010ac6 <_dtoa_r+0x7a6>
 8010aa4:	4639      	mov	r1, r7
 8010aa6:	4632      	mov	r2, r6
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	f000 fc2d 	bl	8011308 <__pow5mult>
 8010aae:	4652      	mov	r2, sl
 8010ab0:	4601      	mov	r1, r0
 8010ab2:	4607      	mov	r7, r0
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	f000 fb7d 	bl	80111b4 <__multiply>
 8010aba:	4651      	mov	r1, sl
 8010abc:	4680      	mov	r8, r0
 8010abe:	4620      	mov	r0, r4
 8010ac0:	f000 faac 	bl	801101c <_Bfree>
 8010ac4:	46c2      	mov	sl, r8
 8010ac6:	9b08      	ldr	r3, [sp, #32]
 8010ac8:	1b9a      	subs	r2, r3, r6
 8010aca:	d004      	beq.n	8010ad6 <_dtoa_r+0x7b6>
 8010acc:	4651      	mov	r1, sl
 8010ace:	4620      	mov	r0, r4
 8010ad0:	f000 fc1a 	bl	8011308 <__pow5mult>
 8010ad4:	4682      	mov	sl, r0
 8010ad6:	2101      	movs	r1, #1
 8010ad8:	4620      	mov	r0, r4
 8010ada:	f000 fb55 	bl	8011188 <__i2b>
 8010ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	4606      	mov	r6, r0
 8010ae4:	f340 8081 	ble.w	8010bea <_dtoa_r+0x8ca>
 8010ae8:	461a      	mov	r2, r3
 8010aea:	4601      	mov	r1, r0
 8010aec:	4620      	mov	r0, r4
 8010aee:	f000 fc0b 	bl	8011308 <__pow5mult>
 8010af2:	9b07      	ldr	r3, [sp, #28]
 8010af4:	2b01      	cmp	r3, #1
 8010af6:	4606      	mov	r6, r0
 8010af8:	dd7a      	ble.n	8010bf0 <_dtoa_r+0x8d0>
 8010afa:	f04f 0800 	mov.w	r8, #0
 8010afe:	6933      	ldr	r3, [r6, #16]
 8010b00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010b04:	6918      	ldr	r0, [r3, #16]
 8010b06:	f000 faf1 	bl	80110ec <__hi0bits>
 8010b0a:	f1c0 0020 	rsb	r0, r0, #32
 8010b0e:	9b06      	ldr	r3, [sp, #24]
 8010b10:	4418      	add	r0, r3
 8010b12:	f010 001f 	ands.w	r0, r0, #31
 8010b16:	f000 8094 	beq.w	8010c42 <_dtoa_r+0x922>
 8010b1a:	f1c0 0320 	rsb	r3, r0, #32
 8010b1e:	2b04      	cmp	r3, #4
 8010b20:	f340 8085 	ble.w	8010c2e <_dtoa_r+0x90e>
 8010b24:	9b05      	ldr	r3, [sp, #20]
 8010b26:	f1c0 001c 	rsb	r0, r0, #28
 8010b2a:	4403      	add	r3, r0
 8010b2c:	9305      	str	r3, [sp, #20]
 8010b2e:	9b06      	ldr	r3, [sp, #24]
 8010b30:	4403      	add	r3, r0
 8010b32:	4405      	add	r5, r0
 8010b34:	9306      	str	r3, [sp, #24]
 8010b36:	9b05      	ldr	r3, [sp, #20]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	dd05      	ble.n	8010b48 <_dtoa_r+0x828>
 8010b3c:	4651      	mov	r1, sl
 8010b3e:	461a      	mov	r2, r3
 8010b40:	4620      	mov	r0, r4
 8010b42:	f000 fc3b 	bl	80113bc <__lshift>
 8010b46:	4682      	mov	sl, r0
 8010b48:	9b06      	ldr	r3, [sp, #24]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	dd05      	ble.n	8010b5a <_dtoa_r+0x83a>
 8010b4e:	4631      	mov	r1, r6
 8010b50:	461a      	mov	r2, r3
 8010b52:	4620      	mov	r0, r4
 8010b54:	f000 fc32 	bl	80113bc <__lshift>
 8010b58:	4606      	mov	r6, r0
 8010b5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d072      	beq.n	8010c46 <_dtoa_r+0x926>
 8010b60:	4631      	mov	r1, r6
 8010b62:	4650      	mov	r0, sl
 8010b64:	f000 fc96 	bl	8011494 <__mcmp>
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	da6c      	bge.n	8010c46 <_dtoa_r+0x926>
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	4651      	mov	r1, sl
 8010b70:	220a      	movs	r2, #10
 8010b72:	4620      	mov	r0, r4
 8010b74:	f000 fa74 	bl	8011060 <__multadd>
 8010b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010b7e:	4682      	mov	sl, r0
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	f000 81b0 	beq.w	8010ee6 <_dtoa_r+0xbc6>
 8010b86:	2300      	movs	r3, #0
 8010b88:	4639      	mov	r1, r7
 8010b8a:	220a      	movs	r2, #10
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	f000 fa67 	bl	8011060 <__multadd>
 8010b92:	9b01      	ldr	r3, [sp, #4]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	4607      	mov	r7, r0
 8010b98:	f300 8096 	bgt.w	8010cc8 <_dtoa_r+0x9a8>
 8010b9c:	9b07      	ldr	r3, [sp, #28]
 8010b9e:	2b02      	cmp	r3, #2
 8010ba0:	dc59      	bgt.n	8010c56 <_dtoa_r+0x936>
 8010ba2:	e091      	b.n	8010cc8 <_dtoa_r+0x9a8>
 8010ba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010ba6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010baa:	e758      	b.n	8010a5e <_dtoa_r+0x73e>
 8010bac:	9b04      	ldr	r3, [sp, #16]
 8010bae:	1e5e      	subs	r6, r3, #1
 8010bb0:	9b08      	ldr	r3, [sp, #32]
 8010bb2:	42b3      	cmp	r3, r6
 8010bb4:	bfbf      	itttt	lt
 8010bb6:	9b08      	ldrlt	r3, [sp, #32]
 8010bb8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010bba:	9608      	strlt	r6, [sp, #32]
 8010bbc:	1af3      	sublt	r3, r6, r3
 8010bbe:	bfb4      	ite	lt
 8010bc0:	18d2      	addlt	r2, r2, r3
 8010bc2:	1b9e      	subge	r6, r3, r6
 8010bc4:	9b04      	ldr	r3, [sp, #16]
 8010bc6:	bfbc      	itt	lt
 8010bc8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010bca:	2600      	movlt	r6, #0
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	bfb7      	itett	lt
 8010bd0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010bd4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010bd8:	1a9d      	sublt	r5, r3, r2
 8010bda:	2300      	movlt	r3, #0
 8010bdc:	e741      	b.n	8010a62 <_dtoa_r+0x742>
 8010bde:	9e08      	ldr	r6, [sp, #32]
 8010be0:	9d05      	ldr	r5, [sp, #20]
 8010be2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010be4:	e748      	b.n	8010a78 <_dtoa_r+0x758>
 8010be6:	9a08      	ldr	r2, [sp, #32]
 8010be8:	e770      	b.n	8010acc <_dtoa_r+0x7ac>
 8010bea:	9b07      	ldr	r3, [sp, #28]
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	dc19      	bgt.n	8010c24 <_dtoa_r+0x904>
 8010bf0:	9b02      	ldr	r3, [sp, #8]
 8010bf2:	b9bb      	cbnz	r3, 8010c24 <_dtoa_r+0x904>
 8010bf4:	9b03      	ldr	r3, [sp, #12]
 8010bf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010bfa:	b99b      	cbnz	r3, 8010c24 <_dtoa_r+0x904>
 8010bfc:	9b03      	ldr	r3, [sp, #12]
 8010bfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010c02:	0d1b      	lsrs	r3, r3, #20
 8010c04:	051b      	lsls	r3, r3, #20
 8010c06:	b183      	cbz	r3, 8010c2a <_dtoa_r+0x90a>
 8010c08:	9b05      	ldr	r3, [sp, #20]
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	9305      	str	r3, [sp, #20]
 8010c0e:	9b06      	ldr	r3, [sp, #24]
 8010c10:	3301      	adds	r3, #1
 8010c12:	9306      	str	r3, [sp, #24]
 8010c14:	f04f 0801 	mov.w	r8, #1
 8010c18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	f47f af6f 	bne.w	8010afe <_dtoa_r+0x7de>
 8010c20:	2001      	movs	r0, #1
 8010c22:	e774      	b.n	8010b0e <_dtoa_r+0x7ee>
 8010c24:	f04f 0800 	mov.w	r8, #0
 8010c28:	e7f6      	b.n	8010c18 <_dtoa_r+0x8f8>
 8010c2a:	4698      	mov	r8, r3
 8010c2c:	e7f4      	b.n	8010c18 <_dtoa_r+0x8f8>
 8010c2e:	d082      	beq.n	8010b36 <_dtoa_r+0x816>
 8010c30:	9a05      	ldr	r2, [sp, #20]
 8010c32:	331c      	adds	r3, #28
 8010c34:	441a      	add	r2, r3
 8010c36:	9205      	str	r2, [sp, #20]
 8010c38:	9a06      	ldr	r2, [sp, #24]
 8010c3a:	441a      	add	r2, r3
 8010c3c:	441d      	add	r5, r3
 8010c3e:	9206      	str	r2, [sp, #24]
 8010c40:	e779      	b.n	8010b36 <_dtoa_r+0x816>
 8010c42:	4603      	mov	r3, r0
 8010c44:	e7f4      	b.n	8010c30 <_dtoa_r+0x910>
 8010c46:	9b04      	ldr	r3, [sp, #16]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	dc37      	bgt.n	8010cbc <_dtoa_r+0x99c>
 8010c4c:	9b07      	ldr	r3, [sp, #28]
 8010c4e:	2b02      	cmp	r3, #2
 8010c50:	dd34      	ble.n	8010cbc <_dtoa_r+0x99c>
 8010c52:	9b04      	ldr	r3, [sp, #16]
 8010c54:	9301      	str	r3, [sp, #4]
 8010c56:	9b01      	ldr	r3, [sp, #4]
 8010c58:	b963      	cbnz	r3, 8010c74 <_dtoa_r+0x954>
 8010c5a:	4631      	mov	r1, r6
 8010c5c:	2205      	movs	r2, #5
 8010c5e:	4620      	mov	r0, r4
 8010c60:	f000 f9fe 	bl	8011060 <__multadd>
 8010c64:	4601      	mov	r1, r0
 8010c66:	4606      	mov	r6, r0
 8010c68:	4650      	mov	r0, sl
 8010c6a:	f000 fc13 	bl	8011494 <__mcmp>
 8010c6e:	2800      	cmp	r0, #0
 8010c70:	f73f adbb 	bgt.w	80107ea <_dtoa_r+0x4ca>
 8010c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c76:	9d00      	ldr	r5, [sp, #0]
 8010c78:	ea6f 0b03 	mvn.w	fp, r3
 8010c7c:	f04f 0800 	mov.w	r8, #0
 8010c80:	4631      	mov	r1, r6
 8010c82:	4620      	mov	r0, r4
 8010c84:	f000 f9ca 	bl	801101c <_Bfree>
 8010c88:	2f00      	cmp	r7, #0
 8010c8a:	f43f aeab 	beq.w	80109e4 <_dtoa_r+0x6c4>
 8010c8e:	f1b8 0f00 	cmp.w	r8, #0
 8010c92:	d005      	beq.n	8010ca0 <_dtoa_r+0x980>
 8010c94:	45b8      	cmp	r8, r7
 8010c96:	d003      	beq.n	8010ca0 <_dtoa_r+0x980>
 8010c98:	4641      	mov	r1, r8
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	f000 f9be 	bl	801101c <_Bfree>
 8010ca0:	4639      	mov	r1, r7
 8010ca2:	4620      	mov	r0, r4
 8010ca4:	f000 f9ba 	bl	801101c <_Bfree>
 8010ca8:	e69c      	b.n	80109e4 <_dtoa_r+0x6c4>
 8010caa:	2600      	movs	r6, #0
 8010cac:	4637      	mov	r7, r6
 8010cae:	e7e1      	b.n	8010c74 <_dtoa_r+0x954>
 8010cb0:	46bb      	mov	fp, r7
 8010cb2:	4637      	mov	r7, r6
 8010cb4:	e599      	b.n	80107ea <_dtoa_r+0x4ca>
 8010cb6:	bf00      	nop
 8010cb8:	40240000 	.word	0x40240000
 8010cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	f000 80c8 	beq.w	8010e54 <_dtoa_r+0xb34>
 8010cc4:	9b04      	ldr	r3, [sp, #16]
 8010cc6:	9301      	str	r3, [sp, #4]
 8010cc8:	2d00      	cmp	r5, #0
 8010cca:	dd05      	ble.n	8010cd8 <_dtoa_r+0x9b8>
 8010ccc:	4639      	mov	r1, r7
 8010cce:	462a      	mov	r2, r5
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	f000 fb73 	bl	80113bc <__lshift>
 8010cd6:	4607      	mov	r7, r0
 8010cd8:	f1b8 0f00 	cmp.w	r8, #0
 8010cdc:	d05b      	beq.n	8010d96 <_dtoa_r+0xa76>
 8010cde:	6879      	ldr	r1, [r7, #4]
 8010ce0:	4620      	mov	r0, r4
 8010ce2:	f000 f95b 	bl	8010f9c <_Balloc>
 8010ce6:	4605      	mov	r5, r0
 8010ce8:	b928      	cbnz	r0, 8010cf6 <_dtoa_r+0x9d6>
 8010cea:	4b83      	ldr	r3, [pc, #524]	; (8010ef8 <_dtoa_r+0xbd8>)
 8010cec:	4602      	mov	r2, r0
 8010cee:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010cf2:	f7ff bb2e 	b.w	8010352 <_dtoa_r+0x32>
 8010cf6:	693a      	ldr	r2, [r7, #16]
 8010cf8:	3202      	adds	r2, #2
 8010cfa:	0092      	lsls	r2, r2, #2
 8010cfc:	f107 010c 	add.w	r1, r7, #12
 8010d00:	300c      	adds	r0, #12
 8010d02:	f7ff fa74 	bl	80101ee <memcpy>
 8010d06:	2201      	movs	r2, #1
 8010d08:	4629      	mov	r1, r5
 8010d0a:	4620      	mov	r0, r4
 8010d0c:	f000 fb56 	bl	80113bc <__lshift>
 8010d10:	9b00      	ldr	r3, [sp, #0]
 8010d12:	3301      	adds	r3, #1
 8010d14:	9304      	str	r3, [sp, #16]
 8010d16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d1a:	4413      	add	r3, r2
 8010d1c:	9308      	str	r3, [sp, #32]
 8010d1e:	9b02      	ldr	r3, [sp, #8]
 8010d20:	f003 0301 	and.w	r3, r3, #1
 8010d24:	46b8      	mov	r8, r7
 8010d26:	9306      	str	r3, [sp, #24]
 8010d28:	4607      	mov	r7, r0
 8010d2a:	9b04      	ldr	r3, [sp, #16]
 8010d2c:	4631      	mov	r1, r6
 8010d2e:	3b01      	subs	r3, #1
 8010d30:	4650      	mov	r0, sl
 8010d32:	9301      	str	r3, [sp, #4]
 8010d34:	f7ff fa69 	bl	801020a <quorem>
 8010d38:	4641      	mov	r1, r8
 8010d3a:	9002      	str	r0, [sp, #8]
 8010d3c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010d40:	4650      	mov	r0, sl
 8010d42:	f000 fba7 	bl	8011494 <__mcmp>
 8010d46:	463a      	mov	r2, r7
 8010d48:	9005      	str	r0, [sp, #20]
 8010d4a:	4631      	mov	r1, r6
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	f000 fbbd 	bl	80114cc <__mdiff>
 8010d52:	68c2      	ldr	r2, [r0, #12]
 8010d54:	4605      	mov	r5, r0
 8010d56:	bb02      	cbnz	r2, 8010d9a <_dtoa_r+0xa7a>
 8010d58:	4601      	mov	r1, r0
 8010d5a:	4650      	mov	r0, sl
 8010d5c:	f000 fb9a 	bl	8011494 <__mcmp>
 8010d60:	4602      	mov	r2, r0
 8010d62:	4629      	mov	r1, r5
 8010d64:	4620      	mov	r0, r4
 8010d66:	9209      	str	r2, [sp, #36]	; 0x24
 8010d68:	f000 f958 	bl	801101c <_Bfree>
 8010d6c:	9b07      	ldr	r3, [sp, #28]
 8010d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d70:	9d04      	ldr	r5, [sp, #16]
 8010d72:	ea43 0102 	orr.w	r1, r3, r2
 8010d76:	9b06      	ldr	r3, [sp, #24]
 8010d78:	4319      	orrs	r1, r3
 8010d7a:	d110      	bne.n	8010d9e <_dtoa_r+0xa7e>
 8010d7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010d80:	d029      	beq.n	8010dd6 <_dtoa_r+0xab6>
 8010d82:	9b05      	ldr	r3, [sp, #20]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	dd02      	ble.n	8010d8e <_dtoa_r+0xa6e>
 8010d88:	9b02      	ldr	r3, [sp, #8]
 8010d8a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010d8e:	9b01      	ldr	r3, [sp, #4]
 8010d90:	f883 9000 	strb.w	r9, [r3]
 8010d94:	e774      	b.n	8010c80 <_dtoa_r+0x960>
 8010d96:	4638      	mov	r0, r7
 8010d98:	e7ba      	b.n	8010d10 <_dtoa_r+0x9f0>
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	e7e1      	b.n	8010d62 <_dtoa_r+0xa42>
 8010d9e:	9b05      	ldr	r3, [sp, #20]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	db04      	blt.n	8010dae <_dtoa_r+0xa8e>
 8010da4:	9907      	ldr	r1, [sp, #28]
 8010da6:	430b      	orrs	r3, r1
 8010da8:	9906      	ldr	r1, [sp, #24]
 8010daa:	430b      	orrs	r3, r1
 8010dac:	d120      	bne.n	8010df0 <_dtoa_r+0xad0>
 8010dae:	2a00      	cmp	r2, #0
 8010db0:	dded      	ble.n	8010d8e <_dtoa_r+0xa6e>
 8010db2:	4651      	mov	r1, sl
 8010db4:	2201      	movs	r2, #1
 8010db6:	4620      	mov	r0, r4
 8010db8:	f000 fb00 	bl	80113bc <__lshift>
 8010dbc:	4631      	mov	r1, r6
 8010dbe:	4682      	mov	sl, r0
 8010dc0:	f000 fb68 	bl	8011494 <__mcmp>
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	dc03      	bgt.n	8010dd0 <_dtoa_r+0xab0>
 8010dc8:	d1e1      	bne.n	8010d8e <_dtoa_r+0xa6e>
 8010dca:	f019 0f01 	tst.w	r9, #1
 8010dce:	d0de      	beq.n	8010d8e <_dtoa_r+0xa6e>
 8010dd0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010dd4:	d1d8      	bne.n	8010d88 <_dtoa_r+0xa68>
 8010dd6:	9a01      	ldr	r2, [sp, #4]
 8010dd8:	2339      	movs	r3, #57	; 0x39
 8010dda:	7013      	strb	r3, [r2, #0]
 8010ddc:	462b      	mov	r3, r5
 8010dde:	461d      	mov	r5, r3
 8010de0:	3b01      	subs	r3, #1
 8010de2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010de6:	2a39      	cmp	r2, #57	; 0x39
 8010de8:	d06c      	beq.n	8010ec4 <_dtoa_r+0xba4>
 8010dea:	3201      	adds	r2, #1
 8010dec:	701a      	strb	r2, [r3, #0]
 8010dee:	e747      	b.n	8010c80 <_dtoa_r+0x960>
 8010df0:	2a00      	cmp	r2, #0
 8010df2:	dd07      	ble.n	8010e04 <_dtoa_r+0xae4>
 8010df4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010df8:	d0ed      	beq.n	8010dd6 <_dtoa_r+0xab6>
 8010dfa:	9a01      	ldr	r2, [sp, #4]
 8010dfc:	f109 0301 	add.w	r3, r9, #1
 8010e00:	7013      	strb	r3, [r2, #0]
 8010e02:	e73d      	b.n	8010c80 <_dtoa_r+0x960>
 8010e04:	9b04      	ldr	r3, [sp, #16]
 8010e06:	9a08      	ldr	r2, [sp, #32]
 8010e08:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d043      	beq.n	8010e98 <_dtoa_r+0xb78>
 8010e10:	4651      	mov	r1, sl
 8010e12:	2300      	movs	r3, #0
 8010e14:	220a      	movs	r2, #10
 8010e16:	4620      	mov	r0, r4
 8010e18:	f000 f922 	bl	8011060 <__multadd>
 8010e1c:	45b8      	cmp	r8, r7
 8010e1e:	4682      	mov	sl, r0
 8010e20:	f04f 0300 	mov.w	r3, #0
 8010e24:	f04f 020a 	mov.w	r2, #10
 8010e28:	4641      	mov	r1, r8
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	d107      	bne.n	8010e3e <_dtoa_r+0xb1e>
 8010e2e:	f000 f917 	bl	8011060 <__multadd>
 8010e32:	4680      	mov	r8, r0
 8010e34:	4607      	mov	r7, r0
 8010e36:	9b04      	ldr	r3, [sp, #16]
 8010e38:	3301      	adds	r3, #1
 8010e3a:	9304      	str	r3, [sp, #16]
 8010e3c:	e775      	b.n	8010d2a <_dtoa_r+0xa0a>
 8010e3e:	f000 f90f 	bl	8011060 <__multadd>
 8010e42:	4639      	mov	r1, r7
 8010e44:	4680      	mov	r8, r0
 8010e46:	2300      	movs	r3, #0
 8010e48:	220a      	movs	r2, #10
 8010e4a:	4620      	mov	r0, r4
 8010e4c:	f000 f908 	bl	8011060 <__multadd>
 8010e50:	4607      	mov	r7, r0
 8010e52:	e7f0      	b.n	8010e36 <_dtoa_r+0xb16>
 8010e54:	9b04      	ldr	r3, [sp, #16]
 8010e56:	9301      	str	r3, [sp, #4]
 8010e58:	9d00      	ldr	r5, [sp, #0]
 8010e5a:	4631      	mov	r1, r6
 8010e5c:	4650      	mov	r0, sl
 8010e5e:	f7ff f9d4 	bl	801020a <quorem>
 8010e62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010e66:	9b00      	ldr	r3, [sp, #0]
 8010e68:	f805 9b01 	strb.w	r9, [r5], #1
 8010e6c:	1aea      	subs	r2, r5, r3
 8010e6e:	9b01      	ldr	r3, [sp, #4]
 8010e70:	4293      	cmp	r3, r2
 8010e72:	dd07      	ble.n	8010e84 <_dtoa_r+0xb64>
 8010e74:	4651      	mov	r1, sl
 8010e76:	2300      	movs	r3, #0
 8010e78:	220a      	movs	r2, #10
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	f000 f8f0 	bl	8011060 <__multadd>
 8010e80:	4682      	mov	sl, r0
 8010e82:	e7ea      	b.n	8010e5a <_dtoa_r+0xb3a>
 8010e84:	9b01      	ldr	r3, [sp, #4]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	bfc8      	it	gt
 8010e8a:	461d      	movgt	r5, r3
 8010e8c:	9b00      	ldr	r3, [sp, #0]
 8010e8e:	bfd8      	it	le
 8010e90:	2501      	movle	r5, #1
 8010e92:	441d      	add	r5, r3
 8010e94:	f04f 0800 	mov.w	r8, #0
 8010e98:	4651      	mov	r1, sl
 8010e9a:	2201      	movs	r2, #1
 8010e9c:	4620      	mov	r0, r4
 8010e9e:	f000 fa8d 	bl	80113bc <__lshift>
 8010ea2:	4631      	mov	r1, r6
 8010ea4:	4682      	mov	sl, r0
 8010ea6:	f000 faf5 	bl	8011494 <__mcmp>
 8010eaa:	2800      	cmp	r0, #0
 8010eac:	dc96      	bgt.n	8010ddc <_dtoa_r+0xabc>
 8010eae:	d102      	bne.n	8010eb6 <_dtoa_r+0xb96>
 8010eb0:	f019 0f01 	tst.w	r9, #1
 8010eb4:	d192      	bne.n	8010ddc <_dtoa_r+0xabc>
 8010eb6:	462b      	mov	r3, r5
 8010eb8:	461d      	mov	r5, r3
 8010eba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ebe:	2a30      	cmp	r2, #48	; 0x30
 8010ec0:	d0fa      	beq.n	8010eb8 <_dtoa_r+0xb98>
 8010ec2:	e6dd      	b.n	8010c80 <_dtoa_r+0x960>
 8010ec4:	9a00      	ldr	r2, [sp, #0]
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d189      	bne.n	8010dde <_dtoa_r+0xabe>
 8010eca:	f10b 0b01 	add.w	fp, fp, #1
 8010ece:	2331      	movs	r3, #49	; 0x31
 8010ed0:	e796      	b.n	8010e00 <_dtoa_r+0xae0>
 8010ed2:	4b0a      	ldr	r3, [pc, #40]	; (8010efc <_dtoa_r+0xbdc>)
 8010ed4:	f7ff ba99 	b.w	801040a <_dtoa_r+0xea>
 8010ed8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	f47f aa6d 	bne.w	80103ba <_dtoa_r+0x9a>
 8010ee0:	4b07      	ldr	r3, [pc, #28]	; (8010f00 <_dtoa_r+0xbe0>)
 8010ee2:	f7ff ba92 	b.w	801040a <_dtoa_r+0xea>
 8010ee6:	9b01      	ldr	r3, [sp, #4]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	dcb5      	bgt.n	8010e58 <_dtoa_r+0xb38>
 8010eec:	9b07      	ldr	r3, [sp, #28]
 8010eee:	2b02      	cmp	r3, #2
 8010ef0:	f73f aeb1 	bgt.w	8010c56 <_dtoa_r+0x936>
 8010ef4:	e7b0      	b.n	8010e58 <_dtoa_r+0xb38>
 8010ef6:	bf00      	nop
 8010ef8:	08017758 	.word	0x08017758
 8010efc:	080176b8 	.word	0x080176b8
 8010f00:	080176dc 	.word	0x080176dc

08010f04 <_free_r>:
 8010f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f06:	2900      	cmp	r1, #0
 8010f08:	d044      	beq.n	8010f94 <_free_r+0x90>
 8010f0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f0e:	9001      	str	r0, [sp, #4]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	f1a1 0404 	sub.w	r4, r1, #4
 8010f16:	bfb8      	it	lt
 8010f18:	18e4      	addlt	r4, r4, r3
 8010f1a:	f7fe fb2d 	bl	800f578 <__malloc_lock>
 8010f1e:	4a1e      	ldr	r2, [pc, #120]	; (8010f98 <_free_r+0x94>)
 8010f20:	9801      	ldr	r0, [sp, #4]
 8010f22:	6813      	ldr	r3, [r2, #0]
 8010f24:	b933      	cbnz	r3, 8010f34 <_free_r+0x30>
 8010f26:	6063      	str	r3, [r4, #4]
 8010f28:	6014      	str	r4, [r2, #0]
 8010f2a:	b003      	add	sp, #12
 8010f2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f30:	f7fe bb28 	b.w	800f584 <__malloc_unlock>
 8010f34:	42a3      	cmp	r3, r4
 8010f36:	d908      	bls.n	8010f4a <_free_r+0x46>
 8010f38:	6825      	ldr	r5, [r4, #0]
 8010f3a:	1961      	adds	r1, r4, r5
 8010f3c:	428b      	cmp	r3, r1
 8010f3e:	bf01      	itttt	eq
 8010f40:	6819      	ldreq	r1, [r3, #0]
 8010f42:	685b      	ldreq	r3, [r3, #4]
 8010f44:	1949      	addeq	r1, r1, r5
 8010f46:	6021      	streq	r1, [r4, #0]
 8010f48:	e7ed      	b.n	8010f26 <_free_r+0x22>
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	685b      	ldr	r3, [r3, #4]
 8010f4e:	b10b      	cbz	r3, 8010f54 <_free_r+0x50>
 8010f50:	42a3      	cmp	r3, r4
 8010f52:	d9fa      	bls.n	8010f4a <_free_r+0x46>
 8010f54:	6811      	ldr	r1, [r2, #0]
 8010f56:	1855      	adds	r5, r2, r1
 8010f58:	42a5      	cmp	r5, r4
 8010f5a:	d10b      	bne.n	8010f74 <_free_r+0x70>
 8010f5c:	6824      	ldr	r4, [r4, #0]
 8010f5e:	4421      	add	r1, r4
 8010f60:	1854      	adds	r4, r2, r1
 8010f62:	42a3      	cmp	r3, r4
 8010f64:	6011      	str	r1, [r2, #0]
 8010f66:	d1e0      	bne.n	8010f2a <_free_r+0x26>
 8010f68:	681c      	ldr	r4, [r3, #0]
 8010f6a:	685b      	ldr	r3, [r3, #4]
 8010f6c:	6053      	str	r3, [r2, #4]
 8010f6e:	440c      	add	r4, r1
 8010f70:	6014      	str	r4, [r2, #0]
 8010f72:	e7da      	b.n	8010f2a <_free_r+0x26>
 8010f74:	d902      	bls.n	8010f7c <_free_r+0x78>
 8010f76:	230c      	movs	r3, #12
 8010f78:	6003      	str	r3, [r0, #0]
 8010f7a:	e7d6      	b.n	8010f2a <_free_r+0x26>
 8010f7c:	6825      	ldr	r5, [r4, #0]
 8010f7e:	1961      	adds	r1, r4, r5
 8010f80:	428b      	cmp	r3, r1
 8010f82:	bf04      	itt	eq
 8010f84:	6819      	ldreq	r1, [r3, #0]
 8010f86:	685b      	ldreq	r3, [r3, #4]
 8010f88:	6063      	str	r3, [r4, #4]
 8010f8a:	bf04      	itt	eq
 8010f8c:	1949      	addeq	r1, r1, r5
 8010f8e:	6021      	streq	r1, [r4, #0]
 8010f90:	6054      	str	r4, [r2, #4]
 8010f92:	e7ca      	b.n	8010f2a <_free_r+0x26>
 8010f94:	b003      	add	sp, #12
 8010f96:	bd30      	pop	{r4, r5, pc}
 8010f98:	20000aa8 	.word	0x20000aa8

08010f9c <_Balloc>:
 8010f9c:	b570      	push	{r4, r5, r6, lr}
 8010f9e:	69c6      	ldr	r6, [r0, #28]
 8010fa0:	4604      	mov	r4, r0
 8010fa2:	460d      	mov	r5, r1
 8010fa4:	b976      	cbnz	r6, 8010fc4 <_Balloc+0x28>
 8010fa6:	2010      	movs	r0, #16
 8010fa8:	f7fe fa3e 	bl	800f428 <malloc>
 8010fac:	4602      	mov	r2, r0
 8010fae:	61e0      	str	r0, [r4, #28]
 8010fb0:	b920      	cbnz	r0, 8010fbc <_Balloc+0x20>
 8010fb2:	4b18      	ldr	r3, [pc, #96]	; (8011014 <_Balloc+0x78>)
 8010fb4:	4818      	ldr	r0, [pc, #96]	; (8011018 <_Balloc+0x7c>)
 8010fb6:	216b      	movs	r1, #107	; 0x6b
 8010fb8:	f000 ff66 	bl	8011e88 <__assert_func>
 8010fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010fc0:	6006      	str	r6, [r0, #0]
 8010fc2:	60c6      	str	r6, [r0, #12]
 8010fc4:	69e6      	ldr	r6, [r4, #28]
 8010fc6:	68f3      	ldr	r3, [r6, #12]
 8010fc8:	b183      	cbz	r3, 8010fec <_Balloc+0x50>
 8010fca:	69e3      	ldr	r3, [r4, #28]
 8010fcc:	68db      	ldr	r3, [r3, #12]
 8010fce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010fd2:	b9b8      	cbnz	r0, 8011004 <_Balloc+0x68>
 8010fd4:	2101      	movs	r1, #1
 8010fd6:	fa01 f605 	lsl.w	r6, r1, r5
 8010fda:	1d72      	adds	r2, r6, #5
 8010fdc:	0092      	lsls	r2, r2, #2
 8010fde:	4620      	mov	r0, r4
 8010fe0:	f000 ff70 	bl	8011ec4 <_calloc_r>
 8010fe4:	b160      	cbz	r0, 8011000 <_Balloc+0x64>
 8010fe6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010fea:	e00e      	b.n	801100a <_Balloc+0x6e>
 8010fec:	2221      	movs	r2, #33	; 0x21
 8010fee:	2104      	movs	r1, #4
 8010ff0:	4620      	mov	r0, r4
 8010ff2:	f000 ff67 	bl	8011ec4 <_calloc_r>
 8010ff6:	69e3      	ldr	r3, [r4, #28]
 8010ff8:	60f0      	str	r0, [r6, #12]
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d1e4      	bne.n	8010fca <_Balloc+0x2e>
 8011000:	2000      	movs	r0, #0
 8011002:	bd70      	pop	{r4, r5, r6, pc}
 8011004:	6802      	ldr	r2, [r0, #0]
 8011006:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801100a:	2300      	movs	r3, #0
 801100c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011010:	e7f7      	b.n	8011002 <_Balloc+0x66>
 8011012:	bf00      	nop
 8011014:	080176e9 	.word	0x080176e9
 8011018:	08017769 	.word	0x08017769

0801101c <_Bfree>:
 801101c:	b570      	push	{r4, r5, r6, lr}
 801101e:	69c6      	ldr	r6, [r0, #28]
 8011020:	4605      	mov	r5, r0
 8011022:	460c      	mov	r4, r1
 8011024:	b976      	cbnz	r6, 8011044 <_Bfree+0x28>
 8011026:	2010      	movs	r0, #16
 8011028:	f7fe f9fe 	bl	800f428 <malloc>
 801102c:	4602      	mov	r2, r0
 801102e:	61e8      	str	r0, [r5, #28]
 8011030:	b920      	cbnz	r0, 801103c <_Bfree+0x20>
 8011032:	4b09      	ldr	r3, [pc, #36]	; (8011058 <_Bfree+0x3c>)
 8011034:	4809      	ldr	r0, [pc, #36]	; (801105c <_Bfree+0x40>)
 8011036:	218f      	movs	r1, #143	; 0x8f
 8011038:	f000 ff26 	bl	8011e88 <__assert_func>
 801103c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011040:	6006      	str	r6, [r0, #0]
 8011042:	60c6      	str	r6, [r0, #12]
 8011044:	b13c      	cbz	r4, 8011056 <_Bfree+0x3a>
 8011046:	69eb      	ldr	r3, [r5, #28]
 8011048:	6862      	ldr	r2, [r4, #4]
 801104a:	68db      	ldr	r3, [r3, #12]
 801104c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011050:	6021      	str	r1, [r4, #0]
 8011052:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011056:	bd70      	pop	{r4, r5, r6, pc}
 8011058:	080176e9 	.word	0x080176e9
 801105c:	08017769 	.word	0x08017769

08011060 <__multadd>:
 8011060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011064:	690d      	ldr	r5, [r1, #16]
 8011066:	4607      	mov	r7, r0
 8011068:	460c      	mov	r4, r1
 801106a:	461e      	mov	r6, r3
 801106c:	f101 0c14 	add.w	ip, r1, #20
 8011070:	2000      	movs	r0, #0
 8011072:	f8dc 3000 	ldr.w	r3, [ip]
 8011076:	b299      	uxth	r1, r3
 8011078:	fb02 6101 	mla	r1, r2, r1, r6
 801107c:	0c1e      	lsrs	r6, r3, #16
 801107e:	0c0b      	lsrs	r3, r1, #16
 8011080:	fb02 3306 	mla	r3, r2, r6, r3
 8011084:	b289      	uxth	r1, r1
 8011086:	3001      	adds	r0, #1
 8011088:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801108c:	4285      	cmp	r5, r0
 801108e:	f84c 1b04 	str.w	r1, [ip], #4
 8011092:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011096:	dcec      	bgt.n	8011072 <__multadd+0x12>
 8011098:	b30e      	cbz	r6, 80110de <__multadd+0x7e>
 801109a:	68a3      	ldr	r3, [r4, #8]
 801109c:	42ab      	cmp	r3, r5
 801109e:	dc19      	bgt.n	80110d4 <__multadd+0x74>
 80110a0:	6861      	ldr	r1, [r4, #4]
 80110a2:	4638      	mov	r0, r7
 80110a4:	3101      	adds	r1, #1
 80110a6:	f7ff ff79 	bl	8010f9c <_Balloc>
 80110aa:	4680      	mov	r8, r0
 80110ac:	b928      	cbnz	r0, 80110ba <__multadd+0x5a>
 80110ae:	4602      	mov	r2, r0
 80110b0:	4b0c      	ldr	r3, [pc, #48]	; (80110e4 <__multadd+0x84>)
 80110b2:	480d      	ldr	r0, [pc, #52]	; (80110e8 <__multadd+0x88>)
 80110b4:	21ba      	movs	r1, #186	; 0xba
 80110b6:	f000 fee7 	bl	8011e88 <__assert_func>
 80110ba:	6922      	ldr	r2, [r4, #16]
 80110bc:	3202      	adds	r2, #2
 80110be:	f104 010c 	add.w	r1, r4, #12
 80110c2:	0092      	lsls	r2, r2, #2
 80110c4:	300c      	adds	r0, #12
 80110c6:	f7ff f892 	bl	80101ee <memcpy>
 80110ca:	4621      	mov	r1, r4
 80110cc:	4638      	mov	r0, r7
 80110ce:	f7ff ffa5 	bl	801101c <_Bfree>
 80110d2:	4644      	mov	r4, r8
 80110d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80110d8:	3501      	adds	r5, #1
 80110da:	615e      	str	r6, [r3, #20]
 80110dc:	6125      	str	r5, [r4, #16]
 80110de:	4620      	mov	r0, r4
 80110e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110e4:	08017758 	.word	0x08017758
 80110e8:	08017769 	.word	0x08017769

080110ec <__hi0bits>:
 80110ec:	0c03      	lsrs	r3, r0, #16
 80110ee:	041b      	lsls	r3, r3, #16
 80110f0:	b9d3      	cbnz	r3, 8011128 <__hi0bits+0x3c>
 80110f2:	0400      	lsls	r0, r0, #16
 80110f4:	2310      	movs	r3, #16
 80110f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80110fa:	bf04      	itt	eq
 80110fc:	0200      	lsleq	r0, r0, #8
 80110fe:	3308      	addeq	r3, #8
 8011100:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011104:	bf04      	itt	eq
 8011106:	0100      	lsleq	r0, r0, #4
 8011108:	3304      	addeq	r3, #4
 801110a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801110e:	bf04      	itt	eq
 8011110:	0080      	lsleq	r0, r0, #2
 8011112:	3302      	addeq	r3, #2
 8011114:	2800      	cmp	r0, #0
 8011116:	db05      	blt.n	8011124 <__hi0bits+0x38>
 8011118:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801111c:	f103 0301 	add.w	r3, r3, #1
 8011120:	bf08      	it	eq
 8011122:	2320      	moveq	r3, #32
 8011124:	4618      	mov	r0, r3
 8011126:	4770      	bx	lr
 8011128:	2300      	movs	r3, #0
 801112a:	e7e4      	b.n	80110f6 <__hi0bits+0xa>

0801112c <__lo0bits>:
 801112c:	6803      	ldr	r3, [r0, #0]
 801112e:	f013 0207 	ands.w	r2, r3, #7
 8011132:	d00c      	beq.n	801114e <__lo0bits+0x22>
 8011134:	07d9      	lsls	r1, r3, #31
 8011136:	d422      	bmi.n	801117e <__lo0bits+0x52>
 8011138:	079a      	lsls	r2, r3, #30
 801113a:	bf49      	itett	mi
 801113c:	085b      	lsrmi	r3, r3, #1
 801113e:	089b      	lsrpl	r3, r3, #2
 8011140:	6003      	strmi	r3, [r0, #0]
 8011142:	2201      	movmi	r2, #1
 8011144:	bf5c      	itt	pl
 8011146:	6003      	strpl	r3, [r0, #0]
 8011148:	2202      	movpl	r2, #2
 801114a:	4610      	mov	r0, r2
 801114c:	4770      	bx	lr
 801114e:	b299      	uxth	r1, r3
 8011150:	b909      	cbnz	r1, 8011156 <__lo0bits+0x2a>
 8011152:	0c1b      	lsrs	r3, r3, #16
 8011154:	2210      	movs	r2, #16
 8011156:	b2d9      	uxtb	r1, r3
 8011158:	b909      	cbnz	r1, 801115e <__lo0bits+0x32>
 801115a:	3208      	adds	r2, #8
 801115c:	0a1b      	lsrs	r3, r3, #8
 801115e:	0719      	lsls	r1, r3, #28
 8011160:	bf04      	itt	eq
 8011162:	091b      	lsreq	r3, r3, #4
 8011164:	3204      	addeq	r2, #4
 8011166:	0799      	lsls	r1, r3, #30
 8011168:	bf04      	itt	eq
 801116a:	089b      	lsreq	r3, r3, #2
 801116c:	3202      	addeq	r2, #2
 801116e:	07d9      	lsls	r1, r3, #31
 8011170:	d403      	bmi.n	801117a <__lo0bits+0x4e>
 8011172:	085b      	lsrs	r3, r3, #1
 8011174:	f102 0201 	add.w	r2, r2, #1
 8011178:	d003      	beq.n	8011182 <__lo0bits+0x56>
 801117a:	6003      	str	r3, [r0, #0]
 801117c:	e7e5      	b.n	801114a <__lo0bits+0x1e>
 801117e:	2200      	movs	r2, #0
 8011180:	e7e3      	b.n	801114a <__lo0bits+0x1e>
 8011182:	2220      	movs	r2, #32
 8011184:	e7e1      	b.n	801114a <__lo0bits+0x1e>
	...

08011188 <__i2b>:
 8011188:	b510      	push	{r4, lr}
 801118a:	460c      	mov	r4, r1
 801118c:	2101      	movs	r1, #1
 801118e:	f7ff ff05 	bl	8010f9c <_Balloc>
 8011192:	4602      	mov	r2, r0
 8011194:	b928      	cbnz	r0, 80111a2 <__i2b+0x1a>
 8011196:	4b05      	ldr	r3, [pc, #20]	; (80111ac <__i2b+0x24>)
 8011198:	4805      	ldr	r0, [pc, #20]	; (80111b0 <__i2b+0x28>)
 801119a:	f240 1145 	movw	r1, #325	; 0x145
 801119e:	f000 fe73 	bl	8011e88 <__assert_func>
 80111a2:	2301      	movs	r3, #1
 80111a4:	6144      	str	r4, [r0, #20]
 80111a6:	6103      	str	r3, [r0, #16]
 80111a8:	bd10      	pop	{r4, pc}
 80111aa:	bf00      	nop
 80111ac:	08017758 	.word	0x08017758
 80111b0:	08017769 	.word	0x08017769

080111b4 <__multiply>:
 80111b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111b8:	4691      	mov	r9, r2
 80111ba:	690a      	ldr	r2, [r1, #16]
 80111bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80111c0:	429a      	cmp	r2, r3
 80111c2:	bfb8      	it	lt
 80111c4:	460b      	movlt	r3, r1
 80111c6:	460c      	mov	r4, r1
 80111c8:	bfbc      	itt	lt
 80111ca:	464c      	movlt	r4, r9
 80111cc:	4699      	movlt	r9, r3
 80111ce:	6927      	ldr	r7, [r4, #16]
 80111d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80111d4:	68a3      	ldr	r3, [r4, #8]
 80111d6:	6861      	ldr	r1, [r4, #4]
 80111d8:	eb07 060a 	add.w	r6, r7, sl
 80111dc:	42b3      	cmp	r3, r6
 80111de:	b085      	sub	sp, #20
 80111e0:	bfb8      	it	lt
 80111e2:	3101      	addlt	r1, #1
 80111e4:	f7ff feda 	bl	8010f9c <_Balloc>
 80111e8:	b930      	cbnz	r0, 80111f8 <__multiply+0x44>
 80111ea:	4602      	mov	r2, r0
 80111ec:	4b44      	ldr	r3, [pc, #272]	; (8011300 <__multiply+0x14c>)
 80111ee:	4845      	ldr	r0, [pc, #276]	; (8011304 <__multiply+0x150>)
 80111f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80111f4:	f000 fe48 	bl	8011e88 <__assert_func>
 80111f8:	f100 0514 	add.w	r5, r0, #20
 80111fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011200:	462b      	mov	r3, r5
 8011202:	2200      	movs	r2, #0
 8011204:	4543      	cmp	r3, r8
 8011206:	d321      	bcc.n	801124c <__multiply+0x98>
 8011208:	f104 0314 	add.w	r3, r4, #20
 801120c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011210:	f109 0314 	add.w	r3, r9, #20
 8011214:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011218:	9202      	str	r2, [sp, #8]
 801121a:	1b3a      	subs	r2, r7, r4
 801121c:	3a15      	subs	r2, #21
 801121e:	f022 0203 	bic.w	r2, r2, #3
 8011222:	3204      	adds	r2, #4
 8011224:	f104 0115 	add.w	r1, r4, #21
 8011228:	428f      	cmp	r7, r1
 801122a:	bf38      	it	cc
 801122c:	2204      	movcc	r2, #4
 801122e:	9201      	str	r2, [sp, #4]
 8011230:	9a02      	ldr	r2, [sp, #8]
 8011232:	9303      	str	r3, [sp, #12]
 8011234:	429a      	cmp	r2, r3
 8011236:	d80c      	bhi.n	8011252 <__multiply+0x9e>
 8011238:	2e00      	cmp	r6, #0
 801123a:	dd03      	ble.n	8011244 <__multiply+0x90>
 801123c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011240:	2b00      	cmp	r3, #0
 8011242:	d05b      	beq.n	80112fc <__multiply+0x148>
 8011244:	6106      	str	r6, [r0, #16]
 8011246:	b005      	add	sp, #20
 8011248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801124c:	f843 2b04 	str.w	r2, [r3], #4
 8011250:	e7d8      	b.n	8011204 <__multiply+0x50>
 8011252:	f8b3 a000 	ldrh.w	sl, [r3]
 8011256:	f1ba 0f00 	cmp.w	sl, #0
 801125a:	d024      	beq.n	80112a6 <__multiply+0xf2>
 801125c:	f104 0e14 	add.w	lr, r4, #20
 8011260:	46a9      	mov	r9, r5
 8011262:	f04f 0c00 	mov.w	ip, #0
 8011266:	f85e 2b04 	ldr.w	r2, [lr], #4
 801126a:	f8d9 1000 	ldr.w	r1, [r9]
 801126e:	fa1f fb82 	uxth.w	fp, r2
 8011272:	b289      	uxth	r1, r1
 8011274:	fb0a 110b 	mla	r1, sl, fp, r1
 8011278:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801127c:	f8d9 2000 	ldr.w	r2, [r9]
 8011280:	4461      	add	r1, ip
 8011282:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011286:	fb0a c20b 	mla	r2, sl, fp, ip
 801128a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801128e:	b289      	uxth	r1, r1
 8011290:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011294:	4577      	cmp	r7, lr
 8011296:	f849 1b04 	str.w	r1, [r9], #4
 801129a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801129e:	d8e2      	bhi.n	8011266 <__multiply+0xb2>
 80112a0:	9a01      	ldr	r2, [sp, #4]
 80112a2:	f845 c002 	str.w	ip, [r5, r2]
 80112a6:	9a03      	ldr	r2, [sp, #12]
 80112a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80112ac:	3304      	adds	r3, #4
 80112ae:	f1b9 0f00 	cmp.w	r9, #0
 80112b2:	d021      	beq.n	80112f8 <__multiply+0x144>
 80112b4:	6829      	ldr	r1, [r5, #0]
 80112b6:	f104 0c14 	add.w	ip, r4, #20
 80112ba:	46ae      	mov	lr, r5
 80112bc:	f04f 0a00 	mov.w	sl, #0
 80112c0:	f8bc b000 	ldrh.w	fp, [ip]
 80112c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80112c8:	fb09 220b 	mla	r2, r9, fp, r2
 80112cc:	4452      	add	r2, sl
 80112ce:	b289      	uxth	r1, r1
 80112d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80112d4:	f84e 1b04 	str.w	r1, [lr], #4
 80112d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80112dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80112e0:	f8be 1000 	ldrh.w	r1, [lr]
 80112e4:	fb09 110a 	mla	r1, r9, sl, r1
 80112e8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80112ec:	4567      	cmp	r7, ip
 80112ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80112f2:	d8e5      	bhi.n	80112c0 <__multiply+0x10c>
 80112f4:	9a01      	ldr	r2, [sp, #4]
 80112f6:	50a9      	str	r1, [r5, r2]
 80112f8:	3504      	adds	r5, #4
 80112fa:	e799      	b.n	8011230 <__multiply+0x7c>
 80112fc:	3e01      	subs	r6, #1
 80112fe:	e79b      	b.n	8011238 <__multiply+0x84>
 8011300:	08017758 	.word	0x08017758
 8011304:	08017769 	.word	0x08017769

08011308 <__pow5mult>:
 8011308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801130c:	4615      	mov	r5, r2
 801130e:	f012 0203 	ands.w	r2, r2, #3
 8011312:	4606      	mov	r6, r0
 8011314:	460f      	mov	r7, r1
 8011316:	d007      	beq.n	8011328 <__pow5mult+0x20>
 8011318:	4c25      	ldr	r4, [pc, #148]	; (80113b0 <__pow5mult+0xa8>)
 801131a:	3a01      	subs	r2, #1
 801131c:	2300      	movs	r3, #0
 801131e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011322:	f7ff fe9d 	bl	8011060 <__multadd>
 8011326:	4607      	mov	r7, r0
 8011328:	10ad      	asrs	r5, r5, #2
 801132a:	d03d      	beq.n	80113a8 <__pow5mult+0xa0>
 801132c:	69f4      	ldr	r4, [r6, #28]
 801132e:	b97c      	cbnz	r4, 8011350 <__pow5mult+0x48>
 8011330:	2010      	movs	r0, #16
 8011332:	f7fe f879 	bl	800f428 <malloc>
 8011336:	4602      	mov	r2, r0
 8011338:	61f0      	str	r0, [r6, #28]
 801133a:	b928      	cbnz	r0, 8011348 <__pow5mult+0x40>
 801133c:	4b1d      	ldr	r3, [pc, #116]	; (80113b4 <__pow5mult+0xac>)
 801133e:	481e      	ldr	r0, [pc, #120]	; (80113b8 <__pow5mult+0xb0>)
 8011340:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011344:	f000 fda0 	bl	8011e88 <__assert_func>
 8011348:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801134c:	6004      	str	r4, [r0, #0]
 801134e:	60c4      	str	r4, [r0, #12]
 8011350:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011354:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011358:	b94c      	cbnz	r4, 801136e <__pow5mult+0x66>
 801135a:	f240 2171 	movw	r1, #625	; 0x271
 801135e:	4630      	mov	r0, r6
 8011360:	f7ff ff12 	bl	8011188 <__i2b>
 8011364:	2300      	movs	r3, #0
 8011366:	f8c8 0008 	str.w	r0, [r8, #8]
 801136a:	4604      	mov	r4, r0
 801136c:	6003      	str	r3, [r0, #0]
 801136e:	f04f 0900 	mov.w	r9, #0
 8011372:	07eb      	lsls	r3, r5, #31
 8011374:	d50a      	bpl.n	801138c <__pow5mult+0x84>
 8011376:	4639      	mov	r1, r7
 8011378:	4622      	mov	r2, r4
 801137a:	4630      	mov	r0, r6
 801137c:	f7ff ff1a 	bl	80111b4 <__multiply>
 8011380:	4639      	mov	r1, r7
 8011382:	4680      	mov	r8, r0
 8011384:	4630      	mov	r0, r6
 8011386:	f7ff fe49 	bl	801101c <_Bfree>
 801138a:	4647      	mov	r7, r8
 801138c:	106d      	asrs	r5, r5, #1
 801138e:	d00b      	beq.n	80113a8 <__pow5mult+0xa0>
 8011390:	6820      	ldr	r0, [r4, #0]
 8011392:	b938      	cbnz	r0, 80113a4 <__pow5mult+0x9c>
 8011394:	4622      	mov	r2, r4
 8011396:	4621      	mov	r1, r4
 8011398:	4630      	mov	r0, r6
 801139a:	f7ff ff0b 	bl	80111b4 <__multiply>
 801139e:	6020      	str	r0, [r4, #0]
 80113a0:	f8c0 9000 	str.w	r9, [r0]
 80113a4:	4604      	mov	r4, r0
 80113a6:	e7e4      	b.n	8011372 <__pow5mult+0x6a>
 80113a8:	4638      	mov	r0, r7
 80113aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113ae:	bf00      	nop
 80113b0:	080178b8 	.word	0x080178b8
 80113b4:	080176e9 	.word	0x080176e9
 80113b8:	08017769 	.word	0x08017769

080113bc <__lshift>:
 80113bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113c0:	460c      	mov	r4, r1
 80113c2:	6849      	ldr	r1, [r1, #4]
 80113c4:	6923      	ldr	r3, [r4, #16]
 80113c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80113ca:	68a3      	ldr	r3, [r4, #8]
 80113cc:	4607      	mov	r7, r0
 80113ce:	4691      	mov	r9, r2
 80113d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80113d4:	f108 0601 	add.w	r6, r8, #1
 80113d8:	42b3      	cmp	r3, r6
 80113da:	db0b      	blt.n	80113f4 <__lshift+0x38>
 80113dc:	4638      	mov	r0, r7
 80113de:	f7ff fddd 	bl	8010f9c <_Balloc>
 80113e2:	4605      	mov	r5, r0
 80113e4:	b948      	cbnz	r0, 80113fa <__lshift+0x3e>
 80113e6:	4602      	mov	r2, r0
 80113e8:	4b28      	ldr	r3, [pc, #160]	; (801148c <__lshift+0xd0>)
 80113ea:	4829      	ldr	r0, [pc, #164]	; (8011490 <__lshift+0xd4>)
 80113ec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80113f0:	f000 fd4a 	bl	8011e88 <__assert_func>
 80113f4:	3101      	adds	r1, #1
 80113f6:	005b      	lsls	r3, r3, #1
 80113f8:	e7ee      	b.n	80113d8 <__lshift+0x1c>
 80113fa:	2300      	movs	r3, #0
 80113fc:	f100 0114 	add.w	r1, r0, #20
 8011400:	f100 0210 	add.w	r2, r0, #16
 8011404:	4618      	mov	r0, r3
 8011406:	4553      	cmp	r3, sl
 8011408:	db33      	blt.n	8011472 <__lshift+0xb6>
 801140a:	6920      	ldr	r0, [r4, #16]
 801140c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011410:	f104 0314 	add.w	r3, r4, #20
 8011414:	f019 091f 	ands.w	r9, r9, #31
 8011418:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801141c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011420:	d02b      	beq.n	801147a <__lshift+0xbe>
 8011422:	f1c9 0e20 	rsb	lr, r9, #32
 8011426:	468a      	mov	sl, r1
 8011428:	2200      	movs	r2, #0
 801142a:	6818      	ldr	r0, [r3, #0]
 801142c:	fa00 f009 	lsl.w	r0, r0, r9
 8011430:	4310      	orrs	r0, r2
 8011432:	f84a 0b04 	str.w	r0, [sl], #4
 8011436:	f853 2b04 	ldr.w	r2, [r3], #4
 801143a:	459c      	cmp	ip, r3
 801143c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011440:	d8f3      	bhi.n	801142a <__lshift+0x6e>
 8011442:	ebac 0304 	sub.w	r3, ip, r4
 8011446:	3b15      	subs	r3, #21
 8011448:	f023 0303 	bic.w	r3, r3, #3
 801144c:	3304      	adds	r3, #4
 801144e:	f104 0015 	add.w	r0, r4, #21
 8011452:	4584      	cmp	ip, r0
 8011454:	bf38      	it	cc
 8011456:	2304      	movcc	r3, #4
 8011458:	50ca      	str	r2, [r1, r3]
 801145a:	b10a      	cbz	r2, 8011460 <__lshift+0xa4>
 801145c:	f108 0602 	add.w	r6, r8, #2
 8011460:	3e01      	subs	r6, #1
 8011462:	4638      	mov	r0, r7
 8011464:	612e      	str	r6, [r5, #16]
 8011466:	4621      	mov	r1, r4
 8011468:	f7ff fdd8 	bl	801101c <_Bfree>
 801146c:	4628      	mov	r0, r5
 801146e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011472:	f842 0f04 	str.w	r0, [r2, #4]!
 8011476:	3301      	adds	r3, #1
 8011478:	e7c5      	b.n	8011406 <__lshift+0x4a>
 801147a:	3904      	subs	r1, #4
 801147c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011480:	f841 2f04 	str.w	r2, [r1, #4]!
 8011484:	459c      	cmp	ip, r3
 8011486:	d8f9      	bhi.n	801147c <__lshift+0xc0>
 8011488:	e7ea      	b.n	8011460 <__lshift+0xa4>
 801148a:	bf00      	nop
 801148c:	08017758 	.word	0x08017758
 8011490:	08017769 	.word	0x08017769

08011494 <__mcmp>:
 8011494:	b530      	push	{r4, r5, lr}
 8011496:	6902      	ldr	r2, [r0, #16]
 8011498:	690c      	ldr	r4, [r1, #16]
 801149a:	1b12      	subs	r2, r2, r4
 801149c:	d10e      	bne.n	80114bc <__mcmp+0x28>
 801149e:	f100 0314 	add.w	r3, r0, #20
 80114a2:	3114      	adds	r1, #20
 80114a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80114a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80114ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80114b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80114b4:	42a5      	cmp	r5, r4
 80114b6:	d003      	beq.n	80114c0 <__mcmp+0x2c>
 80114b8:	d305      	bcc.n	80114c6 <__mcmp+0x32>
 80114ba:	2201      	movs	r2, #1
 80114bc:	4610      	mov	r0, r2
 80114be:	bd30      	pop	{r4, r5, pc}
 80114c0:	4283      	cmp	r3, r0
 80114c2:	d3f3      	bcc.n	80114ac <__mcmp+0x18>
 80114c4:	e7fa      	b.n	80114bc <__mcmp+0x28>
 80114c6:	f04f 32ff 	mov.w	r2, #4294967295
 80114ca:	e7f7      	b.n	80114bc <__mcmp+0x28>

080114cc <__mdiff>:
 80114cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114d0:	460c      	mov	r4, r1
 80114d2:	4606      	mov	r6, r0
 80114d4:	4611      	mov	r1, r2
 80114d6:	4620      	mov	r0, r4
 80114d8:	4690      	mov	r8, r2
 80114da:	f7ff ffdb 	bl	8011494 <__mcmp>
 80114de:	1e05      	subs	r5, r0, #0
 80114e0:	d110      	bne.n	8011504 <__mdiff+0x38>
 80114e2:	4629      	mov	r1, r5
 80114e4:	4630      	mov	r0, r6
 80114e6:	f7ff fd59 	bl	8010f9c <_Balloc>
 80114ea:	b930      	cbnz	r0, 80114fa <__mdiff+0x2e>
 80114ec:	4b3a      	ldr	r3, [pc, #232]	; (80115d8 <__mdiff+0x10c>)
 80114ee:	4602      	mov	r2, r0
 80114f0:	f240 2137 	movw	r1, #567	; 0x237
 80114f4:	4839      	ldr	r0, [pc, #228]	; (80115dc <__mdiff+0x110>)
 80114f6:	f000 fcc7 	bl	8011e88 <__assert_func>
 80114fa:	2301      	movs	r3, #1
 80114fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011500:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011504:	bfa4      	itt	ge
 8011506:	4643      	movge	r3, r8
 8011508:	46a0      	movge	r8, r4
 801150a:	4630      	mov	r0, r6
 801150c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011510:	bfa6      	itte	ge
 8011512:	461c      	movge	r4, r3
 8011514:	2500      	movge	r5, #0
 8011516:	2501      	movlt	r5, #1
 8011518:	f7ff fd40 	bl	8010f9c <_Balloc>
 801151c:	b920      	cbnz	r0, 8011528 <__mdiff+0x5c>
 801151e:	4b2e      	ldr	r3, [pc, #184]	; (80115d8 <__mdiff+0x10c>)
 8011520:	4602      	mov	r2, r0
 8011522:	f240 2145 	movw	r1, #581	; 0x245
 8011526:	e7e5      	b.n	80114f4 <__mdiff+0x28>
 8011528:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801152c:	6926      	ldr	r6, [r4, #16]
 801152e:	60c5      	str	r5, [r0, #12]
 8011530:	f104 0914 	add.w	r9, r4, #20
 8011534:	f108 0514 	add.w	r5, r8, #20
 8011538:	f100 0e14 	add.w	lr, r0, #20
 801153c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011540:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011544:	f108 0210 	add.w	r2, r8, #16
 8011548:	46f2      	mov	sl, lr
 801154a:	2100      	movs	r1, #0
 801154c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011550:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011554:	fa11 f88b 	uxtah	r8, r1, fp
 8011558:	b299      	uxth	r1, r3
 801155a:	0c1b      	lsrs	r3, r3, #16
 801155c:	eba8 0801 	sub.w	r8, r8, r1
 8011560:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011564:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011568:	fa1f f888 	uxth.w	r8, r8
 801156c:	1419      	asrs	r1, r3, #16
 801156e:	454e      	cmp	r6, r9
 8011570:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011574:	f84a 3b04 	str.w	r3, [sl], #4
 8011578:	d8e8      	bhi.n	801154c <__mdiff+0x80>
 801157a:	1b33      	subs	r3, r6, r4
 801157c:	3b15      	subs	r3, #21
 801157e:	f023 0303 	bic.w	r3, r3, #3
 8011582:	3304      	adds	r3, #4
 8011584:	3415      	adds	r4, #21
 8011586:	42a6      	cmp	r6, r4
 8011588:	bf38      	it	cc
 801158a:	2304      	movcc	r3, #4
 801158c:	441d      	add	r5, r3
 801158e:	4473      	add	r3, lr
 8011590:	469e      	mov	lr, r3
 8011592:	462e      	mov	r6, r5
 8011594:	4566      	cmp	r6, ip
 8011596:	d30e      	bcc.n	80115b6 <__mdiff+0xea>
 8011598:	f10c 0203 	add.w	r2, ip, #3
 801159c:	1b52      	subs	r2, r2, r5
 801159e:	f022 0203 	bic.w	r2, r2, #3
 80115a2:	3d03      	subs	r5, #3
 80115a4:	45ac      	cmp	ip, r5
 80115a6:	bf38      	it	cc
 80115a8:	2200      	movcc	r2, #0
 80115aa:	4413      	add	r3, r2
 80115ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80115b0:	b17a      	cbz	r2, 80115d2 <__mdiff+0x106>
 80115b2:	6107      	str	r7, [r0, #16]
 80115b4:	e7a4      	b.n	8011500 <__mdiff+0x34>
 80115b6:	f856 8b04 	ldr.w	r8, [r6], #4
 80115ba:	fa11 f288 	uxtah	r2, r1, r8
 80115be:	1414      	asrs	r4, r2, #16
 80115c0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80115c4:	b292      	uxth	r2, r2
 80115c6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80115ca:	f84e 2b04 	str.w	r2, [lr], #4
 80115ce:	1421      	asrs	r1, r4, #16
 80115d0:	e7e0      	b.n	8011594 <__mdiff+0xc8>
 80115d2:	3f01      	subs	r7, #1
 80115d4:	e7ea      	b.n	80115ac <__mdiff+0xe0>
 80115d6:	bf00      	nop
 80115d8:	08017758 	.word	0x08017758
 80115dc:	08017769 	.word	0x08017769

080115e0 <__d2b>:
 80115e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80115e4:	460f      	mov	r7, r1
 80115e6:	2101      	movs	r1, #1
 80115e8:	ec59 8b10 	vmov	r8, r9, d0
 80115ec:	4616      	mov	r6, r2
 80115ee:	f7ff fcd5 	bl	8010f9c <_Balloc>
 80115f2:	4604      	mov	r4, r0
 80115f4:	b930      	cbnz	r0, 8011604 <__d2b+0x24>
 80115f6:	4602      	mov	r2, r0
 80115f8:	4b24      	ldr	r3, [pc, #144]	; (801168c <__d2b+0xac>)
 80115fa:	4825      	ldr	r0, [pc, #148]	; (8011690 <__d2b+0xb0>)
 80115fc:	f240 310f 	movw	r1, #783	; 0x30f
 8011600:	f000 fc42 	bl	8011e88 <__assert_func>
 8011604:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011608:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801160c:	bb2d      	cbnz	r5, 801165a <__d2b+0x7a>
 801160e:	9301      	str	r3, [sp, #4]
 8011610:	f1b8 0300 	subs.w	r3, r8, #0
 8011614:	d026      	beq.n	8011664 <__d2b+0x84>
 8011616:	4668      	mov	r0, sp
 8011618:	9300      	str	r3, [sp, #0]
 801161a:	f7ff fd87 	bl	801112c <__lo0bits>
 801161e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011622:	b1e8      	cbz	r0, 8011660 <__d2b+0x80>
 8011624:	f1c0 0320 	rsb	r3, r0, #32
 8011628:	fa02 f303 	lsl.w	r3, r2, r3
 801162c:	430b      	orrs	r3, r1
 801162e:	40c2      	lsrs	r2, r0
 8011630:	6163      	str	r3, [r4, #20]
 8011632:	9201      	str	r2, [sp, #4]
 8011634:	9b01      	ldr	r3, [sp, #4]
 8011636:	61a3      	str	r3, [r4, #24]
 8011638:	2b00      	cmp	r3, #0
 801163a:	bf14      	ite	ne
 801163c:	2202      	movne	r2, #2
 801163e:	2201      	moveq	r2, #1
 8011640:	6122      	str	r2, [r4, #16]
 8011642:	b1bd      	cbz	r5, 8011674 <__d2b+0x94>
 8011644:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011648:	4405      	add	r5, r0
 801164a:	603d      	str	r5, [r7, #0]
 801164c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011650:	6030      	str	r0, [r6, #0]
 8011652:	4620      	mov	r0, r4
 8011654:	b003      	add	sp, #12
 8011656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801165a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801165e:	e7d6      	b.n	801160e <__d2b+0x2e>
 8011660:	6161      	str	r1, [r4, #20]
 8011662:	e7e7      	b.n	8011634 <__d2b+0x54>
 8011664:	a801      	add	r0, sp, #4
 8011666:	f7ff fd61 	bl	801112c <__lo0bits>
 801166a:	9b01      	ldr	r3, [sp, #4]
 801166c:	6163      	str	r3, [r4, #20]
 801166e:	3020      	adds	r0, #32
 8011670:	2201      	movs	r2, #1
 8011672:	e7e5      	b.n	8011640 <__d2b+0x60>
 8011674:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011678:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801167c:	6038      	str	r0, [r7, #0]
 801167e:	6918      	ldr	r0, [r3, #16]
 8011680:	f7ff fd34 	bl	80110ec <__hi0bits>
 8011684:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011688:	e7e2      	b.n	8011650 <__d2b+0x70>
 801168a:	bf00      	nop
 801168c:	08017758 	.word	0x08017758
 8011690:	08017769 	.word	0x08017769

08011694 <__ssputs_r>:
 8011694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011698:	688e      	ldr	r6, [r1, #8]
 801169a:	461f      	mov	r7, r3
 801169c:	42be      	cmp	r6, r7
 801169e:	680b      	ldr	r3, [r1, #0]
 80116a0:	4682      	mov	sl, r0
 80116a2:	460c      	mov	r4, r1
 80116a4:	4690      	mov	r8, r2
 80116a6:	d82c      	bhi.n	8011702 <__ssputs_r+0x6e>
 80116a8:	898a      	ldrh	r2, [r1, #12]
 80116aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80116ae:	d026      	beq.n	80116fe <__ssputs_r+0x6a>
 80116b0:	6965      	ldr	r5, [r4, #20]
 80116b2:	6909      	ldr	r1, [r1, #16]
 80116b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80116b8:	eba3 0901 	sub.w	r9, r3, r1
 80116bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80116c0:	1c7b      	adds	r3, r7, #1
 80116c2:	444b      	add	r3, r9
 80116c4:	106d      	asrs	r5, r5, #1
 80116c6:	429d      	cmp	r5, r3
 80116c8:	bf38      	it	cc
 80116ca:	461d      	movcc	r5, r3
 80116cc:	0553      	lsls	r3, r2, #21
 80116ce:	d527      	bpl.n	8011720 <__ssputs_r+0x8c>
 80116d0:	4629      	mov	r1, r5
 80116d2:	f7fd fed1 	bl	800f478 <_malloc_r>
 80116d6:	4606      	mov	r6, r0
 80116d8:	b360      	cbz	r0, 8011734 <__ssputs_r+0xa0>
 80116da:	6921      	ldr	r1, [r4, #16]
 80116dc:	464a      	mov	r2, r9
 80116de:	f7fe fd86 	bl	80101ee <memcpy>
 80116e2:	89a3      	ldrh	r3, [r4, #12]
 80116e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80116e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116ec:	81a3      	strh	r3, [r4, #12]
 80116ee:	6126      	str	r6, [r4, #16]
 80116f0:	6165      	str	r5, [r4, #20]
 80116f2:	444e      	add	r6, r9
 80116f4:	eba5 0509 	sub.w	r5, r5, r9
 80116f8:	6026      	str	r6, [r4, #0]
 80116fa:	60a5      	str	r5, [r4, #8]
 80116fc:	463e      	mov	r6, r7
 80116fe:	42be      	cmp	r6, r7
 8011700:	d900      	bls.n	8011704 <__ssputs_r+0x70>
 8011702:	463e      	mov	r6, r7
 8011704:	6820      	ldr	r0, [r4, #0]
 8011706:	4632      	mov	r2, r6
 8011708:	4641      	mov	r1, r8
 801170a:	f000 fba3 	bl	8011e54 <memmove>
 801170e:	68a3      	ldr	r3, [r4, #8]
 8011710:	1b9b      	subs	r3, r3, r6
 8011712:	60a3      	str	r3, [r4, #8]
 8011714:	6823      	ldr	r3, [r4, #0]
 8011716:	4433      	add	r3, r6
 8011718:	6023      	str	r3, [r4, #0]
 801171a:	2000      	movs	r0, #0
 801171c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011720:	462a      	mov	r2, r5
 8011722:	f000 fbf7 	bl	8011f14 <_realloc_r>
 8011726:	4606      	mov	r6, r0
 8011728:	2800      	cmp	r0, #0
 801172a:	d1e0      	bne.n	80116ee <__ssputs_r+0x5a>
 801172c:	6921      	ldr	r1, [r4, #16]
 801172e:	4650      	mov	r0, sl
 8011730:	f7ff fbe8 	bl	8010f04 <_free_r>
 8011734:	230c      	movs	r3, #12
 8011736:	f8ca 3000 	str.w	r3, [sl]
 801173a:	89a3      	ldrh	r3, [r4, #12]
 801173c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011740:	81a3      	strh	r3, [r4, #12]
 8011742:	f04f 30ff 	mov.w	r0, #4294967295
 8011746:	e7e9      	b.n	801171c <__ssputs_r+0x88>

08011748 <_svfiprintf_r>:
 8011748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801174c:	4698      	mov	r8, r3
 801174e:	898b      	ldrh	r3, [r1, #12]
 8011750:	061b      	lsls	r3, r3, #24
 8011752:	b09d      	sub	sp, #116	; 0x74
 8011754:	4607      	mov	r7, r0
 8011756:	460d      	mov	r5, r1
 8011758:	4614      	mov	r4, r2
 801175a:	d50e      	bpl.n	801177a <_svfiprintf_r+0x32>
 801175c:	690b      	ldr	r3, [r1, #16]
 801175e:	b963      	cbnz	r3, 801177a <_svfiprintf_r+0x32>
 8011760:	2140      	movs	r1, #64	; 0x40
 8011762:	f7fd fe89 	bl	800f478 <_malloc_r>
 8011766:	6028      	str	r0, [r5, #0]
 8011768:	6128      	str	r0, [r5, #16]
 801176a:	b920      	cbnz	r0, 8011776 <_svfiprintf_r+0x2e>
 801176c:	230c      	movs	r3, #12
 801176e:	603b      	str	r3, [r7, #0]
 8011770:	f04f 30ff 	mov.w	r0, #4294967295
 8011774:	e0d0      	b.n	8011918 <_svfiprintf_r+0x1d0>
 8011776:	2340      	movs	r3, #64	; 0x40
 8011778:	616b      	str	r3, [r5, #20]
 801177a:	2300      	movs	r3, #0
 801177c:	9309      	str	r3, [sp, #36]	; 0x24
 801177e:	2320      	movs	r3, #32
 8011780:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011784:	f8cd 800c 	str.w	r8, [sp, #12]
 8011788:	2330      	movs	r3, #48	; 0x30
 801178a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011930 <_svfiprintf_r+0x1e8>
 801178e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011792:	f04f 0901 	mov.w	r9, #1
 8011796:	4623      	mov	r3, r4
 8011798:	469a      	mov	sl, r3
 801179a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801179e:	b10a      	cbz	r2, 80117a4 <_svfiprintf_r+0x5c>
 80117a0:	2a25      	cmp	r2, #37	; 0x25
 80117a2:	d1f9      	bne.n	8011798 <_svfiprintf_r+0x50>
 80117a4:	ebba 0b04 	subs.w	fp, sl, r4
 80117a8:	d00b      	beq.n	80117c2 <_svfiprintf_r+0x7a>
 80117aa:	465b      	mov	r3, fp
 80117ac:	4622      	mov	r2, r4
 80117ae:	4629      	mov	r1, r5
 80117b0:	4638      	mov	r0, r7
 80117b2:	f7ff ff6f 	bl	8011694 <__ssputs_r>
 80117b6:	3001      	adds	r0, #1
 80117b8:	f000 80a9 	beq.w	801190e <_svfiprintf_r+0x1c6>
 80117bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80117be:	445a      	add	r2, fp
 80117c0:	9209      	str	r2, [sp, #36]	; 0x24
 80117c2:	f89a 3000 	ldrb.w	r3, [sl]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	f000 80a1 	beq.w	801190e <_svfiprintf_r+0x1c6>
 80117cc:	2300      	movs	r3, #0
 80117ce:	f04f 32ff 	mov.w	r2, #4294967295
 80117d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80117d6:	f10a 0a01 	add.w	sl, sl, #1
 80117da:	9304      	str	r3, [sp, #16]
 80117dc:	9307      	str	r3, [sp, #28]
 80117de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80117e2:	931a      	str	r3, [sp, #104]	; 0x68
 80117e4:	4654      	mov	r4, sl
 80117e6:	2205      	movs	r2, #5
 80117e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117ec:	4850      	ldr	r0, [pc, #320]	; (8011930 <_svfiprintf_r+0x1e8>)
 80117ee:	f7ee fd07 	bl	8000200 <memchr>
 80117f2:	9a04      	ldr	r2, [sp, #16]
 80117f4:	b9d8      	cbnz	r0, 801182e <_svfiprintf_r+0xe6>
 80117f6:	06d0      	lsls	r0, r2, #27
 80117f8:	bf44      	itt	mi
 80117fa:	2320      	movmi	r3, #32
 80117fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011800:	0711      	lsls	r1, r2, #28
 8011802:	bf44      	itt	mi
 8011804:	232b      	movmi	r3, #43	; 0x2b
 8011806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801180a:	f89a 3000 	ldrb.w	r3, [sl]
 801180e:	2b2a      	cmp	r3, #42	; 0x2a
 8011810:	d015      	beq.n	801183e <_svfiprintf_r+0xf6>
 8011812:	9a07      	ldr	r2, [sp, #28]
 8011814:	4654      	mov	r4, sl
 8011816:	2000      	movs	r0, #0
 8011818:	f04f 0c0a 	mov.w	ip, #10
 801181c:	4621      	mov	r1, r4
 801181e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011822:	3b30      	subs	r3, #48	; 0x30
 8011824:	2b09      	cmp	r3, #9
 8011826:	d94d      	bls.n	80118c4 <_svfiprintf_r+0x17c>
 8011828:	b1b0      	cbz	r0, 8011858 <_svfiprintf_r+0x110>
 801182a:	9207      	str	r2, [sp, #28]
 801182c:	e014      	b.n	8011858 <_svfiprintf_r+0x110>
 801182e:	eba0 0308 	sub.w	r3, r0, r8
 8011832:	fa09 f303 	lsl.w	r3, r9, r3
 8011836:	4313      	orrs	r3, r2
 8011838:	9304      	str	r3, [sp, #16]
 801183a:	46a2      	mov	sl, r4
 801183c:	e7d2      	b.n	80117e4 <_svfiprintf_r+0x9c>
 801183e:	9b03      	ldr	r3, [sp, #12]
 8011840:	1d19      	adds	r1, r3, #4
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	9103      	str	r1, [sp, #12]
 8011846:	2b00      	cmp	r3, #0
 8011848:	bfbb      	ittet	lt
 801184a:	425b      	neglt	r3, r3
 801184c:	f042 0202 	orrlt.w	r2, r2, #2
 8011850:	9307      	strge	r3, [sp, #28]
 8011852:	9307      	strlt	r3, [sp, #28]
 8011854:	bfb8      	it	lt
 8011856:	9204      	strlt	r2, [sp, #16]
 8011858:	7823      	ldrb	r3, [r4, #0]
 801185a:	2b2e      	cmp	r3, #46	; 0x2e
 801185c:	d10c      	bne.n	8011878 <_svfiprintf_r+0x130>
 801185e:	7863      	ldrb	r3, [r4, #1]
 8011860:	2b2a      	cmp	r3, #42	; 0x2a
 8011862:	d134      	bne.n	80118ce <_svfiprintf_r+0x186>
 8011864:	9b03      	ldr	r3, [sp, #12]
 8011866:	1d1a      	adds	r2, r3, #4
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	9203      	str	r2, [sp, #12]
 801186c:	2b00      	cmp	r3, #0
 801186e:	bfb8      	it	lt
 8011870:	f04f 33ff 	movlt.w	r3, #4294967295
 8011874:	3402      	adds	r4, #2
 8011876:	9305      	str	r3, [sp, #20]
 8011878:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011940 <_svfiprintf_r+0x1f8>
 801187c:	7821      	ldrb	r1, [r4, #0]
 801187e:	2203      	movs	r2, #3
 8011880:	4650      	mov	r0, sl
 8011882:	f7ee fcbd 	bl	8000200 <memchr>
 8011886:	b138      	cbz	r0, 8011898 <_svfiprintf_r+0x150>
 8011888:	9b04      	ldr	r3, [sp, #16]
 801188a:	eba0 000a 	sub.w	r0, r0, sl
 801188e:	2240      	movs	r2, #64	; 0x40
 8011890:	4082      	lsls	r2, r0
 8011892:	4313      	orrs	r3, r2
 8011894:	3401      	adds	r4, #1
 8011896:	9304      	str	r3, [sp, #16]
 8011898:	f814 1b01 	ldrb.w	r1, [r4], #1
 801189c:	4825      	ldr	r0, [pc, #148]	; (8011934 <_svfiprintf_r+0x1ec>)
 801189e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80118a2:	2206      	movs	r2, #6
 80118a4:	f7ee fcac 	bl	8000200 <memchr>
 80118a8:	2800      	cmp	r0, #0
 80118aa:	d038      	beq.n	801191e <_svfiprintf_r+0x1d6>
 80118ac:	4b22      	ldr	r3, [pc, #136]	; (8011938 <_svfiprintf_r+0x1f0>)
 80118ae:	bb1b      	cbnz	r3, 80118f8 <_svfiprintf_r+0x1b0>
 80118b0:	9b03      	ldr	r3, [sp, #12]
 80118b2:	3307      	adds	r3, #7
 80118b4:	f023 0307 	bic.w	r3, r3, #7
 80118b8:	3308      	adds	r3, #8
 80118ba:	9303      	str	r3, [sp, #12]
 80118bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118be:	4433      	add	r3, r6
 80118c0:	9309      	str	r3, [sp, #36]	; 0x24
 80118c2:	e768      	b.n	8011796 <_svfiprintf_r+0x4e>
 80118c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80118c8:	460c      	mov	r4, r1
 80118ca:	2001      	movs	r0, #1
 80118cc:	e7a6      	b.n	801181c <_svfiprintf_r+0xd4>
 80118ce:	2300      	movs	r3, #0
 80118d0:	3401      	adds	r4, #1
 80118d2:	9305      	str	r3, [sp, #20]
 80118d4:	4619      	mov	r1, r3
 80118d6:	f04f 0c0a 	mov.w	ip, #10
 80118da:	4620      	mov	r0, r4
 80118dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118e0:	3a30      	subs	r2, #48	; 0x30
 80118e2:	2a09      	cmp	r2, #9
 80118e4:	d903      	bls.n	80118ee <_svfiprintf_r+0x1a6>
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d0c6      	beq.n	8011878 <_svfiprintf_r+0x130>
 80118ea:	9105      	str	r1, [sp, #20]
 80118ec:	e7c4      	b.n	8011878 <_svfiprintf_r+0x130>
 80118ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80118f2:	4604      	mov	r4, r0
 80118f4:	2301      	movs	r3, #1
 80118f6:	e7f0      	b.n	80118da <_svfiprintf_r+0x192>
 80118f8:	ab03      	add	r3, sp, #12
 80118fa:	9300      	str	r3, [sp, #0]
 80118fc:	462a      	mov	r2, r5
 80118fe:	4b0f      	ldr	r3, [pc, #60]	; (801193c <_svfiprintf_r+0x1f4>)
 8011900:	a904      	add	r1, sp, #16
 8011902:	4638      	mov	r0, r7
 8011904:	f7fd fee4 	bl	800f6d0 <_printf_float>
 8011908:	1c42      	adds	r2, r0, #1
 801190a:	4606      	mov	r6, r0
 801190c:	d1d6      	bne.n	80118bc <_svfiprintf_r+0x174>
 801190e:	89ab      	ldrh	r3, [r5, #12]
 8011910:	065b      	lsls	r3, r3, #25
 8011912:	f53f af2d 	bmi.w	8011770 <_svfiprintf_r+0x28>
 8011916:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011918:	b01d      	add	sp, #116	; 0x74
 801191a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801191e:	ab03      	add	r3, sp, #12
 8011920:	9300      	str	r3, [sp, #0]
 8011922:	462a      	mov	r2, r5
 8011924:	4b05      	ldr	r3, [pc, #20]	; (801193c <_svfiprintf_r+0x1f4>)
 8011926:	a904      	add	r1, sp, #16
 8011928:	4638      	mov	r0, r7
 801192a:	f7fe f975 	bl	800fc18 <_printf_i>
 801192e:	e7eb      	b.n	8011908 <_svfiprintf_r+0x1c0>
 8011930:	080178c4 	.word	0x080178c4
 8011934:	080178ce 	.word	0x080178ce
 8011938:	0800f6d1 	.word	0x0800f6d1
 801193c:	08011695 	.word	0x08011695
 8011940:	080178ca 	.word	0x080178ca

08011944 <__sfputc_r>:
 8011944:	6893      	ldr	r3, [r2, #8]
 8011946:	3b01      	subs	r3, #1
 8011948:	2b00      	cmp	r3, #0
 801194a:	b410      	push	{r4}
 801194c:	6093      	str	r3, [r2, #8]
 801194e:	da08      	bge.n	8011962 <__sfputc_r+0x1e>
 8011950:	6994      	ldr	r4, [r2, #24]
 8011952:	42a3      	cmp	r3, r4
 8011954:	db01      	blt.n	801195a <__sfputc_r+0x16>
 8011956:	290a      	cmp	r1, #10
 8011958:	d103      	bne.n	8011962 <__sfputc_r+0x1e>
 801195a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801195e:	f000 b9e3 	b.w	8011d28 <__swbuf_r>
 8011962:	6813      	ldr	r3, [r2, #0]
 8011964:	1c58      	adds	r0, r3, #1
 8011966:	6010      	str	r0, [r2, #0]
 8011968:	7019      	strb	r1, [r3, #0]
 801196a:	4608      	mov	r0, r1
 801196c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011970:	4770      	bx	lr

08011972 <__sfputs_r>:
 8011972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011974:	4606      	mov	r6, r0
 8011976:	460f      	mov	r7, r1
 8011978:	4614      	mov	r4, r2
 801197a:	18d5      	adds	r5, r2, r3
 801197c:	42ac      	cmp	r4, r5
 801197e:	d101      	bne.n	8011984 <__sfputs_r+0x12>
 8011980:	2000      	movs	r0, #0
 8011982:	e007      	b.n	8011994 <__sfputs_r+0x22>
 8011984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011988:	463a      	mov	r2, r7
 801198a:	4630      	mov	r0, r6
 801198c:	f7ff ffda 	bl	8011944 <__sfputc_r>
 8011990:	1c43      	adds	r3, r0, #1
 8011992:	d1f3      	bne.n	801197c <__sfputs_r+0xa>
 8011994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011998 <_vfiprintf_r>:
 8011998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801199c:	460d      	mov	r5, r1
 801199e:	b09d      	sub	sp, #116	; 0x74
 80119a0:	4614      	mov	r4, r2
 80119a2:	4698      	mov	r8, r3
 80119a4:	4606      	mov	r6, r0
 80119a6:	b118      	cbz	r0, 80119b0 <_vfiprintf_r+0x18>
 80119a8:	6a03      	ldr	r3, [r0, #32]
 80119aa:	b90b      	cbnz	r3, 80119b0 <_vfiprintf_r+0x18>
 80119ac:	f7fe fae2 	bl	800ff74 <__sinit>
 80119b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119b2:	07d9      	lsls	r1, r3, #31
 80119b4:	d405      	bmi.n	80119c2 <_vfiprintf_r+0x2a>
 80119b6:	89ab      	ldrh	r3, [r5, #12]
 80119b8:	059a      	lsls	r2, r3, #22
 80119ba:	d402      	bmi.n	80119c2 <_vfiprintf_r+0x2a>
 80119bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80119be:	f7fe fc14 	bl	80101ea <__retarget_lock_acquire_recursive>
 80119c2:	89ab      	ldrh	r3, [r5, #12]
 80119c4:	071b      	lsls	r3, r3, #28
 80119c6:	d501      	bpl.n	80119cc <_vfiprintf_r+0x34>
 80119c8:	692b      	ldr	r3, [r5, #16]
 80119ca:	b99b      	cbnz	r3, 80119f4 <_vfiprintf_r+0x5c>
 80119cc:	4629      	mov	r1, r5
 80119ce:	4630      	mov	r0, r6
 80119d0:	f000 f9e8 	bl	8011da4 <__swsetup_r>
 80119d4:	b170      	cbz	r0, 80119f4 <_vfiprintf_r+0x5c>
 80119d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119d8:	07dc      	lsls	r4, r3, #31
 80119da:	d504      	bpl.n	80119e6 <_vfiprintf_r+0x4e>
 80119dc:	f04f 30ff 	mov.w	r0, #4294967295
 80119e0:	b01d      	add	sp, #116	; 0x74
 80119e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119e6:	89ab      	ldrh	r3, [r5, #12]
 80119e8:	0598      	lsls	r0, r3, #22
 80119ea:	d4f7      	bmi.n	80119dc <_vfiprintf_r+0x44>
 80119ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80119ee:	f7fe fbfd 	bl	80101ec <__retarget_lock_release_recursive>
 80119f2:	e7f3      	b.n	80119dc <_vfiprintf_r+0x44>
 80119f4:	2300      	movs	r3, #0
 80119f6:	9309      	str	r3, [sp, #36]	; 0x24
 80119f8:	2320      	movs	r3, #32
 80119fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80119fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a02:	2330      	movs	r3, #48	; 0x30
 8011a04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011bb8 <_vfiprintf_r+0x220>
 8011a08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011a0c:	f04f 0901 	mov.w	r9, #1
 8011a10:	4623      	mov	r3, r4
 8011a12:	469a      	mov	sl, r3
 8011a14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a18:	b10a      	cbz	r2, 8011a1e <_vfiprintf_r+0x86>
 8011a1a:	2a25      	cmp	r2, #37	; 0x25
 8011a1c:	d1f9      	bne.n	8011a12 <_vfiprintf_r+0x7a>
 8011a1e:	ebba 0b04 	subs.w	fp, sl, r4
 8011a22:	d00b      	beq.n	8011a3c <_vfiprintf_r+0xa4>
 8011a24:	465b      	mov	r3, fp
 8011a26:	4622      	mov	r2, r4
 8011a28:	4629      	mov	r1, r5
 8011a2a:	4630      	mov	r0, r6
 8011a2c:	f7ff ffa1 	bl	8011972 <__sfputs_r>
 8011a30:	3001      	adds	r0, #1
 8011a32:	f000 80a9 	beq.w	8011b88 <_vfiprintf_r+0x1f0>
 8011a36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a38:	445a      	add	r2, fp
 8011a3a:	9209      	str	r2, [sp, #36]	; 0x24
 8011a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	f000 80a1 	beq.w	8011b88 <_vfiprintf_r+0x1f0>
 8011a46:	2300      	movs	r3, #0
 8011a48:	f04f 32ff 	mov.w	r2, #4294967295
 8011a4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a50:	f10a 0a01 	add.w	sl, sl, #1
 8011a54:	9304      	str	r3, [sp, #16]
 8011a56:	9307      	str	r3, [sp, #28]
 8011a58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a5c:	931a      	str	r3, [sp, #104]	; 0x68
 8011a5e:	4654      	mov	r4, sl
 8011a60:	2205      	movs	r2, #5
 8011a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a66:	4854      	ldr	r0, [pc, #336]	; (8011bb8 <_vfiprintf_r+0x220>)
 8011a68:	f7ee fbca 	bl	8000200 <memchr>
 8011a6c:	9a04      	ldr	r2, [sp, #16]
 8011a6e:	b9d8      	cbnz	r0, 8011aa8 <_vfiprintf_r+0x110>
 8011a70:	06d1      	lsls	r1, r2, #27
 8011a72:	bf44      	itt	mi
 8011a74:	2320      	movmi	r3, #32
 8011a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a7a:	0713      	lsls	r3, r2, #28
 8011a7c:	bf44      	itt	mi
 8011a7e:	232b      	movmi	r3, #43	; 0x2b
 8011a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a84:	f89a 3000 	ldrb.w	r3, [sl]
 8011a88:	2b2a      	cmp	r3, #42	; 0x2a
 8011a8a:	d015      	beq.n	8011ab8 <_vfiprintf_r+0x120>
 8011a8c:	9a07      	ldr	r2, [sp, #28]
 8011a8e:	4654      	mov	r4, sl
 8011a90:	2000      	movs	r0, #0
 8011a92:	f04f 0c0a 	mov.w	ip, #10
 8011a96:	4621      	mov	r1, r4
 8011a98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a9c:	3b30      	subs	r3, #48	; 0x30
 8011a9e:	2b09      	cmp	r3, #9
 8011aa0:	d94d      	bls.n	8011b3e <_vfiprintf_r+0x1a6>
 8011aa2:	b1b0      	cbz	r0, 8011ad2 <_vfiprintf_r+0x13a>
 8011aa4:	9207      	str	r2, [sp, #28]
 8011aa6:	e014      	b.n	8011ad2 <_vfiprintf_r+0x13a>
 8011aa8:	eba0 0308 	sub.w	r3, r0, r8
 8011aac:	fa09 f303 	lsl.w	r3, r9, r3
 8011ab0:	4313      	orrs	r3, r2
 8011ab2:	9304      	str	r3, [sp, #16]
 8011ab4:	46a2      	mov	sl, r4
 8011ab6:	e7d2      	b.n	8011a5e <_vfiprintf_r+0xc6>
 8011ab8:	9b03      	ldr	r3, [sp, #12]
 8011aba:	1d19      	adds	r1, r3, #4
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	9103      	str	r1, [sp, #12]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	bfbb      	ittet	lt
 8011ac4:	425b      	neglt	r3, r3
 8011ac6:	f042 0202 	orrlt.w	r2, r2, #2
 8011aca:	9307      	strge	r3, [sp, #28]
 8011acc:	9307      	strlt	r3, [sp, #28]
 8011ace:	bfb8      	it	lt
 8011ad0:	9204      	strlt	r2, [sp, #16]
 8011ad2:	7823      	ldrb	r3, [r4, #0]
 8011ad4:	2b2e      	cmp	r3, #46	; 0x2e
 8011ad6:	d10c      	bne.n	8011af2 <_vfiprintf_r+0x15a>
 8011ad8:	7863      	ldrb	r3, [r4, #1]
 8011ada:	2b2a      	cmp	r3, #42	; 0x2a
 8011adc:	d134      	bne.n	8011b48 <_vfiprintf_r+0x1b0>
 8011ade:	9b03      	ldr	r3, [sp, #12]
 8011ae0:	1d1a      	adds	r2, r3, #4
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	9203      	str	r2, [sp, #12]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	bfb8      	it	lt
 8011aea:	f04f 33ff 	movlt.w	r3, #4294967295
 8011aee:	3402      	adds	r4, #2
 8011af0:	9305      	str	r3, [sp, #20]
 8011af2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011bc8 <_vfiprintf_r+0x230>
 8011af6:	7821      	ldrb	r1, [r4, #0]
 8011af8:	2203      	movs	r2, #3
 8011afa:	4650      	mov	r0, sl
 8011afc:	f7ee fb80 	bl	8000200 <memchr>
 8011b00:	b138      	cbz	r0, 8011b12 <_vfiprintf_r+0x17a>
 8011b02:	9b04      	ldr	r3, [sp, #16]
 8011b04:	eba0 000a 	sub.w	r0, r0, sl
 8011b08:	2240      	movs	r2, #64	; 0x40
 8011b0a:	4082      	lsls	r2, r0
 8011b0c:	4313      	orrs	r3, r2
 8011b0e:	3401      	adds	r4, #1
 8011b10:	9304      	str	r3, [sp, #16]
 8011b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b16:	4829      	ldr	r0, [pc, #164]	; (8011bbc <_vfiprintf_r+0x224>)
 8011b18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b1c:	2206      	movs	r2, #6
 8011b1e:	f7ee fb6f 	bl	8000200 <memchr>
 8011b22:	2800      	cmp	r0, #0
 8011b24:	d03f      	beq.n	8011ba6 <_vfiprintf_r+0x20e>
 8011b26:	4b26      	ldr	r3, [pc, #152]	; (8011bc0 <_vfiprintf_r+0x228>)
 8011b28:	bb1b      	cbnz	r3, 8011b72 <_vfiprintf_r+0x1da>
 8011b2a:	9b03      	ldr	r3, [sp, #12]
 8011b2c:	3307      	adds	r3, #7
 8011b2e:	f023 0307 	bic.w	r3, r3, #7
 8011b32:	3308      	adds	r3, #8
 8011b34:	9303      	str	r3, [sp, #12]
 8011b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b38:	443b      	add	r3, r7
 8011b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8011b3c:	e768      	b.n	8011a10 <_vfiprintf_r+0x78>
 8011b3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b42:	460c      	mov	r4, r1
 8011b44:	2001      	movs	r0, #1
 8011b46:	e7a6      	b.n	8011a96 <_vfiprintf_r+0xfe>
 8011b48:	2300      	movs	r3, #0
 8011b4a:	3401      	adds	r4, #1
 8011b4c:	9305      	str	r3, [sp, #20]
 8011b4e:	4619      	mov	r1, r3
 8011b50:	f04f 0c0a 	mov.w	ip, #10
 8011b54:	4620      	mov	r0, r4
 8011b56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b5a:	3a30      	subs	r2, #48	; 0x30
 8011b5c:	2a09      	cmp	r2, #9
 8011b5e:	d903      	bls.n	8011b68 <_vfiprintf_r+0x1d0>
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d0c6      	beq.n	8011af2 <_vfiprintf_r+0x15a>
 8011b64:	9105      	str	r1, [sp, #20]
 8011b66:	e7c4      	b.n	8011af2 <_vfiprintf_r+0x15a>
 8011b68:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b6c:	4604      	mov	r4, r0
 8011b6e:	2301      	movs	r3, #1
 8011b70:	e7f0      	b.n	8011b54 <_vfiprintf_r+0x1bc>
 8011b72:	ab03      	add	r3, sp, #12
 8011b74:	9300      	str	r3, [sp, #0]
 8011b76:	462a      	mov	r2, r5
 8011b78:	4b12      	ldr	r3, [pc, #72]	; (8011bc4 <_vfiprintf_r+0x22c>)
 8011b7a:	a904      	add	r1, sp, #16
 8011b7c:	4630      	mov	r0, r6
 8011b7e:	f7fd fda7 	bl	800f6d0 <_printf_float>
 8011b82:	4607      	mov	r7, r0
 8011b84:	1c78      	adds	r0, r7, #1
 8011b86:	d1d6      	bne.n	8011b36 <_vfiprintf_r+0x19e>
 8011b88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b8a:	07d9      	lsls	r1, r3, #31
 8011b8c:	d405      	bmi.n	8011b9a <_vfiprintf_r+0x202>
 8011b8e:	89ab      	ldrh	r3, [r5, #12]
 8011b90:	059a      	lsls	r2, r3, #22
 8011b92:	d402      	bmi.n	8011b9a <_vfiprintf_r+0x202>
 8011b94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b96:	f7fe fb29 	bl	80101ec <__retarget_lock_release_recursive>
 8011b9a:	89ab      	ldrh	r3, [r5, #12]
 8011b9c:	065b      	lsls	r3, r3, #25
 8011b9e:	f53f af1d 	bmi.w	80119dc <_vfiprintf_r+0x44>
 8011ba2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ba4:	e71c      	b.n	80119e0 <_vfiprintf_r+0x48>
 8011ba6:	ab03      	add	r3, sp, #12
 8011ba8:	9300      	str	r3, [sp, #0]
 8011baa:	462a      	mov	r2, r5
 8011bac:	4b05      	ldr	r3, [pc, #20]	; (8011bc4 <_vfiprintf_r+0x22c>)
 8011bae:	a904      	add	r1, sp, #16
 8011bb0:	4630      	mov	r0, r6
 8011bb2:	f7fe f831 	bl	800fc18 <_printf_i>
 8011bb6:	e7e4      	b.n	8011b82 <_vfiprintf_r+0x1ea>
 8011bb8:	080178c4 	.word	0x080178c4
 8011bbc:	080178ce 	.word	0x080178ce
 8011bc0:	0800f6d1 	.word	0x0800f6d1
 8011bc4:	08011973 	.word	0x08011973
 8011bc8:	080178ca 	.word	0x080178ca

08011bcc <__sflush_r>:
 8011bcc:	898a      	ldrh	r2, [r1, #12]
 8011bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd2:	4605      	mov	r5, r0
 8011bd4:	0710      	lsls	r0, r2, #28
 8011bd6:	460c      	mov	r4, r1
 8011bd8:	d458      	bmi.n	8011c8c <__sflush_r+0xc0>
 8011bda:	684b      	ldr	r3, [r1, #4]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	dc05      	bgt.n	8011bec <__sflush_r+0x20>
 8011be0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	dc02      	bgt.n	8011bec <__sflush_r+0x20>
 8011be6:	2000      	movs	r0, #0
 8011be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bee:	2e00      	cmp	r6, #0
 8011bf0:	d0f9      	beq.n	8011be6 <__sflush_r+0x1a>
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011bf8:	682f      	ldr	r7, [r5, #0]
 8011bfa:	6a21      	ldr	r1, [r4, #32]
 8011bfc:	602b      	str	r3, [r5, #0]
 8011bfe:	d032      	beq.n	8011c66 <__sflush_r+0x9a>
 8011c00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011c02:	89a3      	ldrh	r3, [r4, #12]
 8011c04:	075a      	lsls	r2, r3, #29
 8011c06:	d505      	bpl.n	8011c14 <__sflush_r+0x48>
 8011c08:	6863      	ldr	r3, [r4, #4]
 8011c0a:	1ac0      	subs	r0, r0, r3
 8011c0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011c0e:	b10b      	cbz	r3, 8011c14 <__sflush_r+0x48>
 8011c10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011c12:	1ac0      	subs	r0, r0, r3
 8011c14:	2300      	movs	r3, #0
 8011c16:	4602      	mov	r2, r0
 8011c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011c1a:	6a21      	ldr	r1, [r4, #32]
 8011c1c:	4628      	mov	r0, r5
 8011c1e:	47b0      	blx	r6
 8011c20:	1c43      	adds	r3, r0, #1
 8011c22:	89a3      	ldrh	r3, [r4, #12]
 8011c24:	d106      	bne.n	8011c34 <__sflush_r+0x68>
 8011c26:	6829      	ldr	r1, [r5, #0]
 8011c28:	291d      	cmp	r1, #29
 8011c2a:	d82b      	bhi.n	8011c84 <__sflush_r+0xb8>
 8011c2c:	4a29      	ldr	r2, [pc, #164]	; (8011cd4 <__sflush_r+0x108>)
 8011c2e:	410a      	asrs	r2, r1
 8011c30:	07d6      	lsls	r6, r2, #31
 8011c32:	d427      	bmi.n	8011c84 <__sflush_r+0xb8>
 8011c34:	2200      	movs	r2, #0
 8011c36:	6062      	str	r2, [r4, #4]
 8011c38:	04d9      	lsls	r1, r3, #19
 8011c3a:	6922      	ldr	r2, [r4, #16]
 8011c3c:	6022      	str	r2, [r4, #0]
 8011c3e:	d504      	bpl.n	8011c4a <__sflush_r+0x7e>
 8011c40:	1c42      	adds	r2, r0, #1
 8011c42:	d101      	bne.n	8011c48 <__sflush_r+0x7c>
 8011c44:	682b      	ldr	r3, [r5, #0]
 8011c46:	b903      	cbnz	r3, 8011c4a <__sflush_r+0x7e>
 8011c48:	6560      	str	r0, [r4, #84]	; 0x54
 8011c4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c4c:	602f      	str	r7, [r5, #0]
 8011c4e:	2900      	cmp	r1, #0
 8011c50:	d0c9      	beq.n	8011be6 <__sflush_r+0x1a>
 8011c52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c56:	4299      	cmp	r1, r3
 8011c58:	d002      	beq.n	8011c60 <__sflush_r+0x94>
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	f7ff f952 	bl	8010f04 <_free_r>
 8011c60:	2000      	movs	r0, #0
 8011c62:	6360      	str	r0, [r4, #52]	; 0x34
 8011c64:	e7c0      	b.n	8011be8 <__sflush_r+0x1c>
 8011c66:	2301      	movs	r3, #1
 8011c68:	4628      	mov	r0, r5
 8011c6a:	47b0      	blx	r6
 8011c6c:	1c41      	adds	r1, r0, #1
 8011c6e:	d1c8      	bne.n	8011c02 <__sflush_r+0x36>
 8011c70:	682b      	ldr	r3, [r5, #0]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d0c5      	beq.n	8011c02 <__sflush_r+0x36>
 8011c76:	2b1d      	cmp	r3, #29
 8011c78:	d001      	beq.n	8011c7e <__sflush_r+0xb2>
 8011c7a:	2b16      	cmp	r3, #22
 8011c7c:	d101      	bne.n	8011c82 <__sflush_r+0xb6>
 8011c7e:	602f      	str	r7, [r5, #0]
 8011c80:	e7b1      	b.n	8011be6 <__sflush_r+0x1a>
 8011c82:	89a3      	ldrh	r3, [r4, #12]
 8011c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c88:	81a3      	strh	r3, [r4, #12]
 8011c8a:	e7ad      	b.n	8011be8 <__sflush_r+0x1c>
 8011c8c:	690f      	ldr	r7, [r1, #16]
 8011c8e:	2f00      	cmp	r7, #0
 8011c90:	d0a9      	beq.n	8011be6 <__sflush_r+0x1a>
 8011c92:	0793      	lsls	r3, r2, #30
 8011c94:	680e      	ldr	r6, [r1, #0]
 8011c96:	bf08      	it	eq
 8011c98:	694b      	ldreq	r3, [r1, #20]
 8011c9a:	600f      	str	r7, [r1, #0]
 8011c9c:	bf18      	it	ne
 8011c9e:	2300      	movne	r3, #0
 8011ca0:	eba6 0807 	sub.w	r8, r6, r7
 8011ca4:	608b      	str	r3, [r1, #8]
 8011ca6:	f1b8 0f00 	cmp.w	r8, #0
 8011caa:	dd9c      	ble.n	8011be6 <__sflush_r+0x1a>
 8011cac:	6a21      	ldr	r1, [r4, #32]
 8011cae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011cb0:	4643      	mov	r3, r8
 8011cb2:	463a      	mov	r2, r7
 8011cb4:	4628      	mov	r0, r5
 8011cb6:	47b0      	blx	r6
 8011cb8:	2800      	cmp	r0, #0
 8011cba:	dc06      	bgt.n	8011cca <__sflush_r+0xfe>
 8011cbc:	89a3      	ldrh	r3, [r4, #12]
 8011cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cc2:	81a3      	strh	r3, [r4, #12]
 8011cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8011cc8:	e78e      	b.n	8011be8 <__sflush_r+0x1c>
 8011cca:	4407      	add	r7, r0
 8011ccc:	eba8 0800 	sub.w	r8, r8, r0
 8011cd0:	e7e9      	b.n	8011ca6 <__sflush_r+0xda>
 8011cd2:	bf00      	nop
 8011cd4:	dfbffffe 	.word	0xdfbffffe

08011cd8 <_fflush_r>:
 8011cd8:	b538      	push	{r3, r4, r5, lr}
 8011cda:	690b      	ldr	r3, [r1, #16]
 8011cdc:	4605      	mov	r5, r0
 8011cde:	460c      	mov	r4, r1
 8011ce0:	b913      	cbnz	r3, 8011ce8 <_fflush_r+0x10>
 8011ce2:	2500      	movs	r5, #0
 8011ce4:	4628      	mov	r0, r5
 8011ce6:	bd38      	pop	{r3, r4, r5, pc}
 8011ce8:	b118      	cbz	r0, 8011cf2 <_fflush_r+0x1a>
 8011cea:	6a03      	ldr	r3, [r0, #32]
 8011cec:	b90b      	cbnz	r3, 8011cf2 <_fflush_r+0x1a>
 8011cee:	f7fe f941 	bl	800ff74 <__sinit>
 8011cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d0f3      	beq.n	8011ce2 <_fflush_r+0xa>
 8011cfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011cfc:	07d0      	lsls	r0, r2, #31
 8011cfe:	d404      	bmi.n	8011d0a <_fflush_r+0x32>
 8011d00:	0599      	lsls	r1, r3, #22
 8011d02:	d402      	bmi.n	8011d0a <_fflush_r+0x32>
 8011d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d06:	f7fe fa70 	bl	80101ea <__retarget_lock_acquire_recursive>
 8011d0a:	4628      	mov	r0, r5
 8011d0c:	4621      	mov	r1, r4
 8011d0e:	f7ff ff5d 	bl	8011bcc <__sflush_r>
 8011d12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011d14:	07da      	lsls	r2, r3, #31
 8011d16:	4605      	mov	r5, r0
 8011d18:	d4e4      	bmi.n	8011ce4 <_fflush_r+0xc>
 8011d1a:	89a3      	ldrh	r3, [r4, #12]
 8011d1c:	059b      	lsls	r3, r3, #22
 8011d1e:	d4e1      	bmi.n	8011ce4 <_fflush_r+0xc>
 8011d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d22:	f7fe fa63 	bl	80101ec <__retarget_lock_release_recursive>
 8011d26:	e7dd      	b.n	8011ce4 <_fflush_r+0xc>

08011d28 <__swbuf_r>:
 8011d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d2a:	460e      	mov	r6, r1
 8011d2c:	4614      	mov	r4, r2
 8011d2e:	4605      	mov	r5, r0
 8011d30:	b118      	cbz	r0, 8011d3a <__swbuf_r+0x12>
 8011d32:	6a03      	ldr	r3, [r0, #32]
 8011d34:	b90b      	cbnz	r3, 8011d3a <__swbuf_r+0x12>
 8011d36:	f7fe f91d 	bl	800ff74 <__sinit>
 8011d3a:	69a3      	ldr	r3, [r4, #24]
 8011d3c:	60a3      	str	r3, [r4, #8]
 8011d3e:	89a3      	ldrh	r3, [r4, #12]
 8011d40:	071a      	lsls	r2, r3, #28
 8011d42:	d525      	bpl.n	8011d90 <__swbuf_r+0x68>
 8011d44:	6923      	ldr	r3, [r4, #16]
 8011d46:	b31b      	cbz	r3, 8011d90 <__swbuf_r+0x68>
 8011d48:	6823      	ldr	r3, [r4, #0]
 8011d4a:	6922      	ldr	r2, [r4, #16]
 8011d4c:	1a98      	subs	r0, r3, r2
 8011d4e:	6963      	ldr	r3, [r4, #20]
 8011d50:	b2f6      	uxtb	r6, r6
 8011d52:	4283      	cmp	r3, r0
 8011d54:	4637      	mov	r7, r6
 8011d56:	dc04      	bgt.n	8011d62 <__swbuf_r+0x3a>
 8011d58:	4621      	mov	r1, r4
 8011d5a:	4628      	mov	r0, r5
 8011d5c:	f7ff ffbc 	bl	8011cd8 <_fflush_r>
 8011d60:	b9e0      	cbnz	r0, 8011d9c <__swbuf_r+0x74>
 8011d62:	68a3      	ldr	r3, [r4, #8]
 8011d64:	3b01      	subs	r3, #1
 8011d66:	60a3      	str	r3, [r4, #8]
 8011d68:	6823      	ldr	r3, [r4, #0]
 8011d6a:	1c5a      	adds	r2, r3, #1
 8011d6c:	6022      	str	r2, [r4, #0]
 8011d6e:	701e      	strb	r6, [r3, #0]
 8011d70:	6962      	ldr	r2, [r4, #20]
 8011d72:	1c43      	adds	r3, r0, #1
 8011d74:	429a      	cmp	r2, r3
 8011d76:	d004      	beq.n	8011d82 <__swbuf_r+0x5a>
 8011d78:	89a3      	ldrh	r3, [r4, #12]
 8011d7a:	07db      	lsls	r3, r3, #31
 8011d7c:	d506      	bpl.n	8011d8c <__swbuf_r+0x64>
 8011d7e:	2e0a      	cmp	r6, #10
 8011d80:	d104      	bne.n	8011d8c <__swbuf_r+0x64>
 8011d82:	4621      	mov	r1, r4
 8011d84:	4628      	mov	r0, r5
 8011d86:	f7ff ffa7 	bl	8011cd8 <_fflush_r>
 8011d8a:	b938      	cbnz	r0, 8011d9c <__swbuf_r+0x74>
 8011d8c:	4638      	mov	r0, r7
 8011d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d90:	4621      	mov	r1, r4
 8011d92:	4628      	mov	r0, r5
 8011d94:	f000 f806 	bl	8011da4 <__swsetup_r>
 8011d98:	2800      	cmp	r0, #0
 8011d9a:	d0d5      	beq.n	8011d48 <__swbuf_r+0x20>
 8011d9c:	f04f 37ff 	mov.w	r7, #4294967295
 8011da0:	e7f4      	b.n	8011d8c <__swbuf_r+0x64>
	...

08011da4 <__swsetup_r>:
 8011da4:	b538      	push	{r3, r4, r5, lr}
 8011da6:	4b2a      	ldr	r3, [pc, #168]	; (8011e50 <__swsetup_r+0xac>)
 8011da8:	4605      	mov	r5, r0
 8011daa:	6818      	ldr	r0, [r3, #0]
 8011dac:	460c      	mov	r4, r1
 8011dae:	b118      	cbz	r0, 8011db8 <__swsetup_r+0x14>
 8011db0:	6a03      	ldr	r3, [r0, #32]
 8011db2:	b90b      	cbnz	r3, 8011db8 <__swsetup_r+0x14>
 8011db4:	f7fe f8de 	bl	800ff74 <__sinit>
 8011db8:	89a3      	ldrh	r3, [r4, #12]
 8011dba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011dbe:	0718      	lsls	r0, r3, #28
 8011dc0:	d422      	bmi.n	8011e08 <__swsetup_r+0x64>
 8011dc2:	06d9      	lsls	r1, r3, #27
 8011dc4:	d407      	bmi.n	8011dd6 <__swsetup_r+0x32>
 8011dc6:	2309      	movs	r3, #9
 8011dc8:	602b      	str	r3, [r5, #0]
 8011dca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011dce:	81a3      	strh	r3, [r4, #12]
 8011dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8011dd4:	e034      	b.n	8011e40 <__swsetup_r+0x9c>
 8011dd6:	0758      	lsls	r0, r3, #29
 8011dd8:	d512      	bpl.n	8011e00 <__swsetup_r+0x5c>
 8011dda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ddc:	b141      	cbz	r1, 8011df0 <__swsetup_r+0x4c>
 8011dde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011de2:	4299      	cmp	r1, r3
 8011de4:	d002      	beq.n	8011dec <__swsetup_r+0x48>
 8011de6:	4628      	mov	r0, r5
 8011de8:	f7ff f88c 	bl	8010f04 <_free_r>
 8011dec:	2300      	movs	r3, #0
 8011dee:	6363      	str	r3, [r4, #52]	; 0x34
 8011df0:	89a3      	ldrh	r3, [r4, #12]
 8011df2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011df6:	81a3      	strh	r3, [r4, #12]
 8011df8:	2300      	movs	r3, #0
 8011dfa:	6063      	str	r3, [r4, #4]
 8011dfc:	6923      	ldr	r3, [r4, #16]
 8011dfe:	6023      	str	r3, [r4, #0]
 8011e00:	89a3      	ldrh	r3, [r4, #12]
 8011e02:	f043 0308 	orr.w	r3, r3, #8
 8011e06:	81a3      	strh	r3, [r4, #12]
 8011e08:	6923      	ldr	r3, [r4, #16]
 8011e0a:	b94b      	cbnz	r3, 8011e20 <__swsetup_r+0x7c>
 8011e0c:	89a3      	ldrh	r3, [r4, #12]
 8011e0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e16:	d003      	beq.n	8011e20 <__swsetup_r+0x7c>
 8011e18:	4621      	mov	r1, r4
 8011e1a:	4628      	mov	r0, r5
 8011e1c:	f000 f8ee 	bl	8011ffc <__smakebuf_r>
 8011e20:	89a0      	ldrh	r0, [r4, #12]
 8011e22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011e26:	f010 0301 	ands.w	r3, r0, #1
 8011e2a:	d00a      	beq.n	8011e42 <__swsetup_r+0x9e>
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	60a3      	str	r3, [r4, #8]
 8011e30:	6963      	ldr	r3, [r4, #20]
 8011e32:	425b      	negs	r3, r3
 8011e34:	61a3      	str	r3, [r4, #24]
 8011e36:	6923      	ldr	r3, [r4, #16]
 8011e38:	b943      	cbnz	r3, 8011e4c <__swsetup_r+0xa8>
 8011e3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011e3e:	d1c4      	bne.n	8011dca <__swsetup_r+0x26>
 8011e40:	bd38      	pop	{r3, r4, r5, pc}
 8011e42:	0781      	lsls	r1, r0, #30
 8011e44:	bf58      	it	pl
 8011e46:	6963      	ldrpl	r3, [r4, #20]
 8011e48:	60a3      	str	r3, [r4, #8]
 8011e4a:	e7f4      	b.n	8011e36 <__swsetup_r+0x92>
 8011e4c:	2000      	movs	r0, #0
 8011e4e:	e7f7      	b.n	8011e40 <__swsetup_r+0x9c>
 8011e50:	20000084 	.word	0x20000084

08011e54 <memmove>:
 8011e54:	4288      	cmp	r0, r1
 8011e56:	b510      	push	{r4, lr}
 8011e58:	eb01 0402 	add.w	r4, r1, r2
 8011e5c:	d902      	bls.n	8011e64 <memmove+0x10>
 8011e5e:	4284      	cmp	r4, r0
 8011e60:	4623      	mov	r3, r4
 8011e62:	d807      	bhi.n	8011e74 <memmove+0x20>
 8011e64:	1e43      	subs	r3, r0, #1
 8011e66:	42a1      	cmp	r1, r4
 8011e68:	d008      	beq.n	8011e7c <memmove+0x28>
 8011e6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e72:	e7f8      	b.n	8011e66 <memmove+0x12>
 8011e74:	4402      	add	r2, r0
 8011e76:	4601      	mov	r1, r0
 8011e78:	428a      	cmp	r2, r1
 8011e7a:	d100      	bne.n	8011e7e <memmove+0x2a>
 8011e7c:	bd10      	pop	{r4, pc}
 8011e7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e86:	e7f7      	b.n	8011e78 <memmove+0x24>

08011e88 <__assert_func>:
 8011e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e8a:	4614      	mov	r4, r2
 8011e8c:	461a      	mov	r2, r3
 8011e8e:	4b09      	ldr	r3, [pc, #36]	; (8011eb4 <__assert_func+0x2c>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	4605      	mov	r5, r0
 8011e94:	68d8      	ldr	r0, [r3, #12]
 8011e96:	b14c      	cbz	r4, 8011eac <__assert_func+0x24>
 8011e98:	4b07      	ldr	r3, [pc, #28]	; (8011eb8 <__assert_func+0x30>)
 8011e9a:	9100      	str	r1, [sp, #0]
 8011e9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011ea0:	4906      	ldr	r1, [pc, #24]	; (8011ebc <__assert_func+0x34>)
 8011ea2:	462b      	mov	r3, r5
 8011ea4:	f000 f872 	bl	8011f8c <fiprintf>
 8011ea8:	f000 f906 	bl	80120b8 <abort>
 8011eac:	4b04      	ldr	r3, [pc, #16]	; (8011ec0 <__assert_func+0x38>)
 8011eae:	461c      	mov	r4, r3
 8011eb0:	e7f3      	b.n	8011e9a <__assert_func+0x12>
 8011eb2:	bf00      	nop
 8011eb4:	20000084 	.word	0x20000084
 8011eb8:	080178df 	.word	0x080178df
 8011ebc:	080178ec 	.word	0x080178ec
 8011ec0:	0801791a 	.word	0x0801791a

08011ec4 <_calloc_r>:
 8011ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ec6:	fba1 2402 	umull	r2, r4, r1, r2
 8011eca:	b94c      	cbnz	r4, 8011ee0 <_calloc_r+0x1c>
 8011ecc:	4611      	mov	r1, r2
 8011ece:	9201      	str	r2, [sp, #4]
 8011ed0:	f7fd fad2 	bl	800f478 <_malloc_r>
 8011ed4:	9a01      	ldr	r2, [sp, #4]
 8011ed6:	4605      	mov	r5, r0
 8011ed8:	b930      	cbnz	r0, 8011ee8 <_calloc_r+0x24>
 8011eda:	4628      	mov	r0, r5
 8011edc:	b003      	add	sp, #12
 8011ede:	bd30      	pop	{r4, r5, pc}
 8011ee0:	220c      	movs	r2, #12
 8011ee2:	6002      	str	r2, [r0, #0]
 8011ee4:	2500      	movs	r5, #0
 8011ee6:	e7f8      	b.n	8011eda <_calloc_r+0x16>
 8011ee8:	4621      	mov	r1, r4
 8011eea:	f7fe f8f0 	bl	80100ce <memset>
 8011eee:	e7f4      	b.n	8011eda <_calloc_r+0x16>

08011ef0 <__ascii_mbtowc>:
 8011ef0:	b082      	sub	sp, #8
 8011ef2:	b901      	cbnz	r1, 8011ef6 <__ascii_mbtowc+0x6>
 8011ef4:	a901      	add	r1, sp, #4
 8011ef6:	b142      	cbz	r2, 8011f0a <__ascii_mbtowc+0x1a>
 8011ef8:	b14b      	cbz	r3, 8011f0e <__ascii_mbtowc+0x1e>
 8011efa:	7813      	ldrb	r3, [r2, #0]
 8011efc:	600b      	str	r3, [r1, #0]
 8011efe:	7812      	ldrb	r2, [r2, #0]
 8011f00:	1e10      	subs	r0, r2, #0
 8011f02:	bf18      	it	ne
 8011f04:	2001      	movne	r0, #1
 8011f06:	b002      	add	sp, #8
 8011f08:	4770      	bx	lr
 8011f0a:	4610      	mov	r0, r2
 8011f0c:	e7fb      	b.n	8011f06 <__ascii_mbtowc+0x16>
 8011f0e:	f06f 0001 	mvn.w	r0, #1
 8011f12:	e7f8      	b.n	8011f06 <__ascii_mbtowc+0x16>

08011f14 <_realloc_r>:
 8011f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f18:	4680      	mov	r8, r0
 8011f1a:	4614      	mov	r4, r2
 8011f1c:	460e      	mov	r6, r1
 8011f1e:	b921      	cbnz	r1, 8011f2a <_realloc_r+0x16>
 8011f20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f24:	4611      	mov	r1, r2
 8011f26:	f7fd baa7 	b.w	800f478 <_malloc_r>
 8011f2a:	b92a      	cbnz	r2, 8011f38 <_realloc_r+0x24>
 8011f2c:	f7fe ffea 	bl	8010f04 <_free_r>
 8011f30:	4625      	mov	r5, r4
 8011f32:	4628      	mov	r0, r5
 8011f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f38:	f000 f8c5 	bl	80120c6 <_malloc_usable_size_r>
 8011f3c:	4284      	cmp	r4, r0
 8011f3e:	4607      	mov	r7, r0
 8011f40:	d802      	bhi.n	8011f48 <_realloc_r+0x34>
 8011f42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011f46:	d812      	bhi.n	8011f6e <_realloc_r+0x5a>
 8011f48:	4621      	mov	r1, r4
 8011f4a:	4640      	mov	r0, r8
 8011f4c:	f7fd fa94 	bl	800f478 <_malloc_r>
 8011f50:	4605      	mov	r5, r0
 8011f52:	2800      	cmp	r0, #0
 8011f54:	d0ed      	beq.n	8011f32 <_realloc_r+0x1e>
 8011f56:	42bc      	cmp	r4, r7
 8011f58:	4622      	mov	r2, r4
 8011f5a:	4631      	mov	r1, r6
 8011f5c:	bf28      	it	cs
 8011f5e:	463a      	movcs	r2, r7
 8011f60:	f7fe f945 	bl	80101ee <memcpy>
 8011f64:	4631      	mov	r1, r6
 8011f66:	4640      	mov	r0, r8
 8011f68:	f7fe ffcc 	bl	8010f04 <_free_r>
 8011f6c:	e7e1      	b.n	8011f32 <_realloc_r+0x1e>
 8011f6e:	4635      	mov	r5, r6
 8011f70:	e7df      	b.n	8011f32 <_realloc_r+0x1e>

08011f72 <__ascii_wctomb>:
 8011f72:	b149      	cbz	r1, 8011f88 <__ascii_wctomb+0x16>
 8011f74:	2aff      	cmp	r2, #255	; 0xff
 8011f76:	bf85      	ittet	hi
 8011f78:	238a      	movhi	r3, #138	; 0x8a
 8011f7a:	6003      	strhi	r3, [r0, #0]
 8011f7c:	700a      	strbls	r2, [r1, #0]
 8011f7e:	f04f 30ff 	movhi.w	r0, #4294967295
 8011f82:	bf98      	it	ls
 8011f84:	2001      	movls	r0, #1
 8011f86:	4770      	bx	lr
 8011f88:	4608      	mov	r0, r1
 8011f8a:	4770      	bx	lr

08011f8c <fiprintf>:
 8011f8c:	b40e      	push	{r1, r2, r3}
 8011f8e:	b503      	push	{r0, r1, lr}
 8011f90:	4601      	mov	r1, r0
 8011f92:	ab03      	add	r3, sp, #12
 8011f94:	4805      	ldr	r0, [pc, #20]	; (8011fac <fiprintf+0x20>)
 8011f96:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f9a:	6800      	ldr	r0, [r0, #0]
 8011f9c:	9301      	str	r3, [sp, #4]
 8011f9e:	f7ff fcfb 	bl	8011998 <_vfiprintf_r>
 8011fa2:	b002      	add	sp, #8
 8011fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011fa8:	b003      	add	sp, #12
 8011faa:	4770      	bx	lr
 8011fac:	20000084 	.word	0x20000084

08011fb0 <__swhatbuf_r>:
 8011fb0:	b570      	push	{r4, r5, r6, lr}
 8011fb2:	460c      	mov	r4, r1
 8011fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fb8:	2900      	cmp	r1, #0
 8011fba:	b096      	sub	sp, #88	; 0x58
 8011fbc:	4615      	mov	r5, r2
 8011fbe:	461e      	mov	r6, r3
 8011fc0:	da0d      	bge.n	8011fde <__swhatbuf_r+0x2e>
 8011fc2:	89a3      	ldrh	r3, [r4, #12]
 8011fc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011fc8:	f04f 0100 	mov.w	r1, #0
 8011fcc:	bf0c      	ite	eq
 8011fce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011fd2:	2340      	movne	r3, #64	; 0x40
 8011fd4:	2000      	movs	r0, #0
 8011fd6:	6031      	str	r1, [r6, #0]
 8011fd8:	602b      	str	r3, [r5, #0]
 8011fda:	b016      	add	sp, #88	; 0x58
 8011fdc:	bd70      	pop	{r4, r5, r6, pc}
 8011fde:	466a      	mov	r2, sp
 8011fe0:	f000 f848 	bl	8012074 <_fstat_r>
 8011fe4:	2800      	cmp	r0, #0
 8011fe6:	dbec      	blt.n	8011fc2 <__swhatbuf_r+0x12>
 8011fe8:	9901      	ldr	r1, [sp, #4]
 8011fea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011fee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011ff2:	4259      	negs	r1, r3
 8011ff4:	4159      	adcs	r1, r3
 8011ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ffa:	e7eb      	b.n	8011fd4 <__swhatbuf_r+0x24>

08011ffc <__smakebuf_r>:
 8011ffc:	898b      	ldrh	r3, [r1, #12]
 8011ffe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012000:	079d      	lsls	r5, r3, #30
 8012002:	4606      	mov	r6, r0
 8012004:	460c      	mov	r4, r1
 8012006:	d507      	bpl.n	8012018 <__smakebuf_r+0x1c>
 8012008:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801200c:	6023      	str	r3, [r4, #0]
 801200e:	6123      	str	r3, [r4, #16]
 8012010:	2301      	movs	r3, #1
 8012012:	6163      	str	r3, [r4, #20]
 8012014:	b002      	add	sp, #8
 8012016:	bd70      	pop	{r4, r5, r6, pc}
 8012018:	ab01      	add	r3, sp, #4
 801201a:	466a      	mov	r2, sp
 801201c:	f7ff ffc8 	bl	8011fb0 <__swhatbuf_r>
 8012020:	9900      	ldr	r1, [sp, #0]
 8012022:	4605      	mov	r5, r0
 8012024:	4630      	mov	r0, r6
 8012026:	f7fd fa27 	bl	800f478 <_malloc_r>
 801202a:	b948      	cbnz	r0, 8012040 <__smakebuf_r+0x44>
 801202c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012030:	059a      	lsls	r2, r3, #22
 8012032:	d4ef      	bmi.n	8012014 <__smakebuf_r+0x18>
 8012034:	f023 0303 	bic.w	r3, r3, #3
 8012038:	f043 0302 	orr.w	r3, r3, #2
 801203c:	81a3      	strh	r3, [r4, #12]
 801203e:	e7e3      	b.n	8012008 <__smakebuf_r+0xc>
 8012040:	89a3      	ldrh	r3, [r4, #12]
 8012042:	6020      	str	r0, [r4, #0]
 8012044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012048:	81a3      	strh	r3, [r4, #12]
 801204a:	9b00      	ldr	r3, [sp, #0]
 801204c:	6163      	str	r3, [r4, #20]
 801204e:	9b01      	ldr	r3, [sp, #4]
 8012050:	6120      	str	r0, [r4, #16]
 8012052:	b15b      	cbz	r3, 801206c <__smakebuf_r+0x70>
 8012054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012058:	4630      	mov	r0, r6
 801205a:	f000 f81d 	bl	8012098 <_isatty_r>
 801205e:	b128      	cbz	r0, 801206c <__smakebuf_r+0x70>
 8012060:	89a3      	ldrh	r3, [r4, #12]
 8012062:	f023 0303 	bic.w	r3, r3, #3
 8012066:	f043 0301 	orr.w	r3, r3, #1
 801206a:	81a3      	strh	r3, [r4, #12]
 801206c:	89a3      	ldrh	r3, [r4, #12]
 801206e:	431d      	orrs	r5, r3
 8012070:	81a5      	strh	r5, [r4, #12]
 8012072:	e7cf      	b.n	8012014 <__smakebuf_r+0x18>

08012074 <_fstat_r>:
 8012074:	b538      	push	{r3, r4, r5, lr}
 8012076:	4d07      	ldr	r5, [pc, #28]	; (8012094 <_fstat_r+0x20>)
 8012078:	2300      	movs	r3, #0
 801207a:	4604      	mov	r4, r0
 801207c:	4608      	mov	r0, r1
 801207e:	4611      	mov	r1, r2
 8012080:	602b      	str	r3, [r5, #0]
 8012082:	f7f2 fb48 	bl	8004716 <_fstat>
 8012086:	1c43      	adds	r3, r0, #1
 8012088:	d102      	bne.n	8012090 <_fstat_r+0x1c>
 801208a:	682b      	ldr	r3, [r5, #0]
 801208c:	b103      	cbz	r3, 8012090 <_fstat_r+0x1c>
 801208e:	6023      	str	r3, [r4, #0]
 8012090:	bd38      	pop	{r3, r4, r5, pc}
 8012092:	bf00      	nop
 8012094:	20000bec 	.word	0x20000bec

08012098 <_isatty_r>:
 8012098:	b538      	push	{r3, r4, r5, lr}
 801209a:	4d06      	ldr	r5, [pc, #24]	; (80120b4 <_isatty_r+0x1c>)
 801209c:	2300      	movs	r3, #0
 801209e:	4604      	mov	r4, r0
 80120a0:	4608      	mov	r0, r1
 80120a2:	602b      	str	r3, [r5, #0]
 80120a4:	f7f2 fb47 	bl	8004736 <_isatty>
 80120a8:	1c43      	adds	r3, r0, #1
 80120aa:	d102      	bne.n	80120b2 <_isatty_r+0x1a>
 80120ac:	682b      	ldr	r3, [r5, #0]
 80120ae:	b103      	cbz	r3, 80120b2 <_isatty_r+0x1a>
 80120b0:	6023      	str	r3, [r4, #0]
 80120b2:	bd38      	pop	{r3, r4, r5, pc}
 80120b4:	20000bec 	.word	0x20000bec

080120b8 <abort>:
 80120b8:	b508      	push	{r3, lr}
 80120ba:	2006      	movs	r0, #6
 80120bc:	f000 f834 	bl	8012128 <raise>
 80120c0:	2001      	movs	r0, #1
 80120c2:	f7f2 fad9 	bl	8004678 <_exit>

080120c6 <_malloc_usable_size_r>:
 80120c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120ca:	1f18      	subs	r0, r3, #4
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	bfbc      	itt	lt
 80120d0:	580b      	ldrlt	r3, [r1, r0]
 80120d2:	18c0      	addlt	r0, r0, r3
 80120d4:	4770      	bx	lr

080120d6 <_raise_r>:
 80120d6:	291f      	cmp	r1, #31
 80120d8:	b538      	push	{r3, r4, r5, lr}
 80120da:	4604      	mov	r4, r0
 80120dc:	460d      	mov	r5, r1
 80120de:	d904      	bls.n	80120ea <_raise_r+0x14>
 80120e0:	2316      	movs	r3, #22
 80120e2:	6003      	str	r3, [r0, #0]
 80120e4:	f04f 30ff 	mov.w	r0, #4294967295
 80120e8:	bd38      	pop	{r3, r4, r5, pc}
 80120ea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80120ec:	b112      	cbz	r2, 80120f4 <_raise_r+0x1e>
 80120ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80120f2:	b94b      	cbnz	r3, 8012108 <_raise_r+0x32>
 80120f4:	4620      	mov	r0, r4
 80120f6:	f000 f831 	bl	801215c <_getpid_r>
 80120fa:	462a      	mov	r2, r5
 80120fc:	4601      	mov	r1, r0
 80120fe:	4620      	mov	r0, r4
 8012100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012104:	f000 b818 	b.w	8012138 <_kill_r>
 8012108:	2b01      	cmp	r3, #1
 801210a:	d00a      	beq.n	8012122 <_raise_r+0x4c>
 801210c:	1c59      	adds	r1, r3, #1
 801210e:	d103      	bne.n	8012118 <_raise_r+0x42>
 8012110:	2316      	movs	r3, #22
 8012112:	6003      	str	r3, [r0, #0]
 8012114:	2001      	movs	r0, #1
 8012116:	e7e7      	b.n	80120e8 <_raise_r+0x12>
 8012118:	2400      	movs	r4, #0
 801211a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801211e:	4628      	mov	r0, r5
 8012120:	4798      	blx	r3
 8012122:	2000      	movs	r0, #0
 8012124:	e7e0      	b.n	80120e8 <_raise_r+0x12>
	...

08012128 <raise>:
 8012128:	4b02      	ldr	r3, [pc, #8]	; (8012134 <raise+0xc>)
 801212a:	4601      	mov	r1, r0
 801212c:	6818      	ldr	r0, [r3, #0]
 801212e:	f7ff bfd2 	b.w	80120d6 <_raise_r>
 8012132:	bf00      	nop
 8012134:	20000084 	.word	0x20000084

08012138 <_kill_r>:
 8012138:	b538      	push	{r3, r4, r5, lr}
 801213a:	4d07      	ldr	r5, [pc, #28]	; (8012158 <_kill_r+0x20>)
 801213c:	2300      	movs	r3, #0
 801213e:	4604      	mov	r4, r0
 8012140:	4608      	mov	r0, r1
 8012142:	4611      	mov	r1, r2
 8012144:	602b      	str	r3, [r5, #0]
 8012146:	f7f2 fa87 	bl	8004658 <_kill>
 801214a:	1c43      	adds	r3, r0, #1
 801214c:	d102      	bne.n	8012154 <_kill_r+0x1c>
 801214e:	682b      	ldr	r3, [r5, #0]
 8012150:	b103      	cbz	r3, 8012154 <_kill_r+0x1c>
 8012152:	6023      	str	r3, [r4, #0]
 8012154:	bd38      	pop	{r3, r4, r5, pc}
 8012156:	bf00      	nop
 8012158:	20000bec 	.word	0x20000bec

0801215c <_getpid_r>:
 801215c:	f7f2 ba74 	b.w	8004648 <_getpid>

08012160 <_init>:
 8012160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012162:	bf00      	nop
 8012164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012166:	bc08      	pop	{r3}
 8012168:	469e      	mov	lr, r3
 801216a:	4770      	bx	lr

0801216c <_fini>:
 801216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801216e:	bf00      	nop
 8012170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012172:	bc08      	pop	{r3}
 8012174:	469e      	mov	lr, r3
 8012176:	4770      	bx	lr

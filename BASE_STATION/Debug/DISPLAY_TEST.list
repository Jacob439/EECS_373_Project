
DISPLAY_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c34  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000058d0  08012df8  08012df8  00013df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080186c8  080186c8  0001a208  2**0
                  CONTENTS
  4 .ARM          00000008  080186c8  080186c8  000196c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080186d0  080186d0  0001a208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080186d0  080186d0  000196d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080186d4  080186d4  000196d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080186d8  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a80  20000208  080188e0  0001a208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c88  080188e0  0001ac88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025f10  00000000  00000000  0001a238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047c8  00000000  00000000  00040148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021f8  00000000  00000000  00044910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a94  00000000  00000000  00046b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000304c1  00000000  00000000  0004859c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029a65  00000000  00000000  00078a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129ccc  00000000  00000000  000a24c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cc18e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3c0  00000000  00000000  001cc1d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001d6594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000208 	.word	0x20000208
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08012ddc 	.word	0x08012ddc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000020c 	.word	0x2000020c
 80001fc:	08012ddc 	.word	0x08012ddc

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <initTempHumSensor>:
#include "TempHumSensor.h"

// i2c handler
static I2C_HandleTypeDef* hi2c;

void initTempHumSensor(I2C_HandleTypeDef* hi2c_in) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	hi2c = hi2c_in;
 8000ed0:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <initTempHumSensor+0x1c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000224 	.word	0x20000224

08000ee8 <req_measurements>:

// send command to sensor
void req_measurements() {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af02      	add	r7, sp, #8
	uint8_t buf[2] = {CMD_MSB, CMD_LSB};
 8000eee:	f640 532c 	movw	r3, #3372	@ 0xd2c
 8000ef2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(hi2c, SAD_W, buf, 2, 1000);
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <req_measurements+0x28>)
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	1d3a      	adds	r2, r7, #4
 8000efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2302      	movs	r3, #2
 8000f02:	2188      	movs	r1, #136	@ 0x88
 8000f04:	f007 fbe4 	bl	80086d0 <HAL_I2C_Master_Transmit>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000224 	.word	0x20000224

08000f14 <read_raw_measurements>:

// send read request to sensor
// sensor will pull clock down until measurements are done
TempHumRaw_t read_raw_measurements() {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af02      	add	r7, sp, #8
	TempHumRaw_t data;
	uint8_t buf[6];
	HAL_I2C_Master_Receive(hi2c, SAD_R, buf, 6, 1000);
 8000f1a:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <read_raw_measurements+0x58>)
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	463a      	mov	r2, r7
 8000f20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2306      	movs	r3, #6
 8000f28:	2189      	movs	r1, #137	@ 0x89
 8000f2a:	f007 fce9 	bl	8008900 <HAL_I2C_Master_Receive>
	data.temp = buf[0] << 8 | buf[1];
 8000f2e:	783b      	ldrb	r3, [r7, #0]
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	787b      	ldrb	r3, [r7, #1]
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	813b      	strh	r3, [r7, #8]
	data.hum = buf[3] << 8 | buf[4];
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	793b      	ldrb	r3, [r7, #4]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	817b      	strh	r3, [r7, #10]
	return data;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	2300      	movs	r3, #0
 8000f58:	89ba      	ldrh	r2, [r7, #12]
 8000f5a:	f362 030f 	bfi	r3, r2, #0, #16
 8000f5e:	89fa      	ldrh	r2, [r7, #14]
 8000f60:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000224 	.word	0x20000224

08000f70 <get_temp_hum>:

// get converted values
TempHum_t get_temp_hum() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af00      	add	r7, sp, #0
	TempHumRaw_t raw_data;
	TempHum_t conv_data;
	req_measurements();
 8000f76:	f7ff ffb7 	bl	8000ee8 <req_measurements>
	raw_data = read_raw_measurements();
 8000f7a:	f7ff ffcb 	bl	8000f14 <read_raw_measurements>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	617b      	str	r3, [r7, #20]
	int32_t casted_temp = (uint32_t)(raw_data.temp);
 8000f82:	8abb      	ldrh	r3, [r7, #20]
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t casted_hum = (uint32_t)(raw_data.hum);
 8000f86:	8afb      	ldrh	r3, [r7, #22]
 8000f88:	623b      	str	r3, [r7, #32]
	conv_data.temp = -45.0f + 315.0f * ((float)casted_temp/65535.0f);
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f94:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000ff8 <get_temp_hum+0x88>
 8000f98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000ffc <get_temp_hum+0x8c>
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001000 <get_temp_hum+0x90>
 8000fa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fac:	edc7 7a03 	vstr	s15, [r7, #12]
	conv_data.hum = 100.0f * ((float)casted_hum/65535.0f);
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fba:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000ff8 <get_temp_hum+0x88>
 8000fbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001004 <get_temp_hum+0x94>
 8000fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fca:	edc7 7a04 	vstr	s15, [r7, #16]
	return conv_data;
 8000fce:	f107 0318 	add.w	r3, r7, #24
 8000fd2:	f107 020c 	add.w	r2, r7, #12
 8000fd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fda:	e883 0003 	stmia.w	r3, {r0, r1}
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	ee07 2a10 	vmov	s14, r2
 8000fe6:	ee07 3a90 	vmov	s15, r3
}
 8000fea:	eeb0 0a47 	vmov.f32	s0, s14
 8000fee:	eef0 0a67 	vmov.f32	s1, s15
 8000ff2:	3728      	adds	r7, #40	@ 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	477fff00 	.word	0x477fff00
 8000ffc:	439d8000 	.word	0x439d8000
 8001000:	42340000 	.word	0x42340000
 8001004:	42c80000 	.word	0x42c80000

08001008 <JOYSTICK_INIT>:

#include "joystick.h"

	//Write a byte value to a spot in the Joystick
	I2C_HandleTypeDef Hi2c1;
	void JOYSTICK_INIT(I2C_HandleTypeDef hi2c1){
 8001008:	b084      	sub	sp, #16
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
 800100e:	f107 0c08 	add.w	ip, r7, #8
 8001012:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		Hi2c1 = hi2c1;
 8001016:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <JOYSTICK_INIT+0x2c>)
 8001018:	4618      	mov	r0, r3
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	2254      	movs	r2, #84	@ 0x54
 8001020:	4619      	mov	r1, r3
 8001022:	f00f ff54 	bl	8010ece <memcpy>
	}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800102e:	b004      	add	sp, #16
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	2000022c 	.word	0x2000022c

08001038 <readRegister>:
      return(1);
  }

  //Reads from a given location from the Joystick
  uint8_t readRegister(uint8_t reg)
  {
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af02      	add	r7, sp, #8
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	  uint8_t buf[10] = {reg};
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	811a      	strh	r2, [r3, #8]
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	753b      	strb	r3, [r7, #20]
	  uint8_t buf0[10] = {};
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	809a      	strh	r2, [r3, #4]
	  ret = HAL_I2C_Master_Transmit(&Hi2c1, JOYSTICK_ADDRESS, &buf[0], 1, 1000);
 8001060:	f107 0214 	add.w	r2, r7, #20
 8001064:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	2140      	movs	r1, #64	@ 0x40
 800106e:	4810      	ldr	r0, [pc, #64]	@ (80010b0 <readRegister+0x78>)
 8001070:	f007 fb2e 	bl	80086d0 <HAL_I2C_Master_Transmit>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <readRegister+0x7c>)
 800107a:	701a      	strb	r2, [r3, #0]
	  ret = HAL_I2C_Master_Receive(&Hi2c1, JOYSTICK_ADDRESS, &buf0[0], 1, 1000);
 800107c:	f107 0208 	add.w	r2, r7, #8
 8001080:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	2140      	movs	r1, #64	@ 0x40
 800108a:	4809      	ldr	r0, [pc, #36]	@ (80010b0 <readRegister+0x78>)
 800108c:	f007 fc38 	bl	8008900 <HAL_I2C_Master_Receive>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <readRegister+0x7c>)
 8001096:	701a      	strb	r2, [r3, #0]

    if (ret != 0)
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <readRegister+0x7c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <readRegister+0x6c>
    {
      //Serial.println("No ack!");
      return (0); //Device failed to ack
 80010a0:	2300      	movs	r3, #0
 80010a2:	e000      	b.n	80010a6 <readRegister+0x6e>
    }
    return buf0[0];
 80010a4:	7a3b      	ldrb	r3, [r7, #8]
  }
 80010a6:	4618      	mov	r0, r3
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000022c 	.word	0x2000022c
 80010b4:	20000228 	.word	0x20000228

080010b8 <getHorizontal>:
  //Returns the 10-bit ADC value of the joystick horizontal position
  uint16_t getHorizontal()
  {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
    uint16_t X_MSB = readRegister(JOYSTICK_X_MSB);
 80010be:	2003      	movs	r0, #3
 80010c0:	f7ff ffba 	bl	8001038 <readRegister>
 80010c4:	4603      	mov	r3, r0
 80010c6:	80fb      	strh	r3, [r7, #6]
    uint16_t X_LSB = readRegister(JOYSTICK_X_LSB);
 80010c8:	2004      	movs	r0, #4
 80010ca:	f7ff ffb5 	bl	8001038 <readRegister>
 80010ce:	4603      	mov	r3, r0
 80010d0:	80bb      	strh	r3, [r7, #4]
    return ((X_MSB<<8) | X_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	021a      	lsls	r2, r3, #8
 80010d6:	88bb      	ldrh	r3, [r7, #4]
 80010d8:	4313      	orrs	r3, r2
 80010da:	119b      	asrs	r3, r3, #6
 80010dc:	b29b      	uxth	r3, r3
  }
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <getVertical>:
  //Returns the 10-bit ADC value of the joystick vertical position
  uint16_t getVertical()
  {
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
    uint16_t Y_MSB = readRegister(JOYSTICK_Y_MSB);
 80010ec:	2005      	movs	r0, #5
 80010ee:	f7ff ffa3 	bl	8001038 <readRegister>
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
    uint16_t Y_LSB = readRegister(JOYSTICK_Y_LSB);
 80010f6:	2006      	movs	r0, #6
 80010f8:	f7ff ff9e 	bl	8001038 <readRegister>
 80010fc:	4603      	mov	r3, r0
 80010fe:	80bb      	strh	r3, [r7, #4]
    return ((Y_MSB<<8) | Y_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	021a      	lsls	r2, r3, #8
 8001104:	88bb      	ldrh	r3, [r7, #4]
 8001106:	4313      	orrs	r3, r2
 8001108:	119b      	asrs	r3, r3, #6
 800110a:	b29b      	uxth	r3, r3
  }
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <threshold>:
  // 2: Right
  // 3: Up
  // 4: Down
  // 0: Center
  // Range: 0 to 2044
  uint8_t threshold(){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	  uint16_t horizontal = getHorizontal();
 800111a:	f7ff ffcd 	bl	80010b8 <getHorizontal>
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
	  uint16_t vertical = getVertical();
 8001122:	f7ff ffe0 	bl	80010e6 <getVertical>
 8001126:	4603      	mov	r3, r0
 8001128:	80bb      	strh	r3, [r7, #4]

	  // Perspective: Pin connections closest to you
	  // (0,0) is upper left, (1023, 1023) is lower right
	  // (0, 514) is left
	  // (512, 1023) is down
	  uint8_t lr = vertical > 250 && vertical < 750 ? 1 : 0;
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	2bfa      	cmp	r3, #250	@ 0xfa
 800112e:	d906      	bls.n	800113e <threshold+0x2a>
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8001136:	4293      	cmp	r3, r2
 8001138:	d801      	bhi.n	800113e <threshold+0x2a>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <threshold+0x2c>
 800113e:	2300      	movs	r3, #0
 8001140:	70fb      	strb	r3, [r7, #3]
	  if (horizontal < 250 && lr) {
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	2bf9      	cmp	r3, #249	@ 0xf9
 8001146:	d804      	bhi.n	8001152 <threshold+0x3e>
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <threshold+0x3e>
		  return 1;
 800114e:	2301      	movs	r3, #1
 8001150:	e00a      	b.n	8001168 <threshold+0x54>
	  } else if (horizontal > 750 && lr){
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001158:	4293      	cmp	r3, r2
 800115a:	d904      	bls.n	8001166 <threshold+0x52>
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <threshold+0x52>
		  return 2;
 8001162:	2302      	movs	r3, #2
 8001164:	e000      	b.n	8001168 <threshold+0x54>
	  }
	  return 0;
 8001166:	2300      	movs	r3, #0
  }
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <RowChecker>:
#include "keypad.h"
#include "stm32l4xx_hal.h"
#include "lcd.h"

// Checks every row while a single column is pulled down
int RowChecker() {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
    int val = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET ? 1 : val;
 800117a:	2120      	movs	r1, #32
 800117c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001180:	f007 f9b8 	bl	80084f4 <HAL_GPIO_ReadPin>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <RowChecker+0x1e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	e000      	b.n	8001190 <RowChecker+0x20>
 800118e:	2301      	movs	r3, #1
 8001190:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET ? 2 : val;
 8001192:	2140      	movs	r1, #64	@ 0x40
 8001194:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001198:	f007 f9ac 	bl	80084f4 <HAL_GPIO_ReadPin>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <RowChecker+0x36>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	e000      	b.n	80011a8 <RowChecker+0x38>
 80011a6:	2302      	movs	r3, #2
 80011a8:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET ? 3 : val;
 80011aa:	2180      	movs	r1, #128	@ 0x80
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b0:	f007 f9a0 	bl	80084f4 <HAL_GPIO_ReadPin>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <RowChecker+0x4e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	e000      	b.n	80011c0 <RowChecker+0x50>
 80011be:	2303      	movs	r3, #3
 80011c0:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET ? 4 : val;
 80011c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011c6:	4807      	ldr	r0, [pc, #28]	@ (80011e4 <RowChecker+0x74>)
 80011c8:	f007 f994 	bl	80084f4 <HAL_GPIO_ReadPin>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <RowChecker+0x66>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	e000      	b.n	80011d8 <RowChecker+0x68>
 80011d6:	2304      	movs	r3, #4
 80011d8:	607b      	str	r3, [r7, #4]
    //	  	return row_return;
    return val;
 80011da:	687b      	ldr	r3, [r7, #4]
  }
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	48000c00 	.word	0x48000c00

080011e8 <keypad_init>:
//		}
//		return 0;
//	}


void keypad_init(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	// Setting all the pins to high impedence
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80011ec:	2201      	movs	r2, #1
 80011ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011f2:	480b      	ldr	r0, [pc, #44]	@ (8001220 <keypad_init+0x38>)
 80011f4:	f007 f996 	bl	8008524 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011fe:	4809      	ldr	r0, [pc, #36]	@ (8001224 <keypad_init+0x3c>)
 8001200:	f007 f990 	bl	8008524 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800120a:	4805      	ldr	r0, [pc, #20]	@ (8001220 <keypad_init+0x38>)
 800120c:	f007 f98a 	bl	8008524 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001216:	4803      	ldr	r0, [pc, #12]	@ (8001224 <keypad_init+0x3c>)
 8001218:	f007 f984 	bl	8008524 <HAL_GPIO_WritePin>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	48001000 	.word	0x48001000
 8001224:	48001400 	.word	0x48001400

08001228 <KeyPadReturn>:


	//Processes the row (val) and col values to get the number associated with that row and col
	//weightSel is used to determine if Weight (1) or Age (0) is being input
  uint8_t KeyPadReturn(int row, int col, int weightSel) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af02      	add	r7, sp, #8
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
	  // Count of currently input characters
	static uint8_t weightCounter = 0;
	// 1-based indexing, row 0 is nothing
	// col 4 are letters
    if (row == 0 || col == 4) {
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <KeyPadReturn+0x18>
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2b04      	cmp	r3, #4
 800123e:	d101      	bne.n	8001244 <KeyPadReturn+0x1c>
      return 0;
 8001240:	2300      	movs	r3, #0
 8001242:	e0bc      	b.n	80013be <KeyPadReturn+0x196>
    }
    HAL_Delay(10);
 8001244:	200a      	movs	r0, #10
 8001246:	f005 fd59 	bl	8006cfc <HAL_Delay>
    // After delay, only exits while loop once key is released
    while (row == RowChecker()) {
 800124a:	bf00      	nop
 800124c:	f7ff ff90 	bl	8001170 <RowChecker>
 8001250:	4602      	mov	r2, r0
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4293      	cmp	r3, r2
 8001256:	d0f9      	beq.n	800124c <KeyPadReturn+0x24>
    }
    HAL_Delay(10);
 8001258:	200a      	movs	r0, #10
 800125a:	f005 fd4f 	bl	8006cfc <HAL_Delay>
    uint8_t ASCII_Value = ASCII_Keypad_Lookup[row - 1][col - 1];
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1e5a      	subs	r2, r3, #1
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	3b01      	subs	r3, #1
 8001266:	4958      	ldr	r1, [pc, #352]	@ (80013c8 <KeyPadReturn+0x1a0>)
 8001268:	0092      	lsls	r2, r2, #2
 800126a:	440a      	add	r2, r1
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	74fb      	strb	r3, [r7, #19]
    // Check if '#' is pressed
    if (ASCII_Value == 0x23) {
 8001272:	7cfb      	ldrb	r3, [r7, #19]
 8001274:	2b23      	cmp	r3, #35	@ 0x23
 8001276:	d13c      	bne.n	80012f2 <KeyPadReturn+0xca>
    	// Go to main display
      if (weightCounter == 0) {
 8001278:	4b54      	ldr	r3, [pc, #336]	@ (80013cc <KeyPadReturn+0x1a4>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <KeyPadReturn+0x5c>
        // If there is no value for weight, just return
        return 0;
 8001280:	2300      	movs	r3, #0
 8001282:	e09c      	b.n	80013be <KeyPadReturn+0x196>
      for (uint8_t i = 0; i < weightCounter; i++) {
        // print the values here
        //printf("%x ", ASCII_Weight[i]);
      }
      printf("\n");*/
      if(weightSel){
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d006      	beq.n	8001298 <KeyPadReturn+0x70>
          	ASCII_Weight[weightCounter] = '\0';
 800128a:	4b50      	ldr	r3, [pc, #320]	@ (80013cc <KeyPadReturn+0x1a4>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	4b4f      	ldr	r3, [pc, #316]	@ (80013d0 <KeyPadReturn+0x1a8>)
 8001292:	2100      	movs	r1, #0
 8001294:	5499      	strb	r1, [r3, r2]
 8001296:	e027      	b.n	80012e8 <KeyPadReturn+0xc0>
      }
      else{
    	  ASCII_Age[weightCounter] = '\0';
 8001298:	4b4c      	ldr	r3, [pc, #304]	@ (80013cc <KeyPadReturn+0x1a4>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b4d      	ldr	r3, [pc, #308]	@ (80013d4 <KeyPadReturn+0x1ac>)
 80012a0:	2100      	movs	r1, #0
 80012a2:	5499      	strb	r1, [r3, r2]
    	  age = 0;
 80012a4:	4b4c      	ldr	r3, [pc, #304]	@ (80013d8 <KeyPadReturn+0x1b0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
//    	  for (size_t i = weightCounter - 1; i <= 0; i++) {
//    		  age += ASCII_Age[i] * ;
//    	  }
    	  int i = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
    	  while (ASCII_Age[i] != '\0') {
 80012ae:	e015      	b.n	80012dc <KeyPadReturn+0xb4>
    		  age *= 10;
 80012b0:	4b49      	ldr	r3, [pc, #292]	@ (80013d8 <KeyPadReturn+0x1b0>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b46      	ldr	r3, [pc, #280]	@ (80013d8 <KeyPadReturn+0x1b0>)
 80012c0:	701a      	strb	r2, [r3, #0]
    		  age += ASCII_Age[i++] - 48;
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	617a      	str	r2, [r7, #20]
 80012c8:	4a42      	ldr	r2, [pc, #264]	@ (80013d4 <KeyPadReturn+0x1ac>)
 80012ca:	5cd3      	ldrb	r3, [r2, r3]
 80012cc:	3b30      	subs	r3, #48	@ 0x30
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	4b41      	ldr	r3, [pc, #260]	@ (80013d8 <KeyPadReturn+0x1b0>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4413      	add	r3, r2
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b3f      	ldr	r3, [pc, #252]	@ (80013d8 <KeyPadReturn+0x1b0>)
 80012da:	701a      	strb	r2, [r3, #0]
    	  while (ASCII_Age[i] != '\0') {
 80012dc:	4a3d      	ldr	r2, [pc, #244]	@ (80013d4 <KeyPadReturn+0x1ac>)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	4413      	add	r3, r2
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1e3      	bne.n	80012b0 <KeyPadReturn+0x88>
    	  }
      }
      weightCounter = 0;
 80012e8:	4b38      	ldr	r3, [pc, #224]	@ (80013cc <KeyPadReturn+0x1a4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
      // Wipe screen
      //LCD_Fill(50, 56, 50 + 26*3, 50+28, C_BLACK);
      return 1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e065      	b.n	80013be <KeyPadReturn+0x196>
    } else if (ASCII_Value == 0x2A || weightCounter == max_digits - 2) {
 80012f2:	7cfb      	ldrb	r3, [r7, #19]
 80012f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80012f6:	d006      	beq.n	8001306 <KeyPadReturn+0xde>
 80012f8:	4b34      	ldr	r3, [pc, #208]	@ (80013cc <KeyPadReturn+0x1a4>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	2305      	movs	r3, #5
 8001300:	3b02      	subs	r3, #2
 8001302:	429a      	cmp	r2, r3
 8001304:	d118      	bne.n	8001338 <KeyPadReturn+0x110>
    	// Wipe screen
    	if(weightSel){
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d008      	beq.n	800131e <KeyPadReturn+0xf6>
    		LCD_Fill(105, 5, 170, 5+28, C_BLACK);
 800130c:	2300      	movs	r3, #0
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2321      	movs	r3, #33	@ 0x21
 8001312:	22aa      	movs	r2, #170	@ 0xaa
 8001314:	2105      	movs	r1, #5
 8001316:	2069      	movs	r0, #105	@ 0x69
 8001318:	f000 fb2c 	bl	8001974 <LCD_Fill>
 800131c:	e007      	b.n	800132e <KeyPadReturn+0x106>
    	}
    	else{
    		LCD_Fill(80, 5, 170, 5+28, C_BLACK);
 800131e:	2300      	movs	r3, #0
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2321      	movs	r3, #33	@ 0x21
 8001324:	22aa      	movs	r2, #170	@ 0xaa
 8001326:	2105      	movs	r1, #5
 8001328:	2050      	movs	r0, #80	@ 0x50
 800132a:	f000 fb23 	bl	8001974 <LCD_Fill>
    	}
      // Reset if '*' is the input
      // Other if statement:
      // -2: there is a ++ at the end, and need a spot for #
      // Reset if max digits have been reached
      weightCounter = 0;
 800132e:	4b27      	ldr	r3, [pc, #156]	@ (80013cc <KeyPadReturn+0x1a4>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
      return 0;
 8001334:	2300      	movs	r3, #0
 8001336:	e042      	b.n	80013be <KeyPadReturn+0x196>
    }
    //printf("ASCII value: %x\n", ASCII_Value);


    if(weightSel){
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d01c      	beq.n	8001378 <KeyPadReturn+0x150>
    	ASCII_Weight[weightCounter] = ASCII_Value;
 800133e:	4b23      	ldr	r3, [pc, #140]	@ (80013cc <KeyPadReturn+0x1a4>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4619      	mov	r1, r3
 8001344:	4a22      	ldr	r2, [pc, #136]	@ (80013d0 <KeyPadReturn+0x1a8>)
 8001346:	7cfb      	ldrb	r3, [r7, #19]
 8001348:	5453      	strb	r3, [r2, r1]
    	LCD_PutChar(105 + weightCounter*20, 5, ASCII_Value, DEFAULT_FONT, C_GREEN, C_BLACK);
 800134a:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <KeyPadReturn+0x1a4>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	0092      	lsls	r2, r2, #2
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	b29b      	uxth	r3, r3
 8001358:	3369      	adds	r3, #105	@ 0x69
 800135a:	b298      	uxth	r0, r3
 800135c:	7cfa      	ldrb	r2, [r7, #19]
 800135e:	2300      	movs	r3, #0
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <KeyPadReturn+0x1b4>)
 800136a:	2105      	movs	r1, #5
 800136c:	f000 fbc8 	bl	8001b00 <LCD_PutChar>
    	UG_FontSetTransparency(1);
 8001370:	2001      	movs	r0, #1
 8001372:	f004 f96f 	bl	8005654 <UG_FontSetTransparency>
 8001376:	e01b      	b.n	80013b0 <KeyPadReturn+0x188>
    }
    else{
    	ASCII_Age[weightCounter] = ASCII_Value;
 8001378:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <KeyPadReturn+0x1a4>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	4a15      	ldr	r2, [pc, #84]	@ (80013d4 <KeyPadReturn+0x1ac>)
 8001380:	7cfb      	ldrb	r3, [r7, #19]
 8001382:	5453      	strb	r3, [r2, r1]
    	LCD_PutChar(80 + weightCounter*20, 5, ASCII_Value, DEFAULT_FONT, C_GREEN, C_BLACK);
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <KeyPadReturn+0x1a4>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	4413      	add	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	b29b      	uxth	r3, r3
 8001392:	3350      	adds	r3, #80	@ 0x50
 8001394:	b298      	uxth	r0, r3
 8001396:	7cfa      	ldrb	r2, [r7, #19]
 8001398:	2300      	movs	r3, #0
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <KeyPadReturn+0x1b4>)
 80013a4:	2105      	movs	r1, #5
 80013a6:	f000 fbab 	bl	8001b00 <LCD_PutChar>
    	UG_FontSetTransparency(1);
 80013aa:	2001      	movs	r0, #1
 80013ac:	f004 f952 	bl	8005654 <UG_FontSetTransparency>

    }

    weightCounter++;
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <KeyPadReturn+0x1a4>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <KeyPadReturn+0x1a4>)
 80013ba:	701a      	strb	r2, [r3, #0]
    return 0;
 80013bc:	2300      	movs	r3, #0
  }
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000000 	.word	0x20000000
 80013cc:	2000028e 	.word	0x2000028e
 80013d0:	20000280 	.word	0x20000280
 80013d4:	20000288 	.word	0x20000288
 80013d8:	2000028d 	.word	0x2000028d
 80013dc:	08012e94 	.word	0x08012e94

080013e0 <running>:



  void running(){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af02      	add	r7, sp, #8
	  uint8_t finished = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	71fb      	strb	r3, [r7, #7]
	  int val = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
	  //Gathers Weight data
	  LCD_PutStr(5, 5, "Weight: ", DEFAULT_FONT, C_GREEN, C_BLACK);
 80013ee:	2300      	movs	r3, #0
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	4b79      	ldr	r3, [pc, #484]	@ (80015e0 <running+0x200>)
 80013fa:	4a7a      	ldr	r2, [pc, #488]	@ (80015e4 <running+0x204>)
 80013fc:	2105      	movs	r1, #5
 80013fe:	2005      	movs	r0, #5
 8001400:	f000 fb9b 	bl	8001b3a <LCD_PutStr>
  while (!finished) {
 8001404:	e060      	b.n	80014c8 <running+0xe8>
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800140c:	4876      	ldr	r0, [pc, #472]	@ (80015e8 <running+0x208>)
 800140e:	f007 f889 	bl	8008524 <HAL_GPIO_WritePin>
      val = RowChecker();
 8001412:	f7ff fead 	bl	8001170 <RowChecker>
 8001416:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 4, 1);
 8001418:	2201      	movs	r2, #1
 800141a:	2104      	movs	r1, #4
 800141c:	6838      	ldr	r0, [r7, #0]
 800141e:	f7ff ff03 	bl	8001228 <KeyPadReturn>
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8001426:	2201      	movs	r2, #1
 8001428:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800142c:	486e      	ldr	r0, [pc, #440]	@ (80015e8 <running+0x208>)
 800142e:	f007 f879 	bl	8008524 <HAL_GPIO_WritePin>
      if (finished) break;
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d14b      	bne.n	80014d0 <running+0xf0>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800143e:	486b      	ldr	r0, [pc, #428]	@ (80015ec <running+0x20c>)
 8001440:	f007 f870 	bl	8008524 <HAL_GPIO_WritePin>
      val = RowChecker();
 8001444:	f7ff fe94 	bl	8001170 <RowChecker>
 8001448:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 3, 1);
 800144a:	2201      	movs	r2, #1
 800144c:	2103      	movs	r1, #3
 800144e:	6838      	ldr	r0, [r7, #0]
 8001450:	f7ff feea 	bl	8001228 <KeyPadReturn>
 8001454:	4603      	mov	r3, r0
 8001456:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800145e:	4863      	ldr	r0, [pc, #396]	@ (80015ec <running+0x20c>)
 8001460:	f007 f860 	bl	8008524 <HAL_GPIO_WritePin>
      if (finished) break;
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d134      	bne.n	80014d4 <running+0xf4>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001470:	485e      	ldr	r0, [pc, #376]	@ (80015ec <running+0x20c>)
 8001472:	f007 f857 	bl	8008524 <HAL_GPIO_WritePin>
      val = RowChecker();
 8001476:	f7ff fe7b 	bl	8001170 <RowChecker>
 800147a:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 2, 1);
 800147c:	2201      	movs	r2, #1
 800147e:	2102      	movs	r1, #2
 8001480:	6838      	ldr	r0, [r7, #0]
 8001482:	f7ff fed1 	bl	8001228 <KeyPadReturn>
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001490:	4856      	ldr	r0, [pc, #344]	@ (80015ec <running+0x20c>)
 8001492:	f007 f847 	bl	8008524 <HAL_GPIO_WritePin>
      if (finished) break;
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d11d      	bne.n	80014d8 <running+0xf8>

      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014a2:	4851      	ldr	r0, [pc, #324]	@ (80015e8 <running+0x208>)
 80014a4:	f007 f83e 	bl	8008524 <HAL_GPIO_WritePin>
      val = RowChecker();
 80014a8:	f7ff fe62 	bl	8001170 <RowChecker>
 80014ac:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 1, 1);
 80014ae:	2201      	movs	r2, #1
 80014b0:	2101      	movs	r1, #1
 80014b2:	6838      	ldr	r0, [r7, #0]
 80014b4:	f7ff feb8 	bl	8001228 <KeyPadReturn>
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014c2:	4849      	ldr	r0, [pc, #292]	@ (80015e8 <running+0x208>)
 80014c4:	f007 f82e 	bl	8008524 <HAL_GPIO_WritePin>
  while (!finished) {
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d09b      	beq.n	8001406 <running+0x26>
 80014ce:	e004      	b.n	80014da <running+0xfa>
      if (finished) break;
 80014d0:	bf00      	nop
 80014d2:	e002      	b.n	80014da <running+0xfa>
      if (finished) break;
 80014d4:	bf00      	nop
 80014d6:	e000      	b.n	80014da <running+0xfa>
      if (finished) break;
 80014d8:	bf00      	nop

      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
    }
  	  finished = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	71fb      	strb	r3, [r7, #7]
  	  LCD_Fill(5, 5, 170, 5+28, C_BLACK);
 80014de:	2300      	movs	r3, #0
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2321      	movs	r3, #33	@ 0x21
 80014e4:	22aa      	movs	r2, #170	@ 0xaa
 80014e6:	2105      	movs	r1, #5
 80014e8:	2005      	movs	r0, #5
 80014ea:	f000 fa43 	bl	8001974 <LCD_Fill>
  	  //Gathers Age data
  	  LCD_PutStr(5, 5, "Age: ", DEFAULT_FONT, C_GREEN, C_BLACK);
 80014ee:	2300      	movs	r3, #0
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	4b39      	ldr	r3, [pc, #228]	@ (80015e0 <running+0x200>)
 80014fa:	4a3d      	ldr	r2, [pc, #244]	@ (80015f0 <running+0x210>)
 80014fc:	2105      	movs	r1, #5
 80014fe:	2005      	movs	r0, #5
 8001500:	f000 fb1b 	bl	8001b3a <LCD_PutStr>
  	while (!finished) {
 8001504:	e060      	b.n	80015c8 <running+0x1e8>
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800150c:	4836      	ldr	r0, [pc, #216]	@ (80015e8 <running+0x208>)
 800150e:	f007 f809 	bl	8008524 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 8001512:	f7ff fe2d 	bl	8001170 <RowChecker>
 8001516:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 4, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2104      	movs	r1, #4
 800151c:	6838      	ldr	r0, [r7, #0]
 800151e:	f7ff fe83 	bl	8001228 <KeyPadReturn>
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800152c:	482e      	ldr	r0, [pc, #184]	@ (80015e8 <running+0x208>)
 800152e:	f006 fff9 	bl	8008524 <HAL_GPIO_WritePin>
  	      if (finished) return;
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d14b      	bne.n	80015d0 <running+0x1f0>

  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800153e:	482b      	ldr	r0, [pc, #172]	@ (80015ec <running+0x20c>)
 8001540:	f006 fff0 	bl	8008524 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 8001544:	f7ff fe14 	bl	8001170 <RowChecker>
 8001548:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 3, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2103      	movs	r1, #3
 800154e:	6838      	ldr	r0, [r7, #0]
 8001550:	f7ff fe6a 	bl	8001228 <KeyPadReturn>
 8001554:	4603      	mov	r3, r0
 8001556:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800155e:	4823      	ldr	r0, [pc, #140]	@ (80015ec <running+0x20c>)
 8001560:	f006 ffe0 	bl	8008524 <HAL_GPIO_WritePin>
  	      if (finished) return;
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d134      	bne.n	80015d4 <running+0x1f4>

  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001570:	481e      	ldr	r0, [pc, #120]	@ (80015ec <running+0x20c>)
 8001572:	f006 ffd7 	bl	8008524 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 8001576:	f7ff fdfb 	bl	8001170 <RowChecker>
 800157a:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 2, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2102      	movs	r1, #2
 8001580:	6838      	ldr	r0, [r7, #0]
 8001582:	f7ff fe51 	bl	8001228 <KeyPadReturn>
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 800158a:	2201      	movs	r2, #1
 800158c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001590:	4816      	ldr	r0, [pc, #88]	@ (80015ec <running+0x20c>)
 8001592:	f006 ffc7 	bl	8008524 <HAL_GPIO_WritePin>
  	      if (finished) return;
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d11d      	bne.n	80015d8 <running+0x1f8>

  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015a2:	4811      	ldr	r0, [pc, #68]	@ (80015e8 <running+0x208>)
 80015a4:	f006 ffbe 	bl	8008524 <HAL_GPIO_WritePin>
  	      val = RowChecker();
 80015a8:	f7ff fde2 	bl	8001170 <RowChecker>
 80015ac:	6038      	str	r0, [r7, #0]
  	      finished = KeyPadReturn(val, 1, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2101      	movs	r1, #1
 80015b2:	6838      	ldr	r0, [r7, #0]
 80015b4:	f7ff fe38 	bl	8001228 <KeyPadReturn>
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
  	      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 80015bc:	2201      	movs	r2, #1
 80015be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015c2:	4809      	ldr	r0, [pc, #36]	@ (80015e8 <running+0x208>)
 80015c4:	f006 ffae 	bl	8008524 <HAL_GPIO_WritePin>
  	while (!finished) {
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d09b      	beq.n	8001506 <running+0x126>
 80015ce:	e004      	b.n	80015da <running+0x1fa>
  	      if (finished) return;
 80015d0:	bf00      	nop
 80015d2:	e002      	b.n	80015da <running+0x1fa>
  	      if (finished) return;
 80015d4:	bf00      	nop
 80015d6:	e000      	b.n	80015da <running+0x1fa>
  	      if (finished) return;
 80015d8:	bf00      	nop
  	}

  }
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	08012e94 	.word	0x08012e94
 80015e4:	08012df8 	.word	0x08012df8
 80015e8:	48001400 	.word	0x48001400
 80015ec:	48001000 	.word	0x48001000
 80015f0:	08012e04 	.word	0x08012e04

080015f4 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 80015fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <setSPI_Size+0x74>)
 8001600:	f993 3000 	ldrsb.w	r3, [r3]
 8001604:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001608:	429a      	cmp	r2, r3
 800160a:	d027      	beq.n	800165c <setSPI_Size+0x68>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 800160c:	4b17      	ldr	r3, [pc, #92]	@ (800166c <setSPI_Size+0x78>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4b16      	ldr	r3, [pc, #88]	@ (800166c <setSPI_Size+0x78>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800161a:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 800161c:	4a12      	ldr	r2, [pc, #72]	@ (8001668 <setSPI_Size+0x74>)
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d10c      	bne.n	8001644 <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 800162a:	4b10      	ldr	r3, [pc, #64]	@ (800166c <setSPI_Size+0x78>)
 800162c:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001630:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_CRCL;//BR was DFF
 8001632:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <setSPI_Size+0x78>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <setSPI_Size+0x78>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001640:	601a      	str	r2, [r3, #0]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
    }
  }
}
 8001642:	e00b      	b.n	800165c <setSPI_Size+0x68>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8001644:	4b09      	ldr	r3, [pc, #36]	@ (800166c <setSPI_Size+0x78>)
 8001646:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800164a:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
 800164c:	4b07      	ldr	r3, [pc, #28]	@ (800166c <setSPI_Size+0x78>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <setSPI_Size+0x78>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800165a:	601a      	str	r2, [r3, #0]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	20000010 	.word	0x20000010
 800166c:	20000848 	.word	0x20000848

08001670 <LCD_WriteCommand>:
/**
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	70fb      	strb	r3, [r7, #3]
	      setSPI_Size(mode_8bit);
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff ffb9 	bl	80015f4 <setSPI_Size>
//	      LCD_PIN(LCD_DC,RESET);
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);   // DC
 8001682:	2200      	movs	r2, #0
 8001684:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001688:	4815      	ldr	r0, [pc, #84]	@ (80016e0 <LCD_WriteCommand+0x70>)
 800168a:	f006 ff4b 	bl	8008524 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);  // CS
 800168e:	2200      	movs	r2, #0
 8001690:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001694:	4812      	ldr	r0, [pc, #72]	@ (80016e0 <LCD_WriteCommand+0x70>)
 8001696:	f006 ff45 	bl	8008524 <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi3, cmd, 1, HAL_MAX_DELAY);
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	2201      	movs	r2, #1
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4810      	ldr	r0, [pc, #64]	@ (80016e4 <LCD_WriteCommand+0x74>)
 80016a4:	f00a fe85 	bl	800c3b2 <HAL_SPI_Transmit>
	  if (argc) {
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00e      	beq.n	80016cc <LCD_WriteCommand+0x5c>
	    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80016ae:	2201      	movs	r2, #1
 80016b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016b4:	480a      	ldr	r0, [pc, #40]	@ (80016e0 <LCD_WriteCommand+0x70>)
 80016b6:	f006 ff35 	bl	8008524 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&hspi3, (cmd + 1), argc, HAL_MAX_DELAY);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	1c59      	adds	r1, r3, #1
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	4807      	ldr	r0, [pc, #28]	@ (80016e4 <LCD_WriteCommand+0x74>)
 80016c8:	f00a fe73 	bl	800c3b2 <HAL_SPI_Transmit>
	  }
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);  // CS
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016d2:	4803      	ldr	r0, [pc, #12]	@ (80016e0 <LCD_WriteCommand+0x70>)
 80016d4:	f006 ff26 	bl	8008524 <HAL_GPIO_WritePin>
	}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	48001000 	.word	0x48001000
 80016e4:	20000848 	.word	0x20000848

080016e8 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80016f2:	2201      	movs	r2, #1
 80016f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016f8:	4814      	ldr	r0, [pc, #80]	@ (800174c <LCD_WriteData+0x64>)
 80016fa:	f006 ff13 	bl	8008524 <HAL_GPIO_WritePin>
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001704:	4811      	ldr	r0, [pc, #68]	@ (800174c <LCD_WriteData+0x64>)
 8001706:	f006 ff0d 	bl	8008524 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 800170a:	e011      	b.n	8001730 <LCD_WriteData+0x48>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001712:	4293      	cmp	r3, r2
 8001714:	bf28      	it	cs
 8001716:	4613      	movcs	r3, r2
 8001718:	81fb      	strh	r3, [r7, #14]
        buff += chunk_size;
      else
        buff += chunk_size*2;
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 800171a:	89fa      	ldrh	r2, [r7, #14]
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	480b      	ldr	r0, [pc, #44]	@ (8001750 <LCD_WriteData+0x68>)
 8001724:	f00a fe45 	bl	800c3b2 <HAL_SPI_Transmit>
#endif
    buff_size -= chunk_size;
 8001728:	89fb      	ldrh	r3, [r7, #14]
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ea      	bne.n	800170c <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001736:	2201      	movs	r2, #1
 8001738:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800173c:	4803      	ldr	r0, [pc, #12]	@ (800174c <LCD_WriteData+0x64>)
 800173e:	f006 fef1 	bl	8008524 <HAL_GPIO_WritePin>
#endif
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	48001000 	.word	0x48001000
 8001750:	20000848 	.word	0x20000848

08001754 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b08b      	sub	sp, #44	@ 0x2c
 8001758:	af00      	add	r7, sp, #0
 800175a:	4604      	mov	r4, r0
 800175c:	4608      	mov	r0, r1
 800175e:	4611      	mov	r1, r2
 8001760:	461a      	mov	r2, r3
 8001762:	4623      	mov	r3, r4
 8001764:	80fb      	strh	r3, [r7, #6]
 8001766:	4603      	mov	r3, r0
 8001768:	80bb      	strh	r3, [r7, #4]
 800176a:	460b      	mov	r3, r1
 800176c:	807b      	strh	r3, [r7, #2]
 800176e:	4613      	mov	r3, r2
 8001770:	803b      	strh	r3, [r7, #0]
//  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
//  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
	int16_t x_start = x0 /*+ LCD_X_SHIFT*/, x_end = x1 /*+ LCD_X_SHIFT*/;
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	84bb      	strh	r3, [r7, #36]	@ 0x24
	 int16_t y_start = y0 /*+ LCD_Y_SHIFT*/, y_end = y1 /*+ LCD_Y_SHIFT*/;
 800177a:	88bb      	ldrh	r3, [r7, #4]
 800177c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800177e:	883b      	ldrh	r3, [r7, #0]
 8001780:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8001782:	232a      	movs	r3, #42	@ 0x2a
 8001784:	763b      	strb	r3, [r7, #24]
 8001786:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800178a:	121b      	asrs	r3, r3, #8
 800178c:	b21b      	sxth	r3, r3
 800178e:	b2db      	uxtb	r3, r3
 8001790:	767b      	strb	r3, [r7, #25]
 8001792:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001794:	b2db      	uxtb	r3, r3
 8001796:	76bb      	strb	r3, [r7, #26]
 8001798:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800179c:	121b      	asrs	r3, r3, #8
 800179e:	b21b      	sxth	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	76fb      	strb	r3, [r7, #27]
 80017a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80017aa:	f107 0318 	add.w	r3, r7, #24
 80017ae:	2104      	movs	r1, #4
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff5d 	bl	8001670 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 80017b6:	232b      	movs	r3, #43	@ 0x2b
 80017b8:	743b      	strb	r3, [r7, #16]
 80017ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80017be:	121b      	asrs	r3, r3, #8
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	747b      	strb	r3, [r7, #17]
 80017c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	74bb      	strb	r3, [r7, #18]
 80017cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80017d0:	121b      	asrs	r3, r3, #8
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	74fb      	strb	r3, [r7, #19]
 80017d8:	8c3b      	ldrh	r3, [r7, #32]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80017de:	f107 0310 	add.w	r3, r7, #16
 80017e2:	2104      	movs	r1, #4
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff43 	bl	8001670 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 80017ea:	232c      	movs	r3, #44	@ 0x2c
 80017ec:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff3b 	bl	8001670 <LCD_WriteCommand>
  }
}
 80017fa:	bf00      	nop
 80017fc:	372c      	adds	r7, #44	@ 0x2c
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}
	...

08001804 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
 800180e:	460b      	mov	r3, r1
 8001810:	80bb      	strh	r3, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 8001816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db39      	blt.n	8001892 <LCD_DrawPixel+0x8e>
 800181e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001822:	2bef      	cmp	r3, #239	@ 0xef
 8001824:	dc35      	bgt.n	8001892 <LCD_DrawPixel+0x8e>
 8001826:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db31      	blt.n	8001892 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 800182e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001832:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001836:	da2c      	bge.n	8001892 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 8001838:	887b      	ldrh	r3, [r7, #2]
 800183a:	0a1b      	lsrs	r3, r3, #8
 800183c:	b29b      	uxth	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	733b      	strb	r3, [r7, #12]
 8001842:	887b      	ldrh	r3, [r7, #2]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8001848:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800184c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001850:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001854:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001858:	f7ff ff7c 	bl	8001754 <LCD_SetAddressWindow>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001862:	480e      	ldr	r0, [pc, #56]	@ (800189c <LCD_DrawPixel+0x98>)
 8001864:	f006 fe5e 	bl	8008524 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800186e:	480b      	ldr	r0, [pc, #44]	@ (800189c <LCD_DrawPixel+0x98>)
 8001870:	f006 fe58 	bl	8008524 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8001874:	f107 010c 	add.w	r1, r7, #12
 8001878:	f04f 33ff 	mov.w	r3, #4294967295
 800187c:	2202      	movs	r2, #2
 800187e:	4808      	ldr	r0, [pc, #32]	@ (80018a0 <LCD_DrawPixel+0x9c>)
 8001880:	f00a fd97 	bl	800c3b2 <HAL_SPI_Transmit>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001884:	2201      	movs	r2, #1
 8001886:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800188a:	4804      	ldr	r0, [pc, #16]	@ (800189c <LCD_DrawPixel+0x98>)
 800188c:	f006 fe4a 	bl	8008524 <HAL_GPIO_WritePin>
 8001890:	e000      	b.n	8001894 <LCD_DrawPixel+0x90>
    return;
 8001892:	bf00      	nop
#endif
}
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	48001000 	.word	0x48001000
 80018a0:	20000848 	.word	0x20000848

080018a4 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b094      	sub	sp, #80	@ 0x50
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
    LCD_WriteData((uint8_t*)&color, pixels);
  else{
#endif
	  // JACOB IF DMA ENABLE OR SOMETHING WEIRD WITH PIXEL WRITING, GO HERE AND JUST DO PIXEL
    uint16_t fill[DMA_Min_Pixels];                                                                // Use a pixel buffer for faster filling, removes overhead.
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80018b0:	2300      	movs	r3, #0
 80018b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018b4:	e009      	b.n	80018ca <LCD_FillPixels+0x26>
      fill[t]=color;
 80018b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	3350      	adds	r3, #80	@ 0x50
 80018bc:	443b      	add	r3, r7
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80018c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018c6:	3301      	adds	r3, #1
 80018c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	bf28      	it	cs
 80018d0:	2320      	movcs	r3, #32
 80018d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d3ee      	bcc.n	80018b6 <LCD_FillPixels+0x12>
    }
    while(pixels){                                                                                // Send 64 pixel blocks
 80018d8:	e00e      	b.n	80018f8 <LCD_FillPixels+0x54>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b20      	cmp	r3, #32
 80018de:	bf28      	it	cs
 80018e0:	2320      	movcs	r3, #32
 80018e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 80018e4:	f107 0308 	add.w	r3, r7, #8
 80018e8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fefc 	bl	80016e8 <LCD_WriteData>
      pixels-=sz;
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1ed      	bne.n	80018da <LCD_FillPixels+0x36>
    }
#ifdef USE_DMA
  }
#endif
}
 80018fe:	bf00      	nop
 8001900:	bf00      	nop
 8001902:	3750      	adds	r7, #80	@ 0x50
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4604      	mov	r4, r0
 8001910:	4608      	mov	r0, r1
 8001912:	4611      	mov	r1, r2
 8001914:	461a      	mov	r2, r3
 8001916:	4623      	mov	r3, r4
 8001918:	80fb      	strh	r3, [r7, #6]
 800191a:	4603      	mov	r3, r0
 800191c:	80bb      	strh	r3, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	807b      	strh	r3, [r7, #2]
 8001922:	4613      	mov	r3, r2
 8001924:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 8001926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192e:	d104      	bne.n	800193a <LCD_FillArea+0x32>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
 8001930:	2000      	movs	r0, #0
 8001932:	f7ff fe5f 	bl	80015f4 <setSPI_Size>
#endif
    return NULL;
 8001936:	2300      	movs	r3, #0
 8001938:	e013      	b.n	8001962 <LCD_FillArea+0x5a>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 800193a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800193e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001942:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001946:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800194a:	f7ff ff03 	bl	8001754 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
 800194e:	2001      	movs	r0, #1
 8001950:	f7ff fe50 	bl	80015f4 <setSPI_Size>
#endif
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800195a:	4804      	ldr	r0, [pc, #16]	@ (800196c <LCD_FillArea+0x64>)
 800195c:	f006 fde2 	bl	8008524 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8001960:	4b03      	ldr	r3, [pc, #12]	@ (8001970 <LCD_FillArea+0x68>)
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	48001000 	.word	0x48001000
 8001970:	080018a5 	.word	0x080018a5

08001974 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	4604      	mov	r4, r0
 800197c:	4608      	mov	r0, r1
 800197e:	4611      	mov	r1, r2
 8001980:	461a      	mov	r2, r3
 8001982:	4623      	mov	r3, r4
 8001984:	80fb      	strh	r3, [r7, #6]
 8001986:	4603      	mov	r3, r0
 8001988:	80bb      	strh	r3, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	807b      	strh	r3, [r7, #2]
 800198e:	4613      	mov	r3, r2
 8001990:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	3301      	adds	r3, #1
 800199a:	4619      	mov	r1, r3
 800199c:	883a      	ldrh	r2, [r7, #0]
 800199e:	88bb      	ldrh	r3, [r7, #4]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	3301      	adds	r3, #1
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80019aa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80019ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80019b2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80019ba:	f7ff fecb 	bl	8001754 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);
 80019be:	2001      	movs	r0, #1
 80019c0:	f7ff fe18 	bl	80015f4 <setSPI_Size>
#endif
  LCD_FillPixels(pixels, color);
 80019c4:	8c3b      	ldrh	r3, [r7, #32]
 80019c6:	4619      	mov	r1, r3
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f7ff ff6b 	bl	80018a4 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
#else
  setSPI_Size(mode_8bit);
 80019ce:	2000      	movs	r0, #0
 80019d0:	f7ff fe10 	bl	80015f4 <setSPI_Size>
#endif
  return UG_RESULT_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd90      	pop	{r4, r7, pc}

080019de <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 80019de:	b590      	push	{r4, r7, lr}
 80019e0:	b085      	sub	sp, #20
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	603a      	str	r2, [r7, #0]
 80019e8:	80fb      	strh	r3, [r7, #6]
 80019ea:	460b      	mov	r3, r1
 80019ec:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	889b      	ldrh	r3, [r3, #4]
 80019f2:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	88db      	ldrh	r3, [r3, #6]
 80019f8:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	2bef      	cmp	r3, #239	@ 0xef
 80019fe:	d837      	bhi.n	8001a70 <LCD_DrawImage+0x92>
 8001a00:	88bb      	ldrh	r3, [r7, #4]
 8001a02:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001a06:	d233      	bcs.n	8001a70 <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8001a08:	88fa      	ldrh	r2, [r7, #6]
 8001a0a:	89fb      	ldrh	r3, [r7, #14]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001a10:	dc30      	bgt.n	8001a74 <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8001a12:	88ba      	ldrh	r2, [r7, #4]
 8001a14:	89bb      	ldrh	r3, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001a1c:	dc2c      	bgt.n	8001a78 <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	7a1b      	ldrb	r3, [r3, #8]
 8001a22:	2b10      	cmp	r3, #16
 8001a24:	d12a      	bne.n	8001a7c <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001a26:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a2a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a2e:	88fa      	ldrh	r2, [r7, #6]
 8001a30:	89fb      	ldrh	r3, [r7, #14]
 8001a32:	4413      	add	r3, r2
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	3b01      	subs	r3, #1
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	b21c      	sxth	r4, r3
 8001a3c:	88ba      	ldrh	r2, [r7, #4]
 8001a3e:	89bb      	ldrh	r3, [r7, #12]
 8001a40:	4413      	add	r3, r2
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	4622      	mov	r2, r4
 8001a4c:	f7ff fe82 	bl	8001754 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
 8001a50:	2001      	movs	r0, #1
 8001a52:	f7ff fdcf 	bl	80015f4 <setSPI_Size>
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	89fb      	ldrh	r3, [r7, #14]
 8001a5c:	89ba      	ldrh	r2, [r7, #12]
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7ff fe40 	bl	80016e8 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff fdc3 	bl	80015f4 <setSPI_Size>
 8001a6e:	e006      	b.n	8001a7e <LCD_DrawImage+0xa0>
    return;
 8001a70:	bf00      	nop
 8001a72:	e004      	b.n	8001a7e <LCD_DrawImage+0xa0>
    return;
 8001a74:	bf00      	nop
 8001a76:	e002      	b.n	8001a7e <LCD_DrawImage+0xa0>
    return;
 8001a78:	bf00      	nop
 8001a7a:	e000      	b.n	8001a7e <LCD_DrawImage+0xa0>
    return;
 8001a7c:	bf00      	nop
#endif
  }
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd90      	pop	{r4, r7, pc}

08001a84 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8001a84:	b590      	push	{r4, r7, lr}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	4604      	mov	r4, r0
 8001a8c:	4608      	mov	r0, r1
 8001a8e:	4611      	mov	r1, r2
 8001a90:	461a      	mov	r2, r3
 8001a92:	4623      	mov	r3, r4
 8001a94:	80fb      	strh	r3, [r7, #6]
 8001a96:	4603      	mov	r3, r0
 8001a98:	80bb      	strh	r3, [r7, #4]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	807b      	strh	r3, [r7, #2]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8001aa2:	88fa      	ldrh	r2, [r7, #6]
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d10a      	bne.n	8001ac0 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8001aaa:	88ba      	ldrh	r2, [r7, #4]
 8001aac:	883b      	ldrh	r3, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d918      	bls.n	8001ae4 <LCD_DrawLine+0x60>
 8001ab2:	88bb      	ldrh	r3, [r7, #4]
 8001ab4:	81bb      	strh	r3, [r7, #12]
 8001ab6:	883b      	ldrh	r3, [r7, #0]
 8001ab8:	80bb      	strh	r3, [r7, #4]
 8001aba:	89bb      	ldrh	r3, [r7, #12]
 8001abc:	803b      	strh	r3, [r7, #0]
 8001abe:	e011      	b.n	8001ae4 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8001ac0:	88ba      	ldrh	r2, [r7, #4]
 8001ac2:	883b      	ldrh	r3, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d10a      	bne.n	8001ade <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8001ac8:	88fa      	ldrh	r2, [r7, #6]
 8001aca:	887b      	ldrh	r3, [r7, #2]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d909      	bls.n	8001ae4 <LCD_DrawLine+0x60>
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	81fb      	strh	r3, [r7, #14]
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	80fb      	strh	r3, [r7, #6]
 8001ad8:	89fb      	ldrh	r3, [r7, #14]
 8001ada:	807b      	strh	r3, [r7, #2]
 8001adc:	e002      	b.n	8001ae4 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	e009      	b.n	8001af8 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8001ae4:	883c      	ldrh	r4, [r7, #0]
 8001ae6:	887a      	ldrh	r2, [r7, #2]
 8001ae8:	88b9      	ldrh	r1, [r7, #4]
 8001aea:	88f8      	ldrh	r0, [r7, #6]
 8001aec:	8c3b      	ldrh	r3, [r7, #32]
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	4623      	mov	r3, r4
 8001af2:	f7ff ff3f 	bl	8001974 <LCD_Fill>
  return UG_RESULT_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd90      	pop	{r4, r7, pc}

08001b00 <LCD_PutChar>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	4603      	mov	r3, r0
 8001b0a:	81fb      	strh	r3, [r7, #14]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	81bb      	strh	r3, [r7, #12]
 8001b10:	4613      	mov	r3, r2
 8001b12:	72fb      	strb	r3, [r7, #11]
  UG_FontSelect(font);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f003 fb13 	bl	8005140 <UG_FontSelect>
  UG_PutChar(ch, x, y, color, bgcolor);
 8001b1a:	7afb      	ldrb	r3, [r7, #11]
 8001b1c:	b298      	uxth	r0, r3
 8001b1e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001b22:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b26:	8c3c      	ldrh	r4, [r7, #32]
 8001b28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	4623      	mov	r3, r4
 8001b2e:	f003 fd09 	bl	8005544 <UG_PutChar>
}
 8001b32:	bf00      	nop
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd90      	pop	{r4, r7, pc}

08001b3a <LCD_PutStr>:

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60ba      	str	r2, [r7, #8]
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	4603      	mov	r3, r0
 8001b46:	81fb      	strh	r3, [r7, #14]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f003 faf7 	bl	8005140 <UG_FontSelect>
  UG_SetForecolor(color);
 8001b52:	8b3b      	ldrh	r3, [r7, #24]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 fd31 	bl	80055bc <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8001b5a:	8bbb      	ldrh	r3, [r7, #28]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 fd3f 	bl	80055e0 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8001b62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b66:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 fc51 	bl	8005414 <UG_PutString>
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <LCD_setPower+0x14>
 8001b8a:	2329      	movs	r3, #41	@ 0x29
 8001b8c:	e000      	b.n	8001b90 <LCD_setPower+0x16>
 8001b8e:	2328      	movs	r3, #40	@ 0x28
 8001b90:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fd69 	bl	8001670 <LCD_WriteCommand>
}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <LCD_Update>:

static void LCD_Update(void)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	af00      	add	r7, sp, #0
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 8001baa:	2000      	movs	r0, #0
 8001bac:	f7ff fd22 	bl	80015f4 <setSPI_Size>
  #endif
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bc0:	4829      	ldr	r0, [pc, #164]	@ (8001c68 <LCD_init+0xb4>)
 8001bc2:	f006 fcaf 	bl	8008524 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2180      	movs	r1, #128	@ 0x80
 8001bca:	4827      	ldr	r0, [pc, #156]	@ (8001c68 <LCD_init+0xb4>)
 8001bcc:	f006 fcaa 	bl	8008524 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f005 f893 	bl	8006cfc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2180      	movs	r1, #128	@ 0x80
 8001bda:	4823      	ldr	r0, [pc, #140]	@ (8001c68 <LCD_init+0xb4>)
 8001bdc:	f006 fca2 	bl	8008524 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001be0:	20c8      	movs	r0, #200	@ 0xc8
 8001be2:	f005 f88b 	bl	8006cfc <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8001be6:	4921      	ldr	r1, [pc, #132]	@ (8001c6c <LCD_init+0xb8>)
 8001be8:	4821      	ldr	r0, [pc, #132]	@ (8001c70 <LCD_init+0xbc>)
 8001bea:	f003 fa0f 	bl	800500c <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8001bee:	4921      	ldr	r1, [pc, #132]	@ (8001c74 <LCD_init+0xc0>)
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f004 fd9b 	bl	800672c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8001bf6:	4920      	ldr	r1, [pc, #128]	@ (8001c78 <LCD_init+0xc4>)
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f004 fd97 	bl	800672c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8001bfe:	491f      	ldr	r1, [pc, #124]	@ (8001c7c <LCD_init+0xc8>)
 8001c00:	2002      	movs	r0, #2
 8001c02:	f004 fd93 	bl	800672c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8001c06:	491e      	ldr	r1, [pc, #120]	@ (8001c80 <LCD_init+0xcc>)
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f004 fd8f 	bl	800672c <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f003 fcf8 	bl	8005604 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001c14:	2000      	movs	r0, #0
 8001c16:	f003 fd09 	bl	800562c <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	80fb      	strh	r3, [r7, #6]
 8001c1e:	e013      	b.n	8001c48 <LCD_init+0x94>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	3301      	adds	r3, #1
 8001c24:	4a17      	ldr	r2, [pc, #92]	@ (8001c84 <LCD_init+0xd0>)
 8001c26:	441a      	add	r2, r3
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	4916      	ldr	r1, [pc, #88]	@ (8001c84 <LCD_init+0xd0>)
 8001c2c:	5ccb      	ldrb	r3, [r1, r3]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4610      	mov	r0, r2
 8001c32:	f7ff fd1d 	bl	8001670 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	4a12      	ldr	r2, [pc, #72]	@ (8001c84 <LCD_init+0xd0>)
 8001c3a:	5cd3      	ldrb	r3, [r2, r3]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	4413      	add	r3, r2
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3302      	adds	r3, #2
 8001c46:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	2b4b      	cmp	r3, #75	@ 0x4b
 8001c4c:	d9e8      	bls.n	8001c20 <LCD_init+0x6c>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f003 fa86 	bl	8005160 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8001c54:	2001      	movs	r0, #1
 8001c56:	f7ff ff90 	bl	8001b7a <LCD_setPower>
  UG_Update();
 8001c5a:	f004 fd89 	bl	8006770 <UG_Update>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	48001000 	.word	0x48001000
 8001c6c:	20000014 	.word	0x20000014
 8001c70:	20000290 	.word	0x20000290
 8001c74:	08001a85 	.word	0x08001a85
 8001c78:	08001975 	.word	0x08001975
 8001c7c:	08001909 	.word	0x08001909
 8001c80:	080019df 	.word	0x080019df
 8001c84:	08018284 	.word	0x08018284

08001c88 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6858      	ldr	r0, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	8adb      	ldrh	r3, [r3, #22]
 8001caa:	2200      	movs	r2, #0
 8001cac:	4619      	mov	r1, r3
 8001cae:	f006 fc39 	bl	8008524 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	1cf9      	adds	r1, r7, #3
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f00a fb78 	bl	800c3b2 <HAL_SPI_Transmit>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f107 010f 	add.w	r1, r7, #15
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f00a fce2 	bl	800c69c <HAL_SPI_Receive>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6858      	ldr	r0, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	8adb      	ldrh	r3, [r3, #22]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f006 fc1c 	bl	8008524 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	70fb      	strb	r3, [r7, #3]
 8001d02:	4613      	mov	r3, r2
 8001d04:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d0c:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001d0e:	78bb      	ldrb	r3, [r7, #2]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6858      	ldr	r0, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	8adb      	ldrh	r3, [r3, #22]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f006 fbfa 	bl	8008524 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f107 010a 	add.w	r1, r7, #10
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	f00a fb38 	bl	800c3b2 <HAL_SPI_Transmit>
 8001d42:	4603      	mov	r3, r0
 8001d44:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6858      	ldr	r0, [r3, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	8adb      	ldrh	r3, [r3, #22]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4619      	mov	r1, r3
 8001d52:	f006 fbe7 	bl	8008524 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b088      	sub	sp, #32
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	4611      	mov	r1, r2
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	71fb      	strb	r3, [r7, #7]
 8001d70:	4613      	mov	r3, r2
 8001d72:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8001d74:	2380      	movs	r3, #128	@ 0x80
 8001d76:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6858      	ldr	r0, [r3, #4]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8adb      	ldrh	r3, [r3, #22]
 8001d80:	2200      	movs	r2, #0
 8001d82:	4619      	mov	r1, r3
 8001d84:	f006 fbce 	bl	8008524 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f107 0117 	add.w	r1, r7, #23
 8001d94:	2201      	movs	r2, #1
 8001d96:	f00a fb0c 	bl	800c3b2 <HAL_SPI_Transmit>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8001d9e:	79bb      	ldrb	r3, [r7, #6]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d108      	bne.n	8001db6 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	79fa      	ldrb	r2, [r7, #7]
 8001daa:	b292      	uxth	r2, r2
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f00a ffce 	bl	800cd50 <HAL_SPI_Transmit_DMA>
 8001db4:	e012      	b.n	8001ddc <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	f00a faf5 	bl	800c3b2 <HAL_SPI_Transmit>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6858      	ldr	r0, [r3, #4]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8adb      	ldrh	r3, [r3, #22]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f006 fba4 	bl	8008524 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <read_fifo>:

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b088      	sub	sp, #32
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	4611      	mov	r1, r2
 8001dee:	461a      	mov	r2, r3
 8001df0:	460b      	mov	r3, r1
 8001df2:	71fb      	strb	r3, [r7, #7]
 8001df4:	4613      	mov	r3, r2
 8001df6:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6858      	ldr	r0, [r3, #4]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8adb      	ldrh	r3, [r3, #22]
 8001e04:	2200      	movs	r2, #0
 8001e06:	4619      	mov	r1, r3
 8001e08:	f006 fb8c 	bl	8008524 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f107 0117 	add.w	r1, r7, #23
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f00a faca 	bl	800c3b2 <HAL_SPI_Transmit>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 8001e22:	79bb      	ldrb	r3, [r7, #6]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d10a      	bne.n	8001e3e <read_fifo+0x5c>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	79fa      	ldrb	r2, [r7, #7]
 8001e2e:	b292      	uxth	r2, r2
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f00b f87c 	bl	800cf30 <HAL_SPI_Receive_DMA>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 8001e3c:	e012      	b.n	8001e64 <read_fifo+0x82>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	68b9      	ldr	r1, [r7, #8]
 8001e4c:	f00a fc26 	bl	800c69c <HAL_SPI_Receive>
 8001e50:	4603      	mov	r3, r0
 8001e52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6858      	ldr	r0, [r3, #4]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8adb      	ldrh	r3, [r3, #22]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f006 fb60 	bl	8008524 <HAL_GPIO_WritePin>
}
 8001e64:	bf00      	nop
 8001e66:	3720      	adds	r7, #32
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	2101      	movs	r1, #1
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ff36 	bl	8001cf6 <write_register>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ea4:	d801      	bhi.n	8001eaa <set_OCP+0x16>
    imax = 45;
 8001ea6:	232d      	movs	r3, #45	@ 0x2d
 8001ea8:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	2bf0      	cmp	r3, #240	@ 0xf0
 8001eae:	d901      	bls.n	8001eb4 <set_OCP+0x20>
    imax = 240;
 8001eb0:	23f0      	movs	r3, #240	@ 0xf0
 8001eb2:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	2b81      	cmp	r3, #129	@ 0x81
 8001eb8:	d809      	bhi.n	8001ece <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	3b2d      	subs	r3, #45	@ 0x2d
 8001ebe:	4a0f      	ldr	r2, [pc, #60]	@ (8001efc <set_OCP+0x68>)
 8001ec0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ec4:	1052      	asrs	r2, r2, #1
 8001ec6:	17db      	asrs	r3, r3, #31
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	73fb      	strb	r3, [r7, #15]
 8001ecc:	e008      	b.n	8001ee0 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	331e      	adds	r3, #30
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <set_OCP+0x68>)
 8001ed4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ed8:	1092      	asrs	r2, r2, #2
 8001eda:	17db      	asrs	r3, r3, #31
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	f043 0320 	orr.w	r3, r3, #32
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	210b      	movs	r1, #11
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ff02 	bl	8001cf6 <write_register>
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	66666667 	.word	0x66666667

08001f00 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001f00:	b5b0      	push	{r4, r5, r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8001f08:	211d      	movs	r1, #29
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff febc 	bl	8001c88 <read_register>
 8001f10:	4603      	mov	r3, r0
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2200      	movs	r2, #0
 8001f1a:	461c      	mov	r4, r3
 8001f1c:	4615      	mov	r5, r2
 8001f1e:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8001f22:	211e      	movs	r1, #30
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff feaf 	bl	8001c88 <read_register>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001f30:	2304      	movs	r3, #4
 8001f32:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	2b0a      	cmp	r3, #10
 8001f38:	d908      	bls.n	8001f4c <set_low_data_rate_optimization+0x4c>
 8001f3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f3e:	1fd1      	subs	r1, r2, #7
 8001f40:	430b      	orrs	r3, r1
 8001f42:	d103      	bne.n	8001f4c <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8001f44:	7ffb      	ldrb	r3, [r7, #31]
 8001f46:	f043 0308 	orr.w	r3, r3, #8
 8001f4a:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001f4c:	7ffb      	ldrb	r3, [r7, #31]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2126      	movs	r1, #38	@ 0x26
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff fecf 	bl	8001cf6 <write_register>
}
 8001f58:	bf00      	nop
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bdb0      	pop	{r4, r5, r7, pc}

08001f60 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8001f68:	2100      	movs	r1, #0
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ff7e 	bl	8001e6c <set_mode>
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <lora_mode_receive_continuous>:

void lora_mode_receive_continuous(lora_sx1276 *lora)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	7d5b      	ldrb	r3, [r3, #21]
 8001f84:	461a      	mov	r2, r3
 8001f86:	210f      	movs	r1, #15
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff feb4 	bl	8001cf6 <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8001f8e:	22f0      	movs	r2, #240	@ 0xf0
 8001f90:	2112      	movs	r1, #18
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff feaf 	bl	8001cf6 <write_register>

  set_mode(lora, OPMODE_RX_CONTINUOUS);
 8001f98:	2105      	movs	r1, #5
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ff66 	bl	8001e6c <set_mode>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ff5a 	bl	8001e6c <set_mode>
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8001fc8:	211d      	movs	r1, #29
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff fe5c 	bl	8001c88 <read_register>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	f023 0301 	bic.w	r3, r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	211d      	movs	r1, #29
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fe87 	bl	8001cf6 <write_register>
}
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10e      	bne.n	8002022 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	2b0f      	cmp	r3, #15
 8002008:	d901      	bls.n	800200e <lora_set_tx_power+0x1e>
      level = 15;
 800200a:	230f      	movs	r3, #15
 800200c:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002014:	b2db      	uxtb	r3, r3
 8002016:	461a      	mov	r2, r3
 8002018:	2109      	movs	r1, #9
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fe6b 	bl	8001cf6 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8002020:	e02e      	b.n	8002080 <lora_set_tx_power+0x90>
    if (level > 20) {
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	2b14      	cmp	r3, #20
 8002026:	d901      	bls.n	800202c <lora_set_tx_power+0x3c>
      level = 20;
 8002028:	2314      	movs	r3, #20
 800202a:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d801      	bhi.n	8002036 <lora_set_tx_power+0x46>
      level = 2;
 8002032:	2302      	movs	r3, #2
 8002034:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	2b11      	cmp	r3, #17
 800203a:	d90c      	bls.n	8002056 <lora_set_tx_power+0x66>
      level -= 3;
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	3b03      	subs	r3, #3
 8002040:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8002042:	2287      	movs	r2, #135	@ 0x87
 8002044:	214d      	movs	r1, #77	@ 0x4d
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fe55 	bl	8001cf6 <write_register>
      set_OCP(lora, 140);
 800204c:	218c      	movs	r1, #140	@ 0x8c
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ff20 	bl	8001e94 <set_OCP>
 8002054:	e008      	b.n	8002068 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8002056:	2284      	movs	r2, #132	@ 0x84
 8002058:	214d      	movs	r1, #77	@ 0x4d
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fe4b 	bl	8001cf6 <write_register>
      set_OCP(lora, 97);
 8002060:	2161      	movs	r1, #97	@ 0x61
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ff16 	bl	8001e94 <set_OCP>
    level -= 2;
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	3b02      	subs	r3, #2
 800206c:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002074:	b2db      	uxtb	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	2109      	movs	r1, #9
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff fe3b 	bl	8001cf6 <write_register>
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8002094:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002098:	f04f 0000 	mov.w	r0, #0
 800209c:	f04f 0100 	mov.w	r1, #0
 80020a0:	04d9      	lsls	r1, r3, #19
 80020a2:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80020a6:	04d0      	lsls	r0, r2, #19
 80020a8:	4a19      	ldr	r2, [pc, #100]	@ (8002110 <lora_set_frequency+0x88>)
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	f7fe fd93 	bl	8000bd8 <__aeabi_uldivmod>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80020ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	0c02      	lsrs	r2, r0, #16
 80020c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80020cc:	0c0b      	lsrs	r3, r1, #16
 80020ce:	b2d3      	uxtb	r3, r2
 80020d0:	461a      	mov	r2, r3
 80020d2:	2106      	movs	r1, #6
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f7ff fe0e 	bl	8001cf6 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80020da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	0a02      	lsrs	r2, r0, #8
 80020e8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80020ec:	0a0b      	lsrs	r3, r1, #8
 80020ee:	b2d3      	uxtb	r3, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	2107      	movs	r1, #7
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f7ff fdfe 	bl	8001cf6 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80020fa:	7c3b      	ldrb	r3, [r7, #16]
 80020fc:	461a      	mov	r2, r3
 80020fe:	2108      	movs	r1, #8
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f7ff fdf8 	bl	8001cf6 <write_register>
}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	01e84800 	.word	0x01e84800

08002114 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	2b05      	cmp	r3, #5
 8002124:	d802      	bhi.n	800212c <lora_set_spreading_factor+0x18>
    sf = 6;
 8002126:	2306      	movs	r3, #6
 8002128:	70fb      	strb	r3, [r7, #3]
 800212a:	e004      	b.n	8002136 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	2b0c      	cmp	r3, #12
 8002130:	d901      	bls.n	8002136 <lora_set_spreading_factor+0x22>
    sf = 12;
 8002132:	230c      	movs	r3, #12
 8002134:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	2b06      	cmp	r3, #6
 800213a:	d10a      	bne.n	8002152 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 800213c:	22c5      	movs	r2, #197	@ 0xc5
 800213e:	2131      	movs	r1, #49	@ 0x31
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff fdd8 	bl	8001cf6 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8002146:	220c      	movs	r2, #12
 8002148:	2137      	movs	r1, #55	@ 0x37
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff fdd3 	bl	8001cf6 <write_register>
 8002150:	e009      	b.n	8002166 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8002152:	22c3      	movs	r2, #195	@ 0xc3
 8002154:	2131      	movs	r1, #49	@ 0x31
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fdcd 	bl	8001cf6 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 800215c:	220a      	movs	r2, #10
 800215e:	2137      	movs	r1, #55	@ 0x37
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff fdc8 	bl	8001cf6 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8002166:	211e      	movs	r1, #30
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff fd8d 	bl	8001c88 <read_register>
 800216e:	4603      	mov	r3, r0
 8002170:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8002172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	b25a      	sxtb	r2, r3
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	b25b      	sxtb	r3, r3
 8002182:	4313      	orrs	r3, r2
 8002184:	b25b      	sxtb	r3, r3
 8002186:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	461a      	mov	r2, r3
 800218c:	211e      	movs	r1, #30
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff fdb1 	bl	8001cf6 <write_register>

  set_low_data_rate_optimization(lora);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff feb3 	bl	8001f00 <set_low_data_rate_optimization>
}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 80021ae:	887b      	ldrh	r3, [r7, #2]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	2120      	movs	r1, #32
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff fd9b 	bl	8001cf6 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 80021c0:	887b      	ldrh	r3, [r7, #2]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	2121      	movs	r1, #33	@ 0x21
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff fd91 	bl	8001cf6 <write_register>
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 80021e4:	2142      	movs	r1, #66	@ 0x42
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fd4e 	bl	8001c88 <read_register>
 80021ec:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 80021fe:	2101      	movs	r1, #1
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff fd41 	bl	8001c88 <read_register>
 8002206:	4603      	mov	r3, r0
 8002208:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b03      	cmp	r3, #3
 8002212:	d101      	bne.n	8002218 <lora_is_transmitting+0x22>
 8002214:	2305      	movs	r3, #5
 8002216:	e000      	b.n	800221a <lora_is_transmitting+0x24>
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	4611      	mov	r1, r2
 800222e:	461a      	mov	r2, r3
 8002230:	460b      	mov	r3, r1
 8002232:	71fb      	strb	r3, [r7, #7]
 8002234:	4613      	mov	r3, r2
 8002236:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f7ff ffdc 	bl	80021f6 <lora_is_transmitting>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8002244:	2305      	movs	r3, #5
 8002246:	e02a      	b.n	800229e <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8002248:	2101      	movs	r1, #1
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f7ff fe0e 	bl	8001e6c <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f911 	bl	8002478 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	7d1b      	ldrb	r3, [r3, #20]
 800225a:	461a      	mov	r2, r3
 800225c:	210d      	movs	r1, #13
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f7ff fd49 	bl	8001cf6 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	7d1b      	ldrb	r3, [r3, #20]
 8002268:	461a      	mov	r2, r3
 800226a:	210e      	movs	r1, #14
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f7ff fd42 	bl	8001cf6 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	461a      	mov	r2, r3
 8002276:	2122      	movs	r1, #34	@ 0x22
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f7ff fd3c 	bl	8001cf6 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 800227e:	79bb      	ldrb	r3, [r7, #6]
 8002280:	79fa      	ldrb	r2, [r7, #7]
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f7ff fd6a 	bl	8001d5e <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 800228a:	79bb      	ldrb	r3, [r7, #6]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <lora_send_packet_base+0x72>
    return LORA_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e004      	b.n	800229e <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8002294:	2103      	movs	r1, #3
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f7ff fde8 	bl	8001e6c <set_mode>
  return LORA_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	4613      	mov	r3, r2
 80022b2:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 80022b4:	79fa      	ldrb	r2, [r7, #7]
 80022b6:	2302      	movs	r3, #2
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f7ff ffb1 	bl	8002222 <lora_send_packet_base>
 80022c0:	4603      	mov	r3, r0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 80022d2:	2112      	movs	r1, #18
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff fcd7 	bl	8001c88 <read_register>
 80022da:	4603      	mov	r3, r0
 80022dc:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022e4:	b2db      	uxtb	r3, r3
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <lora_pending_packet_length>:

uint8_t lora_pending_packet_length(lora_sx1276 *lora)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  uint8_t len;

  // Query for current header mode - implicit / explicit
  uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 80022f6:	211d      	movs	r1, #29
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff fcc5 	bl	8001c88 <read_register>
 80022fe:	4603      	mov	r3, r0
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	73bb      	strb	r3, [r7, #14]
  if (implicit) {
 8002306:	7bbb      	ldrb	r3, [r7, #14]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <lora_pending_packet_length+0x2c>
    len = read_register(lora, REG_PAYLOAD_LENGTH);
 800230c:	2122      	movs	r1, #34	@ 0x22
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fcba 	bl	8001c88 <read_register>
 8002314:	4603      	mov	r3, r0
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	e005      	b.n	8002326 <lora_pending_packet_length+0x38>
  } else {
    len = read_register(lora, REG_RX_NB_BYTES);
 800231a:	2113      	movs	r1, #19
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff fcb3 	bl	8001c88 <read_register>
 8002322:	4603      	mov	r3, r0
 8002324:	73fb      	strb	r3, [r7, #15]
  }

  return len;
 8002326:	7bfb      	ldrb	r3, [r7, #15]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <lora_receive_packet_base>:


static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 8002340:	2306      	movs	r3, #6
 8002342:	75fb      	strb	r3, [r7, #23]
  uint8_t len = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	75bb      	strb	r3, [r7, #22]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 8002348:	2112      	movs	r1, #18
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f7ff fc9c 	bl	8001c88 <read_register>
 8002350:	4603      	mov	r3, r0
 8002352:	757b      	strb	r3, [r7, #21]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8002354:	22f0      	movs	r2, #240	@ 0xf0
 8002356:	2112      	movs	r1, #18
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f7ff fccc 	bl	8001cf6 <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 800235e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002362:	2b00      	cmp	r3, #0
 8002364:	da02      	bge.n	800236c <lora_receive_packet_base+0x3c>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 8002366:	2302      	movs	r3, #2
 8002368:	75fb      	strb	r3, [r7, #23]
    goto done;
 800236a:	e030      	b.n	80023ce <lora_receive_packet_base+0x9e>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 800236c:	7d7b      	ldrb	r3, [r7, #21]
 800236e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d02a      	beq.n	80023cc <lora_receive_packet_base+0x9c>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 8002376:	7d7b      	ldrb	r3, [r7, #21]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <lora_receive_packet_base+0x56>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 8002380:	2303      	movs	r3, #3
 8002382:	75fb      	strb	r3, [r7, #23]
      goto done;
 8002384:	e023      	b.n	80023ce <lora_receive_packet_base+0x9e>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 8002386:	7d7b      	ldrb	r3, [r7, #21]
 8002388:	f003 0320 	and.w	r3, r3, #32
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <lora_receive_packet_base+0x66>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	75fb      	strb	r3, [r7, #23]
      goto done;
 8002394:	e01b      	b.n	80023ce <lora_receive_packet_base+0x9e>
    }
    // Query for current header mode - implicit / explicit
    len = lora_pending_packet_length(lora);
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f7ff ffa9 	bl	80022ee <lora_pending_packet_length>
 800239c:	4603      	mov	r3, r0
 800239e:	75bb      	strb	r3, [r7, #22]
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 80023a0:	2110      	movs	r1, #16
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f7ff fc70 	bl	8001c88 <read_register>
 80023a8:	4603      	mov	r3, r0
 80023aa:	753b      	strb	r3, [r7, #20]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 80023ac:	7d3b      	ldrb	r3, [r7, #20]
 80023ae:	461a      	mov	r2, r3
 80023b0:	210d      	movs	r1, #13
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f7ff fc9f 	bl	8001cf6 <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 80023b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023bc:	7dba      	ldrb	r2, [r7, #22]
 80023be:	68b9      	ldr	r1, [r7, #8]
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f7ff fd0e 	bl	8001de2 <read_fifo>
    res = LORA_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	75fb      	strb	r3, [r7, #23]
 80023ca:	e000      	b.n	80023ce <lora_receive_packet_base+0x9e>
  }

done:
 80023cc:	bf00      	nop
  if (error) {
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <lora_receive_packet_base+0xaa>
    *error = res;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	7dfa      	ldrb	r2, [r7, #23]
 80023d8:	701a      	strb	r2, [r3, #0]
  }

  return len;
 80023da:	7dbb      	ldrb	r3, [r7, #22]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	71fb      	strb	r3, [r7, #7]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 80023f4:	79fa      	ldrb	r2, [r7, #7]
 80023f6:	2302      	movs	r3, #2
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f7ff ff96 	bl	8002330 <lora_receive_packet_base>
 8002404:	4603      	mov	r3, r0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b086      	sub	sp, #24
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	4613      	mov	r3, r2
 800241c:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 8002422:	e00b      	b.n	800243c <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f7ff ff50 	bl	80022ca <lora_is_packet_available>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10a      	bne.n	8002446 <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 8002430:	2001      	movs	r0, #1
 8002432:	f004 fc63 	bl	8006cfc <HAL_Delay>
    elapsed++;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	3301      	adds	r3, #1
 800243a:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d3ef      	bcc.n	8002424 <lora_receive_packet_blocking+0x16>
 8002444:	e000      	b.n	8002448 <lora_receive_packet_blocking+0x3a>
      break;
 8002446:	bf00      	nop
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 8002448:	79fa      	ldrb	r2, [r7, #7]
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f7ff ffc8 	bl	80023e4 <lora_receive_packet>
 8002454:	4603      	mov	r3, r0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <lora_enable_interrupt_rx_done>:

void lora_enable_interrupt_rx_done(lora_sx1276 *lora)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  // Table 63 DIO Mapping LoRaTM Mode:
  // 00 -> (DIO0 rx_done)
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x00);
 8002466:	2200      	movs	r2, #0
 8002468:	2140      	movs	r1, #64	@ 0x40
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff fc43 	bl	8001cf6 <write_register>
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8002480:	2208      	movs	r2, #8
 8002482:	2112      	movs	r1, #18
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff fc36 	bl	8001cf6 <write_register>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b086      	sub	sp, #24
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	887a      	ldrh	r2, [r7, #2]
 80024b0:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 80024b2:	6a3a      	ldr	r2, [r7, #32]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024d0:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f7ff fe82 	bl	80021dc <lora_version>
 80024d8:	4603      	mov	r3, r0
 80024da:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
 80024de:	2b12      	cmp	r3, #18
 80024e0:	d001      	beq.n	80024e6 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 80024e2:	2304      	movs	r3, #4
 80024e4:	e031      	b.n	800254a <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f7ff fd3a 	bl	8001f60 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f7ff fd37 	bl	8001f60 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 80024f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f7ff fdc6 	bl	8002088 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 80024fc:	2107      	movs	r1, #7
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f7ff fe08 	bl	8002114 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8002504:	210a      	movs	r1, #10
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f7ff fe4b 	bl	80021a2 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f7ff fd57 	bl	8001fc0 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8002512:	210c      	movs	r1, #12
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f7ff fbb7 	bl	8001c88 <read_register>
 800251a:	4603      	mov	r3, r0
 800251c:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 800251e:	7dbb      	ldrb	r3, [r7, #22]
 8002520:	f043 0303 	orr.w	r3, r3, #3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	210c      	movs	r1, #12
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f7ff fbe3 	bl	8001cf6 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8002530:	2204      	movs	r2, #4
 8002532:	2126      	movs	r1, #38	@ 0x26
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f7ff fbde 	bl	8001cf6 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 800253a:	2111      	movs	r1, #17
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7ff fd57 	bl	8001ff0 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f7ff fd30 	bl	8001fa8 <lora_mode_standby>

  return LORA_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	0000      	movs	r0, r0
 8002554:	0000      	movs	r0, r0
	...

08002558 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	b0ff      	sub	sp, #508	@ 0x1fc
 800255c:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE BEGIN 1 */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 800255e:	4b8a      	ldr	r3, [pc, #552]	@ (8002788 <main+0x230>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	4a89      	ldr	r2, [pc, #548]	@ (8002788 <main+0x230>)
 8002564:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002568:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;                                 // Clear counter
 800256a:	4b88      	ldr	r3, [pc, #544]	@ (800278c <main+0x234>)
 800256c:	2200      	movs	r2, #0
 800256e:	605a      	str	r2, [r3, #4]
  DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;              // Enable counter
 8002570:	4b86      	ldr	r3, [pc, #536]	@ (800278c <main+0x234>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8002576:	f004 fb4c 	bl	8006c12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800257a:	f000 fba5 	bl	8002cc8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800257e:	f000 fc05 	bl	8002d8c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002582:	f001 facf 	bl	8003b24 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002586:	f000 fc35 	bl	8002df4 <MX_ADC1_Init>
  MX_COMP1_Init();
 800258a:	f000 fc97 	bl	8002ebc <MX_COMP1_Init>
  MX_COMP2_Init();
 800258e:	f000 fcc3 	bl	8002f18 <MX_COMP2_Init>
  MX_I2C1_Init();
 8002592:	f000 fced 	bl	8002f70 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002596:	f000 fd2b 	bl	8002ff0 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800259a:	f000 fd69 	bl	8003070 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 800259e:	f000 fdb3 	bl	8003108 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025a2:	f000 fdfd 	bl	80031a0 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 80025a6:	f000 fe47 	bl	8003238 <MX_SAI1_Init>
  MX_SAI2_Init();
 80025aa:	f000 fedd 	bl	8003368 <MX_SAI2_Init>
  MX_SPI3_Init();
 80025ae:	f000 ff81 	bl	80034b4 <MX_SPI3_Init>
  MX_TIM1_Init();
 80025b2:	f000 ffbd 	bl	8003530 <MX_TIM1_Init>
  MX_TIM2_Init();
 80025b6:	f001 f873 	bl	80036a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80025ba:	f001 f8d5 	bl	8003768 <MX_TIM3_Init>
  MX_TIM4_Init();
 80025be:	f001 f955 	bl	800386c <MX_TIM4_Init>
  MX_TIM15_Init();
 80025c2:	f001 f9ad 	bl	8003920 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 80025c6:	f001 faa5 	bl	8003b14 <MX_USB_OTG_FS_USB_Init>
  MX_TIM17_Init();
 80025ca:	f001 fa2d 	bl	8003a28 <MX_TIM17_Init>
  MX_SPI2_Init();
 80025ce:	f000 ff33 	bl	8003438 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80025d2:	2108      	movs	r1, #8
 80025d4:	486e      	ldr	r0, [pc, #440]	@ (8002790 <main+0x238>)
 80025d6:	f00b fc0b 	bl	800ddf0 <HAL_TIM_PWM_Start>

  // Initialize LoRa
  uint8_t res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0,
 80025da:	a369      	add	r3, pc, #420	@ (adr r3, 8002780 <main+0x228>)
 80025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e0:	e9cd 2300 	strd	r2, r3, [sp]
 80025e4:	2301      	movs	r3, #1
 80025e6:	4a6b      	ldr	r2, [pc, #428]	@ (8002794 <main+0x23c>)
 80025e8:	496b      	ldr	r1, [pc, #428]	@ (8002798 <main+0x240>)
 80025ea:	486c      	ldr	r0, [pc, #432]	@ (800279c <main+0x244>)
 80025ec:	f7ff ff51 	bl	8002492 <lora_init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f887 3193 	strb.w	r3, [r7, #403]	@ 0x193
                          LORA_BASE_FREQUENCY_US + FREQ_OFFSET);

  // If LoRa init fails, just keep trying until it works
  while (res != LORA_OK) {
 80025f6:	e010      	b.n	800261a <main+0xc2>
    // Initialization failed
    HAL_Delay(100);
 80025f8:	2064      	movs	r0, #100	@ 0x64
 80025fa:	f004 fb7f 	bl	8006cfc <HAL_Delay>
    res = lora_init(&lora, &hspi2, GPIOD, GPIO_PIN_0,
 80025fe:	a360      	add	r3, pc, #384	@ (adr r3, 8002780 <main+0x228>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	e9cd 2300 	strd	r2, r3, [sp]
 8002608:	2301      	movs	r3, #1
 800260a:	4a62      	ldr	r2, [pc, #392]	@ (8002794 <main+0x23c>)
 800260c:	4962      	ldr	r1, [pc, #392]	@ (8002798 <main+0x240>)
 800260e:	4863      	ldr	r0, [pc, #396]	@ (800279c <main+0x244>)
 8002610:	f7ff ff3f 	bl	8002492 <lora_init>
 8002614:	4603      	mov	r3, r0
 8002616:	f887 3193 	strb.w	r3, [r7, #403]	@ 0x193
  while (res != LORA_OK) {
 800261a:	f897 3193 	ldrb.w	r3, [r7, #403]	@ 0x193
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1ea      	bne.n	80025f8 <main+0xa0>
                    LORA_BASE_FREQUENCY_US + FREQ_OFFSET);
  }
  // Initializing the display takes a minute,
  // because it writes black to every pixal on the screen
  LCD_init();
 8002622:	f7ff fac7 	bl	8001bb4 <LCD_init>
  // Write to LoRa register to pull DIO_0 line high when
  // a packet is recieved
  lora_enable_interrupt_rx_done(&lora);
 8002626:	485d      	ldr	r0, [pc, #372]	@ (800279c <main+0x244>)
 8002628:	f7ff ff19 	bl	800245e <lora_enable_interrupt_rx_done>
  // Write to LoRa register to recieve packets
  lora_mode_receive_continuous(&lora);
 800262c:	485b      	ldr	r0, [pc, #364]	@ (800279c <main+0x244>)
 800262e:	f7ff fca3 	bl	8001f78 <lora_mode_receive_continuous>
  JOYSTICK_INIT(hi2c1);
 8002632:	4c5b      	ldr	r4, [pc, #364]	@ (80027a0 <main+0x248>)
 8002634:	4668      	mov	r0, sp
 8002636:	f104 0310 	add.w	r3, r4, #16
 800263a:	2244      	movs	r2, #68	@ 0x44
 800263c:	4619      	mov	r1, r3
 800263e:	f00e fc46 	bl	8010ece <memcpy>
 8002642:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002646:	f7fe fcdf 	bl	8001008 <JOYSTICK_INIT>
  // Temp/Humid
  TempHum_t data;
  initTempHumSensor(&hi2c2);
 800264a:	4856      	ldr	r0, [pc, #344]	@ (80027a4 <main+0x24c>)
 800264c:	f7fe fc3c 	bl	8000ec8 <initTempHumSensor>
  // current_viewport:
  // determines what screen state you are on
  // 0 = runner view
  // 1 = player 1 view
  // 2 = weight and age input view
  uint8_t current_viewport = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af

  // Update display when true
  DISPLAY_TIMER_TRIGGERED = 0;
 8002656:	4b54      	ldr	r3, [pc, #336]	@ (80027a8 <main+0x250>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
  // Start timer for updating display
  HAL_TIM_Base_Start_IT(&htim17);
 800265c:	4853      	ldr	r0, [pc, #332]	@ (80027ac <main+0x254>)
 800265e:	f00b fa9f 	bl	800dba0 <HAL_TIM_Base_Start_IT>

  // Set this pin ('D' on keypad) low for interrupt
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8002662:	2200      	movs	r2, #0
 8002664:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002668:	4851      	ldr	r0, [pc, #324]	@ (80027b0 <main+0x258>)
 800266a:	f005 ff5b 	bl	8008524 <HAL_GPIO_WritePin>

  // Zero struct data
  struct arm_to_base armband_data = {0, 0, 0, 0};
 800266e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	60da      	str	r2, [r3, #12]
  struct arm_to_base TEMPCOPY = {0, 0, 0, 0};
 800267c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
  struct base_to_arm buzzer = {0};
 800268a:	2300      	movs	r3, #0
 800268c:	f887 3164 	strb.w	r3, [r7, #356]	@ 0x164

  // Fill dimensions for clearing display
  uint16_t player_data_fill_height = 170;
 8002690:	23aa      	movs	r3, #170	@ 0xaa
 8002692:	f8a7 31a0 	strh.w	r3, [r7, #416]	@ 0x1a0
  uint16_t player_data_fill_bottom = 50;
 8002696:	2332      	movs	r3, #50	@ 0x32
 8002698:	f8a7 319e 	strh.w	r3, [r7, #414]	@ 0x19e
  char buffer[128];

  int heartrate;
  int stepcount;

  uint8_t buzzing = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	f887 31ae 	strb.w	r3, [r7, #430]	@ 0x1ae
  uint8_t wait = 1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 31ad 	strb.w	r3, [r7, #429]	@ 0x1ad
  float distance = 0;
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
  // Only buzz once when someone passes the threshold
  // Will reset when user drops back below the threshold
  uint8_t buzz_triggered = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7

    // STATE MACHINE HERE
    // STATES SO FAR: INPUT WEIGHT, DISPLAY RUNNER DATA
    // Joystick allows user to switch between states

    uint8_t lr = threshold();
 80026b6:	f7fe fd2d 	bl	8001114 <threshold>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f887 319d 	strb.w	r3, [r7, #413]	@ 0x19d
    if (lr == 2) {
 80026c0:	f897 319d 	ldrb.w	r3, [r7, #413]	@ 0x19d
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d11f      	bne.n	8002708 <main+0x1b0>
      current_viewport = (current_viewport == 2) ? 2 : 1;
 80026c8:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d101      	bne.n	80026d4 <main+0x17c>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e000      	b.n	80026d6 <main+0x17e>
 80026d4:	2301      	movs	r3, #1
 80026d6:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
      // Clear dirty parts of the screen
      LCD_Fill(0, 5, 240, player_data_fill_height, C_BLACK);
 80026da:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	@ 0x1a0
 80026de:	2200      	movs	r2, #0
 80026e0:	9200      	str	r2, [sp, #0]
 80026e2:	22f0      	movs	r2, #240	@ 0xf0
 80026e4:	2105      	movs	r1, #5
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7ff f944 	bl	8001974 <LCD_Fill>
      LCD_Fill(0, player_data_fill_bottom, 240, 320, C_BLACK);
 80026ec:	f8b7 119e 	ldrh.w	r1, [r7, #414]	@ 0x19e
 80026f0:	2300      	movs	r3, #0
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80026f8:	22f0      	movs	r2, #240	@ 0xf0
 80026fa:	2000      	movs	r0, #0
 80026fc:	f7ff f93a 	bl	8001974 <LCD_Fill>
      // allows for instant transition
      DISPLAY_TIMER_TRIGGERED = 1;
 8002700:	4b29      	ldr	r3, [pc, #164]	@ (80027a8 <main+0x250>)
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	e022      	b.n	800274e <main+0x1f6>
    }
    // Toggle current_viewport when joystick left
    else if (lr == 1) {
 8002708:	f897 319d 	ldrb.w	r3, [r7, #413]	@ 0x19d
 800270c:	2b01      	cmp	r3, #1
 800270e:	d11e      	bne.n	800274e <main+0x1f6>
      current_viewport = (current_viewport == 2) ? 2 : 0;
 8002710:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 8002714:	2b02      	cmp	r3, #2
 8002716:	d101      	bne.n	800271c <main+0x1c4>
 8002718:	2302      	movs	r3, #2
 800271a:	e000      	b.n	800271e <main+0x1c6>
 800271c:	2300      	movs	r3, #0
 800271e:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
      // Clear dirty parts of the screen
      LCD_Fill(0, 5, 240, player_data_fill_height, C_BLACK);
 8002722:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	@ 0x1a0
 8002726:	2200      	movs	r2, #0
 8002728:	9200      	str	r2, [sp, #0]
 800272a:	22f0      	movs	r2, #240	@ 0xf0
 800272c:	2105      	movs	r1, #5
 800272e:	2000      	movs	r0, #0
 8002730:	f7ff f920 	bl	8001974 <LCD_Fill>
      LCD_Fill(0, player_data_fill_bottom, 240, 320, C_BLACK);
 8002734:	f8b7 119e 	ldrh.w	r1, [r7, #414]	@ 0x19e
 8002738:	2300      	movs	r3, #0
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002740:	22f0      	movs	r2, #240	@ 0xf0
 8002742:	2000      	movs	r0, #0
 8002744:	f7ff f916 	bl	8001974 <LCD_Fill>
      // allows for instant transition
      DISPLAY_TIMER_TRIGGERED = 1;
 8002748:	4b17      	ldr	r3, [pc, #92]	@ (80027a8 <main+0x250>)
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
    }

    // Turn buzzing off if it meets the proper conditions
    if (DISPLAY_TIMER_TRIGGERED == 1 && buzzing) {
 800274e:	4b16      	ldr	r3, [pc, #88]	@ (80027a8 <main+0x250>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d133      	bne.n	80027be <main+0x266>
 8002756:	f897 31ae 	ldrb.w	r3, [r7, #430]	@ 0x1ae
 800275a:	2b00      	cmp	r3, #0
 800275c:	d02f      	beq.n	80027be <main+0x266>
      if (wait == 0) {
 800275e:	f897 31ad 	ldrb.w	r3, [r7, #429]	@ 0x1ad
 8002762:	2b00      	cmp	r3, #0
 8002764:	d128      	bne.n	80027b8 <main+0x260>
        TIM3->CCR3 = 0;
 8002766:	4b13      	ldr	r3, [pc, #76]	@ (80027b4 <main+0x25c>)
 8002768:	2200      	movs	r2, #0
 800276a:	63da      	str	r2, [r3, #60]	@ 0x3c
        buzzing = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	f887 31ae 	strb.w	r3, [r7, #430]	@ 0x1ae
        wait = 1;
 8002772:	2301      	movs	r3, #1
 8002774:	f887 31ad 	strb.w	r3, [r7, #429]	@ 0x1ad
 8002778:	e021      	b.n	80027be <main+0x266>
 800277a:	bf00      	nop
 800277c:	f3af 8000 	nop.w
 8002780:	36e55840 	.word	0x36e55840
 8002784:	00000000 	.word	0x00000000
 8002788:	e000edf0 	.word	0xe000edf0
 800278c:	e0001000 	.word	0xe0001000
 8002790:	20000944 	.word	0x20000944
 8002794:	48000c00 	.word	0x48000c00
 8002798:	200007e4 	.word	0x200007e4
 800279c:	20000a74 	.word	0x20000a74
 80027a0:	200003c4 	.word	0x200003c4
 80027a4:	20000418 	.word	0x20000418
 80027a8:	20000a8c 	.word	0x20000a8c
 80027ac:	20000a28 	.word	0x20000a28
 80027b0:	48001400 	.word	0x48001400
 80027b4:	40000400 	.word	0x40000400
      } else {
        wait = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	f887 31ad 	strb.w	r3, [r7, #429]	@ 0x1ad
      }
    }

    if (LoRaRecieve == 1) {
 80027be:	4b9f      	ldr	r3, [pc, #636]	@ (8002a3c <main+0x4e4>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	f040 8093 	bne.w	80028ee <main+0x396>
      // Get data from LoRa
      lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 10000, &res);
 80027c8:	1d39      	adds	r1, r7, #4
 80027ca:	f207 1393 	addw	r3, r7, #403	@ 0x193
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80027d4:	2280      	movs	r2, #128	@ 0x80
 80027d6:	489a      	ldr	r0, [pc, #616]	@ (8002a40 <main+0x4e8>)
 80027d8:	f7ff fe19 	bl	800240e <lora_receive_packet_blocking>
      // memcpy(&armband_data, &buffer, sizeof(armband_data));
      // This is for discarding packets that are not ours
      memcpy(&TEMPCOPY, &buffer, sizeof(TEMPCOPY));
 80027dc:	1d39      	adds	r1, r7, #4
 80027de:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80027e2:	2210      	movs	r2, #16
 80027e4:	4618      	mov	r0, r3
 80027e6:	f00e fb72 	bl	8010ece <memcpy>
      if (TEMPCOPY.heartrate > 1 && TEMPCOPY.heartrate < 300 && TEMPCOPY.distance < 500 && TEMPCOPY.velocity < 100) {
 80027ea:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	dd2e      	ble.n	8002850 <main+0x2f8>
 80027f2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80027f6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80027fa:	da29      	bge.n	8002850 <main+0x2f8>
 80027fc:	edd7 7a5b 	vldr	s15, [r7, #364]	@ 0x16c
 8002800:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 8002a44 <main+0x4ec>
 8002804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280c:	d520      	bpl.n	8002850 <main+0x2f8>
 800280e:	edd7 7a5a 	vldr	s15, [r7, #360]	@ 0x168
 8002812:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8002a48 <main+0x4f0>
 8002816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800281a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281e:	d517      	bpl.n	8002850 <main+0x2f8>
        armband_data = TEMPCOPY;
 8002820:	f507 74bc 	add.w	r4, r7, #376	@ 0x178
 8002824:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002828:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800282a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        distance += armband_data.distance;
 800282e:	edd7 7a5f 	vldr	s15, [r7, #380]	@ 0x17c
 8002832:	ed97 7a6a 	vldr	s14, [r7, #424]	@ 0x1a8
 8002836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283a:	edc7 7a6a 	vstr	s15, [r7, #424]	@ 0x1a8
        // Update values for Stamina calculations
        input_data(armband_data.heartrate, armband_data.velocity);
 800283e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002842:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 8002846:	eeb0 0a67 	vmov.f32	s0, s15
 800284a:	4618      	mov	r0, r3
 800284c:	f002 f968 	bl	8004b20 <input_data>

      //		  	  if (res != LORA_OK) {
      //		  		  // Receive failed
      //		  	  }

      if (heartRateHigh(armband_data.heartrate, age) ||
 8002850:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002854:	4a7d      	ldr	r2, [pc, #500]	@ (8002a4c <main+0x4f4>)
 8002856:	7812      	ldrb	r2, [r2, #0]
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f002 f908 	bl	8004a70 <heartRateHigh>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10a      	bne.n	800287c <main+0x324>
          heartRateLow(armband_data.heartrate, age)) {
 8002866:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800286a:	4a78      	ldr	r2, [pc, #480]	@ (8002a4c <main+0x4f4>)
 800286c:	7812      	ldrb	r2, [r2, #0]
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f002 f929 	bl	8004ac8 <heartRateLow>
 8002876:	4603      	mov	r3, r0
      if (heartRateHigh(armband_data.heartrate, age) ||
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <main+0x332>
        lora_send_packet(&lora, &buzzer, 1);
 800287c:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8002880:	2201      	movs	r2, #1
 8002882:	4619      	mov	r1, r3
 8002884:	486e      	ldr	r0, [pc, #440]	@ (8002a40 <main+0x4e8>)
 8002886:	f7ff fd0e 	bl	80022a6 <lora_send_packet>
        // res = lora_send_packet(&lora, &buzzer, 1);
      }

      // Conditions to set buzz at base station
      if (get_strain_factor() < 50 && get_strain_factor() > 0) {
 800288a:	f002 fa1b 	bl	8004cc4 <get_strain_factor>
 800288e:	eef0 7a40 	vmov.f32	s15, s0
 8002892:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8002a50 <main+0x4f8>
 8002896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289e:	d517      	bpl.n	80028d0 <main+0x378>
 80028a0:	f002 fa10 	bl	8004cc4 <get_strain_factor>
 80028a4:	eef0 7a40 	vmov.f32	s15, s0
 80028a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b0:	dd0e      	ble.n	80028d0 <main+0x378>
        if (!buzz_triggered) {
 80028b2:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10d      	bne.n	80028d6 <main+0x37e>
          TIM3->CCR3 = 15000;
 80028ba:	4b66      	ldr	r3, [pc, #408]	@ (8002a54 <main+0x4fc>)
 80028bc:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80028c0:	63da      	str	r2, [r3, #60]	@ 0x3c
          buzzing = 1;
 80028c2:	2301      	movs	r3, #1
 80028c4:	f887 31ae 	strb.w	r3, [r7, #430]	@ 0x1ae
          buzz_triggered = 1;
 80028c8:	2301      	movs	r3, #1
 80028ca:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
        if (!buzz_triggered) {
 80028ce:	e002      	b.n	80028d6 <main+0x37e>
        }
      } else {
        buzz_triggered = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
      }

      // Writing register on LoRa to enter receiving mode again
      // May not be necessary
      lora_mode_receive_continuous(&lora);
 80028d6:	485a      	ldr	r0, [pc, #360]	@ (8002a40 <main+0x4e8>)
 80028d8:	f7ff fb4e 	bl	8001f78 <lora_mode_receive_continuous>

      // Checking if there is a packet waiting to be read. This should never
      // trigger, but if it does, even by just noise, we should be set
      if (!lora_is_packet_available(&lora)) LoRaRecieve = 0;
 80028dc:	4858      	ldr	r0, [pc, #352]	@ (8002a40 <main+0x4e8>)
 80028de:	f7ff fcf4 	bl	80022ca <lora_is_packet_available>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d102      	bne.n	80028ee <main+0x396>
 80028e8:	4b54      	ldr	r3, [pc, #336]	@ (8002a3c <main+0x4e4>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
    }

    // HOME SCREEN / RUNNER VIEW
    // Updates every 5 seconds
    if (current_viewport == 0 && DISPLAY_TIMER_TRIGGERED == 1) {
 80028ee:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f040 80cd 	bne.w	8002a92 <main+0x53a>
 80028f8:	4b57      	ldr	r3, [pc, #348]	@ (8002a58 <main+0x500>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	f040 80c8 	bne.w	8002a92 <main+0x53a>
      UG_FontSetTransparency(1);
 8002902:	2001      	movs	r0, #1
 8002904:	f002 fea6 	bl	8005654 <UG_FontSetTransparency>
      data = get_temp_hum();
 8002908:	f7fe fb32 	bl	8000f70 <get_temp_hum>
 800290c:	eeb0 7a40 	vmov.f32	s14, s0
 8002910:	eef0 7a60 	vmov.f32	s15, s1
 8002914:	ed87 7a62 	vstr	s14, [r7, #392]	@ 0x188
 8002918:	edc7 7a63 	vstr	s15, [r7, #396]	@ 0x18c
      // Clear current temp/humid data
      LCD_Fill(80, 5, 240, 120, C_BLACK);
 800291c:	2300      	movs	r3, #0
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	2378      	movs	r3, #120	@ 0x78
 8002922:	22f0      	movs	r2, #240	@ 0xf0
 8002924:	2105      	movs	r1, #5
 8002926:	2050      	movs	r0, #80	@ 0x50
 8002928:	f7ff f824 	bl	8001974 <LCD_Fill>
      // Print temp/humid data
      snprintf(temp_humid_write_buffer, sizeof(temp_humid_write_buffer),
               "Temp: %.3f\nHumid: %.3f", data.temp, data.hum);
 800292c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
      snprintf(temp_humid_write_buffer, sizeof(temp_humid_write_buffer),
 8002930:	4618      	mov	r0, r3
 8002932:	f7fd fe21 	bl	8000578 <__aeabi_f2d>
 8002936:	4604      	mov	r4, r0
 8002938:	460d      	mov	r5, r1
               "Temp: %.3f\nHumid: %.3f", data.temp, data.hum);
 800293a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
      snprintf(temp_humid_write_buffer, sizeof(temp_humid_write_buffer),
 800293e:	4618      	mov	r0, r3
 8002940:	f7fd fe1a 	bl	8000578 <__aeabi_f2d>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 800294c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002950:	e9cd 4500 	strd	r4, r5, [sp]
 8002954:	4a41      	ldr	r2, [pc, #260]	@ (8002a5c <main+0x504>)
 8002956:	2140      	movs	r1, #64	@ 0x40
 8002958:	f00e f9b2 	bl	8010cc0 <sniprintf>
      LCD_PutStr(5, 5, temp_humid_write_buffer, DEFAULT_FONT, C_WHITE, C_BLACK);
 800295c:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8002960:	2300      	movs	r3, #0
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a60 <main+0x508>)
 800296c:	2105      	movs	r1, #5
 800296e:	2005      	movs	r0, #5
 8002970:	f7ff f8e3 	bl	8001b3a <LCD_PutStr>

      // Stamina stuff below
      // Erase previous stamina label and data
      LCD_PutStr(5, 260, stamina_write_buffer, DEFAULT_FONT, C_BLACK, C_BLACK);
 8002974:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8002978:	2300      	movs	r3, #0
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	2300      	movs	r3, #0
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	4b37      	ldr	r3, [pc, #220]	@ (8002a60 <main+0x508>)
 8002982:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002986:	2005      	movs	r0, #5
 8002988:	f7ff f8d7 	bl	8001b3a <LCD_PutStr>
      LCD_PutStr(150, 288, stamina_data_write_buffer, DEFAULT_FONT, C_BLACK,
 800298c:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8002990:	2300      	movs	r3, #0
 8002992:	9301      	str	r3, [sp, #4]
 8002994:	2300      	movs	r3, #0
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	4b31      	ldr	r3, [pc, #196]	@ (8002a60 <main+0x508>)
 800299a:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800299e:	2096      	movs	r0, #150	@ 0x96
 80029a0:	f7ff f8cb 	bl	8001b3a <LCD_PutStr>
                 C_BLACK);
      // Add label to buffer
      snprintf(stamina_write_buffer, sizeof(stamina_write_buffer),
 80029a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80029a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002a64 <main+0x50c>)
 80029aa:	2110      	movs	r1, #16
 80029ac:	4618      	mov	r0, r3
 80029ae:	f00e f987 	bl	8010cc0 <sniprintf>
               "\nR1 Stamina: ");

      float stamina = get_strain_factor();
 80029b2:	f002 f987 	bl	8004cc4 <get_strain_factor>
 80029b6:	ed87 0a66 	vstr	s0, [r7, #408]	@ 0x198
      // Add value to a second buffer
      snprintf(stamina_data_write_buffer, sizeof(stamina_data_write_buffer),
 80029ba:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 80029be:	f7fd fddb 	bl	8000578 <__aeabi_f2d>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 80029ca:	e9cd 2300 	strd	r2, r3, [sp]
 80029ce:	4a26      	ldr	r2, [pc, #152]	@ (8002a68 <main+0x510>)
 80029d0:	2110      	movs	r1, #16
 80029d2:	f00e f975 	bl	8010cc0 <sniprintf>
               "%.3f", stamina);
      // Write field buffer
      LCD_PutStr(5, 260, stamina_write_buffer, DEFAULT_FONT, C_WHITE, C_BLACK);
 80029d6:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 80029da:	2300      	movs	r3, #0
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a60 <main+0x508>)
 80029e6:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80029ea:	2005      	movs	r0, #5
 80029ec:	f7ff f8a5 	bl	8001b3a <LCD_PutStr>
      // Determine color of stamina based on stamina value
      uint16_t stamina_color;
      if (stamina == -1 || stamina < 50) {
 80029f0:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 80029f4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80029f8:	eef4 7a47 	vcmp.f32	s15, s14
 80029fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a00:	d008      	beq.n	8002a14 <main+0x4bc>
 8002a02:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8002a06:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002a50 <main+0x4f8>
 8002a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a12:	d504      	bpl.n	8002a1e <main+0x4c6>
        stamina_color = 0b0000011111100000;  // RED
 8002a14:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002a18:	f8a7 31a4 	strh.w	r3, [r7, #420]	@ 0x1a4
 8002a1c:	e029      	b.n	8002a72 <main+0x51a>
      } else if (stamina > 100) {
 8002a1e:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8002a22:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002a48 <main+0x4f0>
 8002a26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2e:	dd1d      	ble.n	8002a6c <main+0x514>
        stamina_color = 0b0000011111111111;  // YELLOW
 8002a30:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002a34:	f8a7 31a4 	strh.w	r3, [r7, #420]	@ 0x1a4
 8002a38:	e01b      	b.n	8002a72 <main+0x51a>
 8002a3a:	bf00      	nop
 8002a3c:	20000a8e 	.word	0x20000a8e
 8002a40:	20000a74 	.word	0x20000a74
 8002a44:	43fa0000 	.word	0x43fa0000
 8002a48:	42c80000 	.word	0x42c80000
 8002a4c:	2000028d 	.word	0x2000028d
 8002a50:	42480000 	.word	0x42480000
 8002a54:	40000400 	.word	0x40000400
 8002a58:	20000a8c 	.word	0x20000a8c
 8002a5c:	08012e0c 	.word	0x08012e0c
 8002a60:	08012e94 	.word	0x08012e94
 8002a64:	08012e24 	.word	0x08012e24
 8002a68:	08012e34 	.word	0x08012e34
      } else {
        stamina_color = 0b0000000000011111;  // GREEN
 8002a6c:	231f      	movs	r3, #31
 8002a6e:	f8a7 31a4 	strh.w	r3, [r7, #420]	@ 0x1a4
      }
      // Write value buffer
      LCD_PutStr(150, 288, stamina_data_write_buffer, DEFAULT_FONT,
 8002a72:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8002a76:	2300      	movs	r3, #0
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	@ 0x1a4
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	4b86      	ldr	r3, [pc, #536]	@ (8002c9c <main+0x744>)
 8002a82:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002a86:	2096      	movs	r0, #150	@ 0x96
 8002a88:	f7ff f857 	bl	8001b3a <LCD_PutStr>
                 stamina_color, C_BLACK);

      // Reset display refresh
      DISPLAY_TIMER_TRIGGERED = 0;
 8002a8c:	4b84      	ldr	r3, [pc, #528]	@ (8002ca0 <main+0x748>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
    }
    // Enter age/weight input
    if (current_viewport != 2 && KeyPadSelect) {
 8002a92:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d006      	beq.n	8002aa8 <main+0x550>
 8002a9a:	4b82      	ldr	r3, [pc, #520]	@ (8002ca4 <main+0x74c>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <main+0x550>
      current_viewport = 2;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
    }

    // Runner stats screen
    if (current_viewport == 1 && DISPLAY_TIMER_TRIGGERED == 1) {
 8002aa8:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	f040 80b2 	bne.w	8002c16 <main+0x6be>
 8002ab2:	4b7b      	ldr	r3, [pc, #492]	@ (8002ca0 <main+0x748>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	f040 80ad 	bne.w	8002c16 <main+0x6be>
      UG_FontSetTransparency(1);
 8002abc:	2001      	movs	r0, #1
 8002abe:	f002 fdc9 	bl	8005654 <UG_FontSetTransparency>
      // Overwrite the previous data in black text to erase
      LCD_PutStr(5, 5, player_write_buffer, DEFAULT_FONT, C_BLACK, C_BLACK);
 8002ac2:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	9301      	str	r3, [sp, #4]
 8002aca:	2300      	movs	r3, #0
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	4b73      	ldr	r3, [pc, #460]	@ (8002c9c <main+0x744>)
 8002ad0:	2105      	movs	r1, #5
 8002ad2:	2005      	movs	r0, #5
 8002ad4:	f7ff f831 	bl	8001b3a <LCD_PutStr>
      LCD_PutStr(5, 260, stamina_write_buffer, DEFAULT_FONT, C_BLACK, C_BLACK);
 8002ad8:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8002adc:	2300      	movs	r3, #0
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	4b6d      	ldr	r3, [pc, #436]	@ (8002c9c <main+0x744>)
 8002ae6:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002aea:	2005      	movs	r0, #5
 8002aec:	f7ff f825 	bl	8001b3a <LCD_PutStr>
      LCD_PutStr(120, 288, stamina_data_write_buffer, DEFAULT_FONT, C_BLACK,
 8002af0:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8002af4:	2300      	movs	r3, #0
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	2300      	movs	r3, #0
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	4b67      	ldr	r3, [pc, #412]	@ (8002c9c <main+0x744>)
 8002afe:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002b02:	2078      	movs	r0, #120	@ 0x78
 8002b04:	f7ff f819 	bl	8001b3a <LCD_PutStr>

      // Read in new runner data
      snprintf(player_write_buffer, sizeof(player_write_buffer),
               "R1 Statistics\n \nVelocity: %.3f\nHeart Rate: %d\nDistance: "
               "%.3f\nStep Count: %d",
               armband_data.velocity, armband_data.heartrate, distance, armband_data.steps);
 8002b08:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
      snprintf(player_write_buffer, sizeof(player_write_buffer),
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fd fd33 	bl	8000578 <__aeabi_f2d>
 8002b12:	4604      	mov	r4, r0
 8002b14:	460d      	mov	r5, r1
 8002b16:	f8d7 6180 	ldr.w	r6, [r7, #384]	@ 0x180
 8002b1a:	f8d7 01a8 	ldr.w	r0, [r7, #424]	@ 0x1a8
 8002b1e:	f7fd fd2b 	bl	8000578 <__aeabi_f2d>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 8002b2a:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8002b2e:	9106      	str	r1, [sp, #24]
 8002b30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002b34:	9602      	str	r6, [sp, #8]
 8002b36:	e9cd 4500 	strd	r4, r5, [sp]
 8002b3a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ca8 <main+0x750>)
 8002b3c:	2180      	movs	r1, #128	@ 0x80
 8002b3e:	f00e f8bf 	bl	8010cc0 <sniprintf>
      // Write runner data to display
      LCD_PutStr(5, 5, player_write_buffer, DEFAULT_FONT, C_WHITE, C_BLACK);
 8002b42:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 8002b46:	2300      	movs	r3, #0
 8002b48:	9301      	str	r3, [sp, #4]
 8002b4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	4b52      	ldr	r3, [pc, #328]	@ (8002c9c <main+0x744>)
 8002b52:	2105      	movs	r1, #5
 8002b54:	2005      	movs	r0, #5
 8002b56:	f7fe fff0 	bl	8001b3a <LCD_PutStr>
      // Read in runner stamina label
      snprintf(stamina_write_buffer, sizeof(stamina_write_buffer),
 8002b5a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b5e:	4a53      	ldr	r2, [pc, #332]	@ (8002cac <main+0x754>)
 8002b60:	2110      	movs	r1, #16
 8002b62:	4618      	mov	r0, r3
 8002b64:	f00e f8ac 	bl	8010cc0 <sniprintf>
               "\nStamina: ");
      // Display runner stamina label
      LCD_PutStr(5, 260, stamina_write_buffer, DEFAULT_FONT, C_WHITE, C_BLACK);
 8002b68:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	4b49      	ldr	r3, [pc, #292]	@ (8002c9c <main+0x744>)
 8002b78:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002b7c:	2005      	movs	r0, #5
 8002b7e:	f7fe ffdc 	bl	8001b3a <LCD_PutStr>
      // Get stamina data and write to display
      float stamina = get_strain_factor();
 8002b82:	f002 f89f 	bl	8004cc4 <get_strain_factor>
 8002b86:	ed87 0a65 	vstr	s0, [r7, #404]	@ 0x194
      snprintf(stamina_data_write_buffer, sizeof(stamina_data_write_buffer),
 8002b8a:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 8002b8e:	f7fd fcf3 	bl	8000578 <__aeabi_f2d>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8002b9a:	e9cd 2300 	strd	r2, r3, [sp]
 8002b9e:	4a44      	ldr	r2, [pc, #272]	@ (8002cb0 <main+0x758>)
 8002ba0:	2110      	movs	r1, #16
 8002ba2:	f00e f88d 	bl	8010cc0 <sniprintf>
               "%.3f", stamina);
      uint16_t stamina_color;
      if (stamina == -1 || stamina < 50) {
 8002ba6:	edd7 7a65 	vldr	s15, [r7, #404]	@ 0x194
 8002baa:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002bae:	eef4 7a47 	vcmp.f32	s15, s14
 8002bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb6:	d008      	beq.n	8002bca <main+0x672>
 8002bb8:	edd7 7a65 	vldr	s15, [r7, #404]	@ 0x194
 8002bbc:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002cb4 <main+0x75c>
 8002bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc8:	d504      	bpl.n	8002bd4 <main+0x67c>
        stamina_color = 0b0000011111100000;  // RED
 8002bca:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002bce:	f8a7 31a2 	strh.w	r3, [r7, #418]	@ 0x1a2
 8002bd2:	e010      	b.n	8002bf6 <main+0x69e>
      } else if (stamina > 100) {
 8002bd4:	edd7 7a65 	vldr	s15, [r7, #404]	@ 0x194
 8002bd8:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002cb8 <main+0x760>
 8002bdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be4:	dd04      	ble.n	8002bf0 <main+0x698>
        stamina_color = 0b0000011111111111;  // YELLOW
 8002be6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002bea:	f8a7 31a2 	strh.w	r3, [r7, #418]	@ 0x1a2
 8002bee:	e002      	b.n	8002bf6 <main+0x69e>
      } else {
        stamina_color = 0b0000000000011111;  // GREEN
 8002bf0:	231f      	movs	r3, #31
 8002bf2:	f8a7 31a2 	strh.w	r3, [r7, #418]	@ 0x1a2
      }
      // Write stamina data
      LCD_PutStr(120, 288, stamina_data_write_buffer, DEFAULT_FONT,
 8002bf6:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	@ 0x1a2
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	4b25      	ldr	r3, [pc, #148]	@ (8002c9c <main+0x744>)
 8002c06:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002c0a:	2078      	movs	r0, #120	@ 0x78
 8002c0c:	f7fe ff95 	bl	8001b3a <LCD_PutStr>
                 stamina_color, C_BLACK);
      DISPLAY_TIMER_TRIGGERED = 0;
 8002c10:	4b23      	ldr	r3, [pc, #140]	@ (8002ca0 <main+0x748>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
    }

    // WEIGHT AND AGE INPUT
    if (current_viewport == 2) {
 8002c16:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	f47f ad4b 	bne.w	80026b6 <main+0x15e>
      LCD_Fill(5, 5, 240, player_data_fill_height, C_BLACK);
 8002c20:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	@ 0x1a0
 8002c24:	2200      	movs	r2, #0
 8002c26:	9200      	str	r2, [sp, #0]
 8002c28:	22f0      	movs	r2, #240	@ 0xf0
 8002c2a:	2105      	movs	r1, #5
 8002c2c:	2005      	movs	r0, #5
 8002c2e:	f7fe fea1 	bl	8001974 <LCD_Fill>
      LCD_Fill(5, player_data_fill_bottom, 240, 320, C_BLACK);
 8002c32:	f8b7 119e 	ldrh.w	r1, [r7, #414]	@ 0x19e
 8002c36:	2300      	movs	r3, #0
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002c3e:	22f0      	movs	r2, #240	@ 0xf0
 8002c40:	2005      	movs	r0, #5
 8002c42:	f7fe fe97 	bl	8001974 <LCD_Fill>
      // Account for debounce
      while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 8002c46:	bf00      	nop
 8002c48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002c4c:	481b      	ldr	r0, [pc, #108]	@ (8002cbc <main+0x764>)
 8002c4e:	f005 fc51 	bl	80084f4 <HAL_GPIO_ReadPin>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f7      	beq.n	8002c48 <main+0x6f0>
      }
      keypad_init();
 8002c58:	f7fe fac6 	bl	80011e8 <keypad_init>
      // Entire data input process
      running();
 8002c5c:	f7fe fbc0 	bl	80013e0 <running>
      // Send age for stamina
      init_analytics(age);
 8002c60:	4b17      	ldr	r3, [pc, #92]	@ (8002cc0 <main+0x768>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f001 fedb 	bl	8004a20 <init_analytics>
      KeyPadSelect = 0;
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <main+0x74c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
      // Go back to runner screen
      current_viewport = 1;
 8002c70:	2301      	movs	r3, #1
 8002c72:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
      LCD_Fill(5, 5, 160, 40, C_BLACK);
 8002c76:	2300      	movs	r3, #0
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	2328      	movs	r3, #40	@ 0x28
 8002c7c:	22a0      	movs	r2, #160	@ 0xa0
 8002c7e:	2105      	movs	r1, #5
 8002c80:	2005      	movs	r0, #5
 8002c82:	f7fe fe77 	bl	8001974 <LCD_Fill>
      DISPLAY_TIMER_TRIGGERED = 1;
 8002c86:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <main+0x748>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
      // Listen to 'D' again
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c92:	480c      	ldr	r0, [pc, #48]	@ (8002cc4 <main+0x76c>)
 8002c94:	f005 fc46 	bl	8008524 <HAL_GPIO_WritePin>
  while (1) {
 8002c98:	e50d      	b.n	80026b6 <main+0x15e>
 8002c9a:	bf00      	nop
 8002c9c:	08012e94 	.word	0x08012e94
 8002ca0:	20000a8c 	.word	0x20000a8c
 8002ca4:	20000a8d 	.word	0x20000a8d
 8002ca8:	08012e3c 	.word	0x08012e3c
 8002cac:	08012e88 	.word	0x08012e88
 8002cb0:	08012e34 	.word	0x08012e34
 8002cb4:	42480000 	.word	0x42480000
 8002cb8:	42c80000 	.word	0x42c80000
 8002cbc:	48000c00 	.word	0x48000c00
 8002cc0:	2000028d 	.word	0x2000028d
 8002cc4:	48001400 	.word	0x48001400

08002cc8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b096      	sub	sp, #88	@ 0x58
 8002ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cce:	f107 0314 	add.w	r3, r7, #20
 8002cd2:	2244      	movs	r2, #68	@ 0x44
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f00e f869 	bl	8010dae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cdc:	463b      	mov	r3, r7
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	60da      	str	r2, [r3, #12]
 8002ce8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8002cea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002cee:	f006 fa57 	bl	80091a0 <HAL_PWREx_ControlVoltageScaling>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <SystemClock_Config+0x34>
    Error_Handler();
 8002cf8:	f001 f88e 	bl	8003e18 <Error_Handler>
  }

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 8002cfc:	f006 fa20 	bl	8009140 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002d00:	4b21      	ldr	r3, [pc, #132]	@ (8002d88 <SystemClock_Config+0xc0>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d06:	4a20      	ldr	r2, [pc, #128]	@ (8002d88 <SystemClock_Config+0xc0>)
 8002d08:	f023 0318 	bic.w	r3, r3, #24
 8002d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType =
 8002d10:	2314      	movs	r3, #20
 8002d12:	617b      	str	r3, [r7, #20]
      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002d14:	2301      	movs	r3, #1
 8002d16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002d20:	2360      	movs	r3, #96	@ 0x60
 8002d22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d24:	2302      	movs	r3, #2
 8002d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002d30:	2310      	movs	r3, #16
 8002d32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d34:	2302      	movs	r3, #2
 8002d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	4618      	mov	r0, r3
 8002d46:	f006 fadf 	bl	8009308 <HAL_RCC_OscConfig>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <SystemClock_Config+0x8c>
    Error_Handler();
 8002d50:	f001 f862 	bl	8003e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8002d54:	230f      	movs	r3, #15
 8002d56:	603b      	str	r3, [r7, #0]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002d68:	463b      	mov	r3, r7
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f006 fee5 	bl	8009b3c <HAL_RCC_ClockConfig>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <SystemClock_Config+0xb4>
    Error_Handler();
 8002d78:	f001 f84e 	bl	8003e18 <Error_Handler>
  }

  /** Enable MSI Auto calibration
   */
  HAL_RCCEx_EnableMSIPLLMode();
 8002d7c:	f008 fbee 	bl	800b55c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002d80:	bf00      	nop
 8002d82:	3758      	adds	r7, #88	@ 0x58
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40021000 	.word	0x40021000

08002d8c <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b0a6      	sub	sp, #152	@ 0x98
 8002d90:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	2294      	movs	r2, #148	@ 0x94
 8002d96:	2100      	movs	r1, #0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f00e f808 	bl	8010dae <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1 | RCC_PERIPHCLK_SAI2 |
 8002d9e:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8002da2:	607b      	str	r3, [r7, #4]
                                       RCC_PERIPHCLK_USB | RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002da4:	2300      	movs	r3, #0
 8002da6:	673b      	str	r3, [r7, #112]	@ 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8002da8:	2300      	movs	r3, #0
 8002daa:	677b      	str	r3, [r7, #116]	@ 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002dac:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002db0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002db4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002db8:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002dc2:	2318      	movs	r3, #24
 8002dc4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut =
 8002dd2:	4b07      	ldr	r3, [pc, #28]	@ (8002df0 <PeriphCommonClock_Config+0x64>)
 8002dd4:	623b      	str	r3, [r7, #32]
      RCC_PLLSAI1_SAI1CLK | RCC_PLLSAI1_48M2CLK | RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f007 f96d 	bl	800a0b8 <HAL_RCCEx_PeriphCLKConfig>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <PeriphCommonClock_Config+0x5c>
    Error_Handler();
 8002de4:	f001 f818 	bl	8003e18 <Error_Handler>
  }
}
 8002de8:	bf00      	nop
 8002dea:	3798      	adds	r7, #152	@ 0x98
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	01110000 	.word	0x01110000

08002df4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002dfa:	463b      	mov	r3, r7
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	611a      	str	r2, [r3, #16]
 8002e08:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 8002e0a:	4b29      	ldr	r3, [pc, #164]	@ (8002eb0 <MX_ADC1_Init+0xbc>)
 8002e0c:	4a29      	ldr	r2, [pc, #164]	@ (8002eb4 <MX_ADC1_Init+0xc0>)
 8002e0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002e10:	4b27      	ldr	r3, [pc, #156]	@ (8002eb0 <MX_ADC1_Init+0xbc>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e16:	4b26      	ldr	r3, [pc, #152]	@ (8002eb0 <MX_ADC1_Init+0xbc>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e1c:	4b24      	ldr	r3, [pc, #144]	@ (8002eb0 <MX_ADC1_Init+0xbc>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e22:	4b23      	ldr	r3, [pc, #140]	@ (8002eb0 <MX_ADC1_Init+0xbc>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e28:	4b21      	ldr	r3, [pc, #132]	@ (8002eb0 <MX_ADC1_Init+0xbc>)
 8002e2a:	2204      	movs	r2, #4
 8002e2c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e2e:	4b20      	ldr	r3, [pc, #128]	@ (8002eb0 <MX_ADC1_Init+0xbc>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002e34:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb0 <MX_ADC1_Init+0xbc>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb0 <MX_ADC1_Init+0xbc>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e40:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb0 <MX_ADC1_Init+0xbc>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e48:	4b19      	ldr	r3, [pc, #100]	@ (8002eb0 <MX_ADC1_Init+0xbc>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e4e:	4b18      	ldr	r3, [pc, #96]	@ (8002eb0 <MX_ADC1_Init+0xbc>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002e54:	4b16      	ldr	r3, [pc, #88]	@ (8002eb0 <MX_ADC1_Init+0xbc>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e5c:	4b14      	ldr	r3, [pc, #80]	@ (8002eb0 <MX_ADC1_Init+0xbc>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002e62:	4b13      	ldr	r3, [pc, #76]	@ (8002eb0 <MX_ADC1_Init+0xbc>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002e6a:	4811      	ldr	r0, [pc, #68]	@ (8002eb0 <MX_ADC1_Init+0xbc>)
 8002e6c:	f004 f90a 	bl	8007084 <HAL_ADC_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_ADC1_Init+0x86>
    Error_Handler();
 8002e76:	f000 ffcf 	bl	8003e18 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_1;
 8002e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb8 <MX_ADC1_Init+0xc4>)
 8002e7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e7e:	2306      	movs	r3, #6
 8002e80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e86:	237f      	movs	r3, #127	@ 0x7f
 8002e88:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002e92:	463b      	mov	r3, r7
 8002e94:	4619      	mov	r1, r3
 8002e96:	4806      	ldr	r0, [pc, #24]	@ (8002eb0 <MX_ADC1_Init+0xbc>)
 8002e98:	f004 fa3a 	bl	8007310 <HAL_ADC_ConfigChannel>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_ADC1_Init+0xb2>
    Error_Handler();
 8002ea2:	f000 ffb9 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000304 	.word	0x20000304
 8002eb4:	50040000 	.word	0x50040000
 8002eb8:	04300002 	.word	0x04300002

08002ebc <MX_COMP1_Init>:
/**
 * @brief COMP1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_COMP1_Init(void) {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8002ec0:	4b12      	ldr	r3, [pc, #72]	@ (8002f0c <MX_COMP1_Init+0x50>)
 8002ec2:	4a13      	ldr	r2, [pc, #76]	@ (8002f10 <MX_COMP1_Init+0x54>)
 8002ec4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8002ec6:	4b11      	ldr	r3, [pc, #68]	@ (8002f0c <MX_COMP1_Init+0x50>)
 8002ec8:	4a12      	ldr	r2, [pc, #72]	@ (8002f14 <MX_COMP1_Init+0x58>)
 8002eca:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8002f0c <MX_COMP1_Init+0x50>)
 8002ece:	2280      	movs	r2, #128	@ 0x80
 8002ed0:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f0c <MX_COMP1_Init+0x50>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f0c <MX_COMP1_Init+0x50>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002ede:	4b0b      	ldr	r3, [pc, #44]	@ (8002f0c <MX_COMP1_Init+0x50>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002ee4:	4b09      	ldr	r3, [pc, #36]	@ (8002f0c <MX_COMP1_Init+0x50>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002eea:	4b08      	ldr	r3, [pc, #32]	@ (8002f0c <MX_COMP1_Init+0x50>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <MX_COMP1_Init+0x50>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 8002ef6:	4805      	ldr	r0, [pc, #20]	@ (8002f0c <MX_COMP1_Init+0x50>)
 8002ef8:	f004 feae 	bl	8007c58 <HAL_COMP_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_COMP1_Init+0x4a>
    Error_Handler();
 8002f02:	f000 ff89 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	2000036c 	.word	0x2000036c
 8002f10:	40010200 	.word	0x40010200
 8002f14:	00800030 	.word	0x00800030

08002f18 <MX_COMP2_Init>:
/**
 * @brief COMP2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_COMP2_Init(void) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8002f1c:	4b12      	ldr	r3, [pc, #72]	@ (8002f68 <MX_COMP2_Init+0x50>)
 8002f1e:	4a13      	ldr	r2, [pc, #76]	@ (8002f6c <MX_COMP2_Init+0x54>)
 8002f20:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8002f22:	4b11      	ldr	r3, [pc, #68]	@ (8002f68 <MX_COMP2_Init+0x50>)
 8002f24:	2270      	movs	r2, #112	@ 0x70
 8002f26:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002f28:	4b0f      	ldr	r3, [pc, #60]	@ (8002f68 <MX_COMP2_Init+0x50>)
 8002f2a:	2280      	movs	r2, #128	@ 0x80
 8002f2c:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f68 <MX_COMP2_Init+0x50>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002f34:	4b0c      	ldr	r3, [pc, #48]	@ (8002f68 <MX_COMP2_Init+0x50>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <MX_COMP2_Init+0x50>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002f40:	4b09      	ldr	r3, [pc, #36]	@ (8002f68 <MX_COMP2_Init+0x50>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002f46:	4b08      	ldr	r3, [pc, #32]	@ (8002f68 <MX_COMP2_Init+0x50>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002f4c:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <MX_COMP2_Init+0x50>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK) {
 8002f52:	4805      	ldr	r0, [pc, #20]	@ (8002f68 <MX_COMP2_Init+0x50>)
 8002f54:	f004 fe80 	bl	8007c58 <HAL_COMP_Init>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_COMP2_Init+0x4a>
    Error_Handler();
 8002f5e:	f000 ff5b 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000398 	.word	0x20000398
 8002f6c:	40010204 	.word	0x40010204

08002f70 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f74:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <MX_I2C1_Init+0x74>)
 8002f76:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe8 <MX_I2C1_Init+0x78>)
 8002f78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe4 <MX_I2C1_Init+0x74>)
 8002f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8002fec <MX_I2C1_Init+0x7c>)
 8002f7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002f80:	4b18      	ldr	r3, [pc, #96]	@ (8002fe4 <MX_I2C1_Init+0x74>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f86:	4b17      	ldr	r3, [pc, #92]	@ (8002fe4 <MX_I2C1_Init+0x74>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f8c:	4b15      	ldr	r3, [pc, #84]	@ (8002fe4 <MX_I2C1_Init+0x74>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002f92:	4b14      	ldr	r3, [pc, #80]	@ (8002fe4 <MX_I2C1_Init+0x74>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f98:	4b12      	ldr	r3, [pc, #72]	@ (8002fe4 <MX_I2C1_Init+0x74>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f9e:	4b11      	ldr	r3, [pc, #68]	@ (8002fe4 <MX_I2C1_Init+0x74>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe4 <MX_I2C1_Init+0x74>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002faa:	480e      	ldr	r0, [pc, #56]	@ (8002fe4 <MX_I2C1_Init+0x74>)
 8002fac:	f005 faf5 	bl	800859a <HAL_I2C_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_I2C1_Init+0x4a>
    Error_Handler();
 8002fb6:	f000 ff2f 	bl	8003e18 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4809      	ldr	r0, [pc, #36]	@ (8002fe4 <MX_I2C1_Init+0x74>)
 8002fbe:	f006 f827 	bl	8009010 <HAL_I2CEx_ConfigAnalogFilter>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_I2C1_Init+0x5c>
    Error_Handler();
 8002fc8:	f000 ff26 	bl	8003e18 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4805      	ldr	r0, [pc, #20]	@ (8002fe4 <MX_I2C1_Init+0x74>)
 8002fd0:	f006 f869 	bl	80090a6 <HAL_I2CEx_ConfigDigitalFilter>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_I2C1_Init+0x6e>
    Error_Handler();
 8002fda:	f000 ff1d 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200003c4 	.word	0x200003c4
 8002fe8:	40005400 	.word	0x40005400
 8002fec:	00707cbb 	.word	0x00707cbb

08002ff0 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8003064 <MX_I2C2_Init+0x74>)
 8002ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8003068 <MX_I2C2_Init+0x78>)
 8002ff8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8002ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8003064 <MX_I2C2_Init+0x74>)
 8002ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800306c <MX_I2C2_Init+0x7c>)
 8002ffe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003000:	4b18      	ldr	r3, [pc, #96]	@ (8003064 <MX_I2C2_Init+0x74>)
 8003002:	2200      	movs	r2, #0
 8003004:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003006:	4b17      	ldr	r3, [pc, #92]	@ (8003064 <MX_I2C2_Init+0x74>)
 8003008:	2201      	movs	r2, #1
 800300a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800300c:	4b15      	ldr	r3, [pc, #84]	@ (8003064 <MX_I2C2_Init+0x74>)
 800300e:	2200      	movs	r2, #0
 8003010:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003012:	4b14      	ldr	r3, [pc, #80]	@ (8003064 <MX_I2C2_Init+0x74>)
 8003014:	2200      	movs	r2, #0
 8003016:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003018:	4b12      	ldr	r3, [pc, #72]	@ (8003064 <MX_I2C2_Init+0x74>)
 800301a:	2200      	movs	r2, #0
 800301c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800301e:	4b11      	ldr	r3, [pc, #68]	@ (8003064 <MX_I2C2_Init+0x74>)
 8003020:	2200      	movs	r2, #0
 8003022:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003024:	4b0f      	ldr	r3, [pc, #60]	@ (8003064 <MX_I2C2_Init+0x74>)
 8003026:	2200      	movs	r2, #0
 8003028:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800302a:	480e      	ldr	r0, [pc, #56]	@ (8003064 <MX_I2C2_Init+0x74>)
 800302c:	f005 fab5 	bl	800859a <HAL_I2C_Init>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_I2C2_Init+0x4a>
    Error_Handler();
 8003036:	f000 feef 	bl	8003e18 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 800303a:	2100      	movs	r1, #0
 800303c:	4809      	ldr	r0, [pc, #36]	@ (8003064 <MX_I2C2_Init+0x74>)
 800303e:	f005 ffe7 	bl	8009010 <HAL_I2CEx_ConfigAnalogFilter>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <MX_I2C2_Init+0x5c>
    Error_Handler();
 8003048:	f000 fee6 	bl	8003e18 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 800304c:	2100      	movs	r1, #0
 800304e:	4805      	ldr	r0, [pc, #20]	@ (8003064 <MX_I2C2_Init+0x74>)
 8003050:	f006 f829 	bl	80090a6 <HAL_I2CEx_ConfigDigitalFilter>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_I2C2_Init+0x6e>
    Error_Handler();
 800305a:	f000 fedd 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000418 	.word	0x20000418
 8003068:	40005800 	.word	0x40005800
 800306c:	00707cbb 	.word	0x00707cbb

08003070 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003074:	4b22      	ldr	r3, [pc, #136]	@ (8003100 <MX_LPUART1_UART_Init+0x90>)
 8003076:	4a23      	ldr	r2, [pc, #140]	@ (8003104 <MX_LPUART1_UART_Init+0x94>)
 8003078:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800307a:	4b21      	ldr	r3, [pc, #132]	@ (8003100 <MX_LPUART1_UART_Init+0x90>)
 800307c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003080:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003082:	4b1f      	ldr	r3, [pc, #124]	@ (8003100 <MX_LPUART1_UART_Init+0x90>)
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003088:	4b1d      	ldr	r3, [pc, #116]	@ (8003100 <MX_LPUART1_UART_Init+0x90>)
 800308a:	2200      	movs	r2, #0
 800308c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800308e:	4b1c      	ldr	r3, [pc, #112]	@ (8003100 <MX_LPUART1_UART_Init+0x90>)
 8003090:	2200      	movs	r2, #0
 8003092:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003094:	4b1a      	ldr	r3, [pc, #104]	@ (8003100 <MX_LPUART1_UART_Init+0x90>)
 8003096:	220c      	movs	r2, #12
 8003098:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800309a:	4b19      	ldr	r3, [pc, #100]	@ (8003100 <MX_LPUART1_UART_Init+0x90>)
 800309c:	2200      	movs	r2, #0
 800309e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030a0:	4b17      	ldr	r3, [pc, #92]	@ (8003100 <MX_LPUART1_UART_Init+0x90>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030a6:	4b16      	ldr	r3, [pc, #88]	@ (8003100 <MX_LPUART1_UART_Init+0x90>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030ac:	4b14      	ldr	r3, [pc, #80]	@ (8003100 <MX_LPUART1_UART_Init+0x90>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80030b2:	4b13      	ldr	r3, [pc, #76]	@ (8003100 <MX_LPUART1_UART_Init+0x90>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 80030b8:	4811      	ldr	r0, [pc, #68]	@ (8003100 <MX_LPUART1_UART_Init+0x90>)
 80030ba:	f00c f93b 	bl	800f334 <HAL_UART_Init>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_LPUART1_UART_Init+0x58>
    Error_Handler();
 80030c4:	f000 fea8 	bl	8003e18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) !=
 80030c8:	2100      	movs	r1, #0
 80030ca:	480d      	ldr	r0, [pc, #52]	@ (8003100 <MX_LPUART1_UART_Init+0x90>)
 80030cc:	f00c ff5e 	bl	800ff8c <HAL_UARTEx_SetTxFifoThreshold>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_LPUART1_UART_Init+0x6a>
      HAL_OK) {
    Error_Handler();
 80030d6:	f000 fe9f 	bl	8003e18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) !=
 80030da:	2100      	movs	r1, #0
 80030dc:	4808      	ldr	r0, [pc, #32]	@ (8003100 <MX_LPUART1_UART_Init+0x90>)
 80030de:	f00c ff93 	bl	8010008 <HAL_UARTEx_SetRxFifoThreshold>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_LPUART1_UART_Init+0x7c>
      HAL_OK) {
    Error_Handler();
 80030e8:	f000 fe96 	bl	8003e18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 80030ec:	4804      	ldr	r0, [pc, #16]	@ (8003100 <MX_LPUART1_UART_Init+0x90>)
 80030ee:	f00c ff14 	bl	800ff1a <HAL_UARTEx_DisableFifoMode>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <MX_LPUART1_UART_Init+0x8c>
    Error_Handler();
 80030f8:	f000 fe8e 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */
}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	2000046c 	.word	0x2000046c
 8003104:	40008000 	.word	0x40008000

08003108 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800310c:	4b22      	ldr	r3, [pc, #136]	@ (8003198 <MX_USART2_UART_Init+0x90>)
 800310e:	4a23      	ldr	r2, [pc, #140]	@ (800319c <MX_USART2_UART_Init+0x94>)
 8003110:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003112:	4b21      	ldr	r3, [pc, #132]	@ (8003198 <MX_USART2_UART_Init+0x90>)
 8003114:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003118:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800311a:	4b1f      	ldr	r3, [pc, #124]	@ (8003198 <MX_USART2_UART_Init+0x90>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003120:	4b1d      	ldr	r3, [pc, #116]	@ (8003198 <MX_USART2_UART_Init+0x90>)
 8003122:	2200      	movs	r2, #0
 8003124:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003126:	4b1c      	ldr	r3, [pc, #112]	@ (8003198 <MX_USART2_UART_Init+0x90>)
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800312c:	4b1a      	ldr	r3, [pc, #104]	@ (8003198 <MX_USART2_UART_Init+0x90>)
 800312e:	220c      	movs	r2, #12
 8003130:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003132:	4b19      	ldr	r3, [pc, #100]	@ (8003198 <MX_USART2_UART_Init+0x90>)
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003138:	4b17      	ldr	r3, [pc, #92]	@ (8003198 <MX_USART2_UART_Init+0x90>)
 800313a:	2200      	movs	r2, #0
 800313c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800313e:	4b16      	ldr	r3, [pc, #88]	@ (8003198 <MX_USART2_UART_Init+0x90>)
 8003140:	2200      	movs	r2, #0
 8003142:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003144:	4b14      	ldr	r3, [pc, #80]	@ (8003198 <MX_USART2_UART_Init+0x90>)
 8003146:	2200      	movs	r2, #0
 8003148:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800314a:	4b13      	ldr	r3, [pc, #76]	@ (8003198 <MX_USART2_UART_Init+0x90>)
 800314c:	2200      	movs	r2, #0
 800314e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003150:	4811      	ldr	r0, [pc, #68]	@ (8003198 <MX_USART2_UART_Init+0x90>)
 8003152:	f00c f8ef 	bl	800f334 <HAL_UART_Init>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_USART2_UART_Init+0x58>
    Error_Handler();
 800315c:	f000 fe5c 	bl	8003e18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) !=
 8003160:	2100      	movs	r1, #0
 8003162:	480d      	ldr	r0, [pc, #52]	@ (8003198 <MX_USART2_UART_Init+0x90>)
 8003164:	f00c ff12 	bl	800ff8c <HAL_UARTEx_SetTxFifoThreshold>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <MX_USART2_UART_Init+0x6a>
      HAL_OK) {
    Error_Handler();
 800316e:	f000 fe53 	bl	8003e18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) !=
 8003172:	2100      	movs	r1, #0
 8003174:	4808      	ldr	r0, [pc, #32]	@ (8003198 <MX_USART2_UART_Init+0x90>)
 8003176:	f00c ff47 	bl	8010008 <HAL_UARTEx_SetRxFifoThreshold>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_USART2_UART_Init+0x7c>
      HAL_OK) {
    Error_Handler();
 8003180:	f000 fe4a 	bl	8003e18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8003184:	4804      	ldr	r0, [pc, #16]	@ (8003198 <MX_USART2_UART_Init+0x90>)
 8003186:	f00c fec8 	bl	800ff1a <HAL_UARTEx_DisableFifoMode>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <MX_USART2_UART_Init+0x8c>
    Error_Handler();
 8003190:	f000 fe42 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8003194:	bf00      	nop
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20000500 	.word	0x20000500
 800319c:	40004400 	.word	0x40004400

080031a0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80031a4:	4b22      	ldr	r3, [pc, #136]	@ (8003230 <MX_USART3_UART_Init+0x90>)
 80031a6:	4a23      	ldr	r2, [pc, #140]	@ (8003234 <MX_USART3_UART_Init+0x94>)
 80031a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80031aa:	4b21      	ldr	r3, [pc, #132]	@ (8003230 <MX_USART3_UART_Init+0x90>)
 80031ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003230 <MX_USART3_UART_Init+0x90>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003230 <MX_USART3_UART_Init+0x90>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031be:	4b1c      	ldr	r3, [pc, #112]	@ (8003230 <MX_USART3_UART_Init+0x90>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003230 <MX_USART3_UART_Init+0x90>)
 80031c6:	220c      	movs	r2, #12
 80031c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ca:	4b19      	ldr	r3, [pc, #100]	@ (8003230 <MX_USART3_UART_Init+0x90>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031d0:	4b17      	ldr	r3, [pc, #92]	@ (8003230 <MX_USART3_UART_Init+0x90>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031d6:	4b16      	ldr	r3, [pc, #88]	@ (8003230 <MX_USART3_UART_Init+0x90>)
 80031d8:	2200      	movs	r2, #0
 80031da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031dc:	4b14      	ldr	r3, [pc, #80]	@ (8003230 <MX_USART3_UART_Init+0x90>)
 80031de:	2200      	movs	r2, #0
 80031e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031e2:	4b13      	ldr	r3, [pc, #76]	@ (8003230 <MX_USART3_UART_Init+0x90>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 80031e8:	4811      	ldr	r0, [pc, #68]	@ (8003230 <MX_USART3_UART_Init+0x90>)
 80031ea:	f00c f8a3 	bl	800f334 <HAL_UART_Init>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <MX_USART3_UART_Init+0x58>
    Error_Handler();
 80031f4:	f000 fe10 	bl	8003e18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) !=
 80031f8:	2100      	movs	r1, #0
 80031fa:	480d      	ldr	r0, [pc, #52]	@ (8003230 <MX_USART3_UART_Init+0x90>)
 80031fc:	f00c fec6 	bl	800ff8c <HAL_UARTEx_SetTxFifoThreshold>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_USART3_UART_Init+0x6a>
      HAL_OK) {
    Error_Handler();
 8003206:	f000 fe07 	bl	8003e18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) !=
 800320a:	2100      	movs	r1, #0
 800320c:	4808      	ldr	r0, [pc, #32]	@ (8003230 <MX_USART3_UART_Init+0x90>)
 800320e:	f00c fefb 	bl	8010008 <HAL_UARTEx_SetRxFifoThreshold>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_USART3_UART_Init+0x7c>
      HAL_OK) {
    Error_Handler();
 8003218:	f000 fdfe 	bl	8003e18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 800321c:	4804      	ldr	r0, [pc, #16]	@ (8003230 <MX_USART3_UART_Init+0x90>)
 800321e:	f00c fe7c 	bl	800ff1a <HAL_UARTEx_DisableFifoMode>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_USART3_UART_Init+0x8c>
    Error_Handler();
 8003228:	f000 fdf6 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 800322c:	bf00      	nop
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000594 	.word	0x20000594
 8003234:	40004800 	.word	0x40004800

08003238 <MX_SAI1_Init>:
/**
 * @brief SAI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI1_Init(void) {
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 800323c:	4b45      	ldr	r3, [pc, #276]	@ (8003354 <MX_SAI1_Init+0x11c>)
 800323e:	4a46      	ldr	r2, [pc, #280]	@ (8003358 <MX_SAI1_Init+0x120>)
 8003240:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8003242:	4b44      	ldr	r3, [pc, #272]	@ (8003354 <MX_SAI1_Init+0x11c>)
 8003244:	2200      	movs	r2, #0
 8003246:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8003248:	4b42      	ldr	r3, [pc, #264]	@ (8003354 <MX_SAI1_Init+0x11c>)
 800324a:	2200      	movs	r2, #0
 800324c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800324e:	4b41      	ldr	r3, [pc, #260]	@ (8003354 <MX_SAI1_Init+0x11c>)
 8003250:	2240      	movs	r2, #64	@ 0x40
 8003252:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003254:	4b3f      	ldr	r3, [pc, #252]	@ (8003354 <MX_SAI1_Init+0x11c>)
 8003256:	2200      	movs	r2, #0
 8003258:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800325a:	4b3e      	ldr	r3, [pc, #248]	@ (8003354 <MX_SAI1_Init+0x11c>)
 800325c:	2200      	movs	r2, #0
 800325e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8003260:	4b3c      	ldr	r3, [pc, #240]	@ (8003354 <MX_SAI1_Init+0x11c>)
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003266:	4b3b      	ldr	r3, [pc, #236]	@ (8003354 <MX_SAI1_Init+0x11c>)
 8003268:	2200      	movs	r2, #0
 800326a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800326c:	4b39      	ldr	r3, [pc, #228]	@ (8003354 <MX_SAI1_Init+0x11c>)
 800326e:	2200      	movs	r2, #0
 8003270:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8003272:	4b38      	ldr	r3, [pc, #224]	@ (8003354 <MX_SAI1_Init+0x11c>)
 8003274:	2200      	movs	r2, #0
 8003276:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003278:	4b36      	ldr	r3, [pc, #216]	@ (8003354 <MX_SAI1_Init+0x11c>)
 800327a:	2200      	movs	r2, #0
 800327c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800327e:	4b35      	ldr	r3, [pc, #212]	@ (8003354 <MX_SAI1_Init+0x11c>)
 8003280:	4a36      	ldr	r2, [pc, #216]	@ (800335c <MX_SAI1_Init+0x124>)
 8003282:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003284:	4b33      	ldr	r3, [pc, #204]	@ (8003354 <MX_SAI1_Init+0x11c>)
 8003286:	2200      	movs	r2, #0
 8003288:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800328a:	4b32      	ldr	r3, [pc, #200]	@ (8003354 <MX_SAI1_Init+0x11c>)
 800328c:	2200      	movs	r2, #0
 800328e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8003290:	4b30      	ldr	r3, [pc, #192]	@ (8003354 <MX_SAI1_Init+0x11c>)
 8003292:	2200      	movs	r2, #0
 8003294:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003296:	4b2f      	ldr	r3, [pc, #188]	@ (8003354 <MX_SAI1_Init+0x11c>)
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 800329c:	4b2d      	ldr	r3, [pc, #180]	@ (8003354 <MX_SAI1_Init+0x11c>)
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 80032a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003354 <MX_SAI1_Init+0x11c>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80032aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003354 <MX_SAI1_Init+0x11c>)
 80032ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80032b2:	4b28      	ldr	r3, [pc, #160]	@ (8003354 <MX_SAI1_Init+0x11c>)
 80032b4:	2208      	movs	r2, #8
 80032b6:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80032b8:	4b26      	ldr	r3, [pc, #152]	@ (8003354 <MX_SAI1_Init+0x11c>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80032be:	4b25      	ldr	r3, [pc, #148]	@ (8003354 <MX_SAI1_Init+0x11c>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80032c4:	4b23      	ldr	r3, [pc, #140]	@ (8003354 <MX_SAI1_Init+0x11c>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80032ca:	4b22      	ldr	r3, [pc, #136]	@ (8003354 <MX_SAI1_Init+0x11c>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80032d0:	4b20      	ldr	r3, [pc, #128]	@ (8003354 <MX_SAI1_Init+0x11c>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80032d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003354 <MX_SAI1_Init+0x11c>)
 80032d8:	2200      	movs	r2, #0
 80032da:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80032dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003354 <MX_SAI1_Init+0x11c>)
 80032de:	2201      	movs	r2, #1
 80032e0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80032e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003354 <MX_SAI1_Init+0x11c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK) {
 80032e8:	481a      	ldr	r0, [pc, #104]	@ (8003354 <MX_SAI1_Init+0x11c>)
 80032ea:	f008 fc73 	bl	800bbd4 <HAL_SAI_Init>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_SAI1_Init+0xc0>
    Error_Handler();
 80032f4:	f000 fd90 	bl	8003e18 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 80032f8:	4b19      	ldr	r3, [pc, #100]	@ (8003360 <MX_SAI1_Init+0x128>)
 80032fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003364 <MX_SAI1_Init+0x12c>)
 80032fc:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80032fe:	4b18      	ldr	r3, [pc, #96]	@ (8003360 <MX_SAI1_Init+0x128>)
 8003300:	2200      	movs	r2, #0
 8003302:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8003304:	4b16      	ldr	r3, [pc, #88]	@ (8003360 <MX_SAI1_Init+0x128>)
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800330a:	4b15      	ldr	r3, [pc, #84]	@ (8003360 <MX_SAI1_Init+0x128>)
 800330c:	2200      	movs	r2, #0
 800330e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003310:	4b13      	ldr	r3, [pc, #76]	@ (8003360 <MX_SAI1_Init+0x128>)
 8003312:	2200      	movs	r2, #0
 8003314:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003316:	4b12      	ldr	r3, [pc, #72]	@ (8003360 <MX_SAI1_Init+0x128>)
 8003318:	2200      	movs	r2, #0
 800331a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800331c:	4b10      	ldr	r3, [pc, #64]	@ (8003360 <MX_SAI1_Init+0x128>)
 800331e:	4a0f      	ldr	r2, [pc, #60]	@ (800335c <MX_SAI1_Init+0x124>)
 8003320:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003322:	4b0f      	ldr	r3, [pc, #60]	@ (8003360 <MX_SAI1_Init+0x128>)
 8003324:	2200      	movs	r2, #0
 8003326:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8003328:	4b0d      	ldr	r3, [pc, #52]	@ (8003360 <MX_SAI1_Init+0x128>)
 800332a:	2200      	movs	r2, #0
 800332c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800332e:	4b0c      	ldr	r3, [pc, #48]	@ (8003360 <MX_SAI1_Init+0x128>)
 8003330:	2200      	movs	r2, #0
 8003332:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003334:	4b0a      	ldr	r3, [pc, #40]	@ (8003360 <MX_SAI1_Init+0x128>)
 8003336:	2200      	movs	r2, #0
 8003338:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD,
 800333a:	2302      	movs	r3, #2
 800333c:	2200      	movs	r2, #0
 800333e:	2100      	movs	r1, #0
 8003340:	4807      	ldr	r0, [pc, #28]	@ (8003360 <MX_SAI1_Init+0x128>)
 8003342:	f008 fc15 	bl	800bb70 <HAL_SAI_InitProtocol>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <MX_SAI1_Init+0x118>
                           SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK) {
    Error_Handler();
 800334c:	f000 fd64 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */
}
 8003350:	bf00      	nop
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20000628 	.word	0x20000628
 8003358:	40015424 	.word	0x40015424
 800335c:	0002ee00 	.word	0x0002ee00
 8003360:	200006bc 	.word	0x200006bc
 8003364:	40015404 	.word	0x40015404

08003368 <MX_SAI2_Init>:
/**
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void) {
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800336c:	4b2f      	ldr	r3, [pc, #188]	@ (800342c <MX_SAI2_Init+0xc4>)
 800336e:	4a30      	ldr	r2, [pc, #192]	@ (8003430 <MX_SAI2_Init+0xc8>)
 8003370:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8003372:	4b2e      	ldr	r3, [pc, #184]	@ (800342c <MX_SAI2_Init+0xc4>)
 8003374:	2200      	movs	r2, #0
 8003376:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8003378:	4b2c      	ldr	r3, [pc, #176]	@ (800342c <MX_SAI2_Init+0xc4>)
 800337a:	2200      	movs	r2, #0
 800337c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800337e:	4b2b      	ldr	r3, [pc, #172]	@ (800342c <MX_SAI2_Init+0xc4>)
 8003380:	2240      	movs	r2, #64	@ 0x40
 8003382:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003384:	4b29      	ldr	r3, [pc, #164]	@ (800342c <MX_SAI2_Init+0xc4>)
 8003386:	2200      	movs	r2, #0
 8003388:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800338a:	4b28      	ldr	r3, [pc, #160]	@ (800342c <MX_SAI2_Init+0xc4>)
 800338c:	2200      	movs	r2, #0
 800338e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8003390:	4b26      	ldr	r3, [pc, #152]	@ (800342c <MX_SAI2_Init+0xc4>)
 8003392:	2200      	movs	r2, #0
 8003394:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003396:	4b25      	ldr	r3, [pc, #148]	@ (800342c <MX_SAI2_Init+0xc4>)
 8003398:	2200      	movs	r2, #0
 800339a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800339c:	4b23      	ldr	r3, [pc, #140]	@ (800342c <MX_SAI2_Init+0xc4>)
 800339e:	2200      	movs	r2, #0
 80033a0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80033a2:	4b22      	ldr	r3, [pc, #136]	@ (800342c <MX_SAI2_Init+0xc4>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80033a8:	4b20      	ldr	r3, [pc, #128]	@ (800342c <MX_SAI2_Init+0xc4>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80033ae:	4b1f      	ldr	r3, [pc, #124]	@ (800342c <MX_SAI2_Init+0xc4>)
 80033b0:	4a20      	ldr	r2, [pc, #128]	@ (8003434 <MX_SAI2_Init+0xcc>)
 80033b2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80033b4:	4b1d      	ldr	r3, [pc, #116]	@ (800342c <MX_SAI2_Init+0xc4>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80033ba:	4b1c      	ldr	r3, [pc, #112]	@ (800342c <MX_SAI2_Init+0xc4>)
 80033bc:	2200      	movs	r2, #0
 80033be:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80033c0:	4b1a      	ldr	r3, [pc, #104]	@ (800342c <MX_SAI2_Init+0xc4>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80033c6:	4b19      	ldr	r3, [pc, #100]	@ (800342c <MX_SAI2_Init+0xc4>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80033cc:	4b17      	ldr	r3, [pc, #92]	@ (800342c <MX_SAI2_Init+0xc4>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 80033d4:	4b15      	ldr	r3, [pc, #84]	@ (800342c <MX_SAI2_Init+0xc4>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80033da:	4b14      	ldr	r3, [pc, #80]	@ (800342c <MX_SAI2_Init+0xc4>)
 80033dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80033e2:	4b12      	ldr	r3, [pc, #72]	@ (800342c <MX_SAI2_Init+0xc4>)
 80033e4:	2208      	movs	r2, #8
 80033e6:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80033e8:	4b10      	ldr	r3, [pc, #64]	@ (800342c <MX_SAI2_Init+0xc4>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80033ee:	4b0f      	ldr	r3, [pc, #60]	@ (800342c <MX_SAI2_Init+0xc4>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80033f4:	4b0d      	ldr	r3, [pc, #52]	@ (800342c <MX_SAI2_Init+0xc4>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80033fa:	4b0c      	ldr	r3, [pc, #48]	@ (800342c <MX_SAI2_Init+0xc4>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8003400:	4b0a      	ldr	r3, [pc, #40]	@ (800342c <MX_SAI2_Init+0xc4>)
 8003402:	2200      	movs	r2, #0
 8003404:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003406:	4b09      	ldr	r3, [pc, #36]	@ (800342c <MX_SAI2_Init+0xc4>)
 8003408:	2200      	movs	r2, #0
 800340a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800340c:	4b07      	ldr	r3, [pc, #28]	@ (800342c <MX_SAI2_Init+0xc4>)
 800340e:	2201      	movs	r2, #1
 8003410:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8003412:	4b06      	ldr	r3, [pc, #24]	@ (800342c <MX_SAI2_Init+0xc4>)
 8003414:	2200      	movs	r2, #0
 8003416:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK) {
 8003418:	4804      	ldr	r0, [pc, #16]	@ (800342c <MX_SAI2_Init+0xc4>)
 800341a:	f008 fbdb 	bl	800bbd4 <HAL_SAI_Init>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <MX_SAI2_Init+0xc0>
    Error_Handler();
 8003424:	f000 fcf8 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */
}
 8003428:	bf00      	nop
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000750 	.word	0x20000750
 8003430:	40015804 	.word	0x40015804
 8003434:	0002ee00 	.word	0x0002ee00

08003438 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800343c:	4b1b      	ldr	r3, [pc, #108]	@ (80034ac <MX_SPI2_Init+0x74>)
 800343e:	4a1c      	ldr	r2, [pc, #112]	@ (80034b0 <MX_SPI2_Init+0x78>)
 8003440:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003442:	4b1a      	ldr	r3, [pc, #104]	@ (80034ac <MX_SPI2_Init+0x74>)
 8003444:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003448:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800344a:	4b18      	ldr	r3, [pc, #96]	@ (80034ac <MX_SPI2_Init+0x74>)
 800344c:	2200      	movs	r2, #0
 800344e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003450:	4b16      	ldr	r3, [pc, #88]	@ (80034ac <MX_SPI2_Init+0x74>)
 8003452:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003456:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003458:	4b14      	ldr	r3, [pc, #80]	@ (80034ac <MX_SPI2_Init+0x74>)
 800345a:	2200      	movs	r2, #0
 800345c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800345e:	4b13      	ldr	r3, [pc, #76]	@ (80034ac <MX_SPI2_Init+0x74>)
 8003460:	2200      	movs	r2, #0
 8003462:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003464:	4b11      	ldr	r3, [pc, #68]	@ (80034ac <MX_SPI2_Init+0x74>)
 8003466:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800346a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800346c:	4b0f      	ldr	r3, [pc, #60]	@ (80034ac <MX_SPI2_Init+0x74>)
 800346e:	2218      	movs	r2, #24
 8003470:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003472:	4b0e      	ldr	r3, [pc, #56]	@ (80034ac <MX_SPI2_Init+0x74>)
 8003474:	2200      	movs	r2, #0
 8003476:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003478:	4b0c      	ldr	r3, [pc, #48]	@ (80034ac <MX_SPI2_Init+0x74>)
 800347a:	2200      	movs	r2, #0
 800347c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800347e:	4b0b      	ldr	r3, [pc, #44]	@ (80034ac <MX_SPI2_Init+0x74>)
 8003480:	2200      	movs	r2, #0
 8003482:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003484:	4b09      	ldr	r3, [pc, #36]	@ (80034ac <MX_SPI2_Init+0x74>)
 8003486:	2207      	movs	r2, #7
 8003488:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800348a:	4b08      	ldr	r3, [pc, #32]	@ (80034ac <MX_SPI2_Init+0x74>)
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003490:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <MX_SPI2_Init+0x74>)
 8003492:	2208      	movs	r2, #8
 8003494:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8003496:	4805      	ldr	r0, [pc, #20]	@ (80034ac <MX_SPI2_Init+0x74>)
 8003498:	f008 fee8 	bl	800c26c <HAL_SPI_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <MX_SPI2_Init+0x6e>
    Error_Handler();
 80034a2:	f000 fcb9 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	200007e4 	.word	0x200007e4
 80034b0:	40003800 	.word	0x40003800

080034b4 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80034b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003528 <MX_SPI3_Init+0x74>)
 80034ba:	4a1c      	ldr	r2, [pc, #112]	@ (800352c <MX_SPI3_Init+0x78>)
 80034bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80034be:	4b1a      	ldr	r3, [pc, #104]	@ (8003528 <MX_SPI3_Init+0x74>)
 80034c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80034c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80034c6:	4b18      	ldr	r3, [pc, #96]	@ (8003528 <MX_SPI3_Init+0x74>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80034cc:	4b16      	ldr	r3, [pc, #88]	@ (8003528 <MX_SPI3_Init+0x74>)
 80034ce:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80034d2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034d4:	4b14      	ldr	r3, [pc, #80]	@ (8003528 <MX_SPI3_Init+0x74>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034da:	4b13      	ldr	r3, [pc, #76]	@ (8003528 <MX_SPI3_Init+0x74>)
 80034dc:	2200      	movs	r2, #0
 80034de:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80034e0:	4b11      	ldr	r3, [pc, #68]	@ (8003528 <MX_SPI3_Init+0x74>)
 80034e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034e6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003528 <MX_SPI3_Init+0x74>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003528 <MX_SPI3_Init+0x74>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80034f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003528 <MX_SPI3_Init+0x74>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <MX_SPI3_Init+0x74>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003500:	4b09      	ldr	r3, [pc, #36]	@ (8003528 <MX_SPI3_Init+0x74>)
 8003502:	2207      	movs	r2, #7
 8003504:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003506:	4b08      	ldr	r3, [pc, #32]	@ (8003528 <MX_SPI3_Init+0x74>)
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800350c:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <MX_SPI3_Init+0x74>)
 800350e:	2208      	movs	r2, #8
 8003510:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8003512:	4805      	ldr	r0, [pc, #20]	@ (8003528 <MX_SPI3_Init+0x74>)
 8003514:	f008 feaa 	bl	800c26c <HAL_SPI_Init>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <MX_SPI3_Init+0x6e>
    Error_Handler();
 800351e:	f000 fc7b 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000848 	.word	0x20000848
 800352c:	40003c00 	.word	0x40003c00

08003530 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b098      	sub	sp, #96	@ 0x60
 8003534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003536:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8003542:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800354e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	605a      	str	r2, [r3, #4]
 8003558:	609a      	str	r2, [r3, #8]
 800355a:	60da      	str	r2, [r3, #12]
 800355c:	611a      	str	r2, [r3, #16]
 800355e:	615a      	str	r2, [r3, #20]
 8003560:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003562:	463b      	mov	r3, r7
 8003564:	222c      	movs	r2, #44	@ 0x2c
 8003566:	2100      	movs	r1, #0
 8003568:	4618      	mov	r0, r3
 800356a:	f00d fc20 	bl	8010dae <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800356e:	4b4a      	ldr	r3, [pc, #296]	@ (8003698 <MX_TIM1_Init+0x168>)
 8003570:	4a4a      	ldr	r2, [pc, #296]	@ (800369c <MX_TIM1_Init+0x16c>)
 8003572:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003574:	4b48      	ldr	r3, [pc, #288]	@ (8003698 <MX_TIM1_Init+0x168>)
 8003576:	2200      	movs	r2, #0
 8003578:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800357a:	4b47      	ldr	r3, [pc, #284]	@ (8003698 <MX_TIM1_Init+0x168>)
 800357c:	2200      	movs	r2, #0
 800357e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003580:	4b45      	ldr	r3, [pc, #276]	@ (8003698 <MX_TIM1_Init+0x168>)
 8003582:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003586:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003588:	4b43      	ldr	r3, [pc, #268]	@ (8003698 <MX_TIM1_Init+0x168>)
 800358a:	2200      	movs	r2, #0
 800358c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800358e:	4b42      	ldr	r3, [pc, #264]	@ (8003698 <MX_TIM1_Init+0x168>)
 8003590:	2200      	movs	r2, #0
 8003592:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003594:	4b40      	ldr	r3, [pc, #256]	@ (8003698 <MX_TIM1_Init+0x168>)
 8003596:	2200      	movs	r2, #0
 8003598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800359a:	483f      	ldr	r0, [pc, #252]	@ (8003698 <MX_TIM1_Init+0x168>)
 800359c:	f00a fbd1 	bl	800dd42 <HAL_TIM_PWM_Init>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <MX_TIM1_Init+0x7a>
    Error_Handler();
 80035a6:	f000 fc37 	bl	8003e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035aa:	2300      	movs	r3, #0
 80035ac:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035ae:	2300      	movs	r3, #0
 80035b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b2:	2300      	movs	r3, #0
 80035b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80035b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80035ba:	4619      	mov	r1, r3
 80035bc:	4836      	ldr	r0, [pc, #216]	@ (8003698 <MX_TIM1_Init+0x168>)
 80035be:	f00b fccf 	bl	800ef60 <HAL_TIMEx_MasterConfigSynchronization>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <MX_TIM1_Init+0x9c>
    Error_Handler();
 80035c8:	f000 fc26 	bl	8003e18 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80035cc:	2301      	movs	r3, #1
 80035ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80035d0:	2301      	movs	r3, #1
 80035d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80035d4:	2300      	movs	r3, #0
 80035d6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK,
 80035d8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80035dc:	461a      	mov	r2, r3
 80035de:	2101      	movs	r1, #1
 80035e0:	482d      	ldr	r0, [pc, #180]	@ (8003698 <MX_TIM1_Init+0x168>)
 80035e2:	f00b fdc3 	bl	800f16c <HAL_TIMEx_ConfigBreakInput>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <MX_TIM1_Init+0xc0>
                                 &sBreakInputConfig) != HAL_OK) {
    Error_Handler();
 80035ec:	f000 fc14 	bl	8003e18 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2,
 80035f0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80035f4:	461a      	mov	r2, r3
 80035f6:	2102      	movs	r1, #2
 80035f8:	4827      	ldr	r0, [pc, #156]	@ (8003698 <MX_TIM1_Init+0x168>)
 80035fa:	f00b fdb7 	bl	800f16c <HAL_TIMEx_ConfigBreakInput>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <MX_TIM1_Init+0xd8>
                                 &sBreakInputConfig) != HAL_OK) {
    Error_Handler();
 8003604:	f000 fc08 	bl	8003e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003608:	2360      	movs	r3, #96	@ 0x60
 800360a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003610:	2300      	movs	r3, #0
 8003612:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003614:	2300      	movs	r3, #0
 8003616:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003618:	2300      	movs	r3, #0
 800361a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800361c:	2300      	movs	r3, #0
 800361e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003620:	2300      	movs	r3, #0
 8003622:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8003624:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003628:	2208      	movs	r2, #8
 800362a:	4619      	mov	r1, r3
 800362c:	481a      	ldr	r0, [pc, #104]	@ (8003698 <MX_TIM1_Init+0x168>)
 800362e:	f00a fe61 	bl	800e2f4 <HAL_TIM_PWM_ConfigChannel>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <MX_TIM1_Init+0x10c>
    Error_Handler();
 8003638:	f000 fbee 	bl	8003e18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800363c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003640:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8003642:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003646:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003648:	2300      	movs	r3, #0
 800364a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8003650:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003654:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003656:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800365a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8003660:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003664:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003666:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800366a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003670:	2300      	movs	r3, #0
 8003672:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8003674:	463b      	mov	r3, r7
 8003676:	4619      	mov	r1, r3
 8003678:	4807      	ldr	r0, [pc, #28]	@ (8003698 <MX_TIM1_Init+0x168>)
 800367a:	f00b fcf9 	bl	800f070 <HAL_TIMEx_ConfigBreakDeadTime>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <MX_TIM1_Init+0x158>
    Error_Handler();
 8003684:	f000 fbc8 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003688:	4803      	ldr	r0, [pc, #12]	@ (8003698 <MX_TIM1_Init+0x168>)
 800368a:	f000 ffc5 	bl	8004618 <HAL_TIM_MspPostInit>
}
 800368e:	bf00      	nop
 8003690:	3760      	adds	r7, #96	@ 0x60
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	200008ac 	.word	0x200008ac
 800369c:	40012c00 	.word	0x40012c00

080036a0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08a      	sub	sp, #40	@ 0x28
 80036a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036a6:	f107 031c 	add.w	r3, r7, #28
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	605a      	str	r2, [r3, #4]
 80036b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036b2:	463b      	mov	r3, r7
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	60da      	str	r2, [r3, #12]
 80036be:	611a      	str	r2, [r3, #16]
 80036c0:	615a      	str	r2, [r3, #20]
 80036c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036c4:	4b27      	ldr	r3, [pc, #156]	@ (8003764 <MX_TIM2_Init+0xc4>)
 80036c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80036cc:	4b25      	ldr	r3, [pc, #148]	@ (8003764 <MX_TIM2_Init+0xc4>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d2:	4b24      	ldr	r3, [pc, #144]	@ (8003764 <MX_TIM2_Init+0xc4>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80036d8:	4b22      	ldr	r3, [pc, #136]	@ (8003764 <MX_TIM2_Init+0xc4>)
 80036da:	f04f 32ff 	mov.w	r2, #4294967295
 80036de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036e0:	4b20      	ldr	r3, [pc, #128]	@ (8003764 <MX_TIM2_Init+0xc4>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003764 <MX_TIM2_Init+0xc4>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80036ec:	481d      	ldr	r0, [pc, #116]	@ (8003764 <MX_TIM2_Init+0xc4>)
 80036ee:	f00a fb28 	bl	800dd42 <HAL_TIM_PWM_Init>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <MX_TIM2_Init+0x5c>
    Error_Handler();
 80036f8:	f000 fb8e 	bl	8003e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003700:	2300      	movs	r3, #0
 8003702:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8003704:	f107 031c 	add.w	r3, r7, #28
 8003708:	4619      	mov	r1, r3
 800370a:	4816      	ldr	r0, [pc, #88]	@ (8003764 <MX_TIM2_Init+0xc4>)
 800370c:	f00b fc28 	bl	800ef60 <HAL_TIMEx_MasterConfigSynchronization>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <MX_TIM2_Init+0x7a>
    Error_Handler();
 8003716:	f000 fb7f 	bl	8003e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800371a:	2360      	movs	r3, #96	@ 0x60
 800371c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003726:	2300      	movs	r3, #0
 8003728:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800372a:	463b      	mov	r3, r7
 800372c:	2200      	movs	r2, #0
 800372e:	4619      	mov	r1, r3
 8003730:	480c      	ldr	r0, [pc, #48]	@ (8003764 <MX_TIM2_Init+0xc4>)
 8003732:	f00a fddf 	bl	800e2f4 <HAL_TIM_PWM_ConfigChannel>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <MX_TIM2_Init+0xa0>
    Error_Handler();
 800373c:	f000 fb6c 	bl	8003e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8003740:	463b      	mov	r3, r7
 8003742:	2208      	movs	r2, #8
 8003744:	4619      	mov	r1, r3
 8003746:	4807      	ldr	r0, [pc, #28]	@ (8003764 <MX_TIM2_Init+0xc4>)
 8003748:	f00a fdd4 	bl	800e2f4 <HAL_TIM_PWM_ConfigChannel>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <MX_TIM2_Init+0xb6>
    Error_Handler();
 8003752:	f000 fb61 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003756:	4803      	ldr	r0, [pc, #12]	@ (8003764 <MX_TIM2_Init+0xc4>)
 8003758:	f000 ff5e 	bl	8004618 <HAL_TIM_MspPostInit>
}
 800375c:	bf00      	nop
 800375e:	3728      	adds	r7, #40	@ 0x28
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	200008f8 	.word	0x200008f8

08003768 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003768:	b580      	push	{r7, lr}
 800376a:	b08e      	sub	sp, #56	@ 0x38
 800376c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800376e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	605a      	str	r2, [r3, #4]
 8003778:	609a      	str	r2, [r3, #8]
 800377a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800377c:	f107 031c 	add.w	r3, r7, #28
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003788:	463b      	mov	r3, r7
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	609a      	str	r2, [r3, #8]
 8003792:	60da      	str	r2, [r3, #12]
 8003794:	611a      	str	r2, [r3, #16]
 8003796:	615a      	str	r2, [r3, #20]
 8003798:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800379a:	4b32      	ldr	r3, [pc, #200]	@ (8003864 <MX_TIM3_Init+0xfc>)
 800379c:	4a32      	ldr	r2, [pc, #200]	@ (8003868 <MX_TIM3_Init+0x100>)
 800379e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80037a0:	4b30      	ldr	r3, [pc, #192]	@ (8003864 <MX_TIM3_Init+0xfc>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003864 <MX_TIM3_Init+0xfc>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80037ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003864 <MX_TIM3_Init+0xfc>)
 80037ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003864 <MX_TIM3_Init+0xfc>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003864 <MX_TIM3_Init+0xfc>)
 80037bc:	2200      	movs	r2, #0
 80037be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80037c0:	4828      	ldr	r0, [pc, #160]	@ (8003864 <MX_TIM3_Init+0xfc>)
 80037c2:	f00a f995 	bl	800daf0 <HAL_TIM_Base_Init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <MX_TIM3_Init+0x68>
    Error_Handler();
 80037cc:	f000 fb24 	bl	8003e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80037d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037da:	4619      	mov	r1, r3
 80037dc:	4821      	ldr	r0, [pc, #132]	@ (8003864 <MX_TIM3_Init+0xfc>)
 80037de:	f00a fe9d 	bl	800e51c <HAL_TIM_ConfigClockSource>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <MX_TIM3_Init+0x84>
    Error_Handler();
 80037e8:	f000 fb16 	bl	8003e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80037ec:	481d      	ldr	r0, [pc, #116]	@ (8003864 <MX_TIM3_Init+0xfc>)
 80037ee:	f00a faa8 	bl	800dd42 <HAL_TIM_PWM_Init>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <MX_TIM3_Init+0x94>
    Error_Handler();
 80037f8:	f000 fb0e 	bl	8003e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003800:	2300      	movs	r3, #0
 8003802:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8003804:	f107 031c 	add.w	r3, r7, #28
 8003808:	4619      	mov	r1, r3
 800380a:	4816      	ldr	r0, [pc, #88]	@ (8003864 <MX_TIM3_Init+0xfc>)
 800380c:	f00b fba8 	bl	800ef60 <HAL_TIMEx_MasterConfigSynchronization>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <MX_TIM3_Init+0xb2>
    Error_Handler();
 8003816:	f000 faff 	bl	8003e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800381a:	2360      	movs	r3, #96	@ 0x60
 800381c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003822:	2300      	movs	r3, #0
 8003824:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 800382a:	463b      	mov	r3, r7
 800382c:	2204      	movs	r2, #4
 800382e:	4619      	mov	r1, r3
 8003830:	480c      	ldr	r0, [pc, #48]	@ (8003864 <MX_TIM3_Init+0xfc>)
 8003832:	f00a fd5f 	bl	800e2f4 <HAL_TIM_PWM_ConfigChannel>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <MX_TIM3_Init+0xd8>
    Error_Handler();
 800383c:	f000 faec 	bl	8003e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8003840:	463b      	mov	r3, r7
 8003842:	2208      	movs	r2, #8
 8003844:	4619      	mov	r1, r3
 8003846:	4807      	ldr	r0, [pc, #28]	@ (8003864 <MX_TIM3_Init+0xfc>)
 8003848:	f00a fd54 	bl	800e2f4 <HAL_TIM_PWM_ConfigChannel>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <MX_TIM3_Init+0xee>
    Error_Handler();
 8003852:	f000 fae1 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003856:	4803      	ldr	r0, [pc, #12]	@ (8003864 <MX_TIM3_Init+0xfc>)
 8003858:	f000 fede 	bl	8004618 <HAL_TIM_MspPostInit>
}
 800385c:	bf00      	nop
 800385e:	3738      	adds	r7, #56	@ 0x38
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20000944 	.word	0x20000944
 8003868:	40000400 	.word	0x40000400

0800386c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	@ 0x28
 8003870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003872:	f107 031c 	add.w	r3, r7, #28
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	605a      	str	r2, [r3, #4]
 800387c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800387e:	463b      	mov	r3, r7
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	611a      	str	r2, [r3, #16]
 800388c:	615a      	str	r2, [r3, #20]
 800388e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003890:	4b21      	ldr	r3, [pc, #132]	@ (8003918 <MX_TIM4_Init+0xac>)
 8003892:	4a22      	ldr	r2, [pc, #136]	@ (800391c <MX_TIM4_Init+0xb0>)
 8003894:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003896:	4b20      	ldr	r3, [pc, #128]	@ (8003918 <MX_TIM4_Init+0xac>)
 8003898:	2200      	movs	r2, #0
 800389a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800389c:	4b1e      	ldr	r3, [pc, #120]	@ (8003918 <MX_TIM4_Init+0xac>)
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80038a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003918 <MX_TIM4_Init+0xac>)
 80038a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80038a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003918 <MX_TIM4_Init+0xac>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038b0:	4b19      	ldr	r3, [pc, #100]	@ (8003918 <MX_TIM4_Init+0xac>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80038b6:	4818      	ldr	r0, [pc, #96]	@ (8003918 <MX_TIM4_Init+0xac>)
 80038b8:	f00a fa43 	bl	800dd42 <HAL_TIM_PWM_Init>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_TIM4_Init+0x5a>
    Error_Handler();
 80038c2:	f000 faa9 	bl	8003e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ca:	2300      	movs	r3, #0
 80038cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80038ce:	f107 031c 	add.w	r3, r7, #28
 80038d2:	4619      	mov	r1, r3
 80038d4:	4810      	ldr	r0, [pc, #64]	@ (8003918 <MX_TIM4_Init+0xac>)
 80038d6:	f00b fb43 	bl	800ef60 <HAL_TIMEx_MasterConfigSynchronization>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <MX_TIM4_Init+0x78>
    Error_Handler();
 80038e0:	f000 fa9a 	bl	8003e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038e4:	2360      	movs	r3, #96	@ 0x60
 80038e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038f0:	2300      	movs	r3, #0
 80038f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 80038f4:	463b      	mov	r3, r7
 80038f6:	220c      	movs	r2, #12
 80038f8:	4619      	mov	r1, r3
 80038fa:	4807      	ldr	r0, [pc, #28]	@ (8003918 <MX_TIM4_Init+0xac>)
 80038fc:	f00a fcfa 	bl	800e2f4 <HAL_TIM_PWM_ConfigChannel>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <MX_TIM4_Init+0x9e>
    Error_Handler();
 8003906:	f000 fa87 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800390a:	4803      	ldr	r0, [pc, #12]	@ (8003918 <MX_TIM4_Init+0xac>)
 800390c:	f000 fe84 	bl	8004618 <HAL_TIM_MspPostInit>
}
 8003910:	bf00      	nop
 8003912:	3728      	adds	r7, #40	@ 0x28
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20000990 	.word	0x20000990
 800391c:	40000800 	.word	0x40000800

08003920 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b096      	sub	sp, #88	@ 0x58
 8003924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003926:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	605a      	str	r2, [r3, #4]
 8003930:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003932:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	605a      	str	r2, [r3, #4]
 800393c:	609a      	str	r2, [r3, #8]
 800393e:	60da      	str	r2, [r3, #12]
 8003940:	611a      	str	r2, [r3, #16]
 8003942:	615a      	str	r2, [r3, #20]
 8003944:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003946:	1d3b      	adds	r3, r7, #4
 8003948:	222c      	movs	r2, #44	@ 0x2c
 800394a:	2100      	movs	r1, #0
 800394c:	4618      	mov	r0, r3
 800394e:	f00d fa2e 	bl	8010dae <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003952:	4b33      	ldr	r3, [pc, #204]	@ (8003a20 <MX_TIM15_Init+0x100>)
 8003954:	4a33      	ldr	r2, [pc, #204]	@ (8003a24 <MX_TIM15_Init+0x104>)
 8003956:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8003958:	4b31      	ldr	r3, [pc, #196]	@ (8003a20 <MX_TIM15_Init+0x100>)
 800395a:	2200      	movs	r2, #0
 800395c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800395e:	4b30      	ldr	r3, [pc, #192]	@ (8003a20 <MX_TIM15_Init+0x100>)
 8003960:	2200      	movs	r2, #0
 8003962:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8003964:	4b2e      	ldr	r3, [pc, #184]	@ (8003a20 <MX_TIM15_Init+0x100>)
 8003966:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800396a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800396c:	4b2c      	ldr	r3, [pc, #176]	@ (8003a20 <MX_TIM15_Init+0x100>)
 800396e:	2200      	movs	r2, #0
 8003970:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003972:	4b2b      	ldr	r3, [pc, #172]	@ (8003a20 <MX_TIM15_Init+0x100>)
 8003974:	2200      	movs	r2, #0
 8003976:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003978:	4b29      	ldr	r3, [pc, #164]	@ (8003a20 <MX_TIM15_Init+0x100>)
 800397a:	2200      	movs	r2, #0
 800397c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 800397e:	4828      	ldr	r0, [pc, #160]	@ (8003a20 <MX_TIM15_Init+0x100>)
 8003980:	f00a f9df 	bl	800dd42 <HAL_TIM_PWM_Init>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <MX_TIM15_Init+0x6e>
    Error_Handler();
 800398a:	f000 fa45 	bl	8003e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800398e:	2300      	movs	r3, #0
 8003990:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003992:	2300      	movs	r3, #0
 8003994:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) !=
 8003996:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800399a:	4619      	mov	r1, r3
 800399c:	4820      	ldr	r0, [pc, #128]	@ (8003a20 <MX_TIM15_Init+0x100>)
 800399e:	f00b fadf 	bl	800ef60 <HAL_TIMEx_MasterConfigSynchronization>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <MX_TIM15_Init+0x8c>
      HAL_OK) {
    Error_Handler();
 80039a8:	f000 fa36 	bl	8003e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039ac:	2360      	movs	r3, #96	@ 0x60
 80039ae:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039b4:	2300      	movs	r3, #0
 80039b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80039b8:	2300      	movs	r3, #0
 80039ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039bc:	2300      	movs	r3, #0
 80039be:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80039c0:	2300      	movs	r3, #0
 80039c2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039c4:	2300      	movs	r3, #0
 80039c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80039c8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80039cc:	2200      	movs	r2, #0
 80039ce:	4619      	mov	r1, r3
 80039d0:	4813      	ldr	r0, [pc, #76]	@ (8003a20 <MX_TIM15_Init+0x100>)
 80039d2:	f00a fc8f 	bl	800e2f4 <HAL_TIM_PWM_ConfigChannel>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <MX_TIM15_Init+0xc0>
    Error_Handler();
 80039dc:	f000 fa1c 	bl	8003e18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039e0:	2300      	movs	r3, #0
 80039e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039fa:	2300      	movs	r3, #0
 80039fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK) {
 80039fe:	1d3b      	adds	r3, r7, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	4807      	ldr	r0, [pc, #28]	@ (8003a20 <MX_TIM15_Init+0x100>)
 8003a04:	f00b fb34 	bl	800f070 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <MX_TIM15_Init+0xf2>
    Error_Handler();
 8003a0e:	f000 fa03 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003a12:	4803      	ldr	r0, [pc, #12]	@ (8003a20 <MX_TIM15_Init+0x100>)
 8003a14:	f000 fe00 	bl	8004618 <HAL_TIM_MspPostInit>
}
 8003a18:	bf00      	nop
 8003a1a:	3758      	adds	r7, #88	@ 0x58
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	200009dc 	.word	0x200009dc
 8003a24:	40014000 	.word	0x40014000

08003a28 <MX_TIM17_Init>:
/**
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b092      	sub	sp, #72	@ 0x48
 8003a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	609a      	str	r2, [r3, #8]
 8003a3a:	60da      	str	r2, [r3, #12]
 8003a3c:	611a      	str	r2, [r3, #16]
 8003a3e:	615a      	str	r2, [r3, #20]
 8003a40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a42:	463b      	mov	r3, r7
 8003a44:	222c      	movs	r2, #44	@ 0x2c
 8003a46:	2100      	movs	r1, #0
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f00d f9b0 	bl	8010dae <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8003b0c <MX_TIM17_Init+0xe4>)
 8003a50:	4a2f      	ldr	r2, [pc, #188]	@ (8003b10 <MX_TIM17_Init+0xe8>)
 8003a52:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2441;
 8003a54:	4b2d      	ldr	r3, [pc, #180]	@ (8003b0c <MX_TIM17_Init+0xe4>)
 8003a56:	f640 1289 	movw	r2, #2441	@ 0x989
 8003a5a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b0c <MX_TIM17_Init+0xe4>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8003a62:	4b2a      	ldr	r3, [pc, #168]	@ (8003b0c <MX_TIM17_Init+0xe4>)
 8003a64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a68:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a6a:	4b28      	ldr	r3, [pc, #160]	@ (8003b0c <MX_TIM17_Init+0xe4>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003a70:	4b26      	ldr	r3, [pc, #152]	@ (8003b0c <MX_TIM17_Init+0xe4>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a76:	4b25      	ldr	r3, [pc, #148]	@ (8003b0c <MX_TIM17_Init+0xe4>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 8003a7c:	4823      	ldr	r0, [pc, #140]	@ (8003b0c <MX_TIM17_Init+0xe4>)
 8003a7e:	f00a f837 	bl	800daf0 <HAL_TIM_Base_Init>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <MX_TIM17_Init+0x64>
    Error_Handler();
 8003a88:	f000 f9c6 	bl	8003e18 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK) {
 8003a8c:	481f      	ldr	r0, [pc, #124]	@ (8003b0c <MX_TIM17_Init+0xe4>)
 8003a8e:	f00a f8f7 	bl	800dc80 <HAL_TIM_OC_Init>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <MX_TIM17_Init+0x74>
    Error_Handler();
 8003a98:	f000 f9be 	bl	8003e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003aac:	2300      	movs	r3, #0
 8003aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8003ab8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003abc:	2200      	movs	r2, #0
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4812      	ldr	r0, [pc, #72]	@ (8003b0c <MX_TIM17_Init+0xe4>)
 8003ac2:	f00a fb9d 	bl	800e200 <HAL_TIM_OC_ConfigChannel>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <MX_TIM17_Init+0xa8>
    Error_Handler();
 8003acc:	f000 f9a4 	bl	8003e18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ae4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ae8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK) {
 8003aee:	463b      	mov	r3, r7
 8003af0:	4619      	mov	r1, r3
 8003af2:	4806      	ldr	r0, [pc, #24]	@ (8003b0c <MX_TIM17_Init+0xe4>)
 8003af4:	f00b fabc 	bl	800f070 <HAL_TIMEx_ConfigBreakDeadTime>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <MX_TIM17_Init+0xda>
    Error_Handler();
 8003afe:	f000 f98b 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
}
 8003b02:	bf00      	nop
 8003b04:	3748      	adds	r7, #72	@ 0x48
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000a28 	.word	0x20000a28
 8003b10:	40014800 	.word	0x40014800

08003b14 <MX_USB_OTG_FS_USB_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_USB_Init(void) {
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0

  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
	...

08003b24 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08e      	sub	sp, #56	@ 0x38
 8003b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	605a      	str	r2, [r3, #4]
 8003b34:	609a      	str	r2, [r3, #8]
 8003b36:	60da      	str	r2, [r3, #12]
 8003b38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b3a:	4b9e      	ldr	r3, [pc, #632]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3e:	4a9d      	ldr	r2, [pc, #628]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003b40:	f043 0310 	orr.w	r3, r3, #16
 8003b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b46:	4b9b      	ldr	r3, [pc, #620]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	623b      	str	r3, [r7, #32]
 8003b50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b52:	4b98      	ldr	r3, [pc, #608]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b56:	4a97      	ldr	r2, [pc, #604]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003b58:	f043 0304 	orr.w	r3, r3, #4
 8003b5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b5e:	4b95      	ldr	r3, [pc, #596]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b6a:	4b92      	ldr	r3, [pc, #584]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6e:	4a91      	ldr	r2, [pc, #580]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003b70:	f043 0320 	orr.w	r3, r3, #32
 8003b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b76:	4b8f      	ldr	r3, [pc, #572]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b82:	4b8c      	ldr	r3, [pc, #560]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b86:	4a8b      	ldr	r2, [pc, #556]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b8e:	4b89      	ldr	r3, [pc, #548]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b9a:	4b86      	ldr	r3, [pc, #536]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b9e:	4a85      	ldr	r2, [pc, #532]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ba6:	4b83      	ldr	r3, [pc, #524]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bb2:	4b80      	ldr	r3, [pc, #512]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bb6:	4a7f      	ldr	r2, [pc, #508]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003bb8:	f043 0302 	orr.w	r3, r3, #2
 8003bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bbe:	4b7d      	ldr	r3, [pc, #500]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bca:	4b7a      	ldr	r3, [pc, #488]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bce:	4a79      	ldr	r2, [pc, #484]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003bd0:	f043 0308 	orr.w	r3, r3, #8
 8003bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bd6:	4b77      	ldr	r3, [pc, #476]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003be2:	4b74      	ldr	r3, [pc, #464]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be6:	4a73      	ldr	r2, [pc, #460]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003be8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bee:	4b71      	ldr	r3, [pc, #452]	@ (8003db4 <MX_GPIO_Init+0x290>)
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf6:	607b      	str	r3, [r7, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8003bfa:	f005 fb75 	bl	80092e8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8003c04:	486c      	ldr	r0, [pc, #432]	@ (8003db8 <MX_GPIO_Init+0x294>)
 8003c06:	f004 fc8d 	bl	8008524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f44f 6178 	mov.w	r1, #3968	@ 0xf80
 8003c10:	486a      	ldr	r0, [pc, #424]	@ (8003dbc <MX_GPIO_Init+0x298>)
 8003c12:	f004 fc87 	bl	8008524 <HAL_GPIO_WritePin>
      GPIOE, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11,
      GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8003c16:	2201      	movs	r2, #1
 8003c18:	2101      	movs	r1, #1
 8003c1a:	4869      	ldr	r0, [pc, #420]	@ (8003dc0 <MX_GPIO_Init+0x29c>)
 8003c1c:	f004 fc82 	bl	8008524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003c20:	2320      	movs	r3, #32
 8003c22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c24:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003c28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c32:	4619      	mov	r1, r3
 8003c34:	4860      	ldr	r0, [pc, #384]	@ (8003db8 <MX_GPIO_Init+0x294>)
 8003c36:	f004 facb 	bl	80081d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003c3a:	2310      	movs	r3, #16
 8003c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c46:	2303      	movs	r3, #3
 8003c48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c4a:	2305      	movs	r3, #5
 8003c4c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c52:	4619      	mov	r1, r3
 8003c54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c58:	f004 faba 	bl	80081d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8003c5c:	23e0      	movs	r3, #224	@ 0xe0
 8003c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c60:	2300      	movs	r3, #0
 8003c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c64:	2301      	movs	r3, #1
 8003c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c72:	f004 faad 	bl	80081d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8003c76:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003c7c:	2311      	movs	r3, #17
 8003c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c84:	2300      	movs	r3, #0
 8003c86:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	484a      	ldr	r0, [pc, #296]	@ (8003db8 <MX_GPIO_Init+0x294>)
 8003c90:	f004 fa9e 	bl	80081d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_10;
 8003c94:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003caa:	4619      	mov	r1, r3
 8003cac:	4843      	ldr	r0, [pc, #268]	@ (8003dbc <MX_GPIO_Init+0x298>)
 8003cae:	f004 fa8f 	bl	80081d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_11;
 8003cb2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003cb8:	2311      	movs	r3, #17
 8003cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cc8:	4619      	mov	r1, r3
 8003cca:	483c      	ldr	r0, [pc, #240]	@ (8003dbc <MX_GPIO_Init+0x298>)
 8003ccc:	f004 fa80 	bl	80081d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003cd0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003cd6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003cda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4836      	ldr	r0, [pc, #216]	@ (8003dc0 <MX_GPIO_Init+0x29c>)
 8003ce8:	f004 fa72 	bl	80081d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003cec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003cfe:	230c      	movs	r3, #12
 8003d00:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d06:	4619      	mov	r1, r3
 8003d08:	482e      	ldr	r0, [pc, #184]	@ (8003dc4 <MX_GPIO_Init+0x2a0>)
 8003d0a:	f004 fa61 	bl	80081d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8003d0e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d14:	2302      	movs	r3, #2
 8003d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003d20:	230a      	movs	r3, #10
 8003d22:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d28:	4619      	mov	r1, r3
 8003d2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d2e:	f004 fa4f 	bl	80081d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d44:	4619      	mov	r1, r3
 8003d46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d4a:	f004 fa41 	bl	80081d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d52:	2301      	movs	r3, #1
 8003d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d62:	4619      	mov	r1, r3
 8003d64:	4816      	ldr	r0, [pc, #88]	@ (8003dc0 <MX_GPIO_Init+0x29c>)
 8003d66:	f004 fa33 	bl	80081d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d6a:	2304      	movs	r3, #4
 8003d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d76:	2303      	movs	r3, #3
 8003d78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003d7a:	230c      	movs	r3, #12
 8003d7c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d82:	4619      	mov	r1, r3
 8003d84:	480e      	ldr	r0, [pc, #56]	@ (8003dc0 <MX_GPIO_Init+0x29c>)
 8003d86:	f004 fa23 	bl	80081d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	2017      	movs	r0, #23
 8003d90:	f004 f92f 	bl	8007ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003d94:	2017      	movs	r0, #23
 8003d96:	f004 f948 	bl	800802a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	2028      	movs	r0, #40	@ 0x28
 8003da0:	f004 f927 	bl	8007ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003da4:	2028      	movs	r0, #40	@ 0x28
 8003da6:	f004 f940 	bl	800802a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003daa:	bf00      	nop
 8003dac:	3738      	adds	r7, #56	@ 0x38
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000
 8003db8:	48001400 	.word	0x48001400
 8003dbc:	48001000 	.word	0x48001000
 8003dc0:	48000c00 	.word	0x48000c00
 8003dc4:	48000800 	.word	0x48000800

08003dc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  // check which version of the timer triggered this callback and toggle LED
  if (htim == &htim17) {
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a06      	ldr	r2, [pc, #24]	@ (8003dec <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d102      	bne.n	8003dde <HAL_TIM_PeriodElapsedCallback+0x16>
    DISPLAY_TIMER_TRIGGERED = 1;
 8003dd8:	4b05      	ldr	r3, [pc, #20]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	701a      	strb	r2, [r3, #0]
  }
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	20000a28 	.word	0x20000a28
 8003df0:	20000a8c 	.word	0x20000a8c

08003df4 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8003dfc:	1d39      	adds	r1, r7, #4
 8003dfe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e02:	2201      	movs	r2, #1
 8003e04:	4803      	ldr	r0, [pc, #12]	@ (8003e14 <__io_putchar+0x20>)
 8003e06:	f00b fae5 	bl	800f3d4 <HAL_UART_Transmit>
  return ch;
 8003e0a:	687b      	ldr	r3, [r7, #4]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	2000046c 	.word	0x2000046c

08003e18 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e1c:	b672      	cpsid	i
}
 8003e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8003e20:	bf00      	nop
 8003e22:	e7fd      	b.n	8003e20 <Error_Handler+0x8>

08003e24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e68 <HAL_MspInit+0x44>)
 8003e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8003e68 <HAL_MspInit+0x44>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e36:	4b0c      	ldr	r3, [pc, #48]	@ (8003e68 <HAL_MspInit+0x44>)
 8003e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	607b      	str	r3, [r7, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e42:	4b09      	ldr	r3, [pc, #36]	@ (8003e68 <HAL_MspInit+0x44>)
 8003e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e46:	4a08      	ldr	r2, [pc, #32]	@ (8003e68 <HAL_MspInit+0x44>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e4e:	4b06      	ldr	r3, [pc, #24]	@ (8003e68 <HAL_MspInit+0x44>)
 8003e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40021000 	.word	0x40021000

08003e6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08c      	sub	sp, #48	@ 0x30
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e74:	f107 031c 	add.w	r3, r7, #28
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a2d      	ldr	r2, [pc, #180]	@ (8003f40 <HAL_ADC_MspInit+0xd4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d154      	bne.n	8003f38 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003f44 <HAL_ADC_MspInit+0xd8>)
 8003e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e92:	4a2c      	ldr	r2, [pc, #176]	@ (8003f44 <HAL_ADC_MspInit+0xd8>)
 8003e94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8003f44 <HAL_ADC_MspInit+0xd8>)
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ea2:	61bb      	str	r3, [r7, #24]
 8003ea4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ea6:	4b27      	ldr	r3, [pc, #156]	@ (8003f44 <HAL_ADC_MspInit+0xd8>)
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eaa:	4a26      	ldr	r2, [pc, #152]	@ (8003f44 <HAL_ADC_MspInit+0xd8>)
 8003eac:	f043 0304 	orr.w	r3, r3, #4
 8003eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003eb2:	4b24      	ldr	r3, [pc, #144]	@ (8003f44 <HAL_ADC_MspInit+0xd8>)
 8003eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ebe:	4b21      	ldr	r3, [pc, #132]	@ (8003f44 <HAL_ADC_MspInit+0xd8>)
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec2:	4a20      	ldr	r2, [pc, #128]	@ (8003f44 <HAL_ADC_MspInit+0xd8>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003eca:	4b1e      	ldr	r3, [pc, #120]	@ (8003f44 <HAL_ADC_MspInit+0xd8>)
 8003ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f44 <HAL_ADC_MspInit+0xd8>)
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eda:	4a1a      	ldr	r2, [pc, #104]	@ (8003f44 <HAL_ADC_MspInit+0xd8>)
 8003edc:	f043 0302 	orr.w	r3, r3, #2
 8003ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ee2:	4b18      	ldr	r3, [pc, #96]	@ (8003f44 <HAL_ADC_MspInit+0xd8>)
 8003ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8003eee:	233b      	movs	r3, #59	@ 0x3b
 8003ef0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003ef2:	230b      	movs	r3, #11
 8003ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003efa:	f107 031c 	add.w	r3, r7, #28
 8003efe:	4619      	mov	r1, r3
 8003f00:	4811      	ldr	r0, [pc, #68]	@ (8003f48 <HAL_ADC_MspInit+0xdc>)
 8003f02:	f004 f965 	bl	80081d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8003f06:	230a      	movs	r3, #10
 8003f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003f0a:	230b      	movs	r3, #11
 8003f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f12:	f107 031c 	add.w	r3, r7, #28
 8003f16:	4619      	mov	r1, r3
 8003f18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f1c:	f004 f958 	bl	80081d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f20:	2302      	movs	r3, #2
 8003f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003f24:	230b      	movs	r3, #11
 8003f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f2c:	f107 031c 	add.w	r3, r7, #28
 8003f30:	4619      	mov	r1, r3
 8003f32:	4806      	ldr	r0, [pc, #24]	@ (8003f4c <HAL_ADC_MspInit+0xe0>)
 8003f34:	f004 f94c 	bl	80081d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f38:	bf00      	nop
 8003f3a:	3730      	adds	r7, #48	@ 0x30
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	50040000 	.word	0x50040000
 8003f44:	40021000 	.word	0x40021000
 8003f48:	48000800 	.word	0x48000800
 8003f4c:	48000400 	.word	0x48000400

08003f50 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	@ 0x28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f58:	f107 0314 	add.w	r3, r7, #20
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	605a      	str	r2, [r3, #4]
 8003f62:	609a      	str	r2, [r3, #8]
 8003f64:	60da      	str	r2, [r3, #12]
 8003f66:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8003fe8 <HAL_COMP_MspInit+0x98>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d118      	bne.n	8003fa4 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f72:	4b1e      	ldr	r3, [pc, #120]	@ (8003fec <HAL_COMP_MspInit+0x9c>)
 8003f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f76:	4a1d      	ldr	r2, [pc, #116]	@ (8003fec <HAL_COMP_MspInit+0x9c>)
 8003f78:	f043 0302 	orr.w	r3, r3, #2
 8003f7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003fec <HAL_COMP_MspInit+0x9c>)
 8003f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f8a:	2304      	movs	r3, #4
 8003f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f96:	f107 0314 	add.w	r3, r7, #20
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4814      	ldr	r0, [pc, #80]	@ (8003ff0 <HAL_COMP_MspInit+0xa0>)
 8003f9e:	f004 f917 	bl	80081d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8003fa2:	e01c      	b.n	8003fde <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a12      	ldr	r2, [pc, #72]	@ (8003ff4 <HAL_COMP_MspInit+0xa4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d117      	bne.n	8003fde <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fae:	4b0f      	ldr	r3, [pc, #60]	@ (8003fec <HAL_COMP_MspInit+0x9c>)
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8003fec <HAL_COMP_MspInit+0x9c>)
 8003fb4:	f043 0302 	orr.w	r3, r3, #2
 8003fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fba:	4b0c      	ldr	r3, [pc, #48]	@ (8003fec <HAL_COMP_MspInit+0x9c>)
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003fc6:	23c0      	movs	r3, #192	@ 0xc0
 8003fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fd2:	f107 0314 	add.w	r3, r7, #20
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4805      	ldr	r0, [pc, #20]	@ (8003ff0 <HAL_COMP_MspInit+0xa0>)
 8003fda:	f004 f8f9 	bl	80081d0 <HAL_GPIO_Init>
}
 8003fde:	bf00      	nop
 8003fe0:	3728      	adds	r7, #40	@ 0x28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40010200 	.word	0x40010200
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	48000400 	.word	0x48000400
 8003ff4:	40010204 	.word	0x40010204

08003ff8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b0b0      	sub	sp, #192	@ 0xc0
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004000:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	605a      	str	r2, [r3, #4]
 800400a:	609a      	str	r2, [r3, #8]
 800400c:	60da      	str	r2, [r3, #12]
 800400e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004010:	f107 0318 	add.w	r3, r7, #24
 8004014:	2294      	movs	r2, #148	@ 0x94
 8004016:	2100      	movs	r1, #0
 8004018:	4618      	mov	r0, r3
 800401a:	f00c fec8 	bl	8010dae <memset>
  if(hi2c->Instance==I2C1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a4c      	ldr	r2, [pc, #304]	@ (8004154 <HAL_I2C_MspInit+0x15c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d13c      	bne.n	80040a2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004028:	2340      	movs	r3, #64	@ 0x40
 800402a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800402c:	2300      	movs	r3, #0
 800402e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004030:	f107 0318 	add.w	r3, r7, #24
 8004034:	4618      	mov	r0, r3
 8004036:	f006 f83f 	bl	800a0b8 <HAL_RCCEx_PeriphCLKConfig>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004040:	f7ff feea 	bl	8003e18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004044:	4b44      	ldr	r3, [pc, #272]	@ (8004158 <HAL_I2C_MspInit+0x160>)
 8004046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004048:	4a43      	ldr	r2, [pc, #268]	@ (8004158 <HAL_I2C_MspInit+0x160>)
 800404a:	f043 0302 	orr.w	r3, r3, #2
 800404e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004050:	4b41      	ldr	r3, [pc, #260]	@ (8004158 <HAL_I2C_MspInit+0x160>)
 8004052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800405c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004060:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004064:	2312      	movs	r3, #18
 8004066:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800406a:	2301      	movs	r3, #1
 800406c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004070:	2303      	movs	r3, #3
 8004072:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004076:	2304      	movs	r3, #4
 8004078:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800407c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004080:	4619      	mov	r1, r3
 8004082:	4836      	ldr	r0, [pc, #216]	@ (800415c <HAL_I2C_MspInit+0x164>)
 8004084:	f004 f8a4 	bl	80081d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004088:	4b33      	ldr	r3, [pc, #204]	@ (8004158 <HAL_I2C_MspInit+0x160>)
 800408a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408c:	4a32      	ldr	r2, [pc, #200]	@ (8004158 <HAL_I2C_MspInit+0x160>)
 800408e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004092:	6593      	str	r3, [r2, #88]	@ 0x58
 8004094:	4b30      	ldr	r3, [pc, #192]	@ (8004158 <HAL_I2C_MspInit+0x160>)
 8004096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80040a0:	e054      	b.n	800414c <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C2)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a2e      	ldr	r2, [pc, #184]	@ (8004160 <HAL_I2C_MspInit+0x168>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d14f      	bne.n	800414c <HAL_I2C_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80040ac:	2380      	movs	r3, #128	@ 0x80
 80040ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80040b0:	2300      	movs	r3, #0
 80040b2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040b4:	f107 0318 	add.w	r3, r7, #24
 80040b8:	4618      	mov	r0, r3
 80040ba:	f005 fffd 	bl	800a0b8 <HAL_RCCEx_PeriphCLKConfig>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80040c4:	f7ff fea8 	bl	8003e18 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80040c8:	4b23      	ldr	r3, [pc, #140]	@ (8004158 <HAL_I2C_MspInit+0x160>)
 80040ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040cc:	4a22      	ldr	r2, [pc, #136]	@ (8004158 <HAL_I2C_MspInit+0x160>)
 80040ce:	f043 0320 	orr.w	r3, r3, #32
 80040d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040d4:	4b20      	ldr	r3, [pc, #128]	@ (8004158 <HAL_I2C_MspInit+0x160>)
 80040d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80040e0:	2303      	movs	r3, #3
 80040e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040e6:	2312      	movs	r3, #18
 80040e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f2:	2303      	movs	r3, #3
 80040f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80040f8:	2304      	movs	r3, #4
 80040fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040fe:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004102:	4619      	mov	r1, r3
 8004104:	4817      	ldr	r0, [pc, #92]	@ (8004164 <HAL_I2C_MspInit+0x16c>)
 8004106:	f004 f863 	bl	80081d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800410a:	2304      	movs	r3, #4
 800410c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004110:	2312      	movs	r3, #18
 8004112:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004116:	2301      	movs	r3, #1
 8004118:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800411c:	2303      	movs	r3, #3
 800411e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004122:	2304      	movs	r3, #4
 8004124:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004128:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800412c:	4619      	mov	r1, r3
 800412e:	480d      	ldr	r0, [pc, #52]	@ (8004164 <HAL_I2C_MspInit+0x16c>)
 8004130:	f004 f84e 	bl	80081d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004134:	4b08      	ldr	r3, [pc, #32]	@ (8004158 <HAL_I2C_MspInit+0x160>)
 8004136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004138:	4a07      	ldr	r2, [pc, #28]	@ (8004158 <HAL_I2C_MspInit+0x160>)
 800413a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800413e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004140:	4b05      	ldr	r3, [pc, #20]	@ (8004158 <HAL_I2C_MspInit+0x160>)
 8004142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004144:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]
}
 800414c:	bf00      	nop
 800414e:	37c0      	adds	r7, #192	@ 0xc0
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40005400 	.word	0x40005400
 8004158:	40021000 	.word	0x40021000
 800415c:	48000400 	.word	0x48000400
 8004160:	40005800 	.word	0x40005800
 8004164:	48001400 	.word	0x48001400

08004168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b0b2      	sub	sp, #200	@ 0xc8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004170:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	605a      	str	r2, [r3, #4]
 800417a:	609a      	str	r2, [r3, #8]
 800417c:	60da      	str	r2, [r3, #12]
 800417e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004180:	f107 0320 	add.w	r3, r7, #32
 8004184:	2294      	movs	r2, #148	@ 0x94
 8004186:	2100      	movs	r1, #0
 8004188:	4618      	mov	r0, r3
 800418a:	f00c fe10 	bl	8010dae <memset>
  if(huart->Instance==LPUART1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a64      	ldr	r2, [pc, #400]	@ (8004324 <HAL_UART_MspInit+0x1bc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d13e      	bne.n	8004216 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004198:	2320      	movs	r3, #32
 800419a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800419c:	2300      	movs	r3, #0
 800419e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041a0:	f107 0320 	add.w	r3, r7, #32
 80041a4:	4618      	mov	r0, r3
 80041a6:	f005 ff87 	bl	800a0b8 <HAL_RCCEx_PeriphCLKConfig>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80041b0:	f7ff fe32 	bl	8003e18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80041b4:	4b5c      	ldr	r3, [pc, #368]	@ (8004328 <HAL_UART_MspInit+0x1c0>)
 80041b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b8:	4a5b      	ldr	r2, [pc, #364]	@ (8004328 <HAL_UART_MspInit+0x1c0>)
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80041c0:	4b59      	ldr	r3, [pc, #356]	@ (8004328 <HAL_UART_MspInit+0x1c0>)
 80041c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80041cc:	4b56      	ldr	r3, [pc, #344]	@ (8004328 <HAL_UART_MspInit+0x1c0>)
 80041ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d0:	4a55      	ldr	r2, [pc, #340]	@ (8004328 <HAL_UART_MspInit+0x1c0>)
 80041d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041d8:	4b53      	ldr	r3, [pc, #332]	@ (8004328 <HAL_UART_MspInit+0x1c0>)
 80041da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 80041e4:	f005 f880 	bl	80092e8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80041e8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80041ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f0:	2302      	movs	r3, #2
 80041f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041fc:	2303      	movs	r3, #3
 80041fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004202:	2308      	movs	r3, #8
 8004204:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004208:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800420c:	4619      	mov	r1, r3
 800420e:	4847      	ldr	r0, [pc, #284]	@ (800432c <HAL_UART_MspInit+0x1c4>)
 8004210:	f003 ffde 	bl	80081d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004214:	e081      	b.n	800431a <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a45      	ldr	r2, [pc, #276]	@ (8004330 <HAL_UART_MspInit+0x1c8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d13b      	bne.n	8004298 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004220:	2302      	movs	r3, #2
 8004222:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004224:	2300      	movs	r3, #0
 8004226:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004228:	f107 0320 	add.w	r3, r7, #32
 800422c:	4618      	mov	r0, r3
 800422e:	f005 ff43 	bl	800a0b8 <HAL_RCCEx_PeriphCLKConfig>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8004238:	f7ff fdee 	bl	8003e18 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800423c:	4b3a      	ldr	r3, [pc, #232]	@ (8004328 <HAL_UART_MspInit+0x1c0>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004240:	4a39      	ldr	r2, [pc, #228]	@ (8004328 <HAL_UART_MspInit+0x1c0>)
 8004242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004246:	6593      	str	r3, [r2, #88]	@ 0x58
 8004248:	4b37      	ldr	r3, [pc, #220]	@ (8004328 <HAL_UART_MspInit+0x1c0>)
 800424a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004254:	4b34      	ldr	r3, [pc, #208]	@ (8004328 <HAL_UART_MspInit+0x1c0>)
 8004256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004258:	4a33      	ldr	r2, [pc, #204]	@ (8004328 <HAL_UART_MspInit+0x1c0>)
 800425a:	f043 0308 	orr.w	r3, r3, #8
 800425e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004260:	4b31      	ldr	r3, [pc, #196]	@ (8004328 <HAL_UART_MspInit+0x1c0>)
 8004262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800426c:	2360      	movs	r3, #96	@ 0x60
 800426e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004272:	2302      	movs	r3, #2
 8004274:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004278:	2300      	movs	r3, #0
 800427a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800427e:	2303      	movs	r3, #3
 8004280:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004284:	2307      	movs	r3, #7
 8004286:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800428a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800428e:	4619      	mov	r1, r3
 8004290:	4828      	ldr	r0, [pc, #160]	@ (8004334 <HAL_UART_MspInit+0x1cc>)
 8004292:	f003 ff9d 	bl	80081d0 <HAL_GPIO_Init>
}
 8004296:	e040      	b.n	800431a <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a26      	ldr	r2, [pc, #152]	@ (8004338 <HAL_UART_MspInit+0x1d0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d13b      	bne.n	800431a <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80042a2:	2304      	movs	r3, #4
 80042a4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80042a6:	2300      	movs	r3, #0
 80042a8:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042aa:	f107 0320 	add.w	r3, r7, #32
 80042ae:	4618      	mov	r0, r3
 80042b0:	f005 ff02 	bl	800a0b8 <HAL_RCCEx_PeriphCLKConfig>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_UART_MspInit+0x156>
      Error_Handler();
 80042ba:	f7ff fdad 	bl	8003e18 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80042be:	4b1a      	ldr	r3, [pc, #104]	@ (8004328 <HAL_UART_MspInit+0x1c0>)
 80042c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c2:	4a19      	ldr	r2, [pc, #100]	@ (8004328 <HAL_UART_MspInit+0x1c0>)
 80042c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80042ca:	4b17      	ldr	r3, [pc, #92]	@ (8004328 <HAL_UART_MspInit+0x1c0>)
 80042cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80042d6:	4b14      	ldr	r3, [pc, #80]	@ (8004328 <HAL_UART_MspInit+0x1c0>)
 80042d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042da:	4a13      	ldr	r2, [pc, #76]	@ (8004328 <HAL_UART_MspInit+0x1c0>)
 80042dc:	f043 0308 	orr.w	r3, r3, #8
 80042e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042e2:	4b11      	ldr	r3, [pc, #68]	@ (8004328 <HAL_UART_MspInit+0x1c0>)
 80042e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80042ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80042f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f6:	2302      	movs	r3, #2
 80042f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004302:	2303      	movs	r3, #3
 8004304:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004308:	2307      	movs	r3, #7
 800430a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800430e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8004312:	4619      	mov	r1, r3
 8004314:	4807      	ldr	r0, [pc, #28]	@ (8004334 <HAL_UART_MspInit+0x1cc>)
 8004316:	f003 ff5b 	bl	80081d0 <HAL_GPIO_Init>
}
 800431a:	bf00      	nop
 800431c:	37c8      	adds	r7, #200	@ 0xc8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40008000 	.word	0x40008000
 8004328:	40021000 	.word	0x40021000
 800432c:	48001800 	.word	0x48001800
 8004330:	40004400 	.word	0x40004400
 8004334:	48000c00 	.word	0x48000c00
 8004338:	40004800 	.word	0x40004800

0800433c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08c      	sub	sp, #48	@ 0x30
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004344:	f107 031c 	add.w	r3, r7, #28
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	605a      	str	r2, [r3, #4]
 800434e:	609a      	str	r2, [r3, #8]
 8004350:	60da      	str	r2, [r3, #12]
 8004352:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a3c      	ldr	r2, [pc, #240]	@ (800444c <HAL_SPI_MspInit+0x110>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d144      	bne.n	80043e8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800435e:	4b3c      	ldr	r3, [pc, #240]	@ (8004450 <HAL_SPI_MspInit+0x114>)
 8004360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004362:	4a3b      	ldr	r2, [pc, #236]	@ (8004450 <HAL_SPI_MspInit+0x114>)
 8004364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004368:	6593      	str	r3, [r2, #88]	@ 0x58
 800436a:	4b39      	ldr	r3, [pc, #228]	@ (8004450 <HAL_SPI_MspInit+0x114>)
 800436c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004376:	4b36      	ldr	r3, [pc, #216]	@ (8004450 <HAL_SPI_MspInit+0x114>)
 8004378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800437a:	4a35      	ldr	r2, [pc, #212]	@ (8004450 <HAL_SPI_MspInit+0x114>)
 800437c:	f043 0304 	orr.w	r3, r3, #4
 8004380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004382:	4b33      	ldr	r3, [pc, #204]	@ (8004450 <HAL_SPI_MspInit+0x114>)
 8004384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800438e:	4b30      	ldr	r3, [pc, #192]	@ (8004450 <HAL_SPI_MspInit+0x114>)
 8004390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004392:	4a2f      	ldr	r2, [pc, #188]	@ (8004450 <HAL_SPI_MspInit+0x114>)
 8004394:	f043 0308 	orr.w	r3, r3, #8
 8004398:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800439a:	4b2d      	ldr	r3, [pc, #180]	@ (8004450 <HAL_SPI_MspInit+0x114>)
 800439c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	613b      	str	r3, [r7, #16]
 80043a4:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80043a6:	2304      	movs	r3, #4
 80043a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043aa:	2302      	movs	r3, #2
 80043ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043b2:	2303      	movs	r3, #3
 80043b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80043b6:	2305      	movs	r3, #5
 80043b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ba:	f107 031c 	add.w	r3, r7, #28
 80043be:	4619      	mov	r1, r3
 80043c0:	4824      	ldr	r0, [pc, #144]	@ (8004454 <HAL_SPI_MspInit+0x118>)
 80043c2:	f003 ff05 	bl	80081d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80043c6:	2312      	movs	r3, #18
 80043c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ca:	2302      	movs	r3, #2
 80043cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043d2:	2303      	movs	r3, #3
 80043d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80043d6:	2305      	movs	r3, #5
 80043d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043da:	f107 031c 	add.w	r3, r7, #28
 80043de:	4619      	mov	r1, r3
 80043e0:	481d      	ldr	r0, [pc, #116]	@ (8004458 <HAL_SPI_MspInit+0x11c>)
 80043e2:	f003 fef5 	bl	80081d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80043e6:	e02d      	b.n	8004444 <HAL_SPI_MspInit+0x108>
  else if(hspi->Instance==SPI3)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a1b      	ldr	r2, [pc, #108]	@ (800445c <HAL_SPI_MspInit+0x120>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d128      	bne.n	8004444 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80043f2:	4b17      	ldr	r3, [pc, #92]	@ (8004450 <HAL_SPI_MspInit+0x114>)
 80043f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f6:	4a16      	ldr	r2, [pc, #88]	@ (8004450 <HAL_SPI_MspInit+0x114>)
 80043f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80043fe:	4b14      	ldr	r3, [pc, #80]	@ (8004450 <HAL_SPI_MspInit+0x114>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004402:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800440a:	4b11      	ldr	r3, [pc, #68]	@ (8004450 <HAL_SPI_MspInit+0x114>)
 800440c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440e:	4a10      	ldr	r2, [pc, #64]	@ (8004450 <HAL_SPI_MspInit+0x114>)
 8004410:	f043 0304 	orr.w	r3, r3, #4
 8004414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004416:	4b0e      	ldr	r3, [pc, #56]	@ (8004450 <HAL_SPI_MspInit+0x114>)
 8004418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004422:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004428:	2302      	movs	r3, #2
 800442a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442c:	2300      	movs	r3, #0
 800442e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004430:	2303      	movs	r3, #3
 8004432:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004434:	2306      	movs	r3, #6
 8004436:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004438:	f107 031c 	add.w	r3, r7, #28
 800443c:	4619      	mov	r1, r3
 800443e:	4805      	ldr	r0, [pc, #20]	@ (8004454 <HAL_SPI_MspInit+0x118>)
 8004440:	f003 fec6 	bl	80081d0 <HAL_GPIO_Init>
}
 8004444:	bf00      	nop
 8004446:	3730      	adds	r7, #48	@ 0x30
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40003800 	.word	0x40003800
 8004450:	40021000 	.word	0x40021000
 8004454:	48000800 	.word	0x48000800
 8004458:	48000c00 	.word	0x48000c00
 800445c:	40003c00 	.word	0x40003c00

08004460 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08e      	sub	sp, #56	@ 0x38
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004468:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	605a      	str	r2, [r3, #4]
 8004472:	609a      	str	r2, [r3, #8]
 8004474:	60da      	str	r2, [r3, #12]
 8004476:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a44      	ldr	r2, [pc, #272]	@ (8004590 <HAL_TIM_PWM_MspInit+0x130>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d131      	bne.n	80044e6 <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004482:	4b44      	ldr	r3, [pc, #272]	@ (8004594 <HAL_TIM_PWM_MspInit+0x134>)
 8004484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004486:	4a43      	ldr	r2, [pc, #268]	@ (8004594 <HAL_TIM_PWM_MspInit+0x134>)
 8004488:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800448c:	6613      	str	r3, [r2, #96]	@ 0x60
 800448e:	4b41      	ldr	r3, [pc, #260]	@ (8004594 <HAL_TIM_PWM_MspInit+0x134>)
 8004490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004492:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004496:	623b      	str	r3, [r7, #32]
 8004498:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800449a:	4b3e      	ldr	r3, [pc, #248]	@ (8004594 <HAL_TIM_PWM_MspInit+0x134>)
 800449c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449e:	4a3d      	ldr	r2, [pc, #244]	@ (8004594 <HAL_TIM_PWM_MspInit+0x134>)
 80044a0:	f043 0310 	orr.w	r3, r3, #16
 80044a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004594 <HAL_TIM_PWM_MspInit+0x134>)
 80044a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80044b2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80044b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b8:	2302      	movs	r3, #2
 80044ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044bc:	2300      	movs	r3, #0
 80044be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c0:	2300      	movs	r3, #0
 80044c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80044c4:	2303      	movs	r3, #3
 80044c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044cc:	4619      	mov	r1, r3
 80044ce:	4832      	ldr	r0, [pc, #200]	@ (8004598 <HAL_TIM_PWM_MspInit+0x138>)
 80044d0:	f003 fe7e 	bl	80081d0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80044d4:	2200      	movs	r2, #0
 80044d6:	2100      	movs	r1, #0
 80044d8:	201a      	movs	r0, #26
 80044da:	f003 fd8a 	bl	8007ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80044de:	201a      	movs	r0, #26
 80044e0:	f003 fda3 	bl	800802a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80044e4:	e050      	b.n	8004588 <HAL_TIM_PWM_MspInit+0x128>
  else if(htim_pwm->Instance==TIM2)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ee:	d10c      	bne.n	800450a <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044f0:	4b28      	ldr	r3, [pc, #160]	@ (8004594 <HAL_TIM_PWM_MspInit+0x134>)
 80044f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f4:	4a27      	ldr	r2, [pc, #156]	@ (8004594 <HAL_TIM_PWM_MspInit+0x134>)
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80044fc:	4b25      	ldr	r3, [pc, #148]	@ (8004594 <HAL_TIM_PWM_MspInit+0x134>)
 80044fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	61bb      	str	r3, [r7, #24]
 8004506:	69bb      	ldr	r3, [r7, #24]
}
 8004508:	e03e      	b.n	8004588 <HAL_TIM_PWM_MspInit+0x128>
  else if(htim_pwm->Instance==TIM4)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a23      	ldr	r2, [pc, #140]	@ (800459c <HAL_TIM_PWM_MspInit+0x13c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d128      	bne.n	8004566 <HAL_TIM_PWM_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004514:	4b1f      	ldr	r3, [pc, #124]	@ (8004594 <HAL_TIM_PWM_MspInit+0x134>)
 8004516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004518:	4a1e      	ldr	r2, [pc, #120]	@ (8004594 <HAL_TIM_PWM_MspInit+0x134>)
 800451a:	f043 0304 	orr.w	r3, r3, #4
 800451e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004520:	4b1c      	ldr	r3, [pc, #112]	@ (8004594 <HAL_TIM_PWM_MspInit+0x134>)
 8004522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800452c:	4b19      	ldr	r3, [pc, #100]	@ (8004594 <HAL_TIM_PWM_MspInit+0x134>)
 800452e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004530:	4a18      	ldr	r2, [pc, #96]	@ (8004594 <HAL_TIM_PWM_MspInit+0x134>)
 8004532:	f043 0310 	orr.w	r3, r3, #16
 8004536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004538:	4b16      	ldr	r3, [pc, #88]	@ (8004594 <HAL_TIM_PWM_MspInit+0x134>)
 800453a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004544:	2301      	movs	r3, #1
 8004546:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004548:	2302      	movs	r3, #2
 800454a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454c:	2300      	movs	r3, #0
 800454e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004550:	2300      	movs	r3, #0
 8004552:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004554:	2302      	movs	r3, #2
 8004556:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004558:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800455c:	4619      	mov	r1, r3
 800455e:	480e      	ldr	r0, [pc, #56]	@ (8004598 <HAL_TIM_PWM_MspInit+0x138>)
 8004560:	f003 fe36 	bl	80081d0 <HAL_GPIO_Init>
}
 8004564:	e010      	b.n	8004588 <HAL_TIM_PWM_MspInit+0x128>
  else if(htim_pwm->Instance==TIM15)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a0d      	ldr	r2, [pc, #52]	@ (80045a0 <HAL_TIM_PWM_MspInit+0x140>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d10b      	bne.n	8004588 <HAL_TIM_PWM_MspInit+0x128>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004570:	4b08      	ldr	r3, [pc, #32]	@ (8004594 <HAL_TIM_PWM_MspInit+0x134>)
 8004572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004574:	4a07      	ldr	r2, [pc, #28]	@ (8004594 <HAL_TIM_PWM_MspInit+0x134>)
 8004576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800457a:	6613      	str	r3, [r2, #96]	@ 0x60
 800457c:	4b05      	ldr	r3, [pc, #20]	@ (8004594 <HAL_TIM_PWM_MspInit+0x134>)
 800457e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
}
 8004588:	bf00      	nop
 800458a:	3738      	adds	r7, #56	@ 0x38
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40012c00 	.word	0x40012c00
 8004594:	40021000 	.word	0x40021000
 8004598:	48001000 	.word	0x48001000
 800459c:	40000800 	.word	0x40000800
 80045a0:	40014000 	.word	0x40014000

080045a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a16      	ldr	r2, [pc, #88]	@ (800460c <HAL_TIM_Base_MspInit+0x68>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d10c      	bne.n	80045d0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045b6:	4b16      	ldr	r3, [pc, #88]	@ (8004610 <HAL_TIM_Base_MspInit+0x6c>)
 80045b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ba:	4a15      	ldr	r2, [pc, #84]	@ (8004610 <HAL_TIM_Base_MspInit+0x6c>)
 80045bc:	f043 0302 	orr.w	r3, r3, #2
 80045c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80045c2:	4b13      	ldr	r3, [pc, #76]	@ (8004610 <HAL_TIM_Base_MspInit+0x6c>)
 80045c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80045ce:	e018      	b.n	8004602 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a0f      	ldr	r2, [pc, #60]	@ (8004614 <HAL_TIM_Base_MspInit+0x70>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d113      	bne.n	8004602 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80045da:	4b0d      	ldr	r3, [pc, #52]	@ (8004610 <HAL_TIM_Base_MspInit+0x6c>)
 80045dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045de:	4a0c      	ldr	r2, [pc, #48]	@ (8004610 <HAL_TIM_Base_MspInit+0x6c>)
 80045e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80045e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004610 <HAL_TIM_Base_MspInit+0x6c>)
 80045e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045ee:	60bb      	str	r3, [r7, #8]
 80045f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80045f2:	2200      	movs	r2, #0
 80045f4:	2100      	movs	r1, #0
 80045f6:	201a      	movs	r0, #26
 80045f8:	f003 fcfb 	bl	8007ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80045fc:	201a      	movs	r0, #26
 80045fe:	f003 fd14 	bl	800802a <HAL_NVIC_EnableIRQ>
}
 8004602:	bf00      	nop
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40000400 	.word	0x40000400
 8004610:	40021000 	.word	0x40021000
 8004614:	40014800 	.word	0x40014800

08004618 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08e      	sub	sp, #56	@ 0x38
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004620:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	609a      	str	r2, [r3, #8]
 800462c:	60da      	str	r2, [r3, #12]
 800462e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a66      	ldr	r2, [pc, #408]	@ (80047d0 <HAL_TIM_MspPostInit+0x1b8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d11d      	bne.n	8004676 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800463a:	4b66      	ldr	r3, [pc, #408]	@ (80047d4 <HAL_TIM_MspPostInit+0x1bc>)
 800463c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800463e:	4a65      	ldr	r2, [pc, #404]	@ (80047d4 <HAL_TIM_MspPostInit+0x1bc>)
 8004640:	f043 0310 	orr.w	r3, r3, #16
 8004644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004646:	4b63      	ldr	r3, [pc, #396]	@ (80047d4 <HAL_TIM_MspPostInit+0x1bc>)
 8004648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	623b      	str	r3, [r7, #32]
 8004650:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004652:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004656:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004658:	2302      	movs	r3, #2
 800465a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465c:	2300      	movs	r3, #0
 800465e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004660:	2300      	movs	r3, #0
 8004662:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004664:	2301      	movs	r3, #1
 8004666:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800466c:	4619      	mov	r1, r3
 800466e:	485a      	ldr	r0, [pc, #360]	@ (80047d8 <HAL_TIM_MspPostInit+0x1c0>)
 8004670:	f003 fdae 	bl	80081d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004674:	e0a7      	b.n	80047c6 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM2)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800467e:	d13a      	bne.n	80046f6 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004680:	4b54      	ldr	r3, [pc, #336]	@ (80047d4 <HAL_TIM_MspPostInit+0x1bc>)
 8004682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004684:	4a53      	ldr	r2, [pc, #332]	@ (80047d4 <HAL_TIM_MspPostInit+0x1bc>)
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800468c:	4b51      	ldr	r3, [pc, #324]	@ (80047d4 <HAL_TIM_MspPostInit+0x1bc>)
 800468e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	61fb      	str	r3, [r7, #28]
 8004696:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004698:	4b4e      	ldr	r3, [pc, #312]	@ (80047d4 <HAL_TIM_MspPostInit+0x1bc>)
 800469a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800469c:	4a4d      	ldr	r2, [pc, #308]	@ (80047d4 <HAL_TIM_MspPostInit+0x1bc>)
 800469e:	f043 0302 	orr.w	r3, r3, #2
 80046a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046a4:	4b4b      	ldr	r3, [pc, #300]	@ (80047d4 <HAL_TIM_MspPostInit+0x1bc>)
 80046a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80046b0:	2301      	movs	r3, #1
 80046b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b4:	2302      	movs	r3, #2
 80046b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046bc:	2300      	movs	r3, #0
 80046be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046c0:	2301      	movs	r3, #1
 80046c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046c8:	4619      	mov	r1, r3
 80046ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80046ce:	f003 fd7f 	bl	80081d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80046d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d8:	2302      	movs	r3, #2
 80046da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e0:	2300      	movs	r3, #0
 80046e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046e4:	2301      	movs	r3, #1
 80046e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046ec:	4619      	mov	r1, r3
 80046ee:	483b      	ldr	r0, [pc, #236]	@ (80047dc <HAL_TIM_MspPostInit+0x1c4>)
 80046f0:	f003 fd6e 	bl	80081d0 <HAL_GPIO_Init>
}
 80046f4:	e067      	b.n	80047c6 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM3)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a39      	ldr	r2, [pc, #228]	@ (80047e0 <HAL_TIM_MspPostInit+0x1c8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d11d      	bne.n	800473c <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004700:	4b34      	ldr	r3, [pc, #208]	@ (80047d4 <HAL_TIM_MspPostInit+0x1bc>)
 8004702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004704:	4a33      	ldr	r2, [pc, #204]	@ (80047d4 <HAL_TIM_MspPostInit+0x1bc>)
 8004706:	f043 0304 	orr.w	r3, r3, #4
 800470a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800470c:	4b31      	ldr	r3, [pc, #196]	@ (80047d4 <HAL_TIM_MspPostInit+0x1bc>)
 800470e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004718:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800471c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471e:	2302      	movs	r3, #2
 8004720:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004722:	2300      	movs	r3, #0
 8004724:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004726:	2300      	movs	r3, #0
 8004728:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800472a:	2302      	movs	r3, #2
 800472c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800472e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004732:	4619      	mov	r1, r3
 8004734:	482b      	ldr	r0, [pc, #172]	@ (80047e4 <HAL_TIM_MspPostInit+0x1cc>)
 8004736:	f003 fd4b 	bl	80081d0 <HAL_GPIO_Init>
}
 800473a:	e044      	b.n	80047c6 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM4)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a29      	ldr	r2, [pc, #164]	@ (80047e8 <HAL_TIM_MspPostInit+0x1d0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d11d      	bne.n	8004782 <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004746:	4b23      	ldr	r3, [pc, #140]	@ (80047d4 <HAL_TIM_MspPostInit+0x1bc>)
 8004748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800474a:	4a22      	ldr	r2, [pc, #136]	@ (80047d4 <HAL_TIM_MspPostInit+0x1bc>)
 800474c:	f043 0308 	orr.w	r3, r3, #8
 8004750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004752:	4b20      	ldr	r3, [pc, #128]	@ (80047d4 <HAL_TIM_MspPostInit+0x1bc>)
 8004754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800475e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004762:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004764:	2302      	movs	r3, #2
 8004766:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004768:	2300      	movs	r3, #0
 800476a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800476c:	2300      	movs	r3, #0
 800476e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004770:	2302      	movs	r3, #2
 8004772:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004778:	4619      	mov	r1, r3
 800477a:	481c      	ldr	r0, [pc, #112]	@ (80047ec <HAL_TIM_MspPostInit+0x1d4>)
 800477c:	f003 fd28 	bl	80081d0 <HAL_GPIO_Init>
}
 8004780:	e021      	b.n	80047c6 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM15)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1a      	ldr	r2, [pc, #104]	@ (80047f0 <HAL_TIM_MspPostInit+0x1d8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d11c      	bne.n	80047c6 <HAL_TIM_MspPostInit+0x1ae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800478c:	4b11      	ldr	r3, [pc, #68]	@ (80047d4 <HAL_TIM_MspPostInit+0x1bc>)
 800478e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004790:	4a10      	ldr	r2, [pc, #64]	@ (80047d4 <HAL_TIM_MspPostInit+0x1bc>)
 8004792:	f043 0302 	orr.w	r3, r3, #2
 8004796:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004798:	4b0e      	ldr	r3, [pc, #56]	@ (80047d4 <HAL_TIM_MspPostInit+0x1bc>)
 800479a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80047a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80047a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047aa:	2302      	movs	r3, #2
 80047ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047b2:	2300      	movs	r3, #0
 80047b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80047b6:	230e      	movs	r3, #14
 80047b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047be:	4619      	mov	r1, r3
 80047c0:	4806      	ldr	r0, [pc, #24]	@ (80047dc <HAL_TIM_MspPostInit+0x1c4>)
 80047c2:	f003 fd05 	bl	80081d0 <HAL_GPIO_Init>
}
 80047c6:	bf00      	nop
 80047c8:	3738      	adds	r7, #56	@ 0x38
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40012c00 	.word	0x40012c00
 80047d4:	40021000 	.word	0x40021000
 80047d8:	48001000 	.word	0x48001000
 80047dc:	48000400 	.word	0x48000400
 80047e0:	40000400 	.word	0x40000400
 80047e4:	48000800 	.word	0x48000800
 80047e8:	40000800 	.word	0x40000800
 80047ec:	48000c00 	.word	0x48000c00
 80047f0:	40014000 	.word	0x40014000

080047f4 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08a      	sub	sp, #40	@ 0x28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a50      	ldr	r2, [pc, #320]	@ (8004944 <HAL_SAI_MspInit+0x150>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d124      	bne.n	8004850 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8004806:	4b50      	ldr	r3, [pc, #320]	@ (8004948 <HAL_SAI_MspInit+0x154>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10b      	bne.n	8004826 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800480e:	4b4f      	ldr	r3, [pc, #316]	@ (800494c <HAL_SAI_MspInit+0x158>)
 8004810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004812:	4a4e      	ldr	r2, [pc, #312]	@ (800494c <HAL_SAI_MspInit+0x158>)
 8004814:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004818:	6613      	str	r3, [r2, #96]	@ 0x60
 800481a:	4b4c      	ldr	r3, [pc, #304]	@ (800494c <HAL_SAI_MspInit+0x158>)
 800481c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8004826:	4b48      	ldr	r3, [pc, #288]	@ (8004948 <HAL_SAI_MspInit+0x154>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3301      	adds	r3, #1
 800482c:	4a46      	ldr	r2, [pc, #280]	@ (8004948 <HAL_SAI_MspInit+0x154>)
 800482e:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004830:	2374      	movs	r3, #116	@ 0x74
 8004832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004834:	2302      	movs	r3, #2
 8004836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004838:	2300      	movs	r3, #0
 800483a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483c:	2300      	movs	r3, #0
 800483e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004840:	230d      	movs	r3, #13
 8004842:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004844:	f107 0314 	add.w	r3, r7, #20
 8004848:	4619      	mov	r1, r3
 800484a:	4841      	ldr	r0, [pc, #260]	@ (8004950 <HAL_SAI_MspInit+0x15c>)
 800484c:	f003 fcc0 	bl	80081d0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a3f      	ldr	r2, [pc, #252]	@ (8004954 <HAL_SAI_MspInit+0x160>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d135      	bne.n	80048c6 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800485a:	4b3b      	ldr	r3, [pc, #236]	@ (8004948 <HAL_SAI_MspInit+0x154>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10b      	bne.n	800487a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8004862:	4b3a      	ldr	r3, [pc, #232]	@ (800494c <HAL_SAI_MspInit+0x158>)
 8004864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004866:	4a39      	ldr	r2, [pc, #228]	@ (800494c <HAL_SAI_MspInit+0x158>)
 8004868:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800486c:	6613      	str	r3, [r2, #96]	@ 0x60
 800486e:	4b37      	ldr	r3, [pc, #220]	@ (800494c <HAL_SAI_MspInit+0x158>)
 8004870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004872:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800487a:	4b33      	ldr	r3, [pc, #204]	@ (8004948 <HAL_SAI_MspInit+0x154>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3301      	adds	r3, #1
 8004880:	4a31      	ldr	r2, [pc, #196]	@ (8004948 <HAL_SAI_MspInit+0x154>)
 8004882:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004884:	2308      	movs	r3, #8
 8004886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004888:	2302      	movs	r3, #2
 800488a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004890:	2300      	movs	r3, #0
 8004892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004894:	230d      	movs	r3, #13
 8004896:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004898:	f107 0314 	add.w	r3, r7, #20
 800489c:	4619      	mov	r1, r3
 800489e:	482c      	ldr	r0, [pc, #176]	@ (8004950 <HAL_SAI_MspInit+0x15c>)
 80048a0:	f003 fc96 	bl	80081d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80048a4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80048a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048aa:	2302      	movs	r3, #2
 80048ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048b2:	2300      	movs	r3, #0
 80048b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80048b6:	230d      	movs	r3, #13
 80048b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80048ba:	f107 0314 	add.w	r3, r7, #20
 80048be:	4619      	mov	r1, r3
 80048c0:	4825      	ldr	r0, [pc, #148]	@ (8004958 <HAL_SAI_MspInit+0x164>)
 80048c2:	f003 fc85 	bl	80081d0 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a24      	ldr	r2, [pc, #144]	@ (800495c <HAL_SAI_MspInit+0x168>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d135      	bne.n	800493c <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80048d0:	4b23      	ldr	r3, [pc, #140]	@ (8004960 <HAL_SAI_MspInit+0x16c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10b      	bne.n	80048f0 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80048d8:	4b1c      	ldr	r3, [pc, #112]	@ (800494c <HAL_SAI_MspInit+0x158>)
 80048da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048dc:	4a1b      	ldr	r2, [pc, #108]	@ (800494c <HAL_SAI_MspInit+0x158>)
 80048de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80048e4:	4b19      	ldr	r3, [pc, #100]	@ (800494c <HAL_SAI_MspInit+0x158>)
 80048e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 80048f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004960 <HAL_SAI_MspInit+0x16c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3301      	adds	r3, #1
 80048f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004960 <HAL_SAI_MspInit+0x16c>)
 80048f8:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80048fa:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80048fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004900:	2302      	movs	r3, #2
 8004902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004904:	2300      	movs	r3, #0
 8004906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004908:	2300      	movs	r3, #0
 800490a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800490c:	230d      	movs	r3, #13
 800490e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004910:	f107 0314 	add.w	r3, r7, #20
 8004914:	4619      	mov	r1, r3
 8004916:	4813      	ldr	r0, [pc, #76]	@ (8004964 <HAL_SAI_MspInit+0x170>)
 8004918:	f003 fc5a 	bl	80081d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800491c:	2340      	movs	r3, #64	@ 0x40
 800491e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004920:	2302      	movs	r3, #2
 8004922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004928:	2300      	movs	r3, #0
 800492a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800492c:	230d      	movs	r3, #13
 800492e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004930:	f107 0314 	add.w	r3, r7, #20
 8004934:	4619      	mov	r1, r3
 8004936:	480c      	ldr	r0, [pc, #48]	@ (8004968 <HAL_SAI_MspInit+0x174>)
 8004938:	f003 fc4a 	bl	80081d0 <HAL_GPIO_Init>

    }
}
 800493c:	bf00      	nop
 800493e:	3728      	adds	r7, #40	@ 0x28
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40015404 	.word	0x40015404
 8004948:	20000a90 	.word	0x20000a90
 800494c:	40021000 	.word	0x40021000
 8004950:	48001000 	.word	0x48001000
 8004954:	40015424 	.word	0x40015424
 8004958:	48001400 	.word	0x48001400
 800495c:	40015804 	.word	0x40015804
 8004960:	20000a94 	.word	0x20000a94
 8004964:	48000400 	.word	0x48000400
 8004968:	48000800 	.word	0x48000800

0800496c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004970:	bf00      	nop
 8004972:	e7fd      	b.n	8004970 <NMI_Handler+0x4>

08004974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004978:	bf00      	nop
 800497a:	e7fd      	b.n	8004978 <HardFault_Handler+0x4>

0800497c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004980:	bf00      	nop
 8004982:	e7fd      	b.n	8004980 <MemManage_Handler+0x4>

08004984 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004988:	bf00      	nop
 800498a:	e7fd      	b.n	8004988 <BusFault_Handler+0x4>

0800498c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004990:	bf00      	nop
 8004992:	e7fd      	b.n	8004990 <UsageFault_Handler+0x4>

08004994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004998:	bf00      	nop
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049a2:	b480      	push	{r7}
 80049a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049a6:	bf00      	nop
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049b4:	bf00      	nop
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049c2:	f002 f97b 	bl	8006cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049c6:	bf00      	nop
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80049d0:	2020      	movs	r0, #32
 80049d2:	f003 fdbf 	bl	8008554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  LoRaRecieve = 1;
 80049d6:	4b02      	ldr	r3, [pc, #8]	@ (80049e0 <EXTI9_5_IRQHandler+0x14>)
 80049d8:	2201      	movs	r2, #1
 80049da:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80049dc:	bf00      	nop
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000a8e 	.word	0x20000a8e

080049e4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049e8:	4803      	ldr	r0, [pc, #12]	@ (80049f8 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80049ea:	f009 fb07 	bl	800dffc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80049ee:	4803      	ldr	r0, [pc, #12]	@ (80049fc <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80049f0:	f009 fb04 	bl	800dffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80049f4:	bf00      	nop
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	200008ac 	.word	0x200008ac
 80049fc:	20000a28 	.word	0x20000a28

08004a00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004a04:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004a08:	f003 fda4 	bl	8008554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  KeyPadSelect = 1;
 8004a0c:	4b02      	ldr	r3, [pc, #8]	@ (8004a18 <EXTI15_10_IRQHandler+0x18>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	701a      	strb	r2, [r3, #0]


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a12:	bf00      	nop
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20000a8d 	.word	0x20000a8d
 8004a1c:	00000000 	.word	0x00000000

08004a20 <init_analytics>:
// (calculated from exercise baseline)
// ~80% of minimum optimal heart rate 0.8 * 0.64*(220-age)
static int age = 0;
static int heart_threshold = INT_MAX;

void init_analytics(int age) {
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  heart_threshold = (220-age)*0.60;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f1c3 03dc 	rsb	r3, r3, #220	@ 0xdc
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fb fd90 	bl	8000554 <__aeabi_i2d>
 8004a34:	a30c      	add	r3, pc, #48	@ (adr r3, 8004a68 <init_analytics+0x48>)
 8004a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3a:	f7fb fdf5 	bl	8000628 <__aeabi_dmul>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	4610      	mov	r0, r2
 8004a44:	4619      	mov	r1, r3
 8004a46:	f7fc f89f 	bl	8000b88 <__aeabi_d2iz>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	4a04      	ldr	r2, [pc, #16]	@ (8004a60 <init_analytics+0x40>)
 8004a4e:	6013      	str	r3, [r2, #0]
  state = k_post_init;
 8004a50:	4b04      	ldr	r3, [pc, #16]	@ (8004a64 <init_analytics+0x44>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	701a      	strb	r2, [r3, #0]
}
 8004a56:	bf00      	nop
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000030 	.word	0x20000030
 8004a64:	20000afc 	.word	0x20000afc
 8004a68:	33333333 	.word	0x33333333
 8004a6c:	3fe33333 	.word	0x3fe33333

08004a70 <heartRateHigh>:

// Heart Rate too High
uint8_t heartRateHigh(int bpm, int age) {
 8004a70:	b5b0      	push	{r4, r5, r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
	int maxHR = 220 - age;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	f1c3 03dc 	rsb	r3, r3, #220	@ 0xdc
 8004a80:	60fb      	str	r3, [r7, #12]
	if (bpm > maxHR*0.80) return 1;
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fb fd66 	bl	8000554 <__aeabi_i2d>
 8004a88:	4604      	mov	r4, r0
 8004a8a:	460d      	mov	r5, r1
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f7fb fd61 	bl	8000554 <__aeabi_i2d>
 8004a92:	a30b      	add	r3, pc, #44	@ (adr r3, 8004ac0 <heartRateHigh+0x50>)
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	f7fb fdc6 	bl	8000628 <__aeabi_dmul>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	f7fc f850 	bl	8000b48 <__aeabi_dcmpgt>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <heartRateHigh+0x42>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <heartRateHigh+0x44>
	return 0;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bdb0      	pop	{r4, r5, r7, pc}
 8004abc:	f3af 8000 	nop.w
 8004ac0:	9999999a 	.word	0x9999999a
 8004ac4:	3fe99999 	.word	0x3fe99999

08004ac8 <heartRateLow>:

// Heart Rate too Low
uint8_t heartRateLow(int bpm, int age) {
 8004ac8:	b5b0      	push	{r4, r5, r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
	int maxHR = 220 - age;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	f1c3 03dc 	rsb	r3, r3, #220	@ 0xdc
 8004ad8:	60fb      	str	r3, [r7, #12]
	if (bpm < maxHR*0.60) return 1;
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7fb fd3a 	bl	8000554 <__aeabi_i2d>
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	460d      	mov	r5, r1
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7fb fd35 	bl	8000554 <__aeabi_i2d>
 8004aea:	a30b      	add	r3, pc, #44	@ (adr r3, 8004b18 <heartRateLow+0x50>)
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	f7fb fd9a 	bl	8000628 <__aeabi_dmul>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4620      	mov	r0, r4
 8004afa:	4629      	mov	r1, r5
 8004afc:	f7fc f806 	bl	8000b0c <__aeabi_dcmplt>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <heartRateLow+0x42>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <heartRateLow+0x44>
	return 0;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bdb0      	pop	{r4, r5, r7, pc}
 8004b14:	f3af 8000 	nop.w
 8004b18:	33333333 	.word	0x33333333
 8004b1c:	3fe33333 	.word	0x3fe33333

08004b20 <input_data>:

// Requires: speed in meters/s
void input_data(int bpm, float speed) {
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	ed87 0a00 	vstr	s0, [r7]
  switch (state) {
 8004b2c:	4b5d      	ldr	r3, [pc, #372]	@ (8004ca4 <input_data+0x184>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	f200 80b3 	bhi.w	8004c9c <input_data+0x17c>
 8004b36:	a201      	add	r2, pc, #4	@ (adr r2, 8004b3c <input_data+0x1c>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004c8f 	.word	0x08004c8f
 8004b40:	08004b4d 	.word	0x08004b4d
 8004b44:	08004b73 	.word	0x08004b73
 8004b48:	08004b99 	.word	0x08004b99
    case k_pre_init:
      /* idle until init is called */
      break;
    case k_post_init:
      // if athlete starts moving or heart indicates exercise
      if (speed > SPEED_THRESHOLD || bpm > heart_threshold) {
 8004b4c:	edd7 7a00 	vldr	s15, [r7]
 8004b50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5c:	dc05      	bgt.n	8004b6a <input_data+0x4a>
 8004b5e:	4b52      	ldr	r3, [pc, #328]	@ (8004ca8 <input_data+0x188>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	f340 8094 	ble.w	8004c92 <input_data+0x172>
        state = k_exercise_baseline;
 8004b6a:	4b4e      	ldr	r3, [pc, #312]	@ (8004ca4 <input_data+0x184>)
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004b70:	e08f      	b.n	8004c92 <input_data+0x172>
    case k_exercise_baseline:
      update_data(bpm, speed);
 8004b72:	ed97 0a00 	vldr	s0, [r7]
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f8f4 	bl	8004d64 <update_data>
      if (data_index == DATA_BUFFER_LENGTH) {
 8004b7c:	4b4b      	ldr	r3, [pc, #300]	@ (8004cac <input_data+0x18c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b18      	cmp	r3, #24
 8004b82:	f040 8088 	bne.w	8004c96 <input_data+0x176>
        calculate_exercise_strain();
 8004b86:	f000 f91f 	bl	8004dc8 <calculate_exercise_strain>
        data_index = 0;
 8004b8a:	4b48      	ldr	r3, [pc, #288]	@ (8004cac <input_data+0x18c>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
        state = k_exercise;
 8004b90:	4b44      	ldr	r3, [pc, #272]	@ (8004ca4 <input_data+0x184>)
 8004b92:	2203      	movs	r2, #3
 8004b94:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004b96:	e07e      	b.n	8004c96 <input_data+0x176>
    case k_exercise: {
    	avg_strain = exercise_base_strain;
 8004b98:	4b45      	ldr	r3, [pc, #276]	@ (8004cb0 <input_data+0x190>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a45      	ldr	r2, [pc, #276]	@ (8004cb4 <input_data+0x194>)
 8004b9e:	6013      	str	r3, [r2, #0]
        float temp_strain = get_strain(bpm, speed);
 8004ba0:	ed97 0a00 	vldr	s0, [r7]
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f8b5 	bl	8004d14 <get_strain>
 8004baa:	ed87 0a02 	vstr	s0, [r7, #8]

		  if (first_strain && temp_strain != -1) {
 8004bae:	4b42      	ldr	r3, [pc, #264]	@ (8004cb8 <input_data+0x198>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d023      	beq.n	8004bfe <input_data+0xde>
 8004bb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bba:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004bbe:	eef4 7a47 	vcmp.f32	s15, s14
 8004bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc6:	d01a      	beq.n	8004bfe <input_data+0xde>
			  current_strain = temp_strain;
 8004bc8:	4a3c      	ldr	r2, [pc, #240]	@ (8004cbc <input_data+0x19c>)
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	6013      	str	r3, [r2, #0]
			  for (int i = 0; i < STRAIN_BUF_LENGTH; ++i) {
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	e00d      	b.n	8004bf0 <input_data+0xd0>
				  strain_buf[i] = current_strain;
 8004bd4:	4b39      	ldr	r3, [pc, #228]	@ (8004cbc <input_data+0x19c>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	4939      	ldr	r1, [pc, #228]	@ (8004cc0 <input_data+0x1a0>)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	440b      	add	r3, r1
 8004be0:	601a      	str	r2, [r3, #0]
				  avg_strain = current_strain;
 8004be2:	4b36      	ldr	r3, [pc, #216]	@ (8004cbc <input_data+0x19c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a33      	ldr	r2, [pc, #204]	@ (8004cb4 <input_data+0x194>)
 8004be8:	6013      	str	r3, [r2, #0]
			  for (int i = 0; i < STRAIN_BUF_LENGTH; ++i) {
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	3301      	adds	r3, #1
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	2b05      	cmp	r3, #5
 8004bf4:	ddee      	ble.n	8004bd4 <input_data+0xb4>
			  }
			  first_strain = 0;
 8004bf6:	4b30      	ldr	r3, [pc, #192]	@ (8004cb8 <input_data+0x198>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]
			  running_total += current_strain;
			  running_total /= STRAIN_BUF_LENGTH;
			  avg_strain = running_total;
		  }
      }
      break;
 8004bfc:	e04d      	b.n	8004c9a <input_data+0x17a>
		  } else if (temp_strain != -1) {
 8004bfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c02:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004c06:	eef4 7a47 	vcmp.f32	s15, s14
 8004c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0e:	d044      	beq.n	8004c9a <input_data+0x17a>
			  current_strain = temp_strain;
 8004c10:	4a2a      	ldr	r2, [pc, #168]	@ (8004cbc <input_data+0x19c>)
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	6013      	str	r3, [r2, #0]
			  float running_total = 0;
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	613b      	str	r3, [r7, #16]
			  for (int i = 0; i < STRAIN_BUF_LENGTH - 1; ++i) {
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	e019      	b.n	8004c56 <input_data+0x136>
				  strain_buf[i] = strain_buf[i + 1];
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3301      	adds	r3, #1
 8004c26:	4a26      	ldr	r2, [pc, #152]	@ (8004cc0 <input_data+0x1a0>)
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4924      	ldr	r1, [pc, #144]	@ (8004cc0 <input_data+0x1a0>)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	601a      	str	r2, [r3, #0]
				  running_total += strain_buf[i];
 8004c38:	4a21      	ldr	r2, [pc, #132]	@ (8004cc0 <input_data+0x1a0>)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	edd3 7a00 	vldr	s15, [r3]
 8004c44:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c4c:	edc7 7a04 	vstr	s15, [r7, #16]
			  for (int i = 0; i < STRAIN_BUF_LENGTH - 1; ++i) {
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3301      	adds	r3, #1
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	dde2      	ble.n	8004c22 <input_data+0x102>
			  strain_buf[STRAIN_BUF_LENGTH - 1] = current_strain;
 8004c5c:	4b17      	ldr	r3, [pc, #92]	@ (8004cbc <input_data+0x19c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a17      	ldr	r2, [pc, #92]	@ (8004cc0 <input_data+0x1a0>)
 8004c62:	6153      	str	r3, [r2, #20]
			  running_total += current_strain;
 8004c64:	4b15      	ldr	r3, [pc, #84]	@ (8004cbc <input_data+0x19c>)
 8004c66:	edd3 7a00 	vldr	s15, [r3]
 8004c6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c72:	edc7 7a04 	vstr	s15, [r7, #16]
			  running_total /= STRAIN_BUF_LENGTH;
 8004c76:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c7a:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8004c7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c82:	edc7 7a04 	vstr	s15, [r7, #16]
			  avg_strain = running_total;
 8004c86:	4a0b      	ldr	r2, [pc, #44]	@ (8004cb4 <input_data+0x194>)
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	6013      	str	r3, [r2, #0]
      break;
 8004c8c:	e005      	b.n	8004c9a <input_data+0x17a>
      break;
 8004c8e:	bf00      	nop
 8004c90:	e004      	b.n	8004c9c <input_data+0x17c>
      break;
 8004c92:	bf00      	nop
 8004c94:	e002      	b.n	8004c9c <input_data+0x17c>
      break;
 8004c96:	bf00      	nop
 8004c98:	e000      	b.n	8004c9c <input_data+0x17c>
      break;
 8004c9a:	bf00      	nop
  }


}
 8004c9c:	bf00      	nop
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	20000afc 	.word	0x20000afc
 8004ca8:	20000030 	.word	0x20000030
 8004cac:	20000af8 	.word	0x20000af8
 8004cb0:	20000028 	.word	0x20000028
 8004cb4:	20000024 	.word	0x20000024
 8004cb8:	2000002c 	.word	0x2000002c
 8004cbc:	20000020 	.word	0x20000020
 8004cc0:	20000b00 	.word	0x20000b00

08004cc4 <get_strain_factor>:

float get_strain_factor() {
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  if (state != k_exercise) return state;
 8004cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8004d04 <get_strain_factor+0x40>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d006      	beq.n	8004cde <get_strain_factor+0x1a>
 8004cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004d04 <get_strain_factor+0x40>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	ee07 3a90 	vmov	s15, r3
 8004cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cdc:	e00b      	b.n	8004cf6 <get_strain_factor+0x32>
  return 100 * (exercise_base_strain / avg_strain);
 8004cde:	4b0a      	ldr	r3, [pc, #40]	@ (8004d08 <get_strain_factor+0x44>)
 8004ce0:	edd3 6a00 	vldr	s13, [r3]
 8004ce4:	4b09      	ldr	r3, [pc, #36]	@ (8004d0c <get_strain_factor+0x48>)
 8004ce6:	ed93 7a00 	vldr	s14, [r3]
 8004cea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cee:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004d10 <get_strain_factor+0x4c>
 8004cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20000afc 	.word	0x20000afc
 8004d08:	20000028 	.word	0x20000028
 8004d0c:	20000024 	.word	0x20000024
 8004d10:	42c80000 	.word	0x42c80000

08004d14 <get_strain>:

inline
float get_strain(int bpm, float speed) {
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	ed87 0a00 	vstr	s0, [r7]
	// -1 if divide by zero, will not end up being pushed
	// to data array or updating curr_strain
  return (speed == 0) ? -1 : bpm / (speed * 60.0f);
 8004d20:	edd7 7a00 	vldr	s15, [r7]
 8004d24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d2c:	d00d      	beq.n	8004d4a <get_strain+0x36>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	ee07 3a90 	vmov	s15, r3
 8004d34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d38:	edd7 7a00 	vldr	s15, [r7]
 8004d3c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8004d60 <get_strain+0x4c>
 8004d40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d44:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d48:	e001      	b.n	8004d4e <get_strain+0x3a>
 8004d4a:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8004d4e:	eef0 7a66 	vmov.f32	s15, s13
  //return (state == k_exercise) ? current_strain : state;
}
 8004d52:	eeb0 0a67 	vmov.f32	s0, s15
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	42700000 	.word	0x42700000

08004d64 <update_data>:

void update_data(int bpm, float speed) {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	ed87 0a00 	vstr	s0, [r7]
  current_strain = get_strain(bpm, speed);
 8004d70:	ed97 0a00 	vldr	s0, [r7]
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff ffcd 	bl	8004d14 <get_strain>
 8004d7a:	eef0 7a40 	vmov.f32	s15, s0
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004dbc <update_data+0x58>)
 8004d80:	edc3 7a00 	vstr	s15, [r3]
  if (current_strain == -1) return;
 8004d84:	4b0d      	ldr	r3, [pc, #52]	@ (8004dbc <update_data+0x58>)
 8004d86:	edd3 7a00 	vldr	s15, [r3]
 8004d8a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004d8e:	eef4 7a47 	vcmp.f32	s15, s14
 8004d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d96:	d00d      	beq.n	8004db4 <update_data+0x50>
  data[data_index] = current_strain;
 8004d98:	4b09      	ldr	r3, [pc, #36]	@ (8004dc0 <update_data+0x5c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a07      	ldr	r2, [pc, #28]	@ (8004dbc <update_data+0x58>)
 8004d9e:	6812      	ldr	r2, [r2, #0]
 8004da0:	4908      	ldr	r1, [pc, #32]	@ (8004dc4 <update_data+0x60>)
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	601a      	str	r2, [r3, #0]
  ++data_index;
 8004da8:	4b05      	ldr	r3, [pc, #20]	@ (8004dc0 <update_data+0x5c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3301      	adds	r3, #1
 8004dae:	4a04      	ldr	r2, [pc, #16]	@ (8004dc0 <update_data+0x5c>)
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	e000      	b.n	8004db6 <update_data+0x52>
  if (current_strain == -1) return;
 8004db4:	bf00      	nop
}
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20000020 	.word	0x20000020
 8004dc0:	20000af8 	.word	0x20000af8
 8004dc4:	20000a98 	.word	0x20000a98

08004dc8 <calculate_exercise_strain>:

void calculate_exercise_strain(void) {
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
  exercise_base_strain = 0;
 8004dce:	4b15      	ldr	r3, [pc, #84]	@ (8004e24 <calculate_exercise_strain+0x5c>)
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < DATA_BUFFER_LENGTH; ++i) {
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	607b      	str	r3, [r7, #4]
 8004dda:	e010      	b.n	8004dfe <calculate_exercise_strain+0x36>
    exercise_base_strain += data[i];
 8004ddc:	4a12      	ldr	r2, [pc, #72]	@ (8004e28 <calculate_exercise_strain+0x60>)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	ed93 7a00 	vldr	s14, [r3]
 8004de8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e24 <calculate_exercise_strain+0x5c>)
 8004dea:	edd3 7a00 	vldr	s15, [r3]
 8004dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004df2:	4b0c      	ldr	r3, [pc, #48]	@ (8004e24 <calculate_exercise_strain+0x5c>)
 8004df4:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < DATA_BUFFER_LENGTH; ++i) {
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	607b      	str	r3, [r7, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b17      	cmp	r3, #23
 8004e02:	ddeb      	ble.n	8004ddc <calculate_exercise_strain+0x14>
  }
  exercise_base_strain /= DATA_BUFFER_LENGTH;
 8004e04:	4b07      	ldr	r3, [pc, #28]	@ (8004e24 <calculate_exercise_strain+0x5c>)
 8004e06:	ed93 7a00 	vldr	s14, [r3]
 8004e0a:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8004e0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e12:	4b04      	ldr	r3, [pc, #16]	@ (8004e24 <calculate_exercise_strain+0x5c>)
 8004e14:	edc3 7a00 	vstr	s15, [r3]
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	20000028 	.word	0x20000028
 8004e28:	20000a98 	.word	0x20000a98

08004e2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  return 1;
 8004e30:	2301      	movs	r3, #1
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <_kill>:

int _kill(int pid, int sig)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e46:	f00c f815 	bl	8010e74 <__errno>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2216      	movs	r2, #22
 8004e4e:	601a      	str	r2, [r3, #0]
  return -1;
 8004e50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <_exit>:

void _exit (int status)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e64:	f04f 31ff 	mov.w	r1, #4294967295
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff ffe7 	bl	8004e3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e6e:	bf00      	nop
 8004e70:	e7fd      	b.n	8004e6e <_exit+0x12>

08004e72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b086      	sub	sp, #24
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e7e:	2300      	movs	r3, #0
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	e00a      	b.n	8004e9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e84:	f3af 8000 	nop.w
 8004e88:	4601      	mov	r1, r0
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	60ba      	str	r2, [r7, #8]
 8004e90:	b2ca      	uxtb	r2, r1
 8004e92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	3301      	adds	r3, #1
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	dbf0      	blt.n	8004e84 <_read+0x12>
  }

  return len;
 8004ea2:	687b      	ldr	r3, [r7, #4]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	e009      	b.n	8004ed2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	60ba      	str	r2, [r7, #8]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe ff94 	bl	8003df4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	dbf1      	blt.n	8004ebe <_write+0x12>
  }
  return len;
 8004eda:	687b      	ldr	r3, [r7, #4]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <_close>:

int _close(int file)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004eec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004f0c:	605a      	str	r2, [r3, #4]
  return 0;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <_isatty>:

int _isatty(int file)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004f24:	2301      	movs	r3, #1
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b085      	sub	sp, #20
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f54:	4a14      	ldr	r2, [pc, #80]	@ (8004fa8 <_sbrk+0x5c>)
 8004f56:	4b15      	ldr	r3, [pc, #84]	@ (8004fac <_sbrk+0x60>)
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f60:	4b13      	ldr	r3, [pc, #76]	@ (8004fb0 <_sbrk+0x64>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d102      	bne.n	8004f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f68:	4b11      	ldr	r3, [pc, #68]	@ (8004fb0 <_sbrk+0x64>)
 8004f6a:	4a12      	ldr	r2, [pc, #72]	@ (8004fb4 <_sbrk+0x68>)
 8004f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f6e:	4b10      	ldr	r3, [pc, #64]	@ (8004fb0 <_sbrk+0x64>)
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4413      	add	r3, r2
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d207      	bcs.n	8004f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f7c:	f00b ff7a 	bl	8010e74 <__errno>
 8004f80:	4603      	mov	r3, r0
 8004f82:	220c      	movs	r2, #12
 8004f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f86:	f04f 33ff 	mov.w	r3, #4294967295
 8004f8a:	e009      	b.n	8004fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f8c:	4b08      	ldr	r3, [pc, #32]	@ (8004fb0 <_sbrk+0x64>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f92:	4b07      	ldr	r3, [pc, #28]	@ (8004fb0 <_sbrk+0x64>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4413      	add	r3, r2
 8004f9a:	4a05      	ldr	r2, [pc, #20]	@ (8004fb0 <_sbrk+0x64>)
 8004f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	200a0000 	.word	0x200a0000
 8004fac:	00000400 	.word	0x00000400
 8004fb0:	20000b18 	.word	0x20000b18
 8004fb4:	20000c88 	.word	0x20000c88

08004fb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004fbc:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <SystemInit+0x20>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc2:	4a05      	ldr	r2, [pc, #20]	@ (8004fd8 <SystemInit+0x20>)
 8004fc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004fc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004fcc:	bf00      	nop
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	e000ed00 	.word	0xe000ed00

08004fdc <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 8004fee:	89fb      	ldrh	r3, [r7, #14]
 8004ff0:	021b      	lsls	r3, r3, #8
 8004ff2:	b21a      	sxth	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	b21b      	sxth	r3, r3
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	b21b      	sxth	r3, r3
 8004ffe:	b29b      	uxth	r3, r3
}
 8005000:	4618      	mov	r0, r3
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2204      	movs	r2, #4
 8005020:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2204      	movs	r2, #4
 8005026:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005030:	b29a      	uxth	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005038:	b29b      	uxth	r3, r3
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29b      	uxth	r3, r3
 8005042:	b21a      	sxth	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005050:	b29a      	uxth	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005058:	b29b      	uxth	r3, r3
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	b29b      	uxth	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	b29b      	uxth	r3, r3
 8005062:	b21a      	sxth	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	845a      	strh	r2, [r3, #34]	@ 0x22
   g->console.x_pos = g->console.x_end;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
   g->char_v_space = 1;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
   g->font=NULL;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	629a      	str	r2, [r3, #40]	@ 0x28
   g->currentFont.bytes_per_char = 0;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	861a      	strh	r2, [r3, #48]	@ 0x30
   g->currentFont.char_height = 0;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   g->currentFont.char_width = 0;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
   g->currentFont.number_of_chars = 0;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	865a      	strh	r2, [r3, #50]	@ 0x32
   g->currentFont.number_of_offsets = 0;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	869a      	strh	r2, [r3, #52]	@ 0x34
   g->currentFont.widths = NULL;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	639a      	str	r2, [r3, #56]	@ 0x38
   g->currentFont.offsets = NULL;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	63da      	str	r2, [r3, #60]	@ 0x3c
   g->currentFont.data = NULL;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	641a      	str	r2, [r3, #64]	@ 0x40
   g->currentFont.font = NULL;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	645a      	str	r2, [r3, #68]	@ 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f645 425d 	movw	r2, #23645	@ 0x5c5d
 80050d2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
   g->fore_color = C_WHITE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050dc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
   g->back_color = C_BLACK;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
   g->next_window = NULL;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80050fa:	2300      	movs	r3, #0
 80050fc:	73fb      	strb	r3, [r7, #15]
 80050fe:	e010      	b.n	8005122 <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 8005100:	7bfb      	ldrb	r3, [r7, #15]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	330a      	adds	r3, #10
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	4413      	add	r3, r2
 800510a:	2200      	movs	r2, #0
 800510c:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	330a      	adds	r3, #10
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	4413      	add	r3, r2
 8005118:	2200      	movs	r2, #0
 800511a:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	3301      	adds	r3, #1
 8005120:	73fb      	strb	r3, [r7, #15]
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	2b03      	cmp	r3, #3
 8005126:	d9eb      	bls.n	8005100 <UG_Init+0xf4>
   }

   gui = g;
 8005128:	4a04      	ldr	r2, [pc, #16]	@ (800513c <UG_Init+0x130>)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6013      	str	r3, [r2, #0]
   return 1;
 800512e:	2301      	movs	r3, #1
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	20000b1c 	.word	0x20000b1c

08005140 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8005148:	4b04      	ldr	r3, [pc, #16]	@ (800515c <UG_FontSelect+0x1c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	20000b1c 	.word	0x20000b1c

08005160 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af02      	add	r7, sp, #8
 8005166:	4603      	mov	r3, r0
 8005168:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 800516a:	4b0e      	ldr	r3, [pc, #56]	@ (80051a4 <UG_FillScreen+0x44>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29b      	uxth	r3, r3
 800517a:	b21a      	sxth	r2, r3
 800517c:	4b09      	ldr	r3, [pc, #36]	@ (80051a4 <UG_FillScreen+0x44>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29b      	uxth	r3, r3
 800518c:	b219      	sxth	r1, r3
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	460b      	mov	r3, r1
 8005194:	2100      	movs	r1, #0
 8005196:	2000      	movs	r0, #0
 8005198:	f000 f806 	bl	80051a8 <UG_FillFrame>
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	20000b1c 	.word	0x20000b1c

080051a8 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80051a8:	b590      	push	{r4, r7, lr}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4604      	mov	r4, r0
 80051b0:	4608      	mov	r0, r1
 80051b2:	4611      	mov	r1, r2
 80051b4:	461a      	mov	r2, r3
 80051b6:	4623      	mov	r3, r4
 80051b8:	80fb      	strh	r3, [r7, #6]
 80051ba:	4603      	mov	r3, r0
 80051bc:	80bb      	strh	r3, [r7, #4]
 80051be:	460b      	mov	r3, r1
 80051c0:	807b      	strh	r3, [r7, #2]
 80051c2:	4613      	mov	r3, r2
 80051c4:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 80051c6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80051ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	da05      	bge.n	80051de <UG_FillFrame+0x36>
     swap(x1,x2);
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	817b      	strh	r3, [r7, #10]
 80051d6:	887b      	ldrh	r3, [r7, #2]
 80051d8:	80fb      	strh	r3, [r7, #6]
 80051da:	897b      	ldrh	r3, [r7, #10]
 80051dc:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 80051de:	f9b7 2000 	ldrsh.w	r2, [r7]
 80051e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	da05      	bge.n	80051f6 <UG_FillFrame+0x4e>
     swap(y1,y2);
 80051ea:	88bb      	ldrh	r3, [r7, #4]
 80051ec:	813b      	strh	r3, [r7, #8]
 80051ee:	883b      	ldrh	r3, [r7, #0]
 80051f0:	80bb      	strh	r3, [r7, #4]
 80051f2:	893b      	ldrh	r3, [r7, #8]
 80051f4:	803b      	strh	r3, [r7, #0]
//   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
//   {
//      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
//   }

   for( m=y1; m<=y2; m++ )
 80051f6:	88bb      	ldrh	r3, [r7, #4]
 80051f8:	81bb      	strh	r3, [r7, #12]
 80051fa:	e01e      	b.n	800523a <UG_FillFrame+0x92>
   {
      for( n=x1; n<=x2; n++ )
 80051fc:	88fb      	ldrh	r3, [r7, #6]
 80051fe:	81fb      	strh	r3, [r7, #14]
 8005200:	e00f      	b.n	8005222 <UG_FillFrame+0x7a>
      {
         gui->device->pset(n,m,c);
 8005202:	4b13      	ldr	r3, [pc, #76]	@ (8005250 <UG_FillFrame+0xa8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	8c3a      	ldrh	r2, [r7, #32]
 800520c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8005210:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8005214:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8005216:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800521a:	b29b      	uxth	r3, r3
 800521c:	3301      	adds	r3, #1
 800521e:	b29b      	uxth	r3, r3
 8005220:	81fb      	strh	r3, [r7, #14]
 8005222:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005226:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800522a:	429a      	cmp	r2, r3
 800522c:	dde9      	ble.n	8005202 <UG_FillFrame+0x5a>
   for( m=y1; m<=y2; m++ )
 800522e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005232:	b29b      	uxth	r3, r3
 8005234:	3301      	adds	r3, #1
 8005236:	b29b      	uxth	r3, r3
 8005238:	81bb      	strh	r3, [r7, #12]
 800523a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800523e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005242:	429a      	cmp	r2, r3
 8005244:	ddda      	ble.n	80051fc <UG_FillFrame+0x54>
      }
   }
}
 8005246:	bf00      	nop
 8005248:	bf00      	nop
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	bd90      	pop	{r4, r7, pc}
 8005250:	20000b1c 	.word	0x20000b1c

08005254 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005254:	b5b0      	push	{r4, r5, r7, lr}
 8005256:	b08a      	sub	sp, #40	@ 0x28
 8005258:	af02      	add	r7, sp, #8
 800525a:	4604      	mov	r4, r0
 800525c:	4608      	mov	r0, r1
 800525e:	4611      	mov	r1, r2
 8005260:	461a      	mov	r2, r3
 8005262:	4623      	mov	r3, r4
 8005264:	80fb      	strh	r3, [r7, #6]
 8005266:	4603      	mov	r3, r0
 8005268:	80bb      	strh	r3, [r7, #4]
 800526a:	460b      	mov	r3, r1
 800526c:	807b      	strh	r3, [r7, #2]
 800526e:	4613      	mov	r3, r2
 8005270:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8005272:	4b67      	ldr	r3, [pc, #412]	@ (8005410 <UG_DrawLine+0x1bc>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d013      	beq.n	80052aa <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005282:	4b63      	ldr	r3, [pc, #396]	@ (8005410 <UG_DrawLine+0x1bc>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005288:	461d      	mov	r5, r3
 800528a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800528e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005292:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005296:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800529a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	4623      	mov	r3, r4
 80052a0:	47a8      	blx	r5
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 80ae 	beq.w	8005406 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 80052aa:	887a      	ldrh	r2, [r7, #2]
 80052ac:	88fb      	ldrh	r3, [r7, #6]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 80052b4:	883a      	ldrh	r2, [r7, #0]
 80052b6:	88bb      	ldrh	r3, [r7, #4]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 80052be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	bfb8      	it	lt
 80052c6:	425b      	neglt	r3, r3
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 80052cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	bfb8      	it	lt
 80052d4:	425b      	neglt	r3, r3
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 80052da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	dd01      	ble.n	80052e6 <UG_DrawLine+0x92>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e001      	b.n	80052ea <UG_DrawLine+0x96>
 80052e6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ea:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 80052ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	dd01      	ble.n	80052f8 <UG_DrawLine+0xa4>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e001      	b.n	80052fc <UG_DrawLine+0xa8>
 80052f8:	f04f 33ff 	mov.w	r3, #4294967295
 80052fc:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 80052fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005302:	105b      	asrs	r3, r3, #1
 8005304:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8005306:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800530a:	105b      	asrs	r3, r3, #1
 800530c:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8005312:	88bb      	ldrh	r3, [r7, #4]
 8005314:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8005316:	4b3e      	ldr	r3, [pc, #248]	@ (8005410 <UG_DrawLine+0x1bc>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005320:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005324:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005328:	4798      	blx	r3

   if( dxabs >= dyabs )
 800532a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800532e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005332:	429a      	cmp	r2, r3
 8005334:	db33      	blt.n	800539e <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8005336:	2300      	movs	r3, #0
 8005338:	83fb      	strh	r3, [r7, #30]
 800533a:	e029      	b.n	8005390 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 800533c:	8b7a      	ldrh	r2, [r7, #26]
 800533e:	89fb      	ldrh	r3, [r7, #14]
 8005340:	4413      	add	r3, r2
 8005342:	b29b      	uxth	r3, r3
 8005344:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8005346:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800534a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800534e:	429a      	cmp	r2, r3
 8005350:	db09      	blt.n	8005366 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8005352:	8b7a      	ldrh	r2, [r7, #26]
 8005354:	8a3b      	ldrh	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	b29b      	uxth	r3, r3
 800535a:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 800535c:	8afa      	ldrh	r2, [r7, #22]
 800535e:	897b      	ldrh	r3, [r7, #10]
 8005360:	4413      	add	r3, r2
 8005362:	b29b      	uxth	r3, r3
 8005364:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8005366:	8b3a      	ldrh	r2, [r7, #24]
 8005368:	89bb      	ldrh	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	b29b      	uxth	r3, r3
 800536e:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8005370:	4b27      	ldr	r3, [pc, #156]	@ (8005410 <UG_DrawLine+0x1bc>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800537a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800537e:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005382:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8005384:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005388:	b29b      	uxth	r3, r3
 800538a:	3301      	adds	r3, #1
 800538c:	b29b      	uxth	r3, r3
 800538e:	83fb      	strh	r3, [r7, #30]
 8005390:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005394:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005398:	429a      	cmp	r2, r3
 800539a:	dbcf      	blt.n	800533c <UG_DrawLine+0xe8>
 800539c:	e034      	b.n	8005408 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 800539e:	2300      	movs	r3, #0
 80053a0:	83fb      	strh	r3, [r7, #30]
 80053a2:	e029      	b.n	80053f8 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 80053a4:	8bba      	ldrh	r2, [r7, #28]
 80053a6:	8a3b      	ldrh	r3, [r7, #16]
 80053a8:	4413      	add	r3, r2
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 80053ae:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80053b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	db09      	blt.n	80053ce <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 80053ba:	8bba      	ldrh	r2, [r7, #28]
 80053bc:	89fb      	ldrh	r3, [r7, #14]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 80053c4:	8b3a      	ldrh	r2, [r7, #24]
 80053c6:	89bb      	ldrh	r3, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 80053ce:	8afa      	ldrh	r2, [r7, #22]
 80053d0:	897b      	ldrh	r3, [r7, #10]
 80053d2:	4413      	add	r3, r2
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 80053d8:	4b0d      	ldr	r3, [pc, #52]	@ (8005410 <UG_DrawLine+0x1bc>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80053e2:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80053e6:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80053ea:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 80053ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	3301      	adds	r3, #1
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	83fb      	strh	r3, [r7, #30]
 80053f8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80053fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005400:	429a      	cmp	r2, r3
 8005402:	dbcf      	blt.n	80053a4 <UG_DrawLine+0x150>
 8005404:	e000      	b.n	8005408 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005406:	bf00      	nop
      }
   }  
}
 8005408:	3720      	adds	r7, #32
 800540a:	46bd      	mov	sp, r7
 800540c:	bdb0      	pop	{r4, r5, r7, pc}
 800540e:	bf00      	nop
 8005410:	20000b1c 	.word	0x20000b1c

08005414 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8005414:	b590      	push	{r4, r7, lr}
 8005416:	b087      	sub	sp, #28
 8005418:	af02      	add	r7, sp, #8
 800541a:	4603      	mov	r3, r0
 800541c:	603a      	str	r2, [r7, #0]
 800541e:	80fb      	strh	r3, [r7, #6]
 8005420:	460b      	mov	r3, r1
 8005422:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8005428:	88bb      	ldrh	r3, [r7, #4]
 800542a:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 800542c:	4b44      	ldr	r3, [pc, #272]	@ (8005540 <UG_PutString+0x12c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fae4 	bl	8005a00 <_UG_FontSelect>
   while ( *str != 0 )
 8005438:	e064      	b.n	8005504 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800543a:	4b41      	ldr	r3, [pc, #260]	@ (8005540 <UG_PutString+0x12c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 8005446:	463b      	mov	r3, r7
 8005448:	4618      	mov	r0, r3
 800544a:	f000 f915 	bl	8005678 <_UG_DecodeUTF8>
 800544e:	4603      	mov	r3, r0
 8005450:	817b      	strh	r3, [r7, #10]
 8005452:	e004      	b.n	800545e <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	603a      	str	r2, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 800545e:	897b      	ldrh	r3, [r7, #10]
 8005460:	2b0a      	cmp	r3, #10
 8005462:	d105      	bne.n	8005470 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 8005464:	4b36      	ldr	r3, [pc, #216]	@ (8005540 <UG_PutString+0x12c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	81fb      	strh	r3, [r7, #14]
         continue;
 800546e:	e049      	b.n	8005504 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 8005470:	897b      	ldrh	r3, [r7, #10]
 8005472:	2100      	movs	r1, #0
 8005474:	4618      	mov	r0, r3
 8005476:	f000 f977 	bl	8005768 <_UG_GetCharData>
 800547a:	4603      	mov	r3, r0
 800547c:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 800547e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005486:	d03c      	beq.n	8005502 <UG_PutString+0xee>
      if ( xp + cw > gui->device->x_dim - 1 )
 8005488:	4b2d      	ldr	r3, [pc, #180]	@ (8005540 <UG_PutString+0x12c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005492:	4619      	mov	r1, r3
 8005494:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005498:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800549c:	4413      	add	r3, r2
 800549e:	4299      	cmp	r1, r3
 80054a0:	dc11      	bgt.n	80054c6 <UG_PutString+0xb2>
      {
         xp = x;
 80054a2:	88fb      	ldrh	r3, [r7, #6]
 80054a4:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 80054a6:	4b26      	ldr	r3, [pc, #152]	@ (8005540 <UG_PutString+0x12c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80054ae:	b21b      	sxth	r3, r3
 80054b0:	4a23      	ldr	r2, [pc, #140]	@ (8005540 <UG_PutString+0x12c>)
 80054b2:	6812      	ldr	r2, [r2, #0]
 80054b4:	f992 204a 	ldrsb.w	r2, [r2, #74]	@ 0x4a
 80054b8:	4413      	add	r3, r2
 80054ba:	b21b      	sxth	r3, r3
 80054bc:	b29a      	uxth	r2, r3
 80054be:	89bb      	ldrh	r3, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 80054c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005540 <UG_PutString+0x12c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f8b3 404c 	ldrh.w	r4, [r3, #76]	@ 0x4c
 80054ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005540 <UG_PutString+0x12c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 80054d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80054da:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80054de:	8978      	ldrh	r0, [r7, #10]
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	4623      	mov	r3, r4
 80054e4:	f000 fb0e 	bl	8005b04 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 80054e8:	4b15      	ldr	r3, [pc, #84]	@ (8005540 <UG_PutString+0x12c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	893b      	ldrh	r3, [r7, #8]
 80054f4:	4413      	add	r3, r2
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	89fb      	ldrh	r3, [r7, #14]
 80054fa:	4413      	add	r3, r2
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	81fb      	strh	r3, [r7, #14]
 8005500:	e000      	b.n	8005504 <UG_PutString+0xf0>
      if(cw==-1) continue;
 8005502:	bf00      	nop
   while ( *str != 0 )
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d196      	bne.n	800543a <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 800550c:	4b0c      	ldr	r3, [pc, #48]	@ (8005540 <UG_PutString+0x12c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00c      	beq.n	8005536 <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 800551c:	4b08      	ldr	r3, [pc, #32]	@ (8005540 <UG_PutString+0x12c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005522:	461c      	mov	r4, r3
 8005524:	f04f 33ff 	mov.w	r3, #4294967295
 8005528:	f04f 32ff 	mov.w	r2, #4294967295
 800552c:	f04f 31ff 	mov.w	r1, #4294967295
 8005530:	f04f 30ff 	mov.w	r0, #4294967295
 8005534:	47a0      	blx	r4
}
 8005536:	bf00      	nop
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	bd90      	pop	{r4, r7, pc}
 800553e:	bf00      	nop
 8005540:	20000b1c 	.word	0x20000b1c

08005544 <UG_PutChar>:

void UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 8005544:	b590      	push	{r4, r7, lr}
 8005546:	b085      	sub	sp, #20
 8005548:	af02      	add	r7, sp, #8
 800554a:	4604      	mov	r4, r0
 800554c:	4608      	mov	r0, r1
 800554e:	4611      	mov	r1, r2
 8005550:	461a      	mov	r2, r3
 8005552:	4623      	mov	r3, r4
 8005554:	80fb      	strh	r3, [r7, #6]
 8005556:	4603      	mov	r3, r0
 8005558:	80bb      	strh	r3, [r7, #4]
 800555a:	460b      	mov	r3, r1
 800555c:	807b      	strh	r3, [r7, #2]
 800555e:	4613      	mov	r3, r2
 8005560:	803b      	strh	r3, [r7, #0]
    _UG_FontSelect(gui->font);
 8005562:	4b15      	ldr	r3, [pc, #84]	@ (80055b8 <UG_PutChar+0x74>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005568:	4618      	mov	r0, r3
 800556a:	f000 fa49 	bl	8005a00 <_UG_FontSelect>
    _UG_PutChar(chr,x,y,fc,bc);
 800556e:	883c      	ldrh	r4, [r7, #0]
 8005570:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005574:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005578:	88f8      	ldrh	r0, [r7, #6]
 800557a:	8b3b      	ldrh	r3, [r7, #24]
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	4623      	mov	r3, r4
 8005580:	f000 fac0 	bl	8005b04 <_UG_PutChar>
    if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8005584:	4b0c      	ldr	r3, [pc, #48]	@ (80055b8 <UG_PutChar+0x74>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00c      	beq.n	80055ae <UG_PutChar+0x6a>
      ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8005594:	4b08      	ldr	r3, [pc, #32]	@ (80055b8 <UG_PutChar+0x74>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800559a:	461c      	mov	r4, r3
 800559c:	f04f 33ff 	mov.w	r3, #4294967295
 80055a0:	f04f 32ff 	mov.w	r2, #4294967295
 80055a4:	f04f 31ff 	mov.w	r1, #4294967295
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ac:	47a0      	blx	r4
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd90      	pop	{r4, r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000b1c 	.word	0x20000b1c

080055bc <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4603      	mov	r3, r0
 80055c4:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 80055c6:	4b05      	ldr	r3, [pc, #20]	@ (80055dc <UG_SetForecolor+0x20>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	88fa      	ldrh	r2, [r7, #6]
 80055cc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	20000b1c 	.word	0x20000b1c

080055e0 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 80055ea:	4b05      	ldr	r3, [pc, #20]	@ (8005600 <UG_SetBackcolor+0x20>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	88fa      	ldrh	r2, [r7, #6]
 80055f0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	20000b1c 	.word	0x20000b1c

08005604 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 800560e:	4b06      	ldr	r3, [pc, #24]	@ (8005628 <UG_FontSetHSpace+0x24>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	88fa      	ldrh	r2, [r7, #6]
 8005614:	b252      	sxtb	r2, r2
 8005616:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	20000b1c 	.word	0x20000b1c

0800562c <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8005636:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <UG_FontSetVSpace+0x24>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	88fa      	ldrh	r2, [r7, #6]
 800563c:	b252      	sxtb	r2, r2
 800563e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	20000b1c 	.word	0x20000b1c

08005654 <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	4603      	mov	r3, r0
 800565c:	71fb      	strb	r3, [r7, #7]
  gui->transparent_font=t;
 800565e:	4b05      	ldr	r3, [pc, #20]	@ (8005674 <UG_FontSetTransparency+0x20>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	79fa      	ldrb	r2, [r7, #7]
 8005664:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	20000b1c 	.word	0x20000b1c

08005678 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]

  char c=**str;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 8005688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800568c:	2b00      	cmp	r3, #0
 800568e:	db07      	blt.n	80056a0 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	601a      	str	r2, [r3, #0]
    return c;
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	b29b      	uxth	r3, r3
 800569e:	e05c      	b.n	800575a <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 80056a4:	2300      	movs	r3, #0
 80056a6:	81bb      	strh	r3, [r7, #12]

  while(**str)
 80056a8:	e04f      	b.n	800574a <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 80056bc:	7bbb      	ldrb	r3, [r7, #14]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d130      	bne.n	8005724 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	2bdf      	cmp	r3, #223	@ 0xdf
 80056c6:	d806      	bhi.n	80056d6 <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 80056c8:	2301      	movs	r3, #1
 80056ca:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	73fb      	strb	r3, [r7, #15]
 80056d4:	e023      	b.n	800571e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	2bef      	cmp	r3, #239	@ 0xef
 80056da:	d806      	bhi.n	80056ea <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 80056dc:	2302      	movs	r3, #2
 80056de:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	73fb      	strb	r3, [r7, #15]
 80056e8:	e019      	b.n	800571e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	2bf7      	cmp	r3, #247	@ 0xf7
 80056ee:	d806      	bhi.n	80056fe <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 80056f0:	2303      	movs	r3, #3
 80056f2:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	73fb      	strb	r3, [r7, #15]
 80056fc:	e00f      	b.n	800571e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	2bfb      	cmp	r3, #251	@ 0xfb
 8005702:	d806      	bhi.n	8005712 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 8005704:	2304      	movs	r3, #4
 8005706:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	f003 0303 	and.w	r3, r3, #3
 800570e:	73fb      	strb	r3, [r7, #15]
 8005710:	e005      	b.n	800571e <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 8005712:	2305      	movs	r3, #5
 8005714:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 800571e:	7bfb      	ldrb	r3, [r7, #15]
 8005720:	81bb      	strh	r3, [r7, #12]
 8005722:	e012      	b.n	800574a <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 8005724:	89bb      	ldrh	r3, [r7, #12]
 8005726:	019b      	lsls	r3, r3, #6
 8005728:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	b21b      	sxth	r3, r3
 800572e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005732:	b21a      	sxth	r2, r3
 8005734:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005738:	4313      	orrs	r3, r2
 800573a:	b21b      	sxth	r3, r3
 800573c:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 800573e:	7bbb      	ldrb	r3, [r7, #14]
 8005740:	3b01      	subs	r3, #1
 8005742:	73bb      	strb	r3, [r7, #14]
 8005744:	7bbb      	ldrb	r3, [r7, #14]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <_UG_DecodeUTF8+0xde>
  while(**str)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1aa      	bne.n	80056aa <_UG_DecodeUTF8+0x32>
 8005754:	e000      	b.n	8005758 <_UG_DecodeUTF8+0xe0>
        break;
 8005756:	bf00      	nop
    }
  }
  return encoding;
 8005758:	89bb      	ldrh	r3, [r7, #12]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
	...

08005768 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	4603      	mov	r3, r0
 8005770:	6039      	str	r1, [r7, #0]
 8005772:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8005774:	2300      	movs	r3, #0
 8005776:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8005778:	2300      	movs	r3, #0
 800577a:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 800577c:	2300      	movs	r3, #0
 800577e:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8005780:	2300      	movs	r3, #0
 8005782:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8005784:	2300      	movs	r3, #0
 8005786:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8005788:	4b98      	ldr	r3, [pc, #608]	@ (80059ec <_UG_GetCharData+0x284>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800578e:	4b98      	ldr	r3, [pc, #608]	@ (80059f0 <_UG_GetCharData+0x288>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d10f      	bne.n	80057b6 <_UG_GetCharData+0x4e>
 8005796:	4b97      	ldr	r3, [pc, #604]	@ (80059f4 <_UG_GetCharData+0x28c>)
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	88fa      	ldrh	r2, [r7, #6]
 800579c:	429a      	cmp	r2, r3
 800579e:	d10a      	bne.n	80057b6 <_UG_GetCharData+0x4e>
    if(p){
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 80057a6:	4b94      	ldr	r3, [pc, #592]	@ (80059f8 <_UG_GetCharData+0x290>)
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 80057ae:	4b93      	ldr	r3, [pc, #588]	@ (80059fc <_UG_GetCharData+0x294>)
 80057b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057b4:	e116      	b.n	80059e4 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 80057b6:	4b8d      	ldr	r3, [pc, #564]	@ (80059ec <_UG_GetCharData+0x284>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 80cc 	beq.w	800595c <_UG_GetCharData+0x1f4>
    switch ( encoding )
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	2bfc      	cmp	r3, #252	@ 0xfc
 80057c8:	f300 80c8 	bgt.w	800595c <_UG_GetCharData+0x1f4>
 80057cc:	2bd6      	cmp	r3, #214	@ 0xd6
 80057ce:	da09      	bge.n	80057e4 <_UG_GetCharData+0x7c>
 80057d0:	2bc4      	cmp	r3, #196	@ 0xc4
 80057d2:	d06c      	beq.n	80058ae <_UG_GetCharData+0x146>
 80057d4:	2bc4      	cmp	r3, #196	@ 0xc4
 80057d6:	f300 80c1 	bgt.w	800595c <_UG_GetCharData+0x1f4>
 80057da:	2bb0      	cmp	r3, #176	@ 0xb0
 80057dc:	d06d      	beq.n	80058ba <_UG_GetCharData+0x152>
 80057de:	2bb5      	cmp	r3, #181	@ 0xb5
 80057e0:	d068      	beq.n	80058b4 <_UG_GetCharData+0x14c>
 80057e2:	e06e      	b.n	80058c2 <_UG_GetCharData+0x15a>
 80057e4:	3bd6      	subs	r3, #214	@ 0xd6
 80057e6:	2b26      	cmp	r3, #38	@ 0x26
 80057e8:	f200 80b8 	bhi.w	800595c <_UG_GetCharData+0x1f4>
 80057ec:	a201      	add	r2, pc, #4	@ (adr r2, 80057f4 <_UG_GetCharData+0x8c>)
 80057ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f2:	bf00      	nop
 80057f4:	08005897 	.word	0x08005897
 80057f8:	0800595d 	.word	0x0800595d
 80057fc:	0800595d 	.word	0x0800595d
 8005800:	0800595d 	.word	0x0800595d
 8005804:	0800595d 	.word	0x0800595d
 8005808:	0800595d 	.word	0x0800595d
 800580c:	080058a3 	.word	0x080058a3
 8005810:	0800595d 	.word	0x0800595d
 8005814:	0800595d 	.word	0x0800595d
 8005818:	0800595d 	.word	0x0800595d
 800581c:	0800595d 	.word	0x0800595d
 8005820:	0800595d 	.word	0x0800595d
 8005824:	0800595d 	.word	0x0800595d
 8005828:	0800595d 	.word	0x0800595d
 800582c:	080058a9 	.word	0x080058a9
 8005830:	0800595d 	.word	0x0800595d
 8005834:	0800595d 	.word	0x0800595d
 8005838:	0800595d 	.word	0x0800595d
 800583c:	0800595d 	.word	0x0800595d
 8005840:	0800595d 	.word	0x0800595d
 8005844:	0800595d 	.word	0x0800595d
 8005848:	0800595d 	.word	0x0800595d
 800584c:	0800595d 	.word	0x0800595d
 8005850:	0800595d 	.word	0x0800595d
 8005854:	0800595d 	.word	0x0800595d
 8005858:	0800595d 	.word	0x0800595d
 800585c:	0800595d 	.word	0x0800595d
 8005860:	0800595d 	.word	0x0800595d
 8005864:	0800595d 	.word	0x0800595d
 8005868:	0800595d 	.word	0x0800595d
 800586c:	0800595d 	.word	0x0800595d
 8005870:	0800595d 	.word	0x0800595d
 8005874:	08005891 	.word	0x08005891
 8005878:	0800595d 	.word	0x0800595d
 800587c:	0800595d 	.word	0x0800595d
 8005880:	0800595d 	.word	0x0800595d
 8005884:	0800595d 	.word	0x0800595d
 8005888:	0800595d 	.word	0x0800595d
 800588c:	0800589d 	.word	0x0800589d
    {
       case 0xF6: encoding = 0x94; break; // ö
 8005890:	2394      	movs	r3, #148	@ 0x94
 8005892:	80fb      	strh	r3, [r7, #6]
 8005894:	e015      	b.n	80058c2 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 8005896:	2399      	movs	r3, #153	@ 0x99
 8005898:	80fb      	strh	r3, [r7, #6]
 800589a:	e012      	b.n	80058c2 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 800589c:	2381      	movs	r3, #129	@ 0x81
 800589e:	80fb      	strh	r3, [r7, #6]
 80058a0:	e00f      	b.n	80058c2 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 80058a2:	239a      	movs	r3, #154	@ 0x9a
 80058a4:	80fb      	strh	r3, [r7, #6]
 80058a6:	e00c      	b.n	80058c2 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 80058a8:	2384      	movs	r3, #132	@ 0x84
 80058aa:	80fb      	strh	r3, [r7, #6]
 80058ac:	e009      	b.n	80058c2 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 80058ae:	238e      	movs	r3, #142	@ 0x8e
 80058b0:	80fb      	strh	r3, [r7, #6]
 80058b2:	e006      	b.n	80058c2 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 80058b4:	23e6      	movs	r3, #230	@ 0xe6
 80058b6:	80fb      	strh	r3, [r7, #6]
 80058b8:	e003      	b.n	80058c2 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 80058ba:	23f8      	movs	r3, #248	@ 0xf8
 80058bc:	80fb      	strh	r3, [r7, #6]
 80058be:	bf00      	nop
 80058c0:	e04c      	b.n	800595c <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80058c2:	e04b      	b.n	800595c <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 80058c4:	4b49      	ldr	r3, [pc, #292]	@ (80059ec <_UG_GetCharData+0x284>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ca:	8a7a      	ldrh	r2, [r7, #18]
 80058cc:	0052      	lsls	r2, r2, #1
 80058ce:	4413      	add	r3, r2
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff fb83 	bl	8004fdc <ptr_8to16>
 80058d6:	4603      	mov	r3, r0
 80058d8:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 80058da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	da06      	bge.n	80058f0 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 80058e2:	89fb      	ldrh	r3, [r7, #14]
 80058e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80058e8:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 80058ea:	2301      	movs	r3, #1
 80058ec:	747b      	strb	r3, [r7, #17]
 80058ee:	e032      	b.n	8005956 <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 80058f0:	7c7b      	ldrb	r3, [r7, #17]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d021      	beq.n	800593a <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 80058f6:	88fa      	ldrh	r2, [r7, #6]
 80058f8:	8afb      	ldrh	r3, [r7, #22]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d30d      	bcc.n	800591a <_UG_GetCharData+0x1b2>
 80058fe:	88fa      	ldrh	r2, [r7, #6]
 8005900:	89fb      	ldrh	r3, [r7, #14]
 8005902:	429a      	cmp	r2, r3
 8005904:	d809      	bhi.n	800591a <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8005906:	88fa      	ldrh	r2, [r7, #6]
 8005908:	8afb      	ldrh	r3, [r7, #22]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	b29a      	uxth	r2, r3
 800590e:	8abb      	ldrh	r3, [r7, #20]
 8005910:	4413      	add	r3, r2
 8005912:	82bb      	strh	r3, [r7, #20]
        found=1;
 8005914:	2301      	movs	r3, #1
 8005916:	743b      	strb	r3, [r7, #16]
        break;
 8005918:	e02a      	b.n	8005970 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 800591a:	88fa      	ldrh	r2, [r7, #6]
 800591c:	8afb      	ldrh	r3, [r7, #22]
 800591e:	429a      	cmp	r2, r3
 8005920:	d323      	bcc.n	800596a <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8005922:	89fa      	ldrh	r2, [r7, #14]
 8005924:	8afb      	ldrh	r3, [r7, #22]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	b29a      	uxth	r2, r3
 800592a:	8abb      	ldrh	r3, [r7, #20]
 800592c:	4413      	add	r3, r2
 800592e:	b29b      	uxth	r3, r3
 8005930:	3301      	adds	r3, #1
 8005932:	82bb      	strh	r3, [r7, #20]
      range=0;
 8005934:	2300      	movs	r3, #0
 8005936:	747b      	strb	r3, [r7, #17]
 8005938:	e00d      	b.n	8005956 <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 800593a:	88fa      	ldrh	r2, [r7, #6]
 800593c:	89fb      	ldrh	r3, [r7, #14]
 800593e:	429a      	cmp	r2, r3
 8005940:	d102      	bne.n	8005948 <_UG_GetCharData+0x1e0>
      {
        found=1;
 8005942:	2301      	movs	r3, #1
 8005944:	743b      	strb	r3, [r7, #16]
        break;
 8005946:	e013      	b.n	8005970 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8005948:	88fa      	ldrh	r2, [r7, #6]
 800594a:	89fb      	ldrh	r3, [r7, #14]
 800594c:	429a      	cmp	r2, r3
 800594e:	d30e      	bcc.n	800596e <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8005950:	8abb      	ldrh	r3, [r7, #20]
 8005952:	3301      	adds	r3, #1
 8005954:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8005956:	8a7b      	ldrh	r3, [r7, #18]
 8005958:	3301      	adds	r3, #1
 800595a:	827b      	strh	r3, [r7, #18]
 800595c:	4b23      	ldr	r3, [pc, #140]	@ (80059ec <_UG_GetCharData+0x284>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005962:	8a7a      	ldrh	r2, [r7, #18]
 8005964:	429a      	cmp	r2, r3
 8005966:	d3ad      	bcc.n	80058c4 <_UG_GetCharData+0x15c>
 8005968:	e002      	b.n	8005970 <_UG_GetCharData+0x208>
        break;
 800596a:	bf00      	nop
 800596c:	e000      	b.n	8005970 <_UG_GetCharData+0x208>
        break;
 800596e:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8005970:	7c3b      	ldrb	r3, [r7, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d034      	beq.n	80059e0 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8005976:	4b1d      	ldr	r3, [pc, #116]	@ (80059ec <_UG_GetCharData+0x284>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597c:	4a1c      	ldr	r2, [pc, #112]	@ (80059f0 <_UG_GetCharData+0x288>)
 800597e:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8005980:	4a1c      	ldr	r2, [pc, #112]	@ (80059f4 <_UG_GetCharData+0x28c>)
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8005986:	4b19      	ldr	r3, [pc, #100]	@ (80059ec <_UG_GetCharData+0x284>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598c:	8aba      	ldrh	r2, [r7, #20]
 800598e:	4917      	ldr	r1, [pc, #92]	@ (80059ec <_UG_GetCharData+0x284>)
 8005990:	6809      	ldr	r1, [r1, #0]
 8005992:	8e09      	ldrh	r1, [r1, #48]	@ 0x30
 8005994:	fb01 f202 	mul.w	r2, r1, r2
 8005998:	4413      	add	r3, r2
 800599a:	4a17      	ldr	r2, [pc, #92]	@ (80059f8 <_UG_GetCharData+0x290>)
 800599c:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 800599e:	4b13      	ldr	r3, [pc, #76]	@ (80059ec <_UG_GetCharData+0x284>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d009      	beq.n	80059bc <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 80059a8:	4b10      	ldr	r3, [pc, #64]	@ (80059ec <_UG_GetCharData+0x284>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059ae:	8abb      	ldrh	r3, [r7, #20]
 80059b0:	4413      	add	r3, r2
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	b21a      	sxth	r2, r3
 80059b6:	4b11      	ldr	r3, [pc, #68]	@ (80059fc <_UG_GetCharData+0x294>)
 80059b8:	801a      	strh	r2, [r3, #0]
 80059ba:	e006      	b.n	80059ca <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 80059bc:	4b0b      	ldr	r3, [pc, #44]	@ (80059ec <_UG_GetCharData+0x284>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80059c4:	b21a      	sxth	r2, r3
 80059c6:	4b0d      	ldr	r3, [pc, #52]	@ (80059fc <_UG_GetCharData+0x294>)
 80059c8:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 80059d0:	4b09      	ldr	r3, [pc, #36]	@ (80059f8 <_UG_GetCharData+0x290>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 80059d8:	4b08      	ldr	r3, [pc, #32]	@ (80059fc <_UG_GetCharData+0x294>)
 80059da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059de:	e001      	b.n	80059e4 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 80059e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	20000b1c 	.word	0x20000b1c
 80059f0:	20000b20 	.word	0x20000b20
 80059f4:	20000b24 	.word	0x20000b24
 80059f8:	20000b28 	.word	0x20000b28
 80059fc:	20000b2c 	.word	0x20000b2c

08005a00 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8005a00:	b590      	push	{r4, r7, lr}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8005a08:	4b3d      	ldr	r3, [pc, #244]	@ (8005b00 <_UG_FontSelect+0x100>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d070      	beq.n	8005af6 <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8005a14:	4b3a      	ldr	r3, [pc, #232]	@ (8005b00 <_UG_FontSelect+0x100>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	645a      	str	r2, [r3, #68]	@ 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	781a      	ldrb	r2, [r3, #0]
 8005a20:	4b37      	ldr	r3, [pc, #220]	@ (8005b00 <_UG_FontSelect+0x100>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	b25b      	sxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	da01      	bge.n	8005a40 <_UG_FontSelect+0x40>
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	e000      	b.n	8005a42 <_UG_FontSelect+0x42>
 8005a40:	2200      	movs	r2, #0
 8005a42:	4b2f      	ldr	r3, [pc, #188]	@ (8005b00 <_UG_FontSelect+0x100>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	607a      	str	r2, [r7, #4]
 8005a52:	4a2b      	ldr	r2, [pc, #172]	@ (8005b00 <_UG_FontSelect+0x100>)
 8005a54:	6812      	ldr	r2, [r2, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	607a      	str	r2, [r7, #4]
 8005a62:	4a27      	ldr	r2, [pc, #156]	@ (8005b00 <_UG_FontSelect+0x100>)
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	f882 302f 	strb.w	r3, [r2, #47]	@ 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8005a6c:	4b24      	ldr	r3, [pc, #144]	@ (8005b00 <_UG_FontSelect+0x100>)
 8005a6e:	681c      	ldr	r4, [r3, #0]
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff fab3 	bl	8004fdc <ptr_8to16>
 8005a76:	4603      	mov	r3, r0
 8005a78:	8663      	strh	r3, [r4, #50]	@ 0x32
  font+=2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3302      	adds	r3, #2
 8005a7e:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8005a80:	4b1f      	ldr	r3, [pc, #124]	@ (8005b00 <_UG_FontSelect+0x100>)
 8005a82:	681c      	ldr	r4, [r3, #0]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff faa9 	bl	8004fdc <ptr_8to16>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	86a3      	strh	r3, [r4, #52]	@ 0x34
  font+=2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3302      	adds	r3, #2
 8005a92:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8005a94:	4b1a      	ldr	r3, [pc, #104]	@ (8005b00 <_UG_FontSelect+0x100>)
 8005a96:	681c      	ldr	r4, [r3, #0]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7ff fa9f 	bl	8004fdc <ptr_8to16>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	8623      	strh	r3, [r4, #48]	@ 0x30
  font+=2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	3302      	adds	r3, #2
 8005aa6:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	607a      	str	r2, [r7, #4]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00b      	beq.n	8005acc <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8005ab4:	4b12      	ldr	r3, [pc, #72]	@ (8005b00 <_UG_FontSelect+0x100>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	639a      	str	r2, [r3, #56]	@ 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8005abc:	4b10      	ldr	r3, [pc, #64]	@ (8005b00 <_UG_FontSelect+0x100>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	607b      	str	r3, [r7, #4]
 8005aca:	e003      	b.n	8005ad4 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8005acc:	4b0c      	ldr	r3, [pc, #48]	@ (8005b00 <_UG_FontSelect+0x100>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8005b00 <_UG_FontSelect+0x100>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	63da      	str	r2, [r3, #60]	@ 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8005adc:	4b08      	ldr	r3, [pc, #32]	@ (8005b00 <_UG_FontSelect+0x100>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4413      	add	r3, r2
 8005aea:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8005aec:	4b04      	ldr	r3, [pc, #16]	@ (8005b00 <_UG_FontSelect+0x100>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	641a      	str	r2, [r3, #64]	@ 0x40
 8005af4:	e000      	b.n	8005af8 <_UG_FontSelect+0xf8>
    return;
 8005af6:	bf00      	nop
}
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd90      	pop	{r4, r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20000b1c 	.word	0x20000b1c

08005b04 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8005b04:	b5b0      	push	{r4, r5, r7, lr}
 8005b06:	b08c      	sub	sp, #48	@ 0x30
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	4608      	mov	r0, r1
 8005b0e:	4611      	mov	r1, r2
 8005b10:	461a      	mov	r2, r3
 8005b12:	4623      	mov	r3, r4
 8005b14:	80fb      	strh	r3, [r7, #6]
 8005b16:	4603      	mov	r3, r0
 8005b18:	80bb      	strh	r3, [r7, #4]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	807b      	strh	r3, [r7, #2]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005b26:	2300      	movs	r3, #0
 8005b28:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005b2e:	2300      	movs	r3, #0
 8005b30:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8005b32:	4b8b      	ldr	r3, [pc, #556]	@ (8005d60 <_UG_PutChar+0x25c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005b3a:	75fb      	strb	r3, [r7, #23]
 8005b3c:	4b88      	ldr	r3, [pc, #544]	@ (8005d60 <_UG_PutChar+0x25c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8005b4e:	f107 0208 	add.w	r2, r7, #8
 8005b52:	88fb      	ldrh	r3, [r7, #6]
 8005b54:	4611      	mov	r1, r2
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7ff fe06 	bl	8005768 <_UG_GetCharData>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8005b60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b68:	d102      	bne.n	8005b70 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8005b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6e:	e224      	b.n	8005fba <_UG_PutChar+0x4b6>

   bn =  gui->currentFont.char_width;
 8005b70:	4b7b      	ldr	r3, [pc, #492]	@ (8005d60 <_UG_PutChar+0x25c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005b78:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if ( !bn ){
 8005b7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <_UG_PutChar+0x80>
     return 0;
 8005b80:	2300      	movs	r3, #0
 8005b82:	e21a      	b.n	8005fba <_UG_PutChar+0x4b6>
   }
   bn >>= 3;
 8005b84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b86:	08db      	lsrs	r3, r3, #3
 8005b88:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 8005b8a:	4b75      	ldr	r3, [pc, #468]	@ (8005d60 <_UG_PutChar+0x25c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <_UG_PutChar+0x9e>
 8005b9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	84bb      	strh	r3, [r7, #36]	@ 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8005ba2:	7dbb      	ldrb	r3, [r7, #22]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01c      	beq.n	8005be2 <_UG_PutChar+0xde>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8005ba8:	4b6d      	ldr	r3, [pc, #436]	@ (8005d60 <_UG_PutChar+0x25c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bae:	461c      	mov	r4, r3
 8005bb0:	88ba      	ldrh	r2, [r7, #4]
 8005bb2:	8abb      	ldrh	r3, [r7, #20]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	b21a      	sxth	r2, r3
 8005bbe:	4b68      	ldr	r3, [pc, #416]	@ (8005d60 <_UG_PutChar+0x25c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	887b      	ldrh	r3, [r7, #2]
 8005bca:	440b      	add	r3, r1
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	b21b      	sxth	r3, r3
 8005bd4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005bd8:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8005bdc:	47a0      	blx	r4
 8005bde:	4603      	mov	r3, r0
 8005be0:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8005be2:	4b5f      	ldr	r3, [pc, #380]	@ (8005d60 <_UG_PutChar+0x25c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f040 8171 	bne.w	8005ed2 <_UG_PutChar+0x3ce>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005bf4:	e0eb      	b.n	8005dce <_UG_PutChar+0x2ca>
     {
       c=0;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005bfe:	e0de      	b.n	8005dbe <_UG_PutChar+0x2ba>
       {
         b = *data++;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	60ba      	str	r2, [r7, #8]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005c0e:	e0c9      	b.n	8005da4 <_UG_PutChar+0x2a0>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8005c10:	7f7b      	ldrb	r3, [r7, #29]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d033      	beq.n	8005c82 <_UG_PutChar+0x17e>
           {
             if(driver)
 8005c1a:	7dbb      	ldrb	r3, [r7, #22]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d01f      	beq.n	8005c60 <_UG_PutChar+0x15c>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8005c20:	8c3b      	ldrh	r3, [r7, #32]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <_UG_PutChar+0x138>
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d107      	bne.n	8005c3c <_UG_PutChar+0x138>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8005c2c:	8c3a      	ldrh	r2, [r7, #32]
 8005c2e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	4610      	mov	r0, r2
 8005c36:	4798      	blx	r3
                 bpixels=0;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8005c3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <_UG_PutChar+0x154>
 8005c42:	7dfb      	ldrb	r3, [r7, #23]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d007      	beq.n	8005c58 <_UG_PutChar+0x154>
               {
                 x0=x+c;
 8005c48:	88ba      	ldrh	r2, [r7, #4]
 8005c4a:	8bfb      	ldrh	r3, [r7, #30]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                 y0=y+j;
 8005c50:	887a      	ldrh	r2, [r7, #2]
 8005c52:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c54:	4413      	add	r3, r2
 8005c56:	85bb      	strh	r3, [r7, #44]	@ 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8005c58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005c5e:	e095      	b.n	8005d8c <_UG_PutChar+0x288>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8005c60:	4b3f      	ldr	r3, [pc, #252]	@ (8005d60 <_UG_PutChar+0x25c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	88b9      	ldrh	r1, [r7, #4]
 8005c6a:	8bfa      	ldrh	r2, [r7, #30]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	b292      	uxth	r2, r2
 8005c70:	b210      	sxth	r0, r2
 8005c72:	8879      	ldrh	r1, [r7, #2]
 8005c74:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005c76:	440a      	add	r2, r1
 8005c78:	b292      	uxth	r2, r2
 8005c7a:	b211      	sxth	r1, r2
 8005c7c:	883a      	ldrh	r2, [r7, #0]
 8005c7e:	4798      	blx	r3
 8005c80:	e084      	b.n	8005d8c <_UG_PutChar+0x288>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8005c82:	7dbb      	ldrb	r3, [r7, #22]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d06d      	beq.n	8005d64 <_UG_PutChar+0x260>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8005c88:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d064      	beq.n	8005d58 <_UG_PutChar+0x254>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8005c8e:	7dfb      	ldrb	r3, [r7, #23]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d15e      	bne.n	8005d52 <_UG_PutChar+0x24e>
                 {
                   push_pixels(fpixels,fc);
 8005c94:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005c96:	8839      	ldrh	r1, [r7, #0]
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	4798      	blx	r3
                   fpixels=0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005ca2:	e059      	b.n	8005d58 <_UG_PutChar+0x254>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8005ca4:	88ba      	ldrh	r2, [r7, #4]
 8005ca6:	8abb      	ldrh	r3, [r7, #20]
 8005ca8:	4413      	add	r3, r2
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8005cb2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005cb4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d003      	beq.n	8005cc4 <_UG_PutChar+0x1c0>
 8005cbc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005cbe:	89fb      	ldrh	r3, [r7, #14]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d224      	bcs.n	8005d0e <_UG_PutChar+0x20a>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8005cc4:	4b26      	ldr	r3, [pc, #152]	@ (8005d60 <_UG_PutChar+0x25c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cca:	461d      	mov	r5, r3
 8005ccc:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005cd0:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8005cd4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005cd6:	89fb      	ldrh	r3, [r7, #14]
 8005cd8:	4413      	add	r3, r2
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	b21c      	sxth	r4, r3
 8005ce2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005ce4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005ce8:	fb92 f3f3 	sdiv	r3, r2, r3
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005cf0:	4413      	add	r3, r2
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	b21b      	sxth	r3, r3
 8005cf6:	4622      	mov	r2, r4
 8005cf8:	47a8      	blx	r5
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8005cfe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005d00:	8839      	ldrh	r1, [r7, #0]
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	4610      	mov	r0, r2
 8005d06:	4798      	blx	r3
                       fpixels=0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005d0c:	e021      	b.n	8005d52 <_UG_PutChar+0x24e>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8005d0e:	4b14      	ldr	r3, [pc, #80]	@ (8005d60 <_UG_PutChar+0x25c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d14:	461c      	mov	r4, r3
 8005d16:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005d1a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8005d1e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005d20:	89fb      	ldrh	r3, [r7, #14]
 8005d22:	4413      	add	r3, r2
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	3b01      	subs	r3, #1
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	b21a      	sxth	r2, r3
 8005d2c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8005d30:	47a0      	blx	r4
 8005d32:	4603      	mov	r3, r0
 8005d34:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8005d36:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005d38:	8839      	ldrh	r1, [r7, #0]
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	4798      	blx	r3
                       fpixels -= width;
 8005d40:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005d42:	89fb      	ldrh	r3, [r7, #14]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	847b      	strh	r3, [r7, #34]	@ 0x22
                       x0=x;
 8005d48:	88bb      	ldrh	r3, [r7, #4]
 8005d4a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                       y0++;
 8005d4c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005d4e:	3301      	adds	r3, #1
 8005d50:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                   while(fpixels)
 8005d52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1a5      	bne.n	8005ca4 <_UG_PutChar+0x1a0>
                     }
                   }
                 }
               }
               bpixels++;
 8005d58:	8c3b      	ldrh	r3, [r7, #32]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	843b      	strh	r3, [r7, #32]
 8005d5e:	e015      	b.n	8005d8c <_UG_PutChar+0x288>
 8005d60:	20000b1c 	.word	0x20000b1c
             }
             else if(!trans)                           // Not accelerated output
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d110      	bne.n	8005d8c <_UG_PutChar+0x288>
             {
               gui->device->pset(x+c,y+j,bc);
 8005d6a:	4b96      	ldr	r3, [pc, #600]	@ (8005fc4 <_UG_PutChar+0x4c0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	88b9      	ldrh	r1, [r7, #4]
 8005d74:	8bfa      	ldrh	r2, [r7, #30]
 8005d76:	440a      	add	r2, r1
 8005d78:	b292      	uxth	r2, r2
 8005d7a:	b210      	sxth	r0, r2
 8005d7c:	8879      	ldrh	r1, [r7, #2]
 8005d7e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005d80:	440a      	add	r2, r1
 8005d82:	b292      	uxth	r2, r2
 8005d84:	b211      	sxth	r1, r2
 8005d86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8005d8a:	4798      	blx	r3
             }
           }
           b >>= 1;
 8005d8c:	7f7b      	ldrb	r3, [r7, #29]
 8005d8e:	085b      	lsrs	r3, r3, #1
 8005d90:	777b      	strb	r3, [r7, #29]
           c++;
 8005d92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3301      	adds	r3, #1
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8005d9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005da0:	3301      	adds	r3, #1
 8005da2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005da4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005da6:	2b07      	cmp	r3, #7
 8005da8:	d806      	bhi.n	8005db8 <_UG_PutChar+0x2b4>
 8005daa:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005dae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	f6ff af2c 	blt.w	8005c10 <_UG_PutChar+0x10c>
       for( i=0;i<bn;i++ )
 8005db8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005dba:	3301      	adds	r3, #1
 8005dbc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005dbe:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005dc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	f4ff af1c 	bcc.w	8005c00 <_UG_PutChar+0xfc>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005dc8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005dca:	3301      	adds	r3, #1
 8005dcc:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005dce:	4b7d      	ldr	r3, [pc, #500]	@ (8005fc4 <_UG_PutChar+0x4c0>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	f4ff af0b 	bcc.w	8005bf6 <_UG_PutChar+0xf2>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8005de0:	7dbb      	ldrb	r3, [r7, #22]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 80e7 	beq.w	8005fb6 <_UG_PutChar+0x4b2>
       if(bpixels && !trans)
 8005de8:	8c3b      	ldrh	r3, [r7, #32]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d009      	beq.n	8005e02 <_UG_PutChar+0x2fe>
 8005dee:	7dfb      	ldrb	r3, [r7, #23]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d106      	bne.n	8005e02 <_UG_PutChar+0x2fe>
       {
         push_pixels(bpixels,bc);
 8005df4:	8c3a      	ldrh	r2, [r7, #32]
 8005df6:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4798      	blx	r3
 8005e00:	e0d9      	b.n	8005fb6 <_UG_PutChar+0x4b2>
       }
       else if(fpixels)
 8005e02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 80d6 	beq.w	8005fb6 <_UG_PutChar+0x4b2>
       {
         if(!trans)
 8005e0a:	7dfb      	ldrb	r3, [r7, #23]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d15c      	bne.n	8005eca <_UG_PutChar+0x3c6>
         {
           push_pixels(fpixels,fc);
 8005e10:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005e12:	8839      	ldrh	r1, [r7, #0]
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	4610      	mov	r0, r2
 8005e18:	4798      	blx	r3
 8005e1a:	e0cc      	b.n	8005fb6 <_UG_PutChar+0x4b2>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8005e1c:	88ba      	ldrh	r2, [r7, #4]
 8005e1e:	8abb      	ldrh	r3, [r7, #20]
 8005e20:	4413      	add	r3, r2
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8005e2a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005e2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d003      	beq.n	8005e3c <_UG_PutChar+0x338>
 8005e34:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005e36:	8a3b      	ldrh	r3, [r7, #16]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d224      	bcs.n	8005e86 <_UG_PutChar+0x382>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8005e3c:	4b61      	ldr	r3, [pc, #388]	@ (8005fc4 <_UG_PutChar+0x4c0>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e42:	461d      	mov	r5, r3
 8005e44:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005e48:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8005e4c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005e4e:	8a3b      	ldrh	r3, [r7, #16]
 8005e50:	4413      	add	r3, r2
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	b21c      	sxth	r4, r3
 8005e5a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005e5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005e60:	fb92 f3f3 	sdiv	r3, r2, r3
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005e68:	4413      	add	r3, r2
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	b21b      	sxth	r3, r3
 8005e6e:	4622      	mov	r2, r4
 8005e70:	47a8      	blx	r5
 8005e72:	4603      	mov	r3, r0
 8005e74:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8005e76:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005e78:	8839      	ldrh	r1, [r7, #0]
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	4798      	blx	r3
               fpixels=0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005e84:	e021      	b.n	8005eca <_UG_PutChar+0x3c6>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8005e86:	4b4f      	ldr	r3, [pc, #316]	@ (8005fc4 <_UG_PutChar+0x4c0>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e8c:	461c      	mov	r4, r3
 8005e8e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005e92:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8005e96:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005e98:	8a3b      	ldrh	r3, [r7, #16]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	b21a      	sxth	r2, r3
 8005ea4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8005ea8:	47a0      	blx	r4
 8005eaa:	4603      	mov	r3, r0
 8005eac:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8005eae:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005eb0:	8839      	ldrh	r1, [r7, #0]
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	4798      	blx	r3
               fpixels -= width;
 8005eb8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005eba:	8a3b      	ldrh	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	847b      	strh	r3, [r7, #34]	@ 0x22
               x0=x;
 8005ec0:	88bb      	ldrh	r3, [r7, #4]
 8005ec2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
               y0++;
 8005ec4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
           while(fpixels)
 8005eca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1a5      	bne.n	8005e1c <_UG_PutChar+0x318>
 8005ed0:	e071      	b.n	8005fb6 <_UG_PutChar+0x4b2>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8005ed2:	4b3c      	ldr	r3, [pc, #240]	@ (8005fc4 <_UG_PutChar+0x4c0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d16b      	bne.n	8005fb6 <_UG_PutChar+0x4b2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005ede:	2300      	movs	r3, #0
 8005ee0:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005ee2:	e060      	b.n	8005fa6 <_UG_PutChar+0x4a2>
     {
       for( i=0;i<actual_char_width;i++ )
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005ee8:	e04a      	b.n	8005f80 <_UG_PutChar+0x47c>
       {
         b = *data++;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	60ba      	str	r2, [r7, #8]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8005ef4:	883b      	ldrh	r3, [r7, #0]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	7f7a      	ldrb	r2, [r7, #29]
 8005efa:	fb03 f202 	mul.w	r2, r3, r2
 8005efe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	7f79      	ldrb	r1, [r7, #29]
 8005f06:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8005f0a:	fb01 f303 	mul.w	r3, r1, r3
 8005f0e:	4413      	add	r3, r2
 8005f10:	121b      	asrs	r3, r3, #8
 8005f12:	b21b      	sxth	r3, r3
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8005f18:	883b      	ldrh	r3, [r7, #0]
 8005f1a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005f1e:	7f79      	ldrb	r1, [r7, #29]
 8005f20:	fb03 f101 	mul.w	r1, r3, r1
 8005f24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005f28:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005f2c:	7f78      	ldrb	r0, [r7, #29]
 8005f2e:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 8005f32:	fb00 f303 	mul.w	r3, r0, r3
 8005f36:	440b      	add	r3, r1
 8005f38:	121b      	asrs	r3, r3, #8
 8005f3a:	b21b      	sxth	r3, r3
 8005f3c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005f40:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8005f42:	4313      	orrs	r3, r2
 8005f44:	b21b      	sxth	r3, r3
 8005f46:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8005f48:	7dbb      	ldrb	r3, [r7, #22]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d005      	beq.n	8005f5a <_UG_PutChar+0x456>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8005f4e:	8a7a      	ldrh	r2, [r7, #18]
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	4611      	mov	r1, r2
 8005f54:	2001      	movs	r0, #1
 8005f56:	4798      	blx	r3
 8005f58:	e00f      	b.n	8005f7a <_UG_PutChar+0x476>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8005f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc4 <_UG_PutChar+0x4c0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	88b9      	ldrh	r1, [r7, #4]
 8005f64:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005f66:	440a      	add	r2, r1
 8005f68:	b292      	uxth	r2, r2
 8005f6a:	b210      	sxth	r0, r2
 8005f6c:	8879      	ldrh	r1, [r7, #2]
 8005f6e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005f70:	440a      	add	r2, r1
 8005f72:	b292      	uxth	r2, r2
 8005f74:	b211      	sxth	r1, r2
 8005f76:	8a7a      	ldrh	r2, [r7, #18]
 8005f78:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8005f7a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005f80:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005f82:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	dbaf      	blt.n	8005eea <_UG_PutChar+0x3e6>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8005fc4 <_UG_PutChar+0x4c0>)
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8005f94:	4611      	mov	r1, r2
 8005f96:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005f9a:	1a8a      	subs	r2, r1, r2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005fa0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005fa6:	4b07      	ldr	r3, [pc, #28]	@ (8005fc4 <_UG_PutChar+0x4c0>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005fae:	461a      	mov	r2, r3
 8005fb0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d396      	bcc.n	8005ee4 <_UG_PutChar+0x3e0>
     }
   }
   #endif
   return (actual_char_width);
 8005fb6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3730      	adds	r7, #48	@ 0x30
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20000b1c 	.word	0x20000b1c

08005fc8 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b089      	sub	sp, #36	@ 0x24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8005fd0:	4b57      	ldr	r3, [pc, #348]	@ (8006130 <_UG_ProcessTouchData+0x168>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	88db      	ldrh	r3, [r3, #6]
 8005fd6:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8005fd8:	4b55      	ldr	r3, [pc, #340]	@ (8006130 <_UG_ProcessTouchData+0x168>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	891b      	ldrh	r3, [r3, #8]
 8005fde:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8005fe0:	4b53      	ldr	r3, [pc, #332]	@ (8006130 <_UG_ProcessTouchData+0x168>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	791b      	ldrb	r3, [r3, #4]
 8005fe6:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8005fee:	2300      	movs	r3, #0
 8005ff0:	83fb      	strh	r3, [r7, #30]
 8005ff2:	e090      	b.n	8006116 <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	8bfb      	ldrh	r3, [r7, #30]
 8005ffa:	015b      	lsls	r3, r3, #5
 8005ffc:	4413      	add	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d179      	bne.n	800610a <_UG_ProcessTouchData+0x142>
 8006016:	7bfb      	ldrb	r3, [r7, #15]
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d074      	beq.n	800610a <_UG_ProcessTouchData+0x142>
 8006020:	7bfb      	ldrb	r3, [r7, #15]
 8006022:	f003 0308 	and.w	r3, r3, #8
 8006026:	2b00      	cmp	r3, #0
 8006028:	d06f      	beq.n	800610a <_UG_ProcessTouchData+0x142>
 800602a:	7bfb      	ldrb	r3, [r7, #15]
 800602c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d16a      	bne.n	800610a <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8006034:	7dfb      	ldrb	r3, [r7, #23]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d047      	beq.n	80060ca <_UG_ProcessTouchData+0x102>
 800603a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800603e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006042:	d042      	beq.n	80060ca <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8006044:	7f7b      	ldrb	r3, [r7, #29]
 8006046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	d107      	bne.n	800605e <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 800604e:	7f7b      	ldrb	r3, [r7, #29]
 8006050:	f043 0305 	orr.w	r3, r3, #5
 8006054:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8006056:	7f7b      	ldrb	r3, [r7, #29]
 8006058:	f023 0318 	bic.w	r3, r3, #24
 800605c:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 800605e:	7f7b      	ldrb	r3, [r7, #29]
 8006060:	f023 0320 	bic.w	r3, r3, #32
 8006064:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800606c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006070:	429a      	cmp	r2, r3
 8006072:	db25      	blt.n	80060c0 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800607a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800607e:	429a      	cmp	r2, r3
 8006080:	dc1e      	bgt.n	80060c0 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006088:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800608c:	429a      	cmp	r2, r3
 800608e:	db17      	blt.n	80060c0 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006096:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800609a:	429a      	cmp	r2, r3
 800609c:	dc10      	bgt.n	80060c0 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 800609e:	7f7b      	ldrb	r3, [r7, #29]
 80060a0:	f043 0320 	orr.w	r3, r3, #32
 80060a4:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 80060a6:	7f7b      	ldrb	r3, [r7, #29]
 80060a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d107      	bne.n	80060c0 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 80060b0:	7f7b      	ldrb	r3, [r7, #29]
 80060b2:	f023 0304 	bic.w	r3, r3, #4
 80060b6:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 80060b8:	7f7b      	ldrb	r3, [r7, #29]
 80060ba:	f043 0302 	orr.w	r3, r3, #2
 80060be:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 80060c0:	7f7b      	ldrb	r3, [r7, #29]
 80060c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060c6:	777b      	strb	r3, [r7, #29]
 80060c8:	e01f      	b.n	800610a <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 80060ca:	7f7b      	ldrb	r3, [r7, #29]
 80060cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01a      	beq.n	800610a <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 80060d4:	7f7b      	ldrb	r3, [r7, #29]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d004      	beq.n	80060e8 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 80060de:	7f7b      	ldrb	r3, [r7, #29]
 80060e0:	f043 0308 	orr.w	r3, r3, #8
 80060e4:	777b      	strb	r3, [r7, #29]
 80060e6:	e003      	b.n	80060f0 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 80060e8:	7f7b      	ldrb	r3, [r7, #29]
 80060ea:	f043 0310 	orr.w	r3, r3, #16
 80060ee:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 80060f0:	7f7b      	ldrb	r3, [r7, #29]
 80060f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 80060fa:	7f7b      	ldrb	r3, [r7, #29]
 80060fc:	f043 0301 	orr.w	r3, r3, #1
 8006100:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8006102:	7f7b      	ldrb	r3, [r7, #29]
 8006104:	f023 0346 	bic.w	r3, r3, #70	@ 0x46
 8006108:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	7f7a      	ldrb	r2, [r7, #29]
 800610e:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8006110:	8bfb      	ldrh	r3, [r7, #30]
 8006112:	3301      	adds	r3, #1
 8006114:	83fb      	strh	r3, [r7, #30]
 8006116:	8bfa      	ldrh	r2, [r7, #30]
 8006118:	8abb      	ldrh	r3, [r7, #20]
 800611a:	429a      	cmp	r2, r3
 800611c:	f4ff af6a 	bcc.w	8005ff4 <_UG_ProcessTouchData+0x2c>
   }
}
 8006120:	bf00      	nop
 8006122:	bf00      	nop
 8006124:	3724      	adds	r7, #36	@ 0x24
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	20000b1c 	.word	0x20000b1c

08006134 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006142:	2300      	movs	r3, #0
 8006144:	82fb      	strh	r3, [r7, #22]
 8006146:	e035      	b.n	80061b4 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	8afb      	ldrh	r3, [r7, #22]
 800614e:	015b      	lsls	r3, r3, #5
 8006150:	4413      	add	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	785b      	ldrb	r3, [r3, #1]
 800615e:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8006160:	7bfb      	ldrb	r3, [r7, #15]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d121      	bne.n	80061ae <_UG_UpdateObjects+0x7a>
 800616a:	7bfb      	ldrb	r3, [r7, #15]
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01c      	beq.n	80061ae <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d004      	beq.n	8006188 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	6939      	ldr	r1, [r7, #16]
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00d      	beq.n	80061ae <_UG_UpdateObjects+0x7a>
 8006192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006196:	2b00      	cmp	r3, #0
 8006198:	da09      	bge.n	80061ae <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 800619a:	7bbb      	ldrb	r3, [r7, #14]
 800619c:	f003 0341 	and.w	r3, r3, #65	@ 0x41
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d004      	beq.n	80061ae <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	6939      	ldr	r1, [r7, #16]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 80061ae:	8afb      	ldrh	r3, [r7, #22]
 80061b0:	3301      	adds	r3, #1
 80061b2:	82fb      	strh	r3, [r7, #22]
 80061b4:	8afa      	ldrh	r2, [r7, #22]
 80061b6:	8abb      	ldrh	r3, [r7, #20]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d3c5      	bcc.n	8006148 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 80061bc:	bf00      	nop
 80061be:	bf00      	nop
 80061c0:	3718      	adds	r7, #24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 80061d0:	4b22      	ldr	r3, [pc, #136]	@ (800625c <_UG_HandleEvents+0x94>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 80061d6:	4b21      	ldr	r3, [pc, #132]	@ (800625c <_UG_HandleEvents+0x94>)
 80061d8:	2202      	movs	r2, #2
 80061da:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80061e2:	2300      	movs	r3, #0
 80061e4:	82fb      	strh	r3, [r7, #22]
 80061e6:	e02f      	b.n	8006248 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	8afb      	ldrh	r3, [r7, #22]
 80061ee:	015b      	lsls	r3, r3, #5
 80061f0:	4413      	add	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b00      	cmp	r3, #0
 8006202:	d11e      	bne.n	8006242 <_UG_HandleEvents+0x7a>
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d019      	beq.n	8006242 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	7e9b      	ldrb	r3, [r3, #26]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d015      	beq.n	8006242 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8006216:	4a11      	ldr	r2, [pc, #68]	@ (800625c <_UG_HandleEvents+0x94>)
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	7e1a      	ldrb	r2, [r3, #24]
 8006220:	4b0e      	ldr	r3, [pc, #56]	@ (800625c <_UG_HandleEvents+0x94>)
 8006222:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	7e5a      	ldrb	r2, [r3, #25]
 8006228:	4b0c      	ldr	r3, [pc, #48]	@ (800625c <_UG_HandleEvents+0x94>)
 800622a:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	7e9a      	ldrb	r2, [r3, #26]
 8006230:	4b0a      	ldr	r3, [pc, #40]	@ (800625c <_UG_HandleEvents+0x94>)
 8006232:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006238:	4808      	ldr	r0, [pc, #32]	@ (800625c <_UG_HandleEvents+0x94>)
 800623a:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	2200      	movs	r2, #0
 8006240:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8006242:	8afb      	ldrh	r3, [r7, #22]
 8006244:	3301      	adds	r3, #1
 8006246:	82fb      	strh	r3, [r7, #22]
 8006248:	8afa      	ldrh	r2, [r7, #22]
 800624a:	8abb      	ldrh	r3, [r7, #20]
 800624c:	429a      	cmp	r2, r3
 800624e:	d3cb      	bcc.n	80061e8 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8006250:	bf00      	nop
 8006252:	bf00      	nop
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	20000b30 	.word	0x20000b30

08006260 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8006260:	b590      	push	{r4, r7, lr}
 8006262:	b08f      	sub	sp, #60	@ 0x3c
 8006264:	af02      	add	r7, sp, #8
 8006266:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 812c 	beq.w	80064ca <_UG_PutText+0x26a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 8127 	beq.w	80064ca <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	89db      	ldrh	r3, [r3, #14]
 8006280:	847b      	strh	r3, [r7, #34]	@ 0x22
   UG_S16 ys=txt->a.ys;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	895b      	ldrh	r3, [r3, #10]
 8006286:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	3302      	adds	r3, #2
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 8006292:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8006296:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800629a:	1ad2      	subs	r2, r2, r3
 800629c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	f2c0 8114 	blt.w	80064ce <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	891b      	ldrh	r3, [r3, #8]
 80062aa:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	899b      	ldrh	r3, [r3, #12]
 80062b0:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	7d1b      	ldrb	r3, [r3, #20]
 80062b6:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	8adb      	ldrh	r3, [r3, #22]
 80062bc:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	8b1b      	ldrh	r3, [r3, #24]
 80062c2:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	60fb      	str	r3, [r7, #12]
   char* c = str;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff fb94 	bl	8005a00 <_UG_FontSelect>

   rc=1;
 80062d8:	2301      	movs	r3, #1
 80062da:	85bb      	strh	r3, [r7, #44]	@ 0x2c
   c=str;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80062e0:	4b80      	ldr	r3, [pc, #512]	@ (80064e4 <_UG_PutText+0x284>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d107      	bne.n	80062fc <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 80062ec:	f107 0308 	add.w	r3, r7, #8
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7ff f9c1 	bl	8005678 <_UG_DecodeUTF8>
 80062f6:	4603      	mov	r3, r0
 80062f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80062fa:	e004      	b.n	8006306 <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	60ba      	str	r2, [r7, #8]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	84bb      	strh	r3, [r7, #36]	@ 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8006306:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006308:	2b00      	cmp	r3, #0
 800630a:	d006      	beq.n	800631a <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 800630c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800630e:	2b0a      	cmp	r3, #10
 8006310:	d1e6      	bne.n	80062e0 <_UG_PutText+0x80>
 8006312:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006314:	3301      	adds	r3, #1
 8006316:	85bb      	strh	r3, [r7, #44]	@ 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006318:	e7e2      	b.n	80062e0 <_UG_PutText+0x80>
     if(!chr) break;
 800631a:	bf00      	nop
   }

   yp = 0;
 800631c:	2300      	movs	r3, #0
 800631e:	84fb      	strh	r3, [r7, #38]	@ 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8006320:	7e7b      	ldrb	r3, [r7, #25]
 8006322:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006326:	2b00      	cmp	r3, #0
 8006328:	d01f      	beq.n	800636a <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 800632a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800632c:	8c3b      	ldrh	r3, [r7, #32]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	b29b      	uxth	r3, r3
 8006332:	3301      	adds	r3, #1
 8006334:	b29b      	uxth	r3, r3
 8006336:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_height*rc;
 8006338:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800633a:	8bfb      	ldrh	r3, [r7, #30]
 800633c:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 800633e:	fb11 f303 	smulbb	r3, r1, r3
 8006342:	b29b      	uxth	r3, r3
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	b29b      	uxth	r3, r3
 8006348:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_v_space*(rc-1);
 800634a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800634c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800634e:	3b01      	subs	r3, #1
 8006350:	b299      	uxth	r1, r3
 8006352:	8abb      	ldrh	r3, [r7, #20]
 8006354:	fb11 f303 	smulbb	r3, r1, r3
 8006358:	b29b      	uxth	r3, r3
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	b29b      	uxth	r3, r3
 800635e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if ( yp < 0 ){
 8006360:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8006364:	2b00      	cmp	r3, #0
 8006366:	f2c0 80b4 	blt.w	80064d2 <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 800636a:	7e7b      	ldrb	r3, [r7, #25]
 800636c:	f003 0310 	and.w	r3, r3, #16
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <_UG_PutText+0x11c>
 8006374:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8006378:	105b      	asrs	r3, r3, #1
 800637a:	84fb      	strh	r3, [r7, #38]	@ 0x26
   yp += ys;
 800637c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800637e:	8c3b      	ldrh	r3, [r7, #32]
 8006380:	4413      	add	r3, r2
 8006382:	b29b      	uxth	r3, r3
 8006384:	84fb      	strh	r3, [r7, #38]	@ 0x26

   while( 1 )
   {
      sl=0;
 8006386:	2300      	movs	r3, #0
 8006388:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      c=str;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	60bb      	str	r3, [r7, #8]
      wl = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	857b      	strh	r3, [r7, #42]	@ 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006392:	4b54      	ldr	r3, [pc, #336]	@ (80064e4 <_UG_PutText+0x284>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800639a:	2b00      	cmp	r3, #0
 800639c:	d107      	bne.n	80063ae <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 800639e:	f107 0308 	add.w	r3, r7, #8
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff f968 	bl	8005678 <_UG_DecodeUTF8>
 80063a8:	4603      	mov	r3, r0
 80063aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80063ac:	e004      	b.n	80063b8 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	60ba      	str	r2, [r7, #8]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 80063b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d01b      	beq.n	80063f6 <_UG_PutText+0x196>
 80063be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063c0:	2b0a      	cmp	r3, #10
 80063c2:	d018      	beq.n	80063f6 <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 80063c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063c6:	2100      	movs	r1, #0
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff f9cd 	bl	8005768 <_UG_GetCharData>
 80063ce:	4603      	mov	r3, r0
 80063d0:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 80063d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063da:	d00a      	beq.n	80063f2 <_UG_PutText+0x192>
         sl++;
 80063dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80063de:	3301      	adds	r3, #1
 80063e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         wl += w + char_h_space;
 80063e2:	8a7a      	ldrh	r2, [r7, #18]
 80063e4:	8afb      	ldrh	r3, [r7, #22]
 80063e6:	4413      	add	r3, r2
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80063ec:	4413      	add	r3, r2
 80063ee:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80063f0:	e7cf      	b.n	8006392 <_UG_PutText+0x132>
         if (w == -1){continue;}
 80063f2:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80063f4:	e7cd      	b.n	8006392 <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 80063f6:	8afb      	ldrh	r3, [r7, #22]
 80063f8:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	857b      	strh	r3, [r7, #42]	@ 0x2a

      xp = xe - xs + 1;
 80063fe:	8b7a      	ldrh	r2, [r7, #26]
 8006400:	8bbb      	ldrh	r3, [r7, #28]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	b29b      	uxth	r3, r3
 8006406:	3301      	adds	r3, #1
 8006408:	b29b      	uxth	r3, r3
 800640a:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp -= wl;
 800640c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800640e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	b29b      	uxth	r3, r3
 8006414:	853b      	strh	r3, [r7, #40]	@ 0x28
      if ( xp < 0 ) break;
 8006416:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800641a:	2b00      	cmp	r3, #0
 800641c:	db5b      	blt.n	80064d6 <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 800641e:	7e7b      	ldrb	r3, [r7, #25]
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <_UG_PutText+0x1ce>
 8006428:	2300      	movs	r3, #0
 800642a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800642c:	e008      	b.n	8006440 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 800642e:	7e7b      	ldrb	r3, [r7, #25]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <_UG_PutText+0x1e0>
 8006438:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800643c:	105b      	asrs	r3, r3, #1
 800643e:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp += xs;
 8006440:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006442:	8bbb      	ldrh	r3, [r7, #28]
 8006444:	4413      	add	r3, r2
 8006446:	b29b      	uxth	r3, r3
 8006448:	853b      	strh	r3, [r7, #40]	@ 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800644a:	4b26      	ldr	r3, [pc, #152]	@ (80064e4 <_UG_PutText+0x284>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006452:	2b00      	cmp	r3, #0
 8006454:	d107      	bne.n	8006466 <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 8006456:	f107 030c 	add.w	r3, r7, #12
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff f90c 	bl	8005678 <_UG_DecodeUTF8>
 8006460:	4603      	mov	r3, r0
 8006462:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006464:	e004      	b.n	8006470 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	60fa      	str	r2, [r7, #12]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	84bb      	strh	r3, [r7, #36]	@ 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8006470:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006472:	2b00      	cmp	r3, #0
 8006474:	d031      	beq.n	80064da <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 8006476:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006478:	2b0a      	cmp	r3, #10
 800647a:	d01c      	beq.n	80064b6 <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	8a1c      	ldrh	r4, [r3, #16]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	8a5b      	ldrh	r3, [r3, #18]
 8006484:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8006488:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	@ 0x28
 800648c:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	4623      	mov	r3, r4
 8006492:	f7ff fb37 	bl	8005b04 <_UG_PutChar>
 8006496:	4603      	mov	r3, r0
 8006498:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 800649a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a2:	d0d2      	beq.n	800644a <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 80064a4:	8a7a      	ldrh	r2, [r7, #18]
 80064a6:	8afb      	ldrh	r3, [r7, #22]
 80064a8:	4413      	add	r3, r2
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80064ae:	4413      	add	r3, r2
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	853b      	strh	r3, [r7, #40]	@ 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80064b4:	e7c9      	b.n	800644a <_UG_PutText+0x1ea>
           break;
 80064b6:	bf00      	nop
      }
      yp += char_height + char_v_space;
 80064b8:	8bfa      	ldrh	r2, [r7, #30]
 80064ba:	8abb      	ldrh	r3, [r7, #20]
 80064bc:	4413      	add	r3, r2
 80064be:	b29a      	uxth	r2, r3
 80064c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80064c2:	4413      	add	r3, r2
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
      sl=0;
 80064c8:	e75d      	b.n	8006386 <_UG_PutText+0x126>
     return;
 80064ca:	bf00      	nop
 80064cc:	e006      	b.n	80064dc <_UG_PutText+0x27c>
     return;
 80064ce:	bf00      	nop
 80064d0:	e004      	b.n	80064dc <_UG_PutText+0x27c>
        return;
 80064d2:	bf00      	nop
 80064d4:	e002      	b.n	80064dc <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 80064d6:	bf00      	nop
 80064d8:	e000      	b.n	80064dc <_UG_PutText+0x27c>
           return;
 80064da:	bf00      	nop
   }
}
 80064dc:	3734      	adds	r7, #52	@ 0x34
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd90      	pop	{r4, r7, pc}
 80064e2:	bf00      	nop
 80064e4:	20000b1c 	.word	0x20000b1c

080064e8 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 80064e8:	b5b0      	push	{r4, r5, r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af02      	add	r7, sp, #8
 80064ee:	4604      	mov	r4, r0
 80064f0:	4608      	mov	r0, r1
 80064f2:	4611      	mov	r1, r2
 80064f4:	461a      	mov	r2, r3
 80064f6:	4623      	mov	r3, r4
 80064f8:	80fb      	strh	r3, [r7, #6]
 80064fa:	4603      	mov	r3, r0
 80064fc:	80bb      	strh	r3, [r7, #4]
 80064fe:	460b      	mov	r3, r1
 8006500:	807b      	strh	r3, [r7, #2]
 8006502:	4613      	mov	r3, r2
 8006504:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8006506:	887b      	ldrh	r3, [r7, #2]
 8006508:	3b01      	subs	r3, #1
 800650a:	b29b      	uxth	r3, r3
 800650c:	b21c      	sxth	r4, r3
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	1c9a      	adds	r2, r3, #2
 8006512:	61ba      	str	r2, [r7, #24]
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800651a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800651e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	4613      	mov	r3, r2
 8006526:	4622      	mov	r2, r4
 8006528:	f7fe fe94 	bl	8005254 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 800652c:	88bb      	ldrh	r3, [r7, #4]
 800652e:	3301      	adds	r3, #1
 8006530:	b29b      	uxth	r3, r3
 8006532:	b219      	sxth	r1, r3
 8006534:	883b      	ldrh	r3, [r7, #0]
 8006536:	3b01      	subs	r3, #1
 8006538:	b29b      	uxth	r3, r3
 800653a:	b21c      	sxth	r4, r3
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	1c9a      	adds	r2, r3, #2
 8006540:	61ba      	str	r2, [r7, #24]
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006548:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	4623      	mov	r3, r4
 8006550:	f7fe fe80 	bl	8005254 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	1c9a      	adds	r2, r3, #2
 8006558:	61ba      	str	r2, [r7, #24]
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	f9b7 4000 	ldrsh.w	r4, [r7]
 8006560:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006564:	f9b7 1000 	ldrsh.w	r1, [r7]
 8006568:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	4623      	mov	r3, r4
 8006570:	f7fe fe70 	bl	8005254 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8006574:	883b      	ldrh	r3, [r7, #0]
 8006576:	3b01      	subs	r3, #1
 8006578:	b29b      	uxth	r3, r3
 800657a:	b21c      	sxth	r4, r3
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	1c9a      	adds	r2, r3, #2
 8006580:	61ba      	str	r2, [r7, #24]
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006588:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800658c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	4623      	mov	r3, r4
 8006594:	f7fe fe5e 	bl	8005254 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8006598:	88fb      	ldrh	r3, [r7, #6]
 800659a:	3301      	adds	r3, #1
 800659c:	b29b      	uxth	r3, r3
 800659e:	b218      	sxth	r0, r3
 80065a0:	88bb      	ldrh	r3, [r7, #4]
 80065a2:	3301      	adds	r3, #1
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	b219      	sxth	r1, r3
 80065a8:	887b      	ldrh	r3, [r7, #2]
 80065aa:	3b02      	subs	r3, #2
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	b21c      	sxth	r4, r3
 80065b0:	88bb      	ldrh	r3, [r7, #4]
 80065b2:	3301      	adds	r3, #1
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	b21d      	sxth	r5, r3
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	1c9a      	adds	r2, r3, #2
 80065bc:	61ba      	str	r2, [r7, #24]
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	462b      	mov	r3, r5
 80065c4:	4622      	mov	r2, r4
 80065c6:	f7fe fe45 	bl	8005254 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 80065ca:	88fb      	ldrh	r3, [r7, #6]
 80065cc:	3301      	adds	r3, #1
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	b218      	sxth	r0, r3
 80065d2:	88bb      	ldrh	r3, [r7, #4]
 80065d4:	3302      	adds	r3, #2
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	b219      	sxth	r1, r3
 80065da:	88fb      	ldrh	r3, [r7, #6]
 80065dc:	3301      	adds	r3, #1
 80065de:	b29b      	uxth	r3, r3
 80065e0:	b21c      	sxth	r4, r3
 80065e2:	883b      	ldrh	r3, [r7, #0]
 80065e4:	3b02      	subs	r3, #2
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	b21d      	sxth	r5, r3
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	1c9a      	adds	r2, r3, #2
 80065ee:	61ba      	str	r2, [r7, #24]
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	462b      	mov	r3, r5
 80065f6:	4622      	mov	r2, r4
 80065f8:	f7fe fe2c 	bl	8005254 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 80065fc:	88fb      	ldrh	r3, [r7, #6]
 80065fe:	3301      	adds	r3, #1
 8006600:	b29b      	uxth	r3, r3
 8006602:	b218      	sxth	r0, r3
 8006604:	883b      	ldrh	r3, [r7, #0]
 8006606:	3b01      	subs	r3, #1
 8006608:	b29b      	uxth	r3, r3
 800660a:	b219      	sxth	r1, r3
 800660c:	887b      	ldrh	r3, [r7, #2]
 800660e:	3b01      	subs	r3, #1
 8006610:	b29b      	uxth	r3, r3
 8006612:	b21c      	sxth	r4, r3
 8006614:	883b      	ldrh	r3, [r7, #0]
 8006616:	3b01      	subs	r3, #1
 8006618:	b29b      	uxth	r3, r3
 800661a:	b21d      	sxth	r5, r3
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	1c9a      	adds	r2, r3, #2
 8006620:	61ba      	str	r2, [r7, #24]
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	462b      	mov	r3, r5
 8006628:	4622      	mov	r2, r4
 800662a:	f7fe fe13 	bl	8005254 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 800662e:	887b      	ldrh	r3, [r7, #2]
 8006630:	3b01      	subs	r3, #1
 8006632:	b29b      	uxth	r3, r3
 8006634:	b218      	sxth	r0, r3
 8006636:	88bb      	ldrh	r3, [r7, #4]
 8006638:	3301      	adds	r3, #1
 800663a:	b29b      	uxth	r3, r3
 800663c:	b219      	sxth	r1, r3
 800663e:	887b      	ldrh	r3, [r7, #2]
 8006640:	3b01      	subs	r3, #1
 8006642:	b29b      	uxth	r3, r3
 8006644:	b21c      	sxth	r4, r3
 8006646:	883b      	ldrh	r3, [r7, #0]
 8006648:	3b02      	subs	r3, #2
 800664a:	b29b      	uxth	r3, r3
 800664c:	b21d      	sxth	r5, r3
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	1c9a      	adds	r2, r3, #2
 8006652:	61ba      	str	r2, [r7, #24]
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	462b      	mov	r3, r5
 800665a:	4622      	mov	r2, r4
 800665c:	f7fe fdfa 	bl	8005254 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8006660:	88fb      	ldrh	r3, [r7, #6]
 8006662:	3302      	adds	r3, #2
 8006664:	b29b      	uxth	r3, r3
 8006666:	b218      	sxth	r0, r3
 8006668:	88bb      	ldrh	r3, [r7, #4]
 800666a:	3302      	adds	r3, #2
 800666c:	b29b      	uxth	r3, r3
 800666e:	b219      	sxth	r1, r3
 8006670:	887b      	ldrh	r3, [r7, #2]
 8006672:	3b03      	subs	r3, #3
 8006674:	b29b      	uxth	r3, r3
 8006676:	b21c      	sxth	r4, r3
 8006678:	88bb      	ldrh	r3, [r7, #4]
 800667a:	3302      	adds	r3, #2
 800667c:	b29b      	uxth	r3, r3
 800667e:	b21d      	sxth	r5, r3
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	1c9a      	adds	r2, r3, #2
 8006684:	61ba      	str	r2, [r7, #24]
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	462b      	mov	r3, r5
 800668c:	4622      	mov	r2, r4
 800668e:	f7fe fde1 	bl	8005254 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	3302      	adds	r3, #2
 8006696:	b29b      	uxth	r3, r3
 8006698:	b218      	sxth	r0, r3
 800669a:	88bb      	ldrh	r3, [r7, #4]
 800669c:	3303      	adds	r3, #3
 800669e:	b29b      	uxth	r3, r3
 80066a0:	b219      	sxth	r1, r3
 80066a2:	88fb      	ldrh	r3, [r7, #6]
 80066a4:	3302      	adds	r3, #2
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	b21c      	sxth	r4, r3
 80066aa:	883b      	ldrh	r3, [r7, #0]
 80066ac:	3b03      	subs	r3, #3
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	b21d      	sxth	r5, r3
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	1c9a      	adds	r2, r3, #2
 80066b6:	61ba      	str	r2, [r7, #24]
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	462b      	mov	r3, r5
 80066be:	4622      	mov	r2, r4
 80066c0:	f7fe fdc8 	bl	8005254 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 80066c4:	88fb      	ldrh	r3, [r7, #6]
 80066c6:	3302      	adds	r3, #2
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	b218      	sxth	r0, r3
 80066cc:	883b      	ldrh	r3, [r7, #0]
 80066ce:	3b02      	subs	r3, #2
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	b219      	sxth	r1, r3
 80066d4:	887b      	ldrh	r3, [r7, #2]
 80066d6:	3b02      	subs	r3, #2
 80066d8:	b29b      	uxth	r3, r3
 80066da:	b21c      	sxth	r4, r3
 80066dc:	883b      	ldrh	r3, [r7, #0]
 80066de:	3b02      	subs	r3, #2
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	b21d      	sxth	r5, r3
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	1c9a      	adds	r2, r3, #2
 80066e8:	61ba      	str	r2, [r7, #24]
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	462b      	mov	r3, r5
 80066f0:	4622      	mov	r2, r4
 80066f2:	f7fe fdaf 	bl	8005254 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 80066f6:	887b      	ldrh	r3, [r7, #2]
 80066f8:	3b02      	subs	r3, #2
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	b218      	sxth	r0, r3
 80066fe:	88bb      	ldrh	r3, [r7, #4]
 8006700:	3302      	adds	r3, #2
 8006702:	b29b      	uxth	r3, r3
 8006704:	b219      	sxth	r1, r3
 8006706:	887b      	ldrh	r3, [r7, #2]
 8006708:	3b02      	subs	r3, #2
 800670a:	b29b      	uxth	r3, r3
 800670c:	b21a      	sxth	r2, r3
 800670e:	883b      	ldrh	r3, [r7, #0]
 8006710:	3b03      	subs	r3, #3
 8006712:	b29b      	uxth	r3, r3
 8006714:	b21c      	sxth	r4, r3
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	4623      	mov	r3, r4
 800671e:	f7fe fd99 	bl	8005254 <UG_DrawLine>
}
 8006722:	bf00      	nop
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800672c <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	4603      	mov	r3, r0
 8006734:	6039      	str	r1, [r7, #0]
 8006736:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8006738:	79fb      	ldrb	r3, [r7, #7]
 800673a:	2b03      	cmp	r3, #3
 800673c:	d810      	bhi.n	8006760 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 800673e:	4b0b      	ldr	r3, [pc, #44]	@ (800676c <UG_DriverRegister+0x40>)
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	79fb      	ldrb	r3, [r7, #7]
 8006744:	330a      	adds	r3, #10
 8006746:	00db      	lsls	r3, r3, #3
 8006748:	4413      	add	r3, r2
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 800674e:	4b07      	ldr	r3, [pc, #28]	@ (800676c <UG_DriverRegister+0x40>)
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	330a      	adds	r3, #10
 8006756:	00db      	lsls	r3, r3, #3
 8006758:	4413      	add	r3, r2
 800675a:	2203      	movs	r2, #3
 800675c:	721a      	strb	r2, [r3, #8]
 800675e:	e000      	b.n	8006762 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8006760:	bf00      	nop
}
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	20000b1c 	.word	0x20000b1c

08006770 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8006776:	4b5e      	ldr	r3, [pc, #376]	@ (80068f0 <UG_Update+0x180>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <UG_Update+0x2c>
 8006786:	4b5a      	ldr	r3, [pc, #360]	@ (80068f0 <UG_Update+0x180>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f893 2052 	ldrb.w	r2, [r3, #82]	@ 0x52
 800678e:	4b58      	ldr	r3, [pc, #352]	@ (80068f0 <UG_Update+0x180>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0201 	bic.w	r2, r2, #1
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 800679c:	4b54      	ldr	r3, [pc, #336]	@ (80068f0 <UG_Update+0x180>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	4b53      	ldr	r3, [pc, #332]	@ (80068f0 <UG_Update+0x180>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d071      	beq.n	8006890 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 80067ac:	4b50      	ldr	r3, [pc, #320]	@ (80068f0 <UG_Update+0x180>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d06c      	beq.n	8006890 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 80067b6:	4b4e      	ldr	r3, [pc, #312]	@ (80068f0 <UG_Update+0x180>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	4b4d      	ldr	r3, [pc, #308]	@ (80068f0 <UG_Update+0x180>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6912      	ldr	r2, [r2, #16]
 80067c0:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 80067c2:	4b4b      	ldr	r3, [pc, #300]	@ (80068f0 <UG_Update+0x180>)
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	4b4a      	ldr	r3, [pc, #296]	@ (80068f0 <UG_Update+0x180>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68d2      	ldr	r2, [r2, #12]
 80067cc:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 80067ce:	4b48      	ldr	r3, [pc, #288]	@ (80068f0 <UG_Update+0x180>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d045      	beq.n	8006864 <UG_Update+0xf4>
 80067d8:	4b45      	ldr	r3, [pc, #276]	@ (80068f0 <UG_Update+0x180>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	7d9b      	ldrb	r3, [r3, #22]
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d03d      	beq.n	8006864 <UG_Update+0xf4>
 80067e8:	4b41      	ldr	r3, [pc, #260]	@ (80068f0 <UG_Update+0x180>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	7a1b      	ldrb	r3, [r3, #8]
 80067f0:	f003 0308 	and.w	r3, r3, #8
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d035      	beq.n	8006864 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 80067f8:	4b3d      	ldr	r3, [pc, #244]	@ (80068f0 <UG_Update+0x180>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8006802:	4b3b      	ldr	r3, [pc, #236]	@ (80068f0 <UG_Update+0x180>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800680c:	429a      	cmp	r2, r3
 800680e:	d123      	bne.n	8006858 <UG_Update+0xe8>
 8006810:	4b37      	ldr	r3, [pc, #220]	@ (80068f0 <UG_Update+0x180>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800681a:	4b35      	ldr	r3, [pc, #212]	@ (80068f0 <UG_Update+0x180>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006824:	429a      	cmp	r2, r3
 8006826:	d117      	bne.n	8006858 <UG_Update+0xe8>
 8006828:	4b31      	ldr	r3, [pc, #196]	@ (80068f0 <UG_Update+0x180>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8006832:	4b2f      	ldr	r3, [pc, #188]	@ (80068f0 <UG_Update+0x180>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800683c:	429a      	cmp	r2, r3
 800683e:	d10b      	bne.n	8006858 <UG_Update+0xe8>
 8006840:	4b2b      	ldr	r3, [pc, #172]	@ (80068f0 <UG_Update+0x180>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800684a:	4b29      	ldr	r3, [pc, #164]	@ (80068f0 <UG_Update+0x180>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006854:	429a      	cmp	r2, r3
 8006856:	d005      	beq.n	8006864 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8006858:	4b25      	ldr	r3, [pc, #148]	@ (80068f0 <UG_Update+0x180>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	4618      	mov	r0, r3
 8006860:	f000 f848 	bl	80068f4 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8006864:	4b22      	ldr	r3, [pc, #136]	@ (80068f0 <UG_Update+0x180>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	7a1a      	ldrb	r2, [r3, #8]
 800686c:	4b20      	ldr	r3, [pc, #128]	@ (80068f0 <UG_Update+0x180>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 800687a:	4b1d      	ldr	r3, [pc, #116]	@ (80068f0 <UG_Update+0x180>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	7a1a      	ldrb	r2, [r3, #8]
 8006882:	4b1b      	ldr	r3, [pc, #108]	@ (80068f0 <UG_Update+0x180>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
 800688c:	b2d2      	uxtb	r2, r2
 800688e:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8006890:	4b17      	ldr	r3, [pc, #92]	@ (80068f0 <UG_Update+0x180>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d01b      	beq.n	80068d2 <UG_Update+0x162>
   {
      wnd = gui->active_window;
 800689a:	4b15      	ldr	r3, [pc, #84]	@ (80068f0 <UG_Update+0x180>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	7a1b      	ldrb	r3, [r3, #8]
 80068a6:	f003 0320 	and.w	r3, r3, #32
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f8c8 	bl	8006a44 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	7a1b      	ldrb	r3, [r3, #8]
 80068b8:	f003 0308 	and.w	r3, r3, #8
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d008      	beq.n	80068d2 <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff fb81 	bl	8005fc8 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7ff fc34 	bl	8006134 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff fc7b 	bl	80061c8 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 80068d2:	4b07      	ldr	r3, [pc, #28]	@ (80068f0 <UG_Update+0x180>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d004      	beq.n	80068e8 <UG_Update+0x178>
     gui->device->flush();
 80068de:	4b04      	ldr	r3, [pc, #16]	@ (80068f0 <UG_Update+0x180>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	4798      	blx	r3
   }
}
 80068e8:	bf00      	nop
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20000b1c 	.word	0x20000b1c

080068f4 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 80068f4:	b590      	push	{r4, r7, lr}
 80068f6:	b08f      	sub	sp, #60	@ 0x3c
 80068f8:	af02      	add	r7, sp, #8
 80068fa:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 8098 	beq.w	8006a34 <_UG_WindowDrawTitle+0x140>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	7a1b      	ldrb	r3, [r3, #8]
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 8091 	beq.w	8006a34 <_UG_WindowDrawTitle+0x140>
   {
      xs = wnd->xs;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	89db      	ldrh	r3, [r3, #14]
 8006916:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      ys = wnd->ys;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	8a1b      	ldrh	r3, [r3, #16]
 800691c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      xe = wnd->xe;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	8a5b      	ldrh	r3, [r3, #18]
 8006922:	857b      	strh	r3, [r7, #42]	@ 0x2a
      ye = wnd->ye;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	8a9b      	ldrh	r3, [r3, #20]
 8006928:	853b      	strh	r3, [r7, #40]	@ 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	7d9b      	ldrb	r3, [r3, #22]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00f      	beq.n	8006956 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8006936:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006938:	3303      	adds	r3, #3
 800693a:	b29b      	uxth	r3, r3
 800693c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         ys+=3;
 800693e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006940:	3303      	adds	r3, #3
 8006942:	b29b      	uxth	r3, r3
 8006944:	85bb      	strh	r3, [r7, #44]	@ 0x2c
         xe-=3;
 8006946:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006948:	3b03      	subs	r3, #3
 800694a:	b29b      	uxth	r3, r3
 800694c:	857b      	strh	r3, [r7, #42]	@ 0x2a
         ye-=3;
 800694e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006950:	3b03      	subs	r3, #3
 8006952:	b29b      	uxth	r3, r3
 8006954:	853b      	strh	r3, [r7, #40]	@ 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8006956:	4b3a      	ldr	r3, [pc, #232]	@ (8006a40 <_UG_WindowDrawTitle+0x14c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	429a      	cmp	r2, r3
 8006960:	d106      	bne.n	8006970 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006966:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800696c:	83bb      	strh	r3, [r7, #28]
 800696e:	e005      	b.n	800697c <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006974:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800697a:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006982:	461a      	mov	r2, r3
 8006984:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006986:	4413      	add	r3, r2
 8006988:	b29b      	uxth	r3, r3
 800698a:	3b01      	subs	r3, #1
 800698c:	b29b      	uxth	r3, r3
 800698e:	b21c      	sxth	r4, r3
 8006990:	8bfb      	ldrh	r3, [r7, #30]
 8006992:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8006996:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 800699a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	4623      	mov	r3, r4
 80069a2:	f7fe fc01 	bl	80051a8 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 80069b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80069b4:	3303      	adds	r3, #3
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	b21b      	sxth	r3, r3
 80069ba:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 80069bc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80069be:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 80069c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80069c2:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80069ca:	461a      	mov	r2, r3
 80069cc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80069ce:	4413      	add	r3, r2
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	3b01      	subs	r3, #1
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	b21b      	sxth	r3, r3
 80069d8:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80069e0:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80069ea:	847b      	strh	r3, [r7, #34]	@ 0x22
      txt.v_space = wnd->title.v_space;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 80069f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
      _UG_PutText( &txt );
 80069f4:	f107 030c 	add.w	r3, r7, #12
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7ff fc31 	bl	8006260 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006a04:	461a      	mov	r2, r3
 8006a06:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a08:	4413      	add	r3, r2
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	b219      	sxth	r1, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006a14:	461a      	mov	r2, r3
 8006a16:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a18:	4413      	add	r3, r2
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	b21b      	sxth	r3, r3
 8006a1e:	f649 5413 	movw	r4, #40211	@ 0x9d13
 8006a22:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8006a26:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8006a2a:	9400      	str	r4, [sp, #0]
 8006a2c:	f7fe fc12 	bl	8005254 <UG_DrawLine>
      return UG_RESULT_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	e001      	b.n	8006a38 <_UG_WindowDrawTitle+0x144>
   }
   return UG_RESULT_FAIL;
 8006a34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3734      	adds	r7, #52	@ 0x34
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd90      	pop	{r4, r7, pc}
 8006a40:	20000b1c 	.word	0x20000b1c

08006a44 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8006a44:	b590      	push	{r4, r7, lr}
 8006a46:	b089      	sub	sp, #36	@ 0x24
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	89db      	ldrh	r3, [r3, #14]
 8006a50:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	8a1b      	ldrh	r3, [r3, #16]
 8006a56:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	8a5b      	ldrh	r3, [r3, #18]
 8006a5c:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	8a9b      	ldrh	r3, [r3, #20]
 8006a62:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	7a1b      	ldrb	r3, [r3, #8]
 8006a68:	f023 0320 	bic.w	r3, r3, #32
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	7a1b      	ldrb	r3, [r3, #8]
 8006a76:	f003 0308 	and.w	r3, r3, #8
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8084 	beq.w	8006b88 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	7d9b      	ldrb	r3, [r3, #22]
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d021      	beq.n	8006ad0 <_UG_WindowUpdate+0x8c>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	7a1b      	ldrb	r3, [r3, #8]
 8006a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d11b      	bne.n	8006ad0 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8006a98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a9c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006aa0:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8006aa4:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8006aa8:	4c43      	ldr	r4, [pc, #268]	@ (8006bb8 <_UG_WindowUpdate+0x174>)
 8006aaa:	9400      	str	r4, [sp, #0]
 8006aac:	f7ff fd1c 	bl	80064e8 <_UG_DrawObjectFrame>
         xs+=3;
 8006ab0:	8abb      	ldrh	r3, [r7, #20]
 8006ab2:	3303      	adds	r3, #3
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8006ab8:	8a7b      	ldrh	r3, [r7, #18]
 8006aba:	3303      	adds	r3, #3
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8006ac0:	8a3b      	ldrh	r3, [r7, #16]
 8006ac2:	3b03      	subs	r3, #3
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8006ac8:	89fb      	ldrh	r3, [r7, #14]
 8006aca:	3b03      	subs	r3, #3
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	7d9b      	ldrb	r3, [r3, #22]
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d01a      	beq.n	8006b12 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff ff09 	bl	80068f4 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006ae8:	461a      	mov	r2, r3
 8006aea:	8a7b      	ldrh	r3, [r7, #18]
 8006aec:	4413      	add	r3, r2
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3301      	adds	r3, #1
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	7a1b      	ldrb	r3, [r3, #8]
 8006afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d007      	beq.n	8006b12 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	7a1b      	ldrb	r3, [r3, #8]
 8006b06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	721a      	strb	r2, [r3, #8]
            return;
 8006b10:	e04e      	b.n	8006bb0 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	899b      	ldrh	r3, [r3, #12]
 8006b16:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8006b1a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006b1e:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8006b22:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	4623      	mov	r3, r4
 8006b2a:	f7fe fb3d 	bl	80051a8 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8006b34:	2300      	movs	r3, #0
 8006b36:	82fb      	strh	r3, [r7, #22]
 8006b38:	e021      	b.n	8006b7e <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	8afb      	ldrh	r3, [r7, #22]
 8006b40:	015b      	lsls	r3, r3, #5
 8006b42:	4413      	add	r3, r2
 8006b44:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d112      	bne.n	8006b78 <_UG_WindowUpdate+0x134>
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00c      	beq.n	8006b78 <_UG_WindowUpdate+0x134>
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d006      	beq.n	8006b78 <_UG_WindowUpdate+0x134>
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8006b78:	8afb      	ldrh	r3, [r7, #22]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	82fb      	strh	r3, [r7, #22]
 8006b7e:	8afa      	ldrh	r2, [r7, #22]
 8006b80:	89bb      	ldrh	r3, [r7, #12]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d3d9      	bcc.n	8006b3a <_UG_WindowUpdate+0xf6>
 8006b86:	e013      	b.n	8006bb0 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8006ba0:	4b06      	ldr	r3, [pc, #24]	@ (8006bbc <_UG_WindowUpdate+0x178>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	4623      	mov	r3, r4
 8006bac:	f7fe fafc 	bl	80051a8 <UG_FillFrame>
   }
}
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd90      	pop	{r4, r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	08018318 	.word	0x08018318
 8006bbc:	20000b1c 	.word	0x20000b1c

08006bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006bc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006bf8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006bc4:	f7fe f9f8 	bl	8004fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006bc8:	480c      	ldr	r0, [pc, #48]	@ (8006bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8006bca:	490d      	ldr	r1, [pc, #52]	@ (8006c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8006c04 <LoopForever+0xe>)
  movs r3, #0
 8006bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006bd0:	e002      	b.n	8006bd8 <LoopCopyDataInit>

08006bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006bd6:	3304      	adds	r3, #4

08006bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006bdc:	d3f9      	bcc.n	8006bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006bde:	4a0a      	ldr	r2, [pc, #40]	@ (8006c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006be0:	4c0a      	ldr	r4, [pc, #40]	@ (8006c0c <LoopForever+0x16>)
  movs r3, #0
 8006be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006be4:	e001      	b.n	8006bea <LoopFillZerobss>

08006be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006be8:	3204      	adds	r2, #4

08006bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006bec:	d3fb      	bcc.n	8006be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006bee:	f00a f947 	bl	8010e80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006bf2:	f7fb fcb1 	bl	8002558 <main>

08006bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8006bf6:	e7fe      	b.n	8006bf6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006bf8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8006bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c00:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8006c04:	080186d8 	.word	0x080186d8
  ldr r2, =_sbss
 8006c08:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8006c0c:	20000c88 	.word	0x20000c88

08006c10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006c10:	e7fe      	b.n	8006c10 <ADC1_IRQHandler>

08006c12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c1c:	2003      	movs	r0, #3
 8006c1e:	f001 f9dd 	bl	8007fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006c22:	2000      	movs	r0, #0
 8006c24:	f000 f80e 	bl	8006c44 <HAL_InitTick>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d002      	beq.n	8006c34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	71fb      	strb	r3, [r7, #7]
 8006c32:	e001      	b.n	8006c38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006c34:	f7fd f8f6 	bl	8003e24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006c38:	79fb      	ldrb	r3, [r7, #7]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006c50:	4b17      	ldr	r3, [pc, #92]	@ (8006cb0 <HAL_InitTick+0x6c>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d023      	beq.n	8006ca0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006c58:	4b16      	ldr	r3, [pc, #88]	@ (8006cb4 <HAL_InitTick+0x70>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	4b14      	ldr	r3, [pc, #80]	@ (8006cb0 <HAL_InitTick+0x6c>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	4619      	mov	r1, r3
 8006c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f001 f9e9 	bl	8008046 <HAL_SYSTICK_Config>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10f      	bne.n	8006c9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b0f      	cmp	r3, #15
 8006c7e:	d809      	bhi.n	8006c94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c80:	2200      	movs	r2, #0
 8006c82:	6879      	ldr	r1, [r7, #4]
 8006c84:	f04f 30ff 	mov.w	r0, #4294967295
 8006c88:	f001 f9b3 	bl	8007ff2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8006cb8 <HAL_InitTick+0x74>)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	e007      	b.n	8006ca4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	73fb      	strb	r3, [r7, #15]
 8006c98:	e004      	b.n	8006ca4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	73fb      	strb	r3, [r7, #15]
 8006c9e:	e001      	b.n	8006ca4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	2000003c 	.word	0x2000003c
 8006cb4:	20000034 	.word	0x20000034
 8006cb8:	20000038 	.word	0x20000038

08006cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006cc0:	4b06      	ldr	r3, [pc, #24]	@ (8006cdc <HAL_IncTick+0x20>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	4b06      	ldr	r3, [pc, #24]	@ (8006ce0 <HAL_IncTick+0x24>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4413      	add	r3, r2
 8006ccc:	4a04      	ldr	r2, [pc, #16]	@ (8006ce0 <HAL_IncTick+0x24>)
 8006cce:	6013      	str	r3, [r2, #0]
}
 8006cd0:	bf00      	nop
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	2000003c 	.word	0x2000003c
 8006ce0:	20000b38 	.word	0x20000b38

08006ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8006ce8:	4b03      	ldr	r3, [pc, #12]	@ (8006cf8 <HAL_GetTick+0x14>)
 8006cea:	681b      	ldr	r3, [r3, #0]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	20000b38 	.word	0x20000b38

08006cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d04:	f7ff ffee 	bl	8006ce4 <HAL_GetTick>
 8006d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d14:	d005      	beq.n	8006d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006d16:	4b0a      	ldr	r3, [pc, #40]	@ (8006d40 <HAL_Delay+0x44>)
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006d22:	bf00      	nop
 8006d24:	f7ff ffde 	bl	8006ce4 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d8f7      	bhi.n	8006d24 <HAL_Delay+0x28>
  {
  }
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	2000003c 	.word	0x2000003c

08006d44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	609a      	str	r2, [r3, #8]
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	609a      	str	r2, [r3, #8]
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b087      	sub	sp, #28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
 8006db8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3360      	adds	r3, #96	@ 0x60
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	4b08      	ldr	r3, [pc, #32]	@ (8006df0 <LL_ADC_SetOffset+0x44>)
 8006dce:	4013      	ands	r3, r2
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006de4:	bf00      	nop
 8006de6:	371c      	adds	r7, #28
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	03fff000 	.word	0x03fff000

08006df4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3360      	adds	r3, #96	@ 0x60
 8006e02:	461a      	mov	r2, r3
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3360      	adds	r3, #96	@ 0x60
 8006e30:	461a      	mov	r2, r3
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	431a      	orrs	r2, r3
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006e4a:	bf00      	nop
 8006e4c:	371c      	adds	r7, #28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	615a      	str	r2, [r3, #20]
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	3330      	adds	r3, #48	@ 0x30
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	0a1b      	lsrs	r3, r3, #8
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	f003 030c 	and.w	r3, r3, #12
 8006e98:	4413      	add	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f003 031f 	and.w	r3, r3, #31
 8006ea6:	211f      	movs	r1, #31
 8006ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8006eac:	43db      	mvns	r3, r3
 8006eae:	401a      	ands	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	0e9b      	lsrs	r3, r3, #26
 8006eb4:	f003 011f 	and.w	r1, r3, #31
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f003 031f 	and.w	r3, r3, #31
 8006ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006ec8:	bf00      	nop
 8006eca:	371c      	adds	r7, #28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	3314      	adds	r3, #20
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	0e5b      	lsrs	r3, r3, #25
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	f003 0304 	and.w	r3, r3, #4
 8006ef0:	4413      	add	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	0d1b      	lsrs	r3, r3, #20
 8006efc:	f003 031f 	and.w	r3, r3, #31
 8006f00:	2107      	movs	r1, #7
 8006f02:	fa01 f303 	lsl.w	r3, r1, r3
 8006f06:	43db      	mvns	r3, r3
 8006f08:	401a      	ands	r2, r3
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	0d1b      	lsrs	r3, r3, #20
 8006f0e:	f003 031f 	and.w	r3, r3, #31
 8006f12:	6879      	ldr	r1, [r7, #4]
 8006f14:	fa01 f303 	lsl.w	r3, r1, r3
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006f1e:	bf00      	nop
 8006f20:	371c      	adds	r7, #28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
	...

08006f2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f44:	43db      	mvns	r3, r3
 8006f46:	401a      	ands	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f003 0318 	and.w	r3, r3, #24
 8006f4e:	4908      	ldr	r1, [pc, #32]	@ (8006f70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006f50:	40d9      	lsrs	r1, r3
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	400b      	ands	r3, r1
 8006f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006f62:	bf00      	nop
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	0007ffff 	.word	0x0007ffff

08006f74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006f84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6093      	str	r3, [r2, #8]
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fac:	d101      	bne.n	8006fb2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e000      	b.n	8006fb4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006fd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006fd4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ff8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ffc:	d101      	bne.n	8007002 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e000      	b.n	8007004 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b01      	cmp	r3, #1
 8007022:	d101      	bne.n	8007028 <LL_ADC_IsEnabled+0x18>
 8007024:	2301      	movs	r3, #1
 8007026:	e000      	b.n	800702a <LL_ADC_IsEnabled+0x1a>
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f003 0304 	and.w	r3, r3, #4
 8007046:	2b04      	cmp	r3, #4
 8007048:	d101      	bne.n	800704e <LL_ADC_REG_IsConversionOngoing+0x18>
 800704a:	2301      	movs	r3, #1
 800704c:	e000      	b.n	8007050 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f003 0308 	and.w	r3, r3, #8
 800706c:	2b08      	cmp	r3, #8
 800706e:	d101      	bne.n	8007074 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007070:	2301      	movs	r3, #1
 8007072:	e000      	b.n	8007076 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
	...

08007084 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8007090:	2300      	movs	r3, #0
 8007092:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e129      	b.n	80072f2 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d109      	bne.n	80070c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7fc fedd 	bl	8003e6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7ff ff67 	bl	8006f98 <LL_ADC_IsDeepPowerDownEnabled>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d004      	beq.n	80070da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7ff ff4d 	bl	8006f74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff ff82 	bl	8006fe8 <LL_ADC_IsInternalRegulatorEnabled>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d115      	bne.n	8007116 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7ff ff66 	bl	8006fc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80070f4:	4b81      	ldr	r3, [pc, #516]	@ (80072fc <HAL_ADC_Init+0x278>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	099b      	lsrs	r3, r3, #6
 80070fa:	4a81      	ldr	r2, [pc, #516]	@ (8007300 <HAL_ADC_Init+0x27c>)
 80070fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007100:	099b      	lsrs	r3, r3, #6
 8007102:	3301      	adds	r3, #1
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007108:	e002      	b.n	8007110 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3b01      	subs	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1f9      	bne.n	800710a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff ff64 	bl	8006fe8 <LL_ADC_IsInternalRegulatorEnabled>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10d      	bne.n	8007142 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712a:	f043 0210 	orr.w	r2, r3, #16
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007136:	f043 0201 	orr.w	r2, r3, #1
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4618      	mov	r0, r3
 8007148:	f7ff ff75 	bl	8007036 <LL_ADC_REG_IsConversionOngoing>
 800714c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007152:	f003 0310 	and.w	r3, r3, #16
 8007156:	2b00      	cmp	r3, #0
 8007158:	f040 80c2 	bne.w	80072e0 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	2b00      	cmp	r3, #0
 8007160:	f040 80be 	bne.w	80072e0 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007168:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800716c:	f043 0202 	orr.w	r2, r3, #2
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	f7ff ff49 	bl	8007010 <LL_ADC_IsEnabled>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10b      	bne.n	800719c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007184:	485f      	ldr	r0, [pc, #380]	@ (8007304 <HAL_ADC_Init+0x280>)
 8007186:	f7ff ff43 	bl	8007010 <LL_ADC_IsEnabled>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d105      	bne.n	800719c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	4619      	mov	r1, r3
 8007196:	485c      	ldr	r0, [pc, #368]	@ (8007308 <HAL_ADC_Init+0x284>)
 8007198:	f7ff fdd4 	bl	8006d44 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	7e5b      	ldrb	r3, [r3, #25]
 80071a0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80071a6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80071ac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80071b2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071ba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80071bc:	4313      	orrs	r3, r2
 80071be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d106      	bne.n	80071d8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ce:	3b01      	subs	r3, #1
 80071d0:	045b      	lsls	r3, r3, #17
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d009      	beq.n	80071f4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	4b44      	ldr	r3, [pc, #272]	@ (800730c <HAL_ADC_Init+0x288>)
 80071fc:	4013      	ands	r3, r2
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	6812      	ldr	r2, [r2, #0]
 8007202:	69b9      	ldr	r1, [r7, #24]
 8007204:	430b      	orrs	r3, r1
 8007206:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4618      	mov	r0, r3
 800720e:	f7ff ff25 	bl	800705c <LL_ADC_INJ_IsConversionOngoing>
 8007212:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d140      	bne.n	800729c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d13d      	bne.n	800729c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	7e1b      	ldrb	r3, [r3, #24]
 8007228:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800722a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007232:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007234:	4313      	orrs	r3, r2
 8007236:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007242:	f023 0306 	bic.w	r3, r3, #6
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	6812      	ldr	r2, [r2, #0]
 800724a:	69b9      	ldr	r1, [r7, #24]
 800724c:	430b      	orrs	r3, r1
 800724e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007256:	2b01      	cmp	r3, #1
 8007258:	d118      	bne.n	800728c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007264:	f023 0304 	bic.w	r3, r3, #4
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007270:	4311      	orrs	r1, r2
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007276:	4311      	orrs	r1, r2
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800727c:	430a      	orrs	r2, r1
 800727e:	431a      	orrs	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0201 	orr.w	r2, r2, #1
 8007288:	611a      	str	r2, [r3, #16]
 800728a:	e007      	b.n	800729c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691a      	ldr	r2, [r3, #16]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0201 	bic.w	r2, r2, #1
 800729a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d10c      	bne.n	80072be <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072aa:	f023 010f 	bic.w	r1, r3, #15
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	1e5a      	subs	r2, r3, #1
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80072bc:	e007      	b.n	80072ce <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 020f 	bic.w	r2, r2, #15
 80072cc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072d2:	f023 0303 	bic.w	r3, r3, #3
 80072d6:	f043 0201 	orr.w	r2, r3, #1
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80072de:	e007      	b.n	80072f0 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072e4:	f043 0210 	orr.w	r2, r3, #16
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80072f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3720      	adds	r7, #32
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20000034 	.word	0x20000034
 8007300:	053e2d63 	.word	0x053e2d63
 8007304:	50040000 	.word	0x50040000
 8007308:	50040300 	.word	0x50040300
 800730c:	fff0c007 	.word	0xfff0c007

08007310 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b0b6      	sub	sp, #216	@ 0xd8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007320:	2300      	movs	r3, #0
 8007322:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800732a:	2b01      	cmp	r3, #1
 800732c:	d101      	bne.n	8007332 <HAL_ADC_ConfigChannel+0x22>
 800732e:	2302      	movs	r3, #2
 8007330:	e3d5      	b.n	8007ade <HAL_ADC_ConfigChannel+0x7ce>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff fe79 	bl	8007036 <LL_ADC_REG_IsConversionOngoing>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	f040 83ba 	bne.w	8007ac0 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	2b05      	cmp	r3, #5
 800735a:	d824      	bhi.n	80073a6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	3b02      	subs	r3, #2
 8007362:	2b03      	cmp	r3, #3
 8007364:	d81b      	bhi.n	800739e <HAL_ADC_ConfigChannel+0x8e>
 8007366:	a201      	add	r2, pc, #4	@ (adr r2, 800736c <HAL_ADC_ConfigChannel+0x5c>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	0800737d 	.word	0x0800737d
 8007370:	08007385 	.word	0x08007385
 8007374:	0800738d 	.word	0x0800738d
 8007378:	08007395 	.word	0x08007395
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800737c:	230c      	movs	r3, #12
 800737e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8007382:	e010      	b.n	80073a6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8007384:	2312      	movs	r3, #18
 8007386:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800738a:	e00c      	b.n	80073a6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800738c:	2318      	movs	r3, #24
 800738e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8007392:	e008      	b.n	80073a6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8007394:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007398:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800739c:	e003      	b.n	80073a6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800739e:	2306      	movs	r3, #6
 80073a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80073a4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80073b4:	f7ff fd62 	bl	8006e7c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4618      	mov	r0, r3
 80073be:	f7ff fe3a 	bl	8007036 <LL_ADC_REG_IsConversionOngoing>
 80073c2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff fe46 	bl	800705c <LL_ADC_INJ_IsConversionOngoing>
 80073d0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80073d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f040 81bf 	bne.w	800775c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80073de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f040 81ba 	bne.w	800775c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073f0:	d10f      	bne.n	8007412 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6818      	ldr	r0, [r3, #0]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2200      	movs	r2, #0
 80073fc:	4619      	mov	r1, r3
 80073fe:	f7ff fd69 	bl	8006ed4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff fd23 	bl	8006e56 <LL_ADC_SetSamplingTimeCommonConfig>
 8007410:	e00e      	b.n	8007430 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6818      	ldr	r0, [r3, #0]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	6819      	ldr	r1, [r3, #0]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	461a      	mov	r2, r3
 8007420:	f7ff fd58 	bl	8006ed4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2100      	movs	r1, #0
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff fd13 	bl	8006e56 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	695a      	ldr	r2, [r3, #20]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	08db      	lsrs	r3, r3, #3
 800743c:	f003 0303 	and.w	r3, r3, #3
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	fa02 f303 	lsl.w	r3, r2, r3
 8007446:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	2b04      	cmp	r3, #4
 8007450:	d00a      	beq.n	8007468 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6818      	ldr	r0, [r3, #0]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	6919      	ldr	r1, [r3, #16]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007462:	f7ff fca3 	bl	8006dac <LL_ADC_SetOffset>
 8007466:	e179      	b.n	800775c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2100      	movs	r1, #0
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff fcc0 	bl	8006df4 <LL_ADC_GetOffsetChannel>
 8007474:	4603      	mov	r3, r0
 8007476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10a      	bne.n	8007494 <HAL_ADC_ConfigChannel+0x184>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2100      	movs	r1, #0
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff fcb5 	bl	8006df4 <LL_ADC_GetOffsetChannel>
 800748a:	4603      	mov	r3, r0
 800748c:	0e9b      	lsrs	r3, r3, #26
 800748e:	f003 021f 	and.w	r2, r3, #31
 8007492:	e01e      	b.n	80074d2 <HAL_ADC_ConfigChannel+0x1c2>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2100      	movs	r1, #0
 800749a:	4618      	mov	r0, r3
 800749c:	f7ff fcaa 	bl	8006df4 <LL_ADC_GetOffsetChannel>
 80074a0:	4603      	mov	r3, r0
 80074a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074aa:	fa93 f3a3 	rbit	r3, r3
 80074ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80074b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80074ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80074c2:	2320      	movs	r3, #32
 80074c4:	e004      	b.n	80074d0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80074c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80074ca:	fab3 f383 	clz	r3, r3
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d105      	bne.n	80074ea <HAL_ADC_ConfigChannel+0x1da>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	0e9b      	lsrs	r3, r3, #26
 80074e4:	f003 031f 	and.w	r3, r3, #31
 80074e8:	e018      	b.n	800751c <HAL_ADC_ConfigChannel+0x20c>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074f6:	fa93 f3a3 	rbit	r3, r3
 80074fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80074fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007502:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8007506:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800750e:	2320      	movs	r3, #32
 8007510:	e004      	b.n	800751c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8007512:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007516:	fab3 f383 	clz	r3, r3
 800751a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800751c:	429a      	cmp	r2, r3
 800751e:	d106      	bne.n	800752e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2200      	movs	r2, #0
 8007526:	2100      	movs	r1, #0
 8007528:	4618      	mov	r0, r3
 800752a:	f7ff fc79 	bl	8006e20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2101      	movs	r1, #1
 8007534:	4618      	mov	r0, r3
 8007536:	f7ff fc5d 	bl	8006df4 <LL_ADC_GetOffsetChannel>
 800753a:	4603      	mov	r3, r0
 800753c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10a      	bne.n	800755a <HAL_ADC_ConfigChannel+0x24a>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2101      	movs	r1, #1
 800754a:	4618      	mov	r0, r3
 800754c:	f7ff fc52 	bl	8006df4 <LL_ADC_GetOffsetChannel>
 8007550:	4603      	mov	r3, r0
 8007552:	0e9b      	lsrs	r3, r3, #26
 8007554:	f003 021f 	and.w	r2, r3, #31
 8007558:	e01e      	b.n	8007598 <HAL_ADC_ConfigChannel+0x288>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2101      	movs	r1, #1
 8007560:	4618      	mov	r0, r3
 8007562:	f7ff fc47 	bl	8006df4 <LL_ADC_GetOffsetChannel>
 8007566:	4603      	mov	r3, r0
 8007568:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800756c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007570:	fa93 f3a3 	rbit	r3, r3
 8007574:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8007578:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800757c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8007580:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8007588:	2320      	movs	r3, #32
 800758a:	e004      	b.n	8007596 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800758c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007590:	fab3 f383 	clz	r3, r3
 8007594:	b2db      	uxtb	r3, r3
 8007596:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d105      	bne.n	80075b0 <HAL_ADC_ConfigChannel+0x2a0>
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	0e9b      	lsrs	r3, r3, #26
 80075aa:	f003 031f 	and.w	r3, r3, #31
 80075ae:	e018      	b.n	80075e2 <HAL_ADC_ConfigChannel+0x2d2>
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80075bc:	fa93 f3a3 	rbit	r3, r3
 80075c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80075c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80075cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80075d4:	2320      	movs	r3, #32
 80075d6:	e004      	b.n	80075e2 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80075d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075dc:	fab3 f383 	clz	r3, r3
 80075e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d106      	bne.n	80075f4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2200      	movs	r2, #0
 80075ec:	2101      	movs	r1, #1
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7ff fc16 	bl	8006e20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2102      	movs	r1, #2
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff fbfa 	bl	8006df4 <LL_ADC_GetOffsetChannel>
 8007600:	4603      	mov	r3, r0
 8007602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10a      	bne.n	8007620 <HAL_ADC_ConfigChannel+0x310>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2102      	movs	r1, #2
 8007610:	4618      	mov	r0, r3
 8007612:	f7ff fbef 	bl	8006df4 <LL_ADC_GetOffsetChannel>
 8007616:	4603      	mov	r3, r0
 8007618:	0e9b      	lsrs	r3, r3, #26
 800761a:	f003 021f 	and.w	r2, r3, #31
 800761e:	e01e      	b.n	800765e <HAL_ADC_ConfigChannel+0x34e>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2102      	movs	r1, #2
 8007626:	4618      	mov	r0, r3
 8007628:	f7ff fbe4 	bl	8006df4 <LL_ADC_GetOffsetChannel>
 800762c:	4603      	mov	r3, r0
 800762e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007632:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007636:	fa93 f3a3 	rbit	r3, r3
 800763a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800763e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8007646:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800764e:	2320      	movs	r3, #32
 8007650:	e004      	b.n	800765c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8007652:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007656:	fab3 f383 	clz	r3, r3
 800765a:	b2db      	uxtb	r3, r3
 800765c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007666:	2b00      	cmp	r3, #0
 8007668:	d105      	bne.n	8007676 <HAL_ADC_ConfigChannel+0x366>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	0e9b      	lsrs	r3, r3, #26
 8007670:	f003 031f 	and.w	r3, r3, #31
 8007674:	e014      	b.n	80076a0 <HAL_ADC_ConfigChannel+0x390>
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800767c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800767e:	fa93 f3a3 	rbit	r3, r3
 8007682:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8007684:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007686:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800768a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8007692:	2320      	movs	r3, #32
 8007694:	e004      	b.n	80076a0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8007696:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800769a:	fab3 f383 	clz	r3, r3
 800769e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d106      	bne.n	80076b2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2200      	movs	r2, #0
 80076aa:	2102      	movs	r1, #2
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7ff fbb7 	bl	8006e20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2103      	movs	r1, #3
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7ff fb9b 	bl	8006df4 <LL_ADC_GetOffsetChannel>
 80076be:	4603      	mov	r3, r0
 80076c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <HAL_ADC_ConfigChannel+0x3ce>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2103      	movs	r1, #3
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff fb90 	bl	8006df4 <LL_ADC_GetOffsetChannel>
 80076d4:	4603      	mov	r3, r0
 80076d6:	0e9b      	lsrs	r3, r3, #26
 80076d8:	f003 021f 	and.w	r2, r3, #31
 80076dc:	e017      	b.n	800770e <HAL_ADC_ConfigChannel+0x3fe>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2103      	movs	r1, #3
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7ff fb85 	bl	8006df4 <LL_ADC_GetOffsetChannel>
 80076ea:	4603      	mov	r3, r0
 80076ec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076f0:	fa93 f3a3 	rbit	r3, r3
 80076f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80076f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076f8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80076fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8007700:	2320      	movs	r3, #32
 8007702:	e003      	b.n	800770c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8007704:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007706:	fab3 f383 	clz	r3, r3
 800770a:	b2db      	uxtb	r3, r3
 800770c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007716:	2b00      	cmp	r3, #0
 8007718:	d105      	bne.n	8007726 <HAL_ADC_ConfigChannel+0x416>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	0e9b      	lsrs	r3, r3, #26
 8007720:	f003 031f 	and.w	r3, r3, #31
 8007724:	e011      	b.n	800774a <HAL_ADC_ConfigChannel+0x43a>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800772c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800772e:	fa93 f3a3 	rbit	r3, r3
 8007732:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8007734:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007736:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8007738:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800773e:	2320      	movs	r3, #32
 8007740:	e003      	b.n	800774a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8007742:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007744:	fab3 f383 	clz	r3, r3
 8007748:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800774a:	429a      	cmp	r2, r3
 800774c:	d106      	bne.n	800775c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2200      	movs	r2, #0
 8007754:	2103      	movs	r1, #3
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff fb62 	bl	8006e20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4618      	mov	r0, r3
 8007762:	f7ff fc55 	bl	8007010 <LL_ADC_IsEnabled>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	f040 813f 	bne.w	80079ec <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6818      	ldr	r0, [r3, #0]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	6819      	ldr	r1, [r3, #0]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	461a      	mov	r2, r3
 800777c:	f7ff fbd6 	bl	8006f2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	4a8e      	ldr	r2, [pc, #568]	@ (80079c0 <HAL_ADC_ConfigChannel+0x6b0>)
 8007786:	4293      	cmp	r3, r2
 8007788:	f040 8130 	bne.w	80079ec <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10b      	bne.n	80077b4 <HAL_ADC_ConfigChannel+0x4a4>
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	0e9b      	lsrs	r3, r3, #26
 80077a2:	3301      	adds	r3, #1
 80077a4:	f003 031f 	and.w	r3, r3, #31
 80077a8:	2b09      	cmp	r3, #9
 80077aa:	bf94      	ite	ls
 80077ac:	2301      	movls	r3, #1
 80077ae:	2300      	movhi	r3, #0
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	e019      	b.n	80077e8 <HAL_ADC_ConfigChannel+0x4d8>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077bc:	fa93 f3a3 	rbit	r3, r3
 80077c0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80077c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80077c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80077cc:	2320      	movs	r3, #32
 80077ce:	e003      	b.n	80077d8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80077d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077d2:	fab3 f383 	clz	r3, r3
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	3301      	adds	r3, #1
 80077da:	f003 031f 	and.w	r3, r3, #31
 80077de:	2b09      	cmp	r3, #9
 80077e0:	bf94      	ite	ls
 80077e2:	2301      	movls	r3, #1
 80077e4:	2300      	movhi	r3, #0
 80077e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d079      	beq.n	80078e0 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d107      	bne.n	8007808 <HAL_ADC_ConfigChannel+0x4f8>
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	0e9b      	lsrs	r3, r3, #26
 80077fe:	3301      	adds	r3, #1
 8007800:	069b      	lsls	r3, r3, #26
 8007802:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007806:	e015      	b.n	8007834 <HAL_ADC_ConfigChannel+0x524>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800780e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007810:	fa93 f3a3 	rbit	r3, r3
 8007814:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8007816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007818:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800781a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8007820:	2320      	movs	r3, #32
 8007822:	e003      	b.n	800782c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8007824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007826:	fab3 f383 	clz	r3, r3
 800782a:	b2db      	uxtb	r3, r3
 800782c:	3301      	adds	r3, #1
 800782e:	069b      	lsls	r3, r3, #26
 8007830:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800783c:	2b00      	cmp	r3, #0
 800783e:	d109      	bne.n	8007854 <HAL_ADC_ConfigChannel+0x544>
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	0e9b      	lsrs	r3, r3, #26
 8007846:	3301      	adds	r3, #1
 8007848:	f003 031f 	and.w	r3, r3, #31
 800784c:	2101      	movs	r1, #1
 800784e:	fa01 f303 	lsl.w	r3, r1, r3
 8007852:	e017      	b.n	8007884 <HAL_ADC_ConfigChannel+0x574>
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800785a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800785c:	fa93 f3a3 	rbit	r3, r3
 8007860:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8007862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007864:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8007866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800786c:	2320      	movs	r3, #32
 800786e:	e003      	b.n	8007878 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8007870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007872:	fab3 f383 	clz	r3, r3
 8007876:	b2db      	uxtb	r3, r3
 8007878:	3301      	adds	r3, #1
 800787a:	f003 031f 	and.w	r3, r3, #31
 800787e:	2101      	movs	r1, #1
 8007880:	fa01 f303 	lsl.w	r3, r1, r3
 8007884:	ea42 0103 	orr.w	r1, r2, r3
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10a      	bne.n	80078aa <HAL_ADC_ConfigChannel+0x59a>
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	0e9b      	lsrs	r3, r3, #26
 800789a:	3301      	adds	r3, #1
 800789c:	f003 021f 	and.w	r2, r3, #31
 80078a0:	4613      	mov	r3, r2
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	4413      	add	r3, r2
 80078a6:	051b      	lsls	r3, r3, #20
 80078a8:	e018      	b.n	80078dc <HAL_ADC_ConfigChannel+0x5cc>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b2:	fa93 f3a3 	rbit	r3, r3
 80078b6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80078b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80078bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80078c2:	2320      	movs	r3, #32
 80078c4:	e003      	b.n	80078ce <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80078c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c8:	fab3 f383 	clz	r3, r3
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	3301      	adds	r3, #1
 80078d0:	f003 021f 	and.w	r2, r3, #31
 80078d4:	4613      	mov	r3, r2
 80078d6:	005b      	lsls	r3, r3, #1
 80078d8:	4413      	add	r3, r2
 80078da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80078dc:	430b      	orrs	r3, r1
 80078de:	e080      	b.n	80079e2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d107      	bne.n	80078fc <HAL_ADC_ConfigChannel+0x5ec>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	0e9b      	lsrs	r3, r3, #26
 80078f2:	3301      	adds	r3, #1
 80078f4:	069b      	lsls	r3, r3, #26
 80078f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80078fa:	e015      	b.n	8007928 <HAL_ADC_ConfigChannel+0x618>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007904:	fa93 f3a3 	rbit	r3, r3
 8007908:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800790a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800790e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8007914:	2320      	movs	r3, #32
 8007916:	e003      	b.n	8007920 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8007918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791a:	fab3 f383 	clz	r3, r3
 800791e:	b2db      	uxtb	r3, r3
 8007920:	3301      	adds	r3, #1
 8007922:	069b      	lsls	r3, r3, #26
 8007924:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007930:	2b00      	cmp	r3, #0
 8007932:	d109      	bne.n	8007948 <HAL_ADC_ConfigChannel+0x638>
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	0e9b      	lsrs	r3, r3, #26
 800793a:	3301      	adds	r3, #1
 800793c:	f003 031f 	and.w	r3, r3, #31
 8007940:	2101      	movs	r1, #1
 8007942:	fa01 f303 	lsl.w	r3, r1, r3
 8007946:	e017      	b.n	8007978 <HAL_ADC_ConfigChannel+0x668>
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	fa93 f3a3 	rbit	r3, r3
 8007954:	61bb      	str	r3, [r7, #24]
  return result;
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8007960:	2320      	movs	r3, #32
 8007962:	e003      	b.n	800796c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	fab3 f383 	clz	r3, r3
 800796a:	b2db      	uxtb	r3, r3
 800796c:	3301      	adds	r3, #1
 800796e:	f003 031f 	and.w	r3, r3, #31
 8007972:	2101      	movs	r1, #1
 8007974:	fa01 f303 	lsl.w	r3, r1, r3
 8007978:	ea42 0103 	orr.w	r1, r2, r3
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10d      	bne.n	80079a4 <HAL_ADC_ConfigChannel+0x694>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	0e9b      	lsrs	r3, r3, #26
 800798e:	3301      	adds	r3, #1
 8007990:	f003 021f 	and.w	r2, r3, #31
 8007994:	4613      	mov	r3, r2
 8007996:	005b      	lsls	r3, r3, #1
 8007998:	4413      	add	r3, r2
 800799a:	3b1e      	subs	r3, #30
 800799c:	051b      	lsls	r3, r3, #20
 800799e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80079a2:	e01d      	b.n	80079e0 <HAL_ADC_ConfigChannel+0x6d0>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	fa93 f3a3 	rbit	r3, r3
 80079b0:	60fb      	str	r3, [r7, #12]
  return result;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d103      	bne.n	80079c4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80079bc:	2320      	movs	r3, #32
 80079be:	e005      	b.n	80079cc <HAL_ADC_ConfigChannel+0x6bc>
 80079c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	fab3 f383 	clz	r3, r3
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	3301      	adds	r3, #1
 80079ce:	f003 021f 	and.w	r2, r3, #31
 80079d2:	4613      	mov	r3, r2
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	4413      	add	r3, r2
 80079d8:	3b1e      	subs	r3, #30
 80079da:	051b      	lsls	r3, r3, #20
 80079dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80079e0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80079e6:	4619      	mov	r1, r3
 80079e8:	f7ff fa74 	bl	8006ed4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	4b3d      	ldr	r3, [pc, #244]	@ (8007ae8 <HAL_ADC_ConfigChannel+0x7d8>)
 80079f2:	4013      	ands	r3, r2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d06c      	beq.n	8007ad2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80079f8:	483c      	ldr	r0, [pc, #240]	@ (8007aec <HAL_ADC_ConfigChannel+0x7dc>)
 80079fa:	f7ff f9c9 	bl	8006d90 <LL_ADC_GetCommonPathInternalCh>
 80079fe:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a3a      	ldr	r2, [pc, #232]	@ (8007af0 <HAL_ADC_ConfigChannel+0x7e0>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d127      	bne.n	8007a5c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007a0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d121      	bne.n	8007a5c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a35      	ldr	r2, [pc, #212]	@ (8007af4 <HAL_ADC_ConfigChannel+0x7e4>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d157      	bne.n	8007ad2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	482f      	ldr	r0, [pc, #188]	@ (8007aec <HAL_ADC_ConfigChannel+0x7dc>)
 8007a2e:	f7ff f99c 	bl	8006d6a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007a32:	4b31      	ldr	r3, [pc, #196]	@ (8007af8 <HAL_ADC_ConfigChannel+0x7e8>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	099b      	lsrs	r3, r3, #6
 8007a38:	4a30      	ldr	r2, [pc, #192]	@ (8007afc <HAL_ADC_ConfigChannel+0x7ec>)
 8007a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3e:	099b      	lsrs	r3, r3, #6
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	4613      	mov	r3, r2
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	4413      	add	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007a4c:	e002      	b.n	8007a54 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1f9      	bne.n	8007a4e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007a5a:	e03a      	b.n	8007ad2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a27      	ldr	r2, [pc, #156]	@ (8007b00 <HAL_ADC_ConfigChannel+0x7f0>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d113      	bne.n	8007a8e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007a66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10d      	bne.n	8007a8e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a1f      	ldr	r2, [pc, #124]	@ (8007af4 <HAL_ADC_ConfigChannel+0x7e4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d12a      	bne.n	8007ad2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a84:	4619      	mov	r1, r3
 8007a86:	4819      	ldr	r0, [pc, #100]	@ (8007aec <HAL_ADC_ConfigChannel+0x7dc>)
 8007a88:	f7ff f96f 	bl	8006d6a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a8c:	e021      	b.n	8007ad2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a1c      	ldr	r2, [pc, #112]	@ (8007b04 <HAL_ADC_ConfigChannel+0x7f4>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d11c      	bne.n	8007ad2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007a98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d116      	bne.n	8007ad2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a12      	ldr	r2, [pc, #72]	@ (8007af4 <HAL_ADC_ConfigChannel+0x7e4>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d111      	bne.n	8007ad2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007aae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007ab2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	480c      	ldr	r0, [pc, #48]	@ (8007aec <HAL_ADC_ConfigChannel+0x7dc>)
 8007aba:	f7ff f956 	bl	8006d6a <LL_ADC_SetCommonPathInternalCh>
 8007abe:	e008      	b.n	8007ad2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ac4:	f043 0220 	orr.w	r2, r3, #32
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8007ada:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	37d8      	adds	r7, #216	@ 0xd8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	80080000 	.word	0x80080000
 8007aec:	50040300 	.word	0x50040300
 8007af0:	c7520000 	.word	0xc7520000
 8007af4:	50040000 	.word	0x50040000
 8007af8:	20000034 	.word	0x20000034
 8007afc:	053e2d63 	.word	0x053e2d63
 8007b00:	cb840000 	.word	0xcb840000
 8007b04:	80000001 	.word	0x80000001

08007b08 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007b10:	4b05      	ldr	r3, [pc, #20]	@ (8007b28 <LL_EXTI_EnableIT_0_31+0x20>)
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	4904      	ldr	r1, [pc, #16]	@ (8007b28 <LL_EXTI_EnableIT_0_31+0x20>)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	600b      	str	r3, [r1, #0]
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	40010400 	.word	0x40010400

08007b2c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007b34:	4b06      	ldr	r3, [pc, #24]	@ (8007b50 <LL_EXTI_DisableIT_0_31+0x24>)
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	43db      	mvns	r3, r3
 8007b3c:	4904      	ldr	r1, [pc, #16]	@ (8007b50 <LL_EXTI_DisableIT_0_31+0x24>)
 8007b3e:	4013      	ands	r3, r2
 8007b40:	600b      	str	r3, [r1, #0]
}
 8007b42:	bf00      	nop
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	40010400 	.word	0x40010400

08007b54 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007b5c:	4b05      	ldr	r3, [pc, #20]	@ (8007b74 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	4904      	ldr	r1, [pc, #16]	@ (8007b74 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	604b      	str	r3, [r1, #4]

}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	40010400 	.word	0x40010400

08007b78 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007b80:	4b06      	ldr	r3, [pc, #24]	@ (8007b9c <LL_EXTI_DisableEvent_0_31+0x24>)
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	43db      	mvns	r3, r3
 8007b88:	4904      	ldr	r1, [pc, #16]	@ (8007b9c <LL_EXTI_DisableEvent_0_31+0x24>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	604b      	str	r3, [r1, #4]
}
 8007b8e:	bf00      	nop
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	40010400 	.word	0x40010400

08007ba0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007ba8:	4b05      	ldr	r3, [pc, #20]	@ (8007bc0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007baa:	689a      	ldr	r2, [r3, #8]
 8007bac:	4904      	ldr	r1, [pc, #16]	@ (8007bc0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	608b      	str	r3, [r1, #8]

}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	40010400 	.word	0x40010400

08007bc4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007bcc:	4b06      	ldr	r3, [pc, #24]	@ (8007be8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007bce:	689a      	ldr	r2, [r3, #8]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	43db      	mvns	r3, r3
 8007bd4:	4904      	ldr	r1, [pc, #16]	@ (8007be8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	608b      	str	r3, [r1, #8]

}
 8007bda:	bf00      	nop
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	40010400 	.word	0x40010400

08007bec <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007bf4:	4b05      	ldr	r3, [pc, #20]	@ (8007c0c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007bf6:	68da      	ldr	r2, [r3, #12]
 8007bf8:	4904      	ldr	r1, [pc, #16]	@ (8007c0c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	60cb      	str	r3, [r1, #12]
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	40010400 	.word	0x40010400

08007c10 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007c18:	4b06      	ldr	r3, [pc, #24]	@ (8007c34 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	43db      	mvns	r3, r3
 8007c20:	4904      	ldr	r1, [pc, #16]	@ (8007c34 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007c22:	4013      	ands	r3, r2
 8007c24:	60cb      	str	r3, [r1, #12]
}
 8007c26:	bf00      	nop
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	40010400 	.word	0x40010400

08007c38 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007c40:	4a04      	ldr	r2, [pc, #16]	@ (8007c54 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6153      	str	r3, [r2, #20]
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	40010400 	.word	0x40010400

08007c58 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007c60:	2300      	movs	r3, #0
 8007c62:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d102      	bne.n	8007c74 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	77fb      	strb	r3, [r7, #31]
 8007c72:	e0d1      	b.n	8007e18 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c82:	d102      	bne.n	8007c8a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	77fb      	strb	r3, [r7, #31]
 8007c88:	e0c6      	b.n	8007e18 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d115      	bne.n	8007cc2 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	629a      	str	r2, [r3, #40]	@ 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ca4:	4b5f      	ldr	r3, [pc, #380]	@ (8007e24 <HAL_COMP_Init+0x1cc>)
 8007ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ca8:	4a5e      	ldr	r2, [pc, #376]	@ (8007e24 <HAL_COMP_Init+0x1cc>)
 8007caa:	f043 0301 	orr.w	r3, r3, #1
 8007cae:	6613      	str	r3, [r2, #96]	@ 0x60
 8007cb0:	4b5c      	ldr	r3, [pc, #368]	@ (8007e24 <HAL_COMP_Init+0x1cc>)
 8007cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	60bb      	str	r3, [r7, #8]
 8007cba:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7fc f947 	bl	8003f50 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ccc:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	69db      	ldr	r3, [r3, #28]
 8007cdc:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	4b4b      	ldr	r3, [pc, #300]	@ (8007e28 <HAL_COMP_Init+0x1d0>)
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	6812      	ldr	r2, [r2, #0]
 8007d00:	6979      	ldr	r1, [r7, #20]
 8007d02:	430b      	orrs	r3, r1
 8007d04:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d0e:	d106      	bne.n	8007d1e <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007d10:	4b46      	ldr	r3, [pc, #280]	@ (8007e2c <HAL_COMP_Init+0x1d4>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a45      	ldr	r2, [pc, #276]	@ (8007e2c <HAL_COMP_Init+0x1d4>)
 8007d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	e005      	b.n	8007d2a <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007d1e:	4b43      	ldr	r3, [pc, #268]	@ (8007e2c <HAL_COMP_Init+0x1d4>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a42      	ldr	r2, [pc, #264]	@ (8007e2c <HAL_COMP_Init+0x1d4>)
 8007d24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d28:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d016      	beq.n	8007d66 <HAL_COMP_Init+0x10e>
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d113      	bne.n	8007d66 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007d3e:	4b3c      	ldr	r3, [pc, #240]	@ (8007e30 <HAL_COMP_Init+0x1d8>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	099b      	lsrs	r3, r3, #6
 8007d44:	4a3b      	ldr	r2, [pc, #236]	@ (8007e34 <HAL_COMP_Init+0x1dc>)
 8007d46:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4a:	099b      	lsrs	r3, r3, #6
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	4613      	mov	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8007d58:	e002      	b.n	8007d60 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1f9      	bne.n	8007d5a <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a33      	ldr	r2, [pc, #204]	@ (8007e38 <HAL_COMP_Init+0x1e0>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d102      	bne.n	8007d76 <HAL_COMP_Init+0x11e>
 8007d70:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007d74:	e001      	b.n	8007d7a <HAL_COMP_Init+0x122>
 8007d76:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007d7a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	f003 0303 	and.w	r3, r3, #3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d037      	beq.n	8007df8 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a1b      	ldr	r3, [r3, #32]
 8007d8c:	f003 0310 	and.w	r3, r3, #16
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d003      	beq.n	8007d9c <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007d94:	6938      	ldr	r0, [r7, #16]
 8007d96:	f7ff ff03 	bl	8007ba0 <LL_EXTI_EnableRisingTrig_0_31>
 8007d9a:	e002      	b.n	8007da2 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007d9c:	6938      	ldr	r0, [r7, #16]
 8007d9e:	f7ff ff11 	bl	8007bc4 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	f003 0320 	and.w	r3, r3, #32
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007dae:	6938      	ldr	r0, [r7, #16]
 8007db0:	f7ff ff1c 	bl	8007bec <LL_EXTI_EnableFallingTrig_0_31>
 8007db4:	e002      	b.n	8007dbc <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007db6:	6938      	ldr	r0, [r7, #16]
 8007db8:	f7ff ff2a 	bl	8007c10 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8007dbc:	6938      	ldr	r0, [r7, #16]
 8007dbe:	f7ff ff3b 	bl	8007c38 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8007dce:	6938      	ldr	r0, [r7, #16]
 8007dd0:	f7ff fec0 	bl	8007b54 <LL_EXTI_EnableEvent_0_31>
 8007dd4:	e002      	b.n	8007ddc <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007dd6:	6938      	ldr	r0, [r7, #16]
 8007dd8:	f7ff fece 	bl	8007b78 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8007de8:	6938      	ldr	r0, [r7, #16]
 8007dea:	f7ff fe8d 	bl	8007b08 <LL_EXTI_EnableIT_0_31>
 8007dee:	e009      	b.n	8007e04 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007df0:	6938      	ldr	r0, [r7, #16]
 8007df2:	f7ff fe9b 	bl	8007b2c <LL_EXTI_DisableIT_0_31>
 8007df6:	e005      	b.n	8007e04 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8007df8:	6938      	ldr	r0, [r7, #16]
 8007dfa:	f7ff febd 	bl	8007b78 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8007dfe:	6938      	ldr	r0, [r7, #16]
 8007e00:	f7ff fe94 	bl	8007b2c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d103      	bne.n	8007e18 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8007e18:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3720      	adds	r7, #32
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	40021000 	.word	0x40021000
 8007e28:	ff207d03 	.word	0xff207d03
 8007e2c:	40010204 	.word	0x40010204
 8007e30:	20000034 	.word	0x20000034
 8007e34:	053e2d63 	.word	0x053e2d63
 8007e38:	40010200 	.word	0x40010200

08007e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f003 0307 	and.w	r3, r3, #7
 8007e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8007e80 <__NVIC_SetPriorityGrouping+0x44>)
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007e58:	4013      	ands	r3, r2
 8007e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e6e:	4a04      	ldr	r2, [pc, #16]	@ (8007e80 <__NVIC_SetPriorityGrouping+0x44>)
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	60d3      	str	r3, [r2, #12]
}
 8007e74:	bf00      	nop
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	e000ed00 	.word	0xe000ed00

08007e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e84:	b480      	push	{r7}
 8007e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e88:	4b04      	ldr	r3, [pc, #16]	@ (8007e9c <__NVIC_GetPriorityGrouping+0x18>)
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	0a1b      	lsrs	r3, r3, #8
 8007e8e:	f003 0307 	and.w	r3, r3, #7
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	e000ed00 	.word	0xe000ed00

08007ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	db0b      	blt.n	8007eca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	f003 021f 	and.w	r2, r3, #31
 8007eb8:	4907      	ldr	r1, [pc, #28]	@ (8007ed8 <__NVIC_EnableIRQ+0x38>)
 8007eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ebe:	095b      	lsrs	r3, r3, #5
 8007ec0:	2001      	movs	r0, #1
 8007ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007eca:	bf00      	nop
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	e000e100 	.word	0xe000e100

08007edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	6039      	str	r1, [r7, #0]
 8007ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	db0a      	blt.n	8007f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	490c      	ldr	r1, [pc, #48]	@ (8007f28 <__NVIC_SetPriority+0x4c>)
 8007ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007efa:	0112      	lsls	r2, r2, #4
 8007efc:	b2d2      	uxtb	r2, r2
 8007efe:	440b      	add	r3, r1
 8007f00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007f04:	e00a      	b.n	8007f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	4908      	ldr	r1, [pc, #32]	@ (8007f2c <__NVIC_SetPriority+0x50>)
 8007f0c:	79fb      	ldrb	r3, [r7, #7]
 8007f0e:	f003 030f 	and.w	r3, r3, #15
 8007f12:	3b04      	subs	r3, #4
 8007f14:	0112      	lsls	r2, r2, #4
 8007f16:	b2d2      	uxtb	r2, r2
 8007f18:	440b      	add	r3, r1
 8007f1a:	761a      	strb	r2, [r3, #24]
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	e000e100 	.word	0xe000e100
 8007f2c:	e000ed00 	.word	0xe000ed00

08007f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b089      	sub	sp, #36	@ 0x24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f003 0307 	and.w	r3, r3, #7
 8007f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	f1c3 0307 	rsb	r3, r3, #7
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	bf28      	it	cs
 8007f4e:	2304      	movcs	r3, #4
 8007f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	3304      	adds	r3, #4
 8007f56:	2b06      	cmp	r3, #6
 8007f58:	d902      	bls.n	8007f60 <NVIC_EncodePriority+0x30>
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	3b03      	subs	r3, #3
 8007f5e:	e000      	b.n	8007f62 <NVIC_EncodePriority+0x32>
 8007f60:	2300      	movs	r3, #0
 8007f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f64:	f04f 32ff 	mov.w	r2, #4294967295
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6e:	43da      	mvns	r2, r3
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	401a      	ands	r2, r3
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f78:	f04f 31ff 	mov.w	r1, #4294967295
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f82:	43d9      	mvns	r1, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f88:	4313      	orrs	r3, r2
         );
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3724      	adds	r7, #36	@ 0x24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
	...

08007f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fa8:	d301      	bcc.n	8007fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007faa:	2301      	movs	r3, #1
 8007fac:	e00f      	b.n	8007fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007fae:	4a0a      	ldr	r2, [pc, #40]	@ (8007fd8 <SysTick_Config+0x40>)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fb6:	210f      	movs	r1, #15
 8007fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fbc:	f7ff ff8e 	bl	8007edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fc0:	4b05      	ldr	r3, [pc, #20]	@ (8007fd8 <SysTick_Config+0x40>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007fc6:	4b04      	ldr	r3, [pc, #16]	@ (8007fd8 <SysTick_Config+0x40>)
 8007fc8:	2207      	movs	r2, #7
 8007fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	e000e010 	.word	0xe000e010

08007fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff ff29 	bl	8007e3c <__NVIC_SetPriorityGrouping>
}
 8007fea:	bf00      	nop
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b086      	sub	sp, #24
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	60b9      	str	r1, [r7, #8]
 8007ffc:	607a      	str	r2, [r7, #4]
 8007ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008000:	2300      	movs	r3, #0
 8008002:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008004:	f7ff ff3e 	bl	8007e84 <__NVIC_GetPriorityGrouping>
 8008008:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	6978      	ldr	r0, [r7, #20]
 8008010:	f7ff ff8e 	bl	8007f30 <NVIC_EncodePriority>
 8008014:	4602      	mov	r2, r0
 8008016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800801a:	4611      	mov	r1, r2
 800801c:	4618      	mov	r0, r3
 800801e:	f7ff ff5d 	bl	8007edc <__NVIC_SetPriority>
}
 8008022:	bf00      	nop
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b082      	sub	sp, #8
 800802e:	af00      	add	r7, sp, #0
 8008030:	4603      	mov	r3, r0
 8008032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008038:	4618      	mov	r0, r3
 800803a:	f7ff ff31 	bl	8007ea0 <__NVIC_EnableIRQ>
}
 800803e:	bf00      	nop
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b082      	sub	sp, #8
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7ff ffa2 	bl	8007f98 <SysTick_Config>
 8008054:	4603      	mov	r3, r0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b086      	sub	sp, #24
 8008062:	af00      	add	r7, sp, #0
 8008064:	60f8      	str	r0, [r7, #12]
 8008066:	60b9      	str	r1, [r7, #8]
 8008068:	607a      	str	r2, [r7, #4]
 800806a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008076:	2b01      	cmp	r3, #1
 8008078:	d101      	bne.n	800807e <HAL_DMA_Start_IT+0x20>
 800807a:	2302      	movs	r3, #2
 800807c:	e066      	b.n	800814c <HAL_DMA_Start_IT+0xee>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b01      	cmp	r3, #1
 8008090:	d155      	bne.n	800813e <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2202      	movs	r2, #2
 8008096:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f022 0201 	bic.w	r2, r2, #1
 80080ae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	68b9      	ldr	r1, [r7, #8]
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 f84c 	bl	8008154 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d008      	beq.n	80080d6 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f042 020e 	orr.w	r2, r2, #14
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	e00f      	b.n	80080f6 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 0204 	bic.w	r2, r2, #4
 80080e4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f042 020a 	orr.w	r2, r2, #10
 80080f4:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d007      	beq.n	8008114 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800810e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008112:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008118:	2b00      	cmp	r3, #0
 800811a:	d007      	beq.n	800812c <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008126:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800812a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0201 	orr.w	r2, r2, #1
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	e005      	b.n	800814a <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008146:	2302      	movs	r3, #2
 8008148:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800814a:	7dfb      	ldrb	r3, [r7, #23]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800816a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008170:	2b00      	cmp	r3, #0
 8008172:	d004      	beq.n	800817e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800817c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008182:	f003 021c 	and.w	r2, r3, #28
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800818a:	2101      	movs	r1, #1
 800818c:	fa01 f202 	lsl.w	r2, r1, r2
 8008190:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	2b10      	cmp	r3, #16
 80081a0:	d108      	bne.n	80081b4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80081b2:	e007      	b.n	80081c4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	60da      	str	r2, [r3, #12]
}
 80081c4:	bf00      	nop
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b087      	sub	sp, #28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80081da:	2300      	movs	r3, #0
 80081dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80081de:	e166      	b.n	80084ae <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	2101      	movs	r1, #1
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	fa01 f303 	lsl.w	r3, r1, r3
 80081ec:	4013      	ands	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 8158 	beq.w	80084a8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	f003 0303 	and.w	r3, r3, #3
 8008200:	2b01      	cmp	r3, #1
 8008202:	d005      	beq.n	8008210 <HAL_GPIO_Init+0x40>
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f003 0303 	and.w	r3, r3, #3
 800820c:	2b02      	cmp	r3, #2
 800820e:	d130      	bne.n	8008272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	005b      	lsls	r3, r3, #1
 800821a:	2203      	movs	r2, #3
 800821c:	fa02 f303 	lsl.w	r3, r2, r3
 8008220:	43db      	mvns	r3, r3
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	4013      	ands	r3, r2
 8008226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	68da      	ldr	r2, [r3, #12]
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	005b      	lsls	r3, r3, #1
 8008230:	fa02 f303 	lsl.w	r3, r2, r3
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	4313      	orrs	r3, r2
 8008238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008246:	2201      	movs	r2, #1
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	fa02 f303 	lsl.w	r3, r2, r3
 800824e:	43db      	mvns	r3, r3
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	4013      	ands	r3, r2
 8008254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	091b      	lsrs	r3, r3, #4
 800825c:	f003 0201 	and.w	r2, r3, #1
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	fa02 f303 	lsl.w	r3, r2, r3
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	4313      	orrs	r3, r2
 800826a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f003 0303 	and.w	r3, r3, #3
 800827a:	2b03      	cmp	r3, #3
 800827c:	d017      	beq.n	80082ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	2203      	movs	r2, #3
 800828a:	fa02 f303 	lsl.w	r3, r2, r3
 800828e:	43db      	mvns	r3, r3
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	4013      	ands	r3, r2
 8008294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	689a      	ldr	r2, [r3, #8]
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	fa02 f303 	lsl.w	r3, r2, r3
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	693a      	ldr	r2, [r7, #16]
 80082ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f003 0303 	and.w	r3, r3, #3
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d123      	bne.n	8008302 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	08da      	lsrs	r2, r3, #3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	3208      	adds	r2, #8
 80082c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f003 0307 	and.w	r3, r3, #7
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	220f      	movs	r2, #15
 80082d2:	fa02 f303 	lsl.w	r3, r2, r3
 80082d6:	43db      	mvns	r3, r3
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	4013      	ands	r3, r2
 80082dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	691a      	ldr	r2, [r3, #16]
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f003 0307 	and.w	r3, r3, #7
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	fa02 f303 	lsl.w	r3, r2, r3
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	08da      	lsrs	r2, r3, #3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	3208      	adds	r2, #8
 80082fc:	6939      	ldr	r1, [r7, #16]
 80082fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	005b      	lsls	r3, r3, #1
 800830c:	2203      	movs	r2, #3
 800830e:	fa02 f303 	lsl.w	r3, r2, r3
 8008312:	43db      	mvns	r3, r3
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	4013      	ands	r3, r2
 8008318:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	f003 0203 	and.w	r2, r3, #3
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	005b      	lsls	r3, r3, #1
 8008326:	fa02 f303 	lsl.w	r3, r2, r3
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	4313      	orrs	r3, r2
 800832e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 80b2 	beq.w	80084a8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008344:	4b61      	ldr	r3, [pc, #388]	@ (80084cc <HAL_GPIO_Init+0x2fc>)
 8008346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008348:	4a60      	ldr	r2, [pc, #384]	@ (80084cc <HAL_GPIO_Init+0x2fc>)
 800834a:	f043 0301 	orr.w	r3, r3, #1
 800834e:	6613      	str	r3, [r2, #96]	@ 0x60
 8008350:	4b5e      	ldr	r3, [pc, #376]	@ (80084cc <HAL_GPIO_Init+0x2fc>)
 8008352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	60bb      	str	r3, [r7, #8]
 800835a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800835c:	4a5c      	ldr	r2, [pc, #368]	@ (80084d0 <HAL_GPIO_Init+0x300>)
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	089b      	lsrs	r3, r3, #2
 8008362:	3302      	adds	r3, #2
 8008364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008368:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f003 0303 	and.w	r3, r3, #3
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	220f      	movs	r2, #15
 8008374:	fa02 f303 	lsl.w	r3, r2, r3
 8008378:	43db      	mvns	r3, r3
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	4013      	ands	r3, r2
 800837e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008386:	d02b      	beq.n	80083e0 <HAL_GPIO_Init+0x210>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a52      	ldr	r2, [pc, #328]	@ (80084d4 <HAL_GPIO_Init+0x304>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d025      	beq.n	80083dc <HAL_GPIO_Init+0x20c>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a51      	ldr	r2, [pc, #324]	@ (80084d8 <HAL_GPIO_Init+0x308>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d01f      	beq.n	80083d8 <HAL_GPIO_Init+0x208>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a50      	ldr	r2, [pc, #320]	@ (80084dc <HAL_GPIO_Init+0x30c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d019      	beq.n	80083d4 <HAL_GPIO_Init+0x204>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a4f      	ldr	r2, [pc, #316]	@ (80084e0 <HAL_GPIO_Init+0x310>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d013      	beq.n	80083d0 <HAL_GPIO_Init+0x200>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a4e      	ldr	r2, [pc, #312]	@ (80084e4 <HAL_GPIO_Init+0x314>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00d      	beq.n	80083cc <HAL_GPIO_Init+0x1fc>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a4d      	ldr	r2, [pc, #308]	@ (80084e8 <HAL_GPIO_Init+0x318>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d007      	beq.n	80083c8 <HAL_GPIO_Init+0x1f8>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a4c      	ldr	r2, [pc, #304]	@ (80084ec <HAL_GPIO_Init+0x31c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d101      	bne.n	80083c4 <HAL_GPIO_Init+0x1f4>
 80083c0:	2307      	movs	r3, #7
 80083c2:	e00e      	b.n	80083e2 <HAL_GPIO_Init+0x212>
 80083c4:	2308      	movs	r3, #8
 80083c6:	e00c      	b.n	80083e2 <HAL_GPIO_Init+0x212>
 80083c8:	2306      	movs	r3, #6
 80083ca:	e00a      	b.n	80083e2 <HAL_GPIO_Init+0x212>
 80083cc:	2305      	movs	r3, #5
 80083ce:	e008      	b.n	80083e2 <HAL_GPIO_Init+0x212>
 80083d0:	2304      	movs	r3, #4
 80083d2:	e006      	b.n	80083e2 <HAL_GPIO_Init+0x212>
 80083d4:	2303      	movs	r3, #3
 80083d6:	e004      	b.n	80083e2 <HAL_GPIO_Init+0x212>
 80083d8:	2302      	movs	r3, #2
 80083da:	e002      	b.n	80083e2 <HAL_GPIO_Init+0x212>
 80083dc:	2301      	movs	r3, #1
 80083de:	e000      	b.n	80083e2 <HAL_GPIO_Init+0x212>
 80083e0:	2300      	movs	r3, #0
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	f002 0203 	and.w	r2, r2, #3
 80083e8:	0092      	lsls	r2, r2, #2
 80083ea:	4093      	lsls	r3, r2
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80083f2:	4937      	ldr	r1, [pc, #220]	@ (80084d0 <HAL_GPIO_Init+0x300>)
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	089b      	lsrs	r3, r3, #2
 80083f8:	3302      	adds	r3, #2
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008400:	4b3b      	ldr	r3, [pc, #236]	@ (80084f0 <HAL_GPIO_Init+0x320>)
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	43db      	mvns	r3, r3
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	4013      	ands	r3, r2
 800840e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4313      	orrs	r3, r2
 8008422:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008424:	4a32      	ldr	r2, [pc, #200]	@ (80084f0 <HAL_GPIO_Init+0x320>)
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800842a:	4b31      	ldr	r3, [pc, #196]	@ (80084f0 <HAL_GPIO_Init+0x320>)
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	43db      	mvns	r3, r3
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	4013      	ands	r3, r2
 8008438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d003      	beq.n	800844e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	4313      	orrs	r3, r2
 800844c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800844e:	4a28      	ldr	r2, [pc, #160]	@ (80084f0 <HAL_GPIO_Init+0x320>)
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008454:	4b26      	ldr	r3, [pc, #152]	@ (80084f0 <HAL_GPIO_Init+0x320>)
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	43db      	mvns	r3, r3
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	4013      	ands	r3, r2
 8008462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800846c:	2b00      	cmp	r3, #0
 800846e:	d003      	beq.n	8008478 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	4313      	orrs	r3, r2
 8008476:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008478:	4a1d      	ldr	r2, [pc, #116]	@ (80084f0 <HAL_GPIO_Init+0x320>)
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800847e:	4b1c      	ldr	r3, [pc, #112]	@ (80084f0 <HAL_GPIO_Init+0x320>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	43db      	mvns	r3, r3
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	4013      	ands	r3, r2
 800848c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4313      	orrs	r3, r2
 80084a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80084a2:	4a13      	ldr	r2, [pc, #76]	@ (80084f0 <HAL_GPIO_Init+0x320>)
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	3301      	adds	r3, #1
 80084ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	fa22 f303 	lsr.w	r3, r2, r3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f47f ae91 	bne.w	80081e0 <HAL_GPIO_Init+0x10>
  }
}
 80084be:	bf00      	nop
 80084c0:	bf00      	nop
 80084c2:	371c      	adds	r7, #28
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	40021000 	.word	0x40021000
 80084d0:	40010000 	.word	0x40010000
 80084d4:	48000400 	.word	0x48000400
 80084d8:	48000800 	.word	0x48000800
 80084dc:	48000c00 	.word	0x48000c00
 80084e0:	48001000 	.word	0x48001000
 80084e4:	48001400 	.word	0x48001400
 80084e8:	48001800 	.word	0x48001800
 80084ec:	48001c00 	.word	0x48001c00
 80084f0:	40010400 	.word	0x40010400

080084f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	691a      	ldr	r2, [r3, #16]
 8008504:	887b      	ldrh	r3, [r7, #2]
 8008506:	4013      	ands	r3, r2
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800850c:	2301      	movs	r3, #1
 800850e:	73fb      	strb	r3, [r7, #15]
 8008510:	e001      	b.n	8008516 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008512:	2300      	movs	r3, #0
 8008514:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008516:	7bfb      	ldrb	r3, [r7, #15]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	460b      	mov	r3, r1
 800852e:	807b      	strh	r3, [r7, #2]
 8008530:	4613      	mov	r3, r2
 8008532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008534:	787b      	ldrb	r3, [r7, #1]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800853a:	887a      	ldrh	r2, [r7, #2]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008540:	e002      	b.n	8008548 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008542:	887a      	ldrh	r2, [r7, #2]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	4603      	mov	r3, r0
 800855c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800855e:	4b08      	ldr	r3, [pc, #32]	@ (8008580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008560:	695a      	ldr	r2, [r3, #20]
 8008562:	88fb      	ldrh	r3, [r7, #6]
 8008564:	4013      	ands	r3, r2
 8008566:	2b00      	cmp	r3, #0
 8008568:	d006      	beq.n	8008578 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800856a:	4a05      	ldr	r2, [pc, #20]	@ (8008580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800856c:	88fb      	ldrh	r3, [r7, #6]
 800856e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008570:	88fb      	ldrh	r3, [r7, #6]
 8008572:	4618      	mov	r0, r3
 8008574:	f000 f806 	bl	8008584 <HAL_GPIO_EXTI_Callback>
  }
}
 8008578:	bf00      	nop
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	40010400 	.word	0x40010400

08008584 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800858e:	bf00      	nop
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b082      	sub	sp, #8
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e08d      	b.n	80086c8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d106      	bne.n	80085c6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7fb fd19 	bl	8003ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2224      	movs	r2, #36	@ 0x24
 80085ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f022 0201 	bic.w	r2, r2, #1
 80085dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685a      	ldr	r2, [r3, #4]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80085ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689a      	ldr	r2, [r3, #8]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80085fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d107      	bne.n	8008614 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	689a      	ldr	r2, [r3, #8]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008610:	609a      	str	r2, [r3, #8]
 8008612:	e006      	b.n	8008622 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	689a      	ldr	r2, [r3, #8]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008620:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	2b02      	cmp	r3, #2
 8008628:	d108      	bne.n	800863c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	685a      	ldr	r2, [r3, #4]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008638:	605a      	str	r2, [r3, #4]
 800863a:	e007      	b.n	800864c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800864a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	6812      	ldr	r2, [r2, #0]
 8008656:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800865a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800865e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68da      	ldr	r2, [r3, #12]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800866e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	691a      	ldr	r2, [r3, #16]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	695b      	ldr	r3, [r3, #20]
 8008678:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	430a      	orrs	r2, r1
 8008688:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	69d9      	ldr	r1, [r3, #28]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a1a      	ldr	r2, [r3, #32]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f042 0201 	orr.w	r2, r2, #1
 80086a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2220      	movs	r2, #32
 80086b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b088      	sub	sp, #32
 80086d4:	af02      	add	r7, sp, #8
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	607a      	str	r2, [r7, #4]
 80086da:	461a      	mov	r2, r3
 80086dc:	460b      	mov	r3, r1
 80086de:	817b      	strh	r3, [r7, #10]
 80086e0:	4613      	mov	r3, r2
 80086e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b20      	cmp	r3, #32
 80086ee:	f040 80fd 	bne.w	80088ec <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d101      	bne.n	8008700 <HAL_I2C_Master_Transmit+0x30>
 80086fc:	2302      	movs	r3, #2
 80086fe:	e0f6      	b.n	80088ee <HAL_I2C_Master_Transmit+0x21e>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008708:	f7fe faec 	bl	8006ce4 <HAL_GetTick>
 800870c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	2319      	movs	r3, #25
 8008714:	2201      	movs	r2, #1
 8008716:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f000 fa0a 	bl	8008b34 <I2C_WaitOnFlagUntilTimeout>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e0e1      	b.n	80088ee <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2221      	movs	r2, #33	@ 0x21
 800872e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2210      	movs	r2, #16
 8008736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	893a      	ldrh	r2, [r7, #8]
 800874a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008756:	b29b      	uxth	r3, r3
 8008758:	2bff      	cmp	r3, #255	@ 0xff
 800875a:	d906      	bls.n	800876a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	22ff      	movs	r2, #255	@ 0xff
 8008760:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008762:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008766:	617b      	str	r3, [r7, #20]
 8008768:	e007      	b.n	800877a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800876e:	b29a      	uxth	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008774:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008778:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800877e:	2b00      	cmp	r3, #0
 8008780:	d024      	beq.n	80087cc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008786:	781a      	ldrb	r2, [r3, #0]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800879c:	b29b      	uxth	r3, r3
 800879e:	3b01      	subs	r3, #1
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087aa:	3b01      	subs	r3, #1
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	3301      	adds	r3, #1
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	8979      	ldrh	r1, [r7, #10]
 80087be:	4b4e      	ldr	r3, [pc, #312]	@ (80088f8 <HAL_I2C_Master_Transmit+0x228>)
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 fbf1 	bl	8008fac <I2C_TransferConfig>
 80087ca:	e066      	b.n	800889a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	8979      	ldrh	r1, [r7, #10]
 80087d4:	4b48      	ldr	r3, [pc, #288]	@ (80088f8 <HAL_I2C_Master_Transmit+0x228>)
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f000 fbe6 	bl	8008fac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80087e0:	e05b      	b.n	800889a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087e2:	693a      	ldr	r2, [r7, #16]
 80087e4:	6a39      	ldr	r1, [r7, #32]
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f000 f9f3 	bl	8008bd2 <I2C_WaitOnTXISFlagUntilTimeout>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e07b      	b.n	80088ee <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fa:	781a      	ldrb	r2, [r3, #0]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008810:	b29b      	uxth	r3, r3
 8008812:	3b01      	subs	r3, #1
 8008814:	b29a      	uxth	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800881e:	3b01      	subs	r3, #1
 8008820:	b29a      	uxth	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800882a:	b29b      	uxth	r3, r3
 800882c:	2b00      	cmp	r3, #0
 800882e:	d034      	beq.n	800889a <HAL_I2C_Master_Transmit+0x1ca>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008834:	2b00      	cmp	r3, #0
 8008836:	d130      	bne.n	800889a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	2200      	movs	r2, #0
 8008840:	2180      	movs	r1, #128	@ 0x80
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f000 f976 	bl	8008b34 <I2C_WaitOnFlagUntilTimeout>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e04d      	b.n	80088ee <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008856:	b29b      	uxth	r3, r3
 8008858:	2bff      	cmp	r3, #255	@ 0xff
 800885a:	d90e      	bls.n	800887a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	22ff      	movs	r2, #255	@ 0xff
 8008860:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008866:	b2da      	uxtb	r2, r3
 8008868:	8979      	ldrh	r1, [r7, #10]
 800886a:	2300      	movs	r3, #0
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f000 fb9a 	bl	8008fac <I2C_TransferConfig>
 8008878:	e00f      	b.n	800889a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800887e:	b29a      	uxth	r2, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008888:	b2da      	uxtb	r2, r3
 800888a:	8979      	ldrh	r1, [r7, #10]
 800888c:	2300      	movs	r3, #0
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f000 fb89 	bl	8008fac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800889e:	b29b      	uxth	r3, r3
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d19e      	bne.n	80087e2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	6a39      	ldr	r1, [r7, #32]
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 f9d9 	bl	8008c60 <I2C_WaitOnSTOPFlagUntilTimeout>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d001      	beq.n	80088b8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e01a      	b.n	80088ee <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2220      	movs	r2, #32
 80088be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6859      	ldr	r1, [r3, #4]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	4b0c      	ldr	r3, [pc, #48]	@ (80088fc <HAL_I2C_Master_Transmit+0x22c>)
 80088cc:	400b      	ands	r3, r1
 80088ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2220      	movs	r2, #32
 80088d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	e000      	b.n	80088ee <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80088ec:	2302      	movs	r3, #2
  }
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	80002000 	.word	0x80002000
 80088fc:	fe00e800 	.word	0xfe00e800

08008900 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af02      	add	r7, sp, #8
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	607a      	str	r2, [r7, #4]
 800890a:	461a      	mov	r2, r3
 800890c:	460b      	mov	r3, r1
 800890e:	817b      	strh	r3, [r7, #10]
 8008910:	4613      	mov	r3, r2
 8008912:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b20      	cmp	r3, #32
 800891e:	f040 80db 	bne.w	8008ad8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008928:	2b01      	cmp	r3, #1
 800892a:	d101      	bne.n	8008930 <HAL_I2C_Master_Receive+0x30>
 800892c:	2302      	movs	r3, #2
 800892e:	e0d4      	b.n	8008ada <HAL_I2C_Master_Receive+0x1da>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008938:	f7fe f9d4 	bl	8006ce4 <HAL_GetTick>
 800893c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	2319      	movs	r3, #25
 8008944:	2201      	movs	r2, #1
 8008946:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f000 f8f2 	bl	8008b34 <I2C_WaitOnFlagUntilTimeout>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e0bf      	b.n	8008ada <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2222      	movs	r2, #34	@ 0x22
 800895e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2210      	movs	r2, #16
 8008966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	893a      	ldrh	r2, [r7, #8]
 800897a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008986:	b29b      	uxth	r3, r3
 8008988:	2bff      	cmp	r3, #255	@ 0xff
 800898a:	d90e      	bls.n	80089aa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	22ff      	movs	r2, #255	@ 0xff
 8008990:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008996:	b2da      	uxtb	r2, r3
 8008998:	8979      	ldrh	r1, [r7, #10]
 800899a:	4b52      	ldr	r3, [pc, #328]	@ (8008ae4 <HAL_I2C_Master_Receive+0x1e4>)
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f000 fb02 	bl	8008fac <I2C_TransferConfig>
 80089a8:	e06d      	b.n	8008a86 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	8979      	ldrh	r1, [r7, #10]
 80089bc:	4b49      	ldr	r3, [pc, #292]	@ (8008ae4 <HAL_I2C_Master_Receive+0x1e4>)
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 faf1 	bl	8008fac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80089ca:	e05c      	b.n	8008a86 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	6a39      	ldr	r1, [r7, #32]
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f000 f989 	bl	8008ce8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e07c      	b.n	8008ada <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ea:	b2d2      	uxtb	r2, r2
 80089ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089fc:	3b01      	subs	r3, #1
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d034      	beq.n	8008a86 <HAL_I2C_Master_Receive+0x186>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d130      	bne.n	8008a86 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	2180      	movs	r1, #128	@ 0x80
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f000 f880 	bl	8008b34 <I2C_WaitOnFlagUntilTimeout>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e04d      	b.n	8008ada <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	2bff      	cmp	r3, #255	@ 0xff
 8008a46:	d90e      	bls.n	8008a66 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	22ff      	movs	r2, #255	@ 0xff
 8008a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	8979      	ldrh	r1, [r7, #10]
 8008a56:	2300      	movs	r3, #0
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f000 faa4 	bl	8008fac <I2C_TransferConfig>
 8008a64:	e00f      	b.n	8008a86 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	8979      	ldrh	r1, [r7, #10]
 8008a78:	2300      	movs	r3, #0
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 fa93 	bl	8008fac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d19d      	bne.n	80089cc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	6a39      	ldr	r1, [r7, #32]
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 f8e3 	bl	8008c60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e01a      	b.n	8008ada <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6859      	ldr	r1, [r3, #4]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae8 <HAL_I2C_Master_Receive+0x1e8>)
 8008ab8:	400b      	ands	r3, r1
 8008aba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2220      	movs	r2, #32
 8008ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	e000      	b.n	8008ada <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008ad8:	2302      	movs	r3, #2
  }
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	80002400 	.word	0x80002400
 8008ae8:	fe00e800 	.word	0xfe00e800

08008aec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	f003 0302 	and.w	r3, r3, #2
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d103      	bne.n	8008b0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2200      	movs	r2, #0
 8008b08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	f003 0301 	and.w	r3, r3, #1
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d007      	beq.n	8008b28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	699a      	ldr	r2, [r3, #24]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f042 0201 	orr.w	r2, r2, #1
 8008b26:	619a      	str	r2, [r3, #24]
  }
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	603b      	str	r3, [r7, #0]
 8008b40:	4613      	mov	r3, r2
 8008b42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b44:	e031      	b.n	8008baa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4c:	d02d      	beq.n	8008baa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b4e:	f7fe f8c9 	bl	8006ce4 <HAL_GetTick>
 8008b52:	4602      	mov	r2, r0
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	683a      	ldr	r2, [r7, #0]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d302      	bcc.n	8008b64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d122      	bne.n	8008baa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	699a      	ldr	r2, [r3, #24]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	bf0c      	ite	eq
 8008b74:	2301      	moveq	r3, #1
 8008b76:	2300      	movne	r3, #0
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	79fb      	ldrb	r3, [r7, #7]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d113      	bne.n	8008baa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b86:	f043 0220 	orr.w	r2, r3, #32
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e00f      	b.n	8008bca <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	699a      	ldr	r2, [r3, #24]
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	68ba      	ldr	r2, [r7, #8]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	bf0c      	ite	eq
 8008bba:	2301      	moveq	r3, #1
 8008bbc:	2300      	movne	r3, #0
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	79fb      	ldrb	r3, [r7, #7]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d0be      	beq.n	8008b46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b084      	sub	sp, #16
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	60f8      	str	r0, [r7, #12]
 8008bda:	60b9      	str	r1, [r7, #8]
 8008bdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008bde:	e033      	b.n	8008c48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	68b9      	ldr	r1, [r7, #8]
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f000 f901 	bl	8008dec <I2C_IsErrorOccurred>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e031      	b.n	8008c58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfa:	d025      	beq.n	8008c48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bfc:	f7fe f872 	bl	8006ce4 <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d302      	bcc.n	8008c12 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d11a      	bne.n	8008c48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	f003 0302 	and.w	r3, r3, #2
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d013      	beq.n	8008c48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c24:	f043 0220 	orr.w	r2, r3, #32
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2220      	movs	r2, #32
 8008c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e007      	b.n	8008c58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	f003 0302 	and.w	r3, r3, #2
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d1c4      	bne.n	8008be0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c6c:	e02f      	b.n	8008cce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	68b9      	ldr	r1, [r7, #8]
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f000 f8ba 	bl	8008dec <I2C_IsErrorOccurred>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d001      	beq.n	8008c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e02d      	b.n	8008cde <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c82:	f7fe f82f 	bl	8006ce4 <HAL_GetTick>
 8008c86:	4602      	mov	r2, r0
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d302      	bcc.n	8008c98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d11a      	bne.n	8008cce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	f003 0320 	and.w	r3, r3, #32
 8008ca2:	2b20      	cmp	r3, #32
 8008ca4:	d013      	beq.n	8008cce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008caa:	f043 0220 	orr.w	r2, r3, #32
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e007      	b.n	8008cde <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	f003 0320 	and.w	r3, r3, #32
 8008cd8:	2b20      	cmp	r3, #32
 8008cda:	d1c8      	bne.n	8008c6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008cf4:	e06b      	b.n	8008dce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	68b9      	ldr	r1, [r7, #8]
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f000 f876 	bl	8008dec <I2C_IsErrorOccurred>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d001      	beq.n	8008d0a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e069      	b.n	8008dde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	f003 0320 	and.w	r3, r3, #32
 8008d14:	2b20      	cmp	r3, #32
 8008d16:	d138      	bne.n	8008d8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	f003 0304 	and.w	r3, r3, #4
 8008d22:	2b04      	cmp	r3, #4
 8008d24:	d105      	bne.n	8008d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d001      	beq.n	8008d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	e055      	b.n	8008dde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	f003 0310 	and.w	r3, r3, #16
 8008d3c:	2b10      	cmp	r3, #16
 8008d3e:	d107      	bne.n	8008d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2210      	movs	r2, #16
 8008d46:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2204      	movs	r2, #4
 8008d4c:	645a      	str	r2, [r3, #68]	@ 0x44
 8008d4e:	e002      	b.n	8008d56 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2220      	movs	r2, #32
 8008d5c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	6859      	ldr	r1, [r3, #4]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	4b1f      	ldr	r3, [pc, #124]	@ (8008de8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8008d6a:	400b      	ands	r3, r1
 8008d6c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2220      	movs	r2, #32
 8008d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e029      	b.n	8008dde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d8a:	f7fd ffab 	bl	8006ce4 <HAL_GetTick>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d302      	bcc.n	8008da0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d116      	bne.n	8008dce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	f003 0304 	and.w	r3, r3, #4
 8008daa:	2b04      	cmp	r3, #4
 8008dac:	d00f      	beq.n	8008dce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008db2:	f043 0220 	orr.w	r2, r3, #32
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e007      	b.n	8008dde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	f003 0304 	and.w	r3, r3, #4
 8008dd8:	2b04      	cmp	r3, #4
 8008dda:	d18c      	bne.n	8008cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	fe00e800 	.word	0xfe00e800

08008dec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08a      	sub	sp, #40	@ 0x28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	f003 0310 	and.w	r3, r3, #16
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d068      	beq.n	8008eea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2210      	movs	r2, #16
 8008e1e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008e20:	e049      	b.n	8008eb6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e28:	d045      	beq.n	8008eb6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008e2a:	f7fd ff5b 	bl	8006ce4 <HAL_GetTick>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	1ad3      	subs	r3, r2, r3
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d302      	bcc.n	8008e40 <I2C_IsErrorOccurred+0x54>
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d13a      	bne.n	8008eb6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e52:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e62:	d121      	bne.n	8008ea8 <I2C_IsErrorOccurred+0xbc>
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e6a:	d01d      	beq.n	8008ea8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008e6c:	7cfb      	ldrb	r3, [r7, #19]
 8008e6e:	2b20      	cmp	r3, #32
 8008e70:	d01a      	beq.n	8008ea8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008e80:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008e82:	f7fd ff2f 	bl	8006ce4 <HAL_GetTick>
 8008e86:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e88:	e00e      	b.n	8008ea8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008e8a:	f7fd ff2b 	bl	8006ce4 <HAL_GetTick>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	2b19      	cmp	r3, #25
 8008e96:	d907      	bls.n	8008ea8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008e98:	6a3b      	ldr	r3, [r7, #32]
 8008e9a:	f043 0320 	orr.w	r3, r3, #32
 8008e9e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008ea6:	e006      	b.n	8008eb6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	f003 0320 	and.w	r3, r3, #32
 8008eb2:	2b20      	cmp	r3, #32
 8008eb4:	d1e9      	bne.n	8008e8a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	f003 0320 	and.w	r3, r3, #32
 8008ec0:	2b20      	cmp	r3, #32
 8008ec2:	d003      	beq.n	8008ecc <I2C_IsErrorOccurred+0xe0>
 8008ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d0aa      	beq.n	8008e22 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d103      	bne.n	8008edc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	f043 0304 	orr.w	r3, r3, #4
 8008ee2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00b      	beq.n	8008f14 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008efc:	6a3b      	ldr	r3, [r7, #32]
 8008efe:	f043 0301 	orr.w	r3, r3, #1
 8008f02:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00b      	beq.n	8008f36 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	f043 0308 	orr.w	r3, r3, #8
 8008f24:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008f2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00b      	beq.n	8008f58 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	f043 0302 	orr.w	r3, r3, #2
 8008f46:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008f58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d01c      	beq.n	8008f9a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f7ff fdc3 	bl	8008aec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6859      	ldr	r1, [r3, #4]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa8 <I2C_IsErrorOccurred+0x1bc>)
 8008f72:	400b      	ands	r3, r1
 8008f74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	431a      	orrs	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2220      	movs	r2, #32
 8008f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3728      	adds	r7, #40	@ 0x28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	fe00e800 	.word	0xfe00e800

08008fac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b087      	sub	sp, #28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	607b      	str	r3, [r7, #4]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	817b      	strh	r3, [r7, #10]
 8008fba:	4613      	mov	r3, r2
 8008fbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008fbe:	897b      	ldrh	r3, [r7, #10]
 8008fc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008fc4:	7a7b      	ldrb	r3, [r7, #9]
 8008fc6:	041b      	lsls	r3, r3, #16
 8008fc8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008fcc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fda:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	6a3b      	ldr	r3, [r7, #32]
 8008fe4:	0d5b      	lsrs	r3, r3, #21
 8008fe6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008fea:	4b08      	ldr	r3, [pc, #32]	@ (800900c <I2C_TransferConfig+0x60>)
 8008fec:	430b      	orrs	r3, r1
 8008fee:	43db      	mvns	r3, r3
 8008ff0:	ea02 0103 	and.w	r1, r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008ffe:	bf00      	nop
 8009000:	371c      	adds	r7, #28
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	03ff63ff 	.word	0x03ff63ff

08009010 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009020:	b2db      	uxtb	r3, r3
 8009022:	2b20      	cmp	r3, #32
 8009024:	d138      	bne.n	8009098 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800902c:	2b01      	cmp	r3, #1
 800902e:	d101      	bne.n	8009034 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009030:	2302      	movs	r3, #2
 8009032:	e032      	b.n	800909a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2224      	movs	r2, #36	@ 0x24
 8009040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f022 0201 	bic.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009062:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6819      	ldr	r1, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	430a      	orrs	r2, r1
 8009072:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f042 0201 	orr.w	r2, r2, #1
 8009082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2220      	movs	r2, #32
 8009088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	e000      	b.n	800909a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009098:	2302      	movs	r3, #2
  }
}
 800909a:	4618      	mov	r0, r3
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b085      	sub	sp, #20
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b20      	cmp	r3, #32
 80090ba:	d139      	bne.n	8009130 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d101      	bne.n	80090ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80090c6:	2302      	movs	r3, #2
 80090c8:	e033      	b.n	8009132 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2224      	movs	r2, #36	@ 0x24
 80090d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f022 0201 	bic.w	r2, r2, #1
 80090e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80090f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	021b      	lsls	r3, r3, #8
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	4313      	orrs	r3, r2
 8009102:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f042 0201 	orr.w	r2, r2, #1
 800911a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2220      	movs	r2, #32
 8009120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800912c:	2300      	movs	r3, #0
 800912e:	e000      	b.n	8009132 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009130:	2302      	movs	r3, #2
  }
}
 8009132:	4618      	mov	r0, r3
 8009134:	3714      	adds	r7, #20
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
	...

08009140 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009140:	b480      	push	{r7}
 8009142:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009144:	4b05      	ldr	r3, [pc, #20]	@ (800915c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a04      	ldr	r2, [pc, #16]	@ (800915c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800914a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800914e:	6013      	str	r3, [r2, #0]
}
 8009150:	bf00      	nop
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	40007000 	.word	0x40007000

08009160 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009160:	b480      	push	{r7}
 8009162:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009164:	4b0d      	ldr	r3, [pc, #52]	@ (800919c <HAL_PWREx_GetVoltageRange+0x3c>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800916c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009170:	d102      	bne.n	8009178 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8009172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009176:	e00b      	b.n	8009190 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8009178:	4b08      	ldr	r3, [pc, #32]	@ (800919c <HAL_PWREx_GetVoltageRange+0x3c>)
 800917a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800917e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009186:	d102      	bne.n	800918e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8009188:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800918c:	e000      	b.n	8009190 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800918e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8009190:	4618      	mov	r0, r3
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	40007000 	.word	0x40007000

080091a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d141      	bne.n	8009232 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80091ae:	4b4b      	ldr	r3, [pc, #300]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80091b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091ba:	d131      	bne.n	8009220 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80091bc:	4b47      	ldr	r3, [pc, #284]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091c2:	4a46      	ldr	r2, [pc, #280]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80091cc:	4b43      	ldr	r3, [pc, #268]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80091d4:	4a41      	ldr	r2, [pc, #260]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80091da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80091dc:	4b40      	ldr	r3, [pc, #256]	@ (80092e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2232      	movs	r2, #50	@ 0x32
 80091e2:	fb02 f303 	mul.w	r3, r2, r3
 80091e6:	4a3f      	ldr	r2, [pc, #252]	@ (80092e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80091e8:	fba2 2303 	umull	r2, r3, r2, r3
 80091ec:	0c9b      	lsrs	r3, r3, #18
 80091ee:	3301      	adds	r3, #1
 80091f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80091f2:	e002      	b.n	80091fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	3b01      	subs	r3, #1
 80091f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80091fa:	4b38      	ldr	r3, [pc, #224]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009206:	d102      	bne.n	800920e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1f2      	bne.n	80091f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800920e:	4b33      	ldr	r3, [pc, #204]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800921a:	d158      	bne.n	80092ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e057      	b.n	80092d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009220:	4b2e      	ldr	r3, [pc, #184]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009226:	4a2d      	ldr	r2, [pc, #180]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800922c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009230:	e04d      	b.n	80092ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009238:	d141      	bne.n	80092be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800923a:	4b28      	ldr	r3, [pc, #160]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009246:	d131      	bne.n	80092ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009248:	4b24      	ldr	r3, [pc, #144]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800924a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800924e:	4a23      	ldr	r2, [pc, #140]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009254:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009258:	4b20      	ldr	r3, [pc, #128]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009260:	4a1e      	ldr	r2, [pc, #120]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009262:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009266:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009268:	4b1d      	ldr	r3, [pc, #116]	@ (80092e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2232      	movs	r2, #50	@ 0x32
 800926e:	fb02 f303 	mul.w	r3, r2, r3
 8009272:	4a1c      	ldr	r2, [pc, #112]	@ (80092e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009274:	fba2 2303 	umull	r2, r3, r2, r3
 8009278:	0c9b      	lsrs	r3, r3, #18
 800927a:	3301      	adds	r3, #1
 800927c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800927e:	e002      	b.n	8009286 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3b01      	subs	r3, #1
 8009284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009286:	4b15      	ldr	r3, [pc, #84]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800928e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009292:	d102      	bne.n	800929a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1f2      	bne.n	8009280 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800929a:	4b10      	ldr	r3, [pc, #64]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80092a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092a6:	d112      	bne.n	80092ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80092a8:	2303      	movs	r3, #3
 80092aa:	e011      	b.n	80092d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80092ac:	4b0b      	ldr	r3, [pc, #44]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092b2:	4a0a      	ldr	r2, [pc, #40]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80092bc:	e007      	b.n	80092ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80092be:	4b07      	ldr	r3, [pc, #28]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80092c6:	4a05      	ldr	r2, [pc, #20]	@ (80092dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80092cc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	40007000 	.word	0x40007000
 80092e0:	20000034 	.word	0x20000034
 80092e4:	431bde83 	.word	0x431bde83

080092e8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80092e8:	b480      	push	{r7}
 80092ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80092ec:	4b05      	ldr	r3, [pc, #20]	@ (8009304 <HAL_PWREx_EnableVddIO2+0x1c>)
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	4a04      	ldr	r2, [pc, #16]	@ (8009304 <HAL_PWREx_EnableVddIO2+0x1c>)
 80092f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80092f6:	6053      	str	r3, [r2, #4]
}
 80092f8:	bf00      	nop
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	40007000 	.word	0x40007000

08009308 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b088      	sub	sp, #32
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d102      	bne.n	800931c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	f000 bc08 	b.w	8009b2c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800931c:	4b96      	ldr	r3, [pc, #600]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	f003 030c 	and.w	r3, r3, #12
 8009324:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009326:	4b94      	ldr	r3, [pc, #592]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	f003 0303 	and.w	r3, r3, #3
 800932e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0310 	and.w	r3, r3, #16
 8009338:	2b00      	cmp	r3, #0
 800933a:	f000 80e4 	beq.w	8009506 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d007      	beq.n	8009354 <HAL_RCC_OscConfig+0x4c>
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	2b0c      	cmp	r3, #12
 8009348:	f040 808b 	bne.w	8009462 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	2b01      	cmp	r3, #1
 8009350:	f040 8087 	bne.w	8009462 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009354:	4b88      	ldr	r3, [pc, #544]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 0302 	and.w	r3, r3, #2
 800935c:	2b00      	cmp	r3, #0
 800935e:	d005      	beq.n	800936c <HAL_RCC_OscConfig+0x64>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	e3df      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a1a      	ldr	r2, [r3, #32]
 8009370:	4b81      	ldr	r3, [pc, #516]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 0308 	and.w	r3, r3, #8
 8009378:	2b00      	cmp	r3, #0
 800937a:	d004      	beq.n	8009386 <HAL_RCC_OscConfig+0x7e>
 800937c:	4b7e      	ldr	r3, [pc, #504]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009384:	e005      	b.n	8009392 <HAL_RCC_OscConfig+0x8a>
 8009386:	4b7c      	ldr	r3, [pc, #496]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 8009388:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800938c:	091b      	lsrs	r3, r3, #4
 800938e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009392:	4293      	cmp	r3, r2
 8009394:	d223      	bcs.n	80093de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	4618      	mov	r0, r3
 800939c:	f000 fdcc 	bl	8009f38 <RCC_SetFlashLatencyFromMSIRange>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e3c0      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80093aa:	4b73      	ldr	r3, [pc, #460]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a72      	ldr	r2, [pc, #456]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80093b0:	f043 0308 	orr.w	r3, r3, #8
 80093b4:	6013      	str	r3, [r2, #0]
 80093b6:	4b70      	ldr	r3, [pc, #448]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	496d      	ldr	r1, [pc, #436]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80093c8:	4b6b      	ldr	r3, [pc, #428]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	69db      	ldr	r3, [r3, #28]
 80093d4:	021b      	lsls	r3, r3, #8
 80093d6:	4968      	ldr	r1, [pc, #416]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80093d8:	4313      	orrs	r3, r2
 80093da:	604b      	str	r3, [r1, #4]
 80093dc:	e025      	b.n	800942a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80093de:	4b66      	ldr	r3, [pc, #408]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a65      	ldr	r2, [pc, #404]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80093e4:	f043 0308 	orr.w	r3, r3, #8
 80093e8:	6013      	str	r3, [r2, #0]
 80093ea:	4b63      	ldr	r3, [pc, #396]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a1b      	ldr	r3, [r3, #32]
 80093f6:	4960      	ldr	r1, [pc, #384]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80093f8:	4313      	orrs	r3, r2
 80093fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80093fc:	4b5e      	ldr	r3, [pc, #376]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	69db      	ldr	r3, [r3, #28]
 8009408:	021b      	lsls	r3, r3, #8
 800940a:	495b      	ldr	r1, [pc, #364]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 800940c:	4313      	orrs	r3, r2
 800940e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d109      	bne.n	800942a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a1b      	ldr	r3, [r3, #32]
 800941a:	4618      	mov	r0, r3
 800941c:	f000 fd8c 	bl	8009f38 <RCC_SetFlashLatencyFromMSIRange>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d001      	beq.n	800942a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e380      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800942a:	f000 fcc1 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 800942e:	4602      	mov	r2, r0
 8009430:	4b51      	ldr	r3, [pc, #324]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	091b      	lsrs	r3, r3, #4
 8009436:	f003 030f 	and.w	r3, r3, #15
 800943a:	4950      	ldr	r1, [pc, #320]	@ (800957c <HAL_RCC_OscConfig+0x274>)
 800943c:	5ccb      	ldrb	r3, [r1, r3]
 800943e:	f003 031f 	and.w	r3, r3, #31
 8009442:	fa22 f303 	lsr.w	r3, r2, r3
 8009446:	4a4e      	ldr	r2, [pc, #312]	@ (8009580 <HAL_RCC_OscConfig+0x278>)
 8009448:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800944a:	4b4e      	ldr	r3, [pc, #312]	@ (8009584 <HAL_RCC_OscConfig+0x27c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4618      	mov	r0, r3
 8009450:	f7fd fbf8 	bl	8006c44 <HAL_InitTick>
 8009454:	4603      	mov	r3, r0
 8009456:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009458:	7bfb      	ldrb	r3, [r7, #15]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d052      	beq.n	8009504 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800945e:	7bfb      	ldrb	r3, [r7, #15]
 8009460:	e364      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d032      	beq.n	80094d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800946a:	4b43      	ldr	r3, [pc, #268]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a42      	ldr	r2, [pc, #264]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 8009470:	f043 0301 	orr.w	r3, r3, #1
 8009474:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009476:	f7fd fc35 	bl	8006ce4 <HAL_GetTick>
 800947a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800947c:	e008      	b.n	8009490 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800947e:	f7fd fc31 	bl	8006ce4 <HAL_GetTick>
 8009482:	4602      	mov	r2, r0
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	2b02      	cmp	r3, #2
 800948a:	d901      	bls.n	8009490 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800948c:	2303      	movs	r3, #3
 800948e:	e34d      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009490:	4b39      	ldr	r3, [pc, #228]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 0302 	and.w	r3, r3, #2
 8009498:	2b00      	cmp	r3, #0
 800949a:	d0f0      	beq.n	800947e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800949c:	4b36      	ldr	r3, [pc, #216]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a35      	ldr	r2, [pc, #212]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80094a2:	f043 0308 	orr.w	r3, r3, #8
 80094a6:	6013      	str	r3, [r2, #0]
 80094a8:	4b33      	ldr	r3, [pc, #204]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a1b      	ldr	r3, [r3, #32]
 80094b4:	4930      	ldr	r1, [pc, #192]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80094ba:	4b2f      	ldr	r3, [pc, #188]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	021b      	lsls	r3, r3, #8
 80094c8:	492b      	ldr	r1, [pc, #172]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	604b      	str	r3, [r1, #4]
 80094ce:	e01a      	b.n	8009506 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80094d0:	4b29      	ldr	r3, [pc, #164]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a28      	ldr	r2, [pc, #160]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80094d6:	f023 0301 	bic.w	r3, r3, #1
 80094da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80094dc:	f7fd fc02 	bl	8006ce4 <HAL_GetTick>
 80094e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80094e2:	e008      	b.n	80094f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80094e4:	f7fd fbfe 	bl	8006ce4 <HAL_GetTick>
 80094e8:	4602      	mov	r2, r0
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d901      	bls.n	80094f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80094f2:	2303      	movs	r3, #3
 80094f4:	e31a      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80094f6:	4b20      	ldr	r3, [pc, #128]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 0302 	and.w	r3, r3, #2
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1f0      	bne.n	80094e4 <HAL_RCC_OscConfig+0x1dc>
 8009502:	e000      	b.n	8009506 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009504:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	2b00      	cmp	r3, #0
 8009510:	d073      	beq.n	80095fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	2b08      	cmp	r3, #8
 8009516:	d005      	beq.n	8009524 <HAL_RCC_OscConfig+0x21c>
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	2b0c      	cmp	r3, #12
 800951c:	d10e      	bne.n	800953c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2b03      	cmp	r3, #3
 8009522:	d10b      	bne.n	800953c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009524:	4b14      	ldr	r3, [pc, #80]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800952c:	2b00      	cmp	r3, #0
 800952e:	d063      	beq.n	80095f8 <HAL_RCC_OscConfig+0x2f0>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d15f      	bne.n	80095f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e2f7      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009544:	d106      	bne.n	8009554 <HAL_RCC_OscConfig+0x24c>
 8009546:	4b0c      	ldr	r3, [pc, #48]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a0b      	ldr	r2, [pc, #44]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 800954c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009550:	6013      	str	r3, [r2, #0]
 8009552:	e025      	b.n	80095a0 <HAL_RCC_OscConfig+0x298>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800955c:	d114      	bne.n	8009588 <HAL_RCC_OscConfig+0x280>
 800955e:	4b06      	ldr	r3, [pc, #24]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a05      	ldr	r2, [pc, #20]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 8009564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009568:	6013      	str	r3, [r2, #0]
 800956a:	4b03      	ldr	r3, [pc, #12]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a02      	ldr	r2, [pc, #8]	@ (8009578 <HAL_RCC_OscConfig+0x270>)
 8009570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	e013      	b.n	80095a0 <HAL_RCC_OscConfig+0x298>
 8009578:	40021000 	.word	0x40021000
 800957c:	080182d0 	.word	0x080182d0
 8009580:	20000034 	.word	0x20000034
 8009584:	20000038 	.word	0x20000038
 8009588:	4ba0      	ldr	r3, [pc, #640]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a9f      	ldr	r2, [pc, #636]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 800958e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009592:	6013      	str	r3, [r2, #0]
 8009594:	4b9d      	ldr	r3, [pc, #628]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a9c      	ldr	r2, [pc, #624]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 800959a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800959e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d013      	beq.n	80095d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095a8:	f7fd fb9c 	bl	8006ce4 <HAL_GetTick>
 80095ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80095ae:	e008      	b.n	80095c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80095b0:	f7fd fb98 	bl	8006ce4 <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	2b64      	cmp	r3, #100	@ 0x64
 80095bc:	d901      	bls.n	80095c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	e2b4      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80095c2:	4b92      	ldr	r3, [pc, #584]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d0f0      	beq.n	80095b0 <HAL_RCC_OscConfig+0x2a8>
 80095ce:	e014      	b.n	80095fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095d0:	f7fd fb88 	bl	8006ce4 <HAL_GetTick>
 80095d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80095d6:	e008      	b.n	80095ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80095d8:	f7fd fb84 	bl	8006ce4 <HAL_GetTick>
 80095dc:	4602      	mov	r2, r0
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	2b64      	cmp	r3, #100	@ 0x64
 80095e4:	d901      	bls.n	80095ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80095e6:	2303      	movs	r3, #3
 80095e8:	e2a0      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80095ea:	4b88      	ldr	r3, [pc, #544]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1f0      	bne.n	80095d8 <HAL_RCC_OscConfig+0x2d0>
 80095f6:	e000      	b.n	80095fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0302 	and.w	r3, r3, #2
 8009602:	2b00      	cmp	r3, #0
 8009604:	d060      	beq.n	80096c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	2b04      	cmp	r3, #4
 800960a:	d005      	beq.n	8009618 <HAL_RCC_OscConfig+0x310>
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	2b0c      	cmp	r3, #12
 8009610:	d119      	bne.n	8009646 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b02      	cmp	r3, #2
 8009616:	d116      	bne.n	8009646 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009618:	4b7c      	ldr	r3, [pc, #496]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009620:	2b00      	cmp	r3, #0
 8009622:	d005      	beq.n	8009630 <HAL_RCC_OscConfig+0x328>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e27d      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009630:	4b76      	ldr	r3, [pc, #472]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	061b      	lsls	r3, r3, #24
 800963e:	4973      	ldr	r1, [pc, #460]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 8009640:	4313      	orrs	r3, r2
 8009642:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009644:	e040      	b.n	80096c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d023      	beq.n	8009696 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800964e:	4b6f      	ldr	r3, [pc, #444]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a6e      	ldr	r2, [pc, #440]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 8009654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800965a:	f7fd fb43 	bl	8006ce4 <HAL_GetTick>
 800965e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009660:	e008      	b.n	8009674 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009662:	f7fd fb3f 	bl	8006ce4 <HAL_GetTick>
 8009666:	4602      	mov	r2, r0
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	2b02      	cmp	r3, #2
 800966e:	d901      	bls.n	8009674 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009670:	2303      	movs	r3, #3
 8009672:	e25b      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009674:	4b65      	ldr	r3, [pc, #404]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800967c:	2b00      	cmp	r3, #0
 800967e:	d0f0      	beq.n	8009662 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009680:	4b62      	ldr	r3, [pc, #392]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	061b      	lsls	r3, r3, #24
 800968e:	495f      	ldr	r1, [pc, #380]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 8009690:	4313      	orrs	r3, r2
 8009692:	604b      	str	r3, [r1, #4]
 8009694:	e018      	b.n	80096c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009696:	4b5d      	ldr	r3, [pc, #372]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a5c      	ldr	r2, [pc, #368]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 800969c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096a2:	f7fd fb1f 	bl	8006ce4 <HAL_GetTick>
 80096a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80096a8:	e008      	b.n	80096bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096aa:	f7fd fb1b 	bl	8006ce4 <HAL_GetTick>
 80096ae:	4602      	mov	r2, r0
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d901      	bls.n	80096bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80096b8:	2303      	movs	r3, #3
 80096ba:	e237      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80096bc:	4b53      	ldr	r3, [pc, #332]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1f0      	bne.n	80096aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 0308 	and.w	r3, r3, #8
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d03c      	beq.n	800974e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d01c      	beq.n	8009716 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80096dc:	4b4b      	ldr	r3, [pc, #300]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 80096de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80096e2:	4a4a      	ldr	r2, [pc, #296]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 80096e4:	f043 0301 	orr.w	r3, r3, #1
 80096e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096ec:	f7fd fafa 	bl	8006ce4 <HAL_GetTick>
 80096f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80096f2:	e008      	b.n	8009706 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096f4:	f7fd faf6 	bl	8006ce4 <HAL_GetTick>
 80096f8:	4602      	mov	r2, r0
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d901      	bls.n	8009706 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009702:	2303      	movs	r3, #3
 8009704:	e212      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009706:	4b41      	ldr	r3, [pc, #260]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 8009708:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800970c:	f003 0302 	and.w	r3, r3, #2
 8009710:	2b00      	cmp	r3, #0
 8009712:	d0ef      	beq.n	80096f4 <HAL_RCC_OscConfig+0x3ec>
 8009714:	e01b      	b.n	800974e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009716:	4b3d      	ldr	r3, [pc, #244]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 8009718:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800971c:	4a3b      	ldr	r2, [pc, #236]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 800971e:	f023 0301 	bic.w	r3, r3, #1
 8009722:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009726:	f7fd fadd 	bl	8006ce4 <HAL_GetTick>
 800972a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800972c:	e008      	b.n	8009740 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800972e:	f7fd fad9 	bl	8006ce4 <HAL_GetTick>
 8009732:	4602      	mov	r2, r0
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	2b02      	cmp	r3, #2
 800973a:	d901      	bls.n	8009740 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800973c:	2303      	movs	r3, #3
 800973e:	e1f5      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009740:	4b32      	ldr	r3, [pc, #200]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 8009742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009746:	f003 0302 	and.w	r3, r3, #2
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1ef      	bne.n	800972e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 0304 	and.w	r3, r3, #4
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 80a6 	beq.w	80098a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800975c:	2300      	movs	r3, #0
 800975e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009760:	4b2a      	ldr	r3, [pc, #168]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 8009762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10d      	bne.n	8009788 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800976c:	4b27      	ldr	r3, [pc, #156]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 800976e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009770:	4a26      	ldr	r2, [pc, #152]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 8009772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009776:	6593      	str	r3, [r2, #88]	@ 0x58
 8009778:	4b24      	ldr	r3, [pc, #144]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 800977a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800977c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009780:	60bb      	str	r3, [r7, #8]
 8009782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009784:	2301      	movs	r3, #1
 8009786:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009788:	4b21      	ldr	r3, [pc, #132]	@ (8009810 <HAL_RCC_OscConfig+0x508>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009790:	2b00      	cmp	r3, #0
 8009792:	d118      	bne.n	80097c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009794:	4b1e      	ldr	r3, [pc, #120]	@ (8009810 <HAL_RCC_OscConfig+0x508>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a1d      	ldr	r2, [pc, #116]	@ (8009810 <HAL_RCC_OscConfig+0x508>)
 800979a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800979e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80097a0:	f7fd faa0 	bl	8006ce4 <HAL_GetTick>
 80097a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80097a6:	e008      	b.n	80097ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097a8:	f7fd fa9c 	bl	8006ce4 <HAL_GetTick>
 80097ac:	4602      	mov	r2, r0
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d901      	bls.n	80097ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80097b6:	2303      	movs	r3, #3
 80097b8:	e1b8      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80097ba:	4b15      	ldr	r3, [pc, #84]	@ (8009810 <HAL_RCC_OscConfig+0x508>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0f0      	beq.n	80097a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d108      	bne.n	80097e0 <HAL_RCC_OscConfig+0x4d8>
 80097ce:	4b0f      	ldr	r3, [pc, #60]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 80097d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097d4:	4a0d      	ldr	r2, [pc, #52]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 80097d6:	f043 0301 	orr.w	r3, r3, #1
 80097da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80097de:	e029      	b.n	8009834 <HAL_RCC_OscConfig+0x52c>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	2b05      	cmp	r3, #5
 80097e6:	d115      	bne.n	8009814 <HAL_RCC_OscConfig+0x50c>
 80097e8:	4b08      	ldr	r3, [pc, #32]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 80097ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097ee:	4a07      	ldr	r2, [pc, #28]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 80097f0:	f043 0304 	orr.w	r3, r3, #4
 80097f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80097f8:	4b04      	ldr	r3, [pc, #16]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 80097fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097fe:	4a03      	ldr	r2, [pc, #12]	@ (800980c <HAL_RCC_OscConfig+0x504>)
 8009800:	f043 0301 	orr.w	r3, r3, #1
 8009804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009808:	e014      	b.n	8009834 <HAL_RCC_OscConfig+0x52c>
 800980a:	bf00      	nop
 800980c:	40021000 	.word	0x40021000
 8009810:	40007000 	.word	0x40007000
 8009814:	4b9d      	ldr	r3, [pc, #628]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 8009816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800981a:	4a9c      	ldr	r2, [pc, #624]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 800981c:	f023 0301 	bic.w	r3, r3, #1
 8009820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009824:	4b99      	ldr	r3, [pc, #612]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 8009826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800982a:	4a98      	ldr	r2, [pc, #608]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 800982c:	f023 0304 	bic.w	r3, r3, #4
 8009830:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d016      	beq.n	800986a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800983c:	f7fd fa52 	bl	8006ce4 <HAL_GetTick>
 8009840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009842:	e00a      	b.n	800985a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009844:	f7fd fa4e 	bl	8006ce4 <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009852:	4293      	cmp	r3, r2
 8009854:	d901      	bls.n	800985a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009856:	2303      	movs	r3, #3
 8009858:	e168      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800985a:	4b8c      	ldr	r3, [pc, #560]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 800985c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009860:	f003 0302 	and.w	r3, r3, #2
 8009864:	2b00      	cmp	r3, #0
 8009866:	d0ed      	beq.n	8009844 <HAL_RCC_OscConfig+0x53c>
 8009868:	e015      	b.n	8009896 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800986a:	f7fd fa3b 	bl	8006ce4 <HAL_GetTick>
 800986e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009870:	e00a      	b.n	8009888 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009872:	f7fd fa37 	bl	8006ce4 <HAL_GetTick>
 8009876:	4602      	mov	r2, r0
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009880:	4293      	cmp	r3, r2
 8009882:	d901      	bls.n	8009888 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e151      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009888:	4b80      	ldr	r3, [pc, #512]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 800988a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1ed      	bne.n	8009872 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009896:	7ffb      	ldrb	r3, [r7, #31]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d105      	bne.n	80098a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800989c:	4b7b      	ldr	r3, [pc, #492]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 800989e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098a0:	4a7a      	ldr	r2, [pc, #488]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 80098a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0320 	and.w	r3, r3, #32
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d03c      	beq.n	800992e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d01c      	beq.n	80098f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80098bc:	4b73      	ldr	r3, [pc, #460]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 80098be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098c2:	4a72      	ldr	r2, [pc, #456]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 80098c4:	f043 0301 	orr.w	r3, r3, #1
 80098c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098cc:	f7fd fa0a 	bl	8006ce4 <HAL_GetTick>
 80098d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80098d2:	e008      	b.n	80098e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80098d4:	f7fd fa06 	bl	8006ce4 <HAL_GetTick>
 80098d8:	4602      	mov	r2, r0
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d901      	bls.n	80098e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e122      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80098e6:	4b69      	ldr	r3, [pc, #420]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 80098e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098ec:	f003 0302 	and.w	r3, r3, #2
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d0ef      	beq.n	80098d4 <HAL_RCC_OscConfig+0x5cc>
 80098f4:	e01b      	b.n	800992e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80098f6:	4b65      	ldr	r3, [pc, #404]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 80098f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098fc:	4a63      	ldr	r2, [pc, #396]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 80098fe:	f023 0301 	bic.w	r3, r3, #1
 8009902:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009906:	f7fd f9ed 	bl	8006ce4 <HAL_GetTick>
 800990a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800990c:	e008      	b.n	8009920 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800990e:	f7fd f9e9 	bl	8006ce4 <HAL_GetTick>
 8009912:	4602      	mov	r2, r0
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	2b02      	cmp	r3, #2
 800991a:	d901      	bls.n	8009920 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800991c:	2303      	movs	r3, #3
 800991e:	e105      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009920:	4b5a      	ldr	r3, [pc, #360]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 8009922:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009926:	f003 0302 	and.w	r3, r3, #2
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1ef      	bne.n	800990e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009932:	2b00      	cmp	r3, #0
 8009934:	f000 80f9 	beq.w	8009b2a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800993c:	2b02      	cmp	r3, #2
 800993e:	f040 80cf 	bne.w	8009ae0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009942:	4b52      	ldr	r3, [pc, #328]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	f003 0203 	and.w	r2, r3, #3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009952:	429a      	cmp	r2, r3
 8009954:	d12c      	bne.n	80099b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009960:	3b01      	subs	r3, #1
 8009962:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009964:	429a      	cmp	r2, r3
 8009966:	d123      	bne.n	80099b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009972:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009974:	429a      	cmp	r2, r3
 8009976:	d11b      	bne.n	80099b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009982:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009984:	429a      	cmp	r2, r3
 8009986:	d113      	bne.n	80099b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009992:	085b      	lsrs	r3, r3, #1
 8009994:	3b01      	subs	r3, #1
 8009996:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009998:	429a      	cmp	r2, r3
 800999a:	d109      	bne.n	80099b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099a6:	085b      	lsrs	r3, r3, #1
 80099a8:	3b01      	subs	r3, #1
 80099aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d071      	beq.n	8009a94 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	2b0c      	cmp	r3, #12
 80099b4:	d068      	beq.n	8009a88 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80099b6:	4b35      	ldr	r3, [pc, #212]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d105      	bne.n	80099ce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80099c2:	4b32      	ldr	r3, [pc, #200]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e0ac      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80099d2:	4b2e      	ldr	r3, [pc, #184]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a2d      	ldr	r2, [pc, #180]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 80099d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80099dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80099de:	f7fd f981 	bl	8006ce4 <HAL_GetTick>
 80099e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099e4:	e008      	b.n	80099f8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099e6:	f7fd f97d 	bl	8006ce4 <HAL_GetTick>
 80099ea:	4602      	mov	r2, r0
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d901      	bls.n	80099f8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80099f4:	2303      	movs	r3, #3
 80099f6:	e099      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099f8:	4b24      	ldr	r3, [pc, #144]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1f0      	bne.n	80099e6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009a04:	4b21      	ldr	r3, [pc, #132]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 8009a06:	68da      	ldr	r2, [r3, #12]
 8009a08:	4b21      	ldr	r3, [pc, #132]	@ (8009a90 <HAL_RCC_OscConfig+0x788>)
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009a14:	3a01      	subs	r2, #1
 8009a16:	0112      	lsls	r2, r2, #4
 8009a18:	4311      	orrs	r1, r2
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009a1e:	0212      	lsls	r2, r2, #8
 8009a20:	4311      	orrs	r1, r2
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009a26:	0852      	lsrs	r2, r2, #1
 8009a28:	3a01      	subs	r2, #1
 8009a2a:	0552      	lsls	r2, r2, #21
 8009a2c:	4311      	orrs	r1, r2
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009a32:	0852      	lsrs	r2, r2, #1
 8009a34:	3a01      	subs	r2, #1
 8009a36:	0652      	lsls	r2, r2, #25
 8009a38:	4311      	orrs	r1, r2
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009a3e:	06d2      	lsls	r2, r2, #27
 8009a40:	430a      	orrs	r2, r1
 8009a42:	4912      	ldr	r1, [pc, #72]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 8009a44:	4313      	orrs	r3, r2
 8009a46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009a48:	4b10      	ldr	r3, [pc, #64]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a0f      	ldr	r2, [pc, #60]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 8009a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009a54:	4b0d      	ldr	r3, [pc, #52]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	4a0c      	ldr	r2, [pc, #48]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 8009a5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009a60:	f7fd f940 	bl	8006ce4 <HAL_GetTick>
 8009a64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a66:	e008      	b.n	8009a7a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a68:	f7fd f93c 	bl	8006ce4 <HAL_GetTick>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d901      	bls.n	8009a7a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e058      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a7a:	4b04      	ldr	r3, [pc, #16]	@ (8009a8c <HAL_RCC_OscConfig+0x784>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d0f0      	beq.n	8009a68 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009a86:	e050      	b.n	8009b2a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e04f      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
 8009a8c:	40021000 	.word	0x40021000
 8009a90:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a94:	4b27      	ldr	r3, [pc, #156]	@ (8009b34 <HAL_RCC_OscConfig+0x82c>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d144      	bne.n	8009b2a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009aa0:	4b24      	ldr	r3, [pc, #144]	@ (8009b34 <HAL_RCC_OscConfig+0x82c>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a23      	ldr	r2, [pc, #140]	@ (8009b34 <HAL_RCC_OscConfig+0x82c>)
 8009aa6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009aaa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009aac:	4b21      	ldr	r3, [pc, #132]	@ (8009b34 <HAL_RCC_OscConfig+0x82c>)
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	4a20      	ldr	r2, [pc, #128]	@ (8009b34 <HAL_RCC_OscConfig+0x82c>)
 8009ab2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009ab6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009ab8:	f7fd f914 	bl	8006ce4 <HAL_GetTick>
 8009abc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009abe:	e008      	b.n	8009ad2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ac0:	f7fd f910 	bl	8006ce4 <HAL_GetTick>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d901      	bls.n	8009ad2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e02c      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ad2:	4b18      	ldr	r3, [pc, #96]	@ (8009b34 <HAL_RCC_OscConfig+0x82c>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0f0      	beq.n	8009ac0 <HAL_RCC_OscConfig+0x7b8>
 8009ade:	e024      	b.n	8009b2a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	2b0c      	cmp	r3, #12
 8009ae4:	d01f      	beq.n	8009b26 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ae6:	4b13      	ldr	r3, [pc, #76]	@ (8009b34 <HAL_RCC_OscConfig+0x82c>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a12      	ldr	r2, [pc, #72]	@ (8009b34 <HAL_RCC_OscConfig+0x82c>)
 8009aec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009af2:	f7fd f8f7 	bl	8006ce4 <HAL_GetTick>
 8009af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009af8:	e008      	b.n	8009b0c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009afa:	f7fd f8f3 	bl	8006ce4 <HAL_GetTick>
 8009afe:	4602      	mov	r2, r0
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d901      	bls.n	8009b0c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e00f      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b0c:	4b09      	ldr	r3, [pc, #36]	@ (8009b34 <HAL_RCC_OscConfig+0x82c>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1f0      	bne.n	8009afa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009b18:	4b06      	ldr	r3, [pc, #24]	@ (8009b34 <HAL_RCC_OscConfig+0x82c>)
 8009b1a:	68da      	ldr	r2, [r3, #12]
 8009b1c:	4905      	ldr	r1, [pc, #20]	@ (8009b34 <HAL_RCC_OscConfig+0x82c>)
 8009b1e:	4b06      	ldr	r3, [pc, #24]	@ (8009b38 <HAL_RCC_OscConfig+0x830>)
 8009b20:	4013      	ands	r3, r2
 8009b22:	60cb      	str	r3, [r1, #12]
 8009b24:	e001      	b.n	8009b2a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e000      	b.n	8009b2c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3720      	adds	r7, #32
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	40021000 	.word	0x40021000
 8009b38:	feeefffc 	.word	0xfeeefffc

08009b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009b46:	2300      	movs	r3, #0
 8009b48:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d101      	bne.n	8009b54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e11d      	b.n	8009d90 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009b54:	4b90      	ldr	r3, [pc, #576]	@ (8009d98 <HAL_RCC_ClockConfig+0x25c>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 030f 	and.w	r3, r3, #15
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d910      	bls.n	8009b84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b62:	4b8d      	ldr	r3, [pc, #564]	@ (8009d98 <HAL_RCC_ClockConfig+0x25c>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f023 020f 	bic.w	r2, r3, #15
 8009b6a:	498b      	ldr	r1, [pc, #556]	@ (8009d98 <HAL_RCC_ClockConfig+0x25c>)
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b72:	4b89      	ldr	r3, [pc, #548]	@ (8009d98 <HAL_RCC_ClockConfig+0x25c>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 030f 	and.w	r3, r3, #15
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d001      	beq.n	8009b84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e105      	b.n	8009d90 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 0302 	and.w	r3, r3, #2
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d010      	beq.n	8009bb2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	689a      	ldr	r2, [r3, #8]
 8009b94:	4b81      	ldr	r3, [pc, #516]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d908      	bls.n	8009bb2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ba0:	4b7e      	ldr	r3, [pc, #504]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	497b      	ldr	r1, [pc, #492]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 0301 	and.w	r3, r3, #1
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d079      	beq.n	8009cb2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	2b03      	cmp	r3, #3
 8009bc4:	d11e      	bne.n	8009c04 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009bc6:	4b75      	ldr	r3, [pc, #468]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d101      	bne.n	8009bd6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e0dc      	b.n	8009d90 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8009bd6:	f000 fa09 	bl	8009fec <RCC_GetSysClockFreqFromPLLSource>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	4a70      	ldr	r2, [pc, #448]	@ (8009da0 <HAL_RCC_ClockConfig+0x264>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d946      	bls.n	8009c70 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009be2:	4b6e      	ldr	r3, [pc, #440]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d140      	bne.n	8009c70 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009bee:	4b6b      	ldr	r3, [pc, #428]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009bf6:	4a69      	ldr	r2, [pc, #420]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bfc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009bfe:	2380      	movs	r3, #128	@ 0x80
 8009c00:	617b      	str	r3, [r7, #20]
 8009c02:	e035      	b.n	8009c70 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d107      	bne.n	8009c1c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c0c:	4b63      	ldr	r3, [pc, #396]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d115      	bne.n	8009c44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e0b9      	b.n	8009d90 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d107      	bne.n	8009c34 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009c24:	4b5d      	ldr	r3, [pc, #372]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 0302 	and.w	r3, r3, #2
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d109      	bne.n	8009c44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e0ad      	b.n	8009d90 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009c34:	4b59      	ldr	r3, [pc, #356]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d101      	bne.n	8009c44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e0a5      	b.n	8009d90 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8009c44:	f000 f8b4 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	4a55      	ldr	r2, [pc, #340]	@ (8009da0 <HAL_RCC_ClockConfig+0x264>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d90f      	bls.n	8009c70 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009c50:	4b52      	ldr	r3, [pc, #328]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d109      	bne.n	8009c70 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009c5c:	4b4f      	ldr	r3, [pc, #316]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c64:	4a4d      	ldr	r2, [pc, #308]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c6a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009c6c:	2380      	movs	r3, #128	@ 0x80
 8009c6e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009c70:	4b4a      	ldr	r3, [pc, #296]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	f023 0203 	bic.w	r2, r3, #3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	4947      	ldr	r1, [pc, #284]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c82:	f7fd f82f 	bl	8006ce4 <HAL_GetTick>
 8009c86:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c88:	e00a      	b.n	8009ca0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c8a:	f7fd f82b 	bl	8006ce4 <HAL_GetTick>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	1ad3      	subs	r3, r2, r3
 8009c94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d901      	bls.n	8009ca0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e077      	b.n	8009d90 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ca0:	4b3e      	ldr	r3, [pc, #248]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	f003 020c 	and.w	r2, r3, #12
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d1eb      	bne.n	8009c8a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2b80      	cmp	r3, #128	@ 0x80
 8009cb6:	d105      	bne.n	8009cc4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009cb8:	4b38      	ldr	r3, [pc, #224]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	4a37      	ldr	r2, [pc, #220]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009cbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009cc2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 0302 	and.w	r3, r3, #2
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d010      	beq.n	8009cf2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	689a      	ldr	r2, [r3, #8]
 8009cd4:	4b31      	ldr	r3, [pc, #196]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d208      	bcs.n	8009cf2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	492b      	ldr	r1, [pc, #172]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009cf2:	4b29      	ldr	r3, [pc, #164]	@ (8009d98 <HAL_RCC_ClockConfig+0x25c>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 030f 	and.w	r3, r3, #15
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d210      	bcs.n	8009d22 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d00:	4b25      	ldr	r3, [pc, #148]	@ (8009d98 <HAL_RCC_ClockConfig+0x25c>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f023 020f 	bic.w	r2, r3, #15
 8009d08:	4923      	ldr	r1, [pc, #140]	@ (8009d98 <HAL_RCC_ClockConfig+0x25c>)
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d10:	4b21      	ldr	r3, [pc, #132]	@ (8009d98 <HAL_RCC_ClockConfig+0x25c>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 030f 	and.w	r3, r3, #15
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d001      	beq.n	8009d22 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e036      	b.n	8009d90 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0304 	and.w	r3, r3, #4
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d008      	beq.n	8009d40 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	4918      	ldr	r1, [pc, #96]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f003 0308 	and.w	r3, r3, #8
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d009      	beq.n	8009d60 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d4c:	4b13      	ldr	r3, [pc, #76]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	00db      	lsls	r3, r3, #3
 8009d5a:	4910      	ldr	r1, [pc, #64]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009d60:	f000 f826 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 8009d64:	4602      	mov	r2, r0
 8009d66:	4b0d      	ldr	r3, [pc, #52]	@ (8009d9c <HAL_RCC_ClockConfig+0x260>)
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	091b      	lsrs	r3, r3, #4
 8009d6c:	f003 030f 	and.w	r3, r3, #15
 8009d70:	490c      	ldr	r1, [pc, #48]	@ (8009da4 <HAL_RCC_ClockConfig+0x268>)
 8009d72:	5ccb      	ldrb	r3, [r1, r3]
 8009d74:	f003 031f 	and.w	r3, r3, #31
 8009d78:	fa22 f303 	lsr.w	r3, r2, r3
 8009d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8009da8 <HAL_RCC_ClockConfig+0x26c>)
 8009d7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009d80:	4b0a      	ldr	r3, [pc, #40]	@ (8009dac <HAL_RCC_ClockConfig+0x270>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7fc ff5d 	bl	8006c44 <HAL_InitTick>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	73fb      	strb	r3, [r7, #15]

  return status;
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3718      	adds	r7, #24
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	40022000 	.word	0x40022000
 8009d9c:	40021000 	.word	0x40021000
 8009da0:	04c4b400 	.word	0x04c4b400
 8009da4:	080182d0 	.word	0x080182d0
 8009da8:	20000034 	.word	0x20000034
 8009dac:	20000038 	.word	0x20000038

08009db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b089      	sub	sp, #36	@ 0x24
 8009db4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009db6:	2300      	movs	r3, #0
 8009db8:	61fb      	str	r3, [r7, #28]
 8009dba:	2300      	movs	r3, #0
 8009dbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8009eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	f003 030c 	and.w	r3, r3, #12
 8009dc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8009eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	f003 0303 	and.w	r3, r3, #3
 8009dd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d005      	beq.n	8009de4 <HAL_RCC_GetSysClockFreq+0x34>
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	2b0c      	cmp	r3, #12
 8009ddc:	d121      	bne.n	8009e22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d11e      	bne.n	8009e22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009de4:	4b34      	ldr	r3, [pc, #208]	@ (8009eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f003 0308 	and.w	r3, r3, #8
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d107      	bne.n	8009e00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009df0:	4b31      	ldr	r3, [pc, #196]	@ (8009eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009df6:	0a1b      	lsrs	r3, r3, #8
 8009df8:	f003 030f 	and.w	r3, r3, #15
 8009dfc:	61fb      	str	r3, [r7, #28]
 8009dfe:	e005      	b.n	8009e0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009e00:	4b2d      	ldr	r3, [pc, #180]	@ (8009eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	091b      	lsrs	r3, r3, #4
 8009e06:	f003 030f 	and.w	r3, r3, #15
 8009e0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8009ebc <HAL_RCC_GetSysClockFreq+0x10c>)
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d10d      	bne.n	8009e38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009e20:	e00a      	b.n	8009e38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	2b04      	cmp	r3, #4
 8009e26:	d102      	bne.n	8009e2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009e28:	4b25      	ldr	r3, [pc, #148]	@ (8009ec0 <HAL_RCC_GetSysClockFreq+0x110>)
 8009e2a:	61bb      	str	r3, [r7, #24]
 8009e2c:	e004      	b.n	8009e38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	2b08      	cmp	r3, #8
 8009e32:	d101      	bne.n	8009e38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009e34:	4b23      	ldr	r3, [pc, #140]	@ (8009ec4 <HAL_RCC_GetSysClockFreq+0x114>)
 8009e36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	2b0c      	cmp	r3, #12
 8009e3c:	d134      	bne.n	8009ea8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8009eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	f003 0303 	and.w	r3, r3, #3
 8009e46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d003      	beq.n	8009e56 <HAL_RCC_GetSysClockFreq+0xa6>
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	2b03      	cmp	r3, #3
 8009e52:	d003      	beq.n	8009e5c <HAL_RCC_GetSysClockFreq+0xac>
 8009e54:	e005      	b.n	8009e62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009e56:	4b1a      	ldr	r3, [pc, #104]	@ (8009ec0 <HAL_RCC_GetSysClockFreq+0x110>)
 8009e58:	617b      	str	r3, [r7, #20]
      break;
 8009e5a:	e005      	b.n	8009e68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009e5c:	4b19      	ldr	r3, [pc, #100]	@ (8009ec4 <HAL_RCC_GetSysClockFreq+0x114>)
 8009e5e:	617b      	str	r3, [r7, #20]
      break;
 8009e60:	e002      	b.n	8009e68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	617b      	str	r3, [r7, #20]
      break;
 8009e66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009e68:	4b13      	ldr	r3, [pc, #76]	@ (8009eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	091b      	lsrs	r3, r3, #4
 8009e6e:	f003 030f 	and.w	r3, r3, #15
 8009e72:	3301      	adds	r3, #1
 8009e74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009e76:	4b10      	ldr	r3, [pc, #64]	@ (8009eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	0a1b      	lsrs	r3, r3, #8
 8009e7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	fb03 f202 	mul.w	r2, r3, r2
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8009eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	0e5b      	lsrs	r3, r3, #25
 8009e94:	f003 0303 	and.w	r3, r3, #3
 8009e98:	3301      	adds	r3, #1
 8009e9a:	005b      	lsls	r3, r3, #1
 8009e9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009e9e:	697a      	ldr	r2, [r7, #20]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ea6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009ea8:	69bb      	ldr	r3, [r7, #24]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3724      	adds	r7, #36	@ 0x24
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	40021000 	.word	0x40021000
 8009ebc:	080182e8 	.word	0x080182e8
 8009ec0:	00f42400 	.word	0x00f42400
 8009ec4:	007a1200 	.word	0x007a1200

08009ec8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ecc:	4b03      	ldr	r3, [pc, #12]	@ (8009edc <HAL_RCC_GetHCLKFreq+0x14>)
 8009ece:	681b      	ldr	r3, [r3, #0]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	20000034 	.word	0x20000034

08009ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009ee4:	f7ff fff0 	bl	8009ec8 <HAL_RCC_GetHCLKFreq>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	4b06      	ldr	r3, [pc, #24]	@ (8009f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	0a1b      	lsrs	r3, r3, #8
 8009ef0:	f003 0307 	and.w	r3, r3, #7
 8009ef4:	4904      	ldr	r1, [pc, #16]	@ (8009f08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009ef6:	5ccb      	ldrb	r3, [r1, r3]
 8009ef8:	f003 031f 	and.w	r3, r3, #31
 8009efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	40021000 	.word	0x40021000
 8009f08:	080182e0 	.word	0x080182e0

08009f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009f10:	f7ff ffda 	bl	8009ec8 <HAL_RCC_GetHCLKFreq>
 8009f14:	4602      	mov	r2, r0
 8009f16:	4b06      	ldr	r3, [pc, #24]	@ (8009f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	0adb      	lsrs	r3, r3, #11
 8009f1c:	f003 0307 	and.w	r3, r3, #7
 8009f20:	4904      	ldr	r1, [pc, #16]	@ (8009f34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009f22:	5ccb      	ldrb	r3, [r1, r3]
 8009f24:	f003 031f 	and.w	r3, r3, #31
 8009f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	40021000 	.word	0x40021000
 8009f34:	080182e0 	.word	0x080182e0

08009f38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009f40:	2300      	movs	r3, #0
 8009f42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009f44:	4b27      	ldr	r3, [pc, #156]	@ (8009fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d003      	beq.n	8009f58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009f50:	f7ff f906 	bl	8009160 <HAL_PWREx_GetVoltageRange>
 8009f54:	6178      	str	r0, [r7, #20]
 8009f56:	e014      	b.n	8009f82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009f58:	4b22      	ldr	r3, [pc, #136]	@ (8009fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f5c:	4a21      	ldr	r2, [pc, #132]	@ (8009fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f62:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f64:	4b1f      	ldr	r3, [pc, #124]	@ (8009fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f6c:	60fb      	str	r3, [r7, #12]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009f70:	f7ff f8f6 	bl	8009160 <HAL_PWREx_GetVoltageRange>
 8009f74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009f76:	4b1b      	ldr	r3, [pc, #108]	@ (8009fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8009fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009f7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f80:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f88:	d10b      	bne.n	8009fa2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2b80      	cmp	r3, #128	@ 0x80
 8009f8e:	d913      	bls.n	8009fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2ba0      	cmp	r3, #160	@ 0xa0
 8009f94:	d902      	bls.n	8009f9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009f96:	2302      	movs	r3, #2
 8009f98:	613b      	str	r3, [r7, #16]
 8009f9a:	e00d      	b.n	8009fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	613b      	str	r3, [r7, #16]
 8009fa0:	e00a      	b.n	8009fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2b7f      	cmp	r3, #127	@ 0x7f
 8009fa6:	d902      	bls.n	8009fae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8009fa8:	2302      	movs	r3, #2
 8009faa:	613b      	str	r3, [r7, #16]
 8009fac:	e004      	b.n	8009fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2b70      	cmp	r3, #112	@ 0x70
 8009fb2:	d101      	bne.n	8009fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8009fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f023 020f 	bic.w	r2, r3, #15
 8009fc0:	4909      	ldr	r1, [pc, #36]	@ (8009fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009fc8:	4b07      	ldr	r3, [pc, #28]	@ (8009fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 030f 	and.w	r3, r3, #15
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d001      	beq.n	8009fda <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e000      	b.n	8009fdc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3718      	adds	r7, #24
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	40021000 	.word	0x40021000
 8009fe8:	40022000 	.word	0x40022000

08009fec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b087      	sub	sp, #28
 8009ff0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009ff2:	4b2d      	ldr	r3, [pc, #180]	@ (800a0a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	f003 0303 	and.w	r3, r3, #3
 8009ffa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2b03      	cmp	r3, #3
 800a000:	d00b      	beq.n	800a01a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b03      	cmp	r3, #3
 800a006:	d825      	bhi.n	800a054 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d008      	beq.n	800a020 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2b02      	cmp	r3, #2
 800a012:	d11f      	bne.n	800a054 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800a014:	4b25      	ldr	r3, [pc, #148]	@ (800a0ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800a016:	613b      	str	r3, [r7, #16]
    break;
 800a018:	e01f      	b.n	800a05a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800a01a:	4b25      	ldr	r3, [pc, #148]	@ (800a0b0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800a01c:	613b      	str	r3, [r7, #16]
    break;
 800a01e:	e01c      	b.n	800a05a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a020:	4b21      	ldr	r3, [pc, #132]	@ (800a0a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 0308 	and.w	r3, r3, #8
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d107      	bne.n	800a03c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a02c:	4b1e      	ldr	r3, [pc, #120]	@ (800a0a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a02e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a032:	0a1b      	lsrs	r3, r3, #8
 800a034:	f003 030f 	and.w	r3, r3, #15
 800a038:	617b      	str	r3, [r7, #20]
 800a03a:	e005      	b.n	800a048 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a03c:	4b1a      	ldr	r3, [pc, #104]	@ (800a0a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	091b      	lsrs	r3, r3, #4
 800a042:	f003 030f 	and.w	r3, r3, #15
 800a046:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800a048:	4a1a      	ldr	r2, [pc, #104]	@ (800a0b4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a050:	613b      	str	r3, [r7, #16]
    break;
 800a052:	e002      	b.n	800a05a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800a054:	2300      	movs	r3, #0
 800a056:	613b      	str	r3, [r7, #16]
    break;
 800a058:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a05a:	4b13      	ldr	r3, [pc, #76]	@ (800a0a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	091b      	lsrs	r3, r3, #4
 800a060:	f003 030f 	and.w	r3, r3, #15
 800a064:	3301      	adds	r3, #1
 800a066:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a068:	4b0f      	ldr	r3, [pc, #60]	@ (800a0a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	0a1b      	lsrs	r3, r3, #8
 800a06e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a072:	693a      	ldr	r2, [r7, #16]
 800a074:	fb03 f202 	mul.w	r2, r3, r2
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a07e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a080:	4b09      	ldr	r3, [pc, #36]	@ (800a0a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	0e5b      	lsrs	r3, r3, #25
 800a086:	f003 0303 	and.w	r3, r3, #3
 800a08a:	3301      	adds	r3, #1
 800a08c:	005b      	lsls	r3, r3, #1
 800a08e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	fbb2 f3f3 	udiv	r3, r2, r3
 800a098:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800a09a:	683b      	ldr	r3, [r7, #0]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	371c      	adds	r7, #28
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr
 800a0a8:	40021000 	.word	0x40021000
 800a0ac:	00f42400 	.word	0x00f42400
 800a0b0:	007a1200 	.word	0x007a1200
 800a0b4:	080182e8 	.word	0x080182e8

0800a0b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d040      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0d8:	2b80      	cmp	r3, #128	@ 0x80
 800a0da:	d02a      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a0dc:	2b80      	cmp	r3, #128	@ 0x80
 800a0de:	d825      	bhi.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a0e0:	2b60      	cmp	r3, #96	@ 0x60
 800a0e2:	d026      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a0e4:	2b60      	cmp	r3, #96	@ 0x60
 800a0e6:	d821      	bhi.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a0e8:	2b40      	cmp	r3, #64	@ 0x40
 800a0ea:	d006      	beq.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x42>
 800a0ec:	2b40      	cmp	r3, #64	@ 0x40
 800a0ee:	d81d      	bhi.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d009      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800a0f4:	2b20      	cmp	r3, #32
 800a0f6:	d010      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x62>
 800a0f8:	e018      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a0fa:	4b89      	ldr	r3, [pc, #548]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	4a88      	ldr	r2, [pc, #544]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a104:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a106:	e015      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	3304      	adds	r3, #4
 800a10c:	2100      	movs	r1, #0
 800a10e:	4618      	mov	r0, r3
 800a110:	f001 fa34 	bl	800b57c <RCCEx_PLLSAI1_Config>
 800a114:	4603      	mov	r3, r0
 800a116:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a118:	e00c      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	3320      	adds	r3, #32
 800a11e:	2100      	movs	r1, #0
 800a120:	4618      	mov	r0, r3
 800a122:	f001 fb1f 	bl	800b764 <RCCEx_PLLSAI2_Config>
 800a126:	4603      	mov	r3, r0
 800a128:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a12a:	e003      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	74fb      	strb	r3, [r7, #19]
      break;
 800a130:	e000      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800a132:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a134:	7cfb      	ldrb	r3, [r7, #19]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10b      	bne.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a13a:	4b79      	ldr	r3, [pc, #484]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a13c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a140:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a148:	4975      	ldr	r1, [pc, #468]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a14a:	4313      	orrs	r3, r2
 800a14c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800a150:	e001      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a152:	7cfb      	ldrb	r3, [r7, #19]
 800a154:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d047      	beq.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a16a:	d030      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a16c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a170:	d82a      	bhi.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a172:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a176:	d02a      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a178:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a17c:	d824      	bhi.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a17e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a182:	d008      	beq.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0xde>
 800a184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a188:	d81e      	bhi.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00a      	beq.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800a18e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a192:	d010      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a194:	e018      	b.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a196:	4b62      	ldr	r3, [pc, #392]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	4a61      	ldr	r2, [pc, #388]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a19c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a1a0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a1a2:	e015      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f001 f9e6 	bl	800b57c <RCCEx_PLLSAI1_Config>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a1b4:	e00c      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	3320      	adds	r3, #32
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f001 fad1 	bl	800b764 <RCCEx_PLLSAI2_Config>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a1c6:	e003      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	74fb      	strb	r3, [r7, #19]
      break;
 800a1cc:	e000      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800a1ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1d0:	7cfb      	ldrb	r3, [r7, #19]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10b      	bne.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a1d6:	4b52      	ldr	r3, [pc, #328]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a1d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a1dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1e4:	494e      	ldr	r1, [pc, #312]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800a1ec:	e001      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ee:	7cfb      	ldrb	r3, [r7, #19]
 800a1f0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f000 809f 	beq.w	800a33e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a200:	2300      	movs	r3, #0
 800a202:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a204:	4b46      	ldr	r3, [pc, #280]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800a210:	2301      	movs	r3, #1
 800a212:	e000      	b.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800a214:	2300      	movs	r3, #0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00d      	beq.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a21a:	4b41      	ldr	r3, [pc, #260]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a21c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a21e:	4a40      	ldr	r2, [pc, #256]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a224:	6593      	str	r3, [r2, #88]	@ 0x58
 800a226:	4b3e      	ldr	r3, [pc, #248]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a22a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a22e:	60bb      	str	r3, [r7, #8]
 800a230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a232:	2301      	movs	r3, #1
 800a234:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a236:	4b3b      	ldr	r3, [pc, #236]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a3a      	ldr	r2, [pc, #232]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a23c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a240:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a242:	f7fc fd4f 	bl	8006ce4 <HAL_GetTick>
 800a246:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a248:	e009      	b.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a24a:	f7fc fd4b 	bl	8006ce4 <HAL_GetTick>
 800a24e:	4602      	mov	r2, r0
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	2b02      	cmp	r3, #2
 800a256:	d902      	bls.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800a258:	2303      	movs	r3, #3
 800a25a:	74fb      	strb	r3, [r7, #19]
        break;
 800a25c:	e005      	b.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a25e:	4b31      	ldr	r3, [pc, #196]	@ (800a324 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a266:	2b00      	cmp	r3, #0
 800a268:	d0ef      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800a26a:	7cfb      	ldrb	r3, [r7, #19]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d15b      	bne.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a270:	4b2b      	ldr	r3, [pc, #172]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a27a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d01f      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a288:	697a      	ldr	r2, [r7, #20]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d019      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a28e:	4b24      	ldr	r3, [pc, #144]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a298:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a29a:	4b21      	ldr	r3, [pc, #132]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a29c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2a0:	4a1f      	ldr	r2, [pc, #124]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a2a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a2a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a2aa:	4b1d      	ldr	r3, [pc, #116]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a2ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2b0:	4a1b      	ldr	r2, [pc, #108]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a2b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a2b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a2ba:	4a19      	ldr	r2, [pc, #100]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	f003 0301 	and.w	r3, r3, #1
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d016      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2cc:	f7fc fd0a 	bl	8006ce4 <HAL_GetTick>
 800a2d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a2d2:	e00b      	b.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2d4:	f7fc fd06 	bl	8006ce4 <HAL_GetTick>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d902      	bls.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	74fb      	strb	r3, [r7, #19]
            break;
 800a2ea:	e006      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a2ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a2ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2f2:	f003 0302 	and.w	r3, r3, #2
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d0ec      	beq.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800a2fa:	7cfb      	ldrb	r3, [r7, #19]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10c      	bne.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a300:	4b07      	ldr	r3, [pc, #28]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a306:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a310:	4903      	ldr	r1, [pc, #12]	@ (800a320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a312:	4313      	orrs	r3, r2
 800a314:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a318:	e008      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a31a:	7cfb      	ldrb	r3, [r7, #19]
 800a31c:	74bb      	strb	r3, [r7, #18]
 800a31e:	e005      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x274>
 800a320:	40021000 	.word	0x40021000
 800a324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a328:	7cfb      	ldrb	r3, [r7, #19]
 800a32a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a32c:	7c7b      	ldrb	r3, [r7, #17]
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d105      	bne.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a332:	4ba0      	ldr	r3, [pc, #640]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a336:	4a9f      	ldr	r2, [pc, #636]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a33c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00a      	beq.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a34a:	4b9a      	ldr	r3, [pc, #616]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a34c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a350:	f023 0203 	bic.w	r2, r3, #3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a358:	4996      	ldr	r1, [pc, #600]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a35a:	4313      	orrs	r3, r2
 800a35c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 0302 	and.w	r3, r3, #2
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00a      	beq.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a36c:	4b91      	ldr	r3, [pc, #580]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a36e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a372:	f023 020c 	bic.w	r2, r3, #12
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a37a:	498e      	ldr	r1, [pc, #568]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a37c:	4313      	orrs	r3, r2
 800a37e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0304 	and.w	r3, r3, #4
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00a      	beq.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a38e:	4b89      	ldr	r3, [pc, #548]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a394:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a39c:	4985      	ldr	r1, [pc, #532]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 0308 	and.w	r3, r3, #8
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d00a      	beq.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a3b0:	4b80      	ldr	r3, [pc, #512]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3be:	497d      	ldr	r1, [pc, #500]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 0310 	and.w	r3, r3, #16
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00a      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a3d2:	4b78      	ldr	r3, [pc, #480]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3e0:	4974      	ldr	r1, [pc, #464]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 0320 	and.w	r3, r3, #32
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00a      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a3f4:	4b6f      	ldr	r3, [pc, #444]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a402:	496c      	ldr	r1, [pc, #432]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a404:	4313      	orrs	r3, r2
 800a406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00a      	beq.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a416:	4b67      	ldr	r3, [pc, #412]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a41c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a424:	4963      	ldr	r1, [pc, #396]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a426:	4313      	orrs	r3, r2
 800a428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00a      	beq.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a438:	4b5e      	ldr	r3, [pc, #376]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a43a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a43e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a446:	495b      	ldr	r1, [pc, #364]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a448:	4313      	orrs	r3, r2
 800a44a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00a      	beq.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a45a:	4b56      	ldr	r3, [pc, #344]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a45c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a460:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a468:	4952      	ldr	r1, [pc, #328]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a46a:	4313      	orrs	r3, r2
 800a46c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00a      	beq.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a47c:	4b4d      	ldr	r3, [pc, #308]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a47e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a482:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a48a:	494a      	ldr	r1, [pc, #296]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a48c:	4313      	orrs	r3, r2
 800a48e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00a      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a49e:	4b45      	ldr	r3, [pc, #276]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a4a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4ac:	4941      	ldr	r1, [pc, #260]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00a      	beq.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a4c0:	4b3c      	ldr	r3, [pc, #240]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a4c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a4c6:	f023 0203 	bic.w	r2, r3, #3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4ce:	4939      	ldr	r1, [pc, #228]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d028      	beq.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a4e2:	4b34      	ldr	r3, [pc, #208]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a4e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4f0:	4930      	ldr	r1, [pc, #192]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a500:	d106      	bne.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a502:	4b2c      	ldr	r3, [pc, #176]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	4a2b      	ldr	r2, [pc, #172]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a508:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a50c:	60d3      	str	r3, [r2, #12]
 800a50e:	e011      	b.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a514:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a518:	d10c      	bne.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	3304      	adds	r3, #4
 800a51e:	2101      	movs	r1, #1
 800a520:	4618      	mov	r0, r3
 800a522:	f001 f82b 	bl	800b57c <RCCEx_PLLSAI1_Config>
 800a526:	4603      	mov	r3, r0
 800a528:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a52a:	7cfb      	ldrb	r3, [r7, #19]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d001      	beq.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800a530:	7cfb      	ldrb	r3, [r7, #19]
 800a532:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d04d      	beq.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a548:	d108      	bne.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800a54a:	4b1a      	ldr	r3, [pc, #104]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a54c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a550:	4a18      	ldr	r2, [pc, #96]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a552:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a556:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800a55a:	e012      	b.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a55c:	4b15      	ldr	r3, [pc, #84]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a55e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a562:	4a14      	ldr	r2, [pc, #80]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a564:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a568:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800a56c:	4b11      	ldr	r3, [pc, #68]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a56e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a572:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a57a:	490e      	ldr	r1, [pc, #56]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a57c:	4313      	orrs	r3, r2
 800a57e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a586:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a58a:	d106      	bne.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a58c:	4b09      	ldr	r3, [pc, #36]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	4a08      	ldr	r2, [pc, #32]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a596:	60d3      	str	r3, [r2, #12]
 800a598:	e020      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a59e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a5a2:	d109      	bne.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a5a4:	4b03      	ldr	r3, [pc, #12]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	4a02      	ldr	r2, [pc, #8]	@ (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a5aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5ae:	60d3      	str	r3, [r2, #12]
 800a5b0:	e014      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a5b2:	bf00      	nop
 800a5b4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a5c0:	d10c      	bne.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	3304      	adds	r3, #4
 800a5c6:	2101      	movs	r1, #1
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 ffd7 	bl	800b57c <RCCEx_PLLSAI1_Config>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a5d2:	7cfb      	ldrb	r3, [r7, #19]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d001      	beq.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800a5d8:	7cfb      	ldrb	r3, [r7, #19]
 800a5da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d028      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a5e8:	4b4a      	ldr	r3, [pc, #296]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5f6:	4947      	ldr	r1, [pc, #284]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a602:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a606:	d106      	bne.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a608:	4b42      	ldr	r3, [pc, #264]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	4a41      	ldr	r2, [pc, #260]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a60e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a612:	60d3      	str	r3, [r2, #12]
 800a614:	e011      	b.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a61a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a61e:	d10c      	bne.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	3304      	adds	r3, #4
 800a624:	2101      	movs	r1, #1
 800a626:	4618      	mov	r0, r3
 800a628:	f000 ffa8 	bl	800b57c <RCCEx_PLLSAI1_Config>
 800a62c:	4603      	mov	r3, r0
 800a62e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a630:	7cfb      	ldrb	r3, [r7, #19]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d001      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800a636:	7cfb      	ldrb	r3, [r7, #19]
 800a638:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a642:	2b00      	cmp	r3, #0
 800a644:	d01e      	beq.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a646:	4b33      	ldr	r3, [pc, #204]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a64c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a656:	492f      	ldr	r1, [pc, #188]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a658:	4313      	orrs	r3, r2
 800a65a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a664:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a668:	d10c      	bne.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	3304      	adds	r3, #4
 800a66e:	2102      	movs	r1, #2
 800a670:	4618      	mov	r0, r3
 800a672:	f000 ff83 	bl	800b57c <RCCEx_PLLSAI1_Config>
 800a676:	4603      	mov	r3, r0
 800a678:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a67a:	7cfb      	ldrb	r3, [r7, #19]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d001      	beq.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800a680:	7cfb      	ldrb	r3, [r7, #19]
 800a682:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00b      	beq.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a690:	4b20      	ldr	r3, [pc, #128]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a692:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a696:	f023 0204 	bic.w	r2, r3, #4
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6a0:	491c      	ldr	r1, [pc, #112]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00b      	beq.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a6b4:	4b17      	ldr	r3, [pc, #92]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a6ba:	f023 0218 	bic.w	r2, r3, #24
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6c4:	4913      	ldr	r1, [pc, #76]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d017      	beq.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a6d8:	4b0e      	ldr	r3, [pc, #56]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a6de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6e8:	490a      	ldr	r1, [pc, #40]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a6fa:	d105      	bne.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a6fc:	4b05      	ldr	r3, [pc, #20]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	4a04      	ldr	r2, [pc, #16]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a706:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a708:	7cbb      	ldrb	r3, [r7, #18]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3718      	adds	r7, #24
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	40021000 	.word	0x40021000

0800a718 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b088      	sub	sp, #32
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800a720:	2300      	movs	r3, #0
 800a722:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a72a:	d13e      	bne.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a72c:	4bb6      	ldr	r3, [pc, #728]	@ (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a736:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a73e:	d028      	beq.n	800a792 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a746:	f200 86f4 	bhi.w	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a750:	d005      	beq.n	800a75e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a758:	d00e      	beq.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800a75a:	f000 beea 	b.w	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a75e:	4baa      	ldr	r3, [pc, #680]	@ (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a764:	f003 0302 	and.w	r3, r3, #2
 800a768:	2b02      	cmp	r3, #2
 800a76a:	f040 86e4 	bne.w	800b536 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800a76e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a772:	61fb      	str	r3, [r7, #28]
      break;
 800a774:	f000 bedf 	b.w	800b536 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a778:	4ba3      	ldr	r3, [pc, #652]	@ (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a77a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a77e:	f003 0302 	and.w	r3, r3, #2
 800a782:	2b02      	cmp	r3, #2
 800a784:	f040 86d9 	bne.w	800b53a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 800a788:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a78c:	61fb      	str	r3, [r7, #28]
      break;
 800a78e:	f000 bed4 	b.w	800b53a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a792:	4b9d      	ldr	r3, [pc, #628]	@ (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a79a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a79e:	f040 86ce 	bne.w	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800a7a2:	4b9a      	ldr	r3, [pc, #616]	@ (800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800a7a4:	61fb      	str	r3, [r7, #28]
      break;
 800a7a6:	f000 beca 	b.w	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a7aa:	4b97      	ldr	r3, [pc, #604]	@ (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	f003 0303 	and.w	r3, r3, #3
 800a7b2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	2b03      	cmp	r3, #3
 800a7b8:	d036      	beq.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	2b03      	cmp	r3, #3
 800a7be:	d840      	bhi.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d003      	beq.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d020      	beq.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800a7cc:	e039      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a7ce:	4b8e      	ldr	r3, [pc, #568]	@ (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f003 0302 	and.w	r3, r3, #2
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d116      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a7da:	4b8b      	ldr	r3, [pc, #556]	@ (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 0308 	and.w	r3, r3, #8
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d005      	beq.n	800a7f2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800a7e6:	4b88      	ldr	r3, [pc, #544]	@ (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	091b      	lsrs	r3, r3, #4
 800a7ec:	f003 030f 	and.w	r3, r3, #15
 800a7f0:	e005      	b.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800a7f2:	4b85      	ldr	r3, [pc, #532]	@ (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a7f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7f8:	0a1b      	lsrs	r3, r3, #8
 800a7fa:	f003 030f 	and.w	r3, r3, #15
 800a7fe:	4a84      	ldr	r2, [pc, #528]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a804:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a806:	e01f      	b.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a808:	2300      	movs	r3, #0
 800a80a:	61bb      	str	r3, [r7, #24]
      break;
 800a80c:	e01c      	b.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a80e:	4b7e      	ldr	r3, [pc, #504]	@ (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a81a:	d102      	bne.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800a81c:	4b7d      	ldr	r3, [pc, #500]	@ (800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800a81e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a820:	e012      	b.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a822:	2300      	movs	r3, #0
 800a824:	61bb      	str	r3, [r7, #24]
      break;
 800a826:	e00f      	b.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a828:	4b77      	ldr	r3, [pc, #476]	@ (800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a830:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a834:	d102      	bne.n	800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800a836:	4b78      	ldr	r3, [pc, #480]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800a838:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a83a:	e005      	b.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a83c:	2300      	movs	r3, #0
 800a83e:	61bb      	str	r3, [r7, #24]
      break;
 800a840:	e002      	b.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800a842:	2300      	movs	r3, #0
 800a844:	61bb      	str	r3, [r7, #24]
      break;
 800a846:	bf00      	nop
    }

    switch(PeriphClk)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a84e:	f000 8606 	beq.w	800b45e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a858:	f200 8673 	bhi.w	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a862:	f000 8469 	beq.w	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a86c:	f200 8669 	bhi.w	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a876:	f000 8531 	beq.w	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a880:	f200 865f 	bhi.w	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a88a:	f000 8187 	beq.w	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a894:	f200 8655 	bhi.w	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a89e:	f000 80cd 	beq.w	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a8a8:	f200 864b 	bhi.w	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8b2:	f000 8430 	beq.w	800b116 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8bc:	f200 8641 	bhi.w	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8c6:	f000 83e4 	beq.w	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8d0:	f200 8637 	bhi.w	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8da:	f000 80af 	beq.w	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8e4:	f200 862d 	bhi.w	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8ee:	f000 809d 	beq.w	800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8f8:	f200 8623 	bhi.w	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a902:	f000 808b 	beq.w	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a90c:	f200 8619 	bhi.w	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a916:	f000 8554 	beq.w	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a920:	f200 860f 	bhi.w	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a92a:	f000 8500 	beq.w	800b32e <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a934:	f200 8605 	bhi.w	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a93e:	f000 84a1 	beq.w	800b284 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a948:	f200 85fb 	bhi.w	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2b80      	cmp	r3, #128	@ 0x80
 800a950:	f000 846c 	beq.w	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b80      	cmp	r3, #128	@ 0x80
 800a958:	f200 85f3 	bhi.w	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b20      	cmp	r3, #32
 800a960:	d84c      	bhi.n	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 85ec 	beq.w	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	3b01      	subs	r3, #1
 800a96e:	2b1f      	cmp	r3, #31
 800a970:	f200 85e7 	bhi.w	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a974:	a201      	add	r2, pc, #4	@ (adr r2, 800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800a976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97a:	bf00      	nop
 800a97c:	0800ad91 	.word	0x0800ad91
 800a980:	0800adff 	.word	0x0800adff
 800a984:	0800b543 	.word	0x0800b543
 800a988:	0800ae93 	.word	0x0800ae93
 800a98c:	0800b543 	.word	0x0800b543
 800a990:	0800b543 	.word	0x0800b543
 800a994:	0800b543 	.word	0x0800b543
 800a998:	0800af0b 	.word	0x0800af0b
 800a99c:	0800b543 	.word	0x0800b543
 800a9a0:	0800b543 	.word	0x0800b543
 800a9a4:	0800b543 	.word	0x0800b543
 800a9a8:	0800b543 	.word	0x0800b543
 800a9ac:	0800b543 	.word	0x0800b543
 800a9b0:	0800b543 	.word	0x0800b543
 800a9b4:	0800b543 	.word	0x0800b543
 800a9b8:	0800af8f 	.word	0x0800af8f
 800a9bc:	0800b543 	.word	0x0800b543
 800a9c0:	0800b543 	.word	0x0800b543
 800a9c4:	0800b543 	.word	0x0800b543
 800a9c8:	0800b543 	.word	0x0800b543
 800a9cc:	0800b543 	.word	0x0800b543
 800a9d0:	0800b543 	.word	0x0800b543
 800a9d4:	0800b543 	.word	0x0800b543
 800a9d8:	0800b543 	.word	0x0800b543
 800a9dc:	0800b543 	.word	0x0800b543
 800a9e0:	0800b543 	.word	0x0800b543
 800a9e4:	0800b543 	.word	0x0800b543
 800a9e8:	0800b543 	.word	0x0800b543
 800a9ec:	0800b543 	.word	0x0800b543
 800a9f0:	0800b543 	.word	0x0800b543
 800a9f4:	0800b543 	.word	0x0800b543
 800a9f8:	0800b011 	.word	0x0800b011
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b40      	cmp	r3, #64	@ 0x40
 800aa00:	f000 83e8 	beq.w	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800aa04:	f000 bd9d 	b.w	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800aa08:	40021000 	.word	0x40021000
 800aa0c:	0003d090 	.word	0x0003d090
 800aa10:	080182e8 	.word	0x080182e8
 800aa14:	00f42400 	.word	0x00f42400
 800aa18:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800aa1c:	69b9      	ldr	r1, [r7, #24]
 800aa1e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800aa22:	f000 ff93 	bl	800b94c <RCCEx_GetSAIxPeriphCLKFreq>
 800aa26:	61f8      	str	r0, [r7, #28]
      break;
 800aa28:	f000 bd8e 	b.w	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800aa2c:	69b9      	ldr	r1, [r7, #24]
 800aa2e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800aa32:	f000 ff8b 	bl	800b94c <RCCEx_GetSAIxPeriphCLKFreq>
 800aa36:	61f8      	str	r0, [r7, #28]
      break;
 800aa38:	f000 bd86 	b.w	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800aa3c:	4b9a      	ldr	r3, [pc, #616]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa42:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800aa46:	60fb      	str	r3, [r7, #12]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800aa4e:	d015      	beq.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800aa56:	f200 8092 	bhi.w	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa60:	d029      	beq.n	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa68:	f200 8089 	bhi.w	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d07b      	beq.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aa78:	d04a      	beq.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800aa7a:	e080      	b.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800aa7c:	4b8a      	ldr	r3, [pc, #552]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0302 	and.w	r3, r3, #2
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d17d      	bne.n	800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800aa88:	4b87      	ldr	r3, [pc, #540]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 0308 	and.w	r3, r3, #8
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d005      	beq.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800aa94:	4b84      	ldr	r3, [pc, #528]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	091b      	lsrs	r3, r3, #4
 800aa9a:	f003 030f 	and.w	r3, r3, #15
 800aa9e:	e005      	b.n	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800aaa0:	4b81      	ldr	r3, [pc, #516]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aaa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aaa6:	0a1b      	lsrs	r3, r3, #8
 800aaa8:	f003 030f 	and.w	r3, r3, #15
 800aaac:	4a7f      	ldr	r2, [pc, #508]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800aaae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aab2:	61fb      	str	r3, [r7, #28]
          break;
 800aab4:	e066      	b.n	800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800aab6:	4b7c      	ldr	r3, [pc, #496]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aabe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aac2:	d162      	bne.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800aac4:	4b78      	ldr	r3, [pc, #480]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aacc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aad0:	d15b      	bne.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800aad2:	4b75      	ldr	r3, [pc, #468]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	0a1b      	lsrs	r3, r3, #8
 800aad8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aadc:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	fb03 f202 	mul.w	r2, r3, r2
 800aae6:	4b70      	ldr	r3, [pc, #448]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	091b      	lsrs	r3, r3, #4
 800aaec:	f003 030f 	and.w	r3, r3, #15
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaf6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800aaf8:	4b6b      	ldr	r3, [pc, #428]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	0d5b      	lsrs	r3, r3, #21
 800aafe:	f003 0303 	and.w	r3, r3, #3
 800ab02:	3301      	adds	r3, #1
 800ab04:	005b      	lsls	r3, r3, #1
 800ab06:	69ba      	ldr	r2, [r7, #24]
 800ab08:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab0c:	61fb      	str	r3, [r7, #28]
          break;
 800ab0e:	e03c      	b.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800ab10:	4b65      	ldr	r3, [pc, #404]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab1c:	d138      	bne.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800ab1e:	4b62      	ldr	r3, [pc, #392]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab2a:	d131      	bne.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ab2c:	4b5e      	ldr	r3, [pc, #376]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	0a1b      	lsrs	r3, r3, #8
 800ab32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab36:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800ab38:	69bb      	ldr	r3, [r7, #24]
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	fb03 f202 	mul.w	r2, r3, r2
 800ab40:	4b59      	ldr	r3, [pc, #356]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	091b      	lsrs	r3, r3, #4
 800ab46:	f003 030f 	and.w	r3, r3, #15
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab50:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800ab52:	4b55      	ldr	r3, [pc, #340]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	0d5b      	lsrs	r3, r3, #21
 800ab58:	f003 0303 	and.w	r3, r3, #3
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	005b      	lsls	r3, r3, #1
 800ab60:	69ba      	ldr	r2, [r7, #24]
 800ab62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab66:	61fb      	str	r3, [r7, #28]
          break;
 800ab68:	e012      	b.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800ab6a:	4b4f      	ldr	r3, [pc, #316]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ab6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ab70:	f003 0302 	and.w	r3, r3, #2
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d10e      	bne.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 800ab78:	4b4d      	ldr	r3, [pc, #308]	@ (800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800ab7a:	61fb      	str	r3, [r7, #28]
          break;
 800ab7c:	e00b      	b.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800ab7e:	bf00      	nop
 800ab80:	f000 bce2 	b.w	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ab84:	bf00      	nop
 800ab86:	f000 bcdf 	b.w	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ab8a:	bf00      	nop
 800ab8c:	f000 bcdc 	b.w	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ab90:	bf00      	nop
 800ab92:	f000 bcd9 	b.w	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ab96:	bf00      	nop
        break;
 800ab98:	f000 bcd6 	b.w	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800ab9c:	4b42      	ldr	r3, [pc, #264]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ab9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aba6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abaa:	d13d      	bne.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800abac:	4b3e      	ldr	r3, [pc, #248]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800abb8:	f040 84c5 	bne.w	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800abbc:	4b3a      	ldr	r3, [pc, #232]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800abc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abc8:	f040 84bd 	bne.w	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800abcc:	4b36      	ldr	r3, [pc, #216]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	0a1b      	lsrs	r3, r3, #8
 800abd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abd6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	68ba      	ldr	r2, [r7, #8]
 800abdc:	fb03 f202 	mul.w	r2, r3, r2
 800abe0:	4b31      	ldr	r3, [pc, #196]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	091b      	lsrs	r3, r3, #4
 800abe6:	f003 030f 	and.w	r3, r3, #15
 800abea:	3301      	adds	r3, #1
 800abec:	fbb2 f3f3 	udiv	r3, r2, r3
 800abf0:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800abf2:	4b2d      	ldr	r3, [pc, #180]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	0edb      	lsrs	r3, r3, #27
 800abf8:	f003 031f 	and.w	r3, r3, #31
 800abfc:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10a      	bne.n	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800ac04:	4b28      	ldr	r3, [pc, #160]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d002      	beq.n	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800ac10:	2311      	movs	r3, #17
 800ac12:	617b      	str	r3, [r7, #20]
 800ac14:	e001      	b.n	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800ac16:	2307      	movs	r3, #7
 800ac18:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800ac1a:	69ba      	ldr	r2, [r7, #24]
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac22:	61fb      	str	r3, [r7, #28]
      break;
 800ac24:	f000 bc8f 	b.w	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800ac28:	4b1f      	ldr	r3, [pc, #124]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ac2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac2e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800ac32:	60fb      	str	r3, [r7, #12]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ac3a:	d016      	beq.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ac42:	f200 809b 	bhi.w	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac4c:	d032      	beq.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac54:	f200 8092 	bhi.w	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f000 8084 	beq.w	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ac66:	d052      	beq.n	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800ac68:	e088      	b.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800ac6a:	4b0f      	ldr	r3, [pc, #60]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f003 0302 	and.w	r3, r3, #2
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	f040 8084 	bne.w	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800ac78:	4b0b      	ldr	r3, [pc, #44]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 0308 	and.w	r3, r3, #8
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d005      	beq.n	800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800ac84:	4b08      	ldr	r3, [pc, #32]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	091b      	lsrs	r3, r3, #4
 800ac8a:	f003 030f 	and.w	r3, r3, #15
 800ac8e:	e005      	b.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800ac90:	4b05      	ldr	r3, [pc, #20]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ac92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac96:	0a1b      	lsrs	r3, r3, #8
 800ac98:	f003 030f 	and.w	r3, r3, #15
 800ac9c:	4a03      	ldr	r2, [pc, #12]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ac9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aca2:	61fb      	str	r3, [r7, #28]
          break;
 800aca4:	e06c      	b.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800aca6:	bf00      	nop
 800aca8:	40021000 	.word	0x40021000
 800acac:	080182e8 	.word	0x080182e8
 800acb0:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800acb4:	4ba5      	ldr	r3, [pc, #660]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800acbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800acc0:	d160      	bne.n	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800acc2:	4ba2      	ldr	r3, [pc, #648]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800acca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acce:	d159      	bne.n	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800acd0:	4b9e      	ldr	r3, [pc, #632]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	0a1b      	lsrs	r3, r3, #8
 800acd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acda:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	68ba      	ldr	r2, [r7, #8]
 800ace0:	fb03 f202 	mul.w	r2, r3, r2
 800ace4:	4b99      	ldr	r3, [pc, #612]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	091b      	lsrs	r3, r3, #4
 800acea:	f003 030f 	and.w	r3, r3, #15
 800acee:	3301      	adds	r3, #1
 800acf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800acf4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800acf6:	4b95      	ldr	r3, [pc, #596]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	0d5b      	lsrs	r3, r3, #21
 800acfc:	f003 0303 	and.w	r3, r3, #3
 800ad00:	3301      	adds	r3, #1
 800ad02:	005b      	lsls	r3, r3, #1
 800ad04:	69ba      	ldr	r2, [r7, #24]
 800ad06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad0a:	61fb      	str	r3, [r7, #28]
          break;
 800ad0c:	e03a      	b.n	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800ad0e:	4b8f      	ldr	r3, [pc, #572]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad1a:	d135      	bne.n	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800ad1c:	4b8b      	ldr	r3, [pc, #556]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ad1e:	691b      	ldr	r3, [r3, #16]
 800ad20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad28:	d12e      	bne.n	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ad2a:	4b88      	ldr	r3, [pc, #544]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	0a1b      	lsrs	r3, r3, #8
 800ad30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad34:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	68ba      	ldr	r2, [r7, #8]
 800ad3a:	fb03 f202 	mul.w	r2, r3, r2
 800ad3e:	4b83      	ldr	r3, [pc, #524]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	091b      	lsrs	r3, r3, #4
 800ad44:	f003 030f 	and.w	r3, r3, #15
 800ad48:	3301      	adds	r3, #1
 800ad4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad4e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800ad50:	4b7e      	ldr	r3, [pc, #504]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	0d5b      	lsrs	r3, r3, #21
 800ad56:	f003 0303 	and.w	r3, r3, #3
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	005b      	lsls	r3, r3, #1
 800ad5e:	69ba      	ldr	r2, [r7, #24]
 800ad60:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad64:	61fb      	str	r3, [r7, #28]
          break;
 800ad66:	e00f      	b.n	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800ad68:	4b78      	ldr	r3, [pc, #480]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ad6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ad6e:	f003 0302 	and.w	r3, r3, #2
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	d10a      	bne.n	800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800ad76:	4b76      	ldr	r3, [pc, #472]	@ (800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800ad78:	61fb      	str	r3, [r7, #28]
          break;
 800ad7a:	e007      	b.n	800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800ad7c:	bf00      	nop
 800ad7e:	e3e2      	b.n	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800ad80:	bf00      	nop
 800ad82:	e3e0      	b.n	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800ad84:	bf00      	nop
 800ad86:	e3de      	b.n	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800ad88:	bf00      	nop
 800ad8a:	e3dc      	b.n	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800ad8c:	bf00      	nop
      break;
 800ad8e:	e3da      	b.n	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800ad90:	4b6e      	ldr	r3, [pc, #440]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ad92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad96:	f003 0303 	and.w	r3, r3, #3
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2b03      	cmp	r3, #3
 800ada0:	d827      	bhi.n	800adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800ada2:	a201      	add	r2, pc, #4	@ (adr r2, 800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800ada4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada8:	0800adb9 	.word	0x0800adb9
 800adac:	0800adc1 	.word	0x0800adc1
 800adb0:	0800adc9 	.word	0x0800adc9
 800adb4:	0800addd 	.word	0x0800addd
          frequency = HAL_RCC_GetPCLK2Freq();
 800adb8:	f7ff f8a8 	bl	8009f0c <HAL_RCC_GetPCLK2Freq>
 800adbc:	61f8      	str	r0, [r7, #28]
          break;
 800adbe:	e01d      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800adc0:	f7fe fff6 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 800adc4:	61f8      	str	r0, [r7, #28]
          break;
 800adc6:	e019      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800adc8:	4b60      	ldr	r3, [pc, #384]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800add0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800add4:	d10f      	bne.n	800adf6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800add6:	4b5f      	ldr	r3, [pc, #380]	@ (800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800add8:	61fb      	str	r3, [r7, #28]
          break;
 800adda:	e00c      	b.n	800adf6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800addc:	4b5b      	ldr	r3, [pc, #364]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800adde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ade2:	f003 0302 	and.w	r3, r3, #2
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d107      	bne.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800adea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adee:	61fb      	str	r3, [r7, #28]
          break;
 800adf0:	e003      	b.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800adf2:	bf00      	nop
 800adf4:	e3a8      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800adf6:	bf00      	nop
 800adf8:	e3a6      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800adfa:	bf00      	nop
        break;
 800adfc:	e3a4      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800adfe:	4b53      	ldr	r3, [pc, #332]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ae00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae04:	f003 030c 	and.w	r3, r3, #12
 800ae08:	60fb      	str	r3, [r7, #12]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2b0c      	cmp	r3, #12
 800ae0e:	d83a      	bhi.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ae10:	a201      	add	r2, pc, #4	@ (adr r2, 800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800ae12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae16:	bf00      	nop
 800ae18:	0800ae4d 	.word	0x0800ae4d
 800ae1c:	0800ae87 	.word	0x0800ae87
 800ae20:	0800ae87 	.word	0x0800ae87
 800ae24:	0800ae87 	.word	0x0800ae87
 800ae28:	0800ae55 	.word	0x0800ae55
 800ae2c:	0800ae87 	.word	0x0800ae87
 800ae30:	0800ae87 	.word	0x0800ae87
 800ae34:	0800ae87 	.word	0x0800ae87
 800ae38:	0800ae5d 	.word	0x0800ae5d
 800ae3c:	0800ae87 	.word	0x0800ae87
 800ae40:	0800ae87 	.word	0x0800ae87
 800ae44:	0800ae87 	.word	0x0800ae87
 800ae48:	0800ae71 	.word	0x0800ae71
          frequency = HAL_RCC_GetPCLK1Freq();
 800ae4c:	f7ff f848 	bl	8009ee0 <HAL_RCC_GetPCLK1Freq>
 800ae50:	61f8      	str	r0, [r7, #28]
          break;
 800ae52:	e01d      	b.n	800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800ae54:	f7fe ffac 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 800ae58:	61f8      	str	r0, [r7, #28]
          break;
 800ae5a:	e019      	b.n	800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae5c:	4b3b      	ldr	r3, [pc, #236]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae68:	d10f      	bne.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800ae6a:	4b3a      	ldr	r3, [pc, #232]	@ (800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ae6c:	61fb      	str	r3, [r7, #28]
          break;
 800ae6e:	e00c      	b.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ae70:	4b36      	ldr	r3, [pc, #216]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ae72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae76:	f003 0302 	and.w	r3, r3, #2
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d107      	bne.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800ae7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae82:	61fb      	str	r3, [r7, #28]
          break;
 800ae84:	e003      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800ae86:	bf00      	nop
 800ae88:	e35e      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ae8a:	bf00      	nop
 800ae8c:	e35c      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ae8e:	bf00      	nop
        break;
 800ae90:	e35a      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800ae92:	4b2e      	ldr	r3, [pc, #184]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ae94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ae9c:	60fb      	str	r3, [r7, #12]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2b30      	cmp	r3, #48	@ 0x30
 800aea2:	d021      	beq.n	800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2b30      	cmp	r3, #48	@ 0x30
 800aea8:	d829      	bhi.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2b20      	cmp	r3, #32
 800aeae:	d011      	beq.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2b20      	cmp	r3, #32
 800aeb4:	d823      	bhi.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d003      	beq.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2b10      	cmp	r3, #16
 800aec0:	d004      	beq.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800aec2:	e01c      	b.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800aec4:	f7ff f80c 	bl	8009ee0 <HAL_RCC_GetPCLK1Freq>
 800aec8:	61f8      	str	r0, [r7, #28]
          break;
 800aeca:	e01d      	b.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800aecc:	f7fe ff70 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 800aed0:	61f8      	str	r0, [r7, #28]
          break;
 800aed2:	e019      	b.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aed4:	4b1d      	ldr	r3, [pc, #116]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aedc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aee0:	d10f      	bne.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800aee2:	4b1c      	ldr	r3, [pc, #112]	@ (800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aee4:	61fb      	str	r3, [r7, #28]
          break;
 800aee6:	e00c      	b.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800aee8:	4b18      	ldr	r3, [pc, #96]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aeea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeee:	f003 0302 	and.w	r3, r3, #2
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	d107      	bne.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 800aef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aefa:	61fb      	str	r3, [r7, #28]
          break;
 800aefc:	e003      	b.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800aefe:	bf00      	nop
 800af00:	e322      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800af02:	bf00      	nop
 800af04:	e320      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800af06:	bf00      	nop
        break;
 800af08:	e31e      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800af0a:	4b10      	ldr	r3, [pc, #64]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800af0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af10:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800af14:	60fb      	str	r3, [r7, #12]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2bc0      	cmp	r3, #192	@ 0xc0
 800af1a:	d027      	beq.n	800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2bc0      	cmp	r3, #192	@ 0xc0
 800af20:	d82f      	bhi.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2b80      	cmp	r3, #128	@ 0x80
 800af26:	d017      	beq.n	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2b80      	cmp	r3, #128	@ 0x80
 800af2c:	d829      	bhi.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d003      	beq.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2b40      	cmp	r3, #64	@ 0x40
 800af38:	d004      	beq.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800af3a:	e022      	b.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800af3c:	f7fe ffd0 	bl	8009ee0 <HAL_RCC_GetPCLK1Freq>
 800af40:	61f8      	str	r0, [r7, #28]
          break;
 800af42:	e023      	b.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 800af44:	f7fe ff34 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 800af48:	61f8      	str	r0, [r7, #28]
          break;
 800af4a:	e01f      	b.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800af4c:	40021000 	.word	0x40021000
 800af50:	02dc6c00 	.word	0x02dc6c00
 800af54:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af58:	4b9b      	ldr	r3, [pc, #620]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af64:	d10f      	bne.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800af66:	4b99      	ldr	r3, [pc, #612]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800af68:	61fb      	str	r3, [r7, #28]
          break;
 800af6a:	e00c      	b.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800af6c:	4b96      	ldr	r3, [pc, #600]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af72:	f003 0302 	and.w	r3, r3, #2
 800af76:	2b02      	cmp	r3, #2
 800af78:	d107      	bne.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800af7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af7e:	61fb      	str	r3, [r7, #28]
          break;
 800af80:	e003      	b.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800af82:	bf00      	nop
 800af84:	e2e0      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800af86:	bf00      	nop
 800af88:	e2de      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800af8a:	bf00      	nop
        break;
 800af8c:	e2dc      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800af8e:	4b8e      	ldr	r3, [pc, #568]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800af90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af98:	60fb      	str	r3, [r7, #12]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800afa0:	d025      	beq.n	800afee <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800afa8:	d82c      	bhi.n	800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afb0:	d013      	beq.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afb8:	d824      	bhi.n	800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d004      	beq.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afc6:	d004      	beq.n	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800afc8:	e01c      	b.n	800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800afca:	f7fe ff89 	bl	8009ee0 <HAL_RCC_GetPCLK1Freq>
 800afce:	61f8      	str	r0, [r7, #28]
          break;
 800afd0:	e01d      	b.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800afd2:	f7fe feed 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 800afd6:	61f8      	str	r0, [r7, #28]
          break;
 800afd8:	e019      	b.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800afda:	4b7b      	ldr	r3, [pc, #492]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afe6:	d10f      	bne.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800afe8:	4b78      	ldr	r3, [pc, #480]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800afea:	61fb      	str	r3, [r7, #28]
          break;
 800afec:	e00c      	b.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800afee:	4b76      	ldr	r3, [pc, #472]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aff4:	f003 0302 	and.w	r3, r3, #2
 800aff8:	2b02      	cmp	r3, #2
 800affa:	d107      	bne.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 800affc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b000:	61fb      	str	r3, [r7, #28]
          break;
 800b002:	e003      	b.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 800b004:	bf00      	nop
 800b006:	e29f      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b008:	bf00      	nop
 800b00a:	e29d      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b00c:	bf00      	nop
        break;
 800b00e:	e29b      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b010:	4b6d      	ldr	r3, [pc, #436]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b016:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b01a:	60fb      	str	r3, [r7, #12]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b022:	d025      	beq.n	800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b02a:	d82c      	bhi.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b032:	d013      	beq.n	800b05c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b03a:	d824      	bhi.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d004      	beq.n	800b04c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b048:	d004      	beq.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800b04a:	e01c      	b.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b04c:	f7fe ff48 	bl	8009ee0 <HAL_RCC_GetPCLK1Freq>
 800b050:	61f8      	str	r0, [r7, #28]
          break;
 800b052:	e01d      	b.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800b054:	f7fe feac 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 800b058:	61f8      	str	r0, [r7, #28]
          break;
 800b05a:	e019      	b.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b05c:	4b5a      	ldr	r3, [pc, #360]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b068:	d10f      	bne.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800b06a:	4b58      	ldr	r3, [pc, #352]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800b06c:	61fb      	str	r3, [r7, #28]
          break;
 800b06e:	e00c      	b.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b070:	4b55      	ldr	r3, [pc, #340]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b076:	f003 0302 	and.w	r3, r3, #2
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d107      	bne.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800b07e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b082:	61fb      	str	r3, [r7, #28]
          break;
 800b084:	e003      	b.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800b086:	bf00      	nop
 800b088:	e25e      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b08a:	bf00      	nop
 800b08c:	e25c      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b08e:	bf00      	nop
        break;
 800b090:	e25a      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b092:	4b4d      	ldr	r3, [pc, #308]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b098:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b09c:	60fb      	str	r3, [r7, #12]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0a4:	d007      	beq.n	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b0ac:	d12f      	bne.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800b0ae:	f7fe fe7f 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 800b0b2:	61f8      	str	r0, [r7, #28]
          break;
 800b0b4:	e02e      	b.n	800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800b0b6:	4b44      	ldr	r3, [pc, #272]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0c2:	d126      	bne.n	800b112 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800b0c4:	4b40      	ldr	r3, [pc, #256]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d020      	beq.n	800b112 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b0d0:	4b3d      	ldr	r3, [pc, #244]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	0a1b      	lsrs	r3, r3, #8
 800b0d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0da:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	68ba      	ldr	r2, [r7, #8]
 800b0e0:	fb03 f202 	mul.w	r2, r3, r2
 800b0e4:	4b38      	ldr	r3, [pc, #224]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	091b      	lsrs	r3, r3, #4
 800b0ea:	f003 030f 	and.w	r3, r3, #15
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0f4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800b0f6:	4b34      	ldr	r3, [pc, #208]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	0e5b      	lsrs	r3, r3, #25
 800b0fc:	f003 0303 	and.w	r3, r3, #3
 800b100:	3301      	adds	r3, #1
 800b102:	005b      	lsls	r3, r3, #1
 800b104:	69ba      	ldr	r2, [r7, #24]
 800b106:	fbb2 f3f3 	udiv	r3, r2, r3
 800b10a:	61fb      	str	r3, [r7, #28]
          break;
 800b10c:	e001      	b.n	800b112 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800b10e:	bf00      	nop
 800b110:	e21a      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b112:	bf00      	nop
        break;
 800b114:	e218      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800b116:	4b2c      	ldr	r3, [pc, #176]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b118:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b11c:	f003 0304 	and.w	r3, r3, #4
 800b120:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d103      	bne.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800b128:	f7fe fef0 	bl	8009f0c <HAL_RCC_GetPCLK2Freq>
 800b12c:	61f8      	str	r0, [r7, #28]
        break;
 800b12e:	e20b      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 800b130:	f7fe fe3e 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 800b134:	61f8      	str	r0, [r7, #28]
        break;
 800b136:	e207      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800b138:	4b23      	ldr	r3, [pc, #140]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b13a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b13e:	f003 0318 	and.w	r3, r3, #24
 800b142:	60fb      	str	r3, [r7, #12]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2b10      	cmp	r3, #16
 800b148:	d010      	beq.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2b10      	cmp	r3, #16
 800b14e:	d834      	bhi.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d003      	beq.n	800b15e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2b08      	cmp	r3, #8
 800b15a:	d024      	beq.n	800b1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800b15c:	e02d      	b.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800b15e:	69b9      	ldr	r1, [r7, #24]
 800b160:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b164:	f000 fbf2 	bl	800b94c <RCCEx_GetSAIxPeriphCLKFreq>
 800b168:	61f8      	str	r0, [r7, #28]
          break;
 800b16a:	e02b      	b.n	800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b16c:	4b16      	ldr	r3, [pc, #88]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f003 0302 	and.w	r3, r3, #2
 800b174:	2b02      	cmp	r3, #2
 800b176:	d122      	bne.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800b178:	4b13      	ldr	r3, [pc, #76]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 0308 	and.w	r3, r3, #8
 800b180:	2b00      	cmp	r3, #0
 800b182:	d005      	beq.n	800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800b184:	4b10      	ldr	r3, [pc, #64]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	091b      	lsrs	r3, r3, #4
 800b18a:	f003 030f 	and.w	r3, r3, #15
 800b18e:	e005      	b.n	800b19c <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800b190:	4b0d      	ldr	r3, [pc, #52]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b196:	0a1b      	lsrs	r3, r3, #8
 800b198:	f003 030f 	and.w	r3, r3, #15
 800b19c:	4a0c      	ldr	r2, [pc, #48]	@ (800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800b19e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1a2:	61fb      	str	r3, [r7, #28]
          break;
 800b1a4:	e00b      	b.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b1a6:	4b08      	ldr	r3, [pc, #32]	@ (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b1ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1b2:	d106      	bne.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800b1b4:	4b05      	ldr	r3, [pc, #20]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800b1b6:	61fb      	str	r3, [r7, #28]
          break;
 800b1b8:	e003      	b.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800b1ba:	bf00      	nop
 800b1bc:	e1c4      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b1be:	bf00      	nop
 800b1c0:	e1c2      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b1c2:	bf00      	nop
        break;
 800b1c4:	e1c0      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800b1c6:	bf00      	nop
 800b1c8:	40021000 	.word	0x40021000
 800b1cc:	00f42400 	.word	0x00f42400
 800b1d0:	080182e8 	.word	0x080182e8
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b1d4:	4b96      	ldr	r3, [pc, #600]	@ (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b1d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1da:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b1de:	60fb      	str	r3, [r7, #12]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1e6:	d013      	beq.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1ee:	d819      	bhi.n	800b224 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d004      	beq.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1fc:	d004      	beq.n	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800b1fe:	e011      	b.n	800b224 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b200:	f7fe fe6e 	bl	8009ee0 <HAL_RCC_GetPCLK1Freq>
 800b204:	61f8      	str	r0, [r7, #28]
          break;
 800b206:	e010      	b.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 800b208:	f7fe fdd2 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 800b20c:	61f8      	str	r0, [r7, #28]
          break;
 800b20e:	e00c      	b.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b210:	4b87      	ldr	r3, [pc, #540]	@ (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b21c:	d104      	bne.n	800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800b21e:	4b85      	ldr	r3, [pc, #532]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b220:	61fb      	str	r3, [r7, #28]
          break;
 800b222:	e001      	b.n	800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 800b224:	bf00      	nop
 800b226:	e18f      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b228:	bf00      	nop
        break;
 800b22a:	e18d      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800b22c:	4b80      	ldr	r3, [pc, #512]	@ (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b22e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b232:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b236:	60fb      	str	r3, [r7, #12]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b23e:	d013      	beq.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b246:	d819      	bhi.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d004      	beq.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b254:	d004      	beq.n	800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800b256:	e011      	b.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b258:	f7fe fe42 	bl	8009ee0 <HAL_RCC_GetPCLK1Freq>
 800b25c:	61f8      	str	r0, [r7, #28]
          break;
 800b25e:	e010      	b.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800b260:	f7fe fda6 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 800b264:	61f8      	str	r0, [r7, #28]
          break;
 800b266:	e00c      	b.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b268:	4b71      	ldr	r3, [pc, #452]	@ (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b274:	d104      	bne.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800b276:	4b6f      	ldr	r3, [pc, #444]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b278:	61fb      	str	r3, [r7, #28]
          break;
 800b27a:	e001      	b.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800b27c:	bf00      	nop
 800b27e:	e163      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b280:	bf00      	nop
        break;
 800b282:	e161      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b284:	4b6a      	ldr	r3, [pc, #424]	@ (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b28a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b28e:	60fb      	str	r3, [r7, #12]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b296:	d013      	beq.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b29e:	d819      	bhi.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d004      	beq.n	800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2ac:	d004      	beq.n	800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800b2ae:	e011      	b.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b2b0:	f7fe fe16 	bl	8009ee0 <HAL_RCC_GetPCLK1Freq>
 800b2b4:	61f8      	str	r0, [r7, #28]
          break;
 800b2b6:	e010      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800b2b8:	f7fe fd7a 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 800b2bc:	61f8      	str	r0, [r7, #28]
          break;
 800b2be:	e00c      	b.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b2c0:	4b5b      	ldr	r3, [pc, #364]	@ (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2cc:	d104      	bne.n	800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800b2ce:	4b59      	ldr	r3, [pc, #356]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b2d0:	61fb      	str	r3, [r7, #28]
          break;
 800b2d2:	e001      	b.n	800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800b2d4:	bf00      	nop
 800b2d6:	e137      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b2d8:	bf00      	nop
        break;
 800b2da:	e135      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b2dc:	4b54      	ldr	r3, [pc, #336]	@ (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b2de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b2e2:	f003 0303 	and.w	r3, r3, #3
 800b2e6:	60fb      	str	r3, [r7, #12]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d011      	beq.n	800b312 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d818      	bhi.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d003      	beq.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d004      	beq.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800b300:	e011      	b.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b302:	f7fe fded 	bl	8009ee0 <HAL_RCC_GetPCLK1Freq>
 800b306:	61f8      	str	r0, [r7, #28]
          break;
 800b308:	e010      	b.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800b30a:	f7fe fd51 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 800b30e:	61f8      	str	r0, [r7, #28]
          break;
 800b310:	e00c      	b.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b312:	4b47      	ldr	r3, [pc, #284]	@ (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b31a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b31e:	d104      	bne.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800b320:	4b44      	ldr	r3, [pc, #272]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b322:	61fb      	str	r3, [r7, #28]
          break;
 800b324:	e001      	b.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800b326:	bf00      	nop
 800b328:	e10e      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b32a:	bf00      	nop
        break;
 800b32c:	e10c      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b32e:	4b40      	ldr	r3, [pc, #256]	@ (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b334:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800b338:	60fb      	str	r3, [r7, #12]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b340:	d02c      	beq.n	800b39c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b348:	d833      	bhi.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b350:	d01a      	beq.n	800b388 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b358:	d82b      	bhi.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d004      	beq.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b366:	d004      	beq.n	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800b368:	e023      	b.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b36a:	f7fe fdb9 	bl	8009ee0 <HAL_RCC_GetPCLK1Freq>
 800b36e:	61f8      	str	r0, [r7, #28]
          break;
 800b370:	e026      	b.n	800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b372:	4b2f      	ldr	r3, [pc, #188]	@ (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b378:	f003 0302 	and.w	r3, r3, #2
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d11a      	bne.n	800b3b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800b380:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b384:	61fb      	str	r3, [r7, #28]
          break;
 800b386:	e016      	b.n	800b3b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b388:	4b29      	ldr	r3, [pc, #164]	@ (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b394:	d111      	bne.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800b396:	4b27      	ldr	r3, [pc, #156]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b398:	61fb      	str	r3, [r7, #28]
          break;
 800b39a:	e00e      	b.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b39c:	4b24      	ldr	r3, [pc, #144]	@ (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b39e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3a2:	f003 0302 	and.w	r3, r3, #2
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d109      	bne.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800b3aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3ae:	61fb      	str	r3, [r7, #28]
          break;
 800b3b0:	e005      	b.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800b3b2:	bf00      	nop
 800b3b4:	e0c8      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b3b6:	bf00      	nop
 800b3b8:	e0c6      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b3ba:	bf00      	nop
 800b3bc:	e0c4      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b3be:	bf00      	nop
        break;
 800b3c0:	e0c2      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b3c2:	4b1b      	ldr	r3, [pc, #108]	@ (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b3c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3c8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b3cc:	60fb      	str	r3, [r7, #12]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b3d4:	d030      	beq.n	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b3dc:	d837      	bhi.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b3e4:	d01a      	beq.n	800b41c <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b3ec:	d82f      	bhi.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d004      	beq.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3fa:	d004      	beq.n	800b406 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800b3fc:	e027      	b.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b3fe:	f7fe fd6f 	bl	8009ee0 <HAL_RCC_GetPCLK1Freq>
 800b402:	61f8      	str	r0, [r7, #28]
          break;
 800b404:	e02a      	b.n	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b406:	4b0a      	ldr	r3, [pc, #40]	@ (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b408:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b40c:	f003 0302 	and.w	r3, r3, #2
 800b410:	2b02      	cmp	r3, #2
 800b412:	d11e      	bne.n	800b452 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 800b414:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b418:	61fb      	str	r3, [r7, #28]
          break;
 800b41a:	e01a      	b.n	800b452 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b41c:	4b04      	ldr	r3, [pc, #16]	@ (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b428:	d115      	bne.n	800b456 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800b42a:	4b02      	ldr	r3, [pc, #8]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b42c:	61fb      	str	r3, [r7, #28]
          break;
 800b42e:	e012      	b.n	800b456 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800b430:	40021000 	.word	0x40021000
 800b434:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b438:	4b46      	ldr	r3, [pc, #280]	@ (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b43a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b43e:	f003 0302 	and.w	r3, r3, #2
 800b442:	2b02      	cmp	r3, #2
 800b444:	d109      	bne.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800b446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b44a:	61fb      	str	r3, [r7, #28]
          break;
 800b44c:	e005      	b.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800b44e:	bf00      	nop
 800b450:	e07a      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b452:	bf00      	nop
 800b454:	e078      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b456:	bf00      	nop
 800b458:	e076      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b45a:	bf00      	nop
        break;
 800b45c:	e074      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b45e:	4b3d      	ldr	r3, [pc, #244]	@ (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b460:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b464:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b468:	60fb      	str	r3, [r7, #12]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b470:	d02c      	beq.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b478:	d855      	bhi.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d004      	beq.n	800b48a <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b486:	d004      	beq.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800b488:	e04d      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800b48a:	f7fe fc91 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 800b48e:	61f8      	str	r0, [r7, #28]
          break;
 800b490:	e04e      	b.n	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b492:	4b30      	ldr	r3, [pc, #192]	@ (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 0302 	and.w	r3, r3, #2
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	d145      	bne.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800b49e:	4b2d      	ldr	r3, [pc, #180]	@ (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f003 0308 	and.w	r3, r3, #8
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d005      	beq.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800b4aa:	4b2a      	ldr	r3, [pc, #168]	@ (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	091b      	lsrs	r3, r3, #4
 800b4b0:	f003 030f 	and.w	r3, r3, #15
 800b4b4:	e005      	b.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800b4b6:	4b27      	ldr	r3, [pc, #156]	@ (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b4b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b4bc:	0a1b      	lsrs	r3, r3, #8
 800b4be:	f003 030f 	and.w	r3, r3, #15
 800b4c2:	4a25      	ldr	r2, [pc, #148]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800b4c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4c8:	61fb      	str	r3, [r7, #28]
          break;
 800b4ca:	e02e      	b.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800b4cc:	4b21      	ldr	r3, [pc, #132]	@ (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4d8:	d129      	bne.n	800b52e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800b4da:	4b1e      	ldr	r3, [pc, #120]	@ (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b4e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4e6:	d122      	bne.n	800b52e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b4e8:	4b1a      	ldr	r3, [pc, #104]	@ (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	0a1b      	lsrs	r3, r3, #8
 800b4ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4f2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	68ba      	ldr	r2, [r7, #8]
 800b4f8:	fb03 f202 	mul.w	r2, r3, r2
 800b4fc:	4b15      	ldr	r3, [pc, #84]	@ (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	091b      	lsrs	r3, r3, #4
 800b502:	f003 030f 	and.w	r3, r3, #15
 800b506:	3301      	adds	r3, #1
 800b508:	fbb2 f3f3 	udiv	r3, r2, r3
 800b50c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800b50e:	4b11      	ldr	r3, [pc, #68]	@ (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	0d5b      	lsrs	r3, r3, #21
 800b514:	f003 0303 	and.w	r3, r3, #3
 800b518:	3301      	adds	r3, #1
 800b51a:	005b      	lsls	r3, r3, #1
 800b51c:	69ba      	ldr	r2, [r7, #24]
 800b51e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b522:	61fb      	str	r3, [r7, #28]
          break;
 800b524:	e003      	b.n	800b52e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800b526:	bf00      	nop
 800b528:	e00e      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b52a:	bf00      	nop
 800b52c:	e00c      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b52e:	bf00      	nop
        break;
 800b530:	e00a      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b532:	bf00      	nop
 800b534:	e008      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b536:	bf00      	nop
 800b538:	e006      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b53a:	bf00      	nop
 800b53c:	e004      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b53e:	bf00      	nop
 800b540:	e002      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b542:	bf00      	nop
 800b544:	e000      	b.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b546:	bf00      	nop
    }
  }

  return(frequency);
 800b548:	69fb      	ldr	r3, [r7, #28]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3720      	adds	r7, #32
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	40021000 	.word	0x40021000
 800b558:	080182e8 	.word	0x080182e8

0800b55c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800b55c:	b480      	push	{r7}
 800b55e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800b560:	4b05      	ldr	r3, [pc, #20]	@ (800b578 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a04      	ldr	r2, [pc, #16]	@ (800b578 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800b566:	f043 0304 	orr.w	r3, r3, #4
 800b56a:	6013      	str	r3, [r2, #0]
}
 800b56c:	bf00      	nop
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	40021000 	.word	0x40021000

0800b57c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b586:	2300      	movs	r3, #0
 800b588:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b58a:	4b72      	ldr	r3, [pc, #456]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	f003 0303 	and.w	r3, r3, #3
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00e      	beq.n	800b5b4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b596:	4b6f      	ldr	r3, [pc, #444]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	f003 0203 	and.w	r2, r3, #3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d103      	bne.n	800b5ae <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
       ||
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d142      	bne.n	800b634 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	73fb      	strb	r3, [r7, #15]
 800b5b2:	e03f      	b.n	800b634 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2b03      	cmp	r3, #3
 800b5ba:	d018      	beq.n	800b5ee <RCCEx_PLLSAI1_Config+0x72>
 800b5bc:	2b03      	cmp	r3, #3
 800b5be:	d825      	bhi.n	800b60c <RCCEx_PLLSAI1_Config+0x90>
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d002      	beq.n	800b5ca <RCCEx_PLLSAI1_Config+0x4e>
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d009      	beq.n	800b5dc <RCCEx_PLLSAI1_Config+0x60>
 800b5c8:	e020      	b.n	800b60c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b5ca:	4b62      	ldr	r3, [pc, #392]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f003 0302 	and.w	r3, r3, #2
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d11d      	bne.n	800b612 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b5da:	e01a      	b.n	800b612 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b5dc:	4b5d      	ldr	r3, [pc, #372]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d116      	bne.n	800b616 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b5ec:	e013      	b.n	800b616 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b5ee:	4b59      	ldr	r3, [pc, #356]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d10f      	bne.n	800b61a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b5fa:	4b56      	ldr	r3, [pc, #344]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b602:	2b00      	cmp	r3, #0
 800b604:	d109      	bne.n	800b61a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800b606:	2301      	movs	r3, #1
 800b608:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b60a:	e006      	b.n	800b61a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	73fb      	strb	r3, [r7, #15]
      break;
 800b610:	e004      	b.n	800b61c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b612:	bf00      	nop
 800b614:	e002      	b.n	800b61c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b616:	bf00      	nop
 800b618:	e000      	b.n	800b61c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b61a:	bf00      	nop
    }

    if(status == HAL_OK)
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d108      	bne.n	800b634 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800b622:	4b4c      	ldr	r3, [pc, #304]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	f023 0203 	bic.w	r2, r3, #3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4949      	ldr	r1, [pc, #292]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b630:	4313      	orrs	r3, r2
 800b632:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b634:	7bfb      	ldrb	r3, [r7, #15]
 800b636:	2b00      	cmp	r3, #0
 800b638:	f040 8086 	bne.w	800b748 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b63c:	4b45      	ldr	r3, [pc, #276]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a44      	ldr	r2, [pc, #272]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b642:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b648:	f7fb fb4c 	bl	8006ce4 <HAL_GetTick>
 800b64c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b64e:	e009      	b.n	800b664 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b650:	f7fb fb48 	bl	8006ce4 <HAL_GetTick>
 800b654:	4602      	mov	r2, r0
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	1ad3      	subs	r3, r2, r3
 800b65a:	2b02      	cmp	r3, #2
 800b65c:	d902      	bls.n	800b664 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b65e:	2303      	movs	r3, #3
 800b660:	73fb      	strb	r3, [r7, #15]
        break;
 800b662:	e005      	b.n	800b670 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b664:	4b3b      	ldr	r3, [pc, #236]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1ef      	bne.n	800b650 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b670:	7bfb      	ldrb	r3, [r7, #15]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d168      	bne.n	800b748 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d113      	bne.n	800b6a4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b67c:	4b35      	ldr	r3, [pc, #212]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b67e:	691a      	ldr	r2, [r3, #16]
 800b680:	4b35      	ldr	r3, [pc, #212]	@ (800b758 <RCCEx_PLLSAI1_Config+0x1dc>)
 800b682:	4013      	ands	r3, r2
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	6892      	ldr	r2, [r2, #8]
 800b688:	0211      	lsls	r1, r2, #8
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	68d2      	ldr	r2, [r2, #12]
 800b68e:	06d2      	lsls	r2, r2, #27
 800b690:	4311      	orrs	r1, r2
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	6852      	ldr	r2, [r2, #4]
 800b696:	3a01      	subs	r2, #1
 800b698:	0112      	lsls	r2, r2, #4
 800b69a:	430a      	orrs	r2, r1
 800b69c:	492d      	ldr	r1, [pc, #180]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	610b      	str	r3, [r1, #16]
 800b6a2:	e02d      	b.n	800b700 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d115      	bne.n	800b6d6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b6aa:	4b2a      	ldr	r3, [pc, #168]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b6ac:	691a      	ldr	r2, [r3, #16]
 800b6ae:	4b2b      	ldr	r3, [pc, #172]	@ (800b75c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b6b0:	4013      	ands	r3, r2
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	6892      	ldr	r2, [r2, #8]
 800b6b6:	0211      	lsls	r1, r2, #8
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	6912      	ldr	r2, [r2, #16]
 800b6bc:	0852      	lsrs	r2, r2, #1
 800b6be:	3a01      	subs	r2, #1
 800b6c0:	0552      	lsls	r2, r2, #21
 800b6c2:	4311      	orrs	r1, r2
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	6852      	ldr	r2, [r2, #4]
 800b6c8:	3a01      	subs	r2, #1
 800b6ca:	0112      	lsls	r2, r2, #4
 800b6cc:	430a      	orrs	r2, r1
 800b6ce:	4921      	ldr	r1, [pc, #132]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	610b      	str	r3, [r1, #16]
 800b6d4:	e014      	b.n	800b700 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b6d6:	4b1f      	ldr	r3, [pc, #124]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b6d8:	691a      	ldr	r2, [r3, #16]
 800b6da:	4b21      	ldr	r3, [pc, #132]	@ (800b760 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b6dc:	4013      	ands	r3, r2
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	6892      	ldr	r2, [r2, #8]
 800b6e2:	0211      	lsls	r1, r2, #8
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	6952      	ldr	r2, [r2, #20]
 800b6e8:	0852      	lsrs	r2, r2, #1
 800b6ea:	3a01      	subs	r2, #1
 800b6ec:	0652      	lsls	r2, r2, #25
 800b6ee:	4311      	orrs	r1, r2
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	6852      	ldr	r2, [r2, #4]
 800b6f4:	3a01      	subs	r2, #1
 800b6f6:	0112      	lsls	r2, r2, #4
 800b6f8:	430a      	orrs	r2, r1
 800b6fa:	4916      	ldr	r1, [pc, #88]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b700:	4b14      	ldr	r3, [pc, #80]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a13      	ldr	r2, [pc, #76]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b706:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b70a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b70c:	f7fb faea 	bl	8006ce4 <HAL_GetTick>
 800b710:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b712:	e009      	b.n	800b728 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b714:	f7fb fae6 	bl	8006ce4 <HAL_GetTick>
 800b718:	4602      	mov	r2, r0
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	1ad3      	subs	r3, r2, r3
 800b71e:	2b02      	cmp	r3, #2
 800b720:	d902      	bls.n	800b728 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b722:	2303      	movs	r3, #3
 800b724:	73fb      	strb	r3, [r7, #15]
          break;
 800b726:	e005      	b.n	800b734 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b728:	4b0a      	ldr	r3, [pc, #40]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b730:	2b00      	cmp	r3, #0
 800b732:	d0ef      	beq.n	800b714 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b734:	7bfb      	ldrb	r3, [r7, #15]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d106      	bne.n	800b748 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b73a:	4b06      	ldr	r3, [pc, #24]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b73c:	691a      	ldr	r2, [r3, #16]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	699b      	ldr	r3, [r3, #24]
 800b742:	4904      	ldr	r1, [pc, #16]	@ (800b754 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b744:	4313      	orrs	r3, r2
 800b746:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b748:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	40021000 	.word	0x40021000
 800b758:	07ff800f 	.word	0x07ff800f
 800b75c:	ff9f800f 	.word	0xff9f800f
 800b760:	f9ff800f 	.word	0xf9ff800f

0800b764 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b772:	4b72      	ldr	r3, [pc, #456]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	f003 0303 	and.w	r3, r3, #3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d00e      	beq.n	800b79c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b77e:	4b6f      	ldr	r3, [pc, #444]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	f003 0203 	and.w	r2, r3, #3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d103      	bne.n	800b796 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
       ||
 800b792:	2b00      	cmp	r3, #0
 800b794:	d142      	bne.n	800b81c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800b796:	2301      	movs	r3, #1
 800b798:	73fb      	strb	r3, [r7, #15]
 800b79a:	e03f      	b.n	800b81c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b03      	cmp	r3, #3
 800b7a2:	d018      	beq.n	800b7d6 <RCCEx_PLLSAI2_Config+0x72>
 800b7a4:	2b03      	cmp	r3, #3
 800b7a6:	d825      	bhi.n	800b7f4 <RCCEx_PLLSAI2_Config+0x90>
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d002      	beq.n	800b7b2 <RCCEx_PLLSAI2_Config+0x4e>
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	d009      	beq.n	800b7c4 <RCCEx_PLLSAI2_Config+0x60>
 800b7b0:	e020      	b.n	800b7f4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b7b2:	4b62      	ldr	r3, [pc, #392]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f003 0302 	and.w	r3, r3, #2
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d11d      	bne.n	800b7fa <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b7c2:	e01a      	b.n	800b7fa <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b7c4:	4b5d      	ldr	r3, [pc, #372]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d116      	bne.n	800b7fe <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b7d4:	e013      	b.n	800b7fe <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b7d6:	4b59      	ldr	r3, [pc, #356]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d10f      	bne.n	800b802 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b7e2:	4b56      	ldr	r3, [pc, #344]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d109      	bne.n	800b802 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b7f2:	e006      	b.n	800b802 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b7f8:	e004      	b.n	800b804 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b7fa:	bf00      	nop
 800b7fc:	e002      	b.n	800b804 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b7fe:	bf00      	nop
 800b800:	e000      	b.n	800b804 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b802:	bf00      	nop
    }

    if(status == HAL_OK)
 800b804:	7bfb      	ldrb	r3, [r7, #15]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d108      	bne.n	800b81c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800b80a:	4b4c      	ldr	r3, [pc, #304]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	f023 0203 	bic.w	r2, r3, #3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4949      	ldr	r1, [pc, #292]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b818:	4313      	orrs	r3, r2
 800b81a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b81c:	7bfb      	ldrb	r3, [r7, #15]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f040 8086 	bne.w	800b930 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b824:	4b45      	ldr	r3, [pc, #276]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a44      	ldr	r2, [pc, #272]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b82a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b82e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b830:	f7fb fa58 	bl	8006ce4 <HAL_GetTick>
 800b834:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b836:	e009      	b.n	800b84c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b838:	f7fb fa54 	bl	8006ce4 <HAL_GetTick>
 800b83c:	4602      	mov	r2, r0
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	1ad3      	subs	r3, r2, r3
 800b842:	2b02      	cmp	r3, #2
 800b844:	d902      	bls.n	800b84c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b846:	2303      	movs	r3, #3
 800b848:	73fb      	strb	r3, [r7, #15]
        break;
 800b84a:	e005      	b.n	800b858 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b84c:	4b3b      	ldr	r3, [pc, #236]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b854:	2b00      	cmp	r3, #0
 800b856:	d1ef      	bne.n	800b838 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b858:	7bfb      	ldrb	r3, [r7, #15]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d168      	bne.n	800b930 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d113      	bne.n	800b88c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b864:	4b35      	ldr	r3, [pc, #212]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b866:	695a      	ldr	r2, [r3, #20]
 800b868:	4b35      	ldr	r3, [pc, #212]	@ (800b940 <RCCEx_PLLSAI2_Config+0x1dc>)
 800b86a:	4013      	ands	r3, r2
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	6892      	ldr	r2, [r2, #8]
 800b870:	0211      	lsls	r1, r2, #8
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	68d2      	ldr	r2, [r2, #12]
 800b876:	06d2      	lsls	r2, r2, #27
 800b878:	4311      	orrs	r1, r2
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	6852      	ldr	r2, [r2, #4]
 800b87e:	3a01      	subs	r2, #1
 800b880:	0112      	lsls	r2, r2, #4
 800b882:	430a      	orrs	r2, r1
 800b884:	492d      	ldr	r1, [pc, #180]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b886:	4313      	orrs	r3, r2
 800b888:	614b      	str	r3, [r1, #20]
 800b88a:	e02d      	b.n	800b8e8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d115      	bne.n	800b8be <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b892:	4b2a      	ldr	r3, [pc, #168]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b894:	695a      	ldr	r2, [r3, #20]
 800b896:	4b2b      	ldr	r3, [pc, #172]	@ (800b944 <RCCEx_PLLSAI2_Config+0x1e0>)
 800b898:	4013      	ands	r3, r2
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	6892      	ldr	r2, [r2, #8]
 800b89e:	0211      	lsls	r1, r2, #8
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	6912      	ldr	r2, [r2, #16]
 800b8a4:	0852      	lsrs	r2, r2, #1
 800b8a6:	3a01      	subs	r2, #1
 800b8a8:	0552      	lsls	r2, r2, #21
 800b8aa:	4311      	orrs	r1, r2
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	6852      	ldr	r2, [r2, #4]
 800b8b0:	3a01      	subs	r2, #1
 800b8b2:	0112      	lsls	r2, r2, #4
 800b8b4:	430a      	orrs	r2, r1
 800b8b6:	4921      	ldr	r1, [pc, #132]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	614b      	str	r3, [r1, #20]
 800b8bc:	e014      	b.n	800b8e8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b8be:	4b1f      	ldr	r3, [pc, #124]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b8c0:	695a      	ldr	r2, [r3, #20]
 800b8c2:	4b21      	ldr	r3, [pc, #132]	@ (800b948 <RCCEx_PLLSAI2_Config+0x1e4>)
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	6892      	ldr	r2, [r2, #8]
 800b8ca:	0211      	lsls	r1, r2, #8
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	6952      	ldr	r2, [r2, #20]
 800b8d0:	0852      	lsrs	r2, r2, #1
 800b8d2:	3a01      	subs	r2, #1
 800b8d4:	0652      	lsls	r2, r2, #25
 800b8d6:	4311      	orrs	r1, r2
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	6852      	ldr	r2, [r2, #4]
 800b8dc:	3a01      	subs	r2, #1
 800b8de:	0112      	lsls	r2, r2, #4
 800b8e0:	430a      	orrs	r2, r1
 800b8e2:	4916      	ldr	r1, [pc, #88]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b8e8:	4b14      	ldr	r3, [pc, #80]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a13      	ldr	r2, [pc, #76]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b8ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8f4:	f7fb f9f6 	bl	8006ce4 <HAL_GetTick>
 800b8f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b8fa:	e009      	b.n	800b910 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b8fc:	f7fb f9f2 	bl	8006ce4 <HAL_GetTick>
 800b900:	4602      	mov	r2, r0
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	1ad3      	subs	r3, r2, r3
 800b906:	2b02      	cmp	r3, #2
 800b908:	d902      	bls.n	800b910 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b90a:	2303      	movs	r3, #3
 800b90c:	73fb      	strb	r3, [r7, #15]
          break;
 800b90e:	e005      	b.n	800b91c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b910:	4b0a      	ldr	r3, [pc, #40]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d0ef      	beq.n	800b8fc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d106      	bne.n	800b930 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b922:	4b06      	ldr	r3, [pc, #24]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b924:	695a      	ldr	r2, [r3, #20]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	699b      	ldr	r3, [r3, #24]
 800b92a:	4904      	ldr	r1, [pc, #16]	@ (800b93c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b92c:	4313      	orrs	r3, r2
 800b92e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b930:	7bfb      	ldrb	r3, [r7, #15]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	40021000 	.word	0x40021000
 800b940:	07ff800f 	.word	0x07ff800f
 800b944:	ff9f800f 	.word	0xff9f800f
 800b948:	f9ff800f 	.word	0xf9ff800f

0800b94c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b089      	sub	sp, #36	@ 0x24
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800b956:	2300      	movs	r3, #0
 800b958:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800b95a:	2300      	movs	r3, #0
 800b95c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800b95e:	2300      	movs	r3, #0
 800b960:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b968:	d10b      	bne.n	800b982 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b96a:	4b7e      	ldr	r3, [pc, #504]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b96c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b970:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800b974:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	2b60      	cmp	r3, #96	@ 0x60
 800b97a:	d112      	bne.n	800b9a2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b97c:	4b7a      	ldr	r3, [pc, #488]	@ (800bb68 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800b97e:	61fb      	str	r3, [r7, #28]
 800b980:	e00f      	b.n	800b9a2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b988:	d10b      	bne.n	800b9a2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b98a:	4b76      	ldr	r3, [pc, #472]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b98c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b990:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b994:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b99c:	d101      	bne.n	800b9a2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800b99e:	4b72      	ldr	r3, [pc, #456]	@ (800bb68 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800b9a0:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800b9a2:	69fb      	ldr	r3, [r7, #28]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	f040 80d6 	bne.w	800bb56 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	2b40      	cmp	r3, #64	@ 0x40
 800b9b2:	d003      	beq.n	800b9bc <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9ba:	d13b      	bne.n	800ba34 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b9bc:	4b69      	ldr	r3, [pc, #420]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b9c8:	f040 80c4 	bne.w	800bb54 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800b9cc:	4b65      	ldr	r3, [pc, #404]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f000 80bd 	beq.w	800bb54 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b9da:	4b62      	ldr	r3, [pc, #392]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	091b      	lsrs	r3, r3, #4
 800b9e0:	f003 030f 	and.w	r3, r3, #15
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	693a      	ldr	r2, [r7, #16]
 800b9e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9ec:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b9ee:	4b5d      	ldr	r3, [pc, #372]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	0a1b      	lsrs	r3, r3, #8
 800b9f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9f8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800b9fa:	4b5a      	ldr	r3, [pc, #360]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b9fc:	68db      	ldr	r3, [r3, #12]
 800b9fe:	0edb      	lsrs	r3, r3, #27
 800ba00:	f003 031f 	and.w	r3, r3, #31
 800ba04:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d10a      	bne.n	800ba22 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800ba0c:	4b55      	ldr	r3, [pc, #340]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800ba18:	2311      	movs	r3, #17
 800ba1a:	617b      	str	r3, [r7, #20]
 800ba1c:	e001      	b.n	800ba22 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800ba1e:	2307      	movs	r3, #7
 800ba20:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	fb03 f202 	mul.w	r2, r3, r2
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba30:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ba32:	e08f      	b.n	800bb54 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d13a      	bne.n	800bab0 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800ba3a:	4b4a      	ldr	r3, [pc, #296]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba46:	f040 8086 	bne.w	800bb56 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800ba4a:	4b46      	ldr	r3, [pc, #280]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ba4c:	691b      	ldr	r3, [r3, #16]
 800ba4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d07f      	beq.n	800bb56 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800ba56:	4b43      	ldr	r3, [pc, #268]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	091b      	lsrs	r3, r3, #4
 800ba5c:	f003 030f 	and.w	r3, r3, #15
 800ba60:	3301      	adds	r3, #1
 800ba62:	693a      	ldr	r2, [r7, #16]
 800ba64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba68:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ba6a:	4b3e      	ldr	r3, [pc, #248]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ba6c:	691b      	ldr	r3, [r3, #16]
 800ba6e:	0a1b      	lsrs	r3, r3, #8
 800ba70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba74:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800ba76:	4b3b      	ldr	r3, [pc, #236]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	0edb      	lsrs	r3, r3, #27
 800ba7c:	f003 031f 	and.w	r3, r3, #31
 800ba80:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d10a      	bne.n	800ba9e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800ba88:	4b36      	ldr	r3, [pc, #216]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800ba94:	2311      	movs	r3, #17
 800ba96:	617b      	str	r3, [r7, #20]
 800ba98:	e001      	b.n	800ba9e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800ba9a:	2307      	movs	r3, #7
 800ba9c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	fb03 f202 	mul.w	r2, r3, r2
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	fbb2 f3f3 	udiv	r3, r2, r3
 800baac:	61fb      	str	r3, [r7, #28]
 800baae:	e052      	b.n	800bb56 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800bab0:	69bb      	ldr	r3, [r7, #24]
 800bab2:	2b80      	cmp	r3, #128	@ 0x80
 800bab4:	d003      	beq.n	800babe <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800bab6:	69bb      	ldr	r3, [r7, #24]
 800bab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800babc:	d109      	bne.n	800bad2 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800babe:	4b29      	ldr	r3, [pc, #164]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800baca:	d144      	bne.n	800bb56 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800bacc:	4b27      	ldr	r3, [pc, #156]	@ (800bb6c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800bace:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bad0:	e041      	b.n	800bb56 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	2b20      	cmp	r3, #32
 800bad6:	d003      	beq.n	800bae0 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bade:	d13a      	bne.n	800bb56 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800bae0:	4b20      	ldr	r3, [pc, #128]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800baec:	d133      	bne.n	800bb56 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800baee:	4b1d      	ldr	r3, [pc, #116]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800baf0:	695b      	ldr	r3, [r3, #20]
 800baf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d02d      	beq.n	800bb56 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800bafa:	4b1a      	ldr	r3, [pc, #104]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800bafc:	695b      	ldr	r3, [r3, #20]
 800bafe:	091b      	lsrs	r3, r3, #4
 800bb00:	f003 030f 	and.w	r3, r3, #15
 800bb04:	3301      	adds	r3, #1
 800bb06:	693a      	ldr	r2, [r7, #16]
 800bb08:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb0c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800bb0e:	4b15      	ldr	r3, [pc, #84]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800bb10:	695b      	ldr	r3, [r3, #20]
 800bb12:	0a1b      	lsrs	r3, r3, #8
 800bb14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb18:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800bb1a:	4b12      	ldr	r3, [pc, #72]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800bb1c:	695b      	ldr	r3, [r3, #20]
 800bb1e:	0edb      	lsrs	r3, r3, #27
 800bb20:	f003 031f 	and.w	r3, r3, #31
 800bb24:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d10a      	bne.n	800bb42 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800bb2c:	4b0d      	ldr	r3, [pc, #52]	@ (800bb64 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800bb2e:	695b      	ldr	r3, [r3, #20]
 800bb30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d002      	beq.n	800bb3e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800bb38:	2311      	movs	r3, #17
 800bb3a:	617b      	str	r3, [r7, #20]
 800bb3c:	e001      	b.n	800bb42 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800bb3e:	2307      	movs	r3, #7
 800bb40:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	fb03 f202 	mul.w	r2, r3, r2
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb50:	61fb      	str	r3, [r7, #28]
 800bb52:	e000      	b.n	800bb56 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800bb54:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800bb56:	69fb      	ldr	r3, [r7, #28]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3724      	adds	r7, #36	@ 0x24
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr
 800bb64:	40021000 	.word	0x40021000
 800bb68:	001fff68 	.word	0x001fff68
 800bb6c:	00f42400 	.word	0x00f42400

0800bb70 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
 800bb7c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	2b02      	cmp	r3, #2
 800bb82:	d904      	bls.n	800bb8e <HAL_SAI_InitProtocol+0x1e>
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	3b03      	subs	r3, #3
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d812      	bhi.n	800bbb2 <HAL_SAI_InitProtocol+0x42>
 800bb8c:	e008      	b.n	800bba0 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	68b9      	ldr	r1, [r7, #8]
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f000 f9fb 	bl	800bf90 <SAI_InitI2S>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	75fb      	strb	r3, [r7, #23]
      break;
 800bb9e:	e00b      	b.n	800bbb8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	68b9      	ldr	r1, [r7, #8]
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f000 faa4 	bl	800c0f4 <SAI_InitPCM>
 800bbac:	4603      	mov	r3, r0
 800bbae:	75fb      	strb	r3, [r7, #23]
      break;
 800bbb0:	e002      	b.n	800bbb8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	75fb      	strb	r3, [r7, #23]
      break;
 800bbb6:	bf00      	nop
  }

  if (status == HAL_OK)
 800bbb8:	7dfb      	ldrb	r3, [r7, #23]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d104      	bne.n	800bbc8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f000 f808 	bl	800bbd4 <HAL_SAI_Init>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800bbc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3718      	adds	r7, #24
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
	...

0800bbd4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b08a      	sub	sp, #40	@ 0x28
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d101      	bne.n	800bbe6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e1c7      	b.n	800bf76 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d10e      	bne.n	800bc0e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a81      	ldr	r2, [pc, #516]	@ (800bdfc <HAL_SAI_Init+0x228>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d107      	bne.n	800bc0a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d103      	bne.n	800bc0a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d001      	beq.n	800bc0e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e1b3      	b.n	800bf76 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d106      	bne.n	800bc28 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7f8 fde6 	bl	80047f4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 fae5 	bl	800c1f8 <SAI_Disable>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d001      	beq.n	800bc38 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	e19e      	b.n	800bf76 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2202      	movs	r2, #2
 800bc3c:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	2b02      	cmp	r3, #2
 800bc46:	d00c      	beq.n	800bc62 <HAL_SAI_Init+0x8e>
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d80d      	bhi.n	800bc68 <HAL_SAI_Init+0x94>
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d002      	beq.n	800bc56 <HAL_SAI_Init+0x82>
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d003      	beq.n	800bc5c <HAL_SAI_Init+0x88>
 800bc54:	e008      	b.n	800bc68 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800bc56:	2300      	movs	r3, #0
 800bc58:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800bc5a:	e008      	b.n	800bc6e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800bc5c:	2310      	movs	r3, #16
 800bc5e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800bc60:	e005      	b.n	800bc6e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800bc62:	2320      	movs	r3, #32
 800bc64:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800bc66:	e002      	b.n	800bc6e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800bc6c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	689b      	ldr	r3, [r3, #8]
 800bc72:	2b03      	cmp	r3, #3
 800bc74:	d81d      	bhi.n	800bcb2 <HAL_SAI_Init+0xde>
 800bc76:	a201      	add	r2, pc, #4	@ (adr r2, 800bc7c <HAL_SAI_Init+0xa8>)
 800bc78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7c:	0800bc8d 	.word	0x0800bc8d
 800bc80:	0800bc93 	.word	0x0800bc93
 800bc84:	0800bc9b 	.word	0x0800bc9b
 800bc88:	0800bca3 	.word	0x0800bca3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	61fb      	str	r3, [r7, #28]
      break;
 800bc90:	e012      	b.n	800bcb8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800bc92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc96:	61fb      	str	r3, [r7, #28]
      break;
 800bc98:	e00e      	b.n	800bcb8 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bc9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bc9e:	61fb      	str	r3, [r7, #28]
      break;
 800bca0:	e00a      	b.n	800bcb8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bca2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bca6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800bca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcaa:	f043 0301 	orr.w	r3, r3, #1
 800bcae:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800bcb0:	e002      	b.n	800bcb8 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	61fb      	str	r3, [r7, #28]
      break;
 800bcb6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a4f      	ldr	r2, [pc, #316]	@ (800bdfc <HAL_SAI_Init+0x228>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d004      	beq.n	800bccc <HAL_SAI_Init+0xf8>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a4e      	ldr	r2, [pc, #312]	@ (800be00 <HAL_SAI_Init+0x22c>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d103      	bne.n	800bcd4 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800bccc:	4a4d      	ldr	r2, [pc, #308]	@ (800be04 <HAL_SAI_Init+0x230>)
 800bcce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd0:	6013      	str	r3, [r2, #0]
 800bcd2:	e002      	b.n	800bcda <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800bcd4:	4a4c      	ldr	r2, [pc, #304]	@ (800be08 <HAL_SAI_Init+0x234>)
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	69db      	ldr	r3, [r3, #28]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d073      	beq.n	800bdca <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a45      	ldr	r2, [pc, #276]	@ (800bdfc <HAL_SAI_Init+0x228>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d004      	beq.n	800bcf6 <HAL_SAI_Init+0x122>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a43      	ldr	r2, [pc, #268]	@ (800be00 <HAL_SAI_Init+0x22c>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d105      	bne.n	800bd02 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bcf6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800bcfa:	f7fe fd0d 	bl	800a718 <HAL_RCCEx_GetPeriphCLKFreq>
 800bcfe:	61b8      	str	r0, [r7, #24]
 800bd00:	e004      	b.n	800bd0c <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800bd02:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800bd06:	f7fe fd07 	bl	800a718 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd0a:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	695b      	ldr	r3, [r3, #20]
 800bd10:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800bd14:	d120      	bne.n	800bd58 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd1a:	2b04      	cmp	r3, #4
 800bd1c:	d102      	bne.n	800bd24 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800bd1e:	2340      	movs	r3, #64	@ 0x40
 800bd20:	613b      	str	r3, [r7, #16]
 800bd22:	e00a      	b.n	800bd3a <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd28:	2b08      	cmp	r3, #8
 800bd2a:	d103      	bne.n	800bd34 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800bd2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bd30:	613b      	str	r3, [r7, #16]
 800bd32:	e002      	b.n	800bd3a <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd38:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800bd3a:	69ba      	ldr	r2, [r7, #24]
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	4413      	add	r3, r2
 800bd42:	005b      	lsls	r3, r3, #1
 800bd44:	4619      	mov	r1, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	69db      	ldr	r3, [r3, #28]
 800bd4a:	693a      	ldr	r2, [r7, #16]
 800bd4c:	fb02 f303 	mul.w	r3, r2, r3
 800bd50:	fbb1 f3f3 	udiv	r3, r1, r3
 800bd54:	617b      	str	r3, [r7, #20]
 800bd56:	e017      	b.n	800bd88 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bd60:	d101      	bne.n	800bd66 <HAL_SAI_Init+0x192>
 800bd62:	2302      	movs	r3, #2
 800bd64:	e000      	b.n	800bd68 <HAL_SAI_Init+0x194>
 800bd66:	2301      	movs	r3, #1
 800bd68:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800bd6a:	69ba      	ldr	r2, [r7, #24]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	005b      	lsls	r3, r3, #1
 800bd74:	4619      	mov	r1, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	69db      	ldr	r3, [r3, #28]
 800bd7a:	68fa      	ldr	r2, [r7, #12]
 800bd7c:	fb02 f303 	mul.w	r3, r2, r3
 800bd80:	021b      	lsls	r3, r3, #8
 800bd82:	fbb1 f3f3 	udiv	r3, r1, r3
 800bd86:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	4a20      	ldr	r2, [pc, #128]	@ (800be0c <HAL_SAI_Init+0x238>)
 800bd8c:	fba2 2303 	umull	r2, r3, r2, r3
 800bd90:	08da      	lsrs	r2, r3, #3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800bd96:	6979      	ldr	r1, [r7, #20]
 800bd98:	4b1c      	ldr	r3, [pc, #112]	@ (800be0c <HAL_SAI_Init+0x238>)
 800bd9a:	fba3 2301 	umull	r2, r3, r3, r1
 800bd9e:	08da      	lsrs	r2, r3, #3
 800bda0:	4613      	mov	r3, r2
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	4413      	add	r3, r2
 800bda6:	005b      	lsls	r3, r3, #1
 800bda8:	1aca      	subs	r2, r1, r3
 800bdaa:	2a08      	cmp	r2, #8
 800bdac:	d904      	bls.n	800bdb8 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a1b      	ldr	r3, [r3, #32]
 800bdb2:	1c5a      	adds	r2, r3, #1
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdbc:	2b04      	cmp	r3, #4
 800bdbe:	d104      	bne.n	800bdca <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6a1b      	ldr	r3, [r3, #32]
 800bdc4:	085a      	lsrs	r2, r3, #1
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d003      	beq.n	800bdda <HAL_SAI_Init+0x206>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	d109      	bne.n	800bdee <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d101      	bne.n	800bde6 <HAL_SAI_Init+0x212>
 800bde2:	2300      	movs	r3, #0
 800bde4:	e001      	b.n	800bdea <HAL_SAI_Init+0x216>
 800bde6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bdea:	623b      	str	r3, [r7, #32]
 800bdec:	e012      	b.n	800be14 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d10c      	bne.n	800be10 <HAL_SAI_Init+0x23c>
 800bdf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bdfa:	e00a      	b.n	800be12 <HAL_SAI_Init+0x23e>
 800bdfc:	40015404 	.word	0x40015404
 800be00:	40015424 	.word	0x40015424
 800be04:	40015400 	.word	0x40015400
 800be08:	40015800 	.word	0x40015800
 800be0c:	cccccccd 	.word	0xcccccccd
 800be10:	2300      	movs	r3, #0
 800be12:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	6819      	ldr	r1, [r3, #0]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	4b58      	ldr	r3, [pc, #352]	@ (800bf80 <HAL_SAI_Init+0x3ac>)
 800be20:	400b      	ands	r3, r1
 800be22:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6819      	ldr	r1, [r3, #0]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	685a      	ldr	r2, [r3, #4]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be32:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800be38:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be3e:	431a      	orrs	r2, r3
 800be40:	6a3b      	ldr	r3, [r7, #32]
 800be42:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 800be4c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	691b      	ldr	r3, [r3, #16]
 800be52:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800be58:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a1b      	ldr	r3, [r3, #32]
 800be5e:	051b      	lsls	r3, r3, #20
 800be60:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800be66:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	430a      	orrs	r2, r1
 800be6e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	6812      	ldr	r2, [r2, #0]
 800be7a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800be7e:	f023 030f 	bic.w	r3, r3, #15
 800be82:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	6859      	ldr	r1, [r3, #4]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	699a      	ldr	r2, [r3, #24]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be92:	431a      	orrs	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be98:	431a      	orrs	r2, r3
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	430a      	orrs	r2, r1
 800bea0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	6899      	ldr	r1, [r3, #8]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	4b35      	ldr	r3, [pc, #212]	@ (800bf84 <HAL_SAI_Init+0x3b0>)
 800beae:	400b      	ands	r3, r1
 800beb0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	6899      	ldr	r1, [r3, #8]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bebc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bec2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 800bec8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 800bece:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bed4:	3b01      	subs	r3, #1
 800bed6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800bed8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	430a      	orrs	r2, r1
 800bee0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	68d9      	ldr	r1, [r3, #12]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800bef0:	400b      	ands	r3, r1
 800bef2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	68d9      	ldr	r1, [r3, #12]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf02:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf08:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bf0a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf10:	3b01      	subs	r3, #1
 800bf12:	021b      	lsls	r3, r3, #8
 800bf14:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	430a      	orrs	r2, r1
 800bf1c:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a19      	ldr	r2, [pc, #100]	@ (800bf88 <HAL_SAI_Init+0x3b4>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d119      	bne.n	800bf5c <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800bf28:	4b18      	ldr	r3, [pc, #96]	@ (800bf8c <HAL_SAI_Init+0x3b8>)
 800bf2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf2c:	4a17      	ldr	r2, [pc, #92]	@ (800bf8c <HAL_SAI_Init+0x3b8>)
 800bf2e:	f023 0301 	bic.w	r3, r3, #1
 800bf32:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d10e      	bne.n	800bf5c <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf46:	3b01      	subs	r3, #1
 800bf48:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800bf4a:	4910      	ldr	r1, [pc, #64]	@ (800bf8c <HAL_SAI_Init+0x3b8>)
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800bf50:	4b0e      	ldr	r3, [pc, #56]	@ (800bf8c <HAL_SAI_Init+0x3b8>)
 800bf52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf54:	4a0d      	ldr	r2, [pc, #52]	@ (800bf8c <HAL_SAI_Init+0x3b8>)
 800bf56:	f043 0301 	orr.w	r3, r3, #1
 800bf5a:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 800bf74:	2300      	movs	r3, #0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3728      	adds	r7, #40	@ 0x28
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	f805c010 	.word	0xf805c010
 800bf84:	fff88000 	.word	0xfff88000
 800bf88:	40015404 	.word	0x40015404
 800bf8c:	40015400 	.word	0x40015400

0800bf90 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b087      	sub	sp, #28
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	60b9      	str	r1, [r7, #8]
 800bf9a:	607a      	str	r2, [r7, #4]
 800bf9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d003      	beq.n	800bfbe <SAI_InitI2S+0x2e>
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d103      	bne.n	800bfc6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bfc4:	e002      	b.n	800bfcc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2201      	movs	r2, #1
 800bfca:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800bfd2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bfda:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	683a      	ldr	r2, [r7, #0]
 800bfe6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	f003 0301 	and.w	r3, r3, #1
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d001      	beq.n	800bff6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800bff2:	2301      	movs	r3, #1
 800bff4:	e077      	b.n	800c0e6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d107      	bne.n	800c00c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2200      	movs	r2, #0
 800c000:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800c008:	661a      	str	r2, [r3, #96]	@ 0x60
 800c00a:	e006      	b.n	800c01a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800c012:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2200      	movs	r2, #0
 800c018:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Frame definition */
  switch (datasize)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2b03      	cmp	r3, #3
 800c01e:	d84f      	bhi.n	800c0c0 <SAI_InitI2S+0x130>
 800c020:	a201      	add	r2, pc, #4	@ (adr r2, 800c028 <SAI_InitI2S+0x98>)
 800c022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c026:	bf00      	nop
 800c028:	0800c039 	.word	0x0800c039
 800c02c:	0800c05b 	.word	0x0800c05b
 800c030:	0800c07d 	.word	0x0800c07d
 800c034:	0800c09f 	.word	0x0800c09f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2280      	movs	r2, #128	@ 0x80
 800c03c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	085b      	lsrs	r3, r3, #1
 800c042:	015a      	lsls	r2, r3, #5
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	085b      	lsrs	r3, r3, #1
 800c04c:	011a      	lsls	r2, r3, #4
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2240      	movs	r2, #64	@ 0x40
 800c056:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800c058:	e035      	b.n	800c0c6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2280      	movs	r2, #128	@ 0x80
 800c05e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	085b      	lsrs	r3, r3, #1
 800c064:	019a      	lsls	r2, r3, #6
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	085b      	lsrs	r3, r3, #1
 800c06e:	015a      	lsls	r2, r3, #5
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2280      	movs	r2, #128	@ 0x80
 800c078:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800c07a:	e024      	b.n	800c0c6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	22c0      	movs	r2, #192	@ 0xc0
 800c080:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	085b      	lsrs	r3, r3, #1
 800c086:	019a      	lsls	r2, r3, #6
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	085b      	lsrs	r3, r3, #1
 800c090:	015a      	lsls	r2, r3, #5
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2280      	movs	r2, #128	@ 0x80
 800c09a:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800c09c:	e013      	b.n	800c0c6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	22e0      	movs	r2, #224	@ 0xe0
 800c0a2:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	085b      	lsrs	r3, r3, #1
 800c0a8:	019a      	lsls	r2, r3, #6
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	085b      	lsrs	r3, r3, #1
 800c0b2:	015a      	lsls	r2, r3, #5
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2280      	movs	r2, #128	@ 0x80
 800c0bc:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800c0be:	e002      	b.n	800c0c6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	75fb      	strb	r3, [r7, #23]
      break;
 800c0c4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	2b02      	cmp	r3, #2
 800c0ca:	d10b      	bne.n	800c0e4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d102      	bne.n	800c0d8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2210      	movs	r2, #16
 800c0d6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d102      	bne.n	800c0e4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2208      	movs	r2, #8
 800c0e2:	665a      	str	r2, [r3, #100]	@ 0x64
    }
  }
  return status;
 800c0e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	371c      	adds	r7, #28
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr
 800c0f2:	bf00      	nop

0800c0f4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b087      	sub	sp, #28
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	607a      	str	r2, [r7, #4]
 800c100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c102:	2300      	movs	r3, #0
 800c104:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2200      	movs	r2, #0
 800c110:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d003      	beq.n	800c122 <SAI_InitPCM+0x2e>
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	2b02      	cmp	r3, #2
 800c120:	d103      	bne.n	800c12a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2201      	movs	r2, #1
 800c126:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c128:	e002      	b.n	800c130 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2200      	movs	r2, #0
 800c12e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2200      	movs	r2, #0
 800c134:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800c13c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800c144:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2200      	movs	r2, #0
 800c14a:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c158:	671a      	str	r2, [r3, #112]	@ 0x70

  if (protocol == SAI_PCM_SHORT)
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	2b04      	cmp	r3, #4
 800c15e:	d103      	bne.n	800c168 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2201      	movs	r2, #1
 800c164:	655a      	str	r2, [r3, #84]	@ 0x54
 800c166:	e002      	b.n	800c16e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	220d      	movs	r2, #13
 800c16c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  switch (datasize)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2b03      	cmp	r3, #3
 800c172:	d837      	bhi.n	800c1e4 <SAI_InitPCM+0xf0>
 800c174:	a201      	add	r2, pc, #4	@ (adr r2, 800c17c <SAI_InitPCM+0x88>)
 800c176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c17a:	bf00      	nop
 800c17c:	0800c18d 	.word	0x0800c18d
 800c180:	0800c1a3 	.word	0x0800c1a3
 800c184:	0800c1b9 	.word	0x0800c1b9
 800c188:	0800c1cf 	.word	0x0800c1cf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2280      	movs	r2, #128	@ 0x80
 800c190:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	011a      	lsls	r2, r3, #4
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2240      	movs	r2, #64	@ 0x40
 800c19e:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800c1a0:	e023      	b.n	800c1ea <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2280      	movs	r2, #128	@ 0x80
 800c1a6:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	015a      	lsls	r2, r3, #5
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2280      	movs	r2, #128	@ 0x80
 800c1b4:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800c1b6:	e018      	b.n	800c1ea <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	22c0      	movs	r2, #192	@ 0xc0
 800c1bc:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	015a      	lsls	r2, r3, #5
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2280      	movs	r2, #128	@ 0x80
 800c1ca:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800c1cc:	e00d      	b.n	800c1ea <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	22e0      	movs	r2, #224	@ 0xe0
 800c1d2:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	015a      	lsls	r2, r3, #5
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2280      	movs	r2, #128	@ 0x80
 800c1e0:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800c1e2:	e002      	b.n	800c1ea <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	75fb      	strb	r3, [r7, #23]
      break;
 800c1e8:	bf00      	nop
  }

  return status;
 800c1ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	371c      	adds	r7, #28
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b085      	sub	sp, #20
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c200:	4b18      	ldr	r3, [pc, #96]	@ (800c264 <SAI_Disable+0x6c>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a18      	ldr	r2, [pc, #96]	@ (800c268 <SAI_Disable+0x70>)
 800c206:	fba2 2303 	umull	r2, r3, r2, r3
 800c20a:	0b1b      	lsrs	r3, r3, #12
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c210:	2300      	movs	r3, #0
 800c212:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c222:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d10a      	bne.n	800c240 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c230:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 800c23a:	2303      	movs	r3, #3
 800c23c:	72fb      	strb	r3, [r7, #11]
      break;
 800c23e:	e009      	b.n	800c254 <SAI_Disable+0x5c>
    }
    count--;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	3b01      	subs	r3, #1
 800c244:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c250:	2b00      	cmp	r3, #0
 800c252:	d1e7      	bne.n	800c224 <SAI_Disable+0x2c>

  return status;
 800c254:	7afb      	ldrb	r3, [r7, #11]
}
 800c256:	4618      	mov	r0, r3
 800c258:	3714      	adds	r7, #20
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr
 800c262:	bf00      	nop
 800c264:	20000034 	.word	0x20000034
 800c268:	95cbec1b 	.word	0x95cbec1b

0800c26c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d101      	bne.n	800c27e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c27a:	2301      	movs	r3, #1
 800c27c:	e095      	b.n	800c3aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c282:	2b00      	cmp	r3, #0
 800c284:	d108      	bne.n	800c298 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c28e:	d009      	beq.n	800c2a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	61da      	str	r2, [r3, #28]
 800c296:	e005      	b.n	800c2a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d106      	bne.n	800c2c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f7f8 f83c 	bl	800433c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2202      	movs	r2, #2
 800c2c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c2da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c2e4:	d902      	bls.n	800c2ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	60fb      	str	r3, [r7, #12]
 800c2ea:	e002      	b.n	800c2f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c2ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c2f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	68db      	ldr	r3, [r3, #12]
 800c2f6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800c2fa:	d007      	beq.n	800c30c <HAL_SPI_Init+0xa0>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c304:	d002      	beq.n	800c30c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2200      	movs	r2, #0
 800c30a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c31c:	431a      	orrs	r2, r3
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	691b      	ldr	r3, [r3, #16]
 800c322:	f003 0302 	and.w	r3, r3, #2
 800c326:	431a      	orrs	r2, r3
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	695b      	ldr	r3, [r3, #20]
 800c32c:	f003 0301 	and.w	r3, r3, #1
 800c330:	431a      	orrs	r2, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	699b      	ldr	r3, [r3, #24]
 800c336:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c33a:	431a      	orrs	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	69db      	ldr	r3, [r3, #28]
 800c340:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c344:	431a      	orrs	r2, r3
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a1b      	ldr	r3, [r3, #32]
 800c34a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c34e:	ea42 0103 	orr.w	r1, r2, r3
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c356:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	430a      	orrs	r2, r1
 800c360:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	699b      	ldr	r3, [r3, #24]
 800c366:	0c1b      	lsrs	r3, r3, #16
 800c368:	f003 0204 	and.w	r2, r3, #4
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c370:	f003 0310 	and.w	r3, r3, #16
 800c374:	431a      	orrs	r2, r3
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c37a:	f003 0308 	and.w	r3, r3, #8
 800c37e:	431a      	orrs	r2, r3
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	68db      	ldr	r3, [r3, #12]
 800c384:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c388:	ea42 0103 	orr.w	r1, r2, r3
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	430a      	orrs	r2, r1
 800c398:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800c3a8:	2300      	movs	r3, #0
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}

0800c3b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b088      	sub	sp, #32
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	60f8      	str	r0, [r7, #12]
 800c3ba:	60b9      	str	r1, [r7, #8]
 800c3bc:	603b      	str	r3, [r7, #0]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d101      	bne.n	800c3d4 <HAL_SPI_Transmit+0x22>
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	e15f      	b.n	800c694 <HAL_SPI_Transmit+0x2e2>
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c3dc:	f7fa fc82 	bl	8006ce4 <HAL_GetTick>
 800c3e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c3e2:	88fb      	ldrh	r3, [r7, #6]
 800c3e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d002      	beq.n	800c3f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c3f2:	2302      	movs	r3, #2
 800c3f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c3f6:	e148      	b.n	800c68a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d002      	beq.n	800c404 <HAL_SPI_Transmit+0x52>
 800c3fe:	88fb      	ldrh	r3, [r7, #6]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d102      	bne.n	800c40a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c408:	e13f      	b.n	800c68a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2203      	movs	r2, #3
 800c40e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2200      	movs	r2, #0
 800c416:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	88fa      	ldrh	r2, [r7, #6]
 800c422:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	88fa      	ldrh	r2, [r7, #6]
 800c428:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2200      	movs	r2, #0
 800c42e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2200      	movs	r2, #0
 800c434:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2200      	movs	r2, #0
 800c43c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2200      	movs	r2, #0
 800c444:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2200      	movs	r2, #0
 800c44a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c454:	d10f      	bne.n	800c476 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c464:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c474:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c480:	2b40      	cmp	r3, #64	@ 0x40
 800c482:	d007      	beq.n	800c494 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c492:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c49c:	d94f      	bls.n	800c53e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d002      	beq.n	800c4ac <HAL_SPI_Transmit+0xfa>
 800c4a6:	8afb      	ldrh	r3, [r7, #22]
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	d142      	bne.n	800c532 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4b0:	881a      	ldrh	r2, [r3, #0]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4bc:	1c9a      	adds	r2, r3, #2
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	3b01      	subs	r3, #1
 800c4ca:	b29a      	uxth	r2, r3
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c4d0:	e02f      	b.n	800c532 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	f003 0302 	and.w	r3, r3, #2
 800c4dc:	2b02      	cmp	r3, #2
 800c4de:	d112      	bne.n	800c506 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4e4:	881a      	ldrh	r2, [r3, #0]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4f0:	1c9a      	adds	r2, r3, #2
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	3b01      	subs	r3, #1
 800c4fe:	b29a      	uxth	r2, r3
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c504:	e015      	b.n	800c532 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c506:	f7fa fbed 	bl	8006ce4 <HAL_GetTick>
 800c50a:	4602      	mov	r2, r0
 800c50c:	69bb      	ldr	r3, [r7, #24]
 800c50e:	1ad3      	subs	r3, r2, r3
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	429a      	cmp	r2, r3
 800c514:	d803      	bhi.n	800c51e <HAL_SPI_Transmit+0x16c>
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c51c:	d102      	bne.n	800c524 <HAL_SPI_Transmit+0x172>
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d106      	bne.n	800c532 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800c524:	2303      	movs	r3, #3
 800c526:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2201      	movs	r2, #1
 800c52c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800c530:	e0ab      	b.n	800c68a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c536:	b29b      	uxth	r3, r3
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d1ca      	bne.n	800c4d2 <HAL_SPI_Transmit+0x120>
 800c53c:	e080      	b.n	800c640 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d002      	beq.n	800c54c <HAL_SPI_Transmit+0x19a>
 800c546:	8afb      	ldrh	r3, [r7, #22]
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d174      	bne.n	800c636 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c550:	b29b      	uxth	r3, r3
 800c552:	2b01      	cmp	r3, #1
 800c554:	d912      	bls.n	800c57c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c55a:	881a      	ldrh	r2, [r3, #0]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c566:	1c9a      	adds	r2, r3, #2
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c570:	b29b      	uxth	r3, r3
 800c572:	3b02      	subs	r3, #2
 800c574:	b29a      	uxth	r2, r3
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c57a:	e05c      	b.n	800c636 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	330c      	adds	r3, #12
 800c586:	7812      	ldrb	r2, [r2, #0]
 800c588:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c58e:	1c5a      	adds	r2, r3, #1
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c598:	b29b      	uxth	r3, r3
 800c59a:	3b01      	subs	r3, #1
 800c59c:	b29a      	uxth	r2, r3
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c5a2:	e048      	b.n	800c636 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	f003 0302 	and.w	r3, r3, #2
 800c5ae:	2b02      	cmp	r3, #2
 800c5b0:	d12b      	bne.n	800c60a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d912      	bls.n	800c5e2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5c0:	881a      	ldrh	r2, [r3, #0]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5cc:	1c9a      	adds	r2, r3, #2
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	3b02      	subs	r3, #2
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c5e0:	e029      	b.n	800c636 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	330c      	adds	r3, #12
 800c5ec:	7812      	ldrb	r2, [r2, #0]
 800c5ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5f4:	1c5a      	adds	r2, r3, #1
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	3b01      	subs	r3, #1
 800c602:	b29a      	uxth	r2, r3
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c608:	e015      	b.n	800c636 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c60a:	f7fa fb6b 	bl	8006ce4 <HAL_GetTick>
 800c60e:	4602      	mov	r2, r0
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	1ad3      	subs	r3, r2, r3
 800c614:	683a      	ldr	r2, [r7, #0]
 800c616:	429a      	cmp	r2, r3
 800c618:	d803      	bhi.n	800c622 <HAL_SPI_Transmit+0x270>
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c620:	d102      	bne.n	800c628 <HAL_SPI_Transmit+0x276>
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d106      	bne.n	800c636 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800c628:	2303      	movs	r3, #3
 800c62a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2201      	movs	r2, #1
 800c630:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800c634:	e029      	b.n	800c68a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d1b1      	bne.n	800c5a4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c640:	69ba      	ldr	r2, [r7, #24]
 800c642:	6839      	ldr	r1, [r7, #0]
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	f001 fa0d 	bl	800da64 <SPI_EndRxTxTransaction>
 800c64a:	4603      	mov	r3, r0
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d002      	beq.n	800c656 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2220      	movs	r2, #32
 800c654:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d10a      	bne.n	800c674 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c65e:	2300      	movs	r3, #0
 800c660:	613b      	str	r3, [r7, #16]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	613b      	str	r3, [r7, #16]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	689b      	ldr	r3, [r3, #8]
 800c670:	613b      	str	r3, [r7, #16]
 800c672:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d002      	beq.n	800c682 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800c67c:	2301      	movs	r3, #1
 800c67e:	77fb      	strb	r3, [r7, #31]
 800c680:	e003      	b.n	800c68a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2201      	movs	r2, #1
 800c686:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2200      	movs	r2, #0
 800c68e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800c692:	7ffb      	ldrb	r3, [r7, #31]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3720      	adds	r7, #32
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b088      	sub	sp, #32
 800c6a0:	af02      	add	r7, sp, #8
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	603b      	str	r3, [r7, #0]
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d002      	beq.n	800c6c2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800c6bc:	2302      	movs	r3, #2
 800c6be:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c6c0:	e11a      	b.n	800c8f8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c6ca:	d112      	bne.n	800c6f2 <HAL_SPI_Receive+0x56>
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d10e      	bne.n	800c6f2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2204      	movs	r2, #4
 800c6d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c6dc:	88fa      	ldrh	r2, [r7, #6]
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	9300      	str	r3, [sp, #0]
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	68ba      	ldr	r2, [r7, #8]
 800c6e6:	68b9      	ldr	r1, [r7, #8]
 800c6e8:	68f8      	ldr	r0, [r7, #12]
 800c6ea:	f000 f90e 	bl	800c90a <HAL_SPI_TransmitReceive>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	e107      	b.n	800c902 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d101      	bne.n	800c700 <HAL_SPI_Receive+0x64>
 800c6fc:	2302      	movs	r3, #2
 800c6fe:	e100      	b.n	800c902 <HAL_SPI_Receive+0x266>
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2201      	movs	r2, #1
 800c704:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c708:	f7fa faec 	bl	8006ce4 <HAL_GetTick>
 800c70c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d002      	beq.n	800c71a <HAL_SPI_Receive+0x7e>
 800c714:	88fb      	ldrh	r3, [r7, #6]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d102      	bne.n	800c720 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c71a:	2301      	movs	r3, #1
 800c71c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c71e:	e0eb      	b.n	800c8f8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2204      	movs	r2, #4
 800c724:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2200      	movs	r2, #0
 800c72c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	68ba      	ldr	r2, [r7, #8]
 800c732:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	88fa      	ldrh	r2, [r7, #6]
 800c738:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	88fa      	ldrh	r2, [r7, #6]
 800c740:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2200      	movs	r2, #0
 800c748:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2200      	movs	r2, #0
 800c74e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2200      	movs	r2, #0
 800c75a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2200      	movs	r2, #0
 800c760:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c76a:	d908      	bls.n	800c77e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	685a      	ldr	r2, [r3, #4]
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c77a:	605a      	str	r2, [r3, #4]
 800c77c:	e007      	b.n	800c78e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	685a      	ldr	r2, [r3, #4]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c78c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	689b      	ldr	r3, [r3, #8]
 800c792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c796:	d10f      	bne.n	800c7b8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c7a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c7b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7c2:	2b40      	cmp	r3, #64	@ 0x40
 800c7c4:	d007      	beq.n	800c7d6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c7d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c7de:	d86f      	bhi.n	800c8c0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c7e0:	e034      	b.n	800c84c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	f003 0301 	and.w	r3, r3, #1
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d117      	bne.n	800c820 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f103 020c 	add.w	r2, r3, #12
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7fc:	7812      	ldrb	r2, [r2, #0]
 800c7fe:	b2d2      	uxtb	r2, r2
 800c800:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c806:	1c5a      	adds	r2, r3, #1
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c812:	b29b      	uxth	r3, r3
 800c814:	3b01      	subs	r3, #1
 800c816:	b29a      	uxth	r2, r3
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800c81e:	e015      	b.n	800c84c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c820:	f7fa fa60 	bl	8006ce4 <HAL_GetTick>
 800c824:	4602      	mov	r2, r0
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	683a      	ldr	r2, [r7, #0]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d803      	bhi.n	800c838 <HAL_SPI_Receive+0x19c>
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c836:	d102      	bne.n	800c83e <HAL_SPI_Receive+0x1a2>
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d106      	bne.n	800c84c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800c83e:	2303      	movs	r3, #3
 800c840:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2201      	movs	r2, #1
 800c846:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800c84a:	e055      	b.n	800c8f8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c852:	b29b      	uxth	r3, r3
 800c854:	2b00      	cmp	r3, #0
 800c856:	d1c4      	bne.n	800c7e2 <HAL_SPI_Receive+0x146>
 800c858:	e038      	b.n	800c8cc <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	f003 0301 	and.w	r3, r3, #1
 800c864:	2b01      	cmp	r3, #1
 800c866:	d115      	bne.n	800c894 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	68da      	ldr	r2, [r3, #12]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c872:	b292      	uxth	r2, r2
 800c874:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c87a:	1c9a      	adds	r2, r3, #2
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c886:	b29b      	uxth	r3, r3
 800c888:	3b01      	subs	r3, #1
 800c88a:	b29a      	uxth	r2, r3
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800c892:	e015      	b.n	800c8c0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c894:	f7fa fa26 	bl	8006ce4 <HAL_GetTick>
 800c898:	4602      	mov	r2, r0
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	1ad3      	subs	r3, r2, r3
 800c89e:	683a      	ldr	r2, [r7, #0]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d803      	bhi.n	800c8ac <HAL_SPI_Receive+0x210>
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8aa:	d102      	bne.n	800c8b2 <HAL_SPI_Receive+0x216>
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d106      	bne.n	800c8c0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800c8b2:	2303      	movs	r3, #3
 800c8b4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800c8be:	e01b      	b.n	800c8f8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1c6      	bne.n	800c85a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c8cc:	693a      	ldr	r2, [r7, #16]
 800c8ce:	6839      	ldr	r1, [r7, #0]
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f001 f86f 	bl	800d9b4 <SPI_EndRxTransaction>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d002      	beq.n	800c8e2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2220      	movs	r2, #32
 800c8e0:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d002      	beq.n	800c8f0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	75fb      	strb	r3, [r7, #23]
 800c8ee:	e003      	b.n	800c8f8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800c900:	7dfb      	ldrb	r3, [r7, #23]
}
 800c902:	4618      	mov	r0, r3
 800c904:	3718      	adds	r7, #24
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b08a      	sub	sp, #40	@ 0x28
 800c90e:	af00      	add	r7, sp, #0
 800c910:	60f8      	str	r0, [r7, #12]
 800c912:	60b9      	str	r1, [r7, #8]
 800c914:	607a      	str	r2, [r7, #4]
 800c916:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c918:	2301      	movs	r3, #1
 800c91a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c91c:	2300      	movs	r3, #0
 800c91e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d101      	bne.n	800c930 <HAL_SPI_TransmitReceive+0x26>
 800c92c:	2302      	movs	r3, #2
 800c92e:	e20a      	b.n	800cd46 <HAL_SPI_TransmitReceive+0x43c>
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2201      	movs	r2, #1
 800c934:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c938:	f7fa f9d4 	bl	8006ce4 <HAL_GetTick>
 800c93c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c944:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c94c:	887b      	ldrh	r3, [r7, #2]
 800c94e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800c950:	887b      	ldrh	r3, [r7, #2]
 800c952:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c954:	7efb      	ldrb	r3, [r7, #27]
 800c956:	2b01      	cmp	r3, #1
 800c958:	d00e      	beq.n	800c978 <HAL_SPI_TransmitReceive+0x6e>
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c960:	d106      	bne.n	800c970 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	689b      	ldr	r3, [r3, #8]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d102      	bne.n	800c970 <HAL_SPI_TransmitReceive+0x66>
 800c96a:	7efb      	ldrb	r3, [r7, #27]
 800c96c:	2b04      	cmp	r3, #4
 800c96e:	d003      	beq.n	800c978 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800c970:	2302      	movs	r3, #2
 800c972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800c976:	e1e0      	b.n	800cd3a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d005      	beq.n	800c98a <HAL_SPI_TransmitReceive+0x80>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d002      	beq.n	800c98a <HAL_SPI_TransmitReceive+0x80>
 800c984:	887b      	ldrh	r3, [r7, #2]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d103      	bne.n	800c992 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800c98a:	2301      	movs	r3, #1
 800c98c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800c990:	e1d3      	b.n	800cd3a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	2b04      	cmp	r3, #4
 800c99c:	d003      	beq.n	800c9a6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2205      	movs	r2, #5
 800c9a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	887a      	ldrh	r2, [r7, #2]
 800c9b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	887a      	ldrh	r2, [r7, #2]
 800c9be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	887a      	ldrh	r2, [r7, #2]
 800c9cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	887a      	ldrh	r2, [r7, #2]
 800c9d2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c9e8:	d802      	bhi.n	800c9f0 <HAL_SPI_TransmitReceive+0xe6>
 800c9ea:	8a3b      	ldrh	r3, [r7, #16]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d908      	bls.n	800ca02 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	685a      	ldr	r2, [r3, #4]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c9fe:	605a      	str	r2, [r3, #4]
 800ca00:	e007      	b.n	800ca12 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	685a      	ldr	r2, [r3, #4]
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ca10:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca1c:	2b40      	cmp	r3, #64	@ 0x40
 800ca1e:	d007      	beq.n	800ca30 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ca2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ca38:	f240 8081 	bls.w	800cb3e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d002      	beq.n	800ca4a <HAL_SPI_TransmitReceive+0x140>
 800ca44:	8a7b      	ldrh	r3, [r7, #18]
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	d16d      	bne.n	800cb26 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca4e:	881a      	ldrh	r2, [r3, #0]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca5a:	1c9a      	adds	r2, r3, #2
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	3b01      	subs	r3, #1
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ca6e:	e05a      	b.n	800cb26 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	689b      	ldr	r3, [r3, #8]
 800ca76:	f003 0302 	and.w	r3, r3, #2
 800ca7a:	2b02      	cmp	r3, #2
 800ca7c:	d11b      	bne.n	800cab6 <HAL_SPI_TransmitReceive+0x1ac>
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d016      	beq.n	800cab6 <HAL_SPI_TransmitReceive+0x1ac>
 800ca88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d113      	bne.n	800cab6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca92:	881a      	ldrh	r2, [r3, #0]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca9e:	1c9a      	adds	r2, r3, #2
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	3b01      	subs	r3, #1
 800caac:	b29a      	uxth	r2, r3
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cab2:	2300      	movs	r3, #0
 800cab4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	f003 0301 	and.w	r3, r3, #1
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d11c      	bne.n	800cafe <HAL_SPI_TransmitReceive+0x1f4>
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800caca:	b29b      	uxth	r3, r3
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d016      	beq.n	800cafe <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	68da      	ldr	r2, [r3, #12]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cada:	b292      	uxth	r2, r2
 800cadc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cae2:	1c9a      	adds	r2, r3, #2
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800caee:	b29b      	uxth	r3, r3
 800caf0:	3b01      	subs	r3, #1
 800caf2:	b29a      	uxth	r2, r3
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cafa:	2301      	movs	r3, #1
 800cafc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800cafe:	f7fa f8f1 	bl	8006ce4 <HAL_GetTick>
 800cb02:	4602      	mov	r2, r0
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	1ad3      	subs	r3, r2, r3
 800cb08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d80b      	bhi.n	800cb26 <HAL_SPI_TransmitReceive+0x21c>
 800cb0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb14:	d007      	beq.n	800cb26 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800cb16:	2303      	movs	r3, #3
 800cb18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800cb24:	e109      	b.n	800cd3a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d19f      	bne.n	800ca70 <HAL_SPI_TransmitReceive+0x166>
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d199      	bne.n	800ca70 <HAL_SPI_TransmitReceive+0x166>
 800cb3c:	e0e3      	b.n	800cd06 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d003      	beq.n	800cb4e <HAL_SPI_TransmitReceive+0x244>
 800cb46:	8a7b      	ldrh	r3, [r7, #18]
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	f040 80cf 	bne.w	800ccec <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d912      	bls.n	800cb7e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb5c:	881a      	ldrh	r2, [r3, #0]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb68:	1c9a      	adds	r2, r3, #2
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	3b02      	subs	r3, #2
 800cb76:	b29a      	uxth	r2, r3
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800cb7c:	e0b6      	b.n	800ccec <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	330c      	adds	r3, #12
 800cb88:	7812      	ldrb	r2, [r2, #0]
 800cb8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb90:	1c5a      	adds	r2, r3, #1
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	b29a      	uxth	r2, r3
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cba4:	e0a2      	b.n	800ccec <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	689b      	ldr	r3, [r3, #8]
 800cbac:	f003 0302 	and.w	r3, r3, #2
 800cbb0:	2b02      	cmp	r3, #2
 800cbb2:	d134      	bne.n	800cc1e <HAL_SPI_TransmitReceive+0x314>
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d02f      	beq.n	800cc1e <HAL_SPI_TransmitReceive+0x314>
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d12c      	bne.n	800cc1e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d912      	bls.n	800cbf4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbd2:	881a      	ldrh	r2, [r3, #0]
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbde:	1c9a      	adds	r2, r3, #2
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	3b02      	subs	r3, #2
 800cbec:	b29a      	uxth	r2, r3
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800cbf2:	e012      	b.n	800cc1a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	330c      	adds	r3, #12
 800cbfe:	7812      	ldrb	r2, [r2, #0]
 800cc00:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc06:	1c5a      	adds	r2, r3, #1
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	3b01      	subs	r3, #1
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	689b      	ldr	r3, [r3, #8]
 800cc24:	f003 0301 	and.w	r3, r3, #1
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d148      	bne.n	800ccbe <HAL_SPI_TransmitReceive+0x3b4>
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d042      	beq.n	800ccbe <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d923      	bls.n	800cc8c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	68da      	ldr	r2, [r3, #12]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc4e:	b292      	uxth	r2, r2
 800cc50:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc56:	1c9a      	adds	r2, r3, #2
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cc62:	b29b      	uxth	r3, r3
 800cc64:	3b02      	subs	r3, #2
 800cc66:	b29a      	uxth	r2, r3
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	2b01      	cmp	r3, #1
 800cc78:	d81f      	bhi.n	800ccba <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	685a      	ldr	r2, [r3, #4]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cc88:	605a      	str	r2, [r3, #4]
 800cc8a:	e016      	b.n	800ccba <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f103 020c 	add.w	r2, r3, #12
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc98:	7812      	ldrb	r2, [r2, #0]
 800cc9a:	b2d2      	uxtb	r2, r2
 800cc9c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cca2:	1c5a      	adds	r2, r3, #1
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	3b01      	subs	r3, #1
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ccbe:	f7fa f811 	bl	8006ce4 <HAL_GetTick>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	69fb      	ldr	r3, [r7, #28]
 800ccc6:	1ad3      	subs	r3, r2, r3
 800ccc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d803      	bhi.n	800ccd6 <HAL_SPI_TransmitReceive+0x3cc>
 800ccce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccd4:	d102      	bne.n	800ccdc <HAL_SPI_TransmitReceive+0x3d2>
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d107      	bne.n	800ccec <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800ccdc:	2303      	movs	r3, #3
 800ccde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2201      	movs	r2, #1
 800cce6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800ccea:	e026      	b.n	800cd3a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	f47f af57 	bne.w	800cba6 <HAL_SPI_TransmitReceive+0x29c>
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f47f af50 	bne.w	800cba6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cd06:	69fa      	ldr	r2, [r7, #28]
 800cd08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	f000 feaa 	bl	800da64 <SPI_EndRxTxTransaction>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d005      	beq.n	800cd22 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800cd16:	2301      	movs	r3, #1
 800cd18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2220      	movs	r2, #32
 800cd20:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d003      	beq.n	800cd32 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cd30:	e003      	b.n	800cd3a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2201      	movs	r2, #1
 800cd36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800cd42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3728      	adds	r7, #40	@ 0x28
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
	...

0800cd50 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d101      	bne.n	800cd70 <HAL_SPI_Transmit_DMA+0x20>
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	e0d4      	b.n	800cf1a <HAL_SPI_Transmit_DMA+0x1ca>
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2201      	movs	r2, #1
 800cd74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d002      	beq.n	800cd8a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800cd84:	2302      	movs	r3, #2
 800cd86:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cd88:	e0c2      	b.n	800cf10 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d002      	beq.n	800cd96 <HAL_SPI_Transmit_DMA+0x46>
 800cd90:	88fb      	ldrh	r3, [r7, #6]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d102      	bne.n	800cd9c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800cd96:	2301      	movs	r3, #1
 800cd98:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cd9a:	e0b9      	b.n	800cf10 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2203      	movs	r2, #3
 800cda0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2200      	movs	r2, #0
 800cda8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	68ba      	ldr	r2, [r7, #8]
 800cdae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	88fa      	ldrh	r2, [r7, #6]
 800cdb4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	88fa      	ldrh	r2, [r7, #6]
 800cdba:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	689b      	ldr	r3, [r3, #8]
 800cde2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cde6:	d10f      	bne.n	800ce08 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cdf6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ce06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce0c:	4a45      	ldr	r2, [pc, #276]	@ (800cf24 <HAL_SPI_Transmit_DMA+0x1d4>)
 800ce0e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce14:	4a44      	ldr	r2, [pc, #272]	@ (800cf28 <HAL_SPI_Transmit_DMA+0x1d8>)
 800ce16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce1c:	4a43      	ldr	r2, [pc, #268]	@ (800cf2c <HAL_SPI_Transmit_DMA+0x1dc>)
 800ce1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce24:	2200      	movs	r2, #0
 800ce26:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	685a      	ldr	r2, [r3, #4]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ce36:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ce40:	d82d      	bhi.n	800ce9e <HAL_SPI_Transmit_DMA+0x14e>
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce46:	699b      	ldr	r3, [r3, #24]
 800ce48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce4c:	d127      	bne.n	800ce9e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	f003 0301 	and.w	r3, r3, #1
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d10f      	bne.n	800ce7c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	685a      	ldr	r2, [r3, #4]
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ce6a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	085b      	lsrs	r3, r3, #1
 800ce74:	b29a      	uxth	r2, r3
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ce7a:	e010      	b.n	800ce9e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	685a      	ldr	r2, [r3, #4]
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ce8a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	085b      	lsrs	r3, r3, #1
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	3301      	adds	r3, #1
 800ce98:	b29a      	uxth	r2, r3
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cea6:	4619      	mov	r1, r3
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	330c      	adds	r3, #12
 800ceae:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ceb4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ceb6:	f7fb f8d2 	bl	800805e <HAL_DMA_Start_IT>
 800ceba:	4603      	mov	r3, r0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d008      	beq.n	800ced2 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cec4:	f043 0210 	orr.w	r2, r3, #16
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800cecc:	2301      	movs	r3, #1
 800cece:	75fb      	strb	r3, [r7, #23]

    goto error;
 800ced0:	e01e      	b.n	800cf10 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cedc:	2b40      	cmp	r3, #64	@ 0x40
 800cede:	d007      	beq.n	800cef0 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ceee:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	685a      	ldr	r2, [r3, #4]
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f042 0220 	orr.w	r2, r2, #32
 800cefe:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	685a      	ldr	r2, [r3, #4]
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f042 0202 	orr.w	r2, r2, #2
 800cf0e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2200      	movs	r2, #0
 800cf14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800cf18:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3718      	adds	r7, #24
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	0800d6e3 	.word	0x0800d6e3
 800cf28:	0800d505 	.word	0x0800d505
 800cf2c:	0800d737 	.word	0x0800d737

0800cf30 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b086      	sub	sp, #24
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d002      	beq.n	800cf54 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800cf4e:	2302      	movs	r3, #2
 800cf50:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cf52:	e0fe      	b.n	800d152 <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d110      	bne.n	800cf7e <HAL_SPI_Receive_DMA+0x4e>
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cf64:	d10b      	bne.n	800cf7e <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2204      	movs	r2, #4
 800cf6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800cf6e:	88fb      	ldrh	r3, [r7, #6]
 800cf70:	68ba      	ldr	r2, [r7, #8]
 800cf72:	68b9      	ldr	r1, [r7, #8]
 800cf74:	68f8      	ldr	r0, [r7, #12]
 800cf76:	f000 f8fb 	bl	800d170 <HAL_SPI_TransmitReceive_DMA>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	e0ee      	b.n	800d15c <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d101      	bne.n	800cf8c <HAL_SPI_Receive_DMA+0x5c>
 800cf88:	2302      	movs	r3, #2
 800cf8a:	e0e7      	b.n	800d15c <HAL_SPI_Receive_DMA+0x22c>
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2201      	movs	r2, #1
 800cf90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if ((pData == NULL) || (Size == 0U))
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d002      	beq.n	800cfa0 <HAL_SPI_Receive_DMA+0x70>
 800cf9a:	88fb      	ldrh	r3, [r7, #6]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d102      	bne.n	800cfa6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cfa4:	e0d5      	b.n	800d152 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2204      	movs	r2, #4
 800cfaa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	68ba      	ldr	r2, [r7, #8]
 800cfb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	88fa      	ldrh	r2, [r7, #6]
 800cfbe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	88fa      	ldrh	r2, [r7, #6]
 800cfc6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cfea:	d10f      	bne.n	800d00c <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cffa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d00a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	685a      	ldr	r2, [r3, #4]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d01a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	68db      	ldr	r3, [r3, #12]
 800d020:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d024:	d908      	bls.n	800d038 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	685a      	ldr	r2, [r3, #4]
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d034:	605a      	str	r2, [r3, #4]
 800d036:	e042      	b.n	800d0be <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	685a      	ldr	r2, [r3, #4]
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d046:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d04c:	699b      	ldr	r3, [r3, #24]
 800d04e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d052:	d134      	bne.n	800d0be <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	685a      	ldr	r2, [r3, #4]
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d062:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	f003 0301 	and.w	r3, r3, #1
 800d070:	2b00      	cmp	r3, #0
 800d072:	d111      	bne.n	800d098 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	685a      	ldr	r2, [r3, #4]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d082:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	085b      	lsrs	r3, r3, #1
 800d08e:	b29a      	uxth	r2, r3
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800d096:	e012      	b.n	800d0be <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	685a      	ldr	r2, [r3, #4]
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d0a6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	085b      	lsrs	r3, r3, #1
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	b29a      	uxth	r2, r3
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0c2:	4a28      	ldr	r2, [pc, #160]	@ (800d164 <HAL_SPI_Receive_DMA+0x234>)
 800d0c4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0ca:	4a27      	ldr	r2, [pc, #156]	@ (800d168 <HAL_SPI_Receive_DMA+0x238>)
 800d0cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0d2:	4a26      	ldr	r2, [pc, #152]	@ (800d16c <HAL_SPI_Receive_DMA+0x23c>)
 800d0d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0da:	2200      	movs	r2, #0
 800d0dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	330c      	adds	r3, #12
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0ee:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d0f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d0f8:	f7fa ffb1 	bl	800805e <HAL_DMA_Start_IT>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d008      	beq.n	800d114 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d106:	f043 0210 	orr.w	r2, r3, #16
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800d10e:	2301      	movs	r3, #1
 800d110:	75fb      	strb	r3, [r7, #23]

    goto error;
 800d112:	e01e      	b.n	800d152 <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d11e:	2b40      	cmp	r3, #64	@ 0x40
 800d120:	d007      	beq.n	800d132 <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d130:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	685a      	ldr	r2, [r3, #4]
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f042 0220 	orr.w	r2, r2, #32
 800d140:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	685a      	ldr	r2, [r3, #4]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f042 0201 	orr.w	r2, r2, #1
 800d150:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2200      	movs	r2, #0
 800d156:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800d15a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3718      	adds	r7, #24
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	0800d6ff 	.word	0x0800d6ff
 800d168:	0800d5ab 	.word	0x0800d5ab
 800d16c:	0800d737 	.word	0x0800d737

0800d170 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b086      	sub	sp, #24
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
 800d17c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d17e:	2300      	movs	r3, #0
 800d180:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d101      	bne.n	800d190 <HAL_SPI_TransmitReceive_DMA+0x20>
 800d18c:	2302      	movs	r3, #2
 800d18e:	e164      	b.n	800d45a <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2201      	movs	r2, #1
 800d194:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d19e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800d1a6:	7dbb      	ldrb	r3, [r7, #22]
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	d00d      	beq.n	800d1c8 <HAL_SPI_TransmitReceive_DMA+0x58>
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d1b2:	d106      	bne.n	800d1c2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	689b      	ldr	r3, [r3, #8]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d102      	bne.n	800d1c2 <HAL_SPI_TransmitReceive_DMA+0x52>
 800d1bc:	7dbb      	ldrb	r3, [r7, #22]
 800d1be:	2b04      	cmp	r3, #4
 800d1c0:	d002      	beq.n	800d1c8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800d1c2:	2302      	movs	r3, #2
 800d1c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d1c6:	e143      	b.n	800d450 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d005      	beq.n	800d1da <HAL_SPI_TransmitReceive_DMA+0x6a>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d002      	beq.n	800d1da <HAL_SPI_TransmitReceive_DMA+0x6a>
 800d1d4:	887b      	ldrh	r3, [r7, #2]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d102      	bne.n	800d1e0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d1de:	e137      	b.n	800d450 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	2b04      	cmp	r3, #4
 800d1ea:	d003      	beq.n	800d1f4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2205      	movs	r2, #5
 800d1f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	68ba      	ldr	r2, [r7, #8]
 800d1fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	887a      	ldrh	r2, [r7, #2]
 800d204:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	887a      	ldrh	r2, [r7, #2]
 800d20a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	887a      	ldrh	r2, [r7, #2]
 800d216:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	887a      	ldrh	r2, [r7, #2]
 800d21e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2200      	movs	r2, #0
 800d226:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2200      	movs	r2, #0
 800d22c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	685a      	ldr	r2, [r3, #4]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800d23c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d246:	d908      	bls.n	800d25a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	685a      	ldr	r2, [r3, #4]
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d256:	605a      	str	r2, [r3, #4]
 800d258:	e06f      	b.n	800d33a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	685a      	ldr	r2, [r3, #4]
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d268:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d26e:	699b      	ldr	r3, [r3, #24]
 800d270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d274:	d126      	bne.n	800d2c4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800d27a:	f003 0301 	and.w	r3, r3, #1
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d10f      	bne.n	800d2a2 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	685a      	ldr	r2, [r3, #4]
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d290:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d296:	b29b      	uxth	r3, r3
 800d298:	085b      	lsrs	r3, r3, #1
 800d29a:	b29a      	uxth	r2, r3
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d2a0:	e010      	b.n	800d2c4 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	685a      	ldr	r2, [r3, #4]
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d2b0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	085b      	lsrs	r3, r3, #1
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	3301      	adds	r3, #1
 800d2be:	b29a      	uxth	r2, r3
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2c8:	699b      	ldr	r3, [r3, #24]
 800d2ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d2ce:	d134      	bne.n	800d33a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	685a      	ldr	r2, [r3, #4]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d2de:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d2e6:	b29b      	uxth	r3, r3
 800d2e8:	f003 0301 	and.w	r3, r3, #1
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d111      	bne.n	800d314 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	685a      	ldr	r2, [r3, #4]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d2fe:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d306:	b29b      	uxth	r3, r3
 800d308:	085b      	lsrs	r3, r3, #1
 800d30a:	b29a      	uxth	r2, r3
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800d312:	e012      	b.n	800d33a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	685a      	ldr	r2, [r3, #4]
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d322:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	085b      	lsrs	r3, r3, #1
 800d32e:	b29b      	uxth	r3, r3
 800d330:	3301      	adds	r3, #1
 800d332:	b29a      	uxth	r2, r3
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d340:	b2db      	uxtb	r3, r3
 800d342:	2b04      	cmp	r3, #4
 800d344:	d108      	bne.n	800d358 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d34a:	4a46      	ldr	r2, [pc, #280]	@ (800d464 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 800d34c:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d352:	4a45      	ldr	r2, [pc, #276]	@ (800d468 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800d354:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d356:	e007      	b.n	800d368 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d35c:	4a43      	ldr	r2, [pc, #268]	@ (800d46c <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800d35e:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d364:	4a42      	ldr	r2, [pc, #264]	@ (800d470 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800d366:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d36c:	4a41      	ldr	r2, [pc, #260]	@ (800d474 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800d36e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d374:	2200      	movs	r2, #0
 800d376:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	330c      	adds	r3, #12
 800d382:	4619      	mov	r1, r3
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d388:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d390:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d392:	f7fa fe64 	bl	800805e <HAL_DMA_Start_IT>
 800d396:	4603      	mov	r3, r0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d008      	beq.n	800d3ae <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d3a0:	f043 0210 	orr.w	r2, r3, #16
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	75fb      	strb	r3, [r7, #23]

    goto error;
 800d3ac:	e050      	b.n	800d450 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	685a      	ldr	r2, [r3, #4]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f042 0201 	orr.w	r2, r2, #1
 800d3bc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3da:	2200      	movs	r2, #0
 800d3dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	330c      	adds	r3, #12
 800d3ee:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d3f4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d3f6:	f7fa fe32 	bl	800805e <HAL_DMA_Start_IT>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d008      	beq.n	800d412 <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d404:	f043 0210 	orr.w	r2, r3, #16
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800d40c:	2301      	movs	r3, #1
 800d40e:	75fb      	strb	r3, [r7, #23]

    goto error;
 800d410:	e01e      	b.n	800d450 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d41c:	2b40      	cmp	r3, #64	@ 0x40
 800d41e:	d007      	beq.n	800d430 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d42e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	685a      	ldr	r2, [r3, #4]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f042 0220 	orr.w	r2, r2, #32
 800d43e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	685a      	ldr	r2, [r3, #4]
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f042 0202 	orr.w	r2, r2, #2
 800d44e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2200      	movs	r2, #0
 800d454:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800d458:	7dfb      	ldrb	r3, [r7, #23]
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3718      	adds	r7, #24
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	0800d6ff 	.word	0x0800d6ff
 800d468:	0800d5ab 	.word	0x0800d5ab
 800d46c:	0800d71b 	.word	0x0800d71b
 800d470:	0800d653 	.word	0x0800d653
 800d474:	0800d737 	.word	0x0800d737

0800d478 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d478:	b480      	push	{r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d480:	bf00      	nop
 800d482:	370c      	adds	r7, #12
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr

0800d48c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b083      	sub	sp, #12
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d494:	bf00      	nop
 800d496:	370c      	adds	r7, #12
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr

0800d4a0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d4a8:	bf00      	nop
 800d4aa:	370c      	adds	r7, #12
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800d4bc:	bf00      	nop
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b083      	sub	sp, #12
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800d4e4:	bf00      	nop
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d4f8:	bf00      	nop
 800d4fa:	370c      	adds	r7, #12
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b086      	sub	sp, #24
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d510:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d512:	f7f9 fbe7 	bl	8006ce4 <HAL_GetTick>
 800d516:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f003 0320 	and.w	r3, r3, #32
 800d522:	2b20      	cmp	r3, #32
 800d524:	d03b      	beq.n	800d59e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	685a      	ldr	r2, [r3, #4]
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f022 0220 	bic.w	r2, r2, #32
 800d534:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	685a      	ldr	r2, [r3, #4]
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f022 0202 	bic.w	r2, r2, #2
 800d544:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d546:	693a      	ldr	r2, [r7, #16]
 800d548:	2164      	movs	r1, #100	@ 0x64
 800d54a:	6978      	ldr	r0, [r7, #20]
 800d54c:	f000 fa8a 	bl	800da64 <SPI_EndRxTxTransaction>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d005      	beq.n	800d562 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d55a:	f043 0220 	orr.w	r2, r3, #32
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d10a      	bne.n	800d580 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d56a:	2300      	movs	r3, #0
 800d56c:	60fb      	str	r3, [r7, #12]
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	68db      	ldr	r3, [r3, #12]
 800d574:	60fb      	str	r3, [r7, #12]
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	689b      	ldr	r3, [r3, #8]
 800d57c:	60fb      	str	r3, [r7, #12]
 800d57e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	2200      	movs	r2, #0
 800d584:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	2201      	movs	r2, #1
 800d58a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d592:	2b00      	cmp	r3, #0
 800d594:	d003      	beq.n	800d59e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d596:	6978      	ldr	r0, [r7, #20]
 800d598:	f7ff ffaa 	bl	800d4f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d59c:	e002      	b.n	800d5a4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800d59e:	6978      	ldr	r0, [r7, #20]
 800d5a0:	f7ff ff6a 	bl	800d478 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d5a4:	3718      	adds	r7, #24
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b084      	sub	sp, #16
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5b6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d5b8:	f7f9 fb94 	bl	8006ce4 <HAL_GetTick>
 800d5bc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f003 0320 	and.w	r3, r3, #32
 800d5c8:	2b20      	cmp	r3, #32
 800d5ca:	d03c      	beq.n	800d646 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	685a      	ldr	r2, [r3, #4]
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f022 0220 	bic.w	r2, r2, #32
 800d5da:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	689b      	ldr	r3, [r3, #8]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d10d      	bne.n	800d600 <SPI_DMAReceiveCplt+0x56>
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	685b      	ldr	r3, [r3, #4]
 800d5e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d5ec:	d108      	bne.n	800d600 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	685a      	ldr	r2, [r3, #4]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f022 0203 	bic.w	r2, r2, #3
 800d5fc:	605a      	str	r2, [r3, #4]
 800d5fe:	e007      	b.n	800d610 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	685a      	ldr	r2, [r3, #4]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f022 0201 	bic.w	r2, r2, #1
 800d60e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d610:	68ba      	ldr	r2, [r7, #8]
 800d612:	2164      	movs	r1, #100	@ 0x64
 800d614:	68f8      	ldr	r0, [r7, #12]
 800d616:	f000 f9cd 	bl	800d9b4 <SPI_EndRxTransaction>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d002      	beq.n	800d626 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2220      	movs	r2, #32
 800d624:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2200      	movs	r2, #0
 800d62a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2201      	movs	r2, #1
 800d632:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d003      	beq.n	800d646 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d63e:	68f8      	ldr	r0, [r7, #12]
 800d640:	f7ff ff56 	bl	800d4f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d644:	e002      	b.n	800d64c <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800d646:	68f8      	ldr	r0, [r7, #12]
 800d648:	f7ff ff20 	bl	800d48c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d64c:	3710      	adds	r7, #16
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}

0800d652 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d652:	b580      	push	{r7, lr}
 800d654:	b084      	sub	sp, #16
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d65e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d660:	f7f9 fb40 	bl	8006ce4 <HAL_GetTick>
 800d664:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f003 0320 	and.w	r3, r3, #32
 800d670:	2b20      	cmp	r3, #32
 800d672:	d030      	beq.n	800d6d6 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	685a      	ldr	r2, [r3, #4]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f022 0220 	bic.w	r2, r2, #32
 800d682:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d684:	68ba      	ldr	r2, [r7, #8]
 800d686:	2164      	movs	r1, #100	@ 0x64
 800d688:	68f8      	ldr	r0, [r7, #12]
 800d68a:	f000 f9eb 	bl	800da64 <SPI_EndRxTxTransaction>
 800d68e:	4603      	mov	r3, r0
 800d690:	2b00      	cmp	r3, #0
 800d692:	d005      	beq.n	800d6a0 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d698:	f043 0220 	orr.w	r2, r3, #32
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	685a      	ldr	r2, [r3, #4]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f022 0203 	bic.w	r2, r2, #3
 800d6ae:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d003      	beq.n	800d6d6 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	f7ff ff0e 	bl	800d4f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d6d4:	e002      	b.n	800d6dc <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800d6d6:	68f8      	ldr	r0, [r7, #12]
 800d6d8:	f7ff fee2 	bl	800d4a0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d6dc:	3710      	adds	r7, #16
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b084      	sub	sp, #16
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ee:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	f7ff fedf 	bl	800d4b4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d6f6:	bf00      	nop
 800d6f8:	3710      	adds	r7, #16
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}

0800d6fe <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b084      	sub	sp, #16
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d70a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	f7ff fedb 	bl	800d4c8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d712:	bf00      	nop
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b084      	sub	sp, #16
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d726:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f7ff fed7 	bl	800d4dc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d72e:	bf00      	nop
 800d730:	3710      	adds	r7, #16
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}

0800d736 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d736:	b580      	push	{r7, lr}
 800d738:	b084      	sub	sp, #16
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d742:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	685a      	ldr	r2, [r3, #4]
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f022 0203 	bic.w	r2, r2, #3
 800d752:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d758:	f043 0210 	orr.w	r2, r3, #16
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2201      	movs	r2, #1
 800d764:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d768:	68f8      	ldr	r0, [r7, #12]
 800d76a:	f7ff fec1 	bl	800d4f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d76e:	bf00      	nop
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
	...

0800d778 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b088      	sub	sp, #32
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	603b      	str	r3, [r7, #0]
 800d784:	4613      	mov	r3, r2
 800d786:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d788:	f7f9 faac 	bl	8006ce4 <HAL_GetTick>
 800d78c:	4602      	mov	r2, r0
 800d78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d790:	1a9b      	subs	r3, r3, r2
 800d792:	683a      	ldr	r2, [r7, #0]
 800d794:	4413      	add	r3, r2
 800d796:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d798:	f7f9 faa4 	bl	8006ce4 <HAL_GetTick>
 800d79c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d79e:	4b39      	ldr	r3, [pc, #228]	@ (800d884 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	015b      	lsls	r3, r3, #5
 800d7a4:	0d1b      	lsrs	r3, r3, #20
 800d7a6:	69fa      	ldr	r2, [r7, #28]
 800d7a8:	fb02 f303 	mul.w	r3, r2, r3
 800d7ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d7ae:	e054      	b.n	800d85a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b6:	d050      	beq.n	800d85a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d7b8:	f7f9 fa94 	bl	8006ce4 <HAL_GetTick>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	1ad3      	subs	r3, r2, r3
 800d7c2:	69fa      	ldr	r2, [r7, #28]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d902      	bls.n	800d7ce <SPI_WaitFlagStateUntilTimeout+0x56>
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d13d      	bne.n	800d84a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	685a      	ldr	r2, [r3, #4]
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d7dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d7e6:	d111      	bne.n	800d80c <SPI_WaitFlagStateUntilTimeout+0x94>
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	689b      	ldr	r3, [r3, #8]
 800d7ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d7f0:	d004      	beq.n	800d7fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	689b      	ldr	r3, [r3, #8]
 800d7f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7fa:	d107      	bne.n	800d80c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	681a      	ldr	r2, [r3, #0]
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d80a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d810:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d814:	d10f      	bne.n	800d836 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d824:	601a      	str	r2, [r3, #0]
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d834:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2201      	movs	r2, #1
 800d83a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2200      	movs	r2, #0
 800d842:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d846:	2303      	movs	r3, #3
 800d848:	e017      	b.n	800d87a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d101      	bne.n	800d854 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d850:	2300      	movs	r3, #0
 800d852:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	3b01      	subs	r3, #1
 800d858:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	689a      	ldr	r2, [r3, #8]
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	4013      	ands	r3, r2
 800d864:	68ba      	ldr	r2, [r7, #8]
 800d866:	429a      	cmp	r2, r3
 800d868:	bf0c      	ite	eq
 800d86a:	2301      	moveq	r3, #1
 800d86c:	2300      	movne	r3, #0
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	461a      	mov	r2, r3
 800d872:	79fb      	ldrb	r3, [r7, #7]
 800d874:	429a      	cmp	r2, r3
 800d876:	d19b      	bne.n	800d7b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d878:	2300      	movs	r3, #0
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3720      	adds	r7, #32
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	20000034 	.word	0x20000034

0800d888 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b08a      	sub	sp, #40	@ 0x28
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	60b9      	str	r1, [r7, #8]
 800d892:	607a      	str	r2, [r7, #4]
 800d894:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d896:	2300      	movs	r3, #0
 800d898:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d89a:	f7f9 fa23 	bl	8006ce4 <HAL_GetTick>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a2:	1a9b      	subs	r3, r3, r2
 800d8a4:	683a      	ldr	r2, [r7, #0]
 800d8a6:	4413      	add	r3, r2
 800d8a8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800d8aa:	f7f9 fa1b 	bl	8006ce4 <HAL_GetTick>
 800d8ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	330c      	adds	r3, #12
 800d8b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d8b8:	4b3d      	ldr	r3, [pc, #244]	@ (800d9b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d8ba:	681a      	ldr	r2, [r3, #0]
 800d8bc:	4613      	mov	r3, r2
 800d8be:	009b      	lsls	r3, r3, #2
 800d8c0:	4413      	add	r3, r2
 800d8c2:	00da      	lsls	r2, r3, #3
 800d8c4:	1ad3      	subs	r3, r2, r3
 800d8c6:	0d1b      	lsrs	r3, r3, #20
 800d8c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8ca:	fb02 f303 	mul.w	r3, r2, r3
 800d8ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d8d0:	e060      	b.n	800d994 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d8d8:	d107      	bne.n	800d8ea <SPI_WaitFifoStateUntilTimeout+0x62>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d104      	bne.n	800d8ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d8e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f0:	d050      	beq.n	800d994 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d8f2:	f7f9 f9f7 	bl	8006ce4 <HAL_GetTick>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	6a3b      	ldr	r3, [r7, #32]
 800d8fa:	1ad3      	subs	r3, r2, r3
 800d8fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d902      	bls.n	800d908 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d904:	2b00      	cmp	r3, #0
 800d906:	d13d      	bne.n	800d984 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	685a      	ldr	r2, [r3, #4]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d916:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d920:	d111      	bne.n	800d946 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	689b      	ldr	r3, [r3, #8]
 800d926:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d92a:	d004      	beq.n	800d936 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d934:	d107      	bne.n	800d946 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d944:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d94a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d94e:	d10f      	bne.n	800d970 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d95e:	601a      	str	r2, [r3, #0]
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	681a      	ldr	r2, [r3, #0]
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d96e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2201      	movs	r2, #1
 800d974:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2200      	movs	r2, #0
 800d97c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d980:	2303      	movs	r3, #3
 800d982:	e010      	b.n	800d9a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d984:	69bb      	ldr	r3, [r7, #24]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d101      	bne.n	800d98e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d98a:	2300      	movs	r3, #0
 800d98c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	3b01      	subs	r3, #1
 800d992:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	689a      	ldr	r2, [r3, #8]
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	4013      	ands	r3, r2
 800d99e:	687a      	ldr	r2, [r7, #4]
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d196      	bne.n	800d8d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3728      	adds	r7, #40	@ 0x28
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	20000034 	.word	0x20000034

0800d9b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b086      	sub	sp, #24
 800d9b8:	af02      	add	r7, sp, #8
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d9c8:	d111      	bne.n	800d9ee <SPI_EndRxTransaction+0x3a>
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	689b      	ldr	r3, [r3, #8]
 800d9ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d9d2:	d004      	beq.n	800d9de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d9dc:	d107      	bne.n	800d9ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d9ec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	9300      	str	r3, [sp, #0]
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	2180      	movs	r1, #128	@ 0x80
 800d9f8:	68f8      	ldr	r0, [r7, #12]
 800d9fa:	f7ff febd 	bl	800d778 <SPI_WaitFlagStateUntilTimeout>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d007      	beq.n	800da14 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800da08:	f043 0220 	orr.w	r2, r3, #32
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800da10:	2303      	movs	r3, #3
 800da12:	e023      	b.n	800da5c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800da1c:	d11d      	bne.n	800da5a <SPI_EndRxTransaction+0xa6>
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	689b      	ldr	r3, [r3, #8]
 800da22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800da26:	d004      	beq.n	800da32 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	689b      	ldr	r3, [r3, #8]
 800da2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da30:	d113      	bne.n	800da5a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	9300      	str	r3, [sp, #0]
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	2200      	movs	r2, #0
 800da3a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	f7ff ff22 	bl	800d888 <SPI_WaitFifoStateUntilTimeout>
 800da44:	4603      	mov	r3, r0
 800da46:	2b00      	cmp	r3, #0
 800da48:	d007      	beq.n	800da5a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800da4e:	f043 0220 	orr.w	r2, r3, #32
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800da56:	2303      	movs	r3, #3
 800da58:	e000      	b.n	800da5c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800da5a:	2300      	movs	r3, #0
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3710      	adds	r7, #16
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b086      	sub	sp, #24
 800da68:	af02      	add	r7, sp, #8
 800da6a:	60f8      	str	r0, [r7, #12]
 800da6c:	60b9      	str	r1, [r7, #8]
 800da6e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	9300      	str	r3, [sp, #0]
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	2200      	movs	r2, #0
 800da78:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f7ff ff03 	bl	800d888 <SPI_WaitFifoStateUntilTimeout>
 800da82:	4603      	mov	r3, r0
 800da84:	2b00      	cmp	r3, #0
 800da86:	d007      	beq.n	800da98 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800da8c:	f043 0220 	orr.w	r2, r3, #32
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800da94:	2303      	movs	r3, #3
 800da96:	e027      	b.n	800dae8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	9300      	str	r3, [sp, #0]
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	2200      	movs	r2, #0
 800daa0:	2180      	movs	r1, #128	@ 0x80
 800daa2:	68f8      	ldr	r0, [r7, #12]
 800daa4:	f7ff fe68 	bl	800d778 <SPI_WaitFlagStateUntilTimeout>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d007      	beq.n	800dabe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dab2:	f043 0220 	orr.w	r2, r3, #32
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800daba:	2303      	movs	r3, #3
 800dabc:	e014      	b.n	800dae8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	9300      	str	r3, [sp, #0]
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	2200      	movs	r2, #0
 800dac6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800daca:	68f8      	ldr	r0, [r7, #12]
 800dacc:	f7ff fedc 	bl	800d888 <SPI_WaitFifoStateUntilTimeout>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d007      	beq.n	800dae6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dada:	f043 0220 	orr.w	r2, r3, #32
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800dae2:	2303      	movs	r3, #3
 800dae4:	e000      	b.n	800dae8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800dae6:	2300      	movs	r3, #0
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3710      	adds	r7, #16
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d101      	bne.n	800db02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dafe:	2301      	movs	r3, #1
 800db00:	e049      	b.n	800db96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d106      	bne.n	800db1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2200      	movs	r2, #0
 800db12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f7f6 fd44 	bl	80045a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2202      	movs	r2, #2
 800db20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	3304      	adds	r3, #4
 800db2c:	4619      	mov	r1, r3
 800db2e:	4610      	mov	r0, r2
 800db30:	f000 fde6 	bl	800e700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2201      	movs	r2, #1
 800db38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2201      	movs	r2, #1
 800db40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2201      	movs	r2, #1
 800db48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2201      	movs	r2, #1
 800db50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2201      	movs	r2, #1
 800db58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2201      	movs	r2, #1
 800db60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2201      	movs	r2, #1
 800db68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2201      	movs	r2, #1
 800db70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2201      	movs	r2, #1
 800db78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2201      	movs	r2, #1
 800db88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2201      	movs	r2, #1
 800db90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3708      	adds	r7, #8
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
	...

0800dba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b085      	sub	sp, #20
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dbae:	b2db      	uxtb	r3, r3
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d001      	beq.n	800dbb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	e04f      	b.n	800dc58 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2202      	movs	r2, #2
 800dbbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	68da      	ldr	r2, [r3, #12]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f042 0201 	orr.w	r2, r2, #1
 800dbce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4a23      	ldr	r2, [pc, #140]	@ (800dc64 <HAL_TIM_Base_Start_IT+0xc4>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d01d      	beq.n	800dc16 <HAL_TIM_Base_Start_IT+0x76>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbe2:	d018      	beq.n	800dc16 <HAL_TIM_Base_Start_IT+0x76>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4a1f      	ldr	r2, [pc, #124]	@ (800dc68 <HAL_TIM_Base_Start_IT+0xc8>)
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d013      	beq.n	800dc16 <HAL_TIM_Base_Start_IT+0x76>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	4a1e      	ldr	r2, [pc, #120]	@ (800dc6c <HAL_TIM_Base_Start_IT+0xcc>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d00e      	beq.n	800dc16 <HAL_TIM_Base_Start_IT+0x76>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4a1c      	ldr	r2, [pc, #112]	@ (800dc70 <HAL_TIM_Base_Start_IT+0xd0>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d009      	beq.n	800dc16 <HAL_TIM_Base_Start_IT+0x76>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	4a1b      	ldr	r2, [pc, #108]	@ (800dc74 <HAL_TIM_Base_Start_IT+0xd4>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d004      	beq.n	800dc16 <HAL_TIM_Base_Start_IT+0x76>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a19      	ldr	r2, [pc, #100]	@ (800dc78 <HAL_TIM_Base_Start_IT+0xd8>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d115      	bne.n	800dc42 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	689a      	ldr	r2, [r3, #8]
 800dc1c:	4b17      	ldr	r3, [pc, #92]	@ (800dc7c <HAL_TIM_Base_Start_IT+0xdc>)
 800dc1e:	4013      	ands	r3, r2
 800dc20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2b06      	cmp	r3, #6
 800dc26:	d015      	beq.n	800dc54 <HAL_TIM_Base_Start_IT+0xb4>
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc2e:	d011      	beq.n	800dc54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	681a      	ldr	r2, [r3, #0]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f042 0201 	orr.w	r2, r2, #1
 800dc3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc40:	e008      	b.n	800dc54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f042 0201 	orr.w	r2, r2, #1
 800dc50:	601a      	str	r2, [r3, #0]
 800dc52:	e000      	b.n	800dc56 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dc56:	2300      	movs	r3, #0
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3714      	adds	r7, #20
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr
 800dc64:	40012c00 	.word	0x40012c00
 800dc68:	40000400 	.word	0x40000400
 800dc6c:	40000800 	.word	0x40000800
 800dc70:	40000c00 	.word	0x40000c00
 800dc74:	40013400 	.word	0x40013400
 800dc78:	40014000 	.word	0x40014000
 800dc7c:	00010007 	.word	0x00010007

0800dc80 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d101      	bne.n	800dc92 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e049      	b.n	800dd26 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d106      	bne.n	800dcac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2200      	movs	r2, #0
 800dca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 f841 	bl	800dd2e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2202      	movs	r2, #2
 800dcb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681a      	ldr	r2, [r3, #0]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	3304      	adds	r3, #4
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	4610      	mov	r0, r2
 800dcc0:	f000 fd1e 	bl	800e700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2201      	movs	r2, #1
 800dcd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2201      	movs	r2, #1
 800dce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2201      	movs	r2, #1
 800dce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2201      	movs	r2, #1
 800dd00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2201      	movs	r2, #1
 800dd08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2201      	movs	r2, #1
 800dd10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2201      	movs	r2, #1
 800dd18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2201      	movs	r2, #1
 800dd20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dd24:	2300      	movs	r3, #0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3708      	adds	r7, #8
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800dd2e:	b480      	push	{r7}
 800dd30:	b083      	sub	sp, #12
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800dd36:	bf00      	nop
 800dd38:	370c      	adds	r7, #12
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr

0800dd42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b082      	sub	sp, #8
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d101      	bne.n	800dd54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dd50:	2301      	movs	r3, #1
 800dd52:	e049      	b.n	800dde8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d106      	bne.n	800dd6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f7f6 fb79 	bl	8004460 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2202      	movs	r2, #2
 800dd72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	3304      	adds	r3, #4
 800dd7e:	4619      	mov	r1, r3
 800dd80:	4610      	mov	r0, r2
 800dd82:	f000 fcbd 	bl	800e700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2201      	movs	r2, #1
 800dd8a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2201      	movs	r2, #1
 800dd92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2201      	movs	r2, #1
 800dd9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2201      	movs	r2, #1
 800dda2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2201      	movs	r2, #1
 800ddaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2201      	movs	r2, #1
 800ddba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2201      	movs	r2, #1
 800ddc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2201      	movs	r2, #1
 800ddca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2201      	movs	r2, #1
 800ddda:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2201      	movs	r2, #1
 800dde2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dde6:	2300      	movs	r3, #0
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d109      	bne.n	800de14 <HAL_TIM_PWM_Start+0x24>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800de06:	b2db      	uxtb	r3, r3
 800de08:	2b01      	cmp	r3, #1
 800de0a:	bf14      	ite	ne
 800de0c:	2301      	movne	r3, #1
 800de0e:	2300      	moveq	r3, #0
 800de10:	b2db      	uxtb	r3, r3
 800de12:	e03c      	b.n	800de8e <HAL_TIM_PWM_Start+0x9e>
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	2b04      	cmp	r3, #4
 800de18:	d109      	bne.n	800de2e <HAL_TIM_PWM_Start+0x3e>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800de20:	b2db      	uxtb	r3, r3
 800de22:	2b01      	cmp	r3, #1
 800de24:	bf14      	ite	ne
 800de26:	2301      	movne	r3, #1
 800de28:	2300      	moveq	r3, #0
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	e02f      	b.n	800de8e <HAL_TIM_PWM_Start+0x9e>
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	2b08      	cmp	r3, #8
 800de32:	d109      	bne.n	800de48 <HAL_TIM_PWM_Start+0x58>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	bf14      	ite	ne
 800de40:	2301      	movne	r3, #1
 800de42:	2300      	moveq	r3, #0
 800de44:	b2db      	uxtb	r3, r3
 800de46:	e022      	b.n	800de8e <HAL_TIM_PWM_Start+0x9e>
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	2b0c      	cmp	r3, #12
 800de4c:	d109      	bne.n	800de62 <HAL_TIM_PWM_Start+0x72>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de54:	b2db      	uxtb	r3, r3
 800de56:	2b01      	cmp	r3, #1
 800de58:	bf14      	ite	ne
 800de5a:	2301      	movne	r3, #1
 800de5c:	2300      	moveq	r3, #0
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	e015      	b.n	800de8e <HAL_TIM_PWM_Start+0x9e>
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	2b10      	cmp	r3, #16
 800de66:	d109      	bne.n	800de7c <HAL_TIM_PWM_Start+0x8c>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	2b01      	cmp	r3, #1
 800de72:	bf14      	ite	ne
 800de74:	2301      	movne	r3, #1
 800de76:	2300      	moveq	r3, #0
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	e008      	b.n	800de8e <HAL_TIM_PWM_Start+0x9e>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800de82:	b2db      	uxtb	r3, r3
 800de84:	2b01      	cmp	r3, #1
 800de86:	bf14      	ite	ne
 800de88:	2301      	movne	r3, #1
 800de8a:	2300      	moveq	r3, #0
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d001      	beq.n	800de96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800de92:	2301      	movs	r3, #1
 800de94:	e09c      	b.n	800dfd0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d104      	bne.n	800dea6 <HAL_TIM_PWM_Start+0xb6>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2202      	movs	r2, #2
 800dea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dea4:	e023      	b.n	800deee <HAL_TIM_PWM_Start+0xfe>
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	2b04      	cmp	r3, #4
 800deaa:	d104      	bne.n	800deb6 <HAL_TIM_PWM_Start+0xc6>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2202      	movs	r2, #2
 800deb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800deb4:	e01b      	b.n	800deee <HAL_TIM_PWM_Start+0xfe>
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	2b08      	cmp	r3, #8
 800deba:	d104      	bne.n	800dec6 <HAL_TIM_PWM_Start+0xd6>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2202      	movs	r2, #2
 800dec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dec4:	e013      	b.n	800deee <HAL_TIM_PWM_Start+0xfe>
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	2b0c      	cmp	r3, #12
 800deca:	d104      	bne.n	800ded6 <HAL_TIM_PWM_Start+0xe6>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2202      	movs	r2, #2
 800ded0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ded4:	e00b      	b.n	800deee <HAL_TIM_PWM_Start+0xfe>
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	2b10      	cmp	r3, #16
 800deda:	d104      	bne.n	800dee6 <HAL_TIM_PWM_Start+0xf6>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2202      	movs	r2, #2
 800dee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dee4:	e003      	b.n	800deee <HAL_TIM_PWM_Start+0xfe>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2202      	movs	r2, #2
 800deea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2201      	movs	r2, #1
 800def4:	6839      	ldr	r1, [r7, #0]
 800def6:	4618      	mov	r0, r3
 800def8:	f001 f80c 	bl	800ef14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	4a35      	ldr	r2, [pc, #212]	@ (800dfd8 <HAL_TIM_PWM_Start+0x1e8>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d013      	beq.n	800df2e <HAL_TIM_PWM_Start+0x13e>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4a34      	ldr	r2, [pc, #208]	@ (800dfdc <HAL_TIM_PWM_Start+0x1ec>)
 800df0c:	4293      	cmp	r3, r2
 800df0e:	d00e      	beq.n	800df2e <HAL_TIM_PWM_Start+0x13e>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4a32      	ldr	r2, [pc, #200]	@ (800dfe0 <HAL_TIM_PWM_Start+0x1f0>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d009      	beq.n	800df2e <HAL_TIM_PWM_Start+0x13e>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	4a31      	ldr	r2, [pc, #196]	@ (800dfe4 <HAL_TIM_PWM_Start+0x1f4>)
 800df20:	4293      	cmp	r3, r2
 800df22:	d004      	beq.n	800df2e <HAL_TIM_PWM_Start+0x13e>
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4a2f      	ldr	r2, [pc, #188]	@ (800dfe8 <HAL_TIM_PWM_Start+0x1f8>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d101      	bne.n	800df32 <HAL_TIM_PWM_Start+0x142>
 800df2e:	2301      	movs	r3, #1
 800df30:	e000      	b.n	800df34 <HAL_TIM_PWM_Start+0x144>
 800df32:	2300      	movs	r3, #0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d007      	beq.n	800df48 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800df46:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	4a22      	ldr	r2, [pc, #136]	@ (800dfd8 <HAL_TIM_PWM_Start+0x1e8>)
 800df4e:	4293      	cmp	r3, r2
 800df50:	d01d      	beq.n	800df8e <HAL_TIM_PWM_Start+0x19e>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df5a:	d018      	beq.n	800df8e <HAL_TIM_PWM_Start+0x19e>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4a22      	ldr	r2, [pc, #136]	@ (800dfec <HAL_TIM_PWM_Start+0x1fc>)
 800df62:	4293      	cmp	r3, r2
 800df64:	d013      	beq.n	800df8e <HAL_TIM_PWM_Start+0x19e>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	4a21      	ldr	r2, [pc, #132]	@ (800dff0 <HAL_TIM_PWM_Start+0x200>)
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d00e      	beq.n	800df8e <HAL_TIM_PWM_Start+0x19e>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4a1f      	ldr	r2, [pc, #124]	@ (800dff4 <HAL_TIM_PWM_Start+0x204>)
 800df76:	4293      	cmp	r3, r2
 800df78:	d009      	beq.n	800df8e <HAL_TIM_PWM_Start+0x19e>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4a17      	ldr	r2, [pc, #92]	@ (800dfdc <HAL_TIM_PWM_Start+0x1ec>)
 800df80:	4293      	cmp	r3, r2
 800df82:	d004      	beq.n	800df8e <HAL_TIM_PWM_Start+0x19e>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4a15      	ldr	r2, [pc, #84]	@ (800dfe0 <HAL_TIM_PWM_Start+0x1f0>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d115      	bne.n	800dfba <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	689a      	ldr	r2, [r3, #8]
 800df94:	4b18      	ldr	r3, [pc, #96]	@ (800dff8 <HAL_TIM_PWM_Start+0x208>)
 800df96:	4013      	ands	r3, r2
 800df98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2b06      	cmp	r3, #6
 800df9e:	d015      	beq.n	800dfcc <HAL_TIM_PWM_Start+0x1dc>
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dfa6:	d011      	beq.n	800dfcc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	681a      	ldr	r2, [r3, #0]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f042 0201 	orr.w	r2, r2, #1
 800dfb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfb8:	e008      	b.n	800dfcc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f042 0201 	orr.w	r2, r2, #1
 800dfc8:	601a      	str	r2, [r3, #0]
 800dfca:	e000      	b.n	800dfce <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfcc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dfce:	2300      	movs	r3, #0
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3710      	adds	r7, #16
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	40012c00 	.word	0x40012c00
 800dfdc:	40013400 	.word	0x40013400
 800dfe0:	40014000 	.word	0x40014000
 800dfe4:	40014400 	.word	0x40014400
 800dfe8:	40014800 	.word	0x40014800
 800dfec:	40000400 	.word	0x40000400
 800dff0:	40000800 	.word	0x40000800
 800dff4:	40000c00 	.word	0x40000c00
 800dff8:	00010007 	.word	0x00010007

0800dffc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b084      	sub	sp, #16
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	68db      	ldr	r3, [r3, #12]
 800e00a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	691b      	ldr	r3, [r3, #16]
 800e012:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	f003 0302 	and.w	r3, r3, #2
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d020      	beq.n	800e060 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	f003 0302 	and.w	r3, r3, #2
 800e024:	2b00      	cmp	r3, #0
 800e026:	d01b      	beq.n	800e060 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f06f 0202 	mvn.w	r2, #2
 800e030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2201      	movs	r2, #1
 800e036:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	699b      	ldr	r3, [r3, #24]
 800e03e:	f003 0303 	and.w	r3, r3, #3
 800e042:	2b00      	cmp	r3, #0
 800e044:	d003      	beq.n	800e04e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f000 fb3b 	bl	800e6c2 <HAL_TIM_IC_CaptureCallback>
 800e04c:	e005      	b.n	800e05a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f000 fb2d 	bl	800e6ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f000 fb3e 	bl	800e6d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2200      	movs	r2, #0
 800e05e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	f003 0304 	and.w	r3, r3, #4
 800e066:	2b00      	cmp	r3, #0
 800e068:	d020      	beq.n	800e0ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f003 0304 	and.w	r3, r3, #4
 800e070:	2b00      	cmp	r3, #0
 800e072:	d01b      	beq.n	800e0ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f06f 0204 	mvn.w	r2, #4
 800e07c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2202      	movs	r2, #2
 800e082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	699b      	ldr	r3, [r3, #24]
 800e08a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d003      	beq.n	800e09a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f000 fb15 	bl	800e6c2 <HAL_TIM_IC_CaptureCallback>
 800e098:	e005      	b.n	800e0a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 fb07 	bl	800e6ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 fb18 	bl	800e6d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	f003 0308 	and.w	r3, r3, #8
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d020      	beq.n	800e0f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f003 0308 	and.w	r3, r3, #8
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d01b      	beq.n	800e0f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f06f 0208 	mvn.w	r2, #8
 800e0c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2204      	movs	r2, #4
 800e0ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	69db      	ldr	r3, [r3, #28]
 800e0d6:	f003 0303 	and.w	r3, r3, #3
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d003      	beq.n	800e0e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f000 faef 	bl	800e6c2 <HAL_TIM_IC_CaptureCallback>
 800e0e4:	e005      	b.n	800e0f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 fae1 	bl	800e6ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f000 faf2 	bl	800e6d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	f003 0310 	and.w	r3, r3, #16
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d020      	beq.n	800e144 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	f003 0310 	and.w	r3, r3, #16
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d01b      	beq.n	800e144 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f06f 0210 	mvn.w	r2, #16
 800e114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2208      	movs	r2, #8
 800e11a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	69db      	ldr	r3, [r3, #28]
 800e122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e126:	2b00      	cmp	r3, #0
 800e128:	d003      	beq.n	800e132 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f000 fac9 	bl	800e6c2 <HAL_TIM_IC_CaptureCallback>
 800e130:	e005      	b.n	800e13e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 fabb 	bl	800e6ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f000 facc 	bl	800e6d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2200      	movs	r2, #0
 800e142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	f003 0301 	and.w	r3, r3, #1
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d00c      	beq.n	800e168 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f003 0301 	and.w	r3, r3, #1
 800e154:	2b00      	cmp	r3, #0
 800e156:	d007      	beq.n	800e168 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f06f 0201 	mvn.w	r2, #1
 800e160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f7f5 fe30 	bl	8003dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d00c      	beq.n	800e18c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d007      	beq.n	800e18c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800e184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f001 f8c0 	bl	800f30c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00c      	beq.n	800e1b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d007      	beq.n	800e1b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e1a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f001 f8b8 	bl	800f320 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d00c      	beq.n	800e1d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d007      	beq.n	800e1d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e1cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f000 fa8b 	bl	800e6ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	f003 0320 	and.w	r3, r3, #32
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d00c      	beq.n	800e1f8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f003 0320 	and.w	r3, r3, #32
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d007      	beq.n	800e1f8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	f06f 0220 	mvn.w	r2, #32
 800e1f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f001 f880 	bl	800f2f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e1f8:	bf00      	nop
 800e1fa:	3710      	adds	r7, #16
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b086      	sub	sp, #24
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e20c:	2300      	movs	r3, #0
 800e20e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e216:	2b01      	cmp	r3, #1
 800e218:	d101      	bne.n	800e21e <HAL_TIM_OC_ConfigChannel+0x1e>
 800e21a:	2302      	movs	r3, #2
 800e21c:	e066      	b.n	800e2ec <HAL_TIM_OC_ConfigChannel+0xec>
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2201      	movs	r2, #1
 800e222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2b14      	cmp	r3, #20
 800e22a:	d857      	bhi.n	800e2dc <HAL_TIM_OC_ConfigChannel+0xdc>
 800e22c:	a201      	add	r2, pc, #4	@ (adr r2, 800e234 <HAL_TIM_OC_ConfigChannel+0x34>)
 800e22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e232:	bf00      	nop
 800e234:	0800e289 	.word	0x0800e289
 800e238:	0800e2dd 	.word	0x0800e2dd
 800e23c:	0800e2dd 	.word	0x0800e2dd
 800e240:	0800e2dd 	.word	0x0800e2dd
 800e244:	0800e297 	.word	0x0800e297
 800e248:	0800e2dd 	.word	0x0800e2dd
 800e24c:	0800e2dd 	.word	0x0800e2dd
 800e250:	0800e2dd 	.word	0x0800e2dd
 800e254:	0800e2a5 	.word	0x0800e2a5
 800e258:	0800e2dd 	.word	0x0800e2dd
 800e25c:	0800e2dd 	.word	0x0800e2dd
 800e260:	0800e2dd 	.word	0x0800e2dd
 800e264:	0800e2b3 	.word	0x0800e2b3
 800e268:	0800e2dd 	.word	0x0800e2dd
 800e26c:	0800e2dd 	.word	0x0800e2dd
 800e270:	0800e2dd 	.word	0x0800e2dd
 800e274:	0800e2c1 	.word	0x0800e2c1
 800e278:	0800e2dd 	.word	0x0800e2dd
 800e27c:	0800e2dd 	.word	0x0800e2dd
 800e280:	0800e2dd 	.word	0x0800e2dd
 800e284:	0800e2cf 	.word	0x0800e2cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	68b9      	ldr	r1, [r7, #8]
 800e28e:	4618      	mov	r0, r3
 800e290:	f000 fad0 	bl	800e834 <TIM_OC1_SetConfig>
      break;
 800e294:	e025      	b.n	800e2e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	68b9      	ldr	r1, [r7, #8]
 800e29c:	4618      	mov	r0, r3
 800e29e:	f000 fb59 	bl	800e954 <TIM_OC2_SetConfig>
      break;
 800e2a2:	e01e      	b.n	800e2e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	68b9      	ldr	r1, [r7, #8]
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f000 fbdc 	bl	800ea68 <TIM_OC3_SetConfig>
      break;
 800e2b0:	e017      	b.n	800e2e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	68b9      	ldr	r1, [r7, #8]
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f000 fc5d 	bl	800eb78 <TIM_OC4_SetConfig>
      break;
 800e2be:	e010      	b.n	800e2e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	68b9      	ldr	r1, [r7, #8]
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f000 fcc0 	bl	800ec4c <TIM_OC5_SetConfig>
      break;
 800e2cc:	e009      	b.n	800e2e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	68b9      	ldr	r1, [r7, #8]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f000 fd1d 	bl	800ed14 <TIM_OC6_SetConfig>
      break;
 800e2da:	e002      	b.n	800e2e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800e2dc:	2301      	movs	r3, #1
 800e2de:	75fb      	strb	r3, [r7, #23]
      break;
 800e2e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e2ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3718      	adds	r7, #24
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b086      	sub	sp, #24
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	60f8      	str	r0, [r7, #12]
 800e2fc:	60b9      	str	r1, [r7, #8]
 800e2fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e300:	2300      	movs	r3, #0
 800e302:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e30a:	2b01      	cmp	r3, #1
 800e30c:	d101      	bne.n	800e312 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e30e:	2302      	movs	r3, #2
 800e310:	e0ff      	b.n	800e512 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2201      	movs	r2, #1
 800e316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2b14      	cmp	r3, #20
 800e31e:	f200 80f0 	bhi.w	800e502 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e322:	a201      	add	r2, pc, #4	@ (adr r2, 800e328 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e328:	0800e37d 	.word	0x0800e37d
 800e32c:	0800e503 	.word	0x0800e503
 800e330:	0800e503 	.word	0x0800e503
 800e334:	0800e503 	.word	0x0800e503
 800e338:	0800e3bd 	.word	0x0800e3bd
 800e33c:	0800e503 	.word	0x0800e503
 800e340:	0800e503 	.word	0x0800e503
 800e344:	0800e503 	.word	0x0800e503
 800e348:	0800e3ff 	.word	0x0800e3ff
 800e34c:	0800e503 	.word	0x0800e503
 800e350:	0800e503 	.word	0x0800e503
 800e354:	0800e503 	.word	0x0800e503
 800e358:	0800e43f 	.word	0x0800e43f
 800e35c:	0800e503 	.word	0x0800e503
 800e360:	0800e503 	.word	0x0800e503
 800e364:	0800e503 	.word	0x0800e503
 800e368:	0800e481 	.word	0x0800e481
 800e36c:	0800e503 	.word	0x0800e503
 800e370:	0800e503 	.word	0x0800e503
 800e374:	0800e503 	.word	0x0800e503
 800e378:	0800e4c1 	.word	0x0800e4c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	68b9      	ldr	r1, [r7, #8]
 800e382:	4618      	mov	r0, r3
 800e384:	f000 fa56 	bl	800e834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	699a      	ldr	r2, [r3, #24]
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f042 0208 	orr.w	r2, r2, #8
 800e396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	699a      	ldr	r2, [r3, #24]
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f022 0204 	bic.w	r2, r2, #4
 800e3a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	6999      	ldr	r1, [r3, #24]
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	691a      	ldr	r2, [r3, #16]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	430a      	orrs	r2, r1
 800e3b8:	619a      	str	r2, [r3, #24]
      break;
 800e3ba:	e0a5      	b.n	800e508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	68b9      	ldr	r1, [r7, #8]
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f000 fac6 	bl	800e954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	699a      	ldr	r2, [r3, #24]
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e3d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	699a      	ldr	r2, [r3, #24]
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e3e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	6999      	ldr	r1, [r3, #24]
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	691b      	ldr	r3, [r3, #16]
 800e3f2:	021a      	lsls	r2, r3, #8
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	430a      	orrs	r2, r1
 800e3fa:	619a      	str	r2, [r3, #24]
      break;
 800e3fc:	e084      	b.n	800e508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	68b9      	ldr	r1, [r7, #8]
 800e404:	4618      	mov	r0, r3
 800e406:	f000 fb2f 	bl	800ea68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	69da      	ldr	r2, [r3, #28]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f042 0208 	orr.w	r2, r2, #8
 800e418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	69da      	ldr	r2, [r3, #28]
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f022 0204 	bic.w	r2, r2, #4
 800e428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	69d9      	ldr	r1, [r3, #28]
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	691a      	ldr	r2, [r3, #16]
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	430a      	orrs	r2, r1
 800e43a:	61da      	str	r2, [r3, #28]
      break;
 800e43c:	e064      	b.n	800e508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	68b9      	ldr	r1, [r7, #8]
 800e444:	4618      	mov	r0, r3
 800e446:	f000 fb97 	bl	800eb78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	69da      	ldr	r2, [r3, #28]
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	69da      	ldr	r2, [r3, #28]
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	69d9      	ldr	r1, [r3, #28]
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	691b      	ldr	r3, [r3, #16]
 800e474:	021a      	lsls	r2, r3, #8
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	430a      	orrs	r2, r1
 800e47c:	61da      	str	r2, [r3, #28]
      break;
 800e47e:	e043      	b.n	800e508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	68b9      	ldr	r1, [r7, #8]
 800e486:	4618      	mov	r0, r3
 800e488:	f000 fbe0 	bl	800ec4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f042 0208 	orr.w	r2, r2, #8
 800e49a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f022 0204 	bic.w	r2, r2, #4
 800e4aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	691a      	ldr	r2, [r3, #16]
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	430a      	orrs	r2, r1
 800e4bc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e4be:	e023      	b.n	800e508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	68b9      	ldr	r1, [r7, #8]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f000 fc24 	bl	800ed14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e4da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e4ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	691b      	ldr	r3, [r3, #16]
 800e4f6:	021a      	lsls	r2, r3, #8
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	430a      	orrs	r2, r1
 800e4fe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e500:	e002      	b.n	800e508 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e502:	2301      	movs	r3, #1
 800e504:	75fb      	strb	r3, [r7, #23]
      break;
 800e506:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2200      	movs	r2, #0
 800e50c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e510:	7dfb      	ldrb	r3, [r7, #23]
}
 800e512:	4618      	mov	r0, r3
 800e514:	3718      	adds	r7, #24
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
 800e51a:	bf00      	nop

0800e51c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e526:	2300      	movs	r3, #0
 800e528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e530:	2b01      	cmp	r3, #1
 800e532:	d101      	bne.n	800e538 <HAL_TIM_ConfigClockSource+0x1c>
 800e534:	2302      	movs	r3, #2
 800e536:	e0b6      	b.n	800e6a6 <HAL_TIM_ConfigClockSource+0x18a>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2201      	movs	r2, #1
 800e53c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2202      	movs	r2, #2
 800e544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	689b      	ldr	r3, [r3, #8]
 800e54e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e556:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e55a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	68ba      	ldr	r2, [r7, #8]
 800e56a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e574:	d03e      	beq.n	800e5f4 <HAL_TIM_ConfigClockSource+0xd8>
 800e576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e57a:	f200 8087 	bhi.w	800e68c <HAL_TIM_ConfigClockSource+0x170>
 800e57e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e582:	f000 8086 	beq.w	800e692 <HAL_TIM_ConfigClockSource+0x176>
 800e586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e58a:	d87f      	bhi.n	800e68c <HAL_TIM_ConfigClockSource+0x170>
 800e58c:	2b70      	cmp	r3, #112	@ 0x70
 800e58e:	d01a      	beq.n	800e5c6 <HAL_TIM_ConfigClockSource+0xaa>
 800e590:	2b70      	cmp	r3, #112	@ 0x70
 800e592:	d87b      	bhi.n	800e68c <HAL_TIM_ConfigClockSource+0x170>
 800e594:	2b60      	cmp	r3, #96	@ 0x60
 800e596:	d050      	beq.n	800e63a <HAL_TIM_ConfigClockSource+0x11e>
 800e598:	2b60      	cmp	r3, #96	@ 0x60
 800e59a:	d877      	bhi.n	800e68c <HAL_TIM_ConfigClockSource+0x170>
 800e59c:	2b50      	cmp	r3, #80	@ 0x50
 800e59e:	d03c      	beq.n	800e61a <HAL_TIM_ConfigClockSource+0xfe>
 800e5a0:	2b50      	cmp	r3, #80	@ 0x50
 800e5a2:	d873      	bhi.n	800e68c <HAL_TIM_ConfigClockSource+0x170>
 800e5a4:	2b40      	cmp	r3, #64	@ 0x40
 800e5a6:	d058      	beq.n	800e65a <HAL_TIM_ConfigClockSource+0x13e>
 800e5a8:	2b40      	cmp	r3, #64	@ 0x40
 800e5aa:	d86f      	bhi.n	800e68c <HAL_TIM_ConfigClockSource+0x170>
 800e5ac:	2b30      	cmp	r3, #48	@ 0x30
 800e5ae:	d064      	beq.n	800e67a <HAL_TIM_ConfigClockSource+0x15e>
 800e5b0:	2b30      	cmp	r3, #48	@ 0x30
 800e5b2:	d86b      	bhi.n	800e68c <HAL_TIM_ConfigClockSource+0x170>
 800e5b4:	2b20      	cmp	r3, #32
 800e5b6:	d060      	beq.n	800e67a <HAL_TIM_ConfigClockSource+0x15e>
 800e5b8:	2b20      	cmp	r3, #32
 800e5ba:	d867      	bhi.n	800e68c <HAL_TIM_ConfigClockSource+0x170>
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d05c      	beq.n	800e67a <HAL_TIM_ConfigClockSource+0x15e>
 800e5c0:	2b10      	cmp	r3, #16
 800e5c2:	d05a      	beq.n	800e67a <HAL_TIM_ConfigClockSource+0x15e>
 800e5c4:	e062      	b.n	800e68c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e5d6:	f000 fc7d 	bl	800eed4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	689b      	ldr	r3, [r3, #8]
 800e5e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e5e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	68ba      	ldr	r2, [r7, #8]
 800e5f0:	609a      	str	r2, [r3, #8]
      break;
 800e5f2:	e04f      	b.n	800e694 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e604:	f000 fc66 	bl	800eed4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	689a      	ldr	r2, [r3, #8]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e616:	609a      	str	r2, [r3, #8]
      break;
 800e618:	e03c      	b.n	800e694 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e626:	461a      	mov	r2, r3
 800e628:	f000 fbda 	bl	800ede0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	2150      	movs	r1, #80	@ 0x50
 800e632:	4618      	mov	r0, r3
 800e634:	f000 fc33 	bl	800ee9e <TIM_ITRx_SetConfig>
      break;
 800e638:	e02c      	b.n	800e694 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e646:	461a      	mov	r2, r3
 800e648:	f000 fbf9 	bl	800ee3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2160      	movs	r1, #96	@ 0x60
 800e652:	4618      	mov	r0, r3
 800e654:	f000 fc23 	bl	800ee9e <TIM_ITRx_SetConfig>
      break;
 800e658:	e01c      	b.n	800e694 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e666:	461a      	mov	r2, r3
 800e668:	f000 fbba 	bl	800ede0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	2140      	movs	r1, #64	@ 0x40
 800e672:	4618      	mov	r0, r3
 800e674:	f000 fc13 	bl	800ee9e <TIM_ITRx_SetConfig>
      break;
 800e678:	e00c      	b.n	800e694 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4619      	mov	r1, r3
 800e684:	4610      	mov	r0, r2
 800e686:	f000 fc0a 	bl	800ee9e <TIM_ITRx_SetConfig>
      break;
 800e68a:	e003      	b.n	800e694 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800e68c:	2301      	movs	r3, #1
 800e68e:	73fb      	strb	r3, [r7, #15]
      break;
 800e690:	e000      	b.n	800e694 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800e692:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2201      	movs	r2, #1
 800e698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3710      	adds	r7, #16
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}

0800e6ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e6ae:	b480      	push	{r7}
 800e6b0:	b083      	sub	sp, #12
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e6b6:	bf00      	nop
 800e6b8:	370c      	adds	r7, #12
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c0:	4770      	bx	lr

0800e6c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e6c2:	b480      	push	{r7}
 800e6c4:	b083      	sub	sp, #12
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e6ca:	bf00      	nop
 800e6cc:	370c      	adds	r7, #12
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d4:	4770      	bx	lr

0800e6d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e6d6:	b480      	push	{r7}
 800e6d8:	b083      	sub	sp, #12
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e6de:	bf00      	nop
 800e6e0:	370c      	adds	r7, #12
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr

0800e6ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e6ea:	b480      	push	{r7}
 800e6ec:	b083      	sub	sp, #12
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e6f2:	bf00      	nop
 800e6f4:	370c      	adds	r7, #12
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fc:	4770      	bx	lr
	...

0800e700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e700:	b480      	push	{r7}
 800e702:	b085      	sub	sp, #20
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	4a40      	ldr	r2, [pc, #256]	@ (800e814 <TIM_Base_SetConfig+0x114>)
 800e714:	4293      	cmp	r3, r2
 800e716:	d013      	beq.n	800e740 <TIM_Base_SetConfig+0x40>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e71e:	d00f      	beq.n	800e740 <TIM_Base_SetConfig+0x40>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	4a3d      	ldr	r2, [pc, #244]	@ (800e818 <TIM_Base_SetConfig+0x118>)
 800e724:	4293      	cmp	r3, r2
 800e726:	d00b      	beq.n	800e740 <TIM_Base_SetConfig+0x40>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	4a3c      	ldr	r2, [pc, #240]	@ (800e81c <TIM_Base_SetConfig+0x11c>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d007      	beq.n	800e740 <TIM_Base_SetConfig+0x40>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	4a3b      	ldr	r2, [pc, #236]	@ (800e820 <TIM_Base_SetConfig+0x120>)
 800e734:	4293      	cmp	r3, r2
 800e736:	d003      	beq.n	800e740 <TIM_Base_SetConfig+0x40>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4a3a      	ldr	r2, [pc, #232]	@ (800e824 <TIM_Base_SetConfig+0x124>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d108      	bne.n	800e752 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	68fa      	ldr	r2, [r7, #12]
 800e74e:	4313      	orrs	r3, r2
 800e750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	4a2f      	ldr	r2, [pc, #188]	@ (800e814 <TIM_Base_SetConfig+0x114>)
 800e756:	4293      	cmp	r3, r2
 800e758:	d01f      	beq.n	800e79a <TIM_Base_SetConfig+0x9a>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e760:	d01b      	beq.n	800e79a <TIM_Base_SetConfig+0x9a>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	4a2c      	ldr	r2, [pc, #176]	@ (800e818 <TIM_Base_SetConfig+0x118>)
 800e766:	4293      	cmp	r3, r2
 800e768:	d017      	beq.n	800e79a <TIM_Base_SetConfig+0x9a>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	4a2b      	ldr	r2, [pc, #172]	@ (800e81c <TIM_Base_SetConfig+0x11c>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d013      	beq.n	800e79a <TIM_Base_SetConfig+0x9a>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	4a2a      	ldr	r2, [pc, #168]	@ (800e820 <TIM_Base_SetConfig+0x120>)
 800e776:	4293      	cmp	r3, r2
 800e778:	d00f      	beq.n	800e79a <TIM_Base_SetConfig+0x9a>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	4a29      	ldr	r2, [pc, #164]	@ (800e824 <TIM_Base_SetConfig+0x124>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	d00b      	beq.n	800e79a <TIM_Base_SetConfig+0x9a>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	4a28      	ldr	r2, [pc, #160]	@ (800e828 <TIM_Base_SetConfig+0x128>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d007      	beq.n	800e79a <TIM_Base_SetConfig+0x9a>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	4a27      	ldr	r2, [pc, #156]	@ (800e82c <TIM_Base_SetConfig+0x12c>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d003      	beq.n	800e79a <TIM_Base_SetConfig+0x9a>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	4a26      	ldr	r2, [pc, #152]	@ (800e830 <TIM_Base_SetConfig+0x130>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d108      	bne.n	800e7ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e7a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	68db      	ldr	r3, [r3, #12]
 800e7a6:	68fa      	ldr	r2, [r7, #12]
 800e7a8:	4313      	orrs	r3, r2
 800e7aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	695b      	ldr	r3, [r3, #20]
 800e7b6:	4313      	orrs	r3, r2
 800e7b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	68fa      	ldr	r2, [r7, #12]
 800e7be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	689a      	ldr	r2, [r3, #8]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	681a      	ldr	r2, [r3, #0]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	4a10      	ldr	r2, [pc, #64]	@ (800e814 <TIM_Base_SetConfig+0x114>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d00f      	beq.n	800e7f8 <TIM_Base_SetConfig+0xf8>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	4a12      	ldr	r2, [pc, #72]	@ (800e824 <TIM_Base_SetConfig+0x124>)
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d00b      	beq.n	800e7f8 <TIM_Base_SetConfig+0xf8>
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	4a11      	ldr	r2, [pc, #68]	@ (800e828 <TIM_Base_SetConfig+0x128>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d007      	beq.n	800e7f8 <TIM_Base_SetConfig+0xf8>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	4a10      	ldr	r2, [pc, #64]	@ (800e82c <TIM_Base_SetConfig+0x12c>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d003      	beq.n	800e7f8 <TIM_Base_SetConfig+0xf8>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	4a0f      	ldr	r2, [pc, #60]	@ (800e830 <TIM_Base_SetConfig+0x130>)
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d103      	bne.n	800e800 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	691a      	ldr	r2, [r3, #16]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2201      	movs	r2, #1
 800e804:	615a      	str	r2, [r3, #20]
}
 800e806:	bf00      	nop
 800e808:	3714      	adds	r7, #20
 800e80a:	46bd      	mov	sp, r7
 800e80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e810:	4770      	bx	lr
 800e812:	bf00      	nop
 800e814:	40012c00 	.word	0x40012c00
 800e818:	40000400 	.word	0x40000400
 800e81c:	40000800 	.word	0x40000800
 800e820:	40000c00 	.word	0x40000c00
 800e824:	40013400 	.word	0x40013400
 800e828:	40014000 	.word	0x40014000
 800e82c:	40014400 	.word	0x40014400
 800e830:	40014800 	.word	0x40014800

0800e834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e834:	b480      	push	{r7}
 800e836:	b087      	sub	sp, #28
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6a1b      	ldr	r3, [r3, #32]
 800e842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6a1b      	ldr	r3, [r3, #32]
 800e848:	f023 0201 	bic.w	r2, r3, #1
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	699b      	ldr	r3, [r3, #24]
 800e85a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f023 0303 	bic.w	r3, r3, #3
 800e86e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	68fa      	ldr	r2, [r7, #12]
 800e876:	4313      	orrs	r3, r2
 800e878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	f023 0302 	bic.w	r3, r3, #2
 800e880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	689b      	ldr	r3, [r3, #8]
 800e886:	697a      	ldr	r2, [r7, #20]
 800e888:	4313      	orrs	r3, r2
 800e88a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	4a2c      	ldr	r2, [pc, #176]	@ (800e940 <TIM_OC1_SetConfig+0x10c>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d00f      	beq.n	800e8b4 <TIM_OC1_SetConfig+0x80>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	4a2b      	ldr	r2, [pc, #172]	@ (800e944 <TIM_OC1_SetConfig+0x110>)
 800e898:	4293      	cmp	r3, r2
 800e89a:	d00b      	beq.n	800e8b4 <TIM_OC1_SetConfig+0x80>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	4a2a      	ldr	r2, [pc, #168]	@ (800e948 <TIM_OC1_SetConfig+0x114>)
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d007      	beq.n	800e8b4 <TIM_OC1_SetConfig+0x80>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	4a29      	ldr	r2, [pc, #164]	@ (800e94c <TIM_OC1_SetConfig+0x118>)
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	d003      	beq.n	800e8b4 <TIM_OC1_SetConfig+0x80>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	4a28      	ldr	r2, [pc, #160]	@ (800e950 <TIM_OC1_SetConfig+0x11c>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d10c      	bne.n	800e8ce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	f023 0308 	bic.w	r3, r3, #8
 800e8ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	68db      	ldr	r3, [r3, #12]
 800e8c0:	697a      	ldr	r2, [r7, #20]
 800e8c2:	4313      	orrs	r3, r2
 800e8c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	f023 0304 	bic.w	r3, r3, #4
 800e8cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	4a1b      	ldr	r2, [pc, #108]	@ (800e940 <TIM_OC1_SetConfig+0x10c>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d00f      	beq.n	800e8f6 <TIM_OC1_SetConfig+0xc2>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	4a1a      	ldr	r2, [pc, #104]	@ (800e944 <TIM_OC1_SetConfig+0x110>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d00b      	beq.n	800e8f6 <TIM_OC1_SetConfig+0xc2>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	4a19      	ldr	r2, [pc, #100]	@ (800e948 <TIM_OC1_SetConfig+0x114>)
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	d007      	beq.n	800e8f6 <TIM_OC1_SetConfig+0xc2>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	4a18      	ldr	r2, [pc, #96]	@ (800e94c <TIM_OC1_SetConfig+0x118>)
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d003      	beq.n	800e8f6 <TIM_OC1_SetConfig+0xc2>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	4a17      	ldr	r2, [pc, #92]	@ (800e950 <TIM_OC1_SetConfig+0x11c>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d111      	bne.n	800e91a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e8fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	695b      	ldr	r3, [r3, #20]
 800e90a:	693a      	ldr	r2, [r7, #16]
 800e90c:	4313      	orrs	r3, r2
 800e90e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	699b      	ldr	r3, [r3, #24]
 800e914:	693a      	ldr	r2, [r7, #16]
 800e916:	4313      	orrs	r3, r2
 800e918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	693a      	ldr	r2, [r7, #16]
 800e91e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	68fa      	ldr	r2, [r7, #12]
 800e924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	685a      	ldr	r2, [r3, #4]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	697a      	ldr	r2, [r7, #20]
 800e932:	621a      	str	r2, [r3, #32]
}
 800e934:	bf00      	nop
 800e936:	371c      	adds	r7, #28
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr
 800e940:	40012c00 	.word	0x40012c00
 800e944:	40013400 	.word	0x40013400
 800e948:	40014000 	.word	0x40014000
 800e94c:	40014400 	.word	0x40014400
 800e950:	40014800 	.word	0x40014800

0800e954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e954:	b480      	push	{r7}
 800e956:	b087      	sub	sp, #28
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6a1b      	ldr	r3, [r3, #32]
 800e962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6a1b      	ldr	r3, [r3, #32]
 800e968:	f023 0210 	bic.w	r2, r3, #16
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	685b      	ldr	r3, [r3, #4]
 800e974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	699b      	ldr	r3, [r3, #24]
 800e97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e98e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	021b      	lsls	r3, r3, #8
 800e996:	68fa      	ldr	r2, [r7, #12]
 800e998:	4313      	orrs	r3, r2
 800e99a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	f023 0320 	bic.w	r3, r3, #32
 800e9a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	689b      	ldr	r3, [r3, #8]
 800e9a8:	011b      	lsls	r3, r3, #4
 800e9aa:	697a      	ldr	r2, [r7, #20]
 800e9ac:	4313      	orrs	r3, r2
 800e9ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	4a28      	ldr	r2, [pc, #160]	@ (800ea54 <TIM_OC2_SetConfig+0x100>)
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d003      	beq.n	800e9c0 <TIM_OC2_SetConfig+0x6c>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	4a27      	ldr	r2, [pc, #156]	@ (800ea58 <TIM_OC2_SetConfig+0x104>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d10d      	bne.n	800e9dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e9c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	68db      	ldr	r3, [r3, #12]
 800e9cc:	011b      	lsls	r3, r3, #4
 800e9ce:	697a      	ldr	r2, [r7, #20]
 800e9d0:	4313      	orrs	r3, r2
 800e9d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	4a1d      	ldr	r2, [pc, #116]	@ (800ea54 <TIM_OC2_SetConfig+0x100>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d00f      	beq.n	800ea04 <TIM_OC2_SetConfig+0xb0>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	4a1c      	ldr	r2, [pc, #112]	@ (800ea58 <TIM_OC2_SetConfig+0x104>)
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d00b      	beq.n	800ea04 <TIM_OC2_SetConfig+0xb0>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	4a1b      	ldr	r2, [pc, #108]	@ (800ea5c <TIM_OC2_SetConfig+0x108>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d007      	beq.n	800ea04 <TIM_OC2_SetConfig+0xb0>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	4a1a      	ldr	r2, [pc, #104]	@ (800ea60 <TIM_OC2_SetConfig+0x10c>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d003      	beq.n	800ea04 <TIM_OC2_SetConfig+0xb0>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	4a19      	ldr	r2, [pc, #100]	@ (800ea64 <TIM_OC2_SetConfig+0x110>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d113      	bne.n	800ea2c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ea0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ea12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	695b      	ldr	r3, [r3, #20]
 800ea18:	009b      	lsls	r3, r3, #2
 800ea1a:	693a      	ldr	r2, [r7, #16]
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	699b      	ldr	r3, [r3, #24]
 800ea24:	009b      	lsls	r3, r3, #2
 800ea26:	693a      	ldr	r2, [r7, #16]
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	693a      	ldr	r2, [r7, #16]
 800ea30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	68fa      	ldr	r2, [r7, #12]
 800ea36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	685a      	ldr	r2, [r3, #4]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	697a      	ldr	r2, [r7, #20]
 800ea44:	621a      	str	r2, [r3, #32]
}
 800ea46:	bf00      	nop
 800ea48:	371c      	adds	r7, #28
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr
 800ea52:	bf00      	nop
 800ea54:	40012c00 	.word	0x40012c00
 800ea58:	40013400 	.word	0x40013400
 800ea5c:	40014000 	.word	0x40014000
 800ea60:	40014400 	.word	0x40014400
 800ea64:	40014800 	.word	0x40014800

0800ea68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b087      	sub	sp, #28
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6a1b      	ldr	r3, [r3, #32]
 800ea76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6a1b      	ldr	r3, [r3, #32]
 800ea7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	69db      	ldr	r3, [r3, #28]
 800ea8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ea96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	f023 0303 	bic.w	r3, r3, #3
 800eaa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	68fa      	ldr	r2, [r7, #12]
 800eaaa:	4313      	orrs	r3, r2
 800eaac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	689b      	ldr	r3, [r3, #8]
 800eaba:	021b      	lsls	r3, r3, #8
 800eabc:	697a      	ldr	r2, [r7, #20]
 800eabe:	4313      	orrs	r3, r2
 800eac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	4a27      	ldr	r2, [pc, #156]	@ (800eb64 <TIM_OC3_SetConfig+0xfc>)
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d003      	beq.n	800ead2 <TIM_OC3_SetConfig+0x6a>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	4a26      	ldr	r2, [pc, #152]	@ (800eb68 <TIM_OC3_SetConfig+0x100>)
 800eace:	4293      	cmp	r3, r2
 800ead0:	d10d      	bne.n	800eaee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ead8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	021b      	lsls	r3, r3, #8
 800eae0:	697a      	ldr	r2, [r7, #20]
 800eae2:	4313      	orrs	r3, r2
 800eae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eaec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4a1c      	ldr	r2, [pc, #112]	@ (800eb64 <TIM_OC3_SetConfig+0xfc>)
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d00f      	beq.n	800eb16 <TIM_OC3_SetConfig+0xae>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	4a1b      	ldr	r2, [pc, #108]	@ (800eb68 <TIM_OC3_SetConfig+0x100>)
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d00b      	beq.n	800eb16 <TIM_OC3_SetConfig+0xae>
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	4a1a      	ldr	r2, [pc, #104]	@ (800eb6c <TIM_OC3_SetConfig+0x104>)
 800eb02:	4293      	cmp	r3, r2
 800eb04:	d007      	beq.n	800eb16 <TIM_OC3_SetConfig+0xae>
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	4a19      	ldr	r2, [pc, #100]	@ (800eb70 <TIM_OC3_SetConfig+0x108>)
 800eb0a:	4293      	cmp	r3, r2
 800eb0c:	d003      	beq.n	800eb16 <TIM_OC3_SetConfig+0xae>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	4a18      	ldr	r2, [pc, #96]	@ (800eb74 <TIM_OC3_SetConfig+0x10c>)
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d113      	bne.n	800eb3e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800eb24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	695b      	ldr	r3, [r3, #20]
 800eb2a:	011b      	lsls	r3, r3, #4
 800eb2c:	693a      	ldr	r2, [r7, #16]
 800eb2e:	4313      	orrs	r3, r2
 800eb30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	699b      	ldr	r3, [r3, #24]
 800eb36:	011b      	lsls	r3, r3, #4
 800eb38:	693a      	ldr	r2, [r7, #16]
 800eb3a:	4313      	orrs	r3, r2
 800eb3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	693a      	ldr	r2, [r7, #16]
 800eb42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	68fa      	ldr	r2, [r7, #12]
 800eb48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	685a      	ldr	r2, [r3, #4]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	697a      	ldr	r2, [r7, #20]
 800eb56:	621a      	str	r2, [r3, #32]
}
 800eb58:	bf00      	nop
 800eb5a:	371c      	adds	r7, #28
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr
 800eb64:	40012c00 	.word	0x40012c00
 800eb68:	40013400 	.word	0x40013400
 800eb6c:	40014000 	.word	0x40014000
 800eb70:	40014400 	.word	0x40014400
 800eb74:	40014800 	.word	0x40014800

0800eb78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b087      	sub	sp, #28
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6a1b      	ldr	r3, [r3, #32]
 800eb86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6a1b      	ldr	r3, [r3, #32]
 800eb8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	685b      	ldr	r3, [r3, #4]
 800eb98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	69db      	ldr	r3, [r3, #28]
 800eb9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800eba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ebaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ebb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	021b      	lsls	r3, r3, #8
 800ebba:	68fa      	ldr	r2, [r7, #12]
 800ebbc:	4313      	orrs	r3, r2
 800ebbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ebc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	689b      	ldr	r3, [r3, #8]
 800ebcc:	031b      	lsls	r3, r3, #12
 800ebce:	693a      	ldr	r2, [r7, #16]
 800ebd0:	4313      	orrs	r3, r2
 800ebd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	4a18      	ldr	r2, [pc, #96]	@ (800ec38 <TIM_OC4_SetConfig+0xc0>)
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	d00f      	beq.n	800ebfc <TIM_OC4_SetConfig+0x84>
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	4a17      	ldr	r2, [pc, #92]	@ (800ec3c <TIM_OC4_SetConfig+0xc4>)
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d00b      	beq.n	800ebfc <TIM_OC4_SetConfig+0x84>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	4a16      	ldr	r2, [pc, #88]	@ (800ec40 <TIM_OC4_SetConfig+0xc8>)
 800ebe8:	4293      	cmp	r3, r2
 800ebea:	d007      	beq.n	800ebfc <TIM_OC4_SetConfig+0x84>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	4a15      	ldr	r2, [pc, #84]	@ (800ec44 <TIM_OC4_SetConfig+0xcc>)
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d003      	beq.n	800ebfc <TIM_OC4_SetConfig+0x84>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	4a14      	ldr	r2, [pc, #80]	@ (800ec48 <TIM_OC4_SetConfig+0xd0>)
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d109      	bne.n	800ec10 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ec02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	695b      	ldr	r3, [r3, #20]
 800ec08:	019b      	lsls	r3, r3, #6
 800ec0a:	697a      	ldr	r2, [r7, #20]
 800ec0c:	4313      	orrs	r3, r2
 800ec0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	697a      	ldr	r2, [r7, #20]
 800ec14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	68fa      	ldr	r2, [r7, #12]
 800ec1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	685a      	ldr	r2, [r3, #4]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	693a      	ldr	r2, [r7, #16]
 800ec28:	621a      	str	r2, [r3, #32]
}
 800ec2a:	bf00      	nop
 800ec2c:	371c      	adds	r7, #28
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr
 800ec36:	bf00      	nop
 800ec38:	40012c00 	.word	0x40012c00
 800ec3c:	40013400 	.word	0x40013400
 800ec40:	40014000 	.word	0x40014000
 800ec44:	40014400 	.word	0x40014400
 800ec48:	40014800 	.word	0x40014800

0800ec4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b087      	sub	sp, #28
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6a1b      	ldr	r3, [r3, #32]
 800ec5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6a1b      	ldr	r3, [r3, #32]
 800ec60:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ec7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	68fa      	ldr	r2, [r7, #12]
 800ec86:	4313      	orrs	r3, r2
 800ec88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ec90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	689b      	ldr	r3, [r3, #8]
 800ec96:	041b      	lsls	r3, r3, #16
 800ec98:	693a      	ldr	r2, [r7, #16]
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	4a17      	ldr	r2, [pc, #92]	@ (800ed00 <TIM_OC5_SetConfig+0xb4>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d00f      	beq.n	800ecc6 <TIM_OC5_SetConfig+0x7a>
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	4a16      	ldr	r2, [pc, #88]	@ (800ed04 <TIM_OC5_SetConfig+0xb8>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d00b      	beq.n	800ecc6 <TIM_OC5_SetConfig+0x7a>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	4a15      	ldr	r2, [pc, #84]	@ (800ed08 <TIM_OC5_SetConfig+0xbc>)
 800ecb2:	4293      	cmp	r3, r2
 800ecb4:	d007      	beq.n	800ecc6 <TIM_OC5_SetConfig+0x7a>
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	4a14      	ldr	r2, [pc, #80]	@ (800ed0c <TIM_OC5_SetConfig+0xc0>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d003      	beq.n	800ecc6 <TIM_OC5_SetConfig+0x7a>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	4a13      	ldr	r2, [pc, #76]	@ (800ed10 <TIM_OC5_SetConfig+0xc4>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d109      	bne.n	800ecda <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eccc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	695b      	ldr	r3, [r3, #20]
 800ecd2:	021b      	lsls	r3, r3, #8
 800ecd4:	697a      	ldr	r2, [r7, #20]
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	697a      	ldr	r2, [r7, #20]
 800ecde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	68fa      	ldr	r2, [r7, #12]
 800ece4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	685a      	ldr	r2, [r3, #4]
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	693a      	ldr	r2, [r7, #16]
 800ecf2:	621a      	str	r2, [r3, #32]
}
 800ecf4:	bf00      	nop
 800ecf6:	371c      	adds	r7, #28
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr
 800ed00:	40012c00 	.word	0x40012c00
 800ed04:	40013400 	.word	0x40013400
 800ed08:	40014000 	.word	0x40014000
 800ed0c:	40014400 	.word	0x40014400
 800ed10:	40014800 	.word	0x40014800

0800ed14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b087      	sub	sp, #28
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6a1b      	ldr	r3, [r3, #32]
 800ed22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6a1b      	ldr	r3, [r3, #32]
 800ed28:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ed42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ed46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	021b      	lsls	r3, r3, #8
 800ed4e:	68fa      	ldr	r2, [r7, #12]
 800ed50:	4313      	orrs	r3, r2
 800ed52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ed5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	689b      	ldr	r3, [r3, #8]
 800ed60:	051b      	lsls	r3, r3, #20
 800ed62:	693a      	ldr	r2, [r7, #16]
 800ed64:	4313      	orrs	r3, r2
 800ed66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	4a18      	ldr	r2, [pc, #96]	@ (800edcc <TIM_OC6_SetConfig+0xb8>)
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d00f      	beq.n	800ed90 <TIM_OC6_SetConfig+0x7c>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	4a17      	ldr	r2, [pc, #92]	@ (800edd0 <TIM_OC6_SetConfig+0xbc>)
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d00b      	beq.n	800ed90 <TIM_OC6_SetConfig+0x7c>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	4a16      	ldr	r2, [pc, #88]	@ (800edd4 <TIM_OC6_SetConfig+0xc0>)
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d007      	beq.n	800ed90 <TIM_OC6_SetConfig+0x7c>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	4a15      	ldr	r2, [pc, #84]	@ (800edd8 <TIM_OC6_SetConfig+0xc4>)
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d003      	beq.n	800ed90 <TIM_OC6_SetConfig+0x7c>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	4a14      	ldr	r2, [pc, #80]	@ (800eddc <TIM_OC6_SetConfig+0xc8>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d109      	bne.n	800eda4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ed96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	695b      	ldr	r3, [r3, #20]
 800ed9c:	029b      	lsls	r3, r3, #10
 800ed9e:	697a      	ldr	r2, [r7, #20]
 800eda0:	4313      	orrs	r3, r2
 800eda2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	697a      	ldr	r2, [r7, #20]
 800eda8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	68fa      	ldr	r2, [r7, #12]
 800edae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	685a      	ldr	r2, [r3, #4]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	693a      	ldr	r2, [r7, #16]
 800edbc:	621a      	str	r2, [r3, #32]
}
 800edbe:	bf00      	nop
 800edc0:	371c      	adds	r7, #28
 800edc2:	46bd      	mov	sp, r7
 800edc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc8:	4770      	bx	lr
 800edca:	bf00      	nop
 800edcc:	40012c00 	.word	0x40012c00
 800edd0:	40013400 	.word	0x40013400
 800edd4:	40014000 	.word	0x40014000
 800edd8:	40014400 	.word	0x40014400
 800eddc:	40014800 	.word	0x40014800

0800ede0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b087      	sub	sp, #28
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	60f8      	str	r0, [r7, #12]
 800ede8:	60b9      	str	r1, [r7, #8]
 800edea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	6a1b      	ldr	r3, [r3, #32]
 800edf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	6a1b      	ldr	r3, [r3, #32]
 800edf6:	f023 0201 	bic.w	r2, r3, #1
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	699b      	ldr	r3, [r3, #24]
 800ee02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ee0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	011b      	lsls	r3, r3, #4
 800ee10:	693a      	ldr	r2, [r7, #16]
 800ee12:	4313      	orrs	r3, r2
 800ee14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	f023 030a 	bic.w	r3, r3, #10
 800ee1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ee1e:	697a      	ldr	r2, [r7, #20]
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	4313      	orrs	r3, r2
 800ee24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	693a      	ldr	r2, [r7, #16]
 800ee2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	697a      	ldr	r2, [r7, #20]
 800ee30:	621a      	str	r2, [r3, #32]
}
 800ee32:	bf00      	nop
 800ee34:	371c      	adds	r7, #28
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr

0800ee3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ee3e:	b480      	push	{r7}
 800ee40:	b087      	sub	sp, #28
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	60f8      	str	r0, [r7, #12]
 800ee46:	60b9      	str	r1, [r7, #8]
 800ee48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	6a1b      	ldr	r3, [r3, #32]
 800ee4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	6a1b      	ldr	r3, [r3, #32]
 800ee54:	f023 0210 	bic.w	r2, r3, #16
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	699b      	ldr	r3, [r3, #24]
 800ee60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ee68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	031b      	lsls	r3, r3, #12
 800ee6e:	693a      	ldr	r2, [r7, #16]
 800ee70:	4313      	orrs	r3, r2
 800ee72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ee7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	011b      	lsls	r3, r3, #4
 800ee80:	697a      	ldr	r2, [r7, #20]
 800ee82:	4313      	orrs	r3, r2
 800ee84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	693a      	ldr	r2, [r7, #16]
 800ee8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	697a      	ldr	r2, [r7, #20]
 800ee90:	621a      	str	r2, [r3, #32]
}
 800ee92:	bf00      	nop
 800ee94:	371c      	adds	r7, #28
 800ee96:	46bd      	mov	sp, r7
 800ee98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9c:	4770      	bx	lr

0800ee9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ee9e:	b480      	push	{r7}
 800eea0:	b085      	sub	sp, #20
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
 800eea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	689b      	ldr	r3, [r3, #8]
 800eeac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eeb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eeb6:	683a      	ldr	r2, [r7, #0]
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	4313      	orrs	r3, r2
 800eebc:	f043 0307 	orr.w	r3, r3, #7
 800eec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	68fa      	ldr	r2, [r7, #12]
 800eec6:	609a      	str	r2, [r3, #8]
}
 800eec8:	bf00      	nop
 800eeca:	3714      	adds	r7, #20
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr

0800eed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b087      	sub	sp, #28
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	607a      	str	r2, [r7, #4]
 800eee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	689b      	ldr	r3, [r3, #8]
 800eee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eeee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	021a      	lsls	r2, r3, #8
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	431a      	orrs	r2, r3
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	4313      	orrs	r3, r2
 800eefc:	697a      	ldr	r2, [r7, #20]
 800eefe:	4313      	orrs	r3, r2
 800ef00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	697a      	ldr	r2, [r7, #20]
 800ef06:	609a      	str	r2, [r3, #8]
}
 800ef08:	bf00      	nop
 800ef0a:	371c      	adds	r7, #28
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ef14:	b480      	push	{r7}
 800ef16:	b087      	sub	sp, #28
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	60b9      	str	r1, [r7, #8]
 800ef1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	f003 031f 	and.w	r3, r3, #31
 800ef26:	2201      	movs	r2, #1
 800ef28:	fa02 f303 	lsl.w	r3, r2, r3
 800ef2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	6a1a      	ldr	r2, [r3, #32]
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	43db      	mvns	r3, r3
 800ef36:	401a      	ands	r2, r3
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	6a1a      	ldr	r2, [r3, #32]
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	f003 031f 	and.w	r3, r3, #31
 800ef46:	6879      	ldr	r1, [r7, #4]
 800ef48:	fa01 f303 	lsl.w	r3, r1, r3
 800ef4c:	431a      	orrs	r2, r3
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	621a      	str	r2, [r3, #32]
}
 800ef52:	bf00      	nop
 800ef54:	371c      	adds	r7, #28
 800ef56:	46bd      	mov	sp, r7
 800ef58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5c:	4770      	bx	lr
	...

0800ef60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ef60:	b480      	push	{r7}
 800ef62:	b085      	sub	sp, #20
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	d101      	bne.n	800ef78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ef74:	2302      	movs	r3, #2
 800ef76:	e068      	b.n	800f04a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2202      	movs	r2, #2
 800ef84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	689b      	ldr	r3, [r3, #8]
 800ef96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	4a2e      	ldr	r2, [pc, #184]	@ (800f058 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d004      	beq.n	800efac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	4a2d      	ldr	r2, [pc, #180]	@ (800f05c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800efa8:	4293      	cmp	r3, r2
 800efaa:	d108      	bne.n	800efbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800efb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	68fa      	ldr	r2, [r7, #12]
 800efba:	4313      	orrs	r3, r2
 800efbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800efc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	68fa      	ldr	r2, [r7, #12]
 800efcc:	4313      	orrs	r3, r2
 800efce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	68fa      	ldr	r2, [r7, #12]
 800efd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4a1e      	ldr	r2, [pc, #120]	@ (800f058 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d01d      	beq.n	800f01e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efea:	d018      	beq.n	800f01e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4a1b      	ldr	r2, [pc, #108]	@ (800f060 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d013      	beq.n	800f01e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	4a1a      	ldr	r2, [pc, #104]	@ (800f064 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800effc:	4293      	cmp	r3, r2
 800effe:	d00e      	beq.n	800f01e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	4a18      	ldr	r2, [pc, #96]	@ (800f068 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f006:	4293      	cmp	r3, r2
 800f008:	d009      	beq.n	800f01e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	4a13      	ldr	r2, [pc, #76]	@ (800f05c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f010:	4293      	cmp	r3, r2
 800f012:	d004      	beq.n	800f01e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4a14      	ldr	r2, [pc, #80]	@ (800f06c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d10c      	bne.n	800f038 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	689b      	ldr	r3, [r3, #8]
 800f02a:	68ba      	ldr	r2, [r7, #8]
 800f02c:	4313      	orrs	r3, r2
 800f02e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	68ba      	ldr	r2, [r7, #8]
 800f036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2201      	movs	r2, #1
 800f03c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2200      	movs	r2, #0
 800f044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f048:	2300      	movs	r3, #0
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	3714      	adds	r7, #20
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr
 800f056:	bf00      	nop
 800f058:	40012c00 	.word	0x40012c00
 800f05c:	40013400 	.word	0x40013400
 800f060:	40000400 	.word	0x40000400
 800f064:	40000800 	.word	0x40000800
 800f068:	40000c00 	.word	0x40000c00
 800f06c:	40014000 	.word	0x40014000

0800f070 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f070:	b480      	push	{r7}
 800f072:	b085      	sub	sp, #20
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f07a:	2300      	movs	r3, #0
 800f07c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f084:	2b01      	cmp	r3, #1
 800f086:	d101      	bne.n	800f08c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f088:	2302      	movs	r3, #2
 800f08a:	e065      	b.n	800f158 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2201      	movs	r2, #1
 800f090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	68db      	ldr	r3, [r3, #12]
 800f09e:	4313      	orrs	r3, r2
 800f0a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	689b      	ldr	r3, [r3, #8]
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	685b      	ldr	r3, [r3, #4]
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4313      	orrs	r3, r2
 800f0ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	691b      	ldr	r3, [r3, #16]
 800f0d6:	4313      	orrs	r3, r2
 800f0d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	695b      	ldr	r3, [r3, #20]
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0f2:	4313      	orrs	r3, r2
 800f0f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	699b      	ldr	r3, [r3, #24]
 800f100:	041b      	lsls	r3, r3, #16
 800f102:	4313      	orrs	r3, r2
 800f104:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	4a16      	ldr	r2, [pc, #88]	@ (800f164 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f10c:	4293      	cmp	r3, r2
 800f10e:	d004      	beq.n	800f11a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	4a14      	ldr	r2, [pc, #80]	@ (800f168 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d115      	bne.n	800f146 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f124:	051b      	lsls	r3, r3, #20
 800f126:	4313      	orrs	r3, r2
 800f128:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	69db      	ldr	r3, [r3, #28]
 800f134:	4313      	orrs	r3, r2
 800f136:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	6a1b      	ldr	r3, [r3, #32]
 800f142:	4313      	orrs	r3, r2
 800f144:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	68fa      	ldr	r2, [r7, #12]
 800f14c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2200      	movs	r2, #0
 800f152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f156:	2300      	movs	r3, #0
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3714      	adds	r7, #20
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr
 800f164:	40012c00 	.word	0x40012c00
 800f168:	40013400 	.word	0x40013400

0800f16c <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800f16c:	b480      	push	{r7}
 800f16e:	b08b      	sub	sp, #44	@ 0x2c
 800f170:	af00      	add	r7, sp, #0
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	60b9      	str	r1, [r7, #8]
 800f176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f178:	2300      	movs	r3, #0
 800f17a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f184:	2b01      	cmp	r3, #1
 800f186:	d101      	bne.n	800f18c <HAL_TIMEx_ConfigBreakInput+0x20>
 800f188:	2302      	movs	r3, #2
 800f18a:	e0af      	b.n	800f2ec <HAL_TIMEx_ConfigBreakInput+0x180>
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	2201      	movs	r2, #1
 800f190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	3b01      	subs	r3, #1
 800f19a:	2b07      	cmp	r3, #7
 800f19c:	d83a      	bhi.n	800f214 <HAL_TIMEx_ConfigBreakInput+0xa8>
 800f19e:	a201      	add	r2, pc, #4	@ (adr r2, 800f1a4 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800f1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a4:	0800f1c5 	.word	0x0800f1c5
 800f1a8:	0800f1d9 	.word	0x0800f1d9
 800f1ac:	0800f215 	.word	0x0800f215
 800f1b0:	0800f1ed 	.word	0x0800f1ed
 800f1b4:	0800f215 	.word	0x0800f215
 800f1b8:	0800f215 	.word	0x0800f215
 800f1bc:	0800f215 	.word	0x0800f215
 800f1c0:	0800f201 	.word	0x0800f201
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 800f1cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f1d0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 800f1d2:	2309      	movs	r3, #9
 800f1d4:	613b      	str	r3, [r7, #16]
      break;
 800f1d6:	e026      	b.n	800f226 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800f1d8:	2302      	movs	r3, #2
 800f1da:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 800f1dc:	2301      	movs	r3, #1
 800f1de:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 800f1e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f1e4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800f1e6:	230a      	movs	r3, #10
 800f1e8:	613b      	str	r3, [r7, #16]
      break;
 800f1ea:	e01c      	b.n	800f226 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 800f1ec:	2304      	movs	r3, #4
 800f1ee:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 800f1f0:	2302      	movs	r3, #2
 800f1f2:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 800f1f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f1f8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800f1fa:	230b      	movs	r3, #11
 800f1fc:	613b      	str	r3, [r7, #16]
      break;
 800f1fe:	e012      	b.n	800f226 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 800f200:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f204:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 800f206:	2308      	movs	r3, #8
 800f208:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800f20a:	2300      	movs	r3, #0
 800f20c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800f20e:	2300      	movs	r3, #0
 800f210:	613b      	str	r3, [r7, #16]
      break;
 800f212:	e008      	b.n	800f226 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 800f214:	2300      	movs	r3, #0
 800f216:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800f218:	2300      	movs	r3, #0
 800f21a:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800f21c:	2300      	movs	r3, #0
 800f21e:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 800f220:	2300      	movs	r3, #0
 800f222:	613b      	str	r3, [r7, #16]
      break;
 800f224:	bf00      	nop
    }
  }

  switch (BreakInput)
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d003      	beq.n	800f234 <HAL_TIMEx_ConfigBreakInput+0xc8>
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	2b02      	cmp	r3, #2
 800f230:	d029      	beq.n	800f286 <HAL_TIMEx_ConfigBreakInput+0x11a>
 800f232:	e051      	b.n	800f2d8 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f23a:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	43db      	mvns	r3, r3
 800f240:	6a3a      	ldr	r2, [r7, #32]
 800f242:	4013      	ands	r3, r2
 800f244:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	685a      	ldr	r2, [r3, #4]
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	409a      	lsls	r2, r3
 800f24e:	69fb      	ldr	r3, [r7, #28]
 800f250:	4013      	ands	r3, r2
 800f252:	6a3a      	ldr	r2, [r7, #32]
 800f254:	4313      	orrs	r3, r2
 800f256:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	2b08      	cmp	r3, #8
 800f25e:	d00d      	beq.n	800f27c <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800f260:	69bb      	ldr	r3, [r7, #24]
 800f262:	43db      	mvns	r3, r3
 800f264:	6a3a      	ldr	r2, [r7, #32]
 800f266:	4013      	ands	r3, r2
 800f268:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	689a      	ldr	r2, [r3, #8]
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	409a      	lsls	r2, r3
 800f272:	69bb      	ldr	r3, [r7, #24]
 800f274:	4013      	ands	r3, r2
 800f276:	6a3a      	ldr	r2, [r7, #32]
 800f278:	4313      	orrs	r3, r2
 800f27a:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	6a3a      	ldr	r2, [r7, #32]
 800f282:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800f284:	e02c      	b.n	800f2e0 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f28c:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800f28e:	69fb      	ldr	r3, [r7, #28]
 800f290:	43db      	mvns	r3, r3
 800f292:	6a3a      	ldr	r2, [r7, #32]
 800f294:	4013      	ands	r3, r2
 800f296:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	685a      	ldr	r2, [r3, #4]
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	409a      	lsls	r2, r3
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	4013      	ands	r3, r2
 800f2a4:	6a3a      	ldr	r2, [r7, #32]
 800f2a6:	4313      	orrs	r3, r2
 800f2a8:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	2b08      	cmp	r3, #8
 800f2b0:	d00d      	beq.n	800f2ce <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	43db      	mvns	r3, r3
 800f2b6:	6a3a      	ldr	r2, [r7, #32]
 800f2b8:	4013      	ands	r3, r2
 800f2ba:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	689a      	ldr	r2, [r3, #8]
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	409a      	lsls	r2, r3
 800f2c4:	69bb      	ldr	r3, [r7, #24]
 800f2c6:	4013      	ands	r3, r2
 800f2c8:	6a3a      	ldr	r2, [r7, #32]
 800f2ca:	4313      	orrs	r3, r2
 800f2cc:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	6a3a      	ldr	r2, [r7, #32]
 800f2d4:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800f2d6:	e003      	b.n	800f2e0 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800f2d8:	2301      	movs	r3, #1
 800f2da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f2de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f2e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	372c      	adds	r7, #44	@ 0x2c
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr

0800f2f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f300:	bf00      	nop
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr

0800f30c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f30c:	b480      	push	{r7}
 800f30e:	b083      	sub	sp, #12
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f314:	bf00      	nop
 800f316:	370c      	adds	r7, #12
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr

0800f320 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f320:	b480      	push	{r7}
 800f322:	b083      	sub	sp, #12
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f328:	bf00      	nop
 800f32a:	370c      	adds	r7, #12
 800f32c:	46bd      	mov	sp, r7
 800f32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f332:	4770      	bx	lr

0800f334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b082      	sub	sp, #8
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d101      	bne.n	800f346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f342:	2301      	movs	r3, #1
 800f344:	e042      	b.n	800f3cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d106      	bne.n	800f35e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2200      	movs	r2, #0
 800f354:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f7f4 ff05 	bl	8004168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2224      	movs	r2, #36	@ 0x24
 800f362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f022 0201 	bic.w	r2, r2, #1
 800f374:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d002      	beq.n	800f384 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f000 fbb2 	bl	800fae8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f000 f8b3 	bl	800f4f0 <UART_SetConfig>
 800f38a:	4603      	mov	r3, r0
 800f38c:	2b01      	cmp	r3, #1
 800f38e:	d101      	bne.n	800f394 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f390:	2301      	movs	r3, #1
 800f392:	e01b      	b.n	800f3cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	685a      	ldr	r2, [r3, #4]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f3a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	689a      	ldr	r2, [r3, #8]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f3b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	681a      	ldr	r2, [r3, #0]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	f042 0201 	orr.w	r2, r2, #1
 800f3c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f000 fc31 	bl	800fc2c <UART_CheckIdleState>
 800f3ca:	4603      	mov	r3, r0
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3708      	adds	r7, #8
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b08a      	sub	sp, #40	@ 0x28
 800f3d8:	af02      	add	r7, sp, #8
 800f3da:	60f8      	str	r0, [r7, #12]
 800f3dc:	60b9      	str	r1, [r7, #8]
 800f3de:	603b      	str	r3, [r7, #0]
 800f3e0:	4613      	mov	r3, r2
 800f3e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f3ea:	2b20      	cmp	r3, #32
 800f3ec:	d17b      	bne.n	800f4e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d002      	beq.n	800f3fa <HAL_UART_Transmit+0x26>
 800f3f4:	88fb      	ldrh	r3, [r7, #6]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d101      	bne.n	800f3fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	e074      	b.n	800f4e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	2200      	movs	r2, #0
 800f402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2221      	movs	r2, #33	@ 0x21
 800f40a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f40e:	f7f7 fc69 	bl	8006ce4 <HAL_GetTick>
 800f412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	88fa      	ldrh	r2, [r7, #6]
 800f418:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	88fa      	ldrh	r2, [r7, #6]
 800f420:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	689b      	ldr	r3, [r3, #8]
 800f428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f42c:	d108      	bne.n	800f440 <HAL_UART_Transmit+0x6c>
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	691b      	ldr	r3, [r3, #16]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d104      	bne.n	800f440 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f436:	2300      	movs	r3, #0
 800f438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	61bb      	str	r3, [r7, #24]
 800f43e:	e003      	b.n	800f448 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f444:	2300      	movs	r3, #0
 800f446:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f448:	e030      	b.n	800f4ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	9300      	str	r3, [sp, #0]
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	2200      	movs	r2, #0
 800f452:	2180      	movs	r1, #128	@ 0x80
 800f454:	68f8      	ldr	r0, [r7, #12]
 800f456:	f000 fc93 	bl	800fd80 <UART_WaitOnFlagUntilTimeout>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d005      	beq.n	800f46c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	2220      	movs	r2, #32
 800f464:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f468:	2303      	movs	r3, #3
 800f46a:	e03d      	b.n	800f4e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f46c:	69fb      	ldr	r3, [r7, #28]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d10b      	bne.n	800f48a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f472:	69bb      	ldr	r3, [r7, #24]
 800f474:	881a      	ldrh	r2, [r3, #0]
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f47e:	b292      	uxth	r2, r2
 800f480:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f482:	69bb      	ldr	r3, [r7, #24]
 800f484:	3302      	adds	r3, #2
 800f486:	61bb      	str	r3, [r7, #24]
 800f488:	e007      	b.n	800f49a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f48a:	69fb      	ldr	r3, [r7, #28]
 800f48c:	781a      	ldrb	r2, [r3, #0]
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f494:	69fb      	ldr	r3, [r7, #28]
 800f496:	3301      	adds	r3, #1
 800f498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	3b01      	subs	r3, #1
 800f4a4:	b29a      	uxth	r2, r3
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d1c8      	bne.n	800f44a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	9300      	str	r3, [sp, #0]
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	2140      	movs	r1, #64	@ 0x40
 800f4c2:	68f8      	ldr	r0, [r7, #12]
 800f4c4:	f000 fc5c 	bl	800fd80 <UART_WaitOnFlagUntilTimeout>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d005      	beq.n	800f4da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	2220      	movs	r2, #32
 800f4d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f4d6:	2303      	movs	r3, #3
 800f4d8:	e006      	b.n	800f4e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	2220      	movs	r2, #32
 800f4de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	e000      	b.n	800f4e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f4e6:	2302      	movs	r3, #2
  }
}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3720      	adds	r7, #32
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f4f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f4f4:	b08c      	sub	sp, #48	@ 0x30
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	689a      	ldr	r2, [r3, #8]
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	691b      	ldr	r3, [r3, #16]
 800f508:	431a      	orrs	r2, r3
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	695b      	ldr	r3, [r3, #20]
 800f50e:	431a      	orrs	r2, r3
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	69db      	ldr	r3, [r3, #28]
 800f514:	4313      	orrs	r3, r2
 800f516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	681a      	ldr	r2, [r3, #0]
 800f51e:	4baa      	ldr	r3, [pc, #680]	@ (800f7c8 <UART_SetConfig+0x2d8>)
 800f520:	4013      	ands	r3, r2
 800f522:	697a      	ldr	r2, [r7, #20]
 800f524:	6812      	ldr	r2, [r2, #0]
 800f526:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f528:	430b      	orrs	r3, r1
 800f52a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	68da      	ldr	r2, [r3, #12]
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	430a      	orrs	r2, r1
 800f540:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	699b      	ldr	r3, [r3, #24]
 800f546:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	4a9f      	ldr	r2, [pc, #636]	@ (800f7cc <UART_SetConfig+0x2dc>)
 800f54e:	4293      	cmp	r3, r2
 800f550:	d004      	beq.n	800f55c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	6a1b      	ldr	r3, [r3, #32]
 800f556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f558:	4313      	orrs	r3, r2
 800f55a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	689b      	ldr	r3, [r3, #8]
 800f562:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800f566:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800f56a:	697a      	ldr	r2, [r7, #20]
 800f56c:	6812      	ldr	r2, [r2, #0]
 800f56e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f570:	430b      	orrs	r3, r1
 800f572:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f57a:	f023 010f 	bic.w	r1, r3, #15
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	430a      	orrs	r2, r1
 800f588:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	4a90      	ldr	r2, [pc, #576]	@ (800f7d0 <UART_SetConfig+0x2e0>)
 800f590:	4293      	cmp	r3, r2
 800f592:	d125      	bne.n	800f5e0 <UART_SetConfig+0xf0>
 800f594:	4b8f      	ldr	r3, [pc, #572]	@ (800f7d4 <UART_SetConfig+0x2e4>)
 800f596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f59a:	f003 0303 	and.w	r3, r3, #3
 800f59e:	2b03      	cmp	r3, #3
 800f5a0:	d81a      	bhi.n	800f5d8 <UART_SetConfig+0xe8>
 800f5a2:	a201      	add	r2, pc, #4	@ (adr r2, 800f5a8 <UART_SetConfig+0xb8>)
 800f5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5a8:	0800f5b9 	.word	0x0800f5b9
 800f5ac:	0800f5c9 	.word	0x0800f5c9
 800f5b0:	0800f5c1 	.word	0x0800f5c1
 800f5b4:	0800f5d1 	.word	0x0800f5d1
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f5be:	e116      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f5c0:	2302      	movs	r3, #2
 800f5c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f5c6:	e112      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f5c8:	2304      	movs	r3, #4
 800f5ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f5ce:	e10e      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f5d0:	2308      	movs	r3, #8
 800f5d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f5d6:	e10a      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f5d8:	2310      	movs	r3, #16
 800f5da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f5de:	e106      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4a7c      	ldr	r2, [pc, #496]	@ (800f7d8 <UART_SetConfig+0x2e8>)
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d138      	bne.n	800f65c <UART_SetConfig+0x16c>
 800f5ea:	4b7a      	ldr	r3, [pc, #488]	@ (800f7d4 <UART_SetConfig+0x2e4>)
 800f5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f5f0:	f003 030c 	and.w	r3, r3, #12
 800f5f4:	2b0c      	cmp	r3, #12
 800f5f6:	d82d      	bhi.n	800f654 <UART_SetConfig+0x164>
 800f5f8:	a201      	add	r2, pc, #4	@ (adr r2, 800f600 <UART_SetConfig+0x110>)
 800f5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5fe:	bf00      	nop
 800f600:	0800f635 	.word	0x0800f635
 800f604:	0800f655 	.word	0x0800f655
 800f608:	0800f655 	.word	0x0800f655
 800f60c:	0800f655 	.word	0x0800f655
 800f610:	0800f645 	.word	0x0800f645
 800f614:	0800f655 	.word	0x0800f655
 800f618:	0800f655 	.word	0x0800f655
 800f61c:	0800f655 	.word	0x0800f655
 800f620:	0800f63d 	.word	0x0800f63d
 800f624:	0800f655 	.word	0x0800f655
 800f628:	0800f655 	.word	0x0800f655
 800f62c:	0800f655 	.word	0x0800f655
 800f630:	0800f64d 	.word	0x0800f64d
 800f634:	2300      	movs	r3, #0
 800f636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f63a:	e0d8      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f63c:	2302      	movs	r3, #2
 800f63e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f642:	e0d4      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f644:	2304      	movs	r3, #4
 800f646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f64a:	e0d0      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f64c:	2308      	movs	r3, #8
 800f64e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f652:	e0cc      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f654:	2310      	movs	r3, #16
 800f656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f65a:	e0c8      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	4a5e      	ldr	r2, [pc, #376]	@ (800f7dc <UART_SetConfig+0x2ec>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d125      	bne.n	800f6b2 <UART_SetConfig+0x1c2>
 800f666:	4b5b      	ldr	r3, [pc, #364]	@ (800f7d4 <UART_SetConfig+0x2e4>)
 800f668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f66c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f670:	2b30      	cmp	r3, #48	@ 0x30
 800f672:	d016      	beq.n	800f6a2 <UART_SetConfig+0x1b2>
 800f674:	2b30      	cmp	r3, #48	@ 0x30
 800f676:	d818      	bhi.n	800f6aa <UART_SetConfig+0x1ba>
 800f678:	2b20      	cmp	r3, #32
 800f67a:	d00a      	beq.n	800f692 <UART_SetConfig+0x1a2>
 800f67c:	2b20      	cmp	r3, #32
 800f67e:	d814      	bhi.n	800f6aa <UART_SetConfig+0x1ba>
 800f680:	2b00      	cmp	r3, #0
 800f682:	d002      	beq.n	800f68a <UART_SetConfig+0x19a>
 800f684:	2b10      	cmp	r3, #16
 800f686:	d008      	beq.n	800f69a <UART_SetConfig+0x1aa>
 800f688:	e00f      	b.n	800f6aa <UART_SetConfig+0x1ba>
 800f68a:	2300      	movs	r3, #0
 800f68c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f690:	e0ad      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f692:	2302      	movs	r3, #2
 800f694:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f698:	e0a9      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f69a:	2304      	movs	r3, #4
 800f69c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6a0:	e0a5      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f6a2:	2308      	movs	r3, #8
 800f6a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6a8:	e0a1      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f6aa:	2310      	movs	r3, #16
 800f6ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6b0:	e09d      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	4a4a      	ldr	r2, [pc, #296]	@ (800f7e0 <UART_SetConfig+0x2f0>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d125      	bne.n	800f708 <UART_SetConfig+0x218>
 800f6bc:	4b45      	ldr	r3, [pc, #276]	@ (800f7d4 <UART_SetConfig+0x2e4>)
 800f6be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f6c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f6c6:	2bc0      	cmp	r3, #192	@ 0xc0
 800f6c8:	d016      	beq.n	800f6f8 <UART_SetConfig+0x208>
 800f6ca:	2bc0      	cmp	r3, #192	@ 0xc0
 800f6cc:	d818      	bhi.n	800f700 <UART_SetConfig+0x210>
 800f6ce:	2b80      	cmp	r3, #128	@ 0x80
 800f6d0:	d00a      	beq.n	800f6e8 <UART_SetConfig+0x1f8>
 800f6d2:	2b80      	cmp	r3, #128	@ 0x80
 800f6d4:	d814      	bhi.n	800f700 <UART_SetConfig+0x210>
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d002      	beq.n	800f6e0 <UART_SetConfig+0x1f0>
 800f6da:	2b40      	cmp	r3, #64	@ 0x40
 800f6dc:	d008      	beq.n	800f6f0 <UART_SetConfig+0x200>
 800f6de:	e00f      	b.n	800f700 <UART_SetConfig+0x210>
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6e6:	e082      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f6e8:	2302      	movs	r3, #2
 800f6ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6ee:	e07e      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f6f0:	2304      	movs	r3, #4
 800f6f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6f6:	e07a      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f6f8:	2308      	movs	r3, #8
 800f6fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6fe:	e076      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f700:	2310      	movs	r3, #16
 800f702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f706:	e072      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4a35      	ldr	r2, [pc, #212]	@ (800f7e4 <UART_SetConfig+0x2f4>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	d12a      	bne.n	800f768 <UART_SetConfig+0x278>
 800f712:	4b30      	ldr	r3, [pc, #192]	@ (800f7d4 <UART_SetConfig+0x2e4>)
 800f714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f718:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f71c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f720:	d01a      	beq.n	800f758 <UART_SetConfig+0x268>
 800f722:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f726:	d81b      	bhi.n	800f760 <UART_SetConfig+0x270>
 800f728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f72c:	d00c      	beq.n	800f748 <UART_SetConfig+0x258>
 800f72e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f732:	d815      	bhi.n	800f760 <UART_SetConfig+0x270>
 800f734:	2b00      	cmp	r3, #0
 800f736:	d003      	beq.n	800f740 <UART_SetConfig+0x250>
 800f738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f73c:	d008      	beq.n	800f750 <UART_SetConfig+0x260>
 800f73e:	e00f      	b.n	800f760 <UART_SetConfig+0x270>
 800f740:	2300      	movs	r3, #0
 800f742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f746:	e052      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f748:	2302      	movs	r3, #2
 800f74a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f74e:	e04e      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f750:	2304      	movs	r3, #4
 800f752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f756:	e04a      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f758:	2308      	movs	r3, #8
 800f75a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f75e:	e046      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f760:	2310      	movs	r3, #16
 800f762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f766:	e042      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	4a17      	ldr	r2, [pc, #92]	@ (800f7cc <UART_SetConfig+0x2dc>)
 800f76e:	4293      	cmp	r3, r2
 800f770:	d13a      	bne.n	800f7e8 <UART_SetConfig+0x2f8>
 800f772:	4b18      	ldr	r3, [pc, #96]	@ (800f7d4 <UART_SetConfig+0x2e4>)
 800f774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f778:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f77c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f780:	d01a      	beq.n	800f7b8 <UART_SetConfig+0x2c8>
 800f782:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f786:	d81b      	bhi.n	800f7c0 <UART_SetConfig+0x2d0>
 800f788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f78c:	d00c      	beq.n	800f7a8 <UART_SetConfig+0x2b8>
 800f78e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f792:	d815      	bhi.n	800f7c0 <UART_SetConfig+0x2d0>
 800f794:	2b00      	cmp	r3, #0
 800f796:	d003      	beq.n	800f7a0 <UART_SetConfig+0x2b0>
 800f798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f79c:	d008      	beq.n	800f7b0 <UART_SetConfig+0x2c0>
 800f79e:	e00f      	b.n	800f7c0 <UART_SetConfig+0x2d0>
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f7a6:	e022      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f7a8:	2302      	movs	r3, #2
 800f7aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f7ae:	e01e      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f7b0:	2304      	movs	r3, #4
 800f7b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f7b6:	e01a      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f7b8:	2308      	movs	r3, #8
 800f7ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f7be:	e016      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f7c0:	2310      	movs	r3, #16
 800f7c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f7c6:	e012      	b.n	800f7ee <UART_SetConfig+0x2fe>
 800f7c8:	cfff69f3 	.word	0xcfff69f3
 800f7cc:	40008000 	.word	0x40008000
 800f7d0:	40013800 	.word	0x40013800
 800f7d4:	40021000 	.word	0x40021000
 800f7d8:	40004400 	.word	0x40004400
 800f7dc:	40004800 	.word	0x40004800
 800f7e0:	40004c00 	.word	0x40004c00
 800f7e4:	40005000 	.word	0x40005000
 800f7e8:	2310      	movs	r3, #16
 800f7ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	4aae      	ldr	r2, [pc, #696]	@ (800faac <UART_SetConfig+0x5bc>)
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	f040 8097 	bne.w	800f928 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f7fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f7fe:	2b08      	cmp	r3, #8
 800f800:	d823      	bhi.n	800f84a <UART_SetConfig+0x35a>
 800f802:	a201      	add	r2, pc, #4	@ (adr r2, 800f808 <UART_SetConfig+0x318>)
 800f804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f808:	0800f82d 	.word	0x0800f82d
 800f80c:	0800f84b 	.word	0x0800f84b
 800f810:	0800f835 	.word	0x0800f835
 800f814:	0800f84b 	.word	0x0800f84b
 800f818:	0800f83b 	.word	0x0800f83b
 800f81c:	0800f84b 	.word	0x0800f84b
 800f820:	0800f84b 	.word	0x0800f84b
 800f824:	0800f84b 	.word	0x0800f84b
 800f828:	0800f843 	.word	0x0800f843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f82c:	f7fa fb58 	bl	8009ee0 <HAL_RCC_GetPCLK1Freq>
 800f830:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f832:	e010      	b.n	800f856 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f834:	4b9e      	ldr	r3, [pc, #632]	@ (800fab0 <UART_SetConfig+0x5c0>)
 800f836:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f838:	e00d      	b.n	800f856 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f83a:	f7fa fab9 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 800f83e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f840:	e009      	b.n	800f856 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f846:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f848:	e005      	b.n	800f856 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800f84a:	2300      	movs	r3, #0
 800f84c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f84e:	2301      	movs	r3, #1
 800f850:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f854:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f858:	2b00      	cmp	r3, #0
 800f85a:	f000 8130 	beq.w	800fabe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f862:	4a94      	ldr	r2, [pc, #592]	@ (800fab4 <UART_SetConfig+0x5c4>)
 800f864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f868:	461a      	mov	r2, r3
 800f86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f86c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f870:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	685a      	ldr	r2, [r3, #4]
 800f876:	4613      	mov	r3, r2
 800f878:	005b      	lsls	r3, r3, #1
 800f87a:	4413      	add	r3, r2
 800f87c:	69ba      	ldr	r2, [r7, #24]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d305      	bcc.n	800f88e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f888:	69ba      	ldr	r2, [r7, #24]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d903      	bls.n	800f896 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800f88e:	2301      	movs	r3, #1
 800f890:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f894:	e113      	b.n	800fabe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f898:	2200      	movs	r2, #0
 800f89a:	60bb      	str	r3, [r7, #8]
 800f89c:	60fa      	str	r2, [r7, #12]
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8a2:	4a84      	ldr	r2, [pc, #528]	@ (800fab4 <UART_SetConfig+0x5c4>)
 800f8a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8a8:	b29b      	uxth	r3, r3
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	603b      	str	r3, [r7, #0]
 800f8ae:	607a      	str	r2, [r7, #4]
 800f8b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f8b8:	f7f1 f98e 	bl	8000bd8 <__aeabi_uldivmod>
 800f8bc:	4602      	mov	r2, r0
 800f8be:	460b      	mov	r3, r1
 800f8c0:	4610      	mov	r0, r2
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	f04f 0200 	mov.w	r2, #0
 800f8c8:	f04f 0300 	mov.w	r3, #0
 800f8cc:	020b      	lsls	r3, r1, #8
 800f8ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f8d2:	0202      	lsls	r2, r0, #8
 800f8d4:	6979      	ldr	r1, [r7, #20]
 800f8d6:	6849      	ldr	r1, [r1, #4]
 800f8d8:	0849      	lsrs	r1, r1, #1
 800f8da:	2000      	movs	r0, #0
 800f8dc:	460c      	mov	r4, r1
 800f8de:	4605      	mov	r5, r0
 800f8e0:	eb12 0804 	adds.w	r8, r2, r4
 800f8e4:	eb43 0905 	adc.w	r9, r3, r5
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	685b      	ldr	r3, [r3, #4]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	469a      	mov	sl, r3
 800f8f0:	4693      	mov	fp, r2
 800f8f2:	4652      	mov	r2, sl
 800f8f4:	465b      	mov	r3, fp
 800f8f6:	4640      	mov	r0, r8
 800f8f8:	4649      	mov	r1, r9
 800f8fa:	f7f1 f96d 	bl	8000bd8 <__aeabi_uldivmod>
 800f8fe:	4602      	mov	r2, r0
 800f900:	460b      	mov	r3, r1
 800f902:	4613      	mov	r3, r2
 800f904:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f906:	6a3b      	ldr	r3, [r7, #32]
 800f908:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f90c:	d308      	bcc.n	800f920 <UART_SetConfig+0x430>
 800f90e:	6a3b      	ldr	r3, [r7, #32]
 800f910:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f914:	d204      	bcs.n	800f920 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	6a3a      	ldr	r2, [r7, #32]
 800f91c:	60da      	str	r2, [r3, #12]
 800f91e:	e0ce      	b.n	800fabe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800f920:	2301      	movs	r3, #1
 800f922:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f926:	e0ca      	b.n	800fabe <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	69db      	ldr	r3, [r3, #28]
 800f92c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f930:	d166      	bne.n	800fa00 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800f932:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f936:	2b08      	cmp	r3, #8
 800f938:	d827      	bhi.n	800f98a <UART_SetConfig+0x49a>
 800f93a:	a201      	add	r2, pc, #4	@ (adr r2, 800f940 <UART_SetConfig+0x450>)
 800f93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f940:	0800f965 	.word	0x0800f965
 800f944:	0800f96d 	.word	0x0800f96d
 800f948:	0800f975 	.word	0x0800f975
 800f94c:	0800f98b 	.word	0x0800f98b
 800f950:	0800f97b 	.word	0x0800f97b
 800f954:	0800f98b 	.word	0x0800f98b
 800f958:	0800f98b 	.word	0x0800f98b
 800f95c:	0800f98b 	.word	0x0800f98b
 800f960:	0800f983 	.word	0x0800f983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f964:	f7fa fabc 	bl	8009ee0 <HAL_RCC_GetPCLK1Freq>
 800f968:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f96a:	e014      	b.n	800f996 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f96c:	f7fa face 	bl	8009f0c <HAL_RCC_GetPCLK2Freq>
 800f970:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f972:	e010      	b.n	800f996 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f974:	4b4e      	ldr	r3, [pc, #312]	@ (800fab0 <UART_SetConfig+0x5c0>)
 800f976:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f978:	e00d      	b.n	800f996 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f97a:	f7fa fa19 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 800f97e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f980:	e009      	b.n	800f996 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f986:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f988:	e005      	b.n	800f996 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800f98a:	2300      	movs	r3, #0
 800f98c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f98e:	2301      	movs	r3, #1
 800f990:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f994:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f998:	2b00      	cmp	r3, #0
 800f99a:	f000 8090 	beq.w	800fabe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9a2:	4a44      	ldr	r2, [pc, #272]	@ (800fab4 <UART_SetConfig+0x5c4>)
 800f9a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9b0:	005a      	lsls	r2, r3, #1
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	685b      	ldr	r3, [r3, #4]
 800f9b6:	085b      	lsrs	r3, r3, #1
 800f9b8:	441a      	add	r2, r3
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	685b      	ldr	r3, [r3, #4]
 800f9be:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9c2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f9c4:	6a3b      	ldr	r3, [r7, #32]
 800f9c6:	2b0f      	cmp	r3, #15
 800f9c8:	d916      	bls.n	800f9f8 <UART_SetConfig+0x508>
 800f9ca:	6a3b      	ldr	r3, [r7, #32]
 800f9cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f9d0:	d212      	bcs.n	800f9f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f9d2:	6a3b      	ldr	r3, [r7, #32]
 800f9d4:	b29b      	uxth	r3, r3
 800f9d6:	f023 030f 	bic.w	r3, r3, #15
 800f9da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f9dc:	6a3b      	ldr	r3, [r7, #32]
 800f9de:	085b      	lsrs	r3, r3, #1
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	f003 0307 	and.w	r3, r3, #7
 800f9e6:	b29a      	uxth	r2, r3
 800f9e8:	8bfb      	ldrh	r3, [r7, #30]
 800f9ea:	4313      	orrs	r3, r2
 800f9ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	8bfa      	ldrh	r2, [r7, #30]
 800f9f4:	60da      	str	r2, [r3, #12]
 800f9f6:	e062      	b.n	800fabe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f9fe:	e05e      	b.n	800fabe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fa00:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800fa04:	2b08      	cmp	r3, #8
 800fa06:	d828      	bhi.n	800fa5a <UART_SetConfig+0x56a>
 800fa08:	a201      	add	r2, pc, #4	@ (adr r2, 800fa10 <UART_SetConfig+0x520>)
 800fa0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa0e:	bf00      	nop
 800fa10:	0800fa35 	.word	0x0800fa35
 800fa14:	0800fa3d 	.word	0x0800fa3d
 800fa18:	0800fa45 	.word	0x0800fa45
 800fa1c:	0800fa5b 	.word	0x0800fa5b
 800fa20:	0800fa4b 	.word	0x0800fa4b
 800fa24:	0800fa5b 	.word	0x0800fa5b
 800fa28:	0800fa5b 	.word	0x0800fa5b
 800fa2c:	0800fa5b 	.word	0x0800fa5b
 800fa30:	0800fa53 	.word	0x0800fa53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fa34:	f7fa fa54 	bl	8009ee0 <HAL_RCC_GetPCLK1Freq>
 800fa38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fa3a:	e014      	b.n	800fa66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fa3c:	f7fa fa66 	bl	8009f0c <HAL_RCC_GetPCLK2Freq>
 800fa40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fa42:	e010      	b.n	800fa66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fa44:	4b1a      	ldr	r3, [pc, #104]	@ (800fab0 <UART_SetConfig+0x5c0>)
 800fa46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800fa48:	e00d      	b.n	800fa66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fa4a:	f7fa f9b1 	bl	8009db0 <HAL_RCC_GetSysClockFreq>
 800fa4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fa50:	e009      	b.n	800fa66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fa56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800fa58:	e005      	b.n	800fa66 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800fa5e:	2301      	movs	r3, #1
 800fa60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800fa64:	bf00      	nop
    }

    if (pclk != 0U)
 800fa66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d028      	beq.n	800fabe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa70:	4a10      	ldr	r2, [pc, #64]	@ (800fab4 <UART_SetConfig+0x5c4>)
 800fa72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa76:	461a      	mov	r2, r3
 800fa78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa7a:	fbb3 f2f2 	udiv	r2, r3, r2
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	085b      	lsrs	r3, r3, #1
 800fa84:	441a      	add	r2, r3
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	685b      	ldr	r3, [r3, #4]
 800fa8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa8e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa90:	6a3b      	ldr	r3, [r7, #32]
 800fa92:	2b0f      	cmp	r3, #15
 800fa94:	d910      	bls.n	800fab8 <UART_SetConfig+0x5c8>
 800fa96:	6a3b      	ldr	r3, [r7, #32]
 800fa98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fa9c:	d20c      	bcs.n	800fab8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fa9e:	6a3b      	ldr	r3, [r7, #32]
 800faa0:	b29a      	uxth	r2, r3
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	60da      	str	r2, [r3, #12]
 800faa8:	e009      	b.n	800fabe <UART_SetConfig+0x5ce>
 800faaa:	bf00      	nop
 800faac:	40008000 	.word	0x40008000
 800fab0:	00f42400 	.word	0x00f42400
 800fab4:	08018330 	.word	0x08018330
      }
      else
      {
        ret = HAL_ERROR;
 800fab8:	2301      	movs	r3, #1
 800faba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	2201      	movs	r2, #1
 800fac2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	2201      	movs	r2, #1
 800faca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	2200      	movs	r2, #0
 800fad2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	2200      	movs	r2, #0
 800fad8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fada:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3730      	adds	r7, #48	@ 0x30
 800fae2:	46bd      	mov	sp, r7
 800fae4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fae8:	b480      	push	{r7}
 800faea:	b083      	sub	sp, #12
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800faf4:	f003 0308 	and.w	r3, r3, #8
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d00a      	beq.n	800fb12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	685b      	ldr	r3, [r3, #4]
 800fb02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	430a      	orrs	r2, r1
 800fb10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb16:	f003 0301 	and.w	r3, r3, #1
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d00a      	beq.n	800fb34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	685b      	ldr	r3, [r3, #4]
 800fb24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	430a      	orrs	r2, r1
 800fb32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb38:	f003 0302 	and.w	r3, r3, #2
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d00a      	beq.n	800fb56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	685b      	ldr	r3, [r3, #4]
 800fb46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	430a      	orrs	r2, r1
 800fb54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb5a:	f003 0304 	and.w	r3, r3, #4
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d00a      	beq.n	800fb78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	430a      	orrs	r2, r1
 800fb76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb7c:	f003 0310 	and.w	r3, r3, #16
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d00a      	beq.n	800fb9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	689b      	ldr	r3, [r3, #8]
 800fb8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	430a      	orrs	r2, r1
 800fb98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb9e:	f003 0320 	and.w	r3, r3, #32
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d00a      	beq.n	800fbbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	689b      	ldr	r3, [r3, #8]
 800fbac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	430a      	orrs	r2, r1
 800fbba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d01a      	beq.n	800fbfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	430a      	orrs	r2, r1
 800fbdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbe2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fbe6:	d10a      	bne.n	800fbfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	685b      	ldr	r3, [r3, #4]
 800fbee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	430a      	orrs	r2, r1
 800fbfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d00a      	beq.n	800fc20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	685b      	ldr	r3, [r3, #4]
 800fc10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	430a      	orrs	r2, r1
 800fc1e:	605a      	str	r2, [r3, #4]
  }
}
 800fc20:	bf00      	nop
 800fc22:	370c      	adds	r7, #12
 800fc24:	46bd      	mov	sp, r7
 800fc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2a:	4770      	bx	lr

0800fc2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b098      	sub	sp, #96	@ 0x60
 800fc30:	af02      	add	r7, sp, #8
 800fc32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2200      	movs	r2, #0
 800fc38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fc3c:	f7f7 f852 	bl	8006ce4 <HAL_GetTick>
 800fc40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	f003 0308 	and.w	r3, r3, #8
 800fc4c:	2b08      	cmp	r3, #8
 800fc4e:	d12f      	bne.n	800fcb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fc54:	9300      	str	r3, [sp, #0]
 800fc56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc58:	2200      	movs	r2, #0
 800fc5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f000 f88e 	bl	800fd80 <UART_WaitOnFlagUntilTimeout>
 800fc64:	4603      	mov	r3, r0
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d022      	beq.n	800fcb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc72:	e853 3f00 	ldrex	r3, [r3]
 800fc76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fc78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fc7e:	653b      	str	r3, [r7, #80]	@ 0x50
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	461a      	mov	r2, r3
 800fc86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc88:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc8a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fc8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc90:	e841 2300 	strex	r3, r2, [r1]
 800fc94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fc96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d1e6      	bne.n	800fc6a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2220      	movs	r2, #32
 800fca0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2200      	movs	r2, #0
 800fca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fcac:	2303      	movs	r3, #3
 800fcae:	e063      	b.n	800fd78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	f003 0304 	and.w	r3, r3, #4
 800fcba:	2b04      	cmp	r3, #4
 800fcbc:	d149      	bne.n	800fd52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fcbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fcc2:	9300      	str	r3, [sp, #0]
 800fcc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 f857 	bl	800fd80 <UART_WaitOnFlagUntilTimeout>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d03c      	beq.n	800fd52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fce0:	e853 3f00 	ldrex	r3, [r3]
 800fce4:	623b      	str	r3, [r7, #32]
   return(result);
 800fce6:	6a3b      	ldr	r3, [r7, #32]
 800fce8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fcec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800fcf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fcfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fcfe:	e841 2300 	strex	r3, r2, [r1]
 800fd02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fd04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d1e6      	bne.n	800fcd8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	3308      	adds	r3, #8
 800fd10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd12:	693b      	ldr	r3, [r7, #16]
 800fd14:	e853 3f00 	ldrex	r3, [r3]
 800fd18:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	f023 0301 	bic.w	r3, r3, #1
 800fd20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	3308      	adds	r3, #8
 800fd28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fd2a:	61fa      	str	r2, [r7, #28]
 800fd2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd2e:	69b9      	ldr	r1, [r7, #24]
 800fd30:	69fa      	ldr	r2, [r7, #28]
 800fd32:	e841 2300 	strex	r3, r2, [r1]
 800fd36:	617b      	str	r3, [r7, #20]
   return(result);
 800fd38:	697b      	ldr	r3, [r7, #20]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d1e5      	bne.n	800fd0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2220      	movs	r2, #32
 800fd42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd4e:	2303      	movs	r3, #3
 800fd50:	e012      	b.n	800fd78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2220      	movs	r2, #32
 800fd56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2220      	movs	r2, #32
 800fd5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2200      	movs	r2, #0
 800fd66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	2200      	movs	r2, #0
 800fd72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fd76:	2300      	movs	r3, #0
}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3758      	adds	r7, #88	@ 0x58
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}

0800fd80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b084      	sub	sp, #16
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	60f8      	str	r0, [r7, #12]
 800fd88:	60b9      	str	r1, [r7, #8]
 800fd8a:	603b      	str	r3, [r7, #0]
 800fd8c:	4613      	mov	r3, r2
 800fd8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd90:	e049      	b.n	800fe26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd92:	69bb      	ldr	r3, [r7, #24]
 800fd94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd98:	d045      	beq.n	800fe26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd9a:	f7f6 ffa3 	bl	8006ce4 <HAL_GetTick>
 800fd9e:	4602      	mov	r2, r0
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	1ad3      	subs	r3, r2, r3
 800fda4:	69ba      	ldr	r2, [r7, #24]
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d302      	bcc.n	800fdb0 <UART_WaitOnFlagUntilTimeout+0x30>
 800fdaa:	69bb      	ldr	r3, [r7, #24]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d101      	bne.n	800fdb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fdb0:	2303      	movs	r3, #3
 800fdb2:	e048      	b.n	800fe46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	f003 0304 	and.w	r3, r3, #4
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d031      	beq.n	800fe26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	69db      	ldr	r3, [r3, #28]
 800fdc8:	f003 0308 	and.w	r3, r3, #8
 800fdcc:	2b08      	cmp	r3, #8
 800fdce:	d110      	bne.n	800fdf2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	2208      	movs	r2, #8
 800fdd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fdd8:	68f8      	ldr	r0, [r7, #12]
 800fdda:	f000 f838 	bl	800fe4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	2208      	movs	r2, #8
 800fde2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2200      	movs	r2, #0
 800fdea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fdee:	2301      	movs	r3, #1
 800fdf0:	e029      	b.n	800fe46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	69db      	ldr	r3, [r3, #28]
 800fdf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fdfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fe00:	d111      	bne.n	800fe26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fe0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fe0c:	68f8      	ldr	r0, [r7, #12]
 800fe0e:	f000 f81e 	bl	800fe4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2220      	movs	r2, #32
 800fe16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fe22:	2303      	movs	r3, #3
 800fe24:	e00f      	b.n	800fe46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	69da      	ldr	r2, [r3, #28]
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	4013      	ands	r3, r2
 800fe30:	68ba      	ldr	r2, [r7, #8]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	bf0c      	ite	eq
 800fe36:	2301      	moveq	r3, #1
 800fe38:	2300      	movne	r3, #0
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	79fb      	ldrb	r3, [r7, #7]
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d0a6      	beq.n	800fd92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fe44:	2300      	movs	r3, #0
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3710      	adds	r7, #16
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}

0800fe4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fe4e:	b480      	push	{r7}
 800fe50:	b095      	sub	sp, #84	@ 0x54
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe5e:	e853 3f00 	ldrex	r3, [r3]
 800fe62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fe64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fe6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	461a      	mov	r2, r3
 800fe72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe74:	643b      	str	r3, [r7, #64]	@ 0x40
 800fe76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fe7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fe7c:	e841 2300 	strex	r3, r2, [r1]
 800fe80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fe82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d1e6      	bne.n	800fe56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	3308      	adds	r3, #8
 800fe8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe90:	6a3b      	ldr	r3, [r7, #32]
 800fe92:	e853 3f00 	ldrex	r3, [r3]
 800fe96:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe98:	69fb      	ldr	r3, [r7, #28]
 800fe9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fe9e:	f023 0301 	bic.w	r3, r3, #1
 800fea2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	3308      	adds	r3, #8
 800feaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800feac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800feae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800feb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800feb4:	e841 2300 	strex	r3, r2, [r1]
 800feb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800feba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800febc:	2b00      	cmp	r3, #0
 800febe:	d1e3      	bne.n	800fe88 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	d118      	bne.n	800fefa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	e853 3f00 	ldrex	r3, [r3]
 800fed4:	60bb      	str	r3, [r7, #8]
   return(result);
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	f023 0310 	bic.w	r3, r3, #16
 800fedc:	647b      	str	r3, [r7, #68]	@ 0x44
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	461a      	mov	r2, r3
 800fee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fee6:	61bb      	str	r3, [r7, #24]
 800fee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feea:	6979      	ldr	r1, [r7, #20]
 800feec:	69ba      	ldr	r2, [r7, #24]
 800feee:	e841 2300 	strex	r3, r2, [r1]
 800fef2:	613b      	str	r3, [r7, #16]
   return(result);
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d1e6      	bne.n	800fec8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2220      	movs	r2, #32
 800fefe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2200      	movs	r2, #0
 800ff06:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ff0e:	bf00      	nop
 800ff10:	3754      	adds	r7, #84	@ 0x54
 800ff12:	46bd      	mov	sp, r7
 800ff14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff18:	4770      	bx	lr

0800ff1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ff1a:	b480      	push	{r7}
 800ff1c:	b085      	sub	sp, #20
 800ff1e:	af00      	add	r7, sp, #0
 800ff20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	d101      	bne.n	800ff30 <HAL_UARTEx_DisableFifoMode+0x16>
 800ff2c:	2302      	movs	r3, #2
 800ff2e:	e027      	b.n	800ff80 <HAL_UARTEx_DisableFifoMode+0x66>
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2201      	movs	r2, #1
 800ff34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2224      	movs	r2, #36	@ 0x24
 800ff3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	681a      	ldr	r2, [r3, #0]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	f022 0201 	bic.w	r2, r2, #1
 800ff56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ff5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2200      	movs	r2, #0
 800ff64:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	68fa      	ldr	r2, [r7, #12]
 800ff6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2220      	movs	r2, #32
 800ff72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ff7e:	2300      	movs	r3, #0
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3714      	adds	r7, #20
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr

0800ff8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b084      	sub	sp, #16
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ff9c:	2b01      	cmp	r3, #1
 800ff9e:	d101      	bne.n	800ffa4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ffa0:	2302      	movs	r3, #2
 800ffa2:	e02d      	b.n	8010000 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2224      	movs	r2, #36	@ 0x24
 800ffb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	681a      	ldr	r2, [r3, #0]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	f022 0201 	bic.w	r2, r2, #1
 800ffca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	689b      	ldr	r3, [r3, #8]
 800ffd2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	683a      	ldr	r2, [r7, #0]
 800ffdc:	430a      	orrs	r2, r1
 800ffde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f000 f84f 	bl	8010084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	68fa      	ldr	r2, [r7, #12]
 800ffec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2220      	movs	r2, #32
 800fff2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2200      	movs	r2, #0
 800fffa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fffe:	2300      	movs	r3, #0
}
 8010000:	4618      	mov	r0, r3
 8010002:	3710      	adds	r7, #16
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b084      	sub	sp, #16
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010018:	2b01      	cmp	r3, #1
 801001a:	d101      	bne.n	8010020 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801001c:	2302      	movs	r3, #2
 801001e:	e02d      	b.n	801007c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2201      	movs	r2, #1
 8010024:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2224      	movs	r2, #36	@ 0x24
 801002c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	681a      	ldr	r2, [r3, #0]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f022 0201 	bic.w	r2, r2, #1
 8010046:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	689b      	ldr	r3, [r3, #8]
 801004e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	683a      	ldr	r2, [r7, #0]
 8010058:	430a      	orrs	r2, r1
 801005a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f000 f811 	bl	8010084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	68fa      	ldr	r2, [r7, #12]
 8010068:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2220      	movs	r2, #32
 801006e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2200      	movs	r2, #0
 8010076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801007a:	2300      	movs	r3, #0
}
 801007c:	4618      	mov	r0, r3
 801007e:	3710      	adds	r7, #16
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010084:	b480      	push	{r7}
 8010086:	b085      	sub	sp, #20
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010090:	2b00      	cmp	r3, #0
 8010092:	d108      	bne.n	80100a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2201      	movs	r2, #1
 8010098:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2201      	movs	r2, #1
 80100a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80100a4:	e031      	b.n	801010a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80100a6:	2308      	movs	r3, #8
 80100a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80100aa:	2308      	movs	r3, #8
 80100ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	689b      	ldr	r3, [r3, #8]
 80100b4:	0e5b      	lsrs	r3, r3, #25
 80100b6:	b2db      	uxtb	r3, r3
 80100b8:	f003 0307 	and.w	r3, r3, #7
 80100bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	689b      	ldr	r3, [r3, #8]
 80100c4:	0f5b      	lsrs	r3, r3, #29
 80100c6:	b2db      	uxtb	r3, r3
 80100c8:	f003 0307 	and.w	r3, r3, #7
 80100cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100ce:	7bbb      	ldrb	r3, [r7, #14]
 80100d0:	7b3a      	ldrb	r2, [r7, #12]
 80100d2:	4911      	ldr	r1, [pc, #68]	@ (8010118 <UARTEx_SetNbDataToProcess+0x94>)
 80100d4:	5c8a      	ldrb	r2, [r1, r2]
 80100d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80100da:	7b3a      	ldrb	r2, [r7, #12]
 80100dc:	490f      	ldr	r1, [pc, #60]	@ (801011c <UARTEx_SetNbDataToProcess+0x98>)
 80100de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80100e4:	b29a      	uxth	r2, r3
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100ec:	7bfb      	ldrb	r3, [r7, #15]
 80100ee:	7b7a      	ldrb	r2, [r7, #13]
 80100f0:	4909      	ldr	r1, [pc, #36]	@ (8010118 <UARTEx_SetNbDataToProcess+0x94>)
 80100f2:	5c8a      	ldrb	r2, [r1, r2]
 80100f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80100f8:	7b7a      	ldrb	r2, [r7, #13]
 80100fa:	4908      	ldr	r1, [pc, #32]	@ (801011c <UARTEx_SetNbDataToProcess+0x98>)
 80100fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8010102:	b29a      	uxth	r2, r3
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801010a:	bf00      	nop
 801010c:	3714      	adds	r7, #20
 801010e:	46bd      	mov	sp, r7
 8010110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop
 8010118:	08018348 	.word	0x08018348
 801011c:	08018350 	.word	0x08018350

08010120 <malloc>:
 8010120:	4b02      	ldr	r3, [pc, #8]	@ (801012c <malloc+0xc>)
 8010122:	4601      	mov	r1, r0
 8010124:	6818      	ldr	r0, [r3, #0]
 8010126:	f000 b825 	b.w	8010174 <_malloc_r>
 801012a:	bf00      	nop
 801012c:	2000004c 	.word	0x2000004c

08010130 <sbrk_aligned>:
 8010130:	b570      	push	{r4, r5, r6, lr}
 8010132:	4e0f      	ldr	r6, [pc, #60]	@ (8010170 <sbrk_aligned+0x40>)
 8010134:	460c      	mov	r4, r1
 8010136:	6831      	ldr	r1, [r6, #0]
 8010138:	4605      	mov	r5, r0
 801013a:	b911      	cbnz	r1, 8010142 <sbrk_aligned+0x12>
 801013c:	f000 fe78 	bl	8010e30 <_sbrk_r>
 8010140:	6030      	str	r0, [r6, #0]
 8010142:	4621      	mov	r1, r4
 8010144:	4628      	mov	r0, r5
 8010146:	f000 fe73 	bl	8010e30 <_sbrk_r>
 801014a:	1c43      	adds	r3, r0, #1
 801014c:	d103      	bne.n	8010156 <sbrk_aligned+0x26>
 801014e:	f04f 34ff 	mov.w	r4, #4294967295
 8010152:	4620      	mov	r0, r4
 8010154:	bd70      	pop	{r4, r5, r6, pc}
 8010156:	1cc4      	adds	r4, r0, #3
 8010158:	f024 0403 	bic.w	r4, r4, #3
 801015c:	42a0      	cmp	r0, r4
 801015e:	d0f8      	beq.n	8010152 <sbrk_aligned+0x22>
 8010160:	1a21      	subs	r1, r4, r0
 8010162:	4628      	mov	r0, r5
 8010164:	f000 fe64 	bl	8010e30 <_sbrk_r>
 8010168:	3001      	adds	r0, #1
 801016a:	d1f2      	bne.n	8010152 <sbrk_aligned+0x22>
 801016c:	e7ef      	b.n	801014e <sbrk_aligned+0x1e>
 801016e:	bf00      	nop
 8010170:	20000b3c 	.word	0x20000b3c

08010174 <_malloc_r>:
 8010174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010178:	1ccd      	adds	r5, r1, #3
 801017a:	f025 0503 	bic.w	r5, r5, #3
 801017e:	3508      	adds	r5, #8
 8010180:	2d0c      	cmp	r5, #12
 8010182:	bf38      	it	cc
 8010184:	250c      	movcc	r5, #12
 8010186:	2d00      	cmp	r5, #0
 8010188:	4606      	mov	r6, r0
 801018a:	db01      	blt.n	8010190 <_malloc_r+0x1c>
 801018c:	42a9      	cmp	r1, r5
 801018e:	d904      	bls.n	801019a <_malloc_r+0x26>
 8010190:	230c      	movs	r3, #12
 8010192:	6033      	str	r3, [r6, #0]
 8010194:	2000      	movs	r0, #0
 8010196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801019a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010270 <_malloc_r+0xfc>
 801019e:	f000 f869 	bl	8010274 <__malloc_lock>
 80101a2:	f8d8 3000 	ldr.w	r3, [r8]
 80101a6:	461c      	mov	r4, r3
 80101a8:	bb44      	cbnz	r4, 80101fc <_malloc_r+0x88>
 80101aa:	4629      	mov	r1, r5
 80101ac:	4630      	mov	r0, r6
 80101ae:	f7ff ffbf 	bl	8010130 <sbrk_aligned>
 80101b2:	1c43      	adds	r3, r0, #1
 80101b4:	4604      	mov	r4, r0
 80101b6:	d158      	bne.n	801026a <_malloc_r+0xf6>
 80101b8:	f8d8 4000 	ldr.w	r4, [r8]
 80101bc:	4627      	mov	r7, r4
 80101be:	2f00      	cmp	r7, #0
 80101c0:	d143      	bne.n	801024a <_malloc_r+0xd6>
 80101c2:	2c00      	cmp	r4, #0
 80101c4:	d04b      	beq.n	801025e <_malloc_r+0xea>
 80101c6:	6823      	ldr	r3, [r4, #0]
 80101c8:	4639      	mov	r1, r7
 80101ca:	4630      	mov	r0, r6
 80101cc:	eb04 0903 	add.w	r9, r4, r3
 80101d0:	f000 fe2e 	bl	8010e30 <_sbrk_r>
 80101d4:	4581      	cmp	r9, r0
 80101d6:	d142      	bne.n	801025e <_malloc_r+0xea>
 80101d8:	6821      	ldr	r1, [r4, #0]
 80101da:	1a6d      	subs	r5, r5, r1
 80101dc:	4629      	mov	r1, r5
 80101de:	4630      	mov	r0, r6
 80101e0:	f7ff ffa6 	bl	8010130 <sbrk_aligned>
 80101e4:	3001      	adds	r0, #1
 80101e6:	d03a      	beq.n	801025e <_malloc_r+0xea>
 80101e8:	6823      	ldr	r3, [r4, #0]
 80101ea:	442b      	add	r3, r5
 80101ec:	6023      	str	r3, [r4, #0]
 80101ee:	f8d8 3000 	ldr.w	r3, [r8]
 80101f2:	685a      	ldr	r2, [r3, #4]
 80101f4:	bb62      	cbnz	r2, 8010250 <_malloc_r+0xdc>
 80101f6:	f8c8 7000 	str.w	r7, [r8]
 80101fa:	e00f      	b.n	801021c <_malloc_r+0xa8>
 80101fc:	6822      	ldr	r2, [r4, #0]
 80101fe:	1b52      	subs	r2, r2, r5
 8010200:	d420      	bmi.n	8010244 <_malloc_r+0xd0>
 8010202:	2a0b      	cmp	r2, #11
 8010204:	d917      	bls.n	8010236 <_malloc_r+0xc2>
 8010206:	1961      	adds	r1, r4, r5
 8010208:	42a3      	cmp	r3, r4
 801020a:	6025      	str	r5, [r4, #0]
 801020c:	bf18      	it	ne
 801020e:	6059      	strne	r1, [r3, #4]
 8010210:	6863      	ldr	r3, [r4, #4]
 8010212:	bf08      	it	eq
 8010214:	f8c8 1000 	streq.w	r1, [r8]
 8010218:	5162      	str	r2, [r4, r5]
 801021a:	604b      	str	r3, [r1, #4]
 801021c:	4630      	mov	r0, r6
 801021e:	f000 f82f 	bl	8010280 <__malloc_unlock>
 8010222:	f104 000b 	add.w	r0, r4, #11
 8010226:	1d23      	adds	r3, r4, #4
 8010228:	f020 0007 	bic.w	r0, r0, #7
 801022c:	1ac2      	subs	r2, r0, r3
 801022e:	bf1c      	itt	ne
 8010230:	1a1b      	subne	r3, r3, r0
 8010232:	50a3      	strne	r3, [r4, r2]
 8010234:	e7af      	b.n	8010196 <_malloc_r+0x22>
 8010236:	6862      	ldr	r2, [r4, #4]
 8010238:	42a3      	cmp	r3, r4
 801023a:	bf0c      	ite	eq
 801023c:	f8c8 2000 	streq.w	r2, [r8]
 8010240:	605a      	strne	r2, [r3, #4]
 8010242:	e7eb      	b.n	801021c <_malloc_r+0xa8>
 8010244:	4623      	mov	r3, r4
 8010246:	6864      	ldr	r4, [r4, #4]
 8010248:	e7ae      	b.n	80101a8 <_malloc_r+0x34>
 801024a:	463c      	mov	r4, r7
 801024c:	687f      	ldr	r7, [r7, #4]
 801024e:	e7b6      	b.n	80101be <_malloc_r+0x4a>
 8010250:	461a      	mov	r2, r3
 8010252:	685b      	ldr	r3, [r3, #4]
 8010254:	42a3      	cmp	r3, r4
 8010256:	d1fb      	bne.n	8010250 <_malloc_r+0xdc>
 8010258:	2300      	movs	r3, #0
 801025a:	6053      	str	r3, [r2, #4]
 801025c:	e7de      	b.n	801021c <_malloc_r+0xa8>
 801025e:	230c      	movs	r3, #12
 8010260:	6033      	str	r3, [r6, #0]
 8010262:	4630      	mov	r0, r6
 8010264:	f000 f80c 	bl	8010280 <__malloc_unlock>
 8010268:	e794      	b.n	8010194 <_malloc_r+0x20>
 801026a:	6005      	str	r5, [r0, #0]
 801026c:	e7d6      	b.n	801021c <_malloc_r+0xa8>
 801026e:	bf00      	nop
 8010270:	20000b40 	.word	0x20000b40

08010274 <__malloc_lock>:
 8010274:	4801      	ldr	r0, [pc, #4]	@ (801027c <__malloc_lock+0x8>)
 8010276:	f000 be28 	b.w	8010eca <__retarget_lock_acquire_recursive>
 801027a:	bf00      	nop
 801027c:	20000c84 	.word	0x20000c84

08010280 <__malloc_unlock>:
 8010280:	4801      	ldr	r0, [pc, #4]	@ (8010288 <__malloc_unlock+0x8>)
 8010282:	f000 be23 	b.w	8010ecc <__retarget_lock_release_recursive>
 8010286:	bf00      	nop
 8010288:	20000c84 	.word	0x20000c84

0801028c <__cvt>:
 801028c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010290:	ec57 6b10 	vmov	r6, r7, d0
 8010294:	2f00      	cmp	r7, #0
 8010296:	460c      	mov	r4, r1
 8010298:	4619      	mov	r1, r3
 801029a:	463b      	mov	r3, r7
 801029c:	bfbb      	ittet	lt
 801029e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80102a2:	461f      	movlt	r7, r3
 80102a4:	2300      	movge	r3, #0
 80102a6:	232d      	movlt	r3, #45	@ 0x2d
 80102a8:	700b      	strb	r3, [r1, #0]
 80102aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80102ac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80102b0:	4691      	mov	r9, r2
 80102b2:	f023 0820 	bic.w	r8, r3, #32
 80102b6:	bfbc      	itt	lt
 80102b8:	4632      	movlt	r2, r6
 80102ba:	4616      	movlt	r6, r2
 80102bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80102c0:	d005      	beq.n	80102ce <__cvt+0x42>
 80102c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80102c6:	d100      	bne.n	80102ca <__cvt+0x3e>
 80102c8:	3401      	adds	r4, #1
 80102ca:	2102      	movs	r1, #2
 80102cc:	e000      	b.n	80102d0 <__cvt+0x44>
 80102ce:	2103      	movs	r1, #3
 80102d0:	ab03      	add	r3, sp, #12
 80102d2:	9301      	str	r3, [sp, #4]
 80102d4:	ab02      	add	r3, sp, #8
 80102d6:	9300      	str	r3, [sp, #0]
 80102d8:	ec47 6b10 	vmov	d0, r6, r7
 80102dc:	4653      	mov	r3, sl
 80102de:	4622      	mov	r2, r4
 80102e0:	f000 fe8e 	bl	8011000 <_dtoa_r>
 80102e4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80102e8:	4605      	mov	r5, r0
 80102ea:	d119      	bne.n	8010320 <__cvt+0x94>
 80102ec:	f019 0f01 	tst.w	r9, #1
 80102f0:	d00e      	beq.n	8010310 <__cvt+0x84>
 80102f2:	eb00 0904 	add.w	r9, r0, r4
 80102f6:	2200      	movs	r2, #0
 80102f8:	2300      	movs	r3, #0
 80102fa:	4630      	mov	r0, r6
 80102fc:	4639      	mov	r1, r7
 80102fe:	f7f0 fbfb 	bl	8000af8 <__aeabi_dcmpeq>
 8010302:	b108      	cbz	r0, 8010308 <__cvt+0x7c>
 8010304:	f8cd 900c 	str.w	r9, [sp, #12]
 8010308:	2230      	movs	r2, #48	@ 0x30
 801030a:	9b03      	ldr	r3, [sp, #12]
 801030c:	454b      	cmp	r3, r9
 801030e:	d31e      	bcc.n	801034e <__cvt+0xc2>
 8010310:	9b03      	ldr	r3, [sp, #12]
 8010312:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010314:	1b5b      	subs	r3, r3, r5
 8010316:	4628      	mov	r0, r5
 8010318:	6013      	str	r3, [r2, #0]
 801031a:	b004      	add	sp, #16
 801031c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010320:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010324:	eb00 0904 	add.w	r9, r0, r4
 8010328:	d1e5      	bne.n	80102f6 <__cvt+0x6a>
 801032a:	7803      	ldrb	r3, [r0, #0]
 801032c:	2b30      	cmp	r3, #48	@ 0x30
 801032e:	d10a      	bne.n	8010346 <__cvt+0xba>
 8010330:	2200      	movs	r2, #0
 8010332:	2300      	movs	r3, #0
 8010334:	4630      	mov	r0, r6
 8010336:	4639      	mov	r1, r7
 8010338:	f7f0 fbde 	bl	8000af8 <__aeabi_dcmpeq>
 801033c:	b918      	cbnz	r0, 8010346 <__cvt+0xba>
 801033e:	f1c4 0401 	rsb	r4, r4, #1
 8010342:	f8ca 4000 	str.w	r4, [sl]
 8010346:	f8da 3000 	ldr.w	r3, [sl]
 801034a:	4499      	add	r9, r3
 801034c:	e7d3      	b.n	80102f6 <__cvt+0x6a>
 801034e:	1c59      	adds	r1, r3, #1
 8010350:	9103      	str	r1, [sp, #12]
 8010352:	701a      	strb	r2, [r3, #0]
 8010354:	e7d9      	b.n	801030a <__cvt+0x7e>

08010356 <__exponent>:
 8010356:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010358:	2900      	cmp	r1, #0
 801035a:	bfba      	itte	lt
 801035c:	4249      	neglt	r1, r1
 801035e:	232d      	movlt	r3, #45	@ 0x2d
 8010360:	232b      	movge	r3, #43	@ 0x2b
 8010362:	2909      	cmp	r1, #9
 8010364:	7002      	strb	r2, [r0, #0]
 8010366:	7043      	strb	r3, [r0, #1]
 8010368:	dd29      	ble.n	80103be <__exponent+0x68>
 801036a:	f10d 0307 	add.w	r3, sp, #7
 801036e:	461d      	mov	r5, r3
 8010370:	270a      	movs	r7, #10
 8010372:	461a      	mov	r2, r3
 8010374:	fbb1 f6f7 	udiv	r6, r1, r7
 8010378:	fb07 1416 	mls	r4, r7, r6, r1
 801037c:	3430      	adds	r4, #48	@ 0x30
 801037e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010382:	460c      	mov	r4, r1
 8010384:	2c63      	cmp	r4, #99	@ 0x63
 8010386:	f103 33ff 	add.w	r3, r3, #4294967295
 801038a:	4631      	mov	r1, r6
 801038c:	dcf1      	bgt.n	8010372 <__exponent+0x1c>
 801038e:	3130      	adds	r1, #48	@ 0x30
 8010390:	1e94      	subs	r4, r2, #2
 8010392:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010396:	1c41      	adds	r1, r0, #1
 8010398:	4623      	mov	r3, r4
 801039a:	42ab      	cmp	r3, r5
 801039c:	d30a      	bcc.n	80103b4 <__exponent+0x5e>
 801039e:	f10d 0309 	add.w	r3, sp, #9
 80103a2:	1a9b      	subs	r3, r3, r2
 80103a4:	42ac      	cmp	r4, r5
 80103a6:	bf88      	it	hi
 80103a8:	2300      	movhi	r3, #0
 80103aa:	3302      	adds	r3, #2
 80103ac:	4403      	add	r3, r0
 80103ae:	1a18      	subs	r0, r3, r0
 80103b0:	b003      	add	sp, #12
 80103b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80103b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80103bc:	e7ed      	b.n	801039a <__exponent+0x44>
 80103be:	2330      	movs	r3, #48	@ 0x30
 80103c0:	3130      	adds	r1, #48	@ 0x30
 80103c2:	7083      	strb	r3, [r0, #2]
 80103c4:	70c1      	strb	r1, [r0, #3]
 80103c6:	1d03      	adds	r3, r0, #4
 80103c8:	e7f1      	b.n	80103ae <__exponent+0x58>
	...

080103cc <_printf_float>:
 80103cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d0:	b08d      	sub	sp, #52	@ 0x34
 80103d2:	460c      	mov	r4, r1
 80103d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80103d8:	4616      	mov	r6, r2
 80103da:	461f      	mov	r7, r3
 80103dc:	4605      	mov	r5, r0
 80103de:	f000 fcef 	bl	8010dc0 <_localeconv_r>
 80103e2:	6803      	ldr	r3, [r0, #0]
 80103e4:	9304      	str	r3, [sp, #16]
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7ef ff5a 	bl	80002a0 <strlen>
 80103ec:	2300      	movs	r3, #0
 80103ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80103f0:	f8d8 3000 	ldr.w	r3, [r8]
 80103f4:	9005      	str	r0, [sp, #20]
 80103f6:	3307      	adds	r3, #7
 80103f8:	f023 0307 	bic.w	r3, r3, #7
 80103fc:	f103 0208 	add.w	r2, r3, #8
 8010400:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010404:	f8d4 b000 	ldr.w	fp, [r4]
 8010408:	f8c8 2000 	str.w	r2, [r8]
 801040c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010410:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010414:	9307      	str	r3, [sp, #28]
 8010416:	f8cd 8018 	str.w	r8, [sp, #24]
 801041a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801041e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010422:	4b9c      	ldr	r3, [pc, #624]	@ (8010694 <_printf_float+0x2c8>)
 8010424:	f04f 32ff 	mov.w	r2, #4294967295
 8010428:	f7f0 fb98 	bl	8000b5c <__aeabi_dcmpun>
 801042c:	bb70      	cbnz	r0, 801048c <_printf_float+0xc0>
 801042e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010432:	4b98      	ldr	r3, [pc, #608]	@ (8010694 <_printf_float+0x2c8>)
 8010434:	f04f 32ff 	mov.w	r2, #4294967295
 8010438:	f7f0 fb72 	bl	8000b20 <__aeabi_dcmple>
 801043c:	bb30      	cbnz	r0, 801048c <_printf_float+0xc0>
 801043e:	2200      	movs	r2, #0
 8010440:	2300      	movs	r3, #0
 8010442:	4640      	mov	r0, r8
 8010444:	4649      	mov	r1, r9
 8010446:	f7f0 fb61 	bl	8000b0c <__aeabi_dcmplt>
 801044a:	b110      	cbz	r0, 8010452 <_printf_float+0x86>
 801044c:	232d      	movs	r3, #45	@ 0x2d
 801044e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010452:	4a91      	ldr	r2, [pc, #580]	@ (8010698 <_printf_float+0x2cc>)
 8010454:	4b91      	ldr	r3, [pc, #580]	@ (801069c <_printf_float+0x2d0>)
 8010456:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801045a:	bf94      	ite	ls
 801045c:	4690      	movls	r8, r2
 801045e:	4698      	movhi	r8, r3
 8010460:	2303      	movs	r3, #3
 8010462:	6123      	str	r3, [r4, #16]
 8010464:	f02b 0304 	bic.w	r3, fp, #4
 8010468:	6023      	str	r3, [r4, #0]
 801046a:	f04f 0900 	mov.w	r9, #0
 801046e:	9700      	str	r7, [sp, #0]
 8010470:	4633      	mov	r3, r6
 8010472:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010474:	4621      	mov	r1, r4
 8010476:	4628      	mov	r0, r5
 8010478:	f000 f9d2 	bl	8010820 <_printf_common>
 801047c:	3001      	adds	r0, #1
 801047e:	f040 808d 	bne.w	801059c <_printf_float+0x1d0>
 8010482:	f04f 30ff 	mov.w	r0, #4294967295
 8010486:	b00d      	add	sp, #52	@ 0x34
 8010488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801048c:	4642      	mov	r2, r8
 801048e:	464b      	mov	r3, r9
 8010490:	4640      	mov	r0, r8
 8010492:	4649      	mov	r1, r9
 8010494:	f7f0 fb62 	bl	8000b5c <__aeabi_dcmpun>
 8010498:	b140      	cbz	r0, 80104ac <_printf_float+0xe0>
 801049a:	464b      	mov	r3, r9
 801049c:	2b00      	cmp	r3, #0
 801049e:	bfbc      	itt	lt
 80104a0:	232d      	movlt	r3, #45	@ 0x2d
 80104a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80104a6:	4a7e      	ldr	r2, [pc, #504]	@ (80106a0 <_printf_float+0x2d4>)
 80104a8:	4b7e      	ldr	r3, [pc, #504]	@ (80106a4 <_printf_float+0x2d8>)
 80104aa:	e7d4      	b.n	8010456 <_printf_float+0x8a>
 80104ac:	6863      	ldr	r3, [r4, #4]
 80104ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80104b2:	9206      	str	r2, [sp, #24]
 80104b4:	1c5a      	adds	r2, r3, #1
 80104b6:	d13b      	bne.n	8010530 <_printf_float+0x164>
 80104b8:	2306      	movs	r3, #6
 80104ba:	6063      	str	r3, [r4, #4]
 80104bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80104c0:	2300      	movs	r3, #0
 80104c2:	6022      	str	r2, [r4, #0]
 80104c4:	9303      	str	r3, [sp, #12]
 80104c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80104c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80104cc:	ab09      	add	r3, sp, #36	@ 0x24
 80104ce:	9300      	str	r3, [sp, #0]
 80104d0:	6861      	ldr	r1, [r4, #4]
 80104d2:	ec49 8b10 	vmov	d0, r8, r9
 80104d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80104da:	4628      	mov	r0, r5
 80104dc:	f7ff fed6 	bl	801028c <__cvt>
 80104e0:	9b06      	ldr	r3, [sp, #24]
 80104e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80104e4:	2b47      	cmp	r3, #71	@ 0x47
 80104e6:	4680      	mov	r8, r0
 80104e8:	d129      	bne.n	801053e <_printf_float+0x172>
 80104ea:	1cc8      	adds	r0, r1, #3
 80104ec:	db02      	blt.n	80104f4 <_printf_float+0x128>
 80104ee:	6863      	ldr	r3, [r4, #4]
 80104f0:	4299      	cmp	r1, r3
 80104f2:	dd41      	ble.n	8010578 <_printf_float+0x1ac>
 80104f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80104f8:	fa5f fa8a 	uxtb.w	sl, sl
 80104fc:	3901      	subs	r1, #1
 80104fe:	4652      	mov	r2, sl
 8010500:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010504:	9109      	str	r1, [sp, #36]	@ 0x24
 8010506:	f7ff ff26 	bl	8010356 <__exponent>
 801050a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801050c:	1813      	adds	r3, r2, r0
 801050e:	2a01      	cmp	r2, #1
 8010510:	4681      	mov	r9, r0
 8010512:	6123      	str	r3, [r4, #16]
 8010514:	dc02      	bgt.n	801051c <_printf_float+0x150>
 8010516:	6822      	ldr	r2, [r4, #0]
 8010518:	07d2      	lsls	r2, r2, #31
 801051a:	d501      	bpl.n	8010520 <_printf_float+0x154>
 801051c:	3301      	adds	r3, #1
 801051e:	6123      	str	r3, [r4, #16]
 8010520:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010524:	2b00      	cmp	r3, #0
 8010526:	d0a2      	beq.n	801046e <_printf_float+0xa2>
 8010528:	232d      	movs	r3, #45	@ 0x2d
 801052a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801052e:	e79e      	b.n	801046e <_printf_float+0xa2>
 8010530:	9a06      	ldr	r2, [sp, #24]
 8010532:	2a47      	cmp	r2, #71	@ 0x47
 8010534:	d1c2      	bne.n	80104bc <_printf_float+0xf0>
 8010536:	2b00      	cmp	r3, #0
 8010538:	d1c0      	bne.n	80104bc <_printf_float+0xf0>
 801053a:	2301      	movs	r3, #1
 801053c:	e7bd      	b.n	80104ba <_printf_float+0xee>
 801053e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010542:	d9db      	bls.n	80104fc <_printf_float+0x130>
 8010544:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010548:	d118      	bne.n	801057c <_printf_float+0x1b0>
 801054a:	2900      	cmp	r1, #0
 801054c:	6863      	ldr	r3, [r4, #4]
 801054e:	dd0b      	ble.n	8010568 <_printf_float+0x19c>
 8010550:	6121      	str	r1, [r4, #16]
 8010552:	b913      	cbnz	r3, 801055a <_printf_float+0x18e>
 8010554:	6822      	ldr	r2, [r4, #0]
 8010556:	07d0      	lsls	r0, r2, #31
 8010558:	d502      	bpl.n	8010560 <_printf_float+0x194>
 801055a:	3301      	adds	r3, #1
 801055c:	440b      	add	r3, r1
 801055e:	6123      	str	r3, [r4, #16]
 8010560:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010562:	f04f 0900 	mov.w	r9, #0
 8010566:	e7db      	b.n	8010520 <_printf_float+0x154>
 8010568:	b913      	cbnz	r3, 8010570 <_printf_float+0x1a4>
 801056a:	6822      	ldr	r2, [r4, #0]
 801056c:	07d2      	lsls	r2, r2, #31
 801056e:	d501      	bpl.n	8010574 <_printf_float+0x1a8>
 8010570:	3302      	adds	r3, #2
 8010572:	e7f4      	b.n	801055e <_printf_float+0x192>
 8010574:	2301      	movs	r3, #1
 8010576:	e7f2      	b.n	801055e <_printf_float+0x192>
 8010578:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801057c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801057e:	4299      	cmp	r1, r3
 8010580:	db05      	blt.n	801058e <_printf_float+0x1c2>
 8010582:	6823      	ldr	r3, [r4, #0]
 8010584:	6121      	str	r1, [r4, #16]
 8010586:	07d8      	lsls	r0, r3, #31
 8010588:	d5ea      	bpl.n	8010560 <_printf_float+0x194>
 801058a:	1c4b      	adds	r3, r1, #1
 801058c:	e7e7      	b.n	801055e <_printf_float+0x192>
 801058e:	2900      	cmp	r1, #0
 8010590:	bfd4      	ite	le
 8010592:	f1c1 0202 	rsble	r2, r1, #2
 8010596:	2201      	movgt	r2, #1
 8010598:	4413      	add	r3, r2
 801059a:	e7e0      	b.n	801055e <_printf_float+0x192>
 801059c:	6823      	ldr	r3, [r4, #0]
 801059e:	055a      	lsls	r2, r3, #21
 80105a0:	d407      	bmi.n	80105b2 <_printf_float+0x1e6>
 80105a2:	6923      	ldr	r3, [r4, #16]
 80105a4:	4642      	mov	r2, r8
 80105a6:	4631      	mov	r1, r6
 80105a8:	4628      	mov	r0, r5
 80105aa:	47b8      	blx	r7
 80105ac:	3001      	adds	r0, #1
 80105ae:	d12b      	bne.n	8010608 <_printf_float+0x23c>
 80105b0:	e767      	b.n	8010482 <_printf_float+0xb6>
 80105b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80105b6:	f240 80dd 	bls.w	8010774 <_printf_float+0x3a8>
 80105ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80105be:	2200      	movs	r2, #0
 80105c0:	2300      	movs	r3, #0
 80105c2:	f7f0 fa99 	bl	8000af8 <__aeabi_dcmpeq>
 80105c6:	2800      	cmp	r0, #0
 80105c8:	d033      	beq.n	8010632 <_printf_float+0x266>
 80105ca:	4a37      	ldr	r2, [pc, #220]	@ (80106a8 <_printf_float+0x2dc>)
 80105cc:	2301      	movs	r3, #1
 80105ce:	4631      	mov	r1, r6
 80105d0:	4628      	mov	r0, r5
 80105d2:	47b8      	blx	r7
 80105d4:	3001      	adds	r0, #1
 80105d6:	f43f af54 	beq.w	8010482 <_printf_float+0xb6>
 80105da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80105de:	4543      	cmp	r3, r8
 80105e0:	db02      	blt.n	80105e8 <_printf_float+0x21c>
 80105e2:	6823      	ldr	r3, [r4, #0]
 80105e4:	07d8      	lsls	r0, r3, #31
 80105e6:	d50f      	bpl.n	8010608 <_printf_float+0x23c>
 80105e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80105ec:	4631      	mov	r1, r6
 80105ee:	4628      	mov	r0, r5
 80105f0:	47b8      	blx	r7
 80105f2:	3001      	adds	r0, #1
 80105f4:	f43f af45 	beq.w	8010482 <_printf_float+0xb6>
 80105f8:	f04f 0900 	mov.w	r9, #0
 80105fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8010600:	f104 0a1a 	add.w	sl, r4, #26
 8010604:	45c8      	cmp	r8, r9
 8010606:	dc09      	bgt.n	801061c <_printf_float+0x250>
 8010608:	6823      	ldr	r3, [r4, #0]
 801060a:	079b      	lsls	r3, r3, #30
 801060c:	f100 8103 	bmi.w	8010816 <_printf_float+0x44a>
 8010610:	68e0      	ldr	r0, [r4, #12]
 8010612:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010614:	4298      	cmp	r0, r3
 8010616:	bfb8      	it	lt
 8010618:	4618      	movlt	r0, r3
 801061a:	e734      	b.n	8010486 <_printf_float+0xba>
 801061c:	2301      	movs	r3, #1
 801061e:	4652      	mov	r2, sl
 8010620:	4631      	mov	r1, r6
 8010622:	4628      	mov	r0, r5
 8010624:	47b8      	blx	r7
 8010626:	3001      	adds	r0, #1
 8010628:	f43f af2b 	beq.w	8010482 <_printf_float+0xb6>
 801062c:	f109 0901 	add.w	r9, r9, #1
 8010630:	e7e8      	b.n	8010604 <_printf_float+0x238>
 8010632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010634:	2b00      	cmp	r3, #0
 8010636:	dc39      	bgt.n	80106ac <_printf_float+0x2e0>
 8010638:	4a1b      	ldr	r2, [pc, #108]	@ (80106a8 <_printf_float+0x2dc>)
 801063a:	2301      	movs	r3, #1
 801063c:	4631      	mov	r1, r6
 801063e:	4628      	mov	r0, r5
 8010640:	47b8      	blx	r7
 8010642:	3001      	adds	r0, #1
 8010644:	f43f af1d 	beq.w	8010482 <_printf_float+0xb6>
 8010648:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801064c:	ea59 0303 	orrs.w	r3, r9, r3
 8010650:	d102      	bne.n	8010658 <_printf_float+0x28c>
 8010652:	6823      	ldr	r3, [r4, #0]
 8010654:	07d9      	lsls	r1, r3, #31
 8010656:	d5d7      	bpl.n	8010608 <_printf_float+0x23c>
 8010658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801065c:	4631      	mov	r1, r6
 801065e:	4628      	mov	r0, r5
 8010660:	47b8      	blx	r7
 8010662:	3001      	adds	r0, #1
 8010664:	f43f af0d 	beq.w	8010482 <_printf_float+0xb6>
 8010668:	f04f 0a00 	mov.w	sl, #0
 801066c:	f104 0b1a 	add.w	fp, r4, #26
 8010670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010672:	425b      	negs	r3, r3
 8010674:	4553      	cmp	r3, sl
 8010676:	dc01      	bgt.n	801067c <_printf_float+0x2b0>
 8010678:	464b      	mov	r3, r9
 801067a:	e793      	b.n	80105a4 <_printf_float+0x1d8>
 801067c:	2301      	movs	r3, #1
 801067e:	465a      	mov	r2, fp
 8010680:	4631      	mov	r1, r6
 8010682:	4628      	mov	r0, r5
 8010684:	47b8      	blx	r7
 8010686:	3001      	adds	r0, #1
 8010688:	f43f aefb 	beq.w	8010482 <_printf_float+0xb6>
 801068c:	f10a 0a01 	add.w	sl, sl, #1
 8010690:	e7ee      	b.n	8010670 <_printf_float+0x2a4>
 8010692:	bf00      	nop
 8010694:	7fefffff 	.word	0x7fefffff
 8010698:	08018358 	.word	0x08018358
 801069c:	0801835c 	.word	0x0801835c
 80106a0:	08018360 	.word	0x08018360
 80106a4:	08018364 	.word	0x08018364
 80106a8:	08018368 	.word	0x08018368
 80106ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80106ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80106b2:	4553      	cmp	r3, sl
 80106b4:	bfa8      	it	ge
 80106b6:	4653      	movge	r3, sl
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	4699      	mov	r9, r3
 80106bc:	dc36      	bgt.n	801072c <_printf_float+0x360>
 80106be:	f04f 0b00 	mov.w	fp, #0
 80106c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80106c6:	f104 021a 	add.w	r2, r4, #26
 80106ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80106cc:	9306      	str	r3, [sp, #24]
 80106ce:	eba3 0309 	sub.w	r3, r3, r9
 80106d2:	455b      	cmp	r3, fp
 80106d4:	dc31      	bgt.n	801073a <_printf_float+0x36e>
 80106d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106d8:	459a      	cmp	sl, r3
 80106da:	dc3a      	bgt.n	8010752 <_printf_float+0x386>
 80106dc:	6823      	ldr	r3, [r4, #0]
 80106de:	07da      	lsls	r2, r3, #31
 80106e0:	d437      	bmi.n	8010752 <_printf_float+0x386>
 80106e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106e4:	ebaa 0903 	sub.w	r9, sl, r3
 80106e8:	9b06      	ldr	r3, [sp, #24]
 80106ea:	ebaa 0303 	sub.w	r3, sl, r3
 80106ee:	4599      	cmp	r9, r3
 80106f0:	bfa8      	it	ge
 80106f2:	4699      	movge	r9, r3
 80106f4:	f1b9 0f00 	cmp.w	r9, #0
 80106f8:	dc33      	bgt.n	8010762 <_printf_float+0x396>
 80106fa:	f04f 0800 	mov.w	r8, #0
 80106fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010702:	f104 0b1a 	add.w	fp, r4, #26
 8010706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010708:	ebaa 0303 	sub.w	r3, sl, r3
 801070c:	eba3 0309 	sub.w	r3, r3, r9
 8010710:	4543      	cmp	r3, r8
 8010712:	f77f af79 	ble.w	8010608 <_printf_float+0x23c>
 8010716:	2301      	movs	r3, #1
 8010718:	465a      	mov	r2, fp
 801071a:	4631      	mov	r1, r6
 801071c:	4628      	mov	r0, r5
 801071e:	47b8      	blx	r7
 8010720:	3001      	adds	r0, #1
 8010722:	f43f aeae 	beq.w	8010482 <_printf_float+0xb6>
 8010726:	f108 0801 	add.w	r8, r8, #1
 801072a:	e7ec      	b.n	8010706 <_printf_float+0x33a>
 801072c:	4642      	mov	r2, r8
 801072e:	4631      	mov	r1, r6
 8010730:	4628      	mov	r0, r5
 8010732:	47b8      	blx	r7
 8010734:	3001      	adds	r0, #1
 8010736:	d1c2      	bne.n	80106be <_printf_float+0x2f2>
 8010738:	e6a3      	b.n	8010482 <_printf_float+0xb6>
 801073a:	2301      	movs	r3, #1
 801073c:	4631      	mov	r1, r6
 801073e:	4628      	mov	r0, r5
 8010740:	9206      	str	r2, [sp, #24]
 8010742:	47b8      	blx	r7
 8010744:	3001      	adds	r0, #1
 8010746:	f43f ae9c 	beq.w	8010482 <_printf_float+0xb6>
 801074a:	9a06      	ldr	r2, [sp, #24]
 801074c:	f10b 0b01 	add.w	fp, fp, #1
 8010750:	e7bb      	b.n	80106ca <_printf_float+0x2fe>
 8010752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010756:	4631      	mov	r1, r6
 8010758:	4628      	mov	r0, r5
 801075a:	47b8      	blx	r7
 801075c:	3001      	adds	r0, #1
 801075e:	d1c0      	bne.n	80106e2 <_printf_float+0x316>
 8010760:	e68f      	b.n	8010482 <_printf_float+0xb6>
 8010762:	9a06      	ldr	r2, [sp, #24]
 8010764:	464b      	mov	r3, r9
 8010766:	4442      	add	r2, r8
 8010768:	4631      	mov	r1, r6
 801076a:	4628      	mov	r0, r5
 801076c:	47b8      	blx	r7
 801076e:	3001      	adds	r0, #1
 8010770:	d1c3      	bne.n	80106fa <_printf_float+0x32e>
 8010772:	e686      	b.n	8010482 <_printf_float+0xb6>
 8010774:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010778:	f1ba 0f01 	cmp.w	sl, #1
 801077c:	dc01      	bgt.n	8010782 <_printf_float+0x3b6>
 801077e:	07db      	lsls	r3, r3, #31
 8010780:	d536      	bpl.n	80107f0 <_printf_float+0x424>
 8010782:	2301      	movs	r3, #1
 8010784:	4642      	mov	r2, r8
 8010786:	4631      	mov	r1, r6
 8010788:	4628      	mov	r0, r5
 801078a:	47b8      	blx	r7
 801078c:	3001      	adds	r0, #1
 801078e:	f43f ae78 	beq.w	8010482 <_printf_float+0xb6>
 8010792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010796:	4631      	mov	r1, r6
 8010798:	4628      	mov	r0, r5
 801079a:	47b8      	blx	r7
 801079c:	3001      	adds	r0, #1
 801079e:	f43f ae70 	beq.w	8010482 <_printf_float+0xb6>
 80107a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80107a6:	2200      	movs	r2, #0
 80107a8:	2300      	movs	r3, #0
 80107aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80107ae:	f7f0 f9a3 	bl	8000af8 <__aeabi_dcmpeq>
 80107b2:	b9c0      	cbnz	r0, 80107e6 <_printf_float+0x41a>
 80107b4:	4653      	mov	r3, sl
 80107b6:	f108 0201 	add.w	r2, r8, #1
 80107ba:	4631      	mov	r1, r6
 80107bc:	4628      	mov	r0, r5
 80107be:	47b8      	blx	r7
 80107c0:	3001      	adds	r0, #1
 80107c2:	d10c      	bne.n	80107de <_printf_float+0x412>
 80107c4:	e65d      	b.n	8010482 <_printf_float+0xb6>
 80107c6:	2301      	movs	r3, #1
 80107c8:	465a      	mov	r2, fp
 80107ca:	4631      	mov	r1, r6
 80107cc:	4628      	mov	r0, r5
 80107ce:	47b8      	blx	r7
 80107d0:	3001      	adds	r0, #1
 80107d2:	f43f ae56 	beq.w	8010482 <_printf_float+0xb6>
 80107d6:	f108 0801 	add.w	r8, r8, #1
 80107da:	45d0      	cmp	r8, sl
 80107dc:	dbf3      	blt.n	80107c6 <_printf_float+0x3fa>
 80107de:	464b      	mov	r3, r9
 80107e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80107e4:	e6df      	b.n	80105a6 <_printf_float+0x1da>
 80107e6:	f04f 0800 	mov.w	r8, #0
 80107ea:	f104 0b1a 	add.w	fp, r4, #26
 80107ee:	e7f4      	b.n	80107da <_printf_float+0x40e>
 80107f0:	2301      	movs	r3, #1
 80107f2:	4642      	mov	r2, r8
 80107f4:	e7e1      	b.n	80107ba <_printf_float+0x3ee>
 80107f6:	2301      	movs	r3, #1
 80107f8:	464a      	mov	r2, r9
 80107fa:	4631      	mov	r1, r6
 80107fc:	4628      	mov	r0, r5
 80107fe:	47b8      	blx	r7
 8010800:	3001      	adds	r0, #1
 8010802:	f43f ae3e 	beq.w	8010482 <_printf_float+0xb6>
 8010806:	f108 0801 	add.w	r8, r8, #1
 801080a:	68e3      	ldr	r3, [r4, #12]
 801080c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801080e:	1a5b      	subs	r3, r3, r1
 8010810:	4543      	cmp	r3, r8
 8010812:	dcf0      	bgt.n	80107f6 <_printf_float+0x42a>
 8010814:	e6fc      	b.n	8010610 <_printf_float+0x244>
 8010816:	f04f 0800 	mov.w	r8, #0
 801081a:	f104 0919 	add.w	r9, r4, #25
 801081e:	e7f4      	b.n	801080a <_printf_float+0x43e>

08010820 <_printf_common>:
 8010820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010824:	4616      	mov	r6, r2
 8010826:	4698      	mov	r8, r3
 8010828:	688a      	ldr	r2, [r1, #8]
 801082a:	690b      	ldr	r3, [r1, #16]
 801082c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010830:	4293      	cmp	r3, r2
 8010832:	bfb8      	it	lt
 8010834:	4613      	movlt	r3, r2
 8010836:	6033      	str	r3, [r6, #0]
 8010838:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801083c:	4607      	mov	r7, r0
 801083e:	460c      	mov	r4, r1
 8010840:	b10a      	cbz	r2, 8010846 <_printf_common+0x26>
 8010842:	3301      	adds	r3, #1
 8010844:	6033      	str	r3, [r6, #0]
 8010846:	6823      	ldr	r3, [r4, #0]
 8010848:	0699      	lsls	r1, r3, #26
 801084a:	bf42      	ittt	mi
 801084c:	6833      	ldrmi	r3, [r6, #0]
 801084e:	3302      	addmi	r3, #2
 8010850:	6033      	strmi	r3, [r6, #0]
 8010852:	6825      	ldr	r5, [r4, #0]
 8010854:	f015 0506 	ands.w	r5, r5, #6
 8010858:	d106      	bne.n	8010868 <_printf_common+0x48>
 801085a:	f104 0a19 	add.w	sl, r4, #25
 801085e:	68e3      	ldr	r3, [r4, #12]
 8010860:	6832      	ldr	r2, [r6, #0]
 8010862:	1a9b      	subs	r3, r3, r2
 8010864:	42ab      	cmp	r3, r5
 8010866:	dc26      	bgt.n	80108b6 <_printf_common+0x96>
 8010868:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801086c:	6822      	ldr	r2, [r4, #0]
 801086e:	3b00      	subs	r3, #0
 8010870:	bf18      	it	ne
 8010872:	2301      	movne	r3, #1
 8010874:	0692      	lsls	r2, r2, #26
 8010876:	d42b      	bmi.n	80108d0 <_printf_common+0xb0>
 8010878:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801087c:	4641      	mov	r1, r8
 801087e:	4638      	mov	r0, r7
 8010880:	47c8      	blx	r9
 8010882:	3001      	adds	r0, #1
 8010884:	d01e      	beq.n	80108c4 <_printf_common+0xa4>
 8010886:	6823      	ldr	r3, [r4, #0]
 8010888:	6922      	ldr	r2, [r4, #16]
 801088a:	f003 0306 	and.w	r3, r3, #6
 801088e:	2b04      	cmp	r3, #4
 8010890:	bf02      	ittt	eq
 8010892:	68e5      	ldreq	r5, [r4, #12]
 8010894:	6833      	ldreq	r3, [r6, #0]
 8010896:	1aed      	subeq	r5, r5, r3
 8010898:	68a3      	ldr	r3, [r4, #8]
 801089a:	bf0c      	ite	eq
 801089c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80108a0:	2500      	movne	r5, #0
 80108a2:	4293      	cmp	r3, r2
 80108a4:	bfc4      	itt	gt
 80108a6:	1a9b      	subgt	r3, r3, r2
 80108a8:	18ed      	addgt	r5, r5, r3
 80108aa:	2600      	movs	r6, #0
 80108ac:	341a      	adds	r4, #26
 80108ae:	42b5      	cmp	r5, r6
 80108b0:	d11a      	bne.n	80108e8 <_printf_common+0xc8>
 80108b2:	2000      	movs	r0, #0
 80108b4:	e008      	b.n	80108c8 <_printf_common+0xa8>
 80108b6:	2301      	movs	r3, #1
 80108b8:	4652      	mov	r2, sl
 80108ba:	4641      	mov	r1, r8
 80108bc:	4638      	mov	r0, r7
 80108be:	47c8      	blx	r9
 80108c0:	3001      	adds	r0, #1
 80108c2:	d103      	bne.n	80108cc <_printf_common+0xac>
 80108c4:	f04f 30ff 	mov.w	r0, #4294967295
 80108c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108cc:	3501      	adds	r5, #1
 80108ce:	e7c6      	b.n	801085e <_printf_common+0x3e>
 80108d0:	18e1      	adds	r1, r4, r3
 80108d2:	1c5a      	adds	r2, r3, #1
 80108d4:	2030      	movs	r0, #48	@ 0x30
 80108d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80108da:	4422      	add	r2, r4
 80108dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80108e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80108e4:	3302      	adds	r3, #2
 80108e6:	e7c7      	b.n	8010878 <_printf_common+0x58>
 80108e8:	2301      	movs	r3, #1
 80108ea:	4622      	mov	r2, r4
 80108ec:	4641      	mov	r1, r8
 80108ee:	4638      	mov	r0, r7
 80108f0:	47c8      	blx	r9
 80108f2:	3001      	adds	r0, #1
 80108f4:	d0e6      	beq.n	80108c4 <_printf_common+0xa4>
 80108f6:	3601      	adds	r6, #1
 80108f8:	e7d9      	b.n	80108ae <_printf_common+0x8e>
	...

080108fc <_printf_i>:
 80108fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010900:	7e0f      	ldrb	r7, [r1, #24]
 8010902:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010904:	2f78      	cmp	r7, #120	@ 0x78
 8010906:	4691      	mov	r9, r2
 8010908:	4680      	mov	r8, r0
 801090a:	460c      	mov	r4, r1
 801090c:	469a      	mov	sl, r3
 801090e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010912:	d807      	bhi.n	8010924 <_printf_i+0x28>
 8010914:	2f62      	cmp	r7, #98	@ 0x62
 8010916:	d80a      	bhi.n	801092e <_printf_i+0x32>
 8010918:	2f00      	cmp	r7, #0
 801091a:	f000 80d2 	beq.w	8010ac2 <_printf_i+0x1c6>
 801091e:	2f58      	cmp	r7, #88	@ 0x58
 8010920:	f000 80b9 	beq.w	8010a96 <_printf_i+0x19a>
 8010924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010928:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801092c:	e03a      	b.n	80109a4 <_printf_i+0xa8>
 801092e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010932:	2b15      	cmp	r3, #21
 8010934:	d8f6      	bhi.n	8010924 <_printf_i+0x28>
 8010936:	a101      	add	r1, pc, #4	@ (adr r1, 801093c <_printf_i+0x40>)
 8010938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801093c:	08010995 	.word	0x08010995
 8010940:	080109a9 	.word	0x080109a9
 8010944:	08010925 	.word	0x08010925
 8010948:	08010925 	.word	0x08010925
 801094c:	08010925 	.word	0x08010925
 8010950:	08010925 	.word	0x08010925
 8010954:	080109a9 	.word	0x080109a9
 8010958:	08010925 	.word	0x08010925
 801095c:	08010925 	.word	0x08010925
 8010960:	08010925 	.word	0x08010925
 8010964:	08010925 	.word	0x08010925
 8010968:	08010aa9 	.word	0x08010aa9
 801096c:	080109d3 	.word	0x080109d3
 8010970:	08010a63 	.word	0x08010a63
 8010974:	08010925 	.word	0x08010925
 8010978:	08010925 	.word	0x08010925
 801097c:	08010acb 	.word	0x08010acb
 8010980:	08010925 	.word	0x08010925
 8010984:	080109d3 	.word	0x080109d3
 8010988:	08010925 	.word	0x08010925
 801098c:	08010925 	.word	0x08010925
 8010990:	08010a6b 	.word	0x08010a6b
 8010994:	6833      	ldr	r3, [r6, #0]
 8010996:	1d1a      	adds	r2, r3, #4
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	6032      	str	r2, [r6, #0]
 801099c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80109a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80109a4:	2301      	movs	r3, #1
 80109a6:	e09d      	b.n	8010ae4 <_printf_i+0x1e8>
 80109a8:	6833      	ldr	r3, [r6, #0]
 80109aa:	6820      	ldr	r0, [r4, #0]
 80109ac:	1d19      	adds	r1, r3, #4
 80109ae:	6031      	str	r1, [r6, #0]
 80109b0:	0606      	lsls	r6, r0, #24
 80109b2:	d501      	bpl.n	80109b8 <_printf_i+0xbc>
 80109b4:	681d      	ldr	r5, [r3, #0]
 80109b6:	e003      	b.n	80109c0 <_printf_i+0xc4>
 80109b8:	0645      	lsls	r5, r0, #25
 80109ba:	d5fb      	bpl.n	80109b4 <_printf_i+0xb8>
 80109bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80109c0:	2d00      	cmp	r5, #0
 80109c2:	da03      	bge.n	80109cc <_printf_i+0xd0>
 80109c4:	232d      	movs	r3, #45	@ 0x2d
 80109c6:	426d      	negs	r5, r5
 80109c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80109cc:	4859      	ldr	r0, [pc, #356]	@ (8010b34 <_printf_i+0x238>)
 80109ce:	230a      	movs	r3, #10
 80109d0:	e011      	b.n	80109f6 <_printf_i+0xfa>
 80109d2:	6821      	ldr	r1, [r4, #0]
 80109d4:	6833      	ldr	r3, [r6, #0]
 80109d6:	0608      	lsls	r0, r1, #24
 80109d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80109dc:	d402      	bmi.n	80109e4 <_printf_i+0xe8>
 80109de:	0649      	lsls	r1, r1, #25
 80109e0:	bf48      	it	mi
 80109e2:	b2ad      	uxthmi	r5, r5
 80109e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80109e6:	4853      	ldr	r0, [pc, #332]	@ (8010b34 <_printf_i+0x238>)
 80109e8:	6033      	str	r3, [r6, #0]
 80109ea:	bf14      	ite	ne
 80109ec:	230a      	movne	r3, #10
 80109ee:	2308      	moveq	r3, #8
 80109f0:	2100      	movs	r1, #0
 80109f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80109f6:	6866      	ldr	r6, [r4, #4]
 80109f8:	60a6      	str	r6, [r4, #8]
 80109fa:	2e00      	cmp	r6, #0
 80109fc:	bfa2      	ittt	ge
 80109fe:	6821      	ldrge	r1, [r4, #0]
 8010a00:	f021 0104 	bicge.w	r1, r1, #4
 8010a04:	6021      	strge	r1, [r4, #0]
 8010a06:	b90d      	cbnz	r5, 8010a0c <_printf_i+0x110>
 8010a08:	2e00      	cmp	r6, #0
 8010a0a:	d04b      	beq.n	8010aa4 <_printf_i+0x1a8>
 8010a0c:	4616      	mov	r6, r2
 8010a0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010a12:	fb03 5711 	mls	r7, r3, r1, r5
 8010a16:	5dc7      	ldrb	r7, [r0, r7]
 8010a18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010a1c:	462f      	mov	r7, r5
 8010a1e:	42bb      	cmp	r3, r7
 8010a20:	460d      	mov	r5, r1
 8010a22:	d9f4      	bls.n	8010a0e <_printf_i+0x112>
 8010a24:	2b08      	cmp	r3, #8
 8010a26:	d10b      	bne.n	8010a40 <_printf_i+0x144>
 8010a28:	6823      	ldr	r3, [r4, #0]
 8010a2a:	07df      	lsls	r7, r3, #31
 8010a2c:	d508      	bpl.n	8010a40 <_printf_i+0x144>
 8010a2e:	6923      	ldr	r3, [r4, #16]
 8010a30:	6861      	ldr	r1, [r4, #4]
 8010a32:	4299      	cmp	r1, r3
 8010a34:	bfde      	ittt	le
 8010a36:	2330      	movle	r3, #48	@ 0x30
 8010a38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010a3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010a40:	1b92      	subs	r2, r2, r6
 8010a42:	6122      	str	r2, [r4, #16]
 8010a44:	f8cd a000 	str.w	sl, [sp]
 8010a48:	464b      	mov	r3, r9
 8010a4a:	aa03      	add	r2, sp, #12
 8010a4c:	4621      	mov	r1, r4
 8010a4e:	4640      	mov	r0, r8
 8010a50:	f7ff fee6 	bl	8010820 <_printf_common>
 8010a54:	3001      	adds	r0, #1
 8010a56:	d14a      	bne.n	8010aee <_printf_i+0x1f2>
 8010a58:	f04f 30ff 	mov.w	r0, #4294967295
 8010a5c:	b004      	add	sp, #16
 8010a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a62:	6823      	ldr	r3, [r4, #0]
 8010a64:	f043 0320 	orr.w	r3, r3, #32
 8010a68:	6023      	str	r3, [r4, #0]
 8010a6a:	4833      	ldr	r0, [pc, #204]	@ (8010b38 <_printf_i+0x23c>)
 8010a6c:	2778      	movs	r7, #120	@ 0x78
 8010a6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010a72:	6823      	ldr	r3, [r4, #0]
 8010a74:	6831      	ldr	r1, [r6, #0]
 8010a76:	061f      	lsls	r7, r3, #24
 8010a78:	f851 5b04 	ldr.w	r5, [r1], #4
 8010a7c:	d402      	bmi.n	8010a84 <_printf_i+0x188>
 8010a7e:	065f      	lsls	r7, r3, #25
 8010a80:	bf48      	it	mi
 8010a82:	b2ad      	uxthmi	r5, r5
 8010a84:	6031      	str	r1, [r6, #0]
 8010a86:	07d9      	lsls	r1, r3, #31
 8010a88:	bf44      	itt	mi
 8010a8a:	f043 0320 	orrmi.w	r3, r3, #32
 8010a8e:	6023      	strmi	r3, [r4, #0]
 8010a90:	b11d      	cbz	r5, 8010a9a <_printf_i+0x19e>
 8010a92:	2310      	movs	r3, #16
 8010a94:	e7ac      	b.n	80109f0 <_printf_i+0xf4>
 8010a96:	4827      	ldr	r0, [pc, #156]	@ (8010b34 <_printf_i+0x238>)
 8010a98:	e7e9      	b.n	8010a6e <_printf_i+0x172>
 8010a9a:	6823      	ldr	r3, [r4, #0]
 8010a9c:	f023 0320 	bic.w	r3, r3, #32
 8010aa0:	6023      	str	r3, [r4, #0]
 8010aa2:	e7f6      	b.n	8010a92 <_printf_i+0x196>
 8010aa4:	4616      	mov	r6, r2
 8010aa6:	e7bd      	b.n	8010a24 <_printf_i+0x128>
 8010aa8:	6833      	ldr	r3, [r6, #0]
 8010aaa:	6825      	ldr	r5, [r4, #0]
 8010aac:	6961      	ldr	r1, [r4, #20]
 8010aae:	1d18      	adds	r0, r3, #4
 8010ab0:	6030      	str	r0, [r6, #0]
 8010ab2:	062e      	lsls	r6, r5, #24
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	d501      	bpl.n	8010abc <_printf_i+0x1c0>
 8010ab8:	6019      	str	r1, [r3, #0]
 8010aba:	e002      	b.n	8010ac2 <_printf_i+0x1c6>
 8010abc:	0668      	lsls	r0, r5, #25
 8010abe:	d5fb      	bpl.n	8010ab8 <_printf_i+0x1bc>
 8010ac0:	8019      	strh	r1, [r3, #0]
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	6123      	str	r3, [r4, #16]
 8010ac6:	4616      	mov	r6, r2
 8010ac8:	e7bc      	b.n	8010a44 <_printf_i+0x148>
 8010aca:	6833      	ldr	r3, [r6, #0]
 8010acc:	1d1a      	adds	r2, r3, #4
 8010ace:	6032      	str	r2, [r6, #0]
 8010ad0:	681e      	ldr	r6, [r3, #0]
 8010ad2:	6862      	ldr	r2, [r4, #4]
 8010ad4:	2100      	movs	r1, #0
 8010ad6:	4630      	mov	r0, r6
 8010ad8:	f7ef fb92 	bl	8000200 <memchr>
 8010adc:	b108      	cbz	r0, 8010ae2 <_printf_i+0x1e6>
 8010ade:	1b80      	subs	r0, r0, r6
 8010ae0:	6060      	str	r0, [r4, #4]
 8010ae2:	6863      	ldr	r3, [r4, #4]
 8010ae4:	6123      	str	r3, [r4, #16]
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010aec:	e7aa      	b.n	8010a44 <_printf_i+0x148>
 8010aee:	6923      	ldr	r3, [r4, #16]
 8010af0:	4632      	mov	r2, r6
 8010af2:	4649      	mov	r1, r9
 8010af4:	4640      	mov	r0, r8
 8010af6:	47d0      	blx	sl
 8010af8:	3001      	adds	r0, #1
 8010afa:	d0ad      	beq.n	8010a58 <_printf_i+0x15c>
 8010afc:	6823      	ldr	r3, [r4, #0]
 8010afe:	079b      	lsls	r3, r3, #30
 8010b00:	d413      	bmi.n	8010b2a <_printf_i+0x22e>
 8010b02:	68e0      	ldr	r0, [r4, #12]
 8010b04:	9b03      	ldr	r3, [sp, #12]
 8010b06:	4298      	cmp	r0, r3
 8010b08:	bfb8      	it	lt
 8010b0a:	4618      	movlt	r0, r3
 8010b0c:	e7a6      	b.n	8010a5c <_printf_i+0x160>
 8010b0e:	2301      	movs	r3, #1
 8010b10:	4632      	mov	r2, r6
 8010b12:	4649      	mov	r1, r9
 8010b14:	4640      	mov	r0, r8
 8010b16:	47d0      	blx	sl
 8010b18:	3001      	adds	r0, #1
 8010b1a:	d09d      	beq.n	8010a58 <_printf_i+0x15c>
 8010b1c:	3501      	adds	r5, #1
 8010b1e:	68e3      	ldr	r3, [r4, #12]
 8010b20:	9903      	ldr	r1, [sp, #12]
 8010b22:	1a5b      	subs	r3, r3, r1
 8010b24:	42ab      	cmp	r3, r5
 8010b26:	dcf2      	bgt.n	8010b0e <_printf_i+0x212>
 8010b28:	e7eb      	b.n	8010b02 <_printf_i+0x206>
 8010b2a:	2500      	movs	r5, #0
 8010b2c:	f104 0619 	add.w	r6, r4, #25
 8010b30:	e7f5      	b.n	8010b1e <_printf_i+0x222>
 8010b32:	bf00      	nop
 8010b34:	0801836a 	.word	0x0801836a
 8010b38:	0801837b 	.word	0x0801837b

08010b3c <std>:
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	b510      	push	{r4, lr}
 8010b40:	4604      	mov	r4, r0
 8010b42:	e9c0 3300 	strd	r3, r3, [r0]
 8010b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010b4a:	6083      	str	r3, [r0, #8]
 8010b4c:	8181      	strh	r1, [r0, #12]
 8010b4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8010b50:	81c2      	strh	r2, [r0, #14]
 8010b52:	6183      	str	r3, [r0, #24]
 8010b54:	4619      	mov	r1, r3
 8010b56:	2208      	movs	r2, #8
 8010b58:	305c      	adds	r0, #92	@ 0x5c
 8010b5a:	f000 f928 	bl	8010dae <memset>
 8010b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8010b94 <std+0x58>)
 8010b60:	6263      	str	r3, [r4, #36]	@ 0x24
 8010b62:	4b0d      	ldr	r3, [pc, #52]	@ (8010b98 <std+0x5c>)
 8010b64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010b66:	4b0d      	ldr	r3, [pc, #52]	@ (8010b9c <std+0x60>)
 8010b68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8010ba0 <std+0x64>)
 8010b6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8010b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8010ba4 <std+0x68>)
 8010b70:	6224      	str	r4, [r4, #32]
 8010b72:	429c      	cmp	r4, r3
 8010b74:	d006      	beq.n	8010b84 <std+0x48>
 8010b76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010b7a:	4294      	cmp	r4, r2
 8010b7c:	d002      	beq.n	8010b84 <std+0x48>
 8010b7e:	33d0      	adds	r3, #208	@ 0xd0
 8010b80:	429c      	cmp	r4, r3
 8010b82:	d105      	bne.n	8010b90 <std+0x54>
 8010b84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b8c:	f000 b99c 	b.w	8010ec8 <__retarget_lock_init_recursive>
 8010b90:	bd10      	pop	{r4, pc}
 8010b92:	bf00      	nop
 8010b94:	08010d29 	.word	0x08010d29
 8010b98:	08010d4b 	.word	0x08010d4b
 8010b9c:	08010d83 	.word	0x08010d83
 8010ba0:	08010da7 	.word	0x08010da7
 8010ba4:	20000b44 	.word	0x20000b44

08010ba8 <stdio_exit_handler>:
 8010ba8:	4a02      	ldr	r2, [pc, #8]	@ (8010bb4 <stdio_exit_handler+0xc>)
 8010baa:	4903      	ldr	r1, [pc, #12]	@ (8010bb8 <stdio_exit_handler+0x10>)
 8010bac:	4803      	ldr	r0, [pc, #12]	@ (8010bbc <stdio_exit_handler+0x14>)
 8010bae:	f000 b869 	b.w	8010c84 <_fwalk_sglue>
 8010bb2:	bf00      	nop
 8010bb4:	20000040 	.word	0x20000040
 8010bb8:	0801295d 	.word	0x0801295d
 8010bbc:	20000050 	.word	0x20000050

08010bc0 <cleanup_stdio>:
 8010bc0:	6841      	ldr	r1, [r0, #4]
 8010bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8010bf4 <cleanup_stdio+0x34>)
 8010bc4:	4299      	cmp	r1, r3
 8010bc6:	b510      	push	{r4, lr}
 8010bc8:	4604      	mov	r4, r0
 8010bca:	d001      	beq.n	8010bd0 <cleanup_stdio+0x10>
 8010bcc:	f001 fec6 	bl	801295c <_fflush_r>
 8010bd0:	68a1      	ldr	r1, [r4, #8]
 8010bd2:	4b09      	ldr	r3, [pc, #36]	@ (8010bf8 <cleanup_stdio+0x38>)
 8010bd4:	4299      	cmp	r1, r3
 8010bd6:	d002      	beq.n	8010bde <cleanup_stdio+0x1e>
 8010bd8:	4620      	mov	r0, r4
 8010bda:	f001 febf 	bl	801295c <_fflush_r>
 8010bde:	68e1      	ldr	r1, [r4, #12]
 8010be0:	4b06      	ldr	r3, [pc, #24]	@ (8010bfc <cleanup_stdio+0x3c>)
 8010be2:	4299      	cmp	r1, r3
 8010be4:	d004      	beq.n	8010bf0 <cleanup_stdio+0x30>
 8010be6:	4620      	mov	r0, r4
 8010be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bec:	f001 beb6 	b.w	801295c <_fflush_r>
 8010bf0:	bd10      	pop	{r4, pc}
 8010bf2:	bf00      	nop
 8010bf4:	20000b44 	.word	0x20000b44
 8010bf8:	20000bac 	.word	0x20000bac
 8010bfc:	20000c14 	.word	0x20000c14

08010c00 <global_stdio_init.part.0>:
 8010c00:	b510      	push	{r4, lr}
 8010c02:	4b0b      	ldr	r3, [pc, #44]	@ (8010c30 <global_stdio_init.part.0+0x30>)
 8010c04:	4c0b      	ldr	r4, [pc, #44]	@ (8010c34 <global_stdio_init.part.0+0x34>)
 8010c06:	4a0c      	ldr	r2, [pc, #48]	@ (8010c38 <global_stdio_init.part.0+0x38>)
 8010c08:	601a      	str	r2, [r3, #0]
 8010c0a:	4620      	mov	r0, r4
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	2104      	movs	r1, #4
 8010c10:	f7ff ff94 	bl	8010b3c <std>
 8010c14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010c18:	2201      	movs	r2, #1
 8010c1a:	2109      	movs	r1, #9
 8010c1c:	f7ff ff8e 	bl	8010b3c <std>
 8010c20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010c24:	2202      	movs	r2, #2
 8010c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c2a:	2112      	movs	r1, #18
 8010c2c:	f7ff bf86 	b.w	8010b3c <std>
 8010c30:	20000c7c 	.word	0x20000c7c
 8010c34:	20000b44 	.word	0x20000b44
 8010c38:	08010ba9 	.word	0x08010ba9

08010c3c <__sfp_lock_acquire>:
 8010c3c:	4801      	ldr	r0, [pc, #4]	@ (8010c44 <__sfp_lock_acquire+0x8>)
 8010c3e:	f000 b944 	b.w	8010eca <__retarget_lock_acquire_recursive>
 8010c42:	bf00      	nop
 8010c44:	20000c85 	.word	0x20000c85

08010c48 <__sfp_lock_release>:
 8010c48:	4801      	ldr	r0, [pc, #4]	@ (8010c50 <__sfp_lock_release+0x8>)
 8010c4a:	f000 b93f 	b.w	8010ecc <__retarget_lock_release_recursive>
 8010c4e:	bf00      	nop
 8010c50:	20000c85 	.word	0x20000c85

08010c54 <__sinit>:
 8010c54:	b510      	push	{r4, lr}
 8010c56:	4604      	mov	r4, r0
 8010c58:	f7ff fff0 	bl	8010c3c <__sfp_lock_acquire>
 8010c5c:	6a23      	ldr	r3, [r4, #32]
 8010c5e:	b11b      	cbz	r3, 8010c68 <__sinit+0x14>
 8010c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c64:	f7ff bff0 	b.w	8010c48 <__sfp_lock_release>
 8010c68:	4b04      	ldr	r3, [pc, #16]	@ (8010c7c <__sinit+0x28>)
 8010c6a:	6223      	str	r3, [r4, #32]
 8010c6c:	4b04      	ldr	r3, [pc, #16]	@ (8010c80 <__sinit+0x2c>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d1f5      	bne.n	8010c60 <__sinit+0xc>
 8010c74:	f7ff ffc4 	bl	8010c00 <global_stdio_init.part.0>
 8010c78:	e7f2      	b.n	8010c60 <__sinit+0xc>
 8010c7a:	bf00      	nop
 8010c7c:	08010bc1 	.word	0x08010bc1
 8010c80:	20000c7c 	.word	0x20000c7c

08010c84 <_fwalk_sglue>:
 8010c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c88:	4607      	mov	r7, r0
 8010c8a:	4688      	mov	r8, r1
 8010c8c:	4614      	mov	r4, r2
 8010c8e:	2600      	movs	r6, #0
 8010c90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c94:	f1b9 0901 	subs.w	r9, r9, #1
 8010c98:	d505      	bpl.n	8010ca6 <_fwalk_sglue+0x22>
 8010c9a:	6824      	ldr	r4, [r4, #0]
 8010c9c:	2c00      	cmp	r4, #0
 8010c9e:	d1f7      	bne.n	8010c90 <_fwalk_sglue+0xc>
 8010ca0:	4630      	mov	r0, r6
 8010ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ca6:	89ab      	ldrh	r3, [r5, #12]
 8010ca8:	2b01      	cmp	r3, #1
 8010caa:	d907      	bls.n	8010cbc <_fwalk_sglue+0x38>
 8010cac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	d003      	beq.n	8010cbc <_fwalk_sglue+0x38>
 8010cb4:	4629      	mov	r1, r5
 8010cb6:	4638      	mov	r0, r7
 8010cb8:	47c0      	blx	r8
 8010cba:	4306      	orrs	r6, r0
 8010cbc:	3568      	adds	r5, #104	@ 0x68
 8010cbe:	e7e9      	b.n	8010c94 <_fwalk_sglue+0x10>

08010cc0 <sniprintf>:
 8010cc0:	b40c      	push	{r2, r3}
 8010cc2:	b530      	push	{r4, r5, lr}
 8010cc4:	4b17      	ldr	r3, [pc, #92]	@ (8010d24 <sniprintf+0x64>)
 8010cc6:	1e0c      	subs	r4, r1, #0
 8010cc8:	681d      	ldr	r5, [r3, #0]
 8010cca:	b09d      	sub	sp, #116	@ 0x74
 8010ccc:	da08      	bge.n	8010ce0 <sniprintf+0x20>
 8010cce:	238b      	movs	r3, #139	@ 0x8b
 8010cd0:	602b      	str	r3, [r5, #0]
 8010cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8010cd6:	b01d      	add	sp, #116	@ 0x74
 8010cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010cdc:	b002      	add	sp, #8
 8010cde:	4770      	bx	lr
 8010ce0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010ce4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010ce8:	bf14      	ite	ne
 8010cea:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010cee:	4623      	moveq	r3, r4
 8010cf0:	9304      	str	r3, [sp, #16]
 8010cf2:	9307      	str	r3, [sp, #28]
 8010cf4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010cf8:	9002      	str	r0, [sp, #8]
 8010cfa:	9006      	str	r0, [sp, #24]
 8010cfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010d00:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010d02:	ab21      	add	r3, sp, #132	@ 0x84
 8010d04:	a902      	add	r1, sp, #8
 8010d06:	4628      	mov	r0, r5
 8010d08:	9301      	str	r3, [sp, #4]
 8010d0a:	f001 fb65 	bl	80123d8 <_svfiprintf_r>
 8010d0e:	1c43      	adds	r3, r0, #1
 8010d10:	bfbc      	itt	lt
 8010d12:	238b      	movlt	r3, #139	@ 0x8b
 8010d14:	602b      	strlt	r3, [r5, #0]
 8010d16:	2c00      	cmp	r4, #0
 8010d18:	d0dd      	beq.n	8010cd6 <sniprintf+0x16>
 8010d1a:	9b02      	ldr	r3, [sp, #8]
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	701a      	strb	r2, [r3, #0]
 8010d20:	e7d9      	b.n	8010cd6 <sniprintf+0x16>
 8010d22:	bf00      	nop
 8010d24:	2000004c 	.word	0x2000004c

08010d28 <__sread>:
 8010d28:	b510      	push	{r4, lr}
 8010d2a:	460c      	mov	r4, r1
 8010d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d30:	f000 f86c 	bl	8010e0c <_read_r>
 8010d34:	2800      	cmp	r0, #0
 8010d36:	bfab      	itete	ge
 8010d38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010d3a:	89a3      	ldrhlt	r3, [r4, #12]
 8010d3c:	181b      	addge	r3, r3, r0
 8010d3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010d42:	bfac      	ite	ge
 8010d44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010d46:	81a3      	strhlt	r3, [r4, #12]
 8010d48:	bd10      	pop	{r4, pc}

08010d4a <__swrite>:
 8010d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d4e:	461f      	mov	r7, r3
 8010d50:	898b      	ldrh	r3, [r1, #12]
 8010d52:	05db      	lsls	r3, r3, #23
 8010d54:	4605      	mov	r5, r0
 8010d56:	460c      	mov	r4, r1
 8010d58:	4616      	mov	r6, r2
 8010d5a:	d505      	bpl.n	8010d68 <__swrite+0x1e>
 8010d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d60:	2302      	movs	r3, #2
 8010d62:	2200      	movs	r2, #0
 8010d64:	f000 f840 	bl	8010de8 <_lseek_r>
 8010d68:	89a3      	ldrh	r3, [r4, #12]
 8010d6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010d72:	81a3      	strh	r3, [r4, #12]
 8010d74:	4632      	mov	r2, r6
 8010d76:	463b      	mov	r3, r7
 8010d78:	4628      	mov	r0, r5
 8010d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d7e:	f000 b867 	b.w	8010e50 <_write_r>

08010d82 <__sseek>:
 8010d82:	b510      	push	{r4, lr}
 8010d84:	460c      	mov	r4, r1
 8010d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d8a:	f000 f82d 	bl	8010de8 <_lseek_r>
 8010d8e:	1c43      	adds	r3, r0, #1
 8010d90:	89a3      	ldrh	r3, [r4, #12]
 8010d92:	bf15      	itete	ne
 8010d94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010d96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010d9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010d9e:	81a3      	strheq	r3, [r4, #12]
 8010da0:	bf18      	it	ne
 8010da2:	81a3      	strhne	r3, [r4, #12]
 8010da4:	bd10      	pop	{r4, pc}

08010da6 <__sclose>:
 8010da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010daa:	f000 b80d 	b.w	8010dc8 <_close_r>

08010dae <memset>:
 8010dae:	4402      	add	r2, r0
 8010db0:	4603      	mov	r3, r0
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d100      	bne.n	8010db8 <memset+0xa>
 8010db6:	4770      	bx	lr
 8010db8:	f803 1b01 	strb.w	r1, [r3], #1
 8010dbc:	e7f9      	b.n	8010db2 <memset+0x4>
	...

08010dc0 <_localeconv_r>:
 8010dc0:	4800      	ldr	r0, [pc, #0]	@ (8010dc4 <_localeconv_r+0x4>)
 8010dc2:	4770      	bx	lr
 8010dc4:	2000018c 	.word	0x2000018c

08010dc8 <_close_r>:
 8010dc8:	b538      	push	{r3, r4, r5, lr}
 8010dca:	4d06      	ldr	r5, [pc, #24]	@ (8010de4 <_close_r+0x1c>)
 8010dcc:	2300      	movs	r3, #0
 8010dce:	4604      	mov	r4, r0
 8010dd0:	4608      	mov	r0, r1
 8010dd2:	602b      	str	r3, [r5, #0]
 8010dd4:	f7f4 f886 	bl	8004ee4 <_close>
 8010dd8:	1c43      	adds	r3, r0, #1
 8010dda:	d102      	bne.n	8010de2 <_close_r+0x1a>
 8010ddc:	682b      	ldr	r3, [r5, #0]
 8010dde:	b103      	cbz	r3, 8010de2 <_close_r+0x1a>
 8010de0:	6023      	str	r3, [r4, #0]
 8010de2:	bd38      	pop	{r3, r4, r5, pc}
 8010de4:	20000c80 	.word	0x20000c80

08010de8 <_lseek_r>:
 8010de8:	b538      	push	{r3, r4, r5, lr}
 8010dea:	4d07      	ldr	r5, [pc, #28]	@ (8010e08 <_lseek_r+0x20>)
 8010dec:	4604      	mov	r4, r0
 8010dee:	4608      	mov	r0, r1
 8010df0:	4611      	mov	r1, r2
 8010df2:	2200      	movs	r2, #0
 8010df4:	602a      	str	r2, [r5, #0]
 8010df6:	461a      	mov	r2, r3
 8010df8:	f7f4 f89b 	bl	8004f32 <_lseek>
 8010dfc:	1c43      	adds	r3, r0, #1
 8010dfe:	d102      	bne.n	8010e06 <_lseek_r+0x1e>
 8010e00:	682b      	ldr	r3, [r5, #0]
 8010e02:	b103      	cbz	r3, 8010e06 <_lseek_r+0x1e>
 8010e04:	6023      	str	r3, [r4, #0]
 8010e06:	bd38      	pop	{r3, r4, r5, pc}
 8010e08:	20000c80 	.word	0x20000c80

08010e0c <_read_r>:
 8010e0c:	b538      	push	{r3, r4, r5, lr}
 8010e0e:	4d07      	ldr	r5, [pc, #28]	@ (8010e2c <_read_r+0x20>)
 8010e10:	4604      	mov	r4, r0
 8010e12:	4608      	mov	r0, r1
 8010e14:	4611      	mov	r1, r2
 8010e16:	2200      	movs	r2, #0
 8010e18:	602a      	str	r2, [r5, #0]
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	f7f4 f829 	bl	8004e72 <_read>
 8010e20:	1c43      	adds	r3, r0, #1
 8010e22:	d102      	bne.n	8010e2a <_read_r+0x1e>
 8010e24:	682b      	ldr	r3, [r5, #0]
 8010e26:	b103      	cbz	r3, 8010e2a <_read_r+0x1e>
 8010e28:	6023      	str	r3, [r4, #0]
 8010e2a:	bd38      	pop	{r3, r4, r5, pc}
 8010e2c:	20000c80 	.word	0x20000c80

08010e30 <_sbrk_r>:
 8010e30:	b538      	push	{r3, r4, r5, lr}
 8010e32:	4d06      	ldr	r5, [pc, #24]	@ (8010e4c <_sbrk_r+0x1c>)
 8010e34:	2300      	movs	r3, #0
 8010e36:	4604      	mov	r4, r0
 8010e38:	4608      	mov	r0, r1
 8010e3a:	602b      	str	r3, [r5, #0]
 8010e3c:	f7f4 f886 	bl	8004f4c <_sbrk>
 8010e40:	1c43      	adds	r3, r0, #1
 8010e42:	d102      	bne.n	8010e4a <_sbrk_r+0x1a>
 8010e44:	682b      	ldr	r3, [r5, #0]
 8010e46:	b103      	cbz	r3, 8010e4a <_sbrk_r+0x1a>
 8010e48:	6023      	str	r3, [r4, #0]
 8010e4a:	bd38      	pop	{r3, r4, r5, pc}
 8010e4c:	20000c80 	.word	0x20000c80

08010e50 <_write_r>:
 8010e50:	b538      	push	{r3, r4, r5, lr}
 8010e52:	4d07      	ldr	r5, [pc, #28]	@ (8010e70 <_write_r+0x20>)
 8010e54:	4604      	mov	r4, r0
 8010e56:	4608      	mov	r0, r1
 8010e58:	4611      	mov	r1, r2
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	602a      	str	r2, [r5, #0]
 8010e5e:	461a      	mov	r2, r3
 8010e60:	f7f4 f824 	bl	8004eac <_write>
 8010e64:	1c43      	adds	r3, r0, #1
 8010e66:	d102      	bne.n	8010e6e <_write_r+0x1e>
 8010e68:	682b      	ldr	r3, [r5, #0]
 8010e6a:	b103      	cbz	r3, 8010e6e <_write_r+0x1e>
 8010e6c:	6023      	str	r3, [r4, #0]
 8010e6e:	bd38      	pop	{r3, r4, r5, pc}
 8010e70:	20000c80 	.word	0x20000c80

08010e74 <__errno>:
 8010e74:	4b01      	ldr	r3, [pc, #4]	@ (8010e7c <__errno+0x8>)
 8010e76:	6818      	ldr	r0, [r3, #0]
 8010e78:	4770      	bx	lr
 8010e7a:	bf00      	nop
 8010e7c:	2000004c 	.word	0x2000004c

08010e80 <__libc_init_array>:
 8010e80:	b570      	push	{r4, r5, r6, lr}
 8010e82:	4d0d      	ldr	r5, [pc, #52]	@ (8010eb8 <__libc_init_array+0x38>)
 8010e84:	4c0d      	ldr	r4, [pc, #52]	@ (8010ebc <__libc_init_array+0x3c>)
 8010e86:	1b64      	subs	r4, r4, r5
 8010e88:	10a4      	asrs	r4, r4, #2
 8010e8a:	2600      	movs	r6, #0
 8010e8c:	42a6      	cmp	r6, r4
 8010e8e:	d109      	bne.n	8010ea4 <__libc_init_array+0x24>
 8010e90:	4d0b      	ldr	r5, [pc, #44]	@ (8010ec0 <__libc_init_array+0x40>)
 8010e92:	4c0c      	ldr	r4, [pc, #48]	@ (8010ec4 <__libc_init_array+0x44>)
 8010e94:	f001 ffa2 	bl	8012ddc <_init>
 8010e98:	1b64      	subs	r4, r4, r5
 8010e9a:	10a4      	asrs	r4, r4, #2
 8010e9c:	2600      	movs	r6, #0
 8010e9e:	42a6      	cmp	r6, r4
 8010ea0:	d105      	bne.n	8010eae <__libc_init_array+0x2e>
 8010ea2:	bd70      	pop	{r4, r5, r6, pc}
 8010ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ea8:	4798      	blx	r3
 8010eaa:	3601      	adds	r6, #1
 8010eac:	e7ee      	b.n	8010e8c <__libc_init_array+0xc>
 8010eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8010eb2:	4798      	blx	r3
 8010eb4:	3601      	adds	r6, #1
 8010eb6:	e7f2      	b.n	8010e9e <__libc_init_array+0x1e>
 8010eb8:	080186d0 	.word	0x080186d0
 8010ebc:	080186d0 	.word	0x080186d0
 8010ec0:	080186d0 	.word	0x080186d0
 8010ec4:	080186d4 	.word	0x080186d4

08010ec8 <__retarget_lock_init_recursive>:
 8010ec8:	4770      	bx	lr

08010eca <__retarget_lock_acquire_recursive>:
 8010eca:	4770      	bx	lr

08010ecc <__retarget_lock_release_recursive>:
 8010ecc:	4770      	bx	lr

08010ece <memcpy>:
 8010ece:	440a      	add	r2, r1
 8010ed0:	4291      	cmp	r1, r2
 8010ed2:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ed6:	d100      	bne.n	8010eda <memcpy+0xc>
 8010ed8:	4770      	bx	lr
 8010eda:	b510      	push	{r4, lr}
 8010edc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ee4:	4291      	cmp	r1, r2
 8010ee6:	d1f9      	bne.n	8010edc <memcpy+0xe>
 8010ee8:	bd10      	pop	{r4, pc}

08010eea <quorem>:
 8010eea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eee:	6903      	ldr	r3, [r0, #16]
 8010ef0:	690c      	ldr	r4, [r1, #16]
 8010ef2:	42a3      	cmp	r3, r4
 8010ef4:	4607      	mov	r7, r0
 8010ef6:	db7e      	blt.n	8010ff6 <quorem+0x10c>
 8010ef8:	3c01      	subs	r4, #1
 8010efa:	f101 0814 	add.w	r8, r1, #20
 8010efe:	00a3      	lsls	r3, r4, #2
 8010f00:	f100 0514 	add.w	r5, r0, #20
 8010f04:	9300      	str	r3, [sp, #0]
 8010f06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010f0a:	9301      	str	r3, [sp, #4]
 8010f0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010f10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010f14:	3301      	adds	r3, #1
 8010f16:	429a      	cmp	r2, r3
 8010f18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010f1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010f20:	d32e      	bcc.n	8010f80 <quorem+0x96>
 8010f22:	f04f 0a00 	mov.w	sl, #0
 8010f26:	46c4      	mov	ip, r8
 8010f28:	46ae      	mov	lr, r5
 8010f2a:	46d3      	mov	fp, sl
 8010f2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010f30:	b298      	uxth	r0, r3
 8010f32:	fb06 a000 	mla	r0, r6, r0, sl
 8010f36:	0c02      	lsrs	r2, r0, #16
 8010f38:	0c1b      	lsrs	r3, r3, #16
 8010f3a:	fb06 2303 	mla	r3, r6, r3, r2
 8010f3e:	f8de 2000 	ldr.w	r2, [lr]
 8010f42:	b280      	uxth	r0, r0
 8010f44:	b292      	uxth	r2, r2
 8010f46:	1a12      	subs	r2, r2, r0
 8010f48:	445a      	add	r2, fp
 8010f4a:	f8de 0000 	ldr.w	r0, [lr]
 8010f4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f52:	b29b      	uxth	r3, r3
 8010f54:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010f58:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010f5c:	b292      	uxth	r2, r2
 8010f5e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010f62:	45e1      	cmp	r9, ip
 8010f64:	f84e 2b04 	str.w	r2, [lr], #4
 8010f68:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010f6c:	d2de      	bcs.n	8010f2c <quorem+0x42>
 8010f6e:	9b00      	ldr	r3, [sp, #0]
 8010f70:	58eb      	ldr	r3, [r5, r3]
 8010f72:	b92b      	cbnz	r3, 8010f80 <quorem+0x96>
 8010f74:	9b01      	ldr	r3, [sp, #4]
 8010f76:	3b04      	subs	r3, #4
 8010f78:	429d      	cmp	r5, r3
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	d32f      	bcc.n	8010fde <quorem+0xf4>
 8010f7e:	613c      	str	r4, [r7, #16]
 8010f80:	4638      	mov	r0, r7
 8010f82:	f001 f8c5 	bl	8012110 <__mcmp>
 8010f86:	2800      	cmp	r0, #0
 8010f88:	db25      	blt.n	8010fd6 <quorem+0xec>
 8010f8a:	4629      	mov	r1, r5
 8010f8c:	2000      	movs	r0, #0
 8010f8e:	f858 2b04 	ldr.w	r2, [r8], #4
 8010f92:	f8d1 c000 	ldr.w	ip, [r1]
 8010f96:	fa1f fe82 	uxth.w	lr, r2
 8010f9a:	fa1f f38c 	uxth.w	r3, ip
 8010f9e:	eba3 030e 	sub.w	r3, r3, lr
 8010fa2:	4403      	add	r3, r0
 8010fa4:	0c12      	lsrs	r2, r2, #16
 8010fa6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010faa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010fae:	b29b      	uxth	r3, r3
 8010fb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010fb4:	45c1      	cmp	r9, r8
 8010fb6:	f841 3b04 	str.w	r3, [r1], #4
 8010fba:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010fbe:	d2e6      	bcs.n	8010f8e <quorem+0xa4>
 8010fc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010fc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010fc8:	b922      	cbnz	r2, 8010fd4 <quorem+0xea>
 8010fca:	3b04      	subs	r3, #4
 8010fcc:	429d      	cmp	r5, r3
 8010fce:	461a      	mov	r2, r3
 8010fd0:	d30b      	bcc.n	8010fea <quorem+0x100>
 8010fd2:	613c      	str	r4, [r7, #16]
 8010fd4:	3601      	adds	r6, #1
 8010fd6:	4630      	mov	r0, r6
 8010fd8:	b003      	add	sp, #12
 8010fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fde:	6812      	ldr	r2, [r2, #0]
 8010fe0:	3b04      	subs	r3, #4
 8010fe2:	2a00      	cmp	r2, #0
 8010fe4:	d1cb      	bne.n	8010f7e <quorem+0x94>
 8010fe6:	3c01      	subs	r4, #1
 8010fe8:	e7c6      	b.n	8010f78 <quorem+0x8e>
 8010fea:	6812      	ldr	r2, [r2, #0]
 8010fec:	3b04      	subs	r3, #4
 8010fee:	2a00      	cmp	r2, #0
 8010ff0:	d1ef      	bne.n	8010fd2 <quorem+0xe8>
 8010ff2:	3c01      	subs	r4, #1
 8010ff4:	e7ea      	b.n	8010fcc <quorem+0xe2>
 8010ff6:	2000      	movs	r0, #0
 8010ff8:	e7ee      	b.n	8010fd8 <quorem+0xee>
 8010ffa:	0000      	movs	r0, r0
 8010ffc:	0000      	movs	r0, r0
	...

08011000 <_dtoa_r>:
 8011000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011004:	69c7      	ldr	r7, [r0, #28]
 8011006:	b099      	sub	sp, #100	@ 0x64
 8011008:	ed8d 0b02 	vstr	d0, [sp, #8]
 801100c:	ec55 4b10 	vmov	r4, r5, d0
 8011010:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011012:	9109      	str	r1, [sp, #36]	@ 0x24
 8011014:	4683      	mov	fp, r0
 8011016:	920e      	str	r2, [sp, #56]	@ 0x38
 8011018:	9313      	str	r3, [sp, #76]	@ 0x4c
 801101a:	b97f      	cbnz	r7, 801103c <_dtoa_r+0x3c>
 801101c:	2010      	movs	r0, #16
 801101e:	f7ff f87f 	bl	8010120 <malloc>
 8011022:	4602      	mov	r2, r0
 8011024:	f8cb 001c 	str.w	r0, [fp, #28]
 8011028:	b920      	cbnz	r0, 8011034 <_dtoa_r+0x34>
 801102a:	4ba7      	ldr	r3, [pc, #668]	@ (80112c8 <_dtoa_r+0x2c8>)
 801102c:	21ef      	movs	r1, #239	@ 0xef
 801102e:	48a7      	ldr	r0, [pc, #668]	@ (80112cc <_dtoa_r+0x2cc>)
 8011030:	f001 fd6a 	bl	8012b08 <__assert_func>
 8011034:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011038:	6007      	str	r7, [r0, #0]
 801103a:	60c7      	str	r7, [r0, #12]
 801103c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011040:	6819      	ldr	r1, [r3, #0]
 8011042:	b159      	cbz	r1, 801105c <_dtoa_r+0x5c>
 8011044:	685a      	ldr	r2, [r3, #4]
 8011046:	604a      	str	r2, [r1, #4]
 8011048:	2301      	movs	r3, #1
 801104a:	4093      	lsls	r3, r2
 801104c:	608b      	str	r3, [r1, #8]
 801104e:	4658      	mov	r0, fp
 8011050:	f000 fe24 	bl	8011c9c <_Bfree>
 8011054:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011058:	2200      	movs	r2, #0
 801105a:	601a      	str	r2, [r3, #0]
 801105c:	1e2b      	subs	r3, r5, #0
 801105e:	bfb9      	ittee	lt
 8011060:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011064:	9303      	strlt	r3, [sp, #12]
 8011066:	2300      	movge	r3, #0
 8011068:	6033      	strge	r3, [r6, #0]
 801106a:	9f03      	ldr	r7, [sp, #12]
 801106c:	4b98      	ldr	r3, [pc, #608]	@ (80112d0 <_dtoa_r+0x2d0>)
 801106e:	bfbc      	itt	lt
 8011070:	2201      	movlt	r2, #1
 8011072:	6032      	strlt	r2, [r6, #0]
 8011074:	43bb      	bics	r3, r7
 8011076:	d112      	bne.n	801109e <_dtoa_r+0x9e>
 8011078:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801107a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801107e:	6013      	str	r3, [r2, #0]
 8011080:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011084:	4323      	orrs	r3, r4
 8011086:	f000 854d 	beq.w	8011b24 <_dtoa_r+0xb24>
 801108a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801108c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80112e4 <_dtoa_r+0x2e4>
 8011090:	2b00      	cmp	r3, #0
 8011092:	f000 854f 	beq.w	8011b34 <_dtoa_r+0xb34>
 8011096:	f10a 0303 	add.w	r3, sl, #3
 801109a:	f000 bd49 	b.w	8011b30 <_dtoa_r+0xb30>
 801109e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80110a2:	2200      	movs	r2, #0
 80110a4:	ec51 0b17 	vmov	r0, r1, d7
 80110a8:	2300      	movs	r3, #0
 80110aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80110ae:	f7ef fd23 	bl	8000af8 <__aeabi_dcmpeq>
 80110b2:	4680      	mov	r8, r0
 80110b4:	b158      	cbz	r0, 80110ce <_dtoa_r+0xce>
 80110b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80110b8:	2301      	movs	r3, #1
 80110ba:	6013      	str	r3, [r2, #0]
 80110bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80110be:	b113      	cbz	r3, 80110c6 <_dtoa_r+0xc6>
 80110c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80110c2:	4b84      	ldr	r3, [pc, #528]	@ (80112d4 <_dtoa_r+0x2d4>)
 80110c4:	6013      	str	r3, [r2, #0]
 80110c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80112e8 <_dtoa_r+0x2e8>
 80110ca:	f000 bd33 	b.w	8011b34 <_dtoa_r+0xb34>
 80110ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80110d2:	aa16      	add	r2, sp, #88	@ 0x58
 80110d4:	a917      	add	r1, sp, #92	@ 0x5c
 80110d6:	4658      	mov	r0, fp
 80110d8:	f001 f8ca 	bl	8012270 <__d2b>
 80110dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80110e0:	4681      	mov	r9, r0
 80110e2:	2e00      	cmp	r6, #0
 80110e4:	d077      	beq.n	80111d6 <_dtoa_r+0x1d6>
 80110e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80110e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80110ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80110f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80110f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80110f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80110fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011100:	4619      	mov	r1, r3
 8011102:	2200      	movs	r2, #0
 8011104:	4b74      	ldr	r3, [pc, #464]	@ (80112d8 <_dtoa_r+0x2d8>)
 8011106:	f7ef f8d7 	bl	80002b8 <__aeabi_dsub>
 801110a:	a369      	add	r3, pc, #420	@ (adr r3, 80112b0 <_dtoa_r+0x2b0>)
 801110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011110:	f7ef fa8a 	bl	8000628 <__aeabi_dmul>
 8011114:	a368      	add	r3, pc, #416	@ (adr r3, 80112b8 <_dtoa_r+0x2b8>)
 8011116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111a:	f7ef f8cf 	bl	80002bc <__adddf3>
 801111e:	4604      	mov	r4, r0
 8011120:	4630      	mov	r0, r6
 8011122:	460d      	mov	r5, r1
 8011124:	f7ef fa16 	bl	8000554 <__aeabi_i2d>
 8011128:	a365      	add	r3, pc, #404	@ (adr r3, 80112c0 <_dtoa_r+0x2c0>)
 801112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112e:	f7ef fa7b 	bl	8000628 <__aeabi_dmul>
 8011132:	4602      	mov	r2, r0
 8011134:	460b      	mov	r3, r1
 8011136:	4620      	mov	r0, r4
 8011138:	4629      	mov	r1, r5
 801113a:	f7ef f8bf 	bl	80002bc <__adddf3>
 801113e:	4604      	mov	r4, r0
 8011140:	460d      	mov	r5, r1
 8011142:	f7ef fd21 	bl	8000b88 <__aeabi_d2iz>
 8011146:	2200      	movs	r2, #0
 8011148:	4607      	mov	r7, r0
 801114a:	2300      	movs	r3, #0
 801114c:	4620      	mov	r0, r4
 801114e:	4629      	mov	r1, r5
 8011150:	f7ef fcdc 	bl	8000b0c <__aeabi_dcmplt>
 8011154:	b140      	cbz	r0, 8011168 <_dtoa_r+0x168>
 8011156:	4638      	mov	r0, r7
 8011158:	f7ef f9fc 	bl	8000554 <__aeabi_i2d>
 801115c:	4622      	mov	r2, r4
 801115e:	462b      	mov	r3, r5
 8011160:	f7ef fcca 	bl	8000af8 <__aeabi_dcmpeq>
 8011164:	b900      	cbnz	r0, 8011168 <_dtoa_r+0x168>
 8011166:	3f01      	subs	r7, #1
 8011168:	2f16      	cmp	r7, #22
 801116a:	d851      	bhi.n	8011210 <_dtoa_r+0x210>
 801116c:	4b5b      	ldr	r3, [pc, #364]	@ (80112dc <_dtoa_r+0x2dc>)
 801116e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011176:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801117a:	f7ef fcc7 	bl	8000b0c <__aeabi_dcmplt>
 801117e:	2800      	cmp	r0, #0
 8011180:	d048      	beq.n	8011214 <_dtoa_r+0x214>
 8011182:	3f01      	subs	r7, #1
 8011184:	2300      	movs	r3, #0
 8011186:	9312      	str	r3, [sp, #72]	@ 0x48
 8011188:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801118a:	1b9b      	subs	r3, r3, r6
 801118c:	1e5a      	subs	r2, r3, #1
 801118e:	bf44      	itt	mi
 8011190:	f1c3 0801 	rsbmi	r8, r3, #1
 8011194:	2300      	movmi	r3, #0
 8011196:	9208      	str	r2, [sp, #32]
 8011198:	bf54      	ite	pl
 801119a:	f04f 0800 	movpl.w	r8, #0
 801119e:	9308      	strmi	r3, [sp, #32]
 80111a0:	2f00      	cmp	r7, #0
 80111a2:	db39      	blt.n	8011218 <_dtoa_r+0x218>
 80111a4:	9b08      	ldr	r3, [sp, #32]
 80111a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80111a8:	443b      	add	r3, r7
 80111aa:	9308      	str	r3, [sp, #32]
 80111ac:	2300      	movs	r3, #0
 80111ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80111b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111b2:	2b09      	cmp	r3, #9
 80111b4:	d864      	bhi.n	8011280 <_dtoa_r+0x280>
 80111b6:	2b05      	cmp	r3, #5
 80111b8:	bfc4      	itt	gt
 80111ba:	3b04      	subgt	r3, #4
 80111bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80111be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111c0:	f1a3 0302 	sub.w	r3, r3, #2
 80111c4:	bfcc      	ite	gt
 80111c6:	2400      	movgt	r4, #0
 80111c8:	2401      	movle	r4, #1
 80111ca:	2b03      	cmp	r3, #3
 80111cc:	d863      	bhi.n	8011296 <_dtoa_r+0x296>
 80111ce:	e8df f003 	tbb	[pc, r3]
 80111d2:	372a      	.short	0x372a
 80111d4:	5535      	.short	0x5535
 80111d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80111da:	441e      	add	r6, r3
 80111dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80111e0:	2b20      	cmp	r3, #32
 80111e2:	bfc1      	itttt	gt
 80111e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80111e8:	409f      	lslgt	r7, r3
 80111ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80111ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80111f2:	bfd6      	itet	le
 80111f4:	f1c3 0320 	rsble	r3, r3, #32
 80111f8:	ea47 0003 	orrgt.w	r0, r7, r3
 80111fc:	fa04 f003 	lslle.w	r0, r4, r3
 8011200:	f7ef f998 	bl	8000534 <__aeabi_ui2d>
 8011204:	2201      	movs	r2, #1
 8011206:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801120a:	3e01      	subs	r6, #1
 801120c:	9214      	str	r2, [sp, #80]	@ 0x50
 801120e:	e777      	b.n	8011100 <_dtoa_r+0x100>
 8011210:	2301      	movs	r3, #1
 8011212:	e7b8      	b.n	8011186 <_dtoa_r+0x186>
 8011214:	9012      	str	r0, [sp, #72]	@ 0x48
 8011216:	e7b7      	b.n	8011188 <_dtoa_r+0x188>
 8011218:	427b      	negs	r3, r7
 801121a:	930a      	str	r3, [sp, #40]	@ 0x28
 801121c:	2300      	movs	r3, #0
 801121e:	eba8 0807 	sub.w	r8, r8, r7
 8011222:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011224:	e7c4      	b.n	80111b0 <_dtoa_r+0x1b0>
 8011226:	2300      	movs	r3, #0
 8011228:	930b      	str	r3, [sp, #44]	@ 0x2c
 801122a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801122c:	2b00      	cmp	r3, #0
 801122e:	dc35      	bgt.n	801129c <_dtoa_r+0x29c>
 8011230:	2301      	movs	r3, #1
 8011232:	9300      	str	r3, [sp, #0]
 8011234:	9307      	str	r3, [sp, #28]
 8011236:	461a      	mov	r2, r3
 8011238:	920e      	str	r2, [sp, #56]	@ 0x38
 801123a:	e00b      	b.n	8011254 <_dtoa_r+0x254>
 801123c:	2301      	movs	r3, #1
 801123e:	e7f3      	b.n	8011228 <_dtoa_r+0x228>
 8011240:	2300      	movs	r3, #0
 8011242:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011244:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011246:	18fb      	adds	r3, r7, r3
 8011248:	9300      	str	r3, [sp, #0]
 801124a:	3301      	adds	r3, #1
 801124c:	2b01      	cmp	r3, #1
 801124e:	9307      	str	r3, [sp, #28]
 8011250:	bfb8      	it	lt
 8011252:	2301      	movlt	r3, #1
 8011254:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011258:	2100      	movs	r1, #0
 801125a:	2204      	movs	r2, #4
 801125c:	f102 0514 	add.w	r5, r2, #20
 8011260:	429d      	cmp	r5, r3
 8011262:	d91f      	bls.n	80112a4 <_dtoa_r+0x2a4>
 8011264:	6041      	str	r1, [r0, #4]
 8011266:	4658      	mov	r0, fp
 8011268:	f000 fcd8 	bl	8011c1c <_Balloc>
 801126c:	4682      	mov	sl, r0
 801126e:	2800      	cmp	r0, #0
 8011270:	d13c      	bne.n	80112ec <_dtoa_r+0x2ec>
 8011272:	4b1b      	ldr	r3, [pc, #108]	@ (80112e0 <_dtoa_r+0x2e0>)
 8011274:	4602      	mov	r2, r0
 8011276:	f240 11af 	movw	r1, #431	@ 0x1af
 801127a:	e6d8      	b.n	801102e <_dtoa_r+0x2e>
 801127c:	2301      	movs	r3, #1
 801127e:	e7e0      	b.n	8011242 <_dtoa_r+0x242>
 8011280:	2401      	movs	r4, #1
 8011282:	2300      	movs	r3, #0
 8011284:	9309      	str	r3, [sp, #36]	@ 0x24
 8011286:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011288:	f04f 33ff 	mov.w	r3, #4294967295
 801128c:	9300      	str	r3, [sp, #0]
 801128e:	9307      	str	r3, [sp, #28]
 8011290:	2200      	movs	r2, #0
 8011292:	2312      	movs	r3, #18
 8011294:	e7d0      	b.n	8011238 <_dtoa_r+0x238>
 8011296:	2301      	movs	r3, #1
 8011298:	930b      	str	r3, [sp, #44]	@ 0x2c
 801129a:	e7f5      	b.n	8011288 <_dtoa_r+0x288>
 801129c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801129e:	9300      	str	r3, [sp, #0]
 80112a0:	9307      	str	r3, [sp, #28]
 80112a2:	e7d7      	b.n	8011254 <_dtoa_r+0x254>
 80112a4:	3101      	adds	r1, #1
 80112a6:	0052      	lsls	r2, r2, #1
 80112a8:	e7d8      	b.n	801125c <_dtoa_r+0x25c>
 80112aa:	bf00      	nop
 80112ac:	f3af 8000 	nop.w
 80112b0:	636f4361 	.word	0x636f4361
 80112b4:	3fd287a7 	.word	0x3fd287a7
 80112b8:	8b60c8b3 	.word	0x8b60c8b3
 80112bc:	3fc68a28 	.word	0x3fc68a28
 80112c0:	509f79fb 	.word	0x509f79fb
 80112c4:	3fd34413 	.word	0x3fd34413
 80112c8:	08018399 	.word	0x08018399
 80112cc:	080183b0 	.word	0x080183b0
 80112d0:	7ff00000 	.word	0x7ff00000
 80112d4:	08018369 	.word	0x08018369
 80112d8:	3ff80000 	.word	0x3ff80000
 80112dc:	080184a8 	.word	0x080184a8
 80112e0:	08018408 	.word	0x08018408
 80112e4:	08018395 	.word	0x08018395
 80112e8:	08018368 	.word	0x08018368
 80112ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80112f0:	6018      	str	r0, [r3, #0]
 80112f2:	9b07      	ldr	r3, [sp, #28]
 80112f4:	2b0e      	cmp	r3, #14
 80112f6:	f200 80a4 	bhi.w	8011442 <_dtoa_r+0x442>
 80112fa:	2c00      	cmp	r4, #0
 80112fc:	f000 80a1 	beq.w	8011442 <_dtoa_r+0x442>
 8011300:	2f00      	cmp	r7, #0
 8011302:	dd33      	ble.n	801136c <_dtoa_r+0x36c>
 8011304:	4bad      	ldr	r3, [pc, #692]	@ (80115bc <_dtoa_r+0x5bc>)
 8011306:	f007 020f 	and.w	r2, r7, #15
 801130a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801130e:	ed93 7b00 	vldr	d7, [r3]
 8011312:	05f8      	lsls	r0, r7, #23
 8011314:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011318:	ea4f 1427 	mov.w	r4, r7, asr #4
 801131c:	d516      	bpl.n	801134c <_dtoa_r+0x34c>
 801131e:	4ba8      	ldr	r3, [pc, #672]	@ (80115c0 <_dtoa_r+0x5c0>)
 8011320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011324:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011328:	f7ef faa8 	bl	800087c <__aeabi_ddiv>
 801132c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011330:	f004 040f 	and.w	r4, r4, #15
 8011334:	2603      	movs	r6, #3
 8011336:	4da2      	ldr	r5, [pc, #648]	@ (80115c0 <_dtoa_r+0x5c0>)
 8011338:	b954      	cbnz	r4, 8011350 <_dtoa_r+0x350>
 801133a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801133e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011342:	f7ef fa9b 	bl	800087c <__aeabi_ddiv>
 8011346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801134a:	e028      	b.n	801139e <_dtoa_r+0x39e>
 801134c:	2602      	movs	r6, #2
 801134e:	e7f2      	b.n	8011336 <_dtoa_r+0x336>
 8011350:	07e1      	lsls	r1, r4, #31
 8011352:	d508      	bpl.n	8011366 <_dtoa_r+0x366>
 8011354:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011358:	e9d5 2300 	ldrd	r2, r3, [r5]
 801135c:	f7ef f964 	bl	8000628 <__aeabi_dmul>
 8011360:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011364:	3601      	adds	r6, #1
 8011366:	1064      	asrs	r4, r4, #1
 8011368:	3508      	adds	r5, #8
 801136a:	e7e5      	b.n	8011338 <_dtoa_r+0x338>
 801136c:	f000 80d2 	beq.w	8011514 <_dtoa_r+0x514>
 8011370:	427c      	negs	r4, r7
 8011372:	4b92      	ldr	r3, [pc, #584]	@ (80115bc <_dtoa_r+0x5bc>)
 8011374:	4d92      	ldr	r5, [pc, #584]	@ (80115c0 <_dtoa_r+0x5c0>)
 8011376:	f004 020f 	and.w	r2, r4, #15
 801137a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011382:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011386:	f7ef f94f 	bl	8000628 <__aeabi_dmul>
 801138a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801138e:	1124      	asrs	r4, r4, #4
 8011390:	2300      	movs	r3, #0
 8011392:	2602      	movs	r6, #2
 8011394:	2c00      	cmp	r4, #0
 8011396:	f040 80b2 	bne.w	80114fe <_dtoa_r+0x4fe>
 801139a:	2b00      	cmp	r3, #0
 801139c:	d1d3      	bne.n	8011346 <_dtoa_r+0x346>
 801139e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80113a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	f000 80b7 	beq.w	8011518 <_dtoa_r+0x518>
 80113aa:	4b86      	ldr	r3, [pc, #536]	@ (80115c4 <_dtoa_r+0x5c4>)
 80113ac:	2200      	movs	r2, #0
 80113ae:	4620      	mov	r0, r4
 80113b0:	4629      	mov	r1, r5
 80113b2:	f7ef fbab 	bl	8000b0c <__aeabi_dcmplt>
 80113b6:	2800      	cmp	r0, #0
 80113b8:	f000 80ae 	beq.w	8011518 <_dtoa_r+0x518>
 80113bc:	9b07      	ldr	r3, [sp, #28]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	f000 80aa 	beq.w	8011518 <_dtoa_r+0x518>
 80113c4:	9b00      	ldr	r3, [sp, #0]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	dd37      	ble.n	801143a <_dtoa_r+0x43a>
 80113ca:	1e7b      	subs	r3, r7, #1
 80113cc:	9304      	str	r3, [sp, #16]
 80113ce:	4620      	mov	r0, r4
 80113d0:	4b7d      	ldr	r3, [pc, #500]	@ (80115c8 <_dtoa_r+0x5c8>)
 80113d2:	2200      	movs	r2, #0
 80113d4:	4629      	mov	r1, r5
 80113d6:	f7ef f927 	bl	8000628 <__aeabi_dmul>
 80113da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80113de:	9c00      	ldr	r4, [sp, #0]
 80113e0:	3601      	adds	r6, #1
 80113e2:	4630      	mov	r0, r6
 80113e4:	f7ef f8b6 	bl	8000554 <__aeabi_i2d>
 80113e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80113ec:	f7ef f91c 	bl	8000628 <__aeabi_dmul>
 80113f0:	4b76      	ldr	r3, [pc, #472]	@ (80115cc <_dtoa_r+0x5cc>)
 80113f2:	2200      	movs	r2, #0
 80113f4:	f7ee ff62 	bl	80002bc <__adddf3>
 80113f8:	4605      	mov	r5, r0
 80113fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80113fe:	2c00      	cmp	r4, #0
 8011400:	f040 808d 	bne.w	801151e <_dtoa_r+0x51e>
 8011404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011408:	4b71      	ldr	r3, [pc, #452]	@ (80115d0 <_dtoa_r+0x5d0>)
 801140a:	2200      	movs	r2, #0
 801140c:	f7ee ff54 	bl	80002b8 <__aeabi_dsub>
 8011410:	4602      	mov	r2, r0
 8011412:	460b      	mov	r3, r1
 8011414:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011418:	462a      	mov	r2, r5
 801141a:	4633      	mov	r3, r6
 801141c:	f7ef fb94 	bl	8000b48 <__aeabi_dcmpgt>
 8011420:	2800      	cmp	r0, #0
 8011422:	f040 828b 	bne.w	801193c <_dtoa_r+0x93c>
 8011426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801142a:	462a      	mov	r2, r5
 801142c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011430:	f7ef fb6c 	bl	8000b0c <__aeabi_dcmplt>
 8011434:	2800      	cmp	r0, #0
 8011436:	f040 8128 	bne.w	801168a <_dtoa_r+0x68a>
 801143a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801143e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011442:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011444:	2b00      	cmp	r3, #0
 8011446:	f2c0 815a 	blt.w	80116fe <_dtoa_r+0x6fe>
 801144a:	2f0e      	cmp	r7, #14
 801144c:	f300 8157 	bgt.w	80116fe <_dtoa_r+0x6fe>
 8011450:	4b5a      	ldr	r3, [pc, #360]	@ (80115bc <_dtoa_r+0x5bc>)
 8011452:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011456:	ed93 7b00 	vldr	d7, [r3]
 801145a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801145c:	2b00      	cmp	r3, #0
 801145e:	ed8d 7b00 	vstr	d7, [sp]
 8011462:	da03      	bge.n	801146c <_dtoa_r+0x46c>
 8011464:	9b07      	ldr	r3, [sp, #28]
 8011466:	2b00      	cmp	r3, #0
 8011468:	f340 8101 	ble.w	801166e <_dtoa_r+0x66e>
 801146c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011470:	4656      	mov	r6, sl
 8011472:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011476:	4620      	mov	r0, r4
 8011478:	4629      	mov	r1, r5
 801147a:	f7ef f9ff 	bl	800087c <__aeabi_ddiv>
 801147e:	f7ef fb83 	bl	8000b88 <__aeabi_d2iz>
 8011482:	4680      	mov	r8, r0
 8011484:	f7ef f866 	bl	8000554 <__aeabi_i2d>
 8011488:	e9dd 2300 	ldrd	r2, r3, [sp]
 801148c:	f7ef f8cc 	bl	8000628 <__aeabi_dmul>
 8011490:	4602      	mov	r2, r0
 8011492:	460b      	mov	r3, r1
 8011494:	4620      	mov	r0, r4
 8011496:	4629      	mov	r1, r5
 8011498:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801149c:	f7ee ff0c 	bl	80002b8 <__aeabi_dsub>
 80114a0:	f806 4b01 	strb.w	r4, [r6], #1
 80114a4:	9d07      	ldr	r5, [sp, #28]
 80114a6:	eba6 040a 	sub.w	r4, r6, sl
 80114aa:	42a5      	cmp	r5, r4
 80114ac:	4602      	mov	r2, r0
 80114ae:	460b      	mov	r3, r1
 80114b0:	f040 8117 	bne.w	80116e2 <_dtoa_r+0x6e2>
 80114b4:	f7ee ff02 	bl	80002bc <__adddf3>
 80114b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114bc:	4604      	mov	r4, r0
 80114be:	460d      	mov	r5, r1
 80114c0:	f7ef fb42 	bl	8000b48 <__aeabi_dcmpgt>
 80114c4:	2800      	cmp	r0, #0
 80114c6:	f040 80f9 	bne.w	80116bc <_dtoa_r+0x6bc>
 80114ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114ce:	4620      	mov	r0, r4
 80114d0:	4629      	mov	r1, r5
 80114d2:	f7ef fb11 	bl	8000af8 <__aeabi_dcmpeq>
 80114d6:	b118      	cbz	r0, 80114e0 <_dtoa_r+0x4e0>
 80114d8:	f018 0f01 	tst.w	r8, #1
 80114dc:	f040 80ee 	bne.w	80116bc <_dtoa_r+0x6bc>
 80114e0:	4649      	mov	r1, r9
 80114e2:	4658      	mov	r0, fp
 80114e4:	f000 fbda 	bl	8011c9c <_Bfree>
 80114e8:	2300      	movs	r3, #0
 80114ea:	7033      	strb	r3, [r6, #0]
 80114ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80114ee:	3701      	adds	r7, #1
 80114f0:	601f      	str	r7, [r3, #0]
 80114f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	f000 831d 	beq.w	8011b34 <_dtoa_r+0xb34>
 80114fa:	601e      	str	r6, [r3, #0]
 80114fc:	e31a      	b.n	8011b34 <_dtoa_r+0xb34>
 80114fe:	07e2      	lsls	r2, r4, #31
 8011500:	d505      	bpl.n	801150e <_dtoa_r+0x50e>
 8011502:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011506:	f7ef f88f 	bl	8000628 <__aeabi_dmul>
 801150a:	3601      	adds	r6, #1
 801150c:	2301      	movs	r3, #1
 801150e:	1064      	asrs	r4, r4, #1
 8011510:	3508      	adds	r5, #8
 8011512:	e73f      	b.n	8011394 <_dtoa_r+0x394>
 8011514:	2602      	movs	r6, #2
 8011516:	e742      	b.n	801139e <_dtoa_r+0x39e>
 8011518:	9c07      	ldr	r4, [sp, #28]
 801151a:	9704      	str	r7, [sp, #16]
 801151c:	e761      	b.n	80113e2 <_dtoa_r+0x3e2>
 801151e:	4b27      	ldr	r3, [pc, #156]	@ (80115bc <_dtoa_r+0x5bc>)
 8011520:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011522:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011526:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801152a:	4454      	add	r4, sl
 801152c:	2900      	cmp	r1, #0
 801152e:	d053      	beq.n	80115d8 <_dtoa_r+0x5d8>
 8011530:	4928      	ldr	r1, [pc, #160]	@ (80115d4 <_dtoa_r+0x5d4>)
 8011532:	2000      	movs	r0, #0
 8011534:	f7ef f9a2 	bl	800087c <__aeabi_ddiv>
 8011538:	4633      	mov	r3, r6
 801153a:	462a      	mov	r2, r5
 801153c:	f7ee febc 	bl	80002b8 <__aeabi_dsub>
 8011540:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011544:	4656      	mov	r6, sl
 8011546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801154a:	f7ef fb1d 	bl	8000b88 <__aeabi_d2iz>
 801154e:	4605      	mov	r5, r0
 8011550:	f7ef f800 	bl	8000554 <__aeabi_i2d>
 8011554:	4602      	mov	r2, r0
 8011556:	460b      	mov	r3, r1
 8011558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801155c:	f7ee feac 	bl	80002b8 <__aeabi_dsub>
 8011560:	3530      	adds	r5, #48	@ 0x30
 8011562:	4602      	mov	r2, r0
 8011564:	460b      	mov	r3, r1
 8011566:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801156a:	f806 5b01 	strb.w	r5, [r6], #1
 801156e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011572:	f7ef facb 	bl	8000b0c <__aeabi_dcmplt>
 8011576:	2800      	cmp	r0, #0
 8011578:	d171      	bne.n	801165e <_dtoa_r+0x65e>
 801157a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801157e:	4911      	ldr	r1, [pc, #68]	@ (80115c4 <_dtoa_r+0x5c4>)
 8011580:	2000      	movs	r0, #0
 8011582:	f7ee fe99 	bl	80002b8 <__aeabi_dsub>
 8011586:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801158a:	f7ef fabf 	bl	8000b0c <__aeabi_dcmplt>
 801158e:	2800      	cmp	r0, #0
 8011590:	f040 8095 	bne.w	80116be <_dtoa_r+0x6be>
 8011594:	42a6      	cmp	r6, r4
 8011596:	f43f af50 	beq.w	801143a <_dtoa_r+0x43a>
 801159a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801159e:	4b0a      	ldr	r3, [pc, #40]	@ (80115c8 <_dtoa_r+0x5c8>)
 80115a0:	2200      	movs	r2, #0
 80115a2:	f7ef f841 	bl	8000628 <__aeabi_dmul>
 80115a6:	4b08      	ldr	r3, [pc, #32]	@ (80115c8 <_dtoa_r+0x5c8>)
 80115a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80115ac:	2200      	movs	r2, #0
 80115ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80115b2:	f7ef f839 	bl	8000628 <__aeabi_dmul>
 80115b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80115ba:	e7c4      	b.n	8011546 <_dtoa_r+0x546>
 80115bc:	080184a8 	.word	0x080184a8
 80115c0:	08018480 	.word	0x08018480
 80115c4:	3ff00000 	.word	0x3ff00000
 80115c8:	40240000 	.word	0x40240000
 80115cc:	401c0000 	.word	0x401c0000
 80115d0:	40140000 	.word	0x40140000
 80115d4:	3fe00000 	.word	0x3fe00000
 80115d8:	4631      	mov	r1, r6
 80115da:	4628      	mov	r0, r5
 80115dc:	f7ef f824 	bl	8000628 <__aeabi_dmul>
 80115e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80115e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80115e6:	4656      	mov	r6, sl
 80115e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80115ec:	f7ef facc 	bl	8000b88 <__aeabi_d2iz>
 80115f0:	4605      	mov	r5, r0
 80115f2:	f7ee ffaf 	bl	8000554 <__aeabi_i2d>
 80115f6:	4602      	mov	r2, r0
 80115f8:	460b      	mov	r3, r1
 80115fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80115fe:	f7ee fe5b 	bl	80002b8 <__aeabi_dsub>
 8011602:	3530      	adds	r5, #48	@ 0x30
 8011604:	f806 5b01 	strb.w	r5, [r6], #1
 8011608:	4602      	mov	r2, r0
 801160a:	460b      	mov	r3, r1
 801160c:	42a6      	cmp	r6, r4
 801160e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011612:	f04f 0200 	mov.w	r2, #0
 8011616:	d124      	bne.n	8011662 <_dtoa_r+0x662>
 8011618:	4bac      	ldr	r3, [pc, #688]	@ (80118cc <_dtoa_r+0x8cc>)
 801161a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801161e:	f7ee fe4d 	bl	80002bc <__adddf3>
 8011622:	4602      	mov	r2, r0
 8011624:	460b      	mov	r3, r1
 8011626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801162a:	f7ef fa8d 	bl	8000b48 <__aeabi_dcmpgt>
 801162e:	2800      	cmp	r0, #0
 8011630:	d145      	bne.n	80116be <_dtoa_r+0x6be>
 8011632:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011636:	49a5      	ldr	r1, [pc, #660]	@ (80118cc <_dtoa_r+0x8cc>)
 8011638:	2000      	movs	r0, #0
 801163a:	f7ee fe3d 	bl	80002b8 <__aeabi_dsub>
 801163e:	4602      	mov	r2, r0
 8011640:	460b      	mov	r3, r1
 8011642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011646:	f7ef fa61 	bl	8000b0c <__aeabi_dcmplt>
 801164a:	2800      	cmp	r0, #0
 801164c:	f43f aef5 	beq.w	801143a <_dtoa_r+0x43a>
 8011650:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011652:	1e73      	subs	r3, r6, #1
 8011654:	9315      	str	r3, [sp, #84]	@ 0x54
 8011656:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801165a:	2b30      	cmp	r3, #48	@ 0x30
 801165c:	d0f8      	beq.n	8011650 <_dtoa_r+0x650>
 801165e:	9f04      	ldr	r7, [sp, #16]
 8011660:	e73e      	b.n	80114e0 <_dtoa_r+0x4e0>
 8011662:	4b9b      	ldr	r3, [pc, #620]	@ (80118d0 <_dtoa_r+0x8d0>)
 8011664:	f7ee ffe0 	bl	8000628 <__aeabi_dmul>
 8011668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801166c:	e7bc      	b.n	80115e8 <_dtoa_r+0x5e8>
 801166e:	d10c      	bne.n	801168a <_dtoa_r+0x68a>
 8011670:	4b98      	ldr	r3, [pc, #608]	@ (80118d4 <_dtoa_r+0x8d4>)
 8011672:	2200      	movs	r2, #0
 8011674:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011678:	f7ee ffd6 	bl	8000628 <__aeabi_dmul>
 801167c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011680:	f7ef fa58 	bl	8000b34 <__aeabi_dcmpge>
 8011684:	2800      	cmp	r0, #0
 8011686:	f000 8157 	beq.w	8011938 <_dtoa_r+0x938>
 801168a:	2400      	movs	r4, #0
 801168c:	4625      	mov	r5, r4
 801168e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011690:	43db      	mvns	r3, r3
 8011692:	9304      	str	r3, [sp, #16]
 8011694:	4656      	mov	r6, sl
 8011696:	2700      	movs	r7, #0
 8011698:	4621      	mov	r1, r4
 801169a:	4658      	mov	r0, fp
 801169c:	f000 fafe 	bl	8011c9c <_Bfree>
 80116a0:	2d00      	cmp	r5, #0
 80116a2:	d0dc      	beq.n	801165e <_dtoa_r+0x65e>
 80116a4:	b12f      	cbz	r7, 80116b2 <_dtoa_r+0x6b2>
 80116a6:	42af      	cmp	r7, r5
 80116a8:	d003      	beq.n	80116b2 <_dtoa_r+0x6b2>
 80116aa:	4639      	mov	r1, r7
 80116ac:	4658      	mov	r0, fp
 80116ae:	f000 faf5 	bl	8011c9c <_Bfree>
 80116b2:	4629      	mov	r1, r5
 80116b4:	4658      	mov	r0, fp
 80116b6:	f000 faf1 	bl	8011c9c <_Bfree>
 80116ba:	e7d0      	b.n	801165e <_dtoa_r+0x65e>
 80116bc:	9704      	str	r7, [sp, #16]
 80116be:	4633      	mov	r3, r6
 80116c0:	461e      	mov	r6, r3
 80116c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80116c6:	2a39      	cmp	r2, #57	@ 0x39
 80116c8:	d107      	bne.n	80116da <_dtoa_r+0x6da>
 80116ca:	459a      	cmp	sl, r3
 80116cc:	d1f8      	bne.n	80116c0 <_dtoa_r+0x6c0>
 80116ce:	9a04      	ldr	r2, [sp, #16]
 80116d0:	3201      	adds	r2, #1
 80116d2:	9204      	str	r2, [sp, #16]
 80116d4:	2230      	movs	r2, #48	@ 0x30
 80116d6:	f88a 2000 	strb.w	r2, [sl]
 80116da:	781a      	ldrb	r2, [r3, #0]
 80116dc:	3201      	adds	r2, #1
 80116de:	701a      	strb	r2, [r3, #0]
 80116e0:	e7bd      	b.n	801165e <_dtoa_r+0x65e>
 80116e2:	4b7b      	ldr	r3, [pc, #492]	@ (80118d0 <_dtoa_r+0x8d0>)
 80116e4:	2200      	movs	r2, #0
 80116e6:	f7ee ff9f 	bl	8000628 <__aeabi_dmul>
 80116ea:	2200      	movs	r2, #0
 80116ec:	2300      	movs	r3, #0
 80116ee:	4604      	mov	r4, r0
 80116f0:	460d      	mov	r5, r1
 80116f2:	f7ef fa01 	bl	8000af8 <__aeabi_dcmpeq>
 80116f6:	2800      	cmp	r0, #0
 80116f8:	f43f aebb 	beq.w	8011472 <_dtoa_r+0x472>
 80116fc:	e6f0      	b.n	80114e0 <_dtoa_r+0x4e0>
 80116fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011700:	2a00      	cmp	r2, #0
 8011702:	f000 80db 	beq.w	80118bc <_dtoa_r+0x8bc>
 8011706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011708:	2a01      	cmp	r2, #1
 801170a:	f300 80bf 	bgt.w	801188c <_dtoa_r+0x88c>
 801170e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011710:	2a00      	cmp	r2, #0
 8011712:	f000 80b7 	beq.w	8011884 <_dtoa_r+0x884>
 8011716:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801171a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801171c:	4646      	mov	r6, r8
 801171e:	9a08      	ldr	r2, [sp, #32]
 8011720:	2101      	movs	r1, #1
 8011722:	441a      	add	r2, r3
 8011724:	4658      	mov	r0, fp
 8011726:	4498      	add	r8, r3
 8011728:	9208      	str	r2, [sp, #32]
 801172a:	f000 fb6b 	bl	8011e04 <__i2b>
 801172e:	4605      	mov	r5, r0
 8011730:	b15e      	cbz	r6, 801174a <_dtoa_r+0x74a>
 8011732:	9b08      	ldr	r3, [sp, #32]
 8011734:	2b00      	cmp	r3, #0
 8011736:	dd08      	ble.n	801174a <_dtoa_r+0x74a>
 8011738:	42b3      	cmp	r3, r6
 801173a:	9a08      	ldr	r2, [sp, #32]
 801173c:	bfa8      	it	ge
 801173e:	4633      	movge	r3, r6
 8011740:	eba8 0803 	sub.w	r8, r8, r3
 8011744:	1af6      	subs	r6, r6, r3
 8011746:	1ad3      	subs	r3, r2, r3
 8011748:	9308      	str	r3, [sp, #32]
 801174a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801174c:	b1f3      	cbz	r3, 801178c <_dtoa_r+0x78c>
 801174e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011750:	2b00      	cmp	r3, #0
 8011752:	f000 80b7 	beq.w	80118c4 <_dtoa_r+0x8c4>
 8011756:	b18c      	cbz	r4, 801177c <_dtoa_r+0x77c>
 8011758:	4629      	mov	r1, r5
 801175a:	4622      	mov	r2, r4
 801175c:	4658      	mov	r0, fp
 801175e:	f000 fc11 	bl	8011f84 <__pow5mult>
 8011762:	464a      	mov	r2, r9
 8011764:	4601      	mov	r1, r0
 8011766:	4605      	mov	r5, r0
 8011768:	4658      	mov	r0, fp
 801176a:	f000 fb61 	bl	8011e30 <__multiply>
 801176e:	4649      	mov	r1, r9
 8011770:	9004      	str	r0, [sp, #16]
 8011772:	4658      	mov	r0, fp
 8011774:	f000 fa92 	bl	8011c9c <_Bfree>
 8011778:	9b04      	ldr	r3, [sp, #16]
 801177a:	4699      	mov	r9, r3
 801177c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801177e:	1b1a      	subs	r2, r3, r4
 8011780:	d004      	beq.n	801178c <_dtoa_r+0x78c>
 8011782:	4649      	mov	r1, r9
 8011784:	4658      	mov	r0, fp
 8011786:	f000 fbfd 	bl	8011f84 <__pow5mult>
 801178a:	4681      	mov	r9, r0
 801178c:	2101      	movs	r1, #1
 801178e:	4658      	mov	r0, fp
 8011790:	f000 fb38 	bl	8011e04 <__i2b>
 8011794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011796:	4604      	mov	r4, r0
 8011798:	2b00      	cmp	r3, #0
 801179a:	f000 81cf 	beq.w	8011b3c <_dtoa_r+0xb3c>
 801179e:	461a      	mov	r2, r3
 80117a0:	4601      	mov	r1, r0
 80117a2:	4658      	mov	r0, fp
 80117a4:	f000 fbee 	bl	8011f84 <__pow5mult>
 80117a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117aa:	2b01      	cmp	r3, #1
 80117ac:	4604      	mov	r4, r0
 80117ae:	f300 8095 	bgt.w	80118dc <_dtoa_r+0x8dc>
 80117b2:	9b02      	ldr	r3, [sp, #8]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	f040 8087 	bne.w	80118c8 <_dtoa_r+0x8c8>
 80117ba:	9b03      	ldr	r3, [sp, #12]
 80117bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	f040 8089 	bne.w	80118d8 <_dtoa_r+0x8d8>
 80117c6:	9b03      	ldr	r3, [sp, #12]
 80117c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80117cc:	0d1b      	lsrs	r3, r3, #20
 80117ce:	051b      	lsls	r3, r3, #20
 80117d0:	b12b      	cbz	r3, 80117de <_dtoa_r+0x7de>
 80117d2:	9b08      	ldr	r3, [sp, #32]
 80117d4:	3301      	adds	r3, #1
 80117d6:	9308      	str	r3, [sp, #32]
 80117d8:	f108 0801 	add.w	r8, r8, #1
 80117dc:	2301      	movs	r3, #1
 80117de:	930a      	str	r3, [sp, #40]	@ 0x28
 80117e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	f000 81b0 	beq.w	8011b48 <_dtoa_r+0xb48>
 80117e8:	6923      	ldr	r3, [r4, #16]
 80117ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80117ee:	6918      	ldr	r0, [r3, #16]
 80117f0:	f000 fabc 	bl	8011d6c <__hi0bits>
 80117f4:	f1c0 0020 	rsb	r0, r0, #32
 80117f8:	9b08      	ldr	r3, [sp, #32]
 80117fa:	4418      	add	r0, r3
 80117fc:	f010 001f 	ands.w	r0, r0, #31
 8011800:	d077      	beq.n	80118f2 <_dtoa_r+0x8f2>
 8011802:	f1c0 0320 	rsb	r3, r0, #32
 8011806:	2b04      	cmp	r3, #4
 8011808:	dd6b      	ble.n	80118e2 <_dtoa_r+0x8e2>
 801180a:	9b08      	ldr	r3, [sp, #32]
 801180c:	f1c0 001c 	rsb	r0, r0, #28
 8011810:	4403      	add	r3, r0
 8011812:	4480      	add	r8, r0
 8011814:	4406      	add	r6, r0
 8011816:	9308      	str	r3, [sp, #32]
 8011818:	f1b8 0f00 	cmp.w	r8, #0
 801181c:	dd05      	ble.n	801182a <_dtoa_r+0x82a>
 801181e:	4649      	mov	r1, r9
 8011820:	4642      	mov	r2, r8
 8011822:	4658      	mov	r0, fp
 8011824:	f000 fc08 	bl	8012038 <__lshift>
 8011828:	4681      	mov	r9, r0
 801182a:	9b08      	ldr	r3, [sp, #32]
 801182c:	2b00      	cmp	r3, #0
 801182e:	dd05      	ble.n	801183c <_dtoa_r+0x83c>
 8011830:	4621      	mov	r1, r4
 8011832:	461a      	mov	r2, r3
 8011834:	4658      	mov	r0, fp
 8011836:	f000 fbff 	bl	8012038 <__lshift>
 801183a:	4604      	mov	r4, r0
 801183c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801183e:	2b00      	cmp	r3, #0
 8011840:	d059      	beq.n	80118f6 <_dtoa_r+0x8f6>
 8011842:	4621      	mov	r1, r4
 8011844:	4648      	mov	r0, r9
 8011846:	f000 fc63 	bl	8012110 <__mcmp>
 801184a:	2800      	cmp	r0, #0
 801184c:	da53      	bge.n	80118f6 <_dtoa_r+0x8f6>
 801184e:	1e7b      	subs	r3, r7, #1
 8011850:	9304      	str	r3, [sp, #16]
 8011852:	4649      	mov	r1, r9
 8011854:	2300      	movs	r3, #0
 8011856:	220a      	movs	r2, #10
 8011858:	4658      	mov	r0, fp
 801185a:	f000 fa41 	bl	8011ce0 <__multadd>
 801185e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011860:	4681      	mov	r9, r0
 8011862:	2b00      	cmp	r3, #0
 8011864:	f000 8172 	beq.w	8011b4c <_dtoa_r+0xb4c>
 8011868:	2300      	movs	r3, #0
 801186a:	4629      	mov	r1, r5
 801186c:	220a      	movs	r2, #10
 801186e:	4658      	mov	r0, fp
 8011870:	f000 fa36 	bl	8011ce0 <__multadd>
 8011874:	9b00      	ldr	r3, [sp, #0]
 8011876:	2b00      	cmp	r3, #0
 8011878:	4605      	mov	r5, r0
 801187a:	dc67      	bgt.n	801194c <_dtoa_r+0x94c>
 801187c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801187e:	2b02      	cmp	r3, #2
 8011880:	dc41      	bgt.n	8011906 <_dtoa_r+0x906>
 8011882:	e063      	b.n	801194c <_dtoa_r+0x94c>
 8011884:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011886:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801188a:	e746      	b.n	801171a <_dtoa_r+0x71a>
 801188c:	9b07      	ldr	r3, [sp, #28]
 801188e:	1e5c      	subs	r4, r3, #1
 8011890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011892:	42a3      	cmp	r3, r4
 8011894:	bfbf      	itttt	lt
 8011896:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011898:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801189a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801189c:	1ae3      	sublt	r3, r4, r3
 801189e:	bfb4      	ite	lt
 80118a0:	18d2      	addlt	r2, r2, r3
 80118a2:	1b1c      	subge	r4, r3, r4
 80118a4:	9b07      	ldr	r3, [sp, #28]
 80118a6:	bfbc      	itt	lt
 80118a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80118aa:	2400      	movlt	r4, #0
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	bfb5      	itete	lt
 80118b0:	eba8 0603 	sublt.w	r6, r8, r3
 80118b4:	9b07      	ldrge	r3, [sp, #28]
 80118b6:	2300      	movlt	r3, #0
 80118b8:	4646      	movge	r6, r8
 80118ba:	e730      	b.n	801171e <_dtoa_r+0x71e>
 80118bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80118be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80118c0:	4646      	mov	r6, r8
 80118c2:	e735      	b.n	8011730 <_dtoa_r+0x730>
 80118c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80118c6:	e75c      	b.n	8011782 <_dtoa_r+0x782>
 80118c8:	2300      	movs	r3, #0
 80118ca:	e788      	b.n	80117de <_dtoa_r+0x7de>
 80118cc:	3fe00000 	.word	0x3fe00000
 80118d0:	40240000 	.word	0x40240000
 80118d4:	40140000 	.word	0x40140000
 80118d8:	9b02      	ldr	r3, [sp, #8]
 80118da:	e780      	b.n	80117de <_dtoa_r+0x7de>
 80118dc:	2300      	movs	r3, #0
 80118de:	930a      	str	r3, [sp, #40]	@ 0x28
 80118e0:	e782      	b.n	80117e8 <_dtoa_r+0x7e8>
 80118e2:	d099      	beq.n	8011818 <_dtoa_r+0x818>
 80118e4:	9a08      	ldr	r2, [sp, #32]
 80118e6:	331c      	adds	r3, #28
 80118e8:	441a      	add	r2, r3
 80118ea:	4498      	add	r8, r3
 80118ec:	441e      	add	r6, r3
 80118ee:	9208      	str	r2, [sp, #32]
 80118f0:	e792      	b.n	8011818 <_dtoa_r+0x818>
 80118f2:	4603      	mov	r3, r0
 80118f4:	e7f6      	b.n	80118e4 <_dtoa_r+0x8e4>
 80118f6:	9b07      	ldr	r3, [sp, #28]
 80118f8:	9704      	str	r7, [sp, #16]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	dc20      	bgt.n	8011940 <_dtoa_r+0x940>
 80118fe:	9300      	str	r3, [sp, #0]
 8011900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011902:	2b02      	cmp	r3, #2
 8011904:	dd1e      	ble.n	8011944 <_dtoa_r+0x944>
 8011906:	9b00      	ldr	r3, [sp, #0]
 8011908:	2b00      	cmp	r3, #0
 801190a:	f47f aec0 	bne.w	801168e <_dtoa_r+0x68e>
 801190e:	4621      	mov	r1, r4
 8011910:	2205      	movs	r2, #5
 8011912:	4658      	mov	r0, fp
 8011914:	f000 f9e4 	bl	8011ce0 <__multadd>
 8011918:	4601      	mov	r1, r0
 801191a:	4604      	mov	r4, r0
 801191c:	4648      	mov	r0, r9
 801191e:	f000 fbf7 	bl	8012110 <__mcmp>
 8011922:	2800      	cmp	r0, #0
 8011924:	f77f aeb3 	ble.w	801168e <_dtoa_r+0x68e>
 8011928:	4656      	mov	r6, sl
 801192a:	2331      	movs	r3, #49	@ 0x31
 801192c:	f806 3b01 	strb.w	r3, [r6], #1
 8011930:	9b04      	ldr	r3, [sp, #16]
 8011932:	3301      	adds	r3, #1
 8011934:	9304      	str	r3, [sp, #16]
 8011936:	e6ae      	b.n	8011696 <_dtoa_r+0x696>
 8011938:	9c07      	ldr	r4, [sp, #28]
 801193a:	9704      	str	r7, [sp, #16]
 801193c:	4625      	mov	r5, r4
 801193e:	e7f3      	b.n	8011928 <_dtoa_r+0x928>
 8011940:	9b07      	ldr	r3, [sp, #28]
 8011942:	9300      	str	r3, [sp, #0]
 8011944:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011946:	2b00      	cmp	r3, #0
 8011948:	f000 8104 	beq.w	8011b54 <_dtoa_r+0xb54>
 801194c:	2e00      	cmp	r6, #0
 801194e:	dd05      	ble.n	801195c <_dtoa_r+0x95c>
 8011950:	4629      	mov	r1, r5
 8011952:	4632      	mov	r2, r6
 8011954:	4658      	mov	r0, fp
 8011956:	f000 fb6f 	bl	8012038 <__lshift>
 801195a:	4605      	mov	r5, r0
 801195c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801195e:	2b00      	cmp	r3, #0
 8011960:	d05a      	beq.n	8011a18 <_dtoa_r+0xa18>
 8011962:	6869      	ldr	r1, [r5, #4]
 8011964:	4658      	mov	r0, fp
 8011966:	f000 f959 	bl	8011c1c <_Balloc>
 801196a:	4606      	mov	r6, r0
 801196c:	b928      	cbnz	r0, 801197a <_dtoa_r+0x97a>
 801196e:	4b84      	ldr	r3, [pc, #528]	@ (8011b80 <_dtoa_r+0xb80>)
 8011970:	4602      	mov	r2, r0
 8011972:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011976:	f7ff bb5a 	b.w	801102e <_dtoa_r+0x2e>
 801197a:	692a      	ldr	r2, [r5, #16]
 801197c:	3202      	adds	r2, #2
 801197e:	0092      	lsls	r2, r2, #2
 8011980:	f105 010c 	add.w	r1, r5, #12
 8011984:	300c      	adds	r0, #12
 8011986:	f7ff faa2 	bl	8010ece <memcpy>
 801198a:	2201      	movs	r2, #1
 801198c:	4631      	mov	r1, r6
 801198e:	4658      	mov	r0, fp
 8011990:	f000 fb52 	bl	8012038 <__lshift>
 8011994:	f10a 0301 	add.w	r3, sl, #1
 8011998:	9307      	str	r3, [sp, #28]
 801199a:	9b00      	ldr	r3, [sp, #0]
 801199c:	4453      	add	r3, sl
 801199e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80119a0:	9b02      	ldr	r3, [sp, #8]
 80119a2:	f003 0301 	and.w	r3, r3, #1
 80119a6:	462f      	mov	r7, r5
 80119a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80119aa:	4605      	mov	r5, r0
 80119ac:	9b07      	ldr	r3, [sp, #28]
 80119ae:	4621      	mov	r1, r4
 80119b0:	3b01      	subs	r3, #1
 80119b2:	4648      	mov	r0, r9
 80119b4:	9300      	str	r3, [sp, #0]
 80119b6:	f7ff fa98 	bl	8010eea <quorem>
 80119ba:	4639      	mov	r1, r7
 80119bc:	9002      	str	r0, [sp, #8]
 80119be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80119c2:	4648      	mov	r0, r9
 80119c4:	f000 fba4 	bl	8012110 <__mcmp>
 80119c8:	462a      	mov	r2, r5
 80119ca:	9008      	str	r0, [sp, #32]
 80119cc:	4621      	mov	r1, r4
 80119ce:	4658      	mov	r0, fp
 80119d0:	f000 fbba 	bl	8012148 <__mdiff>
 80119d4:	68c2      	ldr	r2, [r0, #12]
 80119d6:	4606      	mov	r6, r0
 80119d8:	bb02      	cbnz	r2, 8011a1c <_dtoa_r+0xa1c>
 80119da:	4601      	mov	r1, r0
 80119dc:	4648      	mov	r0, r9
 80119de:	f000 fb97 	bl	8012110 <__mcmp>
 80119e2:	4602      	mov	r2, r0
 80119e4:	4631      	mov	r1, r6
 80119e6:	4658      	mov	r0, fp
 80119e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80119ea:	f000 f957 	bl	8011c9c <_Bfree>
 80119ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80119f2:	9e07      	ldr	r6, [sp, #28]
 80119f4:	ea43 0102 	orr.w	r1, r3, r2
 80119f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80119fa:	4319      	orrs	r1, r3
 80119fc:	d110      	bne.n	8011a20 <_dtoa_r+0xa20>
 80119fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011a02:	d029      	beq.n	8011a58 <_dtoa_r+0xa58>
 8011a04:	9b08      	ldr	r3, [sp, #32]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	dd02      	ble.n	8011a10 <_dtoa_r+0xa10>
 8011a0a:	9b02      	ldr	r3, [sp, #8]
 8011a0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011a10:	9b00      	ldr	r3, [sp, #0]
 8011a12:	f883 8000 	strb.w	r8, [r3]
 8011a16:	e63f      	b.n	8011698 <_dtoa_r+0x698>
 8011a18:	4628      	mov	r0, r5
 8011a1a:	e7bb      	b.n	8011994 <_dtoa_r+0x994>
 8011a1c:	2201      	movs	r2, #1
 8011a1e:	e7e1      	b.n	80119e4 <_dtoa_r+0x9e4>
 8011a20:	9b08      	ldr	r3, [sp, #32]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	db04      	blt.n	8011a30 <_dtoa_r+0xa30>
 8011a26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011a28:	430b      	orrs	r3, r1
 8011a2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011a2c:	430b      	orrs	r3, r1
 8011a2e:	d120      	bne.n	8011a72 <_dtoa_r+0xa72>
 8011a30:	2a00      	cmp	r2, #0
 8011a32:	dded      	ble.n	8011a10 <_dtoa_r+0xa10>
 8011a34:	4649      	mov	r1, r9
 8011a36:	2201      	movs	r2, #1
 8011a38:	4658      	mov	r0, fp
 8011a3a:	f000 fafd 	bl	8012038 <__lshift>
 8011a3e:	4621      	mov	r1, r4
 8011a40:	4681      	mov	r9, r0
 8011a42:	f000 fb65 	bl	8012110 <__mcmp>
 8011a46:	2800      	cmp	r0, #0
 8011a48:	dc03      	bgt.n	8011a52 <_dtoa_r+0xa52>
 8011a4a:	d1e1      	bne.n	8011a10 <_dtoa_r+0xa10>
 8011a4c:	f018 0f01 	tst.w	r8, #1
 8011a50:	d0de      	beq.n	8011a10 <_dtoa_r+0xa10>
 8011a52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011a56:	d1d8      	bne.n	8011a0a <_dtoa_r+0xa0a>
 8011a58:	9a00      	ldr	r2, [sp, #0]
 8011a5a:	2339      	movs	r3, #57	@ 0x39
 8011a5c:	7013      	strb	r3, [r2, #0]
 8011a5e:	4633      	mov	r3, r6
 8011a60:	461e      	mov	r6, r3
 8011a62:	3b01      	subs	r3, #1
 8011a64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011a68:	2a39      	cmp	r2, #57	@ 0x39
 8011a6a:	d052      	beq.n	8011b12 <_dtoa_r+0xb12>
 8011a6c:	3201      	adds	r2, #1
 8011a6e:	701a      	strb	r2, [r3, #0]
 8011a70:	e612      	b.n	8011698 <_dtoa_r+0x698>
 8011a72:	2a00      	cmp	r2, #0
 8011a74:	dd07      	ble.n	8011a86 <_dtoa_r+0xa86>
 8011a76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011a7a:	d0ed      	beq.n	8011a58 <_dtoa_r+0xa58>
 8011a7c:	9a00      	ldr	r2, [sp, #0]
 8011a7e:	f108 0301 	add.w	r3, r8, #1
 8011a82:	7013      	strb	r3, [r2, #0]
 8011a84:	e608      	b.n	8011698 <_dtoa_r+0x698>
 8011a86:	9b07      	ldr	r3, [sp, #28]
 8011a88:	9a07      	ldr	r2, [sp, #28]
 8011a8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011a8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011a90:	4293      	cmp	r3, r2
 8011a92:	d028      	beq.n	8011ae6 <_dtoa_r+0xae6>
 8011a94:	4649      	mov	r1, r9
 8011a96:	2300      	movs	r3, #0
 8011a98:	220a      	movs	r2, #10
 8011a9a:	4658      	mov	r0, fp
 8011a9c:	f000 f920 	bl	8011ce0 <__multadd>
 8011aa0:	42af      	cmp	r7, r5
 8011aa2:	4681      	mov	r9, r0
 8011aa4:	f04f 0300 	mov.w	r3, #0
 8011aa8:	f04f 020a 	mov.w	r2, #10
 8011aac:	4639      	mov	r1, r7
 8011aae:	4658      	mov	r0, fp
 8011ab0:	d107      	bne.n	8011ac2 <_dtoa_r+0xac2>
 8011ab2:	f000 f915 	bl	8011ce0 <__multadd>
 8011ab6:	4607      	mov	r7, r0
 8011ab8:	4605      	mov	r5, r0
 8011aba:	9b07      	ldr	r3, [sp, #28]
 8011abc:	3301      	adds	r3, #1
 8011abe:	9307      	str	r3, [sp, #28]
 8011ac0:	e774      	b.n	80119ac <_dtoa_r+0x9ac>
 8011ac2:	f000 f90d 	bl	8011ce0 <__multadd>
 8011ac6:	4629      	mov	r1, r5
 8011ac8:	4607      	mov	r7, r0
 8011aca:	2300      	movs	r3, #0
 8011acc:	220a      	movs	r2, #10
 8011ace:	4658      	mov	r0, fp
 8011ad0:	f000 f906 	bl	8011ce0 <__multadd>
 8011ad4:	4605      	mov	r5, r0
 8011ad6:	e7f0      	b.n	8011aba <_dtoa_r+0xaba>
 8011ad8:	9b00      	ldr	r3, [sp, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	bfcc      	ite	gt
 8011ade:	461e      	movgt	r6, r3
 8011ae0:	2601      	movle	r6, #1
 8011ae2:	4456      	add	r6, sl
 8011ae4:	2700      	movs	r7, #0
 8011ae6:	4649      	mov	r1, r9
 8011ae8:	2201      	movs	r2, #1
 8011aea:	4658      	mov	r0, fp
 8011aec:	f000 faa4 	bl	8012038 <__lshift>
 8011af0:	4621      	mov	r1, r4
 8011af2:	4681      	mov	r9, r0
 8011af4:	f000 fb0c 	bl	8012110 <__mcmp>
 8011af8:	2800      	cmp	r0, #0
 8011afa:	dcb0      	bgt.n	8011a5e <_dtoa_r+0xa5e>
 8011afc:	d102      	bne.n	8011b04 <_dtoa_r+0xb04>
 8011afe:	f018 0f01 	tst.w	r8, #1
 8011b02:	d1ac      	bne.n	8011a5e <_dtoa_r+0xa5e>
 8011b04:	4633      	mov	r3, r6
 8011b06:	461e      	mov	r6, r3
 8011b08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011b0c:	2a30      	cmp	r2, #48	@ 0x30
 8011b0e:	d0fa      	beq.n	8011b06 <_dtoa_r+0xb06>
 8011b10:	e5c2      	b.n	8011698 <_dtoa_r+0x698>
 8011b12:	459a      	cmp	sl, r3
 8011b14:	d1a4      	bne.n	8011a60 <_dtoa_r+0xa60>
 8011b16:	9b04      	ldr	r3, [sp, #16]
 8011b18:	3301      	adds	r3, #1
 8011b1a:	9304      	str	r3, [sp, #16]
 8011b1c:	2331      	movs	r3, #49	@ 0x31
 8011b1e:	f88a 3000 	strb.w	r3, [sl]
 8011b22:	e5b9      	b.n	8011698 <_dtoa_r+0x698>
 8011b24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011b26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011b84 <_dtoa_r+0xb84>
 8011b2a:	b11b      	cbz	r3, 8011b34 <_dtoa_r+0xb34>
 8011b2c:	f10a 0308 	add.w	r3, sl, #8
 8011b30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011b32:	6013      	str	r3, [r2, #0]
 8011b34:	4650      	mov	r0, sl
 8011b36:	b019      	add	sp, #100	@ 0x64
 8011b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b3e:	2b01      	cmp	r3, #1
 8011b40:	f77f ae37 	ble.w	80117b2 <_dtoa_r+0x7b2>
 8011b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b46:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b48:	2001      	movs	r0, #1
 8011b4a:	e655      	b.n	80117f8 <_dtoa_r+0x7f8>
 8011b4c:	9b00      	ldr	r3, [sp, #0]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	f77f aed6 	ble.w	8011900 <_dtoa_r+0x900>
 8011b54:	4656      	mov	r6, sl
 8011b56:	4621      	mov	r1, r4
 8011b58:	4648      	mov	r0, r9
 8011b5a:	f7ff f9c6 	bl	8010eea <quorem>
 8011b5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011b62:	f806 8b01 	strb.w	r8, [r6], #1
 8011b66:	9b00      	ldr	r3, [sp, #0]
 8011b68:	eba6 020a 	sub.w	r2, r6, sl
 8011b6c:	4293      	cmp	r3, r2
 8011b6e:	ddb3      	ble.n	8011ad8 <_dtoa_r+0xad8>
 8011b70:	4649      	mov	r1, r9
 8011b72:	2300      	movs	r3, #0
 8011b74:	220a      	movs	r2, #10
 8011b76:	4658      	mov	r0, fp
 8011b78:	f000 f8b2 	bl	8011ce0 <__multadd>
 8011b7c:	4681      	mov	r9, r0
 8011b7e:	e7ea      	b.n	8011b56 <_dtoa_r+0xb56>
 8011b80:	08018408 	.word	0x08018408
 8011b84:	0801838c 	.word	0x0801838c

08011b88 <_free_r>:
 8011b88:	b538      	push	{r3, r4, r5, lr}
 8011b8a:	4605      	mov	r5, r0
 8011b8c:	2900      	cmp	r1, #0
 8011b8e:	d041      	beq.n	8011c14 <_free_r+0x8c>
 8011b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b94:	1f0c      	subs	r4, r1, #4
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	bfb8      	it	lt
 8011b9a:	18e4      	addlt	r4, r4, r3
 8011b9c:	f7fe fb6a 	bl	8010274 <__malloc_lock>
 8011ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8011c18 <_free_r+0x90>)
 8011ba2:	6813      	ldr	r3, [r2, #0]
 8011ba4:	b933      	cbnz	r3, 8011bb4 <_free_r+0x2c>
 8011ba6:	6063      	str	r3, [r4, #4]
 8011ba8:	6014      	str	r4, [r2, #0]
 8011baa:	4628      	mov	r0, r5
 8011bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bb0:	f7fe bb66 	b.w	8010280 <__malloc_unlock>
 8011bb4:	42a3      	cmp	r3, r4
 8011bb6:	d908      	bls.n	8011bca <_free_r+0x42>
 8011bb8:	6820      	ldr	r0, [r4, #0]
 8011bba:	1821      	adds	r1, r4, r0
 8011bbc:	428b      	cmp	r3, r1
 8011bbe:	bf01      	itttt	eq
 8011bc0:	6819      	ldreq	r1, [r3, #0]
 8011bc2:	685b      	ldreq	r3, [r3, #4]
 8011bc4:	1809      	addeq	r1, r1, r0
 8011bc6:	6021      	streq	r1, [r4, #0]
 8011bc8:	e7ed      	b.n	8011ba6 <_free_r+0x1e>
 8011bca:	461a      	mov	r2, r3
 8011bcc:	685b      	ldr	r3, [r3, #4]
 8011bce:	b10b      	cbz	r3, 8011bd4 <_free_r+0x4c>
 8011bd0:	42a3      	cmp	r3, r4
 8011bd2:	d9fa      	bls.n	8011bca <_free_r+0x42>
 8011bd4:	6811      	ldr	r1, [r2, #0]
 8011bd6:	1850      	adds	r0, r2, r1
 8011bd8:	42a0      	cmp	r0, r4
 8011bda:	d10b      	bne.n	8011bf4 <_free_r+0x6c>
 8011bdc:	6820      	ldr	r0, [r4, #0]
 8011bde:	4401      	add	r1, r0
 8011be0:	1850      	adds	r0, r2, r1
 8011be2:	4283      	cmp	r3, r0
 8011be4:	6011      	str	r1, [r2, #0]
 8011be6:	d1e0      	bne.n	8011baa <_free_r+0x22>
 8011be8:	6818      	ldr	r0, [r3, #0]
 8011bea:	685b      	ldr	r3, [r3, #4]
 8011bec:	6053      	str	r3, [r2, #4]
 8011bee:	4408      	add	r0, r1
 8011bf0:	6010      	str	r0, [r2, #0]
 8011bf2:	e7da      	b.n	8011baa <_free_r+0x22>
 8011bf4:	d902      	bls.n	8011bfc <_free_r+0x74>
 8011bf6:	230c      	movs	r3, #12
 8011bf8:	602b      	str	r3, [r5, #0]
 8011bfa:	e7d6      	b.n	8011baa <_free_r+0x22>
 8011bfc:	6820      	ldr	r0, [r4, #0]
 8011bfe:	1821      	adds	r1, r4, r0
 8011c00:	428b      	cmp	r3, r1
 8011c02:	bf04      	itt	eq
 8011c04:	6819      	ldreq	r1, [r3, #0]
 8011c06:	685b      	ldreq	r3, [r3, #4]
 8011c08:	6063      	str	r3, [r4, #4]
 8011c0a:	bf04      	itt	eq
 8011c0c:	1809      	addeq	r1, r1, r0
 8011c0e:	6021      	streq	r1, [r4, #0]
 8011c10:	6054      	str	r4, [r2, #4]
 8011c12:	e7ca      	b.n	8011baa <_free_r+0x22>
 8011c14:	bd38      	pop	{r3, r4, r5, pc}
 8011c16:	bf00      	nop
 8011c18:	20000b40 	.word	0x20000b40

08011c1c <_Balloc>:
 8011c1c:	b570      	push	{r4, r5, r6, lr}
 8011c1e:	69c6      	ldr	r6, [r0, #28]
 8011c20:	4604      	mov	r4, r0
 8011c22:	460d      	mov	r5, r1
 8011c24:	b976      	cbnz	r6, 8011c44 <_Balloc+0x28>
 8011c26:	2010      	movs	r0, #16
 8011c28:	f7fe fa7a 	bl	8010120 <malloc>
 8011c2c:	4602      	mov	r2, r0
 8011c2e:	61e0      	str	r0, [r4, #28]
 8011c30:	b920      	cbnz	r0, 8011c3c <_Balloc+0x20>
 8011c32:	4b18      	ldr	r3, [pc, #96]	@ (8011c94 <_Balloc+0x78>)
 8011c34:	4818      	ldr	r0, [pc, #96]	@ (8011c98 <_Balloc+0x7c>)
 8011c36:	216b      	movs	r1, #107	@ 0x6b
 8011c38:	f000 ff66 	bl	8012b08 <__assert_func>
 8011c3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011c40:	6006      	str	r6, [r0, #0]
 8011c42:	60c6      	str	r6, [r0, #12]
 8011c44:	69e6      	ldr	r6, [r4, #28]
 8011c46:	68f3      	ldr	r3, [r6, #12]
 8011c48:	b183      	cbz	r3, 8011c6c <_Balloc+0x50>
 8011c4a:	69e3      	ldr	r3, [r4, #28]
 8011c4c:	68db      	ldr	r3, [r3, #12]
 8011c4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011c52:	b9b8      	cbnz	r0, 8011c84 <_Balloc+0x68>
 8011c54:	2101      	movs	r1, #1
 8011c56:	fa01 f605 	lsl.w	r6, r1, r5
 8011c5a:	1d72      	adds	r2, r6, #5
 8011c5c:	0092      	lsls	r2, r2, #2
 8011c5e:	4620      	mov	r0, r4
 8011c60:	f000 ff70 	bl	8012b44 <_calloc_r>
 8011c64:	b160      	cbz	r0, 8011c80 <_Balloc+0x64>
 8011c66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011c6a:	e00e      	b.n	8011c8a <_Balloc+0x6e>
 8011c6c:	2221      	movs	r2, #33	@ 0x21
 8011c6e:	2104      	movs	r1, #4
 8011c70:	4620      	mov	r0, r4
 8011c72:	f000 ff67 	bl	8012b44 <_calloc_r>
 8011c76:	69e3      	ldr	r3, [r4, #28]
 8011c78:	60f0      	str	r0, [r6, #12]
 8011c7a:	68db      	ldr	r3, [r3, #12]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d1e4      	bne.n	8011c4a <_Balloc+0x2e>
 8011c80:	2000      	movs	r0, #0
 8011c82:	bd70      	pop	{r4, r5, r6, pc}
 8011c84:	6802      	ldr	r2, [r0, #0]
 8011c86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011c90:	e7f7      	b.n	8011c82 <_Balloc+0x66>
 8011c92:	bf00      	nop
 8011c94:	08018399 	.word	0x08018399
 8011c98:	08018419 	.word	0x08018419

08011c9c <_Bfree>:
 8011c9c:	b570      	push	{r4, r5, r6, lr}
 8011c9e:	69c6      	ldr	r6, [r0, #28]
 8011ca0:	4605      	mov	r5, r0
 8011ca2:	460c      	mov	r4, r1
 8011ca4:	b976      	cbnz	r6, 8011cc4 <_Bfree+0x28>
 8011ca6:	2010      	movs	r0, #16
 8011ca8:	f7fe fa3a 	bl	8010120 <malloc>
 8011cac:	4602      	mov	r2, r0
 8011cae:	61e8      	str	r0, [r5, #28]
 8011cb0:	b920      	cbnz	r0, 8011cbc <_Bfree+0x20>
 8011cb2:	4b09      	ldr	r3, [pc, #36]	@ (8011cd8 <_Bfree+0x3c>)
 8011cb4:	4809      	ldr	r0, [pc, #36]	@ (8011cdc <_Bfree+0x40>)
 8011cb6:	218f      	movs	r1, #143	@ 0x8f
 8011cb8:	f000 ff26 	bl	8012b08 <__assert_func>
 8011cbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011cc0:	6006      	str	r6, [r0, #0]
 8011cc2:	60c6      	str	r6, [r0, #12]
 8011cc4:	b13c      	cbz	r4, 8011cd6 <_Bfree+0x3a>
 8011cc6:	69eb      	ldr	r3, [r5, #28]
 8011cc8:	6862      	ldr	r2, [r4, #4]
 8011cca:	68db      	ldr	r3, [r3, #12]
 8011ccc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011cd0:	6021      	str	r1, [r4, #0]
 8011cd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011cd6:	bd70      	pop	{r4, r5, r6, pc}
 8011cd8:	08018399 	.word	0x08018399
 8011cdc:	08018419 	.word	0x08018419

08011ce0 <__multadd>:
 8011ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ce4:	690d      	ldr	r5, [r1, #16]
 8011ce6:	4607      	mov	r7, r0
 8011ce8:	460c      	mov	r4, r1
 8011cea:	461e      	mov	r6, r3
 8011cec:	f101 0c14 	add.w	ip, r1, #20
 8011cf0:	2000      	movs	r0, #0
 8011cf2:	f8dc 3000 	ldr.w	r3, [ip]
 8011cf6:	b299      	uxth	r1, r3
 8011cf8:	fb02 6101 	mla	r1, r2, r1, r6
 8011cfc:	0c1e      	lsrs	r6, r3, #16
 8011cfe:	0c0b      	lsrs	r3, r1, #16
 8011d00:	fb02 3306 	mla	r3, r2, r6, r3
 8011d04:	b289      	uxth	r1, r1
 8011d06:	3001      	adds	r0, #1
 8011d08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011d0c:	4285      	cmp	r5, r0
 8011d0e:	f84c 1b04 	str.w	r1, [ip], #4
 8011d12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011d16:	dcec      	bgt.n	8011cf2 <__multadd+0x12>
 8011d18:	b30e      	cbz	r6, 8011d5e <__multadd+0x7e>
 8011d1a:	68a3      	ldr	r3, [r4, #8]
 8011d1c:	42ab      	cmp	r3, r5
 8011d1e:	dc19      	bgt.n	8011d54 <__multadd+0x74>
 8011d20:	6861      	ldr	r1, [r4, #4]
 8011d22:	4638      	mov	r0, r7
 8011d24:	3101      	adds	r1, #1
 8011d26:	f7ff ff79 	bl	8011c1c <_Balloc>
 8011d2a:	4680      	mov	r8, r0
 8011d2c:	b928      	cbnz	r0, 8011d3a <__multadd+0x5a>
 8011d2e:	4602      	mov	r2, r0
 8011d30:	4b0c      	ldr	r3, [pc, #48]	@ (8011d64 <__multadd+0x84>)
 8011d32:	480d      	ldr	r0, [pc, #52]	@ (8011d68 <__multadd+0x88>)
 8011d34:	21ba      	movs	r1, #186	@ 0xba
 8011d36:	f000 fee7 	bl	8012b08 <__assert_func>
 8011d3a:	6922      	ldr	r2, [r4, #16]
 8011d3c:	3202      	adds	r2, #2
 8011d3e:	f104 010c 	add.w	r1, r4, #12
 8011d42:	0092      	lsls	r2, r2, #2
 8011d44:	300c      	adds	r0, #12
 8011d46:	f7ff f8c2 	bl	8010ece <memcpy>
 8011d4a:	4621      	mov	r1, r4
 8011d4c:	4638      	mov	r0, r7
 8011d4e:	f7ff ffa5 	bl	8011c9c <_Bfree>
 8011d52:	4644      	mov	r4, r8
 8011d54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011d58:	3501      	adds	r5, #1
 8011d5a:	615e      	str	r6, [r3, #20]
 8011d5c:	6125      	str	r5, [r4, #16]
 8011d5e:	4620      	mov	r0, r4
 8011d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d64:	08018408 	.word	0x08018408
 8011d68:	08018419 	.word	0x08018419

08011d6c <__hi0bits>:
 8011d6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011d70:	4603      	mov	r3, r0
 8011d72:	bf36      	itet	cc
 8011d74:	0403      	lslcc	r3, r0, #16
 8011d76:	2000      	movcs	r0, #0
 8011d78:	2010      	movcc	r0, #16
 8011d7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011d7e:	bf3c      	itt	cc
 8011d80:	021b      	lslcc	r3, r3, #8
 8011d82:	3008      	addcc	r0, #8
 8011d84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011d88:	bf3c      	itt	cc
 8011d8a:	011b      	lslcc	r3, r3, #4
 8011d8c:	3004      	addcc	r0, #4
 8011d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011d92:	bf3c      	itt	cc
 8011d94:	009b      	lslcc	r3, r3, #2
 8011d96:	3002      	addcc	r0, #2
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	db05      	blt.n	8011da8 <__hi0bits+0x3c>
 8011d9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011da0:	f100 0001 	add.w	r0, r0, #1
 8011da4:	bf08      	it	eq
 8011da6:	2020      	moveq	r0, #32
 8011da8:	4770      	bx	lr

08011daa <__lo0bits>:
 8011daa:	6803      	ldr	r3, [r0, #0]
 8011dac:	4602      	mov	r2, r0
 8011dae:	f013 0007 	ands.w	r0, r3, #7
 8011db2:	d00b      	beq.n	8011dcc <__lo0bits+0x22>
 8011db4:	07d9      	lsls	r1, r3, #31
 8011db6:	d421      	bmi.n	8011dfc <__lo0bits+0x52>
 8011db8:	0798      	lsls	r0, r3, #30
 8011dba:	bf49      	itett	mi
 8011dbc:	085b      	lsrmi	r3, r3, #1
 8011dbe:	089b      	lsrpl	r3, r3, #2
 8011dc0:	2001      	movmi	r0, #1
 8011dc2:	6013      	strmi	r3, [r2, #0]
 8011dc4:	bf5c      	itt	pl
 8011dc6:	6013      	strpl	r3, [r2, #0]
 8011dc8:	2002      	movpl	r0, #2
 8011dca:	4770      	bx	lr
 8011dcc:	b299      	uxth	r1, r3
 8011dce:	b909      	cbnz	r1, 8011dd4 <__lo0bits+0x2a>
 8011dd0:	0c1b      	lsrs	r3, r3, #16
 8011dd2:	2010      	movs	r0, #16
 8011dd4:	b2d9      	uxtb	r1, r3
 8011dd6:	b909      	cbnz	r1, 8011ddc <__lo0bits+0x32>
 8011dd8:	3008      	adds	r0, #8
 8011dda:	0a1b      	lsrs	r3, r3, #8
 8011ddc:	0719      	lsls	r1, r3, #28
 8011dde:	bf04      	itt	eq
 8011de0:	091b      	lsreq	r3, r3, #4
 8011de2:	3004      	addeq	r0, #4
 8011de4:	0799      	lsls	r1, r3, #30
 8011de6:	bf04      	itt	eq
 8011de8:	089b      	lsreq	r3, r3, #2
 8011dea:	3002      	addeq	r0, #2
 8011dec:	07d9      	lsls	r1, r3, #31
 8011dee:	d403      	bmi.n	8011df8 <__lo0bits+0x4e>
 8011df0:	085b      	lsrs	r3, r3, #1
 8011df2:	f100 0001 	add.w	r0, r0, #1
 8011df6:	d003      	beq.n	8011e00 <__lo0bits+0x56>
 8011df8:	6013      	str	r3, [r2, #0]
 8011dfa:	4770      	bx	lr
 8011dfc:	2000      	movs	r0, #0
 8011dfe:	4770      	bx	lr
 8011e00:	2020      	movs	r0, #32
 8011e02:	4770      	bx	lr

08011e04 <__i2b>:
 8011e04:	b510      	push	{r4, lr}
 8011e06:	460c      	mov	r4, r1
 8011e08:	2101      	movs	r1, #1
 8011e0a:	f7ff ff07 	bl	8011c1c <_Balloc>
 8011e0e:	4602      	mov	r2, r0
 8011e10:	b928      	cbnz	r0, 8011e1e <__i2b+0x1a>
 8011e12:	4b05      	ldr	r3, [pc, #20]	@ (8011e28 <__i2b+0x24>)
 8011e14:	4805      	ldr	r0, [pc, #20]	@ (8011e2c <__i2b+0x28>)
 8011e16:	f240 1145 	movw	r1, #325	@ 0x145
 8011e1a:	f000 fe75 	bl	8012b08 <__assert_func>
 8011e1e:	2301      	movs	r3, #1
 8011e20:	6144      	str	r4, [r0, #20]
 8011e22:	6103      	str	r3, [r0, #16]
 8011e24:	bd10      	pop	{r4, pc}
 8011e26:	bf00      	nop
 8011e28:	08018408 	.word	0x08018408
 8011e2c:	08018419 	.word	0x08018419

08011e30 <__multiply>:
 8011e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e34:	4614      	mov	r4, r2
 8011e36:	690a      	ldr	r2, [r1, #16]
 8011e38:	6923      	ldr	r3, [r4, #16]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	bfa8      	it	ge
 8011e3e:	4623      	movge	r3, r4
 8011e40:	460f      	mov	r7, r1
 8011e42:	bfa4      	itt	ge
 8011e44:	460c      	movge	r4, r1
 8011e46:	461f      	movge	r7, r3
 8011e48:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011e4c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011e50:	68a3      	ldr	r3, [r4, #8]
 8011e52:	6861      	ldr	r1, [r4, #4]
 8011e54:	eb0a 0609 	add.w	r6, sl, r9
 8011e58:	42b3      	cmp	r3, r6
 8011e5a:	b085      	sub	sp, #20
 8011e5c:	bfb8      	it	lt
 8011e5e:	3101      	addlt	r1, #1
 8011e60:	f7ff fedc 	bl	8011c1c <_Balloc>
 8011e64:	b930      	cbnz	r0, 8011e74 <__multiply+0x44>
 8011e66:	4602      	mov	r2, r0
 8011e68:	4b44      	ldr	r3, [pc, #272]	@ (8011f7c <__multiply+0x14c>)
 8011e6a:	4845      	ldr	r0, [pc, #276]	@ (8011f80 <__multiply+0x150>)
 8011e6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011e70:	f000 fe4a 	bl	8012b08 <__assert_func>
 8011e74:	f100 0514 	add.w	r5, r0, #20
 8011e78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011e7c:	462b      	mov	r3, r5
 8011e7e:	2200      	movs	r2, #0
 8011e80:	4543      	cmp	r3, r8
 8011e82:	d321      	bcc.n	8011ec8 <__multiply+0x98>
 8011e84:	f107 0114 	add.w	r1, r7, #20
 8011e88:	f104 0214 	add.w	r2, r4, #20
 8011e8c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011e90:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011e94:	9302      	str	r3, [sp, #8]
 8011e96:	1b13      	subs	r3, r2, r4
 8011e98:	3b15      	subs	r3, #21
 8011e9a:	f023 0303 	bic.w	r3, r3, #3
 8011e9e:	3304      	adds	r3, #4
 8011ea0:	f104 0715 	add.w	r7, r4, #21
 8011ea4:	42ba      	cmp	r2, r7
 8011ea6:	bf38      	it	cc
 8011ea8:	2304      	movcc	r3, #4
 8011eaa:	9301      	str	r3, [sp, #4]
 8011eac:	9b02      	ldr	r3, [sp, #8]
 8011eae:	9103      	str	r1, [sp, #12]
 8011eb0:	428b      	cmp	r3, r1
 8011eb2:	d80c      	bhi.n	8011ece <__multiply+0x9e>
 8011eb4:	2e00      	cmp	r6, #0
 8011eb6:	dd03      	ble.n	8011ec0 <__multiply+0x90>
 8011eb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d05b      	beq.n	8011f78 <__multiply+0x148>
 8011ec0:	6106      	str	r6, [r0, #16]
 8011ec2:	b005      	add	sp, #20
 8011ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec8:	f843 2b04 	str.w	r2, [r3], #4
 8011ecc:	e7d8      	b.n	8011e80 <__multiply+0x50>
 8011ece:	f8b1 a000 	ldrh.w	sl, [r1]
 8011ed2:	f1ba 0f00 	cmp.w	sl, #0
 8011ed6:	d024      	beq.n	8011f22 <__multiply+0xf2>
 8011ed8:	f104 0e14 	add.w	lr, r4, #20
 8011edc:	46a9      	mov	r9, r5
 8011ede:	f04f 0c00 	mov.w	ip, #0
 8011ee2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011ee6:	f8d9 3000 	ldr.w	r3, [r9]
 8011eea:	fa1f fb87 	uxth.w	fp, r7
 8011eee:	b29b      	uxth	r3, r3
 8011ef0:	fb0a 330b 	mla	r3, sl, fp, r3
 8011ef4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011ef8:	f8d9 7000 	ldr.w	r7, [r9]
 8011efc:	4463      	add	r3, ip
 8011efe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011f02:	fb0a c70b 	mla	r7, sl, fp, ip
 8011f06:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011f0a:	b29b      	uxth	r3, r3
 8011f0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011f10:	4572      	cmp	r2, lr
 8011f12:	f849 3b04 	str.w	r3, [r9], #4
 8011f16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011f1a:	d8e2      	bhi.n	8011ee2 <__multiply+0xb2>
 8011f1c:	9b01      	ldr	r3, [sp, #4]
 8011f1e:	f845 c003 	str.w	ip, [r5, r3]
 8011f22:	9b03      	ldr	r3, [sp, #12]
 8011f24:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011f28:	3104      	adds	r1, #4
 8011f2a:	f1b9 0f00 	cmp.w	r9, #0
 8011f2e:	d021      	beq.n	8011f74 <__multiply+0x144>
 8011f30:	682b      	ldr	r3, [r5, #0]
 8011f32:	f104 0c14 	add.w	ip, r4, #20
 8011f36:	46ae      	mov	lr, r5
 8011f38:	f04f 0a00 	mov.w	sl, #0
 8011f3c:	f8bc b000 	ldrh.w	fp, [ip]
 8011f40:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011f44:	fb09 770b 	mla	r7, r9, fp, r7
 8011f48:	4457      	add	r7, sl
 8011f4a:	b29b      	uxth	r3, r3
 8011f4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011f50:	f84e 3b04 	str.w	r3, [lr], #4
 8011f54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011f58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011f5c:	f8be 3000 	ldrh.w	r3, [lr]
 8011f60:	fb09 330a 	mla	r3, r9, sl, r3
 8011f64:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011f68:	4562      	cmp	r2, ip
 8011f6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011f6e:	d8e5      	bhi.n	8011f3c <__multiply+0x10c>
 8011f70:	9f01      	ldr	r7, [sp, #4]
 8011f72:	51eb      	str	r3, [r5, r7]
 8011f74:	3504      	adds	r5, #4
 8011f76:	e799      	b.n	8011eac <__multiply+0x7c>
 8011f78:	3e01      	subs	r6, #1
 8011f7a:	e79b      	b.n	8011eb4 <__multiply+0x84>
 8011f7c:	08018408 	.word	0x08018408
 8011f80:	08018419 	.word	0x08018419

08011f84 <__pow5mult>:
 8011f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f88:	4615      	mov	r5, r2
 8011f8a:	f012 0203 	ands.w	r2, r2, #3
 8011f8e:	4607      	mov	r7, r0
 8011f90:	460e      	mov	r6, r1
 8011f92:	d007      	beq.n	8011fa4 <__pow5mult+0x20>
 8011f94:	4c25      	ldr	r4, [pc, #148]	@ (801202c <__pow5mult+0xa8>)
 8011f96:	3a01      	subs	r2, #1
 8011f98:	2300      	movs	r3, #0
 8011f9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011f9e:	f7ff fe9f 	bl	8011ce0 <__multadd>
 8011fa2:	4606      	mov	r6, r0
 8011fa4:	10ad      	asrs	r5, r5, #2
 8011fa6:	d03d      	beq.n	8012024 <__pow5mult+0xa0>
 8011fa8:	69fc      	ldr	r4, [r7, #28]
 8011faa:	b97c      	cbnz	r4, 8011fcc <__pow5mult+0x48>
 8011fac:	2010      	movs	r0, #16
 8011fae:	f7fe f8b7 	bl	8010120 <malloc>
 8011fb2:	4602      	mov	r2, r0
 8011fb4:	61f8      	str	r0, [r7, #28]
 8011fb6:	b928      	cbnz	r0, 8011fc4 <__pow5mult+0x40>
 8011fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8012030 <__pow5mult+0xac>)
 8011fba:	481e      	ldr	r0, [pc, #120]	@ (8012034 <__pow5mult+0xb0>)
 8011fbc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011fc0:	f000 fda2 	bl	8012b08 <__assert_func>
 8011fc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011fc8:	6004      	str	r4, [r0, #0]
 8011fca:	60c4      	str	r4, [r0, #12]
 8011fcc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011fd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011fd4:	b94c      	cbnz	r4, 8011fea <__pow5mult+0x66>
 8011fd6:	f240 2171 	movw	r1, #625	@ 0x271
 8011fda:	4638      	mov	r0, r7
 8011fdc:	f7ff ff12 	bl	8011e04 <__i2b>
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	f8c8 0008 	str.w	r0, [r8, #8]
 8011fe6:	4604      	mov	r4, r0
 8011fe8:	6003      	str	r3, [r0, #0]
 8011fea:	f04f 0900 	mov.w	r9, #0
 8011fee:	07eb      	lsls	r3, r5, #31
 8011ff0:	d50a      	bpl.n	8012008 <__pow5mult+0x84>
 8011ff2:	4631      	mov	r1, r6
 8011ff4:	4622      	mov	r2, r4
 8011ff6:	4638      	mov	r0, r7
 8011ff8:	f7ff ff1a 	bl	8011e30 <__multiply>
 8011ffc:	4631      	mov	r1, r6
 8011ffe:	4680      	mov	r8, r0
 8012000:	4638      	mov	r0, r7
 8012002:	f7ff fe4b 	bl	8011c9c <_Bfree>
 8012006:	4646      	mov	r6, r8
 8012008:	106d      	asrs	r5, r5, #1
 801200a:	d00b      	beq.n	8012024 <__pow5mult+0xa0>
 801200c:	6820      	ldr	r0, [r4, #0]
 801200e:	b938      	cbnz	r0, 8012020 <__pow5mult+0x9c>
 8012010:	4622      	mov	r2, r4
 8012012:	4621      	mov	r1, r4
 8012014:	4638      	mov	r0, r7
 8012016:	f7ff ff0b 	bl	8011e30 <__multiply>
 801201a:	6020      	str	r0, [r4, #0]
 801201c:	f8c0 9000 	str.w	r9, [r0]
 8012020:	4604      	mov	r4, r0
 8012022:	e7e4      	b.n	8011fee <__pow5mult+0x6a>
 8012024:	4630      	mov	r0, r6
 8012026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801202a:	bf00      	nop
 801202c:	08018474 	.word	0x08018474
 8012030:	08018399 	.word	0x08018399
 8012034:	08018419 	.word	0x08018419

08012038 <__lshift>:
 8012038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801203c:	460c      	mov	r4, r1
 801203e:	6849      	ldr	r1, [r1, #4]
 8012040:	6923      	ldr	r3, [r4, #16]
 8012042:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012046:	68a3      	ldr	r3, [r4, #8]
 8012048:	4607      	mov	r7, r0
 801204a:	4691      	mov	r9, r2
 801204c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012050:	f108 0601 	add.w	r6, r8, #1
 8012054:	42b3      	cmp	r3, r6
 8012056:	db0b      	blt.n	8012070 <__lshift+0x38>
 8012058:	4638      	mov	r0, r7
 801205a:	f7ff fddf 	bl	8011c1c <_Balloc>
 801205e:	4605      	mov	r5, r0
 8012060:	b948      	cbnz	r0, 8012076 <__lshift+0x3e>
 8012062:	4602      	mov	r2, r0
 8012064:	4b28      	ldr	r3, [pc, #160]	@ (8012108 <__lshift+0xd0>)
 8012066:	4829      	ldr	r0, [pc, #164]	@ (801210c <__lshift+0xd4>)
 8012068:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801206c:	f000 fd4c 	bl	8012b08 <__assert_func>
 8012070:	3101      	adds	r1, #1
 8012072:	005b      	lsls	r3, r3, #1
 8012074:	e7ee      	b.n	8012054 <__lshift+0x1c>
 8012076:	2300      	movs	r3, #0
 8012078:	f100 0114 	add.w	r1, r0, #20
 801207c:	f100 0210 	add.w	r2, r0, #16
 8012080:	4618      	mov	r0, r3
 8012082:	4553      	cmp	r3, sl
 8012084:	db33      	blt.n	80120ee <__lshift+0xb6>
 8012086:	6920      	ldr	r0, [r4, #16]
 8012088:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801208c:	f104 0314 	add.w	r3, r4, #20
 8012090:	f019 091f 	ands.w	r9, r9, #31
 8012094:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012098:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801209c:	d02b      	beq.n	80120f6 <__lshift+0xbe>
 801209e:	f1c9 0e20 	rsb	lr, r9, #32
 80120a2:	468a      	mov	sl, r1
 80120a4:	2200      	movs	r2, #0
 80120a6:	6818      	ldr	r0, [r3, #0]
 80120a8:	fa00 f009 	lsl.w	r0, r0, r9
 80120ac:	4310      	orrs	r0, r2
 80120ae:	f84a 0b04 	str.w	r0, [sl], #4
 80120b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80120b6:	459c      	cmp	ip, r3
 80120b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80120bc:	d8f3      	bhi.n	80120a6 <__lshift+0x6e>
 80120be:	ebac 0304 	sub.w	r3, ip, r4
 80120c2:	3b15      	subs	r3, #21
 80120c4:	f023 0303 	bic.w	r3, r3, #3
 80120c8:	3304      	adds	r3, #4
 80120ca:	f104 0015 	add.w	r0, r4, #21
 80120ce:	4584      	cmp	ip, r0
 80120d0:	bf38      	it	cc
 80120d2:	2304      	movcc	r3, #4
 80120d4:	50ca      	str	r2, [r1, r3]
 80120d6:	b10a      	cbz	r2, 80120dc <__lshift+0xa4>
 80120d8:	f108 0602 	add.w	r6, r8, #2
 80120dc:	3e01      	subs	r6, #1
 80120de:	4638      	mov	r0, r7
 80120e0:	612e      	str	r6, [r5, #16]
 80120e2:	4621      	mov	r1, r4
 80120e4:	f7ff fdda 	bl	8011c9c <_Bfree>
 80120e8:	4628      	mov	r0, r5
 80120ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80120f2:	3301      	adds	r3, #1
 80120f4:	e7c5      	b.n	8012082 <__lshift+0x4a>
 80120f6:	3904      	subs	r1, #4
 80120f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80120fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8012100:	459c      	cmp	ip, r3
 8012102:	d8f9      	bhi.n	80120f8 <__lshift+0xc0>
 8012104:	e7ea      	b.n	80120dc <__lshift+0xa4>
 8012106:	bf00      	nop
 8012108:	08018408 	.word	0x08018408
 801210c:	08018419 	.word	0x08018419

08012110 <__mcmp>:
 8012110:	690a      	ldr	r2, [r1, #16]
 8012112:	4603      	mov	r3, r0
 8012114:	6900      	ldr	r0, [r0, #16]
 8012116:	1a80      	subs	r0, r0, r2
 8012118:	b530      	push	{r4, r5, lr}
 801211a:	d10e      	bne.n	801213a <__mcmp+0x2a>
 801211c:	3314      	adds	r3, #20
 801211e:	3114      	adds	r1, #20
 8012120:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012124:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012128:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801212c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012130:	4295      	cmp	r5, r2
 8012132:	d003      	beq.n	801213c <__mcmp+0x2c>
 8012134:	d205      	bcs.n	8012142 <__mcmp+0x32>
 8012136:	f04f 30ff 	mov.w	r0, #4294967295
 801213a:	bd30      	pop	{r4, r5, pc}
 801213c:	42a3      	cmp	r3, r4
 801213e:	d3f3      	bcc.n	8012128 <__mcmp+0x18>
 8012140:	e7fb      	b.n	801213a <__mcmp+0x2a>
 8012142:	2001      	movs	r0, #1
 8012144:	e7f9      	b.n	801213a <__mcmp+0x2a>
	...

08012148 <__mdiff>:
 8012148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801214c:	4689      	mov	r9, r1
 801214e:	4606      	mov	r6, r0
 8012150:	4611      	mov	r1, r2
 8012152:	4648      	mov	r0, r9
 8012154:	4614      	mov	r4, r2
 8012156:	f7ff ffdb 	bl	8012110 <__mcmp>
 801215a:	1e05      	subs	r5, r0, #0
 801215c:	d112      	bne.n	8012184 <__mdiff+0x3c>
 801215e:	4629      	mov	r1, r5
 8012160:	4630      	mov	r0, r6
 8012162:	f7ff fd5b 	bl	8011c1c <_Balloc>
 8012166:	4602      	mov	r2, r0
 8012168:	b928      	cbnz	r0, 8012176 <__mdiff+0x2e>
 801216a:	4b3f      	ldr	r3, [pc, #252]	@ (8012268 <__mdiff+0x120>)
 801216c:	f240 2137 	movw	r1, #567	@ 0x237
 8012170:	483e      	ldr	r0, [pc, #248]	@ (801226c <__mdiff+0x124>)
 8012172:	f000 fcc9 	bl	8012b08 <__assert_func>
 8012176:	2301      	movs	r3, #1
 8012178:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801217c:	4610      	mov	r0, r2
 801217e:	b003      	add	sp, #12
 8012180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012184:	bfbc      	itt	lt
 8012186:	464b      	movlt	r3, r9
 8012188:	46a1      	movlt	r9, r4
 801218a:	4630      	mov	r0, r6
 801218c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012190:	bfba      	itte	lt
 8012192:	461c      	movlt	r4, r3
 8012194:	2501      	movlt	r5, #1
 8012196:	2500      	movge	r5, #0
 8012198:	f7ff fd40 	bl	8011c1c <_Balloc>
 801219c:	4602      	mov	r2, r0
 801219e:	b918      	cbnz	r0, 80121a8 <__mdiff+0x60>
 80121a0:	4b31      	ldr	r3, [pc, #196]	@ (8012268 <__mdiff+0x120>)
 80121a2:	f240 2145 	movw	r1, #581	@ 0x245
 80121a6:	e7e3      	b.n	8012170 <__mdiff+0x28>
 80121a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80121ac:	6926      	ldr	r6, [r4, #16]
 80121ae:	60c5      	str	r5, [r0, #12]
 80121b0:	f109 0310 	add.w	r3, r9, #16
 80121b4:	f109 0514 	add.w	r5, r9, #20
 80121b8:	f104 0e14 	add.w	lr, r4, #20
 80121bc:	f100 0b14 	add.w	fp, r0, #20
 80121c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80121c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80121c8:	9301      	str	r3, [sp, #4]
 80121ca:	46d9      	mov	r9, fp
 80121cc:	f04f 0c00 	mov.w	ip, #0
 80121d0:	9b01      	ldr	r3, [sp, #4]
 80121d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80121d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80121da:	9301      	str	r3, [sp, #4]
 80121dc:	fa1f f38a 	uxth.w	r3, sl
 80121e0:	4619      	mov	r1, r3
 80121e2:	b283      	uxth	r3, r0
 80121e4:	1acb      	subs	r3, r1, r3
 80121e6:	0c00      	lsrs	r0, r0, #16
 80121e8:	4463      	add	r3, ip
 80121ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80121ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80121f2:	b29b      	uxth	r3, r3
 80121f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80121f8:	4576      	cmp	r6, lr
 80121fa:	f849 3b04 	str.w	r3, [r9], #4
 80121fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012202:	d8e5      	bhi.n	80121d0 <__mdiff+0x88>
 8012204:	1b33      	subs	r3, r6, r4
 8012206:	3b15      	subs	r3, #21
 8012208:	f023 0303 	bic.w	r3, r3, #3
 801220c:	3415      	adds	r4, #21
 801220e:	3304      	adds	r3, #4
 8012210:	42a6      	cmp	r6, r4
 8012212:	bf38      	it	cc
 8012214:	2304      	movcc	r3, #4
 8012216:	441d      	add	r5, r3
 8012218:	445b      	add	r3, fp
 801221a:	461e      	mov	r6, r3
 801221c:	462c      	mov	r4, r5
 801221e:	4544      	cmp	r4, r8
 8012220:	d30e      	bcc.n	8012240 <__mdiff+0xf8>
 8012222:	f108 0103 	add.w	r1, r8, #3
 8012226:	1b49      	subs	r1, r1, r5
 8012228:	f021 0103 	bic.w	r1, r1, #3
 801222c:	3d03      	subs	r5, #3
 801222e:	45a8      	cmp	r8, r5
 8012230:	bf38      	it	cc
 8012232:	2100      	movcc	r1, #0
 8012234:	440b      	add	r3, r1
 8012236:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801223a:	b191      	cbz	r1, 8012262 <__mdiff+0x11a>
 801223c:	6117      	str	r7, [r2, #16]
 801223e:	e79d      	b.n	801217c <__mdiff+0x34>
 8012240:	f854 1b04 	ldr.w	r1, [r4], #4
 8012244:	46e6      	mov	lr, ip
 8012246:	0c08      	lsrs	r0, r1, #16
 8012248:	fa1c fc81 	uxtah	ip, ip, r1
 801224c:	4471      	add	r1, lr
 801224e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012252:	b289      	uxth	r1, r1
 8012254:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012258:	f846 1b04 	str.w	r1, [r6], #4
 801225c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012260:	e7dd      	b.n	801221e <__mdiff+0xd6>
 8012262:	3f01      	subs	r7, #1
 8012264:	e7e7      	b.n	8012236 <__mdiff+0xee>
 8012266:	bf00      	nop
 8012268:	08018408 	.word	0x08018408
 801226c:	08018419 	.word	0x08018419

08012270 <__d2b>:
 8012270:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012274:	460f      	mov	r7, r1
 8012276:	2101      	movs	r1, #1
 8012278:	ec59 8b10 	vmov	r8, r9, d0
 801227c:	4616      	mov	r6, r2
 801227e:	f7ff fccd 	bl	8011c1c <_Balloc>
 8012282:	4604      	mov	r4, r0
 8012284:	b930      	cbnz	r0, 8012294 <__d2b+0x24>
 8012286:	4602      	mov	r2, r0
 8012288:	4b23      	ldr	r3, [pc, #140]	@ (8012318 <__d2b+0xa8>)
 801228a:	4824      	ldr	r0, [pc, #144]	@ (801231c <__d2b+0xac>)
 801228c:	f240 310f 	movw	r1, #783	@ 0x30f
 8012290:	f000 fc3a 	bl	8012b08 <__assert_func>
 8012294:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012298:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801229c:	b10d      	cbz	r5, 80122a2 <__d2b+0x32>
 801229e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80122a2:	9301      	str	r3, [sp, #4]
 80122a4:	f1b8 0300 	subs.w	r3, r8, #0
 80122a8:	d023      	beq.n	80122f2 <__d2b+0x82>
 80122aa:	4668      	mov	r0, sp
 80122ac:	9300      	str	r3, [sp, #0]
 80122ae:	f7ff fd7c 	bl	8011daa <__lo0bits>
 80122b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80122b6:	b1d0      	cbz	r0, 80122ee <__d2b+0x7e>
 80122b8:	f1c0 0320 	rsb	r3, r0, #32
 80122bc:	fa02 f303 	lsl.w	r3, r2, r3
 80122c0:	430b      	orrs	r3, r1
 80122c2:	40c2      	lsrs	r2, r0
 80122c4:	6163      	str	r3, [r4, #20]
 80122c6:	9201      	str	r2, [sp, #4]
 80122c8:	9b01      	ldr	r3, [sp, #4]
 80122ca:	61a3      	str	r3, [r4, #24]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	bf0c      	ite	eq
 80122d0:	2201      	moveq	r2, #1
 80122d2:	2202      	movne	r2, #2
 80122d4:	6122      	str	r2, [r4, #16]
 80122d6:	b1a5      	cbz	r5, 8012302 <__d2b+0x92>
 80122d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80122dc:	4405      	add	r5, r0
 80122de:	603d      	str	r5, [r7, #0]
 80122e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80122e4:	6030      	str	r0, [r6, #0]
 80122e6:	4620      	mov	r0, r4
 80122e8:	b003      	add	sp, #12
 80122ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122ee:	6161      	str	r1, [r4, #20]
 80122f0:	e7ea      	b.n	80122c8 <__d2b+0x58>
 80122f2:	a801      	add	r0, sp, #4
 80122f4:	f7ff fd59 	bl	8011daa <__lo0bits>
 80122f8:	9b01      	ldr	r3, [sp, #4]
 80122fa:	6163      	str	r3, [r4, #20]
 80122fc:	3020      	adds	r0, #32
 80122fe:	2201      	movs	r2, #1
 8012300:	e7e8      	b.n	80122d4 <__d2b+0x64>
 8012302:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012306:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801230a:	6038      	str	r0, [r7, #0]
 801230c:	6918      	ldr	r0, [r3, #16]
 801230e:	f7ff fd2d 	bl	8011d6c <__hi0bits>
 8012312:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012316:	e7e5      	b.n	80122e4 <__d2b+0x74>
 8012318:	08018408 	.word	0x08018408
 801231c:	08018419 	.word	0x08018419

08012320 <__ssputs_r>:
 8012320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012324:	688e      	ldr	r6, [r1, #8]
 8012326:	461f      	mov	r7, r3
 8012328:	42be      	cmp	r6, r7
 801232a:	680b      	ldr	r3, [r1, #0]
 801232c:	4682      	mov	sl, r0
 801232e:	460c      	mov	r4, r1
 8012330:	4690      	mov	r8, r2
 8012332:	d82d      	bhi.n	8012390 <__ssputs_r+0x70>
 8012334:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012338:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801233c:	d026      	beq.n	801238c <__ssputs_r+0x6c>
 801233e:	6965      	ldr	r5, [r4, #20]
 8012340:	6909      	ldr	r1, [r1, #16]
 8012342:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012346:	eba3 0901 	sub.w	r9, r3, r1
 801234a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801234e:	1c7b      	adds	r3, r7, #1
 8012350:	444b      	add	r3, r9
 8012352:	106d      	asrs	r5, r5, #1
 8012354:	429d      	cmp	r5, r3
 8012356:	bf38      	it	cc
 8012358:	461d      	movcc	r5, r3
 801235a:	0553      	lsls	r3, r2, #21
 801235c:	d527      	bpl.n	80123ae <__ssputs_r+0x8e>
 801235e:	4629      	mov	r1, r5
 8012360:	f7fd ff08 	bl	8010174 <_malloc_r>
 8012364:	4606      	mov	r6, r0
 8012366:	b360      	cbz	r0, 80123c2 <__ssputs_r+0xa2>
 8012368:	6921      	ldr	r1, [r4, #16]
 801236a:	464a      	mov	r2, r9
 801236c:	f7fe fdaf 	bl	8010ece <memcpy>
 8012370:	89a3      	ldrh	r3, [r4, #12]
 8012372:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801237a:	81a3      	strh	r3, [r4, #12]
 801237c:	6126      	str	r6, [r4, #16]
 801237e:	6165      	str	r5, [r4, #20]
 8012380:	444e      	add	r6, r9
 8012382:	eba5 0509 	sub.w	r5, r5, r9
 8012386:	6026      	str	r6, [r4, #0]
 8012388:	60a5      	str	r5, [r4, #8]
 801238a:	463e      	mov	r6, r7
 801238c:	42be      	cmp	r6, r7
 801238e:	d900      	bls.n	8012392 <__ssputs_r+0x72>
 8012390:	463e      	mov	r6, r7
 8012392:	6820      	ldr	r0, [r4, #0]
 8012394:	4632      	mov	r2, r6
 8012396:	4641      	mov	r1, r8
 8012398:	f000 fb9c 	bl	8012ad4 <memmove>
 801239c:	68a3      	ldr	r3, [r4, #8]
 801239e:	1b9b      	subs	r3, r3, r6
 80123a0:	60a3      	str	r3, [r4, #8]
 80123a2:	6823      	ldr	r3, [r4, #0]
 80123a4:	4433      	add	r3, r6
 80123a6:	6023      	str	r3, [r4, #0]
 80123a8:	2000      	movs	r0, #0
 80123aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123ae:	462a      	mov	r2, r5
 80123b0:	f000 fbee 	bl	8012b90 <_realloc_r>
 80123b4:	4606      	mov	r6, r0
 80123b6:	2800      	cmp	r0, #0
 80123b8:	d1e0      	bne.n	801237c <__ssputs_r+0x5c>
 80123ba:	6921      	ldr	r1, [r4, #16]
 80123bc:	4650      	mov	r0, sl
 80123be:	f7ff fbe3 	bl	8011b88 <_free_r>
 80123c2:	230c      	movs	r3, #12
 80123c4:	f8ca 3000 	str.w	r3, [sl]
 80123c8:	89a3      	ldrh	r3, [r4, #12]
 80123ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123ce:	81a3      	strh	r3, [r4, #12]
 80123d0:	f04f 30ff 	mov.w	r0, #4294967295
 80123d4:	e7e9      	b.n	80123aa <__ssputs_r+0x8a>
	...

080123d8 <_svfiprintf_r>:
 80123d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123dc:	4698      	mov	r8, r3
 80123de:	898b      	ldrh	r3, [r1, #12]
 80123e0:	061b      	lsls	r3, r3, #24
 80123e2:	b09d      	sub	sp, #116	@ 0x74
 80123e4:	4607      	mov	r7, r0
 80123e6:	460d      	mov	r5, r1
 80123e8:	4614      	mov	r4, r2
 80123ea:	d510      	bpl.n	801240e <_svfiprintf_r+0x36>
 80123ec:	690b      	ldr	r3, [r1, #16]
 80123ee:	b973      	cbnz	r3, 801240e <_svfiprintf_r+0x36>
 80123f0:	2140      	movs	r1, #64	@ 0x40
 80123f2:	f7fd febf 	bl	8010174 <_malloc_r>
 80123f6:	6028      	str	r0, [r5, #0]
 80123f8:	6128      	str	r0, [r5, #16]
 80123fa:	b930      	cbnz	r0, 801240a <_svfiprintf_r+0x32>
 80123fc:	230c      	movs	r3, #12
 80123fe:	603b      	str	r3, [r7, #0]
 8012400:	f04f 30ff 	mov.w	r0, #4294967295
 8012404:	b01d      	add	sp, #116	@ 0x74
 8012406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801240a:	2340      	movs	r3, #64	@ 0x40
 801240c:	616b      	str	r3, [r5, #20]
 801240e:	2300      	movs	r3, #0
 8012410:	9309      	str	r3, [sp, #36]	@ 0x24
 8012412:	2320      	movs	r3, #32
 8012414:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012418:	f8cd 800c 	str.w	r8, [sp, #12]
 801241c:	2330      	movs	r3, #48	@ 0x30
 801241e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80125bc <_svfiprintf_r+0x1e4>
 8012422:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012426:	f04f 0901 	mov.w	r9, #1
 801242a:	4623      	mov	r3, r4
 801242c:	469a      	mov	sl, r3
 801242e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012432:	b10a      	cbz	r2, 8012438 <_svfiprintf_r+0x60>
 8012434:	2a25      	cmp	r2, #37	@ 0x25
 8012436:	d1f9      	bne.n	801242c <_svfiprintf_r+0x54>
 8012438:	ebba 0b04 	subs.w	fp, sl, r4
 801243c:	d00b      	beq.n	8012456 <_svfiprintf_r+0x7e>
 801243e:	465b      	mov	r3, fp
 8012440:	4622      	mov	r2, r4
 8012442:	4629      	mov	r1, r5
 8012444:	4638      	mov	r0, r7
 8012446:	f7ff ff6b 	bl	8012320 <__ssputs_r>
 801244a:	3001      	adds	r0, #1
 801244c:	f000 80a7 	beq.w	801259e <_svfiprintf_r+0x1c6>
 8012450:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012452:	445a      	add	r2, fp
 8012454:	9209      	str	r2, [sp, #36]	@ 0x24
 8012456:	f89a 3000 	ldrb.w	r3, [sl]
 801245a:	2b00      	cmp	r3, #0
 801245c:	f000 809f 	beq.w	801259e <_svfiprintf_r+0x1c6>
 8012460:	2300      	movs	r3, #0
 8012462:	f04f 32ff 	mov.w	r2, #4294967295
 8012466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801246a:	f10a 0a01 	add.w	sl, sl, #1
 801246e:	9304      	str	r3, [sp, #16]
 8012470:	9307      	str	r3, [sp, #28]
 8012472:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012476:	931a      	str	r3, [sp, #104]	@ 0x68
 8012478:	4654      	mov	r4, sl
 801247a:	2205      	movs	r2, #5
 801247c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012480:	484e      	ldr	r0, [pc, #312]	@ (80125bc <_svfiprintf_r+0x1e4>)
 8012482:	f7ed febd 	bl	8000200 <memchr>
 8012486:	9a04      	ldr	r2, [sp, #16]
 8012488:	b9d8      	cbnz	r0, 80124c2 <_svfiprintf_r+0xea>
 801248a:	06d0      	lsls	r0, r2, #27
 801248c:	bf44      	itt	mi
 801248e:	2320      	movmi	r3, #32
 8012490:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012494:	0711      	lsls	r1, r2, #28
 8012496:	bf44      	itt	mi
 8012498:	232b      	movmi	r3, #43	@ 0x2b
 801249a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801249e:	f89a 3000 	ldrb.w	r3, [sl]
 80124a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80124a4:	d015      	beq.n	80124d2 <_svfiprintf_r+0xfa>
 80124a6:	9a07      	ldr	r2, [sp, #28]
 80124a8:	4654      	mov	r4, sl
 80124aa:	2000      	movs	r0, #0
 80124ac:	f04f 0c0a 	mov.w	ip, #10
 80124b0:	4621      	mov	r1, r4
 80124b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124b6:	3b30      	subs	r3, #48	@ 0x30
 80124b8:	2b09      	cmp	r3, #9
 80124ba:	d94b      	bls.n	8012554 <_svfiprintf_r+0x17c>
 80124bc:	b1b0      	cbz	r0, 80124ec <_svfiprintf_r+0x114>
 80124be:	9207      	str	r2, [sp, #28]
 80124c0:	e014      	b.n	80124ec <_svfiprintf_r+0x114>
 80124c2:	eba0 0308 	sub.w	r3, r0, r8
 80124c6:	fa09 f303 	lsl.w	r3, r9, r3
 80124ca:	4313      	orrs	r3, r2
 80124cc:	9304      	str	r3, [sp, #16]
 80124ce:	46a2      	mov	sl, r4
 80124d0:	e7d2      	b.n	8012478 <_svfiprintf_r+0xa0>
 80124d2:	9b03      	ldr	r3, [sp, #12]
 80124d4:	1d19      	adds	r1, r3, #4
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	9103      	str	r1, [sp, #12]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	bfbb      	ittet	lt
 80124de:	425b      	neglt	r3, r3
 80124e0:	f042 0202 	orrlt.w	r2, r2, #2
 80124e4:	9307      	strge	r3, [sp, #28]
 80124e6:	9307      	strlt	r3, [sp, #28]
 80124e8:	bfb8      	it	lt
 80124ea:	9204      	strlt	r2, [sp, #16]
 80124ec:	7823      	ldrb	r3, [r4, #0]
 80124ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80124f0:	d10a      	bne.n	8012508 <_svfiprintf_r+0x130>
 80124f2:	7863      	ldrb	r3, [r4, #1]
 80124f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80124f6:	d132      	bne.n	801255e <_svfiprintf_r+0x186>
 80124f8:	9b03      	ldr	r3, [sp, #12]
 80124fa:	1d1a      	adds	r2, r3, #4
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	9203      	str	r2, [sp, #12]
 8012500:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012504:	3402      	adds	r4, #2
 8012506:	9305      	str	r3, [sp, #20]
 8012508:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80125cc <_svfiprintf_r+0x1f4>
 801250c:	7821      	ldrb	r1, [r4, #0]
 801250e:	2203      	movs	r2, #3
 8012510:	4650      	mov	r0, sl
 8012512:	f7ed fe75 	bl	8000200 <memchr>
 8012516:	b138      	cbz	r0, 8012528 <_svfiprintf_r+0x150>
 8012518:	9b04      	ldr	r3, [sp, #16]
 801251a:	eba0 000a 	sub.w	r0, r0, sl
 801251e:	2240      	movs	r2, #64	@ 0x40
 8012520:	4082      	lsls	r2, r0
 8012522:	4313      	orrs	r3, r2
 8012524:	3401      	adds	r4, #1
 8012526:	9304      	str	r3, [sp, #16]
 8012528:	f814 1b01 	ldrb.w	r1, [r4], #1
 801252c:	4824      	ldr	r0, [pc, #144]	@ (80125c0 <_svfiprintf_r+0x1e8>)
 801252e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012532:	2206      	movs	r2, #6
 8012534:	f7ed fe64 	bl	8000200 <memchr>
 8012538:	2800      	cmp	r0, #0
 801253a:	d036      	beq.n	80125aa <_svfiprintf_r+0x1d2>
 801253c:	4b21      	ldr	r3, [pc, #132]	@ (80125c4 <_svfiprintf_r+0x1ec>)
 801253e:	bb1b      	cbnz	r3, 8012588 <_svfiprintf_r+0x1b0>
 8012540:	9b03      	ldr	r3, [sp, #12]
 8012542:	3307      	adds	r3, #7
 8012544:	f023 0307 	bic.w	r3, r3, #7
 8012548:	3308      	adds	r3, #8
 801254a:	9303      	str	r3, [sp, #12]
 801254c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801254e:	4433      	add	r3, r6
 8012550:	9309      	str	r3, [sp, #36]	@ 0x24
 8012552:	e76a      	b.n	801242a <_svfiprintf_r+0x52>
 8012554:	fb0c 3202 	mla	r2, ip, r2, r3
 8012558:	460c      	mov	r4, r1
 801255a:	2001      	movs	r0, #1
 801255c:	e7a8      	b.n	80124b0 <_svfiprintf_r+0xd8>
 801255e:	2300      	movs	r3, #0
 8012560:	3401      	adds	r4, #1
 8012562:	9305      	str	r3, [sp, #20]
 8012564:	4619      	mov	r1, r3
 8012566:	f04f 0c0a 	mov.w	ip, #10
 801256a:	4620      	mov	r0, r4
 801256c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012570:	3a30      	subs	r2, #48	@ 0x30
 8012572:	2a09      	cmp	r2, #9
 8012574:	d903      	bls.n	801257e <_svfiprintf_r+0x1a6>
 8012576:	2b00      	cmp	r3, #0
 8012578:	d0c6      	beq.n	8012508 <_svfiprintf_r+0x130>
 801257a:	9105      	str	r1, [sp, #20]
 801257c:	e7c4      	b.n	8012508 <_svfiprintf_r+0x130>
 801257e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012582:	4604      	mov	r4, r0
 8012584:	2301      	movs	r3, #1
 8012586:	e7f0      	b.n	801256a <_svfiprintf_r+0x192>
 8012588:	ab03      	add	r3, sp, #12
 801258a:	9300      	str	r3, [sp, #0]
 801258c:	462a      	mov	r2, r5
 801258e:	4b0e      	ldr	r3, [pc, #56]	@ (80125c8 <_svfiprintf_r+0x1f0>)
 8012590:	a904      	add	r1, sp, #16
 8012592:	4638      	mov	r0, r7
 8012594:	f7fd ff1a 	bl	80103cc <_printf_float>
 8012598:	1c42      	adds	r2, r0, #1
 801259a:	4606      	mov	r6, r0
 801259c:	d1d6      	bne.n	801254c <_svfiprintf_r+0x174>
 801259e:	89ab      	ldrh	r3, [r5, #12]
 80125a0:	065b      	lsls	r3, r3, #25
 80125a2:	f53f af2d 	bmi.w	8012400 <_svfiprintf_r+0x28>
 80125a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80125a8:	e72c      	b.n	8012404 <_svfiprintf_r+0x2c>
 80125aa:	ab03      	add	r3, sp, #12
 80125ac:	9300      	str	r3, [sp, #0]
 80125ae:	462a      	mov	r2, r5
 80125b0:	4b05      	ldr	r3, [pc, #20]	@ (80125c8 <_svfiprintf_r+0x1f0>)
 80125b2:	a904      	add	r1, sp, #16
 80125b4:	4638      	mov	r0, r7
 80125b6:	f7fe f9a1 	bl	80108fc <_printf_i>
 80125ba:	e7ed      	b.n	8012598 <_svfiprintf_r+0x1c0>
 80125bc:	08018570 	.word	0x08018570
 80125c0:	0801857a 	.word	0x0801857a
 80125c4:	080103cd 	.word	0x080103cd
 80125c8:	08012321 	.word	0x08012321
 80125cc:	08018576 	.word	0x08018576

080125d0 <__sfputc_r>:
 80125d0:	6893      	ldr	r3, [r2, #8]
 80125d2:	3b01      	subs	r3, #1
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	b410      	push	{r4}
 80125d8:	6093      	str	r3, [r2, #8]
 80125da:	da08      	bge.n	80125ee <__sfputc_r+0x1e>
 80125dc:	6994      	ldr	r4, [r2, #24]
 80125de:	42a3      	cmp	r3, r4
 80125e0:	db01      	blt.n	80125e6 <__sfputc_r+0x16>
 80125e2:	290a      	cmp	r1, #10
 80125e4:	d103      	bne.n	80125ee <__sfputc_r+0x1e>
 80125e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125ea:	f000 b9df 	b.w	80129ac <__swbuf_r>
 80125ee:	6813      	ldr	r3, [r2, #0]
 80125f0:	1c58      	adds	r0, r3, #1
 80125f2:	6010      	str	r0, [r2, #0]
 80125f4:	7019      	strb	r1, [r3, #0]
 80125f6:	4608      	mov	r0, r1
 80125f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125fc:	4770      	bx	lr

080125fe <__sfputs_r>:
 80125fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012600:	4606      	mov	r6, r0
 8012602:	460f      	mov	r7, r1
 8012604:	4614      	mov	r4, r2
 8012606:	18d5      	adds	r5, r2, r3
 8012608:	42ac      	cmp	r4, r5
 801260a:	d101      	bne.n	8012610 <__sfputs_r+0x12>
 801260c:	2000      	movs	r0, #0
 801260e:	e007      	b.n	8012620 <__sfputs_r+0x22>
 8012610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012614:	463a      	mov	r2, r7
 8012616:	4630      	mov	r0, r6
 8012618:	f7ff ffda 	bl	80125d0 <__sfputc_r>
 801261c:	1c43      	adds	r3, r0, #1
 801261e:	d1f3      	bne.n	8012608 <__sfputs_r+0xa>
 8012620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012624 <_vfiprintf_r>:
 8012624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012628:	460d      	mov	r5, r1
 801262a:	b09d      	sub	sp, #116	@ 0x74
 801262c:	4614      	mov	r4, r2
 801262e:	4698      	mov	r8, r3
 8012630:	4606      	mov	r6, r0
 8012632:	b118      	cbz	r0, 801263c <_vfiprintf_r+0x18>
 8012634:	6a03      	ldr	r3, [r0, #32]
 8012636:	b90b      	cbnz	r3, 801263c <_vfiprintf_r+0x18>
 8012638:	f7fe fb0c 	bl	8010c54 <__sinit>
 801263c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801263e:	07d9      	lsls	r1, r3, #31
 8012640:	d405      	bmi.n	801264e <_vfiprintf_r+0x2a>
 8012642:	89ab      	ldrh	r3, [r5, #12]
 8012644:	059a      	lsls	r2, r3, #22
 8012646:	d402      	bmi.n	801264e <_vfiprintf_r+0x2a>
 8012648:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801264a:	f7fe fc3e 	bl	8010eca <__retarget_lock_acquire_recursive>
 801264e:	89ab      	ldrh	r3, [r5, #12]
 8012650:	071b      	lsls	r3, r3, #28
 8012652:	d501      	bpl.n	8012658 <_vfiprintf_r+0x34>
 8012654:	692b      	ldr	r3, [r5, #16]
 8012656:	b99b      	cbnz	r3, 8012680 <_vfiprintf_r+0x5c>
 8012658:	4629      	mov	r1, r5
 801265a:	4630      	mov	r0, r6
 801265c:	f000 f9e4 	bl	8012a28 <__swsetup_r>
 8012660:	b170      	cbz	r0, 8012680 <_vfiprintf_r+0x5c>
 8012662:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012664:	07dc      	lsls	r4, r3, #31
 8012666:	d504      	bpl.n	8012672 <_vfiprintf_r+0x4e>
 8012668:	f04f 30ff 	mov.w	r0, #4294967295
 801266c:	b01d      	add	sp, #116	@ 0x74
 801266e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012672:	89ab      	ldrh	r3, [r5, #12]
 8012674:	0598      	lsls	r0, r3, #22
 8012676:	d4f7      	bmi.n	8012668 <_vfiprintf_r+0x44>
 8012678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801267a:	f7fe fc27 	bl	8010ecc <__retarget_lock_release_recursive>
 801267e:	e7f3      	b.n	8012668 <_vfiprintf_r+0x44>
 8012680:	2300      	movs	r3, #0
 8012682:	9309      	str	r3, [sp, #36]	@ 0x24
 8012684:	2320      	movs	r3, #32
 8012686:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801268a:	f8cd 800c 	str.w	r8, [sp, #12]
 801268e:	2330      	movs	r3, #48	@ 0x30
 8012690:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012840 <_vfiprintf_r+0x21c>
 8012694:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012698:	f04f 0901 	mov.w	r9, #1
 801269c:	4623      	mov	r3, r4
 801269e:	469a      	mov	sl, r3
 80126a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126a4:	b10a      	cbz	r2, 80126aa <_vfiprintf_r+0x86>
 80126a6:	2a25      	cmp	r2, #37	@ 0x25
 80126a8:	d1f9      	bne.n	801269e <_vfiprintf_r+0x7a>
 80126aa:	ebba 0b04 	subs.w	fp, sl, r4
 80126ae:	d00b      	beq.n	80126c8 <_vfiprintf_r+0xa4>
 80126b0:	465b      	mov	r3, fp
 80126b2:	4622      	mov	r2, r4
 80126b4:	4629      	mov	r1, r5
 80126b6:	4630      	mov	r0, r6
 80126b8:	f7ff ffa1 	bl	80125fe <__sfputs_r>
 80126bc:	3001      	adds	r0, #1
 80126be:	f000 80a7 	beq.w	8012810 <_vfiprintf_r+0x1ec>
 80126c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80126c4:	445a      	add	r2, fp
 80126c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80126c8:	f89a 3000 	ldrb.w	r3, [sl]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	f000 809f 	beq.w	8012810 <_vfiprintf_r+0x1ec>
 80126d2:	2300      	movs	r3, #0
 80126d4:	f04f 32ff 	mov.w	r2, #4294967295
 80126d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126dc:	f10a 0a01 	add.w	sl, sl, #1
 80126e0:	9304      	str	r3, [sp, #16]
 80126e2:	9307      	str	r3, [sp, #28]
 80126e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80126e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80126ea:	4654      	mov	r4, sl
 80126ec:	2205      	movs	r2, #5
 80126ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126f2:	4853      	ldr	r0, [pc, #332]	@ (8012840 <_vfiprintf_r+0x21c>)
 80126f4:	f7ed fd84 	bl	8000200 <memchr>
 80126f8:	9a04      	ldr	r2, [sp, #16]
 80126fa:	b9d8      	cbnz	r0, 8012734 <_vfiprintf_r+0x110>
 80126fc:	06d1      	lsls	r1, r2, #27
 80126fe:	bf44      	itt	mi
 8012700:	2320      	movmi	r3, #32
 8012702:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012706:	0713      	lsls	r3, r2, #28
 8012708:	bf44      	itt	mi
 801270a:	232b      	movmi	r3, #43	@ 0x2b
 801270c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012710:	f89a 3000 	ldrb.w	r3, [sl]
 8012714:	2b2a      	cmp	r3, #42	@ 0x2a
 8012716:	d015      	beq.n	8012744 <_vfiprintf_r+0x120>
 8012718:	9a07      	ldr	r2, [sp, #28]
 801271a:	4654      	mov	r4, sl
 801271c:	2000      	movs	r0, #0
 801271e:	f04f 0c0a 	mov.w	ip, #10
 8012722:	4621      	mov	r1, r4
 8012724:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012728:	3b30      	subs	r3, #48	@ 0x30
 801272a:	2b09      	cmp	r3, #9
 801272c:	d94b      	bls.n	80127c6 <_vfiprintf_r+0x1a2>
 801272e:	b1b0      	cbz	r0, 801275e <_vfiprintf_r+0x13a>
 8012730:	9207      	str	r2, [sp, #28]
 8012732:	e014      	b.n	801275e <_vfiprintf_r+0x13a>
 8012734:	eba0 0308 	sub.w	r3, r0, r8
 8012738:	fa09 f303 	lsl.w	r3, r9, r3
 801273c:	4313      	orrs	r3, r2
 801273e:	9304      	str	r3, [sp, #16]
 8012740:	46a2      	mov	sl, r4
 8012742:	e7d2      	b.n	80126ea <_vfiprintf_r+0xc6>
 8012744:	9b03      	ldr	r3, [sp, #12]
 8012746:	1d19      	adds	r1, r3, #4
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	9103      	str	r1, [sp, #12]
 801274c:	2b00      	cmp	r3, #0
 801274e:	bfbb      	ittet	lt
 8012750:	425b      	neglt	r3, r3
 8012752:	f042 0202 	orrlt.w	r2, r2, #2
 8012756:	9307      	strge	r3, [sp, #28]
 8012758:	9307      	strlt	r3, [sp, #28]
 801275a:	bfb8      	it	lt
 801275c:	9204      	strlt	r2, [sp, #16]
 801275e:	7823      	ldrb	r3, [r4, #0]
 8012760:	2b2e      	cmp	r3, #46	@ 0x2e
 8012762:	d10a      	bne.n	801277a <_vfiprintf_r+0x156>
 8012764:	7863      	ldrb	r3, [r4, #1]
 8012766:	2b2a      	cmp	r3, #42	@ 0x2a
 8012768:	d132      	bne.n	80127d0 <_vfiprintf_r+0x1ac>
 801276a:	9b03      	ldr	r3, [sp, #12]
 801276c:	1d1a      	adds	r2, r3, #4
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	9203      	str	r2, [sp, #12]
 8012772:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012776:	3402      	adds	r4, #2
 8012778:	9305      	str	r3, [sp, #20]
 801277a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012850 <_vfiprintf_r+0x22c>
 801277e:	7821      	ldrb	r1, [r4, #0]
 8012780:	2203      	movs	r2, #3
 8012782:	4650      	mov	r0, sl
 8012784:	f7ed fd3c 	bl	8000200 <memchr>
 8012788:	b138      	cbz	r0, 801279a <_vfiprintf_r+0x176>
 801278a:	9b04      	ldr	r3, [sp, #16]
 801278c:	eba0 000a 	sub.w	r0, r0, sl
 8012790:	2240      	movs	r2, #64	@ 0x40
 8012792:	4082      	lsls	r2, r0
 8012794:	4313      	orrs	r3, r2
 8012796:	3401      	adds	r4, #1
 8012798:	9304      	str	r3, [sp, #16]
 801279a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801279e:	4829      	ldr	r0, [pc, #164]	@ (8012844 <_vfiprintf_r+0x220>)
 80127a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80127a4:	2206      	movs	r2, #6
 80127a6:	f7ed fd2b 	bl	8000200 <memchr>
 80127aa:	2800      	cmp	r0, #0
 80127ac:	d03f      	beq.n	801282e <_vfiprintf_r+0x20a>
 80127ae:	4b26      	ldr	r3, [pc, #152]	@ (8012848 <_vfiprintf_r+0x224>)
 80127b0:	bb1b      	cbnz	r3, 80127fa <_vfiprintf_r+0x1d6>
 80127b2:	9b03      	ldr	r3, [sp, #12]
 80127b4:	3307      	adds	r3, #7
 80127b6:	f023 0307 	bic.w	r3, r3, #7
 80127ba:	3308      	adds	r3, #8
 80127bc:	9303      	str	r3, [sp, #12]
 80127be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127c0:	443b      	add	r3, r7
 80127c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80127c4:	e76a      	b.n	801269c <_vfiprintf_r+0x78>
 80127c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80127ca:	460c      	mov	r4, r1
 80127cc:	2001      	movs	r0, #1
 80127ce:	e7a8      	b.n	8012722 <_vfiprintf_r+0xfe>
 80127d0:	2300      	movs	r3, #0
 80127d2:	3401      	adds	r4, #1
 80127d4:	9305      	str	r3, [sp, #20]
 80127d6:	4619      	mov	r1, r3
 80127d8:	f04f 0c0a 	mov.w	ip, #10
 80127dc:	4620      	mov	r0, r4
 80127de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127e2:	3a30      	subs	r2, #48	@ 0x30
 80127e4:	2a09      	cmp	r2, #9
 80127e6:	d903      	bls.n	80127f0 <_vfiprintf_r+0x1cc>
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d0c6      	beq.n	801277a <_vfiprintf_r+0x156>
 80127ec:	9105      	str	r1, [sp, #20]
 80127ee:	e7c4      	b.n	801277a <_vfiprintf_r+0x156>
 80127f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80127f4:	4604      	mov	r4, r0
 80127f6:	2301      	movs	r3, #1
 80127f8:	e7f0      	b.n	80127dc <_vfiprintf_r+0x1b8>
 80127fa:	ab03      	add	r3, sp, #12
 80127fc:	9300      	str	r3, [sp, #0]
 80127fe:	462a      	mov	r2, r5
 8012800:	4b12      	ldr	r3, [pc, #72]	@ (801284c <_vfiprintf_r+0x228>)
 8012802:	a904      	add	r1, sp, #16
 8012804:	4630      	mov	r0, r6
 8012806:	f7fd fde1 	bl	80103cc <_printf_float>
 801280a:	4607      	mov	r7, r0
 801280c:	1c78      	adds	r0, r7, #1
 801280e:	d1d6      	bne.n	80127be <_vfiprintf_r+0x19a>
 8012810:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012812:	07d9      	lsls	r1, r3, #31
 8012814:	d405      	bmi.n	8012822 <_vfiprintf_r+0x1fe>
 8012816:	89ab      	ldrh	r3, [r5, #12]
 8012818:	059a      	lsls	r2, r3, #22
 801281a:	d402      	bmi.n	8012822 <_vfiprintf_r+0x1fe>
 801281c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801281e:	f7fe fb55 	bl	8010ecc <__retarget_lock_release_recursive>
 8012822:	89ab      	ldrh	r3, [r5, #12]
 8012824:	065b      	lsls	r3, r3, #25
 8012826:	f53f af1f 	bmi.w	8012668 <_vfiprintf_r+0x44>
 801282a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801282c:	e71e      	b.n	801266c <_vfiprintf_r+0x48>
 801282e:	ab03      	add	r3, sp, #12
 8012830:	9300      	str	r3, [sp, #0]
 8012832:	462a      	mov	r2, r5
 8012834:	4b05      	ldr	r3, [pc, #20]	@ (801284c <_vfiprintf_r+0x228>)
 8012836:	a904      	add	r1, sp, #16
 8012838:	4630      	mov	r0, r6
 801283a:	f7fe f85f 	bl	80108fc <_printf_i>
 801283e:	e7e4      	b.n	801280a <_vfiprintf_r+0x1e6>
 8012840:	08018570 	.word	0x08018570
 8012844:	0801857a 	.word	0x0801857a
 8012848:	080103cd 	.word	0x080103cd
 801284c:	080125ff 	.word	0x080125ff
 8012850:	08018576 	.word	0x08018576

08012854 <__sflush_r>:
 8012854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801285c:	0716      	lsls	r6, r2, #28
 801285e:	4605      	mov	r5, r0
 8012860:	460c      	mov	r4, r1
 8012862:	d454      	bmi.n	801290e <__sflush_r+0xba>
 8012864:	684b      	ldr	r3, [r1, #4]
 8012866:	2b00      	cmp	r3, #0
 8012868:	dc02      	bgt.n	8012870 <__sflush_r+0x1c>
 801286a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801286c:	2b00      	cmp	r3, #0
 801286e:	dd48      	ble.n	8012902 <__sflush_r+0xae>
 8012870:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012872:	2e00      	cmp	r6, #0
 8012874:	d045      	beq.n	8012902 <__sflush_r+0xae>
 8012876:	2300      	movs	r3, #0
 8012878:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801287c:	682f      	ldr	r7, [r5, #0]
 801287e:	6a21      	ldr	r1, [r4, #32]
 8012880:	602b      	str	r3, [r5, #0]
 8012882:	d030      	beq.n	80128e6 <__sflush_r+0x92>
 8012884:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012886:	89a3      	ldrh	r3, [r4, #12]
 8012888:	0759      	lsls	r1, r3, #29
 801288a:	d505      	bpl.n	8012898 <__sflush_r+0x44>
 801288c:	6863      	ldr	r3, [r4, #4]
 801288e:	1ad2      	subs	r2, r2, r3
 8012890:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012892:	b10b      	cbz	r3, 8012898 <__sflush_r+0x44>
 8012894:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012896:	1ad2      	subs	r2, r2, r3
 8012898:	2300      	movs	r3, #0
 801289a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801289c:	6a21      	ldr	r1, [r4, #32]
 801289e:	4628      	mov	r0, r5
 80128a0:	47b0      	blx	r6
 80128a2:	1c43      	adds	r3, r0, #1
 80128a4:	89a3      	ldrh	r3, [r4, #12]
 80128a6:	d106      	bne.n	80128b6 <__sflush_r+0x62>
 80128a8:	6829      	ldr	r1, [r5, #0]
 80128aa:	291d      	cmp	r1, #29
 80128ac:	d82b      	bhi.n	8012906 <__sflush_r+0xb2>
 80128ae:	4a2a      	ldr	r2, [pc, #168]	@ (8012958 <__sflush_r+0x104>)
 80128b0:	410a      	asrs	r2, r1
 80128b2:	07d6      	lsls	r6, r2, #31
 80128b4:	d427      	bmi.n	8012906 <__sflush_r+0xb2>
 80128b6:	2200      	movs	r2, #0
 80128b8:	6062      	str	r2, [r4, #4]
 80128ba:	04d9      	lsls	r1, r3, #19
 80128bc:	6922      	ldr	r2, [r4, #16]
 80128be:	6022      	str	r2, [r4, #0]
 80128c0:	d504      	bpl.n	80128cc <__sflush_r+0x78>
 80128c2:	1c42      	adds	r2, r0, #1
 80128c4:	d101      	bne.n	80128ca <__sflush_r+0x76>
 80128c6:	682b      	ldr	r3, [r5, #0]
 80128c8:	b903      	cbnz	r3, 80128cc <__sflush_r+0x78>
 80128ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80128cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80128ce:	602f      	str	r7, [r5, #0]
 80128d0:	b1b9      	cbz	r1, 8012902 <__sflush_r+0xae>
 80128d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80128d6:	4299      	cmp	r1, r3
 80128d8:	d002      	beq.n	80128e0 <__sflush_r+0x8c>
 80128da:	4628      	mov	r0, r5
 80128dc:	f7ff f954 	bl	8011b88 <_free_r>
 80128e0:	2300      	movs	r3, #0
 80128e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80128e4:	e00d      	b.n	8012902 <__sflush_r+0xae>
 80128e6:	2301      	movs	r3, #1
 80128e8:	4628      	mov	r0, r5
 80128ea:	47b0      	blx	r6
 80128ec:	4602      	mov	r2, r0
 80128ee:	1c50      	adds	r0, r2, #1
 80128f0:	d1c9      	bne.n	8012886 <__sflush_r+0x32>
 80128f2:	682b      	ldr	r3, [r5, #0]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d0c6      	beq.n	8012886 <__sflush_r+0x32>
 80128f8:	2b1d      	cmp	r3, #29
 80128fa:	d001      	beq.n	8012900 <__sflush_r+0xac>
 80128fc:	2b16      	cmp	r3, #22
 80128fe:	d11e      	bne.n	801293e <__sflush_r+0xea>
 8012900:	602f      	str	r7, [r5, #0]
 8012902:	2000      	movs	r0, #0
 8012904:	e022      	b.n	801294c <__sflush_r+0xf8>
 8012906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801290a:	b21b      	sxth	r3, r3
 801290c:	e01b      	b.n	8012946 <__sflush_r+0xf2>
 801290e:	690f      	ldr	r7, [r1, #16]
 8012910:	2f00      	cmp	r7, #0
 8012912:	d0f6      	beq.n	8012902 <__sflush_r+0xae>
 8012914:	0793      	lsls	r3, r2, #30
 8012916:	680e      	ldr	r6, [r1, #0]
 8012918:	bf08      	it	eq
 801291a:	694b      	ldreq	r3, [r1, #20]
 801291c:	600f      	str	r7, [r1, #0]
 801291e:	bf18      	it	ne
 8012920:	2300      	movne	r3, #0
 8012922:	eba6 0807 	sub.w	r8, r6, r7
 8012926:	608b      	str	r3, [r1, #8]
 8012928:	f1b8 0f00 	cmp.w	r8, #0
 801292c:	dde9      	ble.n	8012902 <__sflush_r+0xae>
 801292e:	6a21      	ldr	r1, [r4, #32]
 8012930:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012932:	4643      	mov	r3, r8
 8012934:	463a      	mov	r2, r7
 8012936:	4628      	mov	r0, r5
 8012938:	47b0      	blx	r6
 801293a:	2800      	cmp	r0, #0
 801293c:	dc08      	bgt.n	8012950 <__sflush_r+0xfc>
 801293e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012946:	81a3      	strh	r3, [r4, #12]
 8012948:	f04f 30ff 	mov.w	r0, #4294967295
 801294c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012950:	4407      	add	r7, r0
 8012952:	eba8 0800 	sub.w	r8, r8, r0
 8012956:	e7e7      	b.n	8012928 <__sflush_r+0xd4>
 8012958:	dfbffffe 	.word	0xdfbffffe

0801295c <_fflush_r>:
 801295c:	b538      	push	{r3, r4, r5, lr}
 801295e:	690b      	ldr	r3, [r1, #16]
 8012960:	4605      	mov	r5, r0
 8012962:	460c      	mov	r4, r1
 8012964:	b913      	cbnz	r3, 801296c <_fflush_r+0x10>
 8012966:	2500      	movs	r5, #0
 8012968:	4628      	mov	r0, r5
 801296a:	bd38      	pop	{r3, r4, r5, pc}
 801296c:	b118      	cbz	r0, 8012976 <_fflush_r+0x1a>
 801296e:	6a03      	ldr	r3, [r0, #32]
 8012970:	b90b      	cbnz	r3, 8012976 <_fflush_r+0x1a>
 8012972:	f7fe f96f 	bl	8010c54 <__sinit>
 8012976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d0f3      	beq.n	8012966 <_fflush_r+0xa>
 801297e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012980:	07d0      	lsls	r0, r2, #31
 8012982:	d404      	bmi.n	801298e <_fflush_r+0x32>
 8012984:	0599      	lsls	r1, r3, #22
 8012986:	d402      	bmi.n	801298e <_fflush_r+0x32>
 8012988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801298a:	f7fe fa9e 	bl	8010eca <__retarget_lock_acquire_recursive>
 801298e:	4628      	mov	r0, r5
 8012990:	4621      	mov	r1, r4
 8012992:	f7ff ff5f 	bl	8012854 <__sflush_r>
 8012996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012998:	07da      	lsls	r2, r3, #31
 801299a:	4605      	mov	r5, r0
 801299c:	d4e4      	bmi.n	8012968 <_fflush_r+0xc>
 801299e:	89a3      	ldrh	r3, [r4, #12]
 80129a0:	059b      	lsls	r3, r3, #22
 80129a2:	d4e1      	bmi.n	8012968 <_fflush_r+0xc>
 80129a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80129a6:	f7fe fa91 	bl	8010ecc <__retarget_lock_release_recursive>
 80129aa:	e7dd      	b.n	8012968 <_fflush_r+0xc>

080129ac <__swbuf_r>:
 80129ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ae:	460e      	mov	r6, r1
 80129b0:	4614      	mov	r4, r2
 80129b2:	4605      	mov	r5, r0
 80129b4:	b118      	cbz	r0, 80129be <__swbuf_r+0x12>
 80129b6:	6a03      	ldr	r3, [r0, #32]
 80129b8:	b90b      	cbnz	r3, 80129be <__swbuf_r+0x12>
 80129ba:	f7fe f94b 	bl	8010c54 <__sinit>
 80129be:	69a3      	ldr	r3, [r4, #24]
 80129c0:	60a3      	str	r3, [r4, #8]
 80129c2:	89a3      	ldrh	r3, [r4, #12]
 80129c4:	071a      	lsls	r2, r3, #28
 80129c6:	d501      	bpl.n	80129cc <__swbuf_r+0x20>
 80129c8:	6923      	ldr	r3, [r4, #16]
 80129ca:	b943      	cbnz	r3, 80129de <__swbuf_r+0x32>
 80129cc:	4621      	mov	r1, r4
 80129ce:	4628      	mov	r0, r5
 80129d0:	f000 f82a 	bl	8012a28 <__swsetup_r>
 80129d4:	b118      	cbz	r0, 80129de <__swbuf_r+0x32>
 80129d6:	f04f 37ff 	mov.w	r7, #4294967295
 80129da:	4638      	mov	r0, r7
 80129dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129de:	6823      	ldr	r3, [r4, #0]
 80129e0:	6922      	ldr	r2, [r4, #16]
 80129e2:	1a98      	subs	r0, r3, r2
 80129e4:	6963      	ldr	r3, [r4, #20]
 80129e6:	b2f6      	uxtb	r6, r6
 80129e8:	4283      	cmp	r3, r0
 80129ea:	4637      	mov	r7, r6
 80129ec:	dc05      	bgt.n	80129fa <__swbuf_r+0x4e>
 80129ee:	4621      	mov	r1, r4
 80129f0:	4628      	mov	r0, r5
 80129f2:	f7ff ffb3 	bl	801295c <_fflush_r>
 80129f6:	2800      	cmp	r0, #0
 80129f8:	d1ed      	bne.n	80129d6 <__swbuf_r+0x2a>
 80129fa:	68a3      	ldr	r3, [r4, #8]
 80129fc:	3b01      	subs	r3, #1
 80129fe:	60a3      	str	r3, [r4, #8]
 8012a00:	6823      	ldr	r3, [r4, #0]
 8012a02:	1c5a      	adds	r2, r3, #1
 8012a04:	6022      	str	r2, [r4, #0]
 8012a06:	701e      	strb	r6, [r3, #0]
 8012a08:	6962      	ldr	r2, [r4, #20]
 8012a0a:	1c43      	adds	r3, r0, #1
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	d004      	beq.n	8012a1a <__swbuf_r+0x6e>
 8012a10:	89a3      	ldrh	r3, [r4, #12]
 8012a12:	07db      	lsls	r3, r3, #31
 8012a14:	d5e1      	bpl.n	80129da <__swbuf_r+0x2e>
 8012a16:	2e0a      	cmp	r6, #10
 8012a18:	d1df      	bne.n	80129da <__swbuf_r+0x2e>
 8012a1a:	4621      	mov	r1, r4
 8012a1c:	4628      	mov	r0, r5
 8012a1e:	f7ff ff9d 	bl	801295c <_fflush_r>
 8012a22:	2800      	cmp	r0, #0
 8012a24:	d0d9      	beq.n	80129da <__swbuf_r+0x2e>
 8012a26:	e7d6      	b.n	80129d6 <__swbuf_r+0x2a>

08012a28 <__swsetup_r>:
 8012a28:	b538      	push	{r3, r4, r5, lr}
 8012a2a:	4b29      	ldr	r3, [pc, #164]	@ (8012ad0 <__swsetup_r+0xa8>)
 8012a2c:	4605      	mov	r5, r0
 8012a2e:	6818      	ldr	r0, [r3, #0]
 8012a30:	460c      	mov	r4, r1
 8012a32:	b118      	cbz	r0, 8012a3c <__swsetup_r+0x14>
 8012a34:	6a03      	ldr	r3, [r0, #32]
 8012a36:	b90b      	cbnz	r3, 8012a3c <__swsetup_r+0x14>
 8012a38:	f7fe f90c 	bl	8010c54 <__sinit>
 8012a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a40:	0719      	lsls	r1, r3, #28
 8012a42:	d422      	bmi.n	8012a8a <__swsetup_r+0x62>
 8012a44:	06da      	lsls	r2, r3, #27
 8012a46:	d407      	bmi.n	8012a58 <__swsetup_r+0x30>
 8012a48:	2209      	movs	r2, #9
 8012a4a:	602a      	str	r2, [r5, #0]
 8012a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a50:	81a3      	strh	r3, [r4, #12]
 8012a52:	f04f 30ff 	mov.w	r0, #4294967295
 8012a56:	e033      	b.n	8012ac0 <__swsetup_r+0x98>
 8012a58:	0758      	lsls	r0, r3, #29
 8012a5a:	d512      	bpl.n	8012a82 <__swsetup_r+0x5a>
 8012a5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012a5e:	b141      	cbz	r1, 8012a72 <__swsetup_r+0x4a>
 8012a60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012a64:	4299      	cmp	r1, r3
 8012a66:	d002      	beq.n	8012a6e <__swsetup_r+0x46>
 8012a68:	4628      	mov	r0, r5
 8012a6a:	f7ff f88d 	bl	8011b88 <_free_r>
 8012a6e:	2300      	movs	r3, #0
 8012a70:	6363      	str	r3, [r4, #52]	@ 0x34
 8012a72:	89a3      	ldrh	r3, [r4, #12]
 8012a74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012a78:	81a3      	strh	r3, [r4, #12]
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	6063      	str	r3, [r4, #4]
 8012a7e:	6923      	ldr	r3, [r4, #16]
 8012a80:	6023      	str	r3, [r4, #0]
 8012a82:	89a3      	ldrh	r3, [r4, #12]
 8012a84:	f043 0308 	orr.w	r3, r3, #8
 8012a88:	81a3      	strh	r3, [r4, #12]
 8012a8a:	6923      	ldr	r3, [r4, #16]
 8012a8c:	b94b      	cbnz	r3, 8012aa2 <__swsetup_r+0x7a>
 8012a8e:	89a3      	ldrh	r3, [r4, #12]
 8012a90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012a94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012a98:	d003      	beq.n	8012aa2 <__swsetup_r+0x7a>
 8012a9a:	4621      	mov	r1, r4
 8012a9c:	4628      	mov	r0, r5
 8012a9e:	f000 f8eb 	bl	8012c78 <__smakebuf_r>
 8012aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012aa6:	f013 0201 	ands.w	r2, r3, #1
 8012aaa:	d00a      	beq.n	8012ac2 <__swsetup_r+0x9a>
 8012aac:	2200      	movs	r2, #0
 8012aae:	60a2      	str	r2, [r4, #8]
 8012ab0:	6962      	ldr	r2, [r4, #20]
 8012ab2:	4252      	negs	r2, r2
 8012ab4:	61a2      	str	r2, [r4, #24]
 8012ab6:	6922      	ldr	r2, [r4, #16]
 8012ab8:	b942      	cbnz	r2, 8012acc <__swsetup_r+0xa4>
 8012aba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012abe:	d1c5      	bne.n	8012a4c <__swsetup_r+0x24>
 8012ac0:	bd38      	pop	{r3, r4, r5, pc}
 8012ac2:	0799      	lsls	r1, r3, #30
 8012ac4:	bf58      	it	pl
 8012ac6:	6962      	ldrpl	r2, [r4, #20]
 8012ac8:	60a2      	str	r2, [r4, #8]
 8012aca:	e7f4      	b.n	8012ab6 <__swsetup_r+0x8e>
 8012acc:	2000      	movs	r0, #0
 8012ace:	e7f7      	b.n	8012ac0 <__swsetup_r+0x98>
 8012ad0:	2000004c 	.word	0x2000004c

08012ad4 <memmove>:
 8012ad4:	4288      	cmp	r0, r1
 8012ad6:	b510      	push	{r4, lr}
 8012ad8:	eb01 0402 	add.w	r4, r1, r2
 8012adc:	d902      	bls.n	8012ae4 <memmove+0x10>
 8012ade:	4284      	cmp	r4, r0
 8012ae0:	4623      	mov	r3, r4
 8012ae2:	d807      	bhi.n	8012af4 <memmove+0x20>
 8012ae4:	1e43      	subs	r3, r0, #1
 8012ae6:	42a1      	cmp	r1, r4
 8012ae8:	d008      	beq.n	8012afc <memmove+0x28>
 8012aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012aee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012af2:	e7f8      	b.n	8012ae6 <memmove+0x12>
 8012af4:	4402      	add	r2, r0
 8012af6:	4601      	mov	r1, r0
 8012af8:	428a      	cmp	r2, r1
 8012afa:	d100      	bne.n	8012afe <memmove+0x2a>
 8012afc:	bd10      	pop	{r4, pc}
 8012afe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b06:	e7f7      	b.n	8012af8 <memmove+0x24>

08012b08 <__assert_func>:
 8012b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012b0a:	4614      	mov	r4, r2
 8012b0c:	461a      	mov	r2, r3
 8012b0e:	4b09      	ldr	r3, [pc, #36]	@ (8012b34 <__assert_func+0x2c>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	4605      	mov	r5, r0
 8012b14:	68d8      	ldr	r0, [r3, #12]
 8012b16:	b954      	cbnz	r4, 8012b2e <__assert_func+0x26>
 8012b18:	4b07      	ldr	r3, [pc, #28]	@ (8012b38 <__assert_func+0x30>)
 8012b1a:	461c      	mov	r4, r3
 8012b1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012b20:	9100      	str	r1, [sp, #0]
 8012b22:	462b      	mov	r3, r5
 8012b24:	4905      	ldr	r1, [pc, #20]	@ (8012b3c <__assert_func+0x34>)
 8012b26:	f000 f86f 	bl	8012c08 <fiprintf>
 8012b2a:	f000 f903 	bl	8012d34 <abort>
 8012b2e:	4b04      	ldr	r3, [pc, #16]	@ (8012b40 <__assert_func+0x38>)
 8012b30:	e7f4      	b.n	8012b1c <__assert_func+0x14>
 8012b32:	bf00      	nop
 8012b34:	2000004c 	.word	0x2000004c
 8012b38:	080185c6 	.word	0x080185c6
 8012b3c:	08018598 	.word	0x08018598
 8012b40:	0801858b 	.word	0x0801858b

08012b44 <_calloc_r>:
 8012b44:	b570      	push	{r4, r5, r6, lr}
 8012b46:	fba1 5402 	umull	r5, r4, r1, r2
 8012b4a:	b93c      	cbnz	r4, 8012b5c <_calloc_r+0x18>
 8012b4c:	4629      	mov	r1, r5
 8012b4e:	f7fd fb11 	bl	8010174 <_malloc_r>
 8012b52:	4606      	mov	r6, r0
 8012b54:	b928      	cbnz	r0, 8012b62 <_calloc_r+0x1e>
 8012b56:	2600      	movs	r6, #0
 8012b58:	4630      	mov	r0, r6
 8012b5a:	bd70      	pop	{r4, r5, r6, pc}
 8012b5c:	220c      	movs	r2, #12
 8012b5e:	6002      	str	r2, [r0, #0]
 8012b60:	e7f9      	b.n	8012b56 <_calloc_r+0x12>
 8012b62:	462a      	mov	r2, r5
 8012b64:	4621      	mov	r1, r4
 8012b66:	f7fe f922 	bl	8010dae <memset>
 8012b6a:	e7f5      	b.n	8012b58 <_calloc_r+0x14>

08012b6c <__ascii_mbtowc>:
 8012b6c:	b082      	sub	sp, #8
 8012b6e:	b901      	cbnz	r1, 8012b72 <__ascii_mbtowc+0x6>
 8012b70:	a901      	add	r1, sp, #4
 8012b72:	b142      	cbz	r2, 8012b86 <__ascii_mbtowc+0x1a>
 8012b74:	b14b      	cbz	r3, 8012b8a <__ascii_mbtowc+0x1e>
 8012b76:	7813      	ldrb	r3, [r2, #0]
 8012b78:	600b      	str	r3, [r1, #0]
 8012b7a:	7812      	ldrb	r2, [r2, #0]
 8012b7c:	1e10      	subs	r0, r2, #0
 8012b7e:	bf18      	it	ne
 8012b80:	2001      	movne	r0, #1
 8012b82:	b002      	add	sp, #8
 8012b84:	4770      	bx	lr
 8012b86:	4610      	mov	r0, r2
 8012b88:	e7fb      	b.n	8012b82 <__ascii_mbtowc+0x16>
 8012b8a:	f06f 0001 	mvn.w	r0, #1
 8012b8e:	e7f8      	b.n	8012b82 <__ascii_mbtowc+0x16>

08012b90 <_realloc_r>:
 8012b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b94:	4680      	mov	r8, r0
 8012b96:	4615      	mov	r5, r2
 8012b98:	460c      	mov	r4, r1
 8012b9a:	b921      	cbnz	r1, 8012ba6 <_realloc_r+0x16>
 8012b9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ba0:	4611      	mov	r1, r2
 8012ba2:	f7fd bae7 	b.w	8010174 <_malloc_r>
 8012ba6:	b92a      	cbnz	r2, 8012bb4 <_realloc_r+0x24>
 8012ba8:	f7fe ffee 	bl	8011b88 <_free_r>
 8012bac:	2400      	movs	r4, #0
 8012bae:	4620      	mov	r0, r4
 8012bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bb4:	f000 f8c5 	bl	8012d42 <_malloc_usable_size_r>
 8012bb8:	4285      	cmp	r5, r0
 8012bba:	4606      	mov	r6, r0
 8012bbc:	d802      	bhi.n	8012bc4 <_realloc_r+0x34>
 8012bbe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012bc2:	d8f4      	bhi.n	8012bae <_realloc_r+0x1e>
 8012bc4:	4629      	mov	r1, r5
 8012bc6:	4640      	mov	r0, r8
 8012bc8:	f7fd fad4 	bl	8010174 <_malloc_r>
 8012bcc:	4607      	mov	r7, r0
 8012bce:	2800      	cmp	r0, #0
 8012bd0:	d0ec      	beq.n	8012bac <_realloc_r+0x1c>
 8012bd2:	42b5      	cmp	r5, r6
 8012bd4:	462a      	mov	r2, r5
 8012bd6:	4621      	mov	r1, r4
 8012bd8:	bf28      	it	cs
 8012bda:	4632      	movcs	r2, r6
 8012bdc:	f7fe f977 	bl	8010ece <memcpy>
 8012be0:	4621      	mov	r1, r4
 8012be2:	4640      	mov	r0, r8
 8012be4:	f7fe ffd0 	bl	8011b88 <_free_r>
 8012be8:	463c      	mov	r4, r7
 8012bea:	e7e0      	b.n	8012bae <_realloc_r+0x1e>

08012bec <__ascii_wctomb>:
 8012bec:	4603      	mov	r3, r0
 8012bee:	4608      	mov	r0, r1
 8012bf0:	b141      	cbz	r1, 8012c04 <__ascii_wctomb+0x18>
 8012bf2:	2aff      	cmp	r2, #255	@ 0xff
 8012bf4:	d904      	bls.n	8012c00 <__ascii_wctomb+0x14>
 8012bf6:	228a      	movs	r2, #138	@ 0x8a
 8012bf8:	601a      	str	r2, [r3, #0]
 8012bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8012bfe:	4770      	bx	lr
 8012c00:	700a      	strb	r2, [r1, #0]
 8012c02:	2001      	movs	r0, #1
 8012c04:	4770      	bx	lr
	...

08012c08 <fiprintf>:
 8012c08:	b40e      	push	{r1, r2, r3}
 8012c0a:	b503      	push	{r0, r1, lr}
 8012c0c:	4601      	mov	r1, r0
 8012c0e:	ab03      	add	r3, sp, #12
 8012c10:	4805      	ldr	r0, [pc, #20]	@ (8012c28 <fiprintf+0x20>)
 8012c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c16:	6800      	ldr	r0, [r0, #0]
 8012c18:	9301      	str	r3, [sp, #4]
 8012c1a:	f7ff fd03 	bl	8012624 <_vfiprintf_r>
 8012c1e:	b002      	add	sp, #8
 8012c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c24:	b003      	add	sp, #12
 8012c26:	4770      	bx	lr
 8012c28:	2000004c 	.word	0x2000004c

08012c2c <__swhatbuf_r>:
 8012c2c:	b570      	push	{r4, r5, r6, lr}
 8012c2e:	460c      	mov	r4, r1
 8012c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c34:	2900      	cmp	r1, #0
 8012c36:	b096      	sub	sp, #88	@ 0x58
 8012c38:	4615      	mov	r5, r2
 8012c3a:	461e      	mov	r6, r3
 8012c3c:	da0d      	bge.n	8012c5a <__swhatbuf_r+0x2e>
 8012c3e:	89a3      	ldrh	r3, [r4, #12]
 8012c40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012c44:	f04f 0100 	mov.w	r1, #0
 8012c48:	bf14      	ite	ne
 8012c4a:	2340      	movne	r3, #64	@ 0x40
 8012c4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012c50:	2000      	movs	r0, #0
 8012c52:	6031      	str	r1, [r6, #0]
 8012c54:	602b      	str	r3, [r5, #0]
 8012c56:	b016      	add	sp, #88	@ 0x58
 8012c58:	bd70      	pop	{r4, r5, r6, pc}
 8012c5a:	466a      	mov	r2, sp
 8012c5c:	f000 f848 	bl	8012cf0 <_fstat_r>
 8012c60:	2800      	cmp	r0, #0
 8012c62:	dbec      	blt.n	8012c3e <__swhatbuf_r+0x12>
 8012c64:	9901      	ldr	r1, [sp, #4]
 8012c66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012c6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012c6e:	4259      	negs	r1, r3
 8012c70:	4159      	adcs	r1, r3
 8012c72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012c76:	e7eb      	b.n	8012c50 <__swhatbuf_r+0x24>

08012c78 <__smakebuf_r>:
 8012c78:	898b      	ldrh	r3, [r1, #12]
 8012c7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c7c:	079d      	lsls	r5, r3, #30
 8012c7e:	4606      	mov	r6, r0
 8012c80:	460c      	mov	r4, r1
 8012c82:	d507      	bpl.n	8012c94 <__smakebuf_r+0x1c>
 8012c84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012c88:	6023      	str	r3, [r4, #0]
 8012c8a:	6123      	str	r3, [r4, #16]
 8012c8c:	2301      	movs	r3, #1
 8012c8e:	6163      	str	r3, [r4, #20]
 8012c90:	b003      	add	sp, #12
 8012c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c94:	ab01      	add	r3, sp, #4
 8012c96:	466a      	mov	r2, sp
 8012c98:	f7ff ffc8 	bl	8012c2c <__swhatbuf_r>
 8012c9c:	9f00      	ldr	r7, [sp, #0]
 8012c9e:	4605      	mov	r5, r0
 8012ca0:	4639      	mov	r1, r7
 8012ca2:	4630      	mov	r0, r6
 8012ca4:	f7fd fa66 	bl	8010174 <_malloc_r>
 8012ca8:	b948      	cbnz	r0, 8012cbe <__smakebuf_r+0x46>
 8012caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cae:	059a      	lsls	r2, r3, #22
 8012cb0:	d4ee      	bmi.n	8012c90 <__smakebuf_r+0x18>
 8012cb2:	f023 0303 	bic.w	r3, r3, #3
 8012cb6:	f043 0302 	orr.w	r3, r3, #2
 8012cba:	81a3      	strh	r3, [r4, #12]
 8012cbc:	e7e2      	b.n	8012c84 <__smakebuf_r+0xc>
 8012cbe:	89a3      	ldrh	r3, [r4, #12]
 8012cc0:	6020      	str	r0, [r4, #0]
 8012cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012cc6:	81a3      	strh	r3, [r4, #12]
 8012cc8:	9b01      	ldr	r3, [sp, #4]
 8012cca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012cce:	b15b      	cbz	r3, 8012ce8 <__smakebuf_r+0x70>
 8012cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012cd4:	4630      	mov	r0, r6
 8012cd6:	f000 f81d 	bl	8012d14 <_isatty_r>
 8012cda:	b128      	cbz	r0, 8012ce8 <__smakebuf_r+0x70>
 8012cdc:	89a3      	ldrh	r3, [r4, #12]
 8012cde:	f023 0303 	bic.w	r3, r3, #3
 8012ce2:	f043 0301 	orr.w	r3, r3, #1
 8012ce6:	81a3      	strh	r3, [r4, #12]
 8012ce8:	89a3      	ldrh	r3, [r4, #12]
 8012cea:	431d      	orrs	r5, r3
 8012cec:	81a5      	strh	r5, [r4, #12]
 8012cee:	e7cf      	b.n	8012c90 <__smakebuf_r+0x18>

08012cf0 <_fstat_r>:
 8012cf0:	b538      	push	{r3, r4, r5, lr}
 8012cf2:	4d07      	ldr	r5, [pc, #28]	@ (8012d10 <_fstat_r+0x20>)
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	4604      	mov	r4, r0
 8012cf8:	4608      	mov	r0, r1
 8012cfa:	4611      	mov	r1, r2
 8012cfc:	602b      	str	r3, [r5, #0]
 8012cfe:	f7f2 f8fd 	bl	8004efc <_fstat>
 8012d02:	1c43      	adds	r3, r0, #1
 8012d04:	d102      	bne.n	8012d0c <_fstat_r+0x1c>
 8012d06:	682b      	ldr	r3, [r5, #0]
 8012d08:	b103      	cbz	r3, 8012d0c <_fstat_r+0x1c>
 8012d0a:	6023      	str	r3, [r4, #0]
 8012d0c:	bd38      	pop	{r3, r4, r5, pc}
 8012d0e:	bf00      	nop
 8012d10:	20000c80 	.word	0x20000c80

08012d14 <_isatty_r>:
 8012d14:	b538      	push	{r3, r4, r5, lr}
 8012d16:	4d06      	ldr	r5, [pc, #24]	@ (8012d30 <_isatty_r+0x1c>)
 8012d18:	2300      	movs	r3, #0
 8012d1a:	4604      	mov	r4, r0
 8012d1c:	4608      	mov	r0, r1
 8012d1e:	602b      	str	r3, [r5, #0]
 8012d20:	f7f2 f8fc 	bl	8004f1c <_isatty>
 8012d24:	1c43      	adds	r3, r0, #1
 8012d26:	d102      	bne.n	8012d2e <_isatty_r+0x1a>
 8012d28:	682b      	ldr	r3, [r5, #0]
 8012d2a:	b103      	cbz	r3, 8012d2e <_isatty_r+0x1a>
 8012d2c:	6023      	str	r3, [r4, #0]
 8012d2e:	bd38      	pop	{r3, r4, r5, pc}
 8012d30:	20000c80 	.word	0x20000c80

08012d34 <abort>:
 8012d34:	b508      	push	{r3, lr}
 8012d36:	2006      	movs	r0, #6
 8012d38:	f000 f834 	bl	8012da4 <raise>
 8012d3c:	2001      	movs	r0, #1
 8012d3e:	f7f2 f88d 	bl	8004e5c <_exit>

08012d42 <_malloc_usable_size_r>:
 8012d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d46:	1f18      	subs	r0, r3, #4
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	bfbc      	itt	lt
 8012d4c:	580b      	ldrlt	r3, [r1, r0]
 8012d4e:	18c0      	addlt	r0, r0, r3
 8012d50:	4770      	bx	lr

08012d52 <_raise_r>:
 8012d52:	291f      	cmp	r1, #31
 8012d54:	b538      	push	{r3, r4, r5, lr}
 8012d56:	4605      	mov	r5, r0
 8012d58:	460c      	mov	r4, r1
 8012d5a:	d904      	bls.n	8012d66 <_raise_r+0x14>
 8012d5c:	2316      	movs	r3, #22
 8012d5e:	6003      	str	r3, [r0, #0]
 8012d60:	f04f 30ff 	mov.w	r0, #4294967295
 8012d64:	bd38      	pop	{r3, r4, r5, pc}
 8012d66:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012d68:	b112      	cbz	r2, 8012d70 <_raise_r+0x1e>
 8012d6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012d6e:	b94b      	cbnz	r3, 8012d84 <_raise_r+0x32>
 8012d70:	4628      	mov	r0, r5
 8012d72:	f000 f831 	bl	8012dd8 <_getpid_r>
 8012d76:	4622      	mov	r2, r4
 8012d78:	4601      	mov	r1, r0
 8012d7a:	4628      	mov	r0, r5
 8012d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d80:	f000 b818 	b.w	8012db4 <_kill_r>
 8012d84:	2b01      	cmp	r3, #1
 8012d86:	d00a      	beq.n	8012d9e <_raise_r+0x4c>
 8012d88:	1c59      	adds	r1, r3, #1
 8012d8a:	d103      	bne.n	8012d94 <_raise_r+0x42>
 8012d8c:	2316      	movs	r3, #22
 8012d8e:	6003      	str	r3, [r0, #0]
 8012d90:	2001      	movs	r0, #1
 8012d92:	e7e7      	b.n	8012d64 <_raise_r+0x12>
 8012d94:	2100      	movs	r1, #0
 8012d96:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012d9a:	4620      	mov	r0, r4
 8012d9c:	4798      	blx	r3
 8012d9e:	2000      	movs	r0, #0
 8012da0:	e7e0      	b.n	8012d64 <_raise_r+0x12>
	...

08012da4 <raise>:
 8012da4:	4b02      	ldr	r3, [pc, #8]	@ (8012db0 <raise+0xc>)
 8012da6:	4601      	mov	r1, r0
 8012da8:	6818      	ldr	r0, [r3, #0]
 8012daa:	f7ff bfd2 	b.w	8012d52 <_raise_r>
 8012dae:	bf00      	nop
 8012db0:	2000004c 	.word	0x2000004c

08012db4 <_kill_r>:
 8012db4:	b538      	push	{r3, r4, r5, lr}
 8012db6:	4d07      	ldr	r5, [pc, #28]	@ (8012dd4 <_kill_r+0x20>)
 8012db8:	2300      	movs	r3, #0
 8012dba:	4604      	mov	r4, r0
 8012dbc:	4608      	mov	r0, r1
 8012dbe:	4611      	mov	r1, r2
 8012dc0:	602b      	str	r3, [r5, #0]
 8012dc2:	f7f2 f83b 	bl	8004e3c <_kill>
 8012dc6:	1c43      	adds	r3, r0, #1
 8012dc8:	d102      	bne.n	8012dd0 <_kill_r+0x1c>
 8012dca:	682b      	ldr	r3, [r5, #0]
 8012dcc:	b103      	cbz	r3, 8012dd0 <_kill_r+0x1c>
 8012dce:	6023      	str	r3, [r4, #0]
 8012dd0:	bd38      	pop	{r3, r4, r5, pc}
 8012dd2:	bf00      	nop
 8012dd4:	20000c80 	.word	0x20000c80

08012dd8 <_getpid_r>:
 8012dd8:	f7f2 b828 	b.w	8004e2c <_getpid>

08012ddc <_init>:
 8012ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dde:	bf00      	nop
 8012de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012de2:	bc08      	pop	{r3}
 8012de4:	469e      	mov	lr, r3
 8012de6:	4770      	bx	lr

08012de8 <_fini>:
 8012de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dea:	bf00      	nop
 8012dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dee:	bc08      	pop	{r3}
 8012df0:	469e      	mov	lr, r3
 8012df2:	4770      	bx	lr
